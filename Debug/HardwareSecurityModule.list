
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013618  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  08013864  08013864  00014864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147bc  080147bc  00016180  2**0
                  CONTENTS
  4 .ARM          00000008  080147bc  080147bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147c4  080147c4  00016180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147c4  080147c4  000157c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080147c8  080147c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  080147cc  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000111e0  20000180  0801494c  00016180  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20011360  0801494c  00016360  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00016180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029066  00000000  00000000  000161b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c2f  00000000  00000000  0003f21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f48  00000000  00000000  00044e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017d9  00000000  00000000  00046d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a002  00000000  00000000  00048571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030e49  00000000  00000000  00082573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c3f8  00000000  00000000  000b33bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ff7b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cb4  00000000  00000000  001ff7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  002084ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	0801384c 	.word	0x0801384c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	0801384c 	.word	0x0801384c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GetCommandName>:

#include <stdio.h>
#include <stdint.h>

static const char* GetCommandName(uint8_t cmd)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    switch (cmd)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	2b0e      	cmp	r3, #14
 80005b4:	d832      	bhi.n	800061c <GetCommandName+0x78>
 80005b6:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <GetCommandName+0x18>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005f9 	.word	0x080005f9
 80005c0:	080005fd 	.word	0x080005fd
 80005c4:	08000601 	.word	0x08000601
 80005c8:	08000605 	.word	0x08000605
 80005cc:	08000609 	.word	0x08000609
 80005d0:	0800060d 	.word	0x0800060d
 80005d4:	08000611 	.word	0x08000611
 80005d8:	08000615 	.word	0x08000615
 80005dc:	0800061d 	.word	0x0800061d
 80005e0:	0800061d 	.word	0x0800061d
 80005e4:	0800061d 	.word	0x0800061d
 80005e8:	0800061d 	.word	0x0800061d
 80005ec:	0800061d 	.word	0x0800061d
 80005f0:	0800061d 	.word	0x0800061d
 80005f4:	08000619 	.word	0x08000619
    {
        case CMD_ENCRYPT:   	return "Encryption Operation";
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <GetCommandName+0x88>)
 80005fa:	e010      	b.n	800061e <GetCommandName+0x7a>
        case CMD_DECRYPT:   	return "Decryption Operation";
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <GetCommandName+0x8c>)
 80005fe:	e00e      	b.n	800061e <GetCommandName+0x7a>
        case CMD_HASH:      	return "Hashing Operation";
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <GetCommandName+0x90>)
 8000602:	e00c      	b.n	800061e <GetCommandName+0x7a>
        case CMD_RANDOM:   		return "RNG Operation";
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <GetCommandName+0x94>)
 8000606:	e00a      	b.n	800061e <GetCommandName+0x7a>
        case CMD_OTP:   		return "OTP Operation";
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <GetCommandName+0x98>)
 800060a:	e008      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_GEN:   	return "Key Generation Operation";
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <GetCommandName+0x9c>)
 800060e:	e006      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_STORE:     return "Key Store Operation";
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <GetCommandName+0xa0>)
 8000612:	e004      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_ERASE:   	return "Key Erase Operation";
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <GetCommandName+0xa4>)
 8000616:	e002      	b.n	800061e <GetCommandName+0x7a>
        case CMD_PING:   		return "Device Ping Operation";
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <GetCommandName+0xa8>)
 800061a:	e000      	b.n	800061e <GetCommandName+0x7a>
        default:            	return "Unknown Command";
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <GetCommandName+0xac>)
    }
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	08013864 	.word	0x08013864
 8000630:	0801387c 	.word	0x0801387c
 8000634:	08013894 	.word	0x08013894
 8000638:	080138a8 	.word	0x080138a8
 800063c:	080138b8 	.word	0x080138b8
 8000640:	080138c8 	.word	0x080138c8
 8000644:	080138e4 	.word	0x080138e4
 8000648:	080138f8 	.word	0x080138f8
 800064c:	0801390c 	.word	0x0801390c
 8000650:	08013924 	.word	0x08013924

08000654 <GetOptionName>:

static const char* GetOptionName(uint8_t option)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
    switch (option)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	3b01      	subs	r3, #1
 8000662:	2b3e      	cmp	r3, #62	@ 0x3e
 8000664:	f200 80b2 	bhi.w	80007cc <GetOptionName+0x178>
 8000668:	a201      	add	r2, pc, #4	@ (adr r2, 8000670 <GetOptionName+0x1c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	0800076d 	.word	0x0800076d
 8000674:	08000771 	.word	0x08000771
 8000678:	080007cd 	.word	0x080007cd
 800067c:	080007cd 	.word	0x080007cd
 8000680:	080007cd 	.word	0x080007cd
 8000684:	080007cd 	.word	0x080007cd
 8000688:	080007cd 	.word	0x080007cd
 800068c:	080007cd 	.word	0x080007cd
 8000690:	080007cd 	.word	0x080007cd
 8000694:	080007cd 	.word	0x080007cd
 8000698:	080007cd 	.word	0x080007cd
 800069c:	080007cd 	.word	0x080007cd
 80006a0:	080007cd 	.word	0x080007cd
 80006a4:	080007cd 	.word	0x080007cd
 80006a8:	080007cd 	.word	0x080007cd
 80006ac:	080007cd 	.word	0x080007cd
 80006b0:	08000775 	.word	0x08000775
 80006b4:	08000779 	.word	0x08000779
 80006b8:	080007cd 	.word	0x080007cd
 80006bc:	080007cd 	.word	0x080007cd
 80006c0:	080007cd 	.word	0x080007cd
 80006c4:	080007cd 	.word	0x080007cd
 80006c8:	080007cd 	.word	0x080007cd
 80006cc:	080007cd 	.word	0x080007cd
 80006d0:	080007cd 	.word	0x080007cd
 80006d4:	080007cd 	.word	0x080007cd
 80006d8:	080007cd 	.word	0x080007cd
 80006dc:	080007cd 	.word	0x080007cd
 80006e0:	080007cd 	.word	0x080007cd
 80006e4:	080007cd 	.word	0x080007cd
 80006e8:	080007cd 	.word	0x080007cd
 80006ec:	080007cd 	.word	0x080007cd
 80006f0:	0800077d 	.word	0x0800077d
 80006f4:	08000781 	.word	0x08000781
 80006f8:	08000785 	.word	0x08000785
 80006fc:	08000789 	.word	0x08000789
 8000700:	0800078d 	.word	0x0800078d
 8000704:	08000791 	.word	0x08000791
 8000708:	080007cd 	.word	0x080007cd
 800070c:	080007cd 	.word	0x080007cd
 8000710:	080007cd 	.word	0x080007cd
 8000714:	080007cd 	.word	0x080007cd
 8000718:	080007cd 	.word	0x080007cd
 800071c:	080007cd 	.word	0x080007cd
 8000720:	080007cd 	.word	0x080007cd
 8000724:	080007cd 	.word	0x080007cd
 8000728:	080007cd 	.word	0x080007cd
 800072c:	080007cd 	.word	0x080007cd
 8000730:	08000795 	.word	0x08000795
 8000734:	08000799 	.word	0x08000799
 8000738:	0800079d 	.word	0x0800079d
 800073c:	080007a1 	.word	0x080007a1
 8000740:	080007a5 	.word	0x080007a5
 8000744:	080007a9 	.word	0x080007a9
 8000748:	080007ad 	.word	0x080007ad
 800074c:	080007b1 	.word	0x080007b1
 8000750:	080007b5 	.word	0x080007b5
 8000754:	080007b9 	.word	0x080007b9
 8000758:	080007cd 	.word	0x080007cd
 800075c:	080007bd 	.word	0x080007bd
 8000760:	080007c1 	.word	0x080007c1
 8000764:	080007c5 	.word	0x080007c5
 8000768:	080007c9 	.word	0x080007c9
    {
    	case OPTION_ENCRYP_KEY128:	return "128-bit Encryption";
 800076c:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <GetOptionName+0x188>)
 800076e:	e02e      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_ENCRYP_KEY256:	return "256-bit Encryption";
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <GetOptionName+0x18c>)
 8000772:	e02c      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_DECRYP_KEY128:	return "128-bit Decryption";
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <GetOptionName+0x190>)
 8000776:	e02a      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_DECRYP_KEY256:	return "256-bit Decryption";
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <GetOptionName+0x194>)
 800077a:	e028      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_HASH_SHA224:	return "SHA224 Hashing Algorithm";
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <GetOptionName+0x198>)
 800077e:	e026      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_HASH_SHA256:	return "SHA256 Hashing Algorithm";
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <GetOptionName+0x19c>)
 8000782:	e024      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_HASH_SHA384:	return "SHA384 Hashing Algorithm";
 8000784:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <GetOptionName+0x1a0>)
 8000786:	e022      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_HASH_SHA512:	return "SHA512 Hashing Algorithm";
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <GetOptionName+0x1a4>)
 800078a:	e020      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_HMAC_SHA224:	return "SHA224 HMAC Algorithm";
 800078c:	4b1b      	ldr	r3, [pc, #108]	@ (80007fc <GetOptionName+0x1a8>)
 800078e:	e01e      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_HMAC_SHA256:	return "SHA256 HMAC Algorithm";
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <GetOptionName+0x1ac>)
 8000792:	e01c      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0004:		return "4-byte Random Number Generation";
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <GetOptionName+0x1b0>)
 8000796:	e01a      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0008:		return "8-byte Random Number Generation";
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <GetOptionName+0x1b4>)
 800079a:	e018      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0016:		return "16-byte Random Number Generation";
 800079c:	4b1b      	ldr	r3, [pc, #108]	@ (800080c <GetOptionName+0x1b8>)
 800079e:	e016      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0024:		return "24-byte Random Number Generation";
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <GetOptionName+0x1bc>)
 80007a2:	e014      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0032:		return "32-byte Random Number Generation";
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <GetOptionName+0x1c0>)
 80007a6:	e012      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0048:		return "48-byte Random Number Generation";
 80007a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <GetOptionName+0x1c4>)
 80007aa:	e010      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0064:		return "64-byte Random Number Generation";
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <GetOptionName+0x1c8>)
 80007ae:	e00e      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0066:		return "66-byte Random Number Generation";
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <GetOptionName+0x1cc>)
 80007b2:	e00c      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0128:		return "128-byte Random Number Generation";
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <GetOptionName+0x1d0>)
 80007b6:	e00a      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0256:		return "256-byte Random Number Generation";
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <GetOptionName+0x1d4>)
 80007ba:	e008      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_0512:		return "512-byte Random Number Generation";
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <GetOptionName+0x1d8>)
 80007be:	e006      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_1024:		return "1024-byte Random Number Generation";
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <GetOptionName+0x1dc>)
 80007c2:	e004      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_2048:		return "2048-byte Random Number Generation";
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <GetOptionName+0x1e0>)
 80007c6:	e002      	b.n	80007ce <GetOptionName+0x17a>
		case OPTION_RNG_4096:		return "4096-byte Random Number Generation";
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <GetOptionName+0x1e4>)
 80007ca:	e000      	b.n	80007ce <GetOptionName+0x17a>
		default:					return "Unknown Command"; 	break;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <GetOptionName+0x1e8>)
    }
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	08013934 	.word	0x08013934
 80007e0:	08013948 	.word	0x08013948
 80007e4:	0801395c 	.word	0x0801395c
 80007e8:	08013970 	.word	0x08013970
 80007ec:	08013984 	.word	0x08013984
 80007f0:	080139a0 	.word	0x080139a0
 80007f4:	080139bc 	.word	0x080139bc
 80007f8:	080139d8 	.word	0x080139d8
 80007fc:	080139f4 	.word	0x080139f4
 8000800:	08013a0c 	.word	0x08013a0c
 8000804:	08013a24 	.word	0x08013a24
 8000808:	08013a44 	.word	0x08013a44
 800080c:	08013a64 	.word	0x08013a64
 8000810:	08013a88 	.word	0x08013a88
 8000814:	08013aac 	.word	0x08013aac
 8000818:	08013ad0 	.word	0x08013ad0
 800081c:	08013af4 	.word	0x08013af4
 8000820:	08013b18 	.word	0x08013b18
 8000824:	08013b3c 	.word	0x08013b3c
 8000828:	08013b60 	.word	0x08013b60
 800082c:	08013b84 	.word	0x08013b84
 8000830:	08013ba8 	.word	0x08013ba8
 8000834:	08013bcc 	.word	0x08013bcc
 8000838:	08013bf0 	.word	0x08013bf0
 800083c:	08013924 	.word	0x08013924

08000840 <LogParsedPacket>:

static void LogParsedPacket(const ParsedPacket_t* packet)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	@ 0x50
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d103      	bne.n	8000856 <LogParsedPacket+0x16>
    {
        log_error("ParsedPacket is NULL");
 800084e:	4841      	ldr	r0, [pc, #260]	@ (8000954 <LogParsedPacket+0x114>)
 8000850:	f001 f864 	bl	800191c <log_error>
        return;
 8000854:	e07b      	b.n	800094e <LogParsedPacket+0x10e>
    }

    log_debug("PARSED PACKET:");
 8000856:	4840      	ldr	r0, [pc, #256]	@ (8000958 <LogParsedPacket+0x118>)
 8000858:	f001 f812 	bl	8001880 <log_debug>
    log_debug("TXID       : %u", packet->transactionID);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	483e      	ldr	r0, [pc, #248]	@ (800095c <LogParsedPacket+0x11c>)
 8000864:	f001 f80c 	bl	8001880 <log_debug>
    log_debug("CMD        : %s", GetCommandName(packet->cmd));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	791b      	ldrb	r3, [r3, #4]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe99 	bl	80005a4 <GetCommandName>
 8000872:	4603      	mov	r3, r0
 8000874:	4619      	mov	r1, r3
 8000876:	483a      	ldr	r0, [pc, #232]	@ (8000960 <LogParsedPacket+0x120>)
 8000878:	f001 f802 	bl	8001880 <log_debug>
    log_debug("OPTION     : %s", GetOptionName(packet->option));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	795b      	ldrb	r3, [r3, #5]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fee7 	bl	8000654 <GetOptionName>
 8000886:	4603      	mov	r3, r0
 8000888:	4619      	mov	r1, r3
 800088a:	4836      	ldr	r0, [pc, #216]	@ (8000964 <LogParsedPacket+0x124>)
 800088c:	f000 fff8 	bl	8001880 <log_debug>
    log_debug("INPUT SIZE : %hu bytes", packet->inputSize);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	88db      	ldrh	r3, [r3, #6]
 8000894:	4619      	mov	r1, r3
 8000896:	4834      	ldr	r0, [pc, #208]	@ (8000968 <LogParsedPacket+0x128>)
 8000898:	f000 fff2 	bl	8001880 <log_debug>

    const uint8_t* data = packet->inputData;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3308      	adds	r3, #8
 80008a0:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->inputSize;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	88db      	ldrh	r3, [r3, #6]
 80008a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 80008a8:	2300      	movs	r3, #0
 80008aa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80008ae:	e049      	b.n	8000944 <LogParsedPacket+0x104>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	222d      	movs	r2, #45	@ 0x2d
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f011 ffe7 	bl	8012890 <memset>
        char* ptr = line;
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80008ce:	e017      	b.n	8000900 <LogParsedPacket+0xc0>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 80008d0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80008d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008d8:	4413      	add	r3, r2
 80008da:	461a      	mov	r2, r3
 80008dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80008de:	4413      	add	r3, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	4921      	ldr	r1, [pc, #132]	@ (800096c <LogParsedPacket+0x12c>)
 80008e6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008e8:	f011 ff36 	bl	8012758 <siprintf>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008f2:	4413      	add	r3, r2
 80008f4:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80008f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008fa:	3301      	adds	r3, #1
 80008fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000900:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d807      	bhi.n	8000918 <LogParsedPacket+0xd8>
 8000908:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800090c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000910:	441a      	add	r2, r3
 8000912:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000914:	429a      	cmp	r2, r3
 8000916:	dbdb      	blt.n	80008d0 <LogParsedPacket+0x90>
        }

        if (i == 0)
 8000918:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800091c:	2b00      	cmp	r3, #0
 800091e:	d106      	bne.n	800092e <LogParsedPacket+0xee>
        {
        	log_debug("INPUT DATA : %s", line);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4619      	mov	r1, r3
 8000926:	4812      	ldr	r0, [pc, #72]	@ (8000970 <LogParsedPacket+0x130>)
 8000928:	f000 ffaa 	bl	8001880 <log_debug>
 800092c:	e005      	b.n	800093a <LogParsedPacket+0xfa>
        }
        else
        {
        	log_debug("             %s", line);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	480f      	ldr	r0, [pc, #60]	@ (8000974 <LogParsedPacket+0x134>)
 8000936:	f000 ffa3 	bl	8001880 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 800093a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800093e:	3310      	adds	r3, #16
 8000940:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000944:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000948:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800094a:	429a      	cmp	r2, r3
 800094c:	d3b0      	bcc.n	80008b0 <LogParsedPacket+0x70>
        }
    }
    // log_debug("EOD FLAG    : %04X", packet->out_eod_flag);
}
 800094e:	3750      	adds	r7, #80	@ 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	08013c14 	.word	0x08013c14
 8000958:	08013c2c 	.word	0x08013c2c
 800095c:	08013c3c 	.word	0x08013c3c
 8000960:	08013c4c 	.word	0x08013c4c
 8000964:	08013c5c 	.word	0x08013c5c
 8000968:	08013c6c 	.word	0x08013c6c
 800096c:	08013c84 	.word	0x08013c84
 8000970:	08013c8c 	.word	0x08013c8c
 8000974:	08013c9c 	.word	0x08013c9c

08000978 <LogResponsePacket>:

static void LogResponsePacket(const ResponsePacket_t* packet)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	@ 0x50
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d103      	bne.n	800098e <LogResponsePacket+0x16>
    {
        log_error("ResponsePacket is NULL");
 8000986:	483b      	ldr	r0, [pc, #236]	@ (8000a74 <LogResponsePacket+0xfc>)
 8000988:	f000 ffc8 	bl	800191c <log_error>
        return;
 800098c:	e06f      	b.n	8000a6e <LogResponsePacket+0xf6>
    }

    log_debug("RESPONSE PACKET");
 800098e:	483a      	ldr	r0, [pc, #232]	@ (8000a78 <LogResponsePacket+0x100>)
 8000990:	f000 ff76 	bl	8001880 <log_debug>
    log_debug("TXID        : %u", packet->transactionID);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	4838      	ldr	r0, [pc, #224]	@ (8000a7c <LogResponsePacket+0x104>)
 800099c:	f000 ff70 	bl	8001880 <log_debug>
    log_debug("OUTPUT SIZE : %u bytes", packet->outputSize);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	889b      	ldrh	r3, [r3, #4]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4836      	ldr	r0, [pc, #216]	@ (8000a80 <LogResponsePacket+0x108>)
 80009a8:	f000 ff6a 	bl	8001880 <log_debug>

    const uint8_t* data = packet->outputData;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3306      	adds	r3, #6
 80009b0:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->outputSize;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	889b      	ldrh	r3, [r3, #4]
 80009b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80009be:	e049      	b.n	8000a54 <LogResponsePacket+0xdc>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	222d      	movs	r2, #45	@ 0x2d
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f011 ff5f 	bl	8012890 <memset>
        char* ptr = line;
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80009d8:	2300      	movs	r3, #0
 80009da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80009de:	e017      	b.n	8000a10 <LogResponsePacket+0x98>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 80009e0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80009e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009e8:	4413      	add	r3, r2
 80009ea:	461a      	mov	r2, r3
 80009ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4923      	ldr	r1, [pc, #140]	@ (8000a84 <LogResponsePacket+0x10c>)
 80009f6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80009f8:	f011 feae 	bl	8012758 <siprintf>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a02:	4413      	add	r3, r2
 8000a04:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000a06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000a10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d807      	bhi.n	8000a28 <LogResponsePacket+0xb0>
 8000a18:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a20:	441a      	add	r2, r3
 8000a22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbdb      	blt.n	80009e0 <LogResponsePacket+0x68>
        }

        if (i == 0)
 8000a28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d106      	bne.n	8000a3e <LogResponsePacket+0xc6>
            log_debug("OUTPUT DATA : %s", line);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	4814      	ldr	r0, [pc, #80]	@ (8000a88 <LogResponsePacket+0x110>)
 8000a38:	f000 ff22 	bl	8001880 <log_debug>
 8000a3c:	e005      	b.n	8000a4a <LogResponsePacket+0xd2>
        else
            log_debug("              %s", line);
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4619      	mov	r1, r3
 8000a44:	4811      	ldr	r0, [pc, #68]	@ (8000a8c <LogResponsePacket+0x114>)
 8000a46:	f000 ff1b 	bl	8001880 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000a4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a4e:	3310      	adds	r3, #16
 8000a50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000a54:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a58:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d3b0      	bcc.n	80009c0 <LogResponsePacket+0x48>
    }
    log_debug("EOD FLAG    : %04X", packet->out_eod_flag);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	4619      	mov	r1, r3
 8000a68:	4809      	ldr	r0, [pc, #36]	@ (8000a90 <LogResponsePacket+0x118>)
 8000a6a:	f000 ff09 	bl	8001880 <log_debug>
}
 8000a6e:	3750      	adds	r7, #80	@ 0x50
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	08013cac 	.word	0x08013cac
 8000a78:	08013cc4 	.word	0x08013cc4
 8000a7c:	08013cd4 	.word	0x08013cd4
 8000a80:	08013ce8 	.word	0x08013ce8
 8000a84:	08013c84 	.word	0x08013c84
 8000a88:	08013d00 	.word	0x08013d00
 8000a8c:	08013d14 	.word	0x08013d14
 8000a90:	08013d28 	.word	0x08013d28

08000a94 <LogTransmitBuffer>:

static void LogTransmitBuffer(const uint8_t* usb_tx_buffer, uint32_t usb_tx_index)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b092      	sub	sp, #72	@ 0x48
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
    if (!usb_tx_buffer || usb_tx_index == 0)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d002      	beq.n	8000aaa <LogTransmitBuffer+0x16>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d103      	bne.n	8000ab2 <LogTransmitBuffer+0x1e>
    {
        log_debug("USB TX buffer is empty or NULL.");
 8000aaa:	4826      	ldr	r0, [pc, #152]	@ (8000b44 <LogTransmitBuffer+0xb0>)
 8000aac:	f000 fee8 	bl	8001880 <log_debug>
        return;
 8000ab0:	e045      	b.n	8000b3e <LogTransmitBuffer+0xaa>
    }


    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ab6:	e03e      	b.n	8000b36 <LogTransmitBuffer+0xa2>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	222d      	movs	r2, #45	@ 0x2d
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f011 fee3 	bl	8012890 <memset>
        char* ptr = line;
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	643b      	str	r3, [r7, #64]	@ 0x40

        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ad4:	e012      	b.n	8000afc <LogTransmitBuffer+0x68>
        {
            ptr += sprintf(ptr, "%02X ", usb_tx_buffer[i + j]);
 8000ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ada:	4413      	add	r3, r2
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4918      	ldr	r1, [pc, #96]	@ (8000b48 <LogTransmitBuffer+0xb4>)
 8000ae6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000ae8:	f011 fe36 	bl	8012758 <siprintf>
 8000aec:	4603      	mov	r3, r0
 8000aee:	461a      	mov	r2, r3
 8000af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000af2:	4413      	add	r3, r2
 8000af4:	643b      	str	r3, [r7, #64]	@ 0x40
        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000af8:	3301      	adds	r3, #1
 8000afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000afe:	2b0f      	cmp	r3, #15
 8000b00:	d805      	bhi.n	8000b0e <LogTransmitBuffer+0x7a>
 8000b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b06:	4413      	add	r3, r2
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d8e3      	bhi.n	8000ad6 <LogTransmitBuffer+0x42>
        }

        if (i == 0)
 8000b0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d107      	bne.n	8000b24 <LogTransmitBuffer+0x90>
            log_debug("USB Tx [%lu bytes]: %s", usb_tx_index, line);
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	461a      	mov	r2, r3
 8000b1a:	6839      	ldr	r1, [r7, #0]
 8000b1c:	480b      	ldr	r0, [pc, #44]	@ (8000b4c <LogTransmitBuffer+0xb8>)
 8000b1e:	f000 feaf 	bl	8001880 <log_debug>
 8000b22:	e005      	b.n	8000b30 <LogTransmitBuffer+0x9c>
        else
            log_debug("                   %s", line);  // 17-character indent to align with line 1
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <LogTransmitBuffer+0xbc>)
 8000b2c:	f000 fea8 	bl	8001880 <log_debug>
    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b32:	3310      	adds	r3, #16
 8000b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d3bc      	bcc.n	8000ab8 <LogTransmitBuffer+0x24>
    }
}
 8000b3e:	3748      	adds	r7, #72	@ 0x48
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	08013d3c 	.word	0x08013d3c
 8000b48:	08013c84 	.word	0x08013c84
 8000b4c:	08013d5c 	.word	0x08013d5c
 8000b50:	08013d74 	.word	0x08013d74

08000b54 <HSMManager_Init>:

void HSMManager_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  log_init(LOG_LEVEL_DEBUG);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 fe35 	bl	80017c8 <log_init>
  log_info("HSM Initialized.");
 8000b5e:	4834      	ldr	r0, [pc, #208]	@ (8000c30 <HSMManager_Init+0xdc>)
 8000b60:	f000 fea8 	bl	80018b4 <log_info>
  HAL_Delay(1000);
 8000b64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b68:	f002 fb40 	bl	80031ec <HAL_Delay>
  log_info("Turning LED ON.");
 8000b6c:	4831      	ldr	r0, [pc, #196]	@ (8000c34 <HSMManager_Init+0xe0>)
 8000b6e:	f000 fea1 	bl	80018b4 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f002 f8d8 	bl	8002d28 <BSP_LED_Toggle>
 8000b78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b7c:	f002 fb36 	bl	80031ec <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b80:	2002      	movs	r0, #2
 8000b82:	f002 f8d1 	bl	8002d28 <BSP_LED_Toggle>
 8000b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b8a:	f002 fb2f 	bl	80031ec <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f002 f8ca 	bl	8002d28 <BSP_LED_Toggle>
 8000b94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b98:	f002 fb28 	bl	80031ec <HAL_Delay>
  log_info("Turning LED OFF.");
 8000b9c:	4826      	ldr	r0, [pc, #152]	@ (8000c38 <HSMManager_Init+0xe4>)
 8000b9e:	f000 fe89 	bl	80018b4 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f002 f8c0 	bl	8002d28 <BSP_LED_Toggle>
 8000ba8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bac:	f002 fb1e 	bl	80031ec <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f002 f8b9 	bl	8002d28 <BSP_LED_Toggle>
 8000bb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bba:	f002 fb17 	bl	80031ec <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f002 f8b2 	bl	8002d28 <BSP_LED_Toggle>
 8000bc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc8:	f002 fb10 	bl	80031ec <HAL_Delay>
  log_info("Turning LED ON.");
 8000bcc:	4819      	ldr	r0, [pc, #100]	@ (8000c34 <HSMManager_Init+0xe0>)
 8000bce:	f000 fe71 	bl	80018b4 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f002 f8a8 	bl	8002d28 <BSP_LED_Toggle>
 8000bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bdc:	f002 fb06 	bl	80031ec <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000be0:	2002      	movs	r0, #2
 8000be2:	f002 f8a1 	bl	8002d28 <BSP_LED_Toggle>
 8000be6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bea:	f002 faff 	bl	80031ec <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f002 f89a 	bl	8002d28 <BSP_LED_Toggle>
 8000bf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf8:	f002 faf8 	bl	80031ec <HAL_Delay>
  log_info("Turning LED OFF.");
 8000bfc:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <HSMManager_Init+0xe4>)
 8000bfe:	f000 fe59 	bl	80018b4 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f002 f890 	bl	8002d28 <BSP_LED_Toggle>
 8000c08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c0c:	f002 faee 	bl	80031ec <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000c10:	2002      	movs	r0, #2
 8000c12:	f002 f889 	bl	8002d28 <BSP_LED_Toggle>
 8000c16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c1a:	f002 fae7 	bl	80031ec <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f002 f882 	bl	8002d28 <BSP_LED_Toggle>
 8000c24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c28:	f002 fae0 	bl	80031ec <HAL_Delay>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	08013d8c 	.word	0x08013d8c
 8000c34:	08013da0 	.word	0x08013da0
 8000c38:	08013db0 	.word	0x08013db0

08000c3c <HSMManager_ProcessCommand>:


OperationStatus_t HSMManager_ProcessCommand(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	f5ad 3d90 	sub.w	sp, sp, #73728	@ 0x12000
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
	 if (usb_rx_complete)
 8000c46:	4b48      	ldr	r3, [pc, #288]	@ (8000d68 <HSMManager_ProcessCommand+0x12c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f000 8084 	beq.w	8000d5a <HSMManager_ProcessCommand+0x11e>
	 {
		 ParsedPacket_t request;
		 ResponsePacket_t response;
		 uint8_t usb_tx_buffer[MAX_USB_DATA_SIZE];
		 uint16_t usb_tx_index;
		 ParseStatus_t status = PacketParser_Parse(usb_rx_buffer, usb_rx_index, &request);
 8000c52:	4b46      	ldr	r3, [pc, #280]	@ (8000d6c <HSMManager_ProcessCommand+0x130>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	b299      	uxth	r1, r3
 8000c58:	f107 0318 	add.w	r3, r7, #24
 8000c5c:	3b18      	subs	r3, #24
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4843      	ldr	r0, [pc, #268]	@ (8000d70 <HSMManager_ProcessCommand+0x134>)
 8000c62:	f000 fcd1 	bl	8001608 <PacketParser_Parse>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000c6c:	f102 0217 	add.w	r2, r2, #23
 8000c70:	7013      	strb	r3, [r2, #0]

		 if (status == PARSE_SUCCESS)
 8000c72:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000c76:	f103 0317 	add.w	r3, r3, #23
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d163      	bne.n	8000d48 <HSMManager_ProcessCommand+0x10c>
		 {
			 log_debug("Packet Parsed Successfully:");
 8000c80:	483c      	ldr	r0, [pc, #240]	@ (8000d74 <HSMManager_ProcessCommand+0x138>)
 8000c82:	f000 fdfd 	bl	8001880 <log_debug>
			 LogParsedPacket(&request);
 8000c86:	f107 0318 	add.w	r3, r7, #24
 8000c8a:	3b18      	subs	r3, #24
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fdd7 	bl	8000840 <LogParsedPacket>
			 OperationDispatcher_Dispatch(&request, &response);
 8000c92:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000c96:	f102 0218 	add.w	r2, r2, #24
 8000c9a:	3a10      	subs	r2, #16
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	3b18      	subs	r3, #24
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f869 	bl	8000d7c <OperationDispatcher_Dispatch>
			 response.transactionID = request.transactionID;
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000cb2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000cb6:	f102 0218 	add.w	r2, r2, #24
 8000cba:	f842 3c10 	str.w	r3, [r2, #-16]
			 LogResponsePacket(&response);
 8000cbe:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cc2:	f103 0318 	add.w	r3, r3, #24
 8000cc6:	3b10      	subs	r3, #16
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fe55 	bl	8000978 <LogResponsePacket>
			 usb_tx_index = response.outputSize + 10;
 8000cce:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cd2:	f103 0318 	add.w	r3, r3, #24
 8000cd6:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000cda:	330a      	adds	r3, #10
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000ce2:	f102 0214 	add.w	r2, r2, #20
 8000ce6:	8013      	strh	r3, [r2, #0]
			 PacketBuilder_Build(&response, usb_tx_buffer, &usb_tx_index);
 8000ce8:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000cec:	f102 0214 	add.w	r2, r2, #20
 8000cf0:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8000cf4:	f101 0118 	add.w	r1, r1, #24
 8000cf8:	3904      	subs	r1, #4
 8000cfa:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cfe:	f103 0318 	add.w	r3, r3, #24
 8000d02:	3b10      	subs	r3, #16
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fbcf 	bl	80014a8 <PacketBuilder_Build>
			 LogTransmitBuffer(usb_tx_buffer, usb_tx_index);
 8000d0a:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d0e:	f103 0314 	add.w	r3, r3, #20
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000d1a:	f103 0318 	add.w	r3, r3, #24
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff feb6 	bl	8000a94 <LogTransmitBuffer>
			 USB_Transmit(usb_tx_buffer, usb_tx_index);
 8000d28:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d2c:	f103 0314 	add.w	r3, r3, #20
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000d38:	f103 0318 	add.w	r3, r3, #24
 8000d3c:	3b04      	subs	r3, #4
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f00f fc67 	bl	8010614 <USB_Transmit>
 8000d46:	e008      	b.n	8000d5a <HSMManager_ProcessCommand+0x11e>
		 }
		 else
		 {
			 log_error("Parsing failed with status code: %d", status);
 8000d48:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d4c:	f103 0317 	add.w	r3, r3, #23
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4619      	mov	r1, r3
 8000d54:	4808      	ldr	r0, [pc, #32]	@ (8000d78 <HSMManager_ProcessCommand+0x13c>)
 8000d56:	f000 fde1 	bl	800191c <log_error>
		 }
	 }
	 return 0;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f507 3790 	add.w	r7, r7, #73728	@ 0x12000
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20010eec 	.word	0x20010eec
 8000d6c:	20010ee8 	.word	0x20010ee8
 8000d70:	20000ee8 	.word	0x20000ee8
 8000d74:	08013dc4 	.word	0x08013dc4
 8000d78:	08013de0 	.word	0x08013de0

08000d7c <OperationDispatcher_Dispatch>:
#include "constants.h"
#include "types.h"
#include "Logger.h"

OperationStatus_t OperationDispatcher_Dispatch(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    log_info("Dispatching Command.");
 8000d86:	4838      	ldr	r0, [pc, #224]	@ (8000e68 <OperationDispatcher_Dispatch+0xec>)
 8000d88:	f000 fd94 	bl	80018b4 <log_info>

    switch (request->cmd)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	791b      	ldrb	r3, [r3, #4]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	2b0e      	cmp	r3, #14
 8000d94:	d85c      	bhi.n	8000e50 <OperationDispatcher_Dispatch+0xd4>
 8000d96:	a201      	add	r2, pc, #4	@ (adr r2, 8000d9c <OperationDispatcher_Dispatch+0x20>)
 8000d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9c:	08000dd9 	.word	0x08000dd9
 8000da0:	08000de9 	.word	0x08000de9
 8000da4:	08000df9 	.word	0x08000df9
 8000da8:	08000e0b 	.word	0x08000e0b
 8000dac:	08000e1d 	.word	0x08000e1d
 8000db0:	08000e2f 	.word	0x08000e2f
 8000db4:	08000e2f 	.word	0x08000e2f
 8000db8:	08000e2f 	.word	0x08000e2f
 8000dbc:	08000e51 	.word	0x08000e51
 8000dc0:	08000e51 	.word	0x08000e51
 8000dc4:	08000e51 	.word	0x08000e51
 8000dc8:	08000e51 	.word	0x08000e51
 8000dcc:	08000e51 	.word	0x08000e51
 8000dd0:	08000e51 	.word	0x08000e51
 8000dd4:	08000e41 	.word	0x08000e41
    {
        case CMD_ENCRYPT:
        	log_info("Calling Encryption Operation.");
 8000dd8:	4824      	ldr	r0, [pc, #144]	@ (8000e6c <OperationDispatcher_Dispatch+0xf0>)
 8000dda:	f000 fd6b 	bl	80018b4 <log_info>
        	log_warn("Encryption Operation not supported");
 8000dde:	4824      	ldr	r0, [pc, #144]	@ (8000e70 <OperationDispatcher_Dispatch+0xf4>)
 8000de0:	f000 fd82 	bl	80018e8 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000de4:	230b      	movs	r3, #11
 8000de6:	e03a      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        case CMD_DECRYPT:
        	log_info("Calling Decryption Operation.");
 8000de8:	4822      	ldr	r0, [pc, #136]	@ (8000e74 <OperationDispatcher_Dispatch+0xf8>)
 8000dea:	f000 fd63 	bl	80018b4 <log_info>
        	log_warn("Decryption Operation not supported");
 8000dee:	4822      	ldr	r0, [pc, #136]	@ (8000e78 <OperationDispatcher_Dispatch+0xfc>)
 8000df0:	f000 fd7a 	bl	80018e8 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000df4:	230b      	movs	r3, #11
 8000df6:	e032      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        case CMD_HASH:
        	log_info("Calling Hashing Operation.");
 8000df8:	4820      	ldr	r0, [pc, #128]	@ (8000e7c <OperationDispatcher_Dispatch+0x100>)
 8000dfa:	f000 fd5b 	bl	80018b4 <log_info>
            return HashingHandler_Handle(request, response);
 8000dfe:	6839      	ldr	r1, [r7, #0]
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 f84b 	bl	8000e9c <HashingHandler_Handle>
 8000e06:	4603      	mov	r3, r0
 8000e08:	e029      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        case CMD_RANDOM:
        	log_info("Calling RNG Operation.");
 8000e0a:	481d      	ldr	r0, [pc, #116]	@ (8000e80 <OperationDispatcher_Dispatch+0x104>)
 8000e0c:	f000 fd52 	bl	80018b4 <log_info>
            return RandomHandler_Handle(request, response);
 8000e10:	6839      	ldr	r1, [r7, #0]
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 faea 	bl	80013ec <RandomHandler_Handle>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	e020      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        case CMD_OTP:
            log_info("Calling OTP Operation.");
 8000e1c:	4819      	ldr	r0, [pc, #100]	@ (8000e84 <OperationDispatcher_Dispatch+0x108>)
 8000e1e:	f000 fd49 	bl	80018b4 <log_info>
            return OTPHandler_Handle(request, response);
 8000e22:	6839      	ldr	r1, [r7, #0]
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 fa2b 	bl	8001280 <OTPHandler_Handle>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	e017      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        case CMD_KEY_GEN:
        case CMD_KEY_STORE:
        case CMD_KEY_ERASE:
        	log_info("Calling Key Management.");
 8000e2e:	4816      	ldr	r0, [pc, #88]	@ (8000e88 <OperationDispatcher_Dispatch+0x10c>)
 8000e30:	f000 fd40 	bl	80018b4 <log_info>
            return KeyHandler_Handle(request, response);
 8000e34:	6839      	ldr	r1, [r7, #0]
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f9a2 	bl	8001180 <KeyHandler_Handle>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	e00e      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        case CMD_PING:
        	log_info("Calling Ping Operation.");
 8000e40:	4812      	ldr	r0, [pc, #72]	@ (8000e8c <OperationDispatcher_Dispatch+0x110>)
 8000e42:	f000 fd37 	bl	80018b4 <log_info>
        	log_warn("Ping Operation not supported");
 8000e46:	4812      	ldr	r0, [pc, #72]	@ (8000e90 <OperationDispatcher_Dispatch+0x114>)
 8000e48:	f000 fd4e 	bl	80018e8 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000e4c:	230b      	movs	r3, #11
 8000e4e:	e006      	b.n	8000e5e <OperationDispatcher_Dispatch+0xe2>

        default:
            log_error("Invalid Command code received");
 8000e50:	4810      	ldr	r0, [pc, #64]	@ (8000e94 <OperationDispatcher_Dispatch+0x118>)
 8000e52:	f000 fd63 	bl	800191c <log_error>
            log_error("Returning Failure Status code");
 8000e56:	4810      	ldr	r0, [pc, #64]	@ (8000e98 <OperationDispatcher_Dispatch+0x11c>)
 8000e58:	f000 fd60 	bl	800191c <log_error>
            return OPERATION_INVALID_CMD;
 8000e5c:	2301      	movs	r3, #1
    }
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	08013e04 	.word	0x08013e04
 8000e6c:	08013e1c 	.word	0x08013e1c
 8000e70:	08013e3c 	.word	0x08013e3c
 8000e74:	08013e60 	.word	0x08013e60
 8000e78:	08013e80 	.word	0x08013e80
 8000e7c:	08013ea4 	.word	0x08013ea4
 8000e80:	08013ec0 	.word	0x08013ec0
 8000e84:	08013ed8 	.word	0x08013ed8
 8000e88:	08013ef0 	.word	0x08013ef0
 8000e8c:	08013f08 	.word	0x08013f08
 8000e90:	08013f20 	.word	0x08013f20
 8000e94:	08013f40 	.word	0x08013f40
 8000e98:	08013f60 	.word	0x08013f60

08000e9c <HashingHandler_Handle>:

extern HASH_HandleTypeDef hhash;
extern void Error_Handler(void);

OperationStatus_t HashingHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	log_info("Handling Hashing operation.");
 8000ea6:	4849      	ldr	r0, [pc, #292]	@ (8000fcc <HashingHandler_Handle+0x130>)
 8000ea8:	f000 fd04 	bl	80018b4 <log_info>
	// Check if either Request or Response Packet is NULL
    if (!request )
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HashingHandler_Handle+0x1a>
    {
        return OPERATION_INVALID_DATA;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e085      	b.n	8000fc2 <HashingHandler_Handle+0x126>
    }
    uint32_t AlgorithmSelected;
    // Declare status as Negative for Early Exit Pattern
    OperationStatus_t status = OPERATION_INVALID_OPTION;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	72fb      	strb	r3, [r7, #11]
    // Declare a static byte array of 64 elements
    static uint8_t digest[64] = {0};
    // Check the Request Packet's option member
    switch (request->option)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	795b      	ldrb	r3, [r3, #5]
 8000ebe:	3b21      	subs	r3, #33	@ 0x21
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d833      	bhi.n	8000f2c <HashingHandler_Handle+0x90>
 8000ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8000ecc <HashingHandler_Handle+0x30>)
 8000ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eca:	bf00      	nop
 8000ecc:	08000edd 	.word	0x08000edd
 8000ed0:	08000ef1 	.word	0x08000ef1
 8000ed4:	08000f05 	.word	0x08000f05
 8000ed8:	08000f19 	.word	0x08000f19
    {
    	// SHA224 Hashing Algorithm Selected.
        case OPTION_HASH_SHA224:
        	log_info("SHA224 Hashing Algorithm Selected.");
 8000edc:	483c      	ldr	r0, [pc, #240]	@ (8000fd0 <HashingHandler_Handle+0x134>)
 8000ede:	f000 fce9 	bl	80018b4 <log_info>
        	response->outputSize = 28;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	221c      	movs	r2, #28
 8000ee6:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA224;
 8000ee8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000eec:	60fb      	str	r3, [r7, #12]
            break;
 8000eee:	e01f      	b.n	8000f30 <HashingHandler_Handle+0x94>

        // SHA256 Hashing Algorithm Selected.
        case OPTION_HASH_SHA256:
        	log_info("SHA256 Hashing Algorithm Selected.");
 8000ef0:	4838      	ldr	r0, [pc, #224]	@ (8000fd4 <HashingHandler_Handle+0x138>)
 8000ef2:	f000 fcdf 	bl	80018b4 <log_info>
        	response->outputSize = 32;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	2220      	movs	r2, #32
 8000efa:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA256;
 8000efc:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 8000f00:	60fb      	str	r3, [r7, #12]
            break;
 8000f02:	e015      	b.n	8000f30 <HashingHandler_Handle+0x94>

        // SHA384 Hashing Algorithm Selected.
        case OPTION_HASH_SHA384:
        	log_info("SHA384 Hashing Algorithm Selected.");
 8000f04:	4834      	ldr	r0, [pc, #208]	@ (8000fd8 <HashingHandler_Handle+0x13c>)
 8000f06:	f000 fcd5 	bl	80018b4 <log_info>
        	response->outputSize = 48;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2230      	movs	r2, #48	@ 0x30
 8000f0e:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA384;
 8000f10:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000f14:	60fb      	str	r3, [r7, #12]
            break;
 8000f16:	e00b      	b.n	8000f30 <HashingHandler_Handle+0x94>

        // SHA512 Hashing Algorithm Selected.
        case OPTION_HASH_SHA512:
        	log_info("SHA512 Hashing Algorithm Selected.");
 8000f18:	4830      	ldr	r0, [pc, #192]	@ (8000fdc <HashingHandler_Handle+0x140>)
 8000f1a:	f000 fccb 	bl	80018b4 <log_info>
        	response->outputSize = 64;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	2240      	movs	r2, #64	@ 0x40
 8000f22:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA512;
 8000f24:	f44f 13f0 	mov.w	r3, #1966080	@ 0x1e0000
 8000f28:	60fb      	str	r3, [r7, #12]
            break;
 8000f2a:	e001      	b.n	8000f30 <HashingHandler_Handle+0x94>

        // Default switch case
        default:
            return OPERATION_INVALID_OPTION;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e048      	b.n	8000fc2 <HashingHandler_Handle+0x126>
    }

    status = OPERATION_SUCCESS;
 8000f30:	2300      	movs	r3, #0
 8000f32:	72fb      	strb	r3, [r7, #11]
    HAL_HASH_DeInit(&hhash);
 8000f34:	482a      	ldr	r0, [pc, #168]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f36:	f002 fd83 	bl	8003a40 <HAL_HASH_DeInit>

    log_info("De-Initialized HASH Peripheral.");
 8000f3a:	482a      	ldr	r0, [pc, #168]	@ (8000fe4 <HashingHandler_Handle+0x148>)
 8000f3c:	f000 fcba 	bl	80018b4 <log_info>

    hhash.Instance = HASH;
 8000f40:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f42:	4a29      	ldr	r2, [pc, #164]	@ (8000fe8 <HashingHandler_Handle+0x14c>)
 8000f44:	601a      	str	r2, [r3, #0]
    hhash.Init.DataType = HASH_BYTE_SWAP;
 8000f46:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f48:	2220      	movs	r2, #32
 8000f4a:	605a      	str	r2, [r3, #4]
    hhash.Init.Algorithm = AlgorithmSelected;
 8000f4c:	4a24      	ldr	r2, [pc, #144]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6113      	str	r3, [r2, #16]
    if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000f52:	4823      	ldr	r0, [pc, #140]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f54:	f002 fd3c 	bl	80039d0 <HAL_HASH_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HashingHandler_Handle+0xc6>
    {
    	status = OPERATION_FAILURE;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	72fb      	strb	r3, [r7, #11]
    }

    log_info("Re-initialized HASH Peripheral.");
 8000f62:	4822      	ldr	r0, [pc, #136]	@ (8000fec <HashingHandler_Handle+0x150>)
 8000f64:	f000 fca6 	bl	80018b4 <log_info>

    if (HAL_HASH_Start_IT(&hhash, (uint8_t*)request->inputData, (uint32_t)request->inputSize, digest) != HAL_OK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f103 0108 	add.w	r1, r3, #8
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	88db      	ldrh	r3, [r3, #6]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <HashingHandler_Handle+0x154>)
 8000f76:	481a      	ldr	r0, [pc, #104]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f78:	f002 fd85 	bl	8003a86 <HAL_HASH_Start_IT>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HashingHandler_Handle+0xea>
    {
      Error_Handler();
 8000f82:	f001 f8f7 	bl	8002174 <Error_Handler>
    }
    while (HAL_HASH_GetState(&hhash) != HAL_HASH_STATE_READY);
 8000f86:	bf00      	nop
 8000f88:	4815      	ldr	r0, [pc, #84]	@ (8000fe0 <HashingHandler_Handle+0x144>)
 8000f8a:	f002 fe94 	bl	8003cb6 <HAL_HASH_GetState>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d1f9      	bne.n	8000f88 <HashingHandler_Handle+0xec>

    log_info("Generated Hash Digest successfully.");
 8000f94:	4817      	ldr	r0, [pc, #92]	@ (8000ff4 <HashingHandler_Handle+0x158>)
 8000f96:	f000 fc8d 	bl	80018b4 <log_info>
    // Check if operation status is Success
    if (status != OPERATION_SUCCESS)
 8000f9a:	7afb      	ldrb	r3, [r7, #11]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HashingHandler_Handle+0x108>
    {
        return status;
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	e00e      	b.n	8000fc2 <HashingHandler_Handle+0x126>
    }
    log_info("Copying Hash Digest into Response Packet.");
 8000fa4:	4814      	ldr	r0, [pc, #80]	@ (8000ff8 <HashingHandler_Handle+0x15c>)
 8000fa6:	f000 fc85 	bl	80018b4 <log_info>
    // Copy digest value to Response Packet structure
    memcpy(response->outputData, digest, response->outputSize);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	1d98      	adds	r0, r3, #6
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	889b      	ldrh	r3, [r3, #4]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	490e      	ldr	r1, [pc, #56]	@ (8000ff0 <HashingHandler_Handle+0x154>)
 8000fb6:	f011 fce6 	bl	8012986 <memcpy>
    log_info("Hash operation complete.");
 8000fba:	4810      	ldr	r0, [pc, #64]	@ (8000ffc <HashingHandler_Handle+0x160>)
 8000fbc:	f000 fc7a 	bl	80018b4 <log_info>
    // Return Success
    return OPERATION_SUCCESS;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	08013f80 	.word	0x08013f80
 8000fd0:	08013f9c 	.word	0x08013f9c
 8000fd4:	08013fc0 	.word	0x08013fc0
 8000fd8:	08013fe4 	.word	0x08013fe4
 8000fdc:	08014008 	.word	0x08014008
 8000fe0:	200001ec 	.word	0x200001ec
 8000fe4:	0801402c 	.word	0x0801402c
 8000fe8:	420c0400 	.word	0x420c0400
 8000fec:	0801404c 	.word	0x0801404c
 8000ff0:	2000019c 	.word	0x2000019c
 8000ff4:	0801406c 	.word	0x0801406c
 8000ff8:	08014090 	.word	0x08014090
 8000ffc:	080140bc 	.word	0x080140bc

08001000 <CalculateKeySize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

static uint16_t CalculateKeySize(uint8_t option_member)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	3b33      	subs	r3, #51	@ 0x33
 800100e:	2b09      	cmp	r3, #9
 8001010:	d837      	bhi.n	8001082 <CalculateKeySize+0x82>
 8001012:	a201      	add	r2, pc, #4	@ (adr r2, 8001018 <CalculateKeySize+0x18>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001041 	.word	0x08001041
 800101c:	08001047 	.word	0x08001047
 8001020:	0800104d 	.word	0x0800104d
 8001024:	08001053 	.word	0x08001053
 8001028:	08001059 	.word	0x08001059
 800102c:	0800105f 	.word	0x0800105f
 8001030:	08001065 	.word	0x08001065
 8001034:	0800106b 	.word	0x0800106b
 8001038:	08001073 	.word	0x08001073
 800103c:	0800107b 	.word	0x0800107b
	{
		case OPTION_RNG_0016: byteSize = 16; 	break;
 8001040:	2310      	movs	r3, #16
 8001042:	81fb      	strh	r3, [r7, #14]
 8001044:	e01e      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0024: byteSize = 24; 	break;
 8001046:	2318      	movs	r3, #24
 8001048:	81fb      	strh	r3, [r7, #14]
 800104a:	e01b      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0032: byteSize = 32; 	break;
 800104c:	2320      	movs	r3, #32
 800104e:	81fb      	strh	r3, [r7, #14]
 8001050:	e018      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0048: byteSize = 48; 	break;
 8001052:	2330      	movs	r3, #48	@ 0x30
 8001054:	81fb      	strh	r3, [r7, #14]
 8001056:	e015      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0064: byteSize = 64; 	break;
 8001058:	2340      	movs	r3, #64	@ 0x40
 800105a:	81fb      	strh	r3, [r7, #14]
 800105c:	e012      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0066: byteSize = 66; 	break;
 800105e:	2342      	movs	r3, #66	@ 0x42
 8001060:	81fb      	strh	r3, [r7, #14]
 8001062:	e00f      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0128: byteSize = 128; 	break;
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	81fb      	strh	r3, [r7, #14]
 8001068:	e00c      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0256: byteSize = 256; 	break;
 800106a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800106e:	81fb      	strh	r3, [r7, #14]
 8001070:	e008      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0384: byteSize = 384; 	break;
 8001072:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001076:	81fb      	strh	r3, [r7, #14]
 8001078:	e004      	b.n	8001084 <CalculateKeySize+0x84>
		case OPTION_RNG_0512: byteSize = 512; 	break;
 800107a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800107e:	81fb      	strh	r3, [r7, #14]
 8001080:	e000      	b.n	8001084 <CalculateKeySize+0x84>
		default: break;
 8001082:	bf00      	nop
	}
	return byteSize;
 8001084:	89fb      	ldrh	r3, [r7, #14]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <KeyHandler_Generate>:

static OperationStatus_t KeyHandler_Generate(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
    log_info("Handling Key Generation operation.");
 800109e:	4826      	ldr	r0, [pc, #152]	@ (8001138 <KeyHandler_Generate+0xa4>)
 80010a0:	f000 fc08 	bl	80018b4 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	795b      	ldrb	r3, [r3, #5]
 80010a8:	75bb      	strb	r3, [r7, #22]
    // Set the requested Pad size
    uint16_t numBytes = CalculateKeySize(option_val);
 80010aa:	7dbb      	ldrb	r3, [r7, #22]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ffa7 	bl	8001000 <CalculateKeySize>
 80010b2:	4603      	mov	r3, r0
 80010b4:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of One-Time Pad", numBytes);
 80010b6:	8abb      	ldrh	r3, [r7, #20]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4820      	ldr	r0, [pc, #128]	@ (800113c <KeyHandler_Generate+0xa8>)
 80010bc:	f000 fbfa 	bl	80018b4 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 80010c0:	8abb      	ldrh	r3, [r7, #20]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <KeyHandler_Generate+0x3a>
 80010c6:	8abb      	ldrh	r3, [r7, #20]
 80010c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010cc:	d904      	bls.n	80010d8 <KeyHandler_Generate+0x44>
    {
        log_error("Requested Pad count is too big.");
 80010ce:	481c      	ldr	r0, [pc, #112]	@ (8001140 <KeyHandler_Generate+0xac>)
 80010d0:	f000 fc24 	bl	800191c <log_error>
        return OPERATION_INVALID_OPTION;
 80010d4:	2302      	movs	r3, #2
 80010d6:	e02a      	b.n	800112e <KeyHandler_Generate+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 80010d8:	2300      	movs	r3, #0
 80010da:	75fb      	strb	r3, [r7, #23]
 80010dc:	e019      	b.n	8001112 <KeyHandler_Generate+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	4817      	ldr	r0, [pc, #92]	@ (8001144 <KeyHandler_Generate+0xb0>)
 80010e6:	f00b fab1 	bl	800c64c <HAL_RNG_GenerateRandomNumber>
 80010ea:	4603      	mov	r3, r0
 80010ec:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 80010ee:	7cfb      	ldrb	r3, [r7, #19]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d004      	beq.n	80010fe <KeyHandler_Generate+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 80010f4:	4814      	ldr	r0, [pc, #80]	@ (8001148 <KeyHandler_Generate+0xb4>)
 80010f6:	f000 fc11 	bl	800191c <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 80010fa:	2306      	movs	r3, #6
 80010fc:	e017      	b.n	800112e <KeyHandler_Generate+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	b2d1      	uxtb	r1, r2
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	460a      	mov	r2, r1
 800110a:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	3301      	adds	r3, #1
 8001110:	75fb      	strb	r3, [r7, #23]
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	b29a      	uxth	r2, r3
 8001116:	8abb      	ldrh	r3, [r7, #20]
 8001118:	089b      	lsrs	r3, r3, #2
 800111a:	b29b      	uxth	r3, r3
 800111c:	429a      	cmp	r2, r3
 800111e:	d3de      	bcc.n	80010de <KeyHandler_Generate+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	8aba      	ldrh	r2, [r7, #20]
 8001124:	809a      	strh	r2, [r3, #4]
    log_info("One-Time Pad Generation Operation complete.");
 8001126:	4809      	ldr	r0, [pc, #36]	@ (800114c <KeyHandler_Generate+0xb8>)
 8001128:	f000 fbc4 	bl	80018b4 <log_info>
    return OPERATION_SUCCESS;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	080140d8 	.word	0x080140d8
 800113c:	080140fc 	.word	0x080140fc
 8001140:	08014120 	.word	0x08014120
 8001144:	20000280 	.word	0x20000280
 8001148:	08014140 	.word	0x08014140
 800114c:	08014178 	.word	0x08014178

08001150 <KeyHandler_Store>:

static OperationStatus_t KeyHandler_Store(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	return OPERATION_UNKNOWN_ERROR;
 800115a:	230b      	movs	r3, #11
}
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <KeyHandler_Erase>:

static OperationStatus_t KeyHandler_Erase(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
	return OPERATION_UNKNOWN_ERROR;
 8001172:	230b      	movs	r3, #11
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <KeyHandler_Handle>:

OperationStatus_t KeyHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	switch(request->cmd)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	791b      	ldrb	r3, [r3, #4]
 800118e:	2b08      	cmp	r3, #8
 8001190:	d01b      	beq.n	80011ca <KeyHandler_Handle+0x4a>
 8001192:	2b08      	cmp	r3, #8
 8001194:	dc25      	bgt.n	80011e2 <KeyHandler_Handle+0x62>
 8001196:	2b06      	cmp	r3, #6
 8001198:	d002      	beq.n	80011a0 <KeyHandler_Handle+0x20>
 800119a:	2b07      	cmp	r3, #7
 800119c:	d009      	beq.n	80011b2 <KeyHandler_Handle+0x32>
			log_info("Calling Key Store operation.");
			log_warn("Key Store operation not supported now.");
			return KeyHandler_Erase(request, response);

		default:
			break;
 800119e:	e020      	b.n	80011e2 <KeyHandler_Handle+0x62>
			log_info("Handling Key Generation operation.");
 80011a0:	4813      	ldr	r0, [pc, #76]	@ (80011f0 <KeyHandler_Handle+0x70>)
 80011a2:	f000 fb87 	bl	80018b4 <log_info>
			return KeyHandler_Generate(request, response);
 80011a6:	6839      	ldr	r1, [r7, #0]
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff73 	bl	8001094 <KeyHandler_Generate>
 80011ae:	4603      	mov	r3, r0
 80011b0:	e019      	b.n	80011e6 <KeyHandler_Handle+0x66>
			log_info("Calling Key Store operation.");
 80011b2:	4810      	ldr	r0, [pc, #64]	@ (80011f4 <KeyHandler_Handle+0x74>)
 80011b4:	f000 fb7e 	bl	80018b4 <log_info>
			log_warn("Key Store operation not supported now.");
 80011b8:	480f      	ldr	r0, [pc, #60]	@ (80011f8 <KeyHandler_Handle+0x78>)
 80011ba:	f000 fb95 	bl	80018e8 <log_warn>
			return KeyHandler_Store(request, response);
 80011be:	6839      	ldr	r1, [r7, #0]
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffc5 	bl	8001150 <KeyHandler_Store>
 80011c6:	4603      	mov	r3, r0
 80011c8:	e00d      	b.n	80011e6 <KeyHandler_Handle+0x66>
			log_info("Calling Key Store operation.");
 80011ca:	480a      	ldr	r0, [pc, #40]	@ (80011f4 <KeyHandler_Handle+0x74>)
 80011cc:	f000 fb72 	bl	80018b4 <log_info>
			log_warn("Key Store operation not supported now.");
 80011d0:	4809      	ldr	r0, [pc, #36]	@ (80011f8 <KeyHandler_Handle+0x78>)
 80011d2:	f000 fb89 	bl	80018e8 <log_warn>
			return KeyHandler_Erase(request, response);
 80011d6:	6839      	ldr	r1, [r7, #0]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ffc5 	bl	8001168 <KeyHandler_Erase>
 80011de:	4603      	mov	r3, r0
 80011e0:	e001      	b.n	80011e6 <KeyHandler_Handle+0x66>
			break;
 80011e2:	bf00      	nop
	}

	return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	080140d8 	.word	0x080140d8
 80011f4:	080141a4 	.word	0x080141a4
 80011f8:	080141c4 	.word	0x080141c4

080011fc <CalculatePadSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculatePadSize(uint8_t option_member)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	3b33      	subs	r3, #51	@ 0x33
 800120a:	2b0a      	cmp	r3, #10
 800120c:	d830      	bhi.n	8001270 <CalculatePadSize+0x74>
 800120e:	a201      	add	r2, pc, #4	@ (adr r2, 8001214 <CalculatePadSize+0x18>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	08001241 	.word	0x08001241
 8001218:	08001271 	.word	0x08001271
 800121c:	08001247 	.word	0x08001247
 8001220:	08001271 	.word	0x08001271
 8001224:	0800124d 	.word	0x0800124d
 8001228:	08001271 	.word	0x08001271
 800122c:	08001253 	.word	0x08001253
 8001230:	08001259 	.word	0x08001259
 8001234:	08001271 	.word	0x08001271
 8001238:	08001261 	.word	0x08001261
 800123c:	08001269 	.word	0x08001269
	{
		case OPTION_RNG_0016: byteSize = 16; 	break;
 8001240:	2310      	movs	r3, #16
 8001242:	81fb      	strh	r3, [r7, #14]
 8001244:	e015      	b.n	8001272 <CalculatePadSize+0x76>
		case OPTION_RNG_0032: byteSize = 32; 	break;
 8001246:	2320      	movs	r3, #32
 8001248:	81fb      	strh	r3, [r7, #14]
 800124a:	e012      	b.n	8001272 <CalculatePadSize+0x76>
		case OPTION_RNG_0064: byteSize = 64; 	break;
 800124c:	2340      	movs	r3, #64	@ 0x40
 800124e:	81fb      	strh	r3, [r7, #14]
 8001250:	e00f      	b.n	8001272 <CalculatePadSize+0x76>
		case OPTION_RNG_0128: byteSize = 128; 	break;
 8001252:	2380      	movs	r3, #128	@ 0x80
 8001254:	81fb      	strh	r3, [r7, #14]
 8001256:	e00c      	b.n	8001272 <CalculatePadSize+0x76>
		case OPTION_RNG_0256: byteSize = 256; 	break;
 8001258:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800125c:	81fb      	strh	r3, [r7, #14]
 800125e:	e008      	b.n	8001272 <CalculatePadSize+0x76>
		case OPTION_RNG_0512: byteSize = 512; 	break;
 8001260:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001264:	81fb      	strh	r3, [r7, #14]
 8001266:	e004      	b.n	8001272 <CalculatePadSize+0x76>
		case OPTION_RNG_1024: byteSize = 1024; 	break;
 8001268:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800126c:	81fb      	strh	r3, [r7, #14]
 800126e:	e000      	b.n	8001272 <CalculatePadSize+0x76>
		default: break;
 8001270:	bf00      	nop
	}
	return byteSize;
 8001272:	89fb      	ldrh	r3, [r7, #14]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <OTPHandler_Handle>:

OperationStatus_t OTPHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
    log_info("Handling One-Time Pad Generation operation.");
 800128a:	4826      	ldr	r0, [pc, #152]	@ (8001324 <OTPHandler_Handle+0xa4>)
 800128c:	f000 fb12 	bl	80018b4 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	795b      	ldrb	r3, [r3, #5]
 8001294:	75bb      	strb	r3, [r7, #22]
    // Set the requested Pad size
    uint16_t numBytes = CalculatePadSize(option_val);
 8001296:	7dbb      	ldrb	r3, [r7, #22]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ffaf 	bl	80011fc <CalculatePadSize>
 800129e:	4603      	mov	r3, r0
 80012a0:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of One-Time Pad", numBytes);
 80012a2:	8abb      	ldrh	r3, [r7, #20]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4820      	ldr	r0, [pc, #128]	@ (8001328 <OTPHandler_Handle+0xa8>)
 80012a8:	f000 fb04 	bl	80018b4 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 80012ac:	8abb      	ldrh	r3, [r7, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <OTPHandler_Handle+0x3a>
 80012b2:	8abb      	ldrh	r3, [r7, #20]
 80012b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012b8:	d904      	bls.n	80012c4 <OTPHandler_Handle+0x44>
    {
        log_error("Requested Pad count is too big.");
 80012ba:	481c      	ldr	r0, [pc, #112]	@ (800132c <OTPHandler_Handle+0xac>)
 80012bc:	f000 fb2e 	bl	800191c <log_error>
        return OPERATION_INVALID_OPTION;
 80012c0:	2302      	movs	r3, #2
 80012c2:	e02a      	b.n	800131a <OTPHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 80012c4:	2300      	movs	r3, #0
 80012c6:	75fb      	strb	r3, [r7, #23]
 80012c8:	e019      	b.n	80012fe <OTPHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	4619      	mov	r1, r3
 80012d0:	4817      	ldr	r0, [pc, #92]	@ (8001330 <OTPHandler_Handle+0xb0>)
 80012d2:	f00b f9bb 	bl	800c64c <HAL_RNG_GenerateRandomNumber>
 80012d6:	4603      	mov	r3, r0
 80012d8:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 80012da:	7cfb      	ldrb	r3, [r7, #19]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d004      	beq.n	80012ea <OTPHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 80012e0:	4814      	ldr	r0, [pc, #80]	@ (8001334 <OTPHandler_Handle+0xb4>)
 80012e2:	f000 fb1b 	bl	800191c <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 80012e6:	2306      	movs	r3, #6
 80012e8:	e017      	b.n	800131a <OTPHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	b2d1      	uxtb	r1, r2
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	460a      	mov	r2, r1
 80012f6:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	3301      	adds	r3, #1
 80012fc:	75fb      	strb	r3, [r7, #23]
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	b29a      	uxth	r2, r3
 8001302:	8abb      	ldrh	r3, [r7, #20]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	b29b      	uxth	r3, r3
 8001308:	429a      	cmp	r2, r3
 800130a:	d3de      	bcc.n	80012ca <OTPHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	8aba      	ldrh	r2, [r7, #20]
 8001310:	809a      	strh	r2, [r3, #4]
    log_info("One-Time Pad Generation Operation complete.");
 8001312:	4809      	ldr	r0, [pc, #36]	@ (8001338 <OTPHandler_Handle+0xb8>)
 8001314:	f000 face 	bl	80018b4 <log_info>
    return OPERATION_SUCCESS;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	080141ec 	.word	0x080141ec
 8001328:	08014218 	.word	0x08014218
 800132c:	0801423c 	.word	0x0801423c
 8001330:	20000280 	.word	0x20000280
 8001334:	0801425c 	.word	0x0801425c
 8001338:	08014294 	.word	0x08014294

0800133c <CalculateByteSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculateByteSize(uint8_t option_member)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	3b31      	subs	r3, #49	@ 0x31
 800134a:	2b0e      	cmp	r3, #14
 800134c:	d846      	bhi.n	80013dc <CalculateByteSize+0xa0>
 800134e:	a201      	add	r2, pc, #4	@ (adr r2, 8001354 <CalculateByteSize+0x18>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	08001391 	.word	0x08001391
 8001358:	08001397 	.word	0x08001397
 800135c:	0800139d 	.word	0x0800139d
 8001360:	080013dd 	.word	0x080013dd
 8001364:	080013a3 	.word	0x080013a3
 8001368:	080013dd 	.word	0x080013dd
 800136c:	080013a9 	.word	0x080013a9
 8001370:	080013dd 	.word	0x080013dd
 8001374:	080013af 	.word	0x080013af
 8001378:	080013b5 	.word	0x080013b5
 800137c:	080013dd 	.word	0x080013dd
 8001380:	080013bd 	.word	0x080013bd
 8001384:	080013c5 	.word	0x080013c5
 8001388:	080013cd 	.word	0x080013cd
 800138c:	080013d5 	.word	0x080013d5
	{
		case OPTION_RNG_0004: byteSize = 4; break;
 8001390:	2304      	movs	r3, #4
 8001392:	81fb      	strh	r3, [r7, #14]
 8001394:	e023      	b.n	80013de <CalculateByteSize+0xa2>
		case OPTION_RNG_0008: byteSize = 8; break;
 8001396:	2308      	movs	r3, #8
 8001398:	81fb      	strh	r3, [r7, #14]
 800139a:	e020      	b.n	80013de <CalculateByteSize+0xa2>
		case OPTION_RNG_0016: byteSize = 16; break;
 800139c:	2310      	movs	r3, #16
 800139e:	81fb      	strh	r3, [r7, #14]
 80013a0:	e01d      	b.n	80013de <CalculateByteSize+0xa2>
		case OPTION_RNG_0032: byteSize = 32; break;
 80013a2:	2320      	movs	r3, #32
 80013a4:	81fb      	strh	r3, [r7, #14]
 80013a6:	e01a      	b.n	80013de <CalculateByteSize+0xa2>
		case OPTION_RNG_0064: byteSize = 64; break;
 80013a8:	2340      	movs	r3, #64	@ 0x40
 80013aa:	81fb      	strh	r3, [r7, #14]
 80013ac:	e017      	b.n	80013de <CalculateByteSize+0xa2>
		case OPTION_RNG_0128: byteSize = 128; break;
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	81fb      	strh	r3, [r7, #14]
 80013b2:	e014      	b.n	80013de <CalculateByteSize+0xa2>
		case OPTION_RNG_0256: byteSize = 256; break;
 80013b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b8:	81fb      	strh	r3, [r7, #14]
 80013ba:	e010      	b.n	80013de <CalculateByteSize+0xa2>
		case OPTION_RNG_0512: byteSize = 512; break;
 80013bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013c0:	81fb      	strh	r3, [r7, #14]
 80013c2:	e00c      	b.n	80013de <CalculateByteSize+0xa2>
		case OPTION_RNG_1024: byteSize = 1024; break;
 80013c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013c8:	81fb      	strh	r3, [r7, #14]
 80013ca:	e008      	b.n	80013de <CalculateByteSize+0xa2>
		case OPTION_RNG_2048: byteSize = 2048; break;
 80013cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013d0:	81fb      	strh	r3, [r7, #14]
 80013d2:	e004      	b.n	80013de <CalculateByteSize+0xa2>
		case OPTION_RNG_4096: byteSize = 4096; break;
 80013d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d8:	81fb      	strh	r3, [r7, #14]
 80013da:	e000      	b.n	80013de <CalculateByteSize+0xa2>
		default: break;
 80013dc:	bf00      	nop
	}
	return byteSize;
 80013de:	89fb      	ldrh	r3, [r7, #14]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <RandomHandler_Handle>:

OperationStatus_t RandomHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
    log_info("Handling Random Number Generation operation.");
 80013f6:	4826      	ldr	r0, [pc, #152]	@ (8001490 <RandomHandler_Handle+0xa4>)
 80013f8:	f000 fa5c 	bl	80018b4 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	795b      	ldrb	r3, [r3, #5]
 8001400:	75bb      	strb	r3, [r7, #22]
    // Set the requested Random Number size
    uint16_t numBytes = CalculateByteSize(option_val);
 8001402:	7dbb      	ldrb	r3, [r7, #22]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff99 	bl	800133c <CalculateByteSize>
 800140a:	4603      	mov	r3, r0
 800140c:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of Random Number", numBytes);
 800140e:	8abb      	ldrh	r3, [r7, #20]
 8001410:	4619      	mov	r1, r3
 8001412:	4820      	ldr	r0, [pc, #128]	@ (8001494 <RandomHandler_Handle+0xa8>)
 8001414:	f000 fa4e 	bl	80018b4 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 8001418:	8abb      	ldrh	r3, [r7, #20]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <RandomHandler_Handle+0x3a>
 800141e:	8abb      	ldrh	r3, [r7, #20]
 8001420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001424:	d904      	bls.n	8001430 <RandomHandler_Handle+0x44>
    {
        log_error("Requested random byte count is invalid.");
 8001426:	481c      	ldr	r0, [pc, #112]	@ (8001498 <RandomHandler_Handle+0xac>)
 8001428:	f000 fa78 	bl	800191c <log_error>
        return OPERATION_INVALID_OPTION;
 800142c:	2302      	movs	r3, #2
 800142e:	e02a      	b.n	8001486 <RandomHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001430:	2300      	movs	r3, #0
 8001432:	75fb      	strb	r3, [r7, #23]
 8001434:	e019      	b.n	800146a <RandomHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	4619      	mov	r1, r3
 800143c:	4817      	ldr	r0, [pc, #92]	@ (800149c <RandomHandler_Handle+0xb0>)
 800143e:	f00b f905 	bl	800c64c <HAL_RNG_GenerateRandomNumber>
 8001442:	4603      	mov	r3, r0
 8001444:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 8001446:	7cfb      	ldrb	r3, [r7, #19]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <RandomHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 800144c:	4814      	ldr	r0, [pc, #80]	@ (80014a0 <RandomHandler_Handle+0xb4>)
 800144e:	f000 fa65 	bl	800191c <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 8001452:	2306      	movs	r3, #6
 8001454:	e017      	b.n	8001486 <RandomHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	b2d1      	uxtb	r1, r2
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	4413      	add	r3, r2
 8001460:	460a      	mov	r2, r1
 8001462:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	3301      	adds	r3, #1
 8001468:	75fb      	strb	r3, [r7, #23]
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	b29a      	uxth	r2, r3
 800146e:	8abb      	ldrh	r3, [r7, #20]
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	b29b      	uxth	r3, r3
 8001474:	429a      	cmp	r2, r3
 8001476:	d3de      	bcc.n	8001436 <RandomHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	8aba      	ldrh	r2, [r7, #20]
 800147c:	809a      	strh	r2, [r3, #4]
    log_info("RNG Operation complete.");
 800147e:	4809      	ldr	r0, [pc, #36]	@ (80014a4 <RandomHandler_Handle+0xb8>)
 8001480:	f000 fa18 	bl	80018b4 <log_info>
    return OPERATION_SUCCESS;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	080142c0 	.word	0x080142c0
 8001494:	080142f0 	.word	0x080142f0
 8001498:	08014318 	.word	0x08014318
 800149c:	20000280 	.word	0x20000280
 80014a0:	08014340 	.word	0x08014340
 80014a4:	08014378 	.word	0x08014378

080014a8 <PacketBuilder_Build>:
#include "Logger.h"
#include <string.h>


BuildStatus_t PacketBuilder_Build(const ResponsePacket_t* responsePacket, uint8_t* outBuffer, uint16_t* outLength)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
	log_debug("Checking if Response Packet is NULL");
 80014b4:	484e      	ldr	r0, [pc, #312]	@ (80015f0 <PacketBuilder_Build+0x148>)
 80014b6:	f000 f9e3 	bl	8001880 <log_debug>
	// Check if Response, Output and Output Size are NULL
    if (!responsePacket || !outBuffer || !outLength)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <PacketBuilder_Build+0x24>
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <PacketBuilder_Build+0x24>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <PacketBuilder_Build+0x28>
    {
    	return BUILD_NULL_POINTER;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e08b      	b.n	80015e8 <PacketBuilder_Build+0x140>
    }
    log_debug("Checking if Output Size is under limits");
 80014d0:	4848      	ldr	r0, [pc, #288]	@ (80015f4 <PacketBuilder_Build+0x14c>)
 80014d2:	f000 f9d5 	bl	8001880 <log_debug>
    // Check if Output Size is under the specified limits
    if (responsePacket->outputSize > MAX_OUTPUT_DATA_SIZE)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	889b      	ldrh	r3, [r3, #4]
 80014da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014de:	d901      	bls.n	80014e4 <PacketBuilder_Build+0x3c>
    {
    	return BUILD_OUTPUT_TOO_LARGE;
 80014e0:	2302      	movs	r3, #2
 80014e2:	e081      	b.n	80015e8 <PacketBuilder_Build+0x140>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Transaction ID to Out Buffer");
 80014e8:	4843      	ldr	r0, [pc, #268]	@ (80015f8 <PacketBuilder_Build+0x150>)
 80014ea:	f000 f9c9 	bl	8001880 <log_debug>
    // Fill Data Stream with the corresponding Transaction ID
    outBuffer[index++] = (responsePacket->transactionID >> 24) & 0xFF;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0e1a      	lsrs	r2, r3, #24
 80014f4:	8afb      	ldrh	r3, [r7, #22]
 80014f6:	1c59      	adds	r1, r3, #1
 80014f8:	82f9      	strh	r1, [r7, #22]
 80014fa:	4619      	mov	r1, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	440b      	add	r3, r1
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 16) & 0xFF;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	0c1a      	lsrs	r2, r3, #16
 800150a:	8afb      	ldrh	r3, [r7, #22]
 800150c:	1c59      	adds	r1, r3, #1
 800150e:	82f9      	strh	r1, [r7, #22]
 8001510:	4619      	mov	r1, r3
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	440b      	add	r3, r1
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 8)  & 0xFF;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	0a1a      	lsrs	r2, r3, #8
 8001520:	8afb      	ldrh	r3, [r7, #22]
 8001522:	1c59      	adds	r1, r3, #1
 8001524:	82f9      	strh	r1, [r7, #22]
 8001526:	4619      	mov	r1, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	440b      	add	r3, r1
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID)       & 0xFF;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	8afb      	ldrh	r3, [r7, #22]
 8001536:	1c59      	adds	r1, r3, #1
 8001538:	82f9      	strh	r1, [r7, #22]
 800153a:	4619      	mov	r1, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	440b      	add	r3, r1
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]
    log_debug("Adding Output Data Size to Out Buffer");
 8001544:	482d      	ldr	r0, [pc, #180]	@ (80015fc <PacketBuilder_Build+0x154>)
 8001546:	f000 f99b 	bl	8001880 <log_debug>
    // Fill Data Stream with the Output Data Size
    outBuffer[index++] = (responsePacket->outputSize >> 8) & 0xFF;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	889b      	ldrh	r3, [r3, #4]
 800154e:	0a1b      	lsrs	r3, r3, #8
 8001550:	b29a      	uxth	r2, r3
 8001552:	8afb      	ldrh	r3, [r7, #22]
 8001554:	1c59      	adds	r1, r3, #1
 8001556:	82f9      	strh	r1, [r7, #22]
 8001558:	4619      	mov	r1, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	440b      	add	r3, r1
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->outputSize)      & 0xFF;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	889a      	ldrh	r2, [r3, #4]
 8001566:	8afb      	ldrh	r3, [r7, #22]
 8001568:	1c59      	adds	r1, r3, #1
 800156a:	82f9      	strh	r1, [r7, #22]
 800156c:	4619      	mov	r1, r3
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	440b      	add	r3, r1
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]
    // Copy Output Data contents to Data Stream
    log_debug("Copying Output Data to Out Buffer");
 8001576:	4822      	ldr	r0, [pc, #136]	@ (8001600 <PacketBuilder_Build+0x158>)
 8001578:	f000 f982 	bl	8001880 <log_debug>
    memcpy(&outBuffer[index], responsePacket->outputData, responsePacket->outputSize);
 800157c:	8afb      	ldrh	r3, [r7, #22]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	18d0      	adds	r0, r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1d99      	adds	r1, r3, #6
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	889b      	ldrh	r3, [r3, #4]
 800158a:	461a      	mov	r2, r3
 800158c:	f011 f9fb 	bl	8012986 <memcpy>
    // Set Index to point to EOD Flag
    index += responsePacket->outputSize;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	889a      	ldrh	r2, [r3, #4]
 8001594:	8afb      	ldrh	r3, [r7, #22]
 8001596:	4413      	add	r3, r2
 8001598:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Outward EOD Flag to Out Buffer");
 800159a:	481a      	ldr	r0, [pc, #104]	@ (8001604 <PacketBuilder_Build+0x15c>)
 800159c:	f000 f970 	bl	8001880 <log_debug>
    // Add EOD Flag to Data Stream
    outBuffer[index++] = (OUT_EOD_FLAG >> 24) & 0xFF;
 80015a0:	8afb      	ldrh	r3, [r7, #22]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	82fa      	strh	r2, [r7, #22]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4413      	add	r3, r2
 80015ac:	22ca      	movs	r2, #202	@ 0xca
 80015ae:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 16) & 0xFF;
 80015b0:	8afb      	ldrh	r3, [r7, #22]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	82fa      	strh	r2, [r7, #22]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4413      	add	r3, r2
 80015bc:	22fe      	movs	r2, #254	@ 0xfe
 80015be:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 8)  & 0xFF;
 80015c0:	8afb      	ldrh	r3, [r7, #22]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	82fa      	strh	r2, [r7, #22]
 80015c6:	461a      	mov	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4413      	add	r3, r2
 80015cc:	22ba      	movs	r2, #186	@ 0xba
 80015ce:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG)       & 0xFF;
 80015d0:	8afb      	ldrh	r3, [r7, #22]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	82fa      	strh	r2, [r7, #22]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4413      	add	r3, r2
 80015dc:	22be      	movs	r2, #190	@ 0xbe
 80015de:	701a      	strb	r2, [r3, #0]
    // Set Index to point to End of Data Stream
    *outLength = index;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	8afa      	ldrh	r2, [r7, #22]
 80015e4:	801a      	strh	r2, [r3, #0]
    // Return to indicate successful Packet Build
    return BUILD_SUCCESS;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	08014390 	.word	0x08014390
 80015f4:	080143b4 	.word	0x080143b4
 80015f8:	080143dc 	.word	0x080143dc
 80015fc:	08014400 	.word	0x08014400
 8001600:	08014428 	.word	0x08014428
 8001604:	0801444c 	.word	0x0801444c

08001608 <PacketParser_Parse>:
#include "constants.h"
#include "Logger.h"
#include <string.h>

ParseStatus_t PacketParser_Parse(const uint8_t* rawData, uint16_t rawLength, ParsedPacket_t* parsedPacket)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	460b      	mov	r3, r1
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	817b      	strh	r3, [r7, #10]
	log_debug("Checking if Data Stream or Packet Structure is NULL.");
 8001616:	4860      	ldr	r0, [pc, #384]	@ (8001798 <PacketParser_Parse+0x190>)
 8001618:	f000 f932 	bl	8001880 <log_debug>
	// Check if Data Stream or Packet structure is NULL
	if (!rawData || !parsedPacket)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <PacketParser_Parse+0x20>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d104      	bne.n	8001632 <PacketParser_Parse+0x2a>
    {
		log_error("Data Stream or Packet Structure is NULL");
 8001628:	485c      	ldr	r0, [pc, #368]	@ (800179c <PacketParser_Parse+0x194>)
 800162a:	f000 f977 	bl	800191c <log_error>
    	return PARSE_NULL_POINTER;
 800162e:	2303      	movs	r3, #3
 8001630:	e0ae      	b.n	8001790 <PacketParser_Parse+0x188>
    }
	log_debug("Checking if Data Stream contains less than 12 bytes.");
 8001632:	485b      	ldr	r0, [pc, #364]	@ (80017a0 <PacketParser_Parse+0x198>)
 8001634:	f000 f924 	bl	8001880 <log_debug>
    // Check if Data Stream contains Data of valid length
    if (rawLength < 12)
 8001638:	897b      	ldrh	r3, [r7, #10]
 800163a:	2b0b      	cmp	r3, #11
 800163c:	d804      	bhi.n	8001648 <PacketParser_Parse+0x40>
    {
    	log_error("Data stream contain less than 12 bytes");
 800163e:	4859      	ldr	r0, [pc, #356]	@ (80017a4 <PacketParser_Parse+0x19c>)
 8001640:	f000 f96c 	bl	800191c <log_error>
    	return PARSE_INVALID_LENGTH;
 8001644:	2301      	movs	r3, #1
 8001646:	e0a3      	b.n	8001790 <PacketParser_Parse+0x188>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up Transaction ID.");
 800164c:	4856      	ldr	r0, [pc, #344]	@ (80017a8 <PacketParser_Parse+0x1a0>)
 800164e:	f000 f917 	bl	8001880 <log_debug>
    // Retrieve Transaction ID from Data Stream
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8001652:	8afb      	ldrh	r3, [r7, #22]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	061a      	lsls	r2, r3, #24
                                  (rawData[index + 1] << 16) |
 800165c:	8afb      	ldrh	r3, [r7, #22]
 800165e:	3301      	adds	r3, #1
 8001660:	68f9      	ldr	r1, [r7, #12]
 8001662:	440b      	add	r3, r1
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	041b      	lsls	r3, r3, #16
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8001668:	431a      	orrs	r2, r3
                                  (rawData[index + 2] << 8)  |
 800166a:	8afb      	ldrh	r3, [r7, #22]
 800166c:	3302      	adds	r3, #2
 800166e:	68f9      	ldr	r1, [r7, #12]
 8001670:	440b      	add	r3, r1
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	021b      	lsls	r3, r3, #8
                                  (rawData[index + 1] << 16) |
 8001676:	4313      	orrs	r3, r2
                                  (rawData[index + 3]);
 8001678:	8afa      	ldrh	r2, [r7, #22]
 800167a:	3203      	adds	r2, #3
 800167c:	68f9      	ldr	r1, [r7, #12]
 800167e:	440a      	add	r2, r1
 8001680:	7812      	ldrb	r2, [r2, #0]
                                  (rawData[index + 2] << 8)  |
 8001682:	4313      	orrs	r3, r2
 8001684:	461a      	mov	r2, r3
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	601a      	str	r2, [r3, #0]
    // Set Index to point CMD byte
    index += 4;
 800168a:	8afb      	ldrh	r3, [r7, #22]
 800168c:	3304      	adds	r3, #4
 800168e:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up CMD, OPTION and INPUT_SIZE fields.");
 8001690:	4846      	ldr	r0, [pc, #280]	@ (80017ac <PacketParser_Parse+0x1a4>)
 8001692:	f000 f8f5 	bl	8001880 <log_debug>
    // Retrieve CMD byte from Data Stream
    parsedPacket->cmd = rawData[index++];
 8001696:	8afb      	ldrh	r3, [r7, #22]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	82fa      	strh	r2, [r7, #22]
 800169c:	461a      	mov	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4413      	add	r3, r2
 80016a2:	781a      	ldrb	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	711a      	strb	r2, [r3, #4]
    // Retrieve OPTION byte from Data Stream
    parsedPacket->option = rawData[index++];
 80016a8:	8afb      	ldrh	r3, [r7, #22]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	82fa      	strh	r2, [r7, #22]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	781a      	ldrb	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	715a      	strb	r2, [r3, #5]
    // Retrieve INPUT_SIZE half-word from Data Stream
    parsedPacket->inputSize = (rawData[index] << 8) | rawData[index + 1];
 80016ba:	8afb      	ldrh	r3, [r7, #22]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	8afb      	ldrh	r3, [r7, #22]
 80016c8:	3301      	adds	r3, #1
 80016ca:	68f9      	ldr	r1, [r7, #12]
 80016cc:	440b      	add	r3, r1
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	4313      	orrs	r3, r2
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	80da      	strh	r2, [r3, #6]
    // Set Index to point INPUT_DATA
    index += 2;
 80016dc:	8afb      	ldrh	r3, [r7, #22]
 80016de:	3302      	adds	r3, #2
 80016e0:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking if INPUT_SIZE is within the limits.");
 80016e2:	4833      	ldr	r0, [pc, #204]	@ (80017b0 <PacketParser_Parse+0x1a8>)
 80016e4:	f000 f8cc 	bl	8001880 <log_debug>
    // Check if INPUT_SIZE is under the prescribed limit
    if (parsedPacket->inputSize > MAX_INPUT_DATA_SIZE || ((index - 1) + parsedPacket->inputSize + 4) > rawLength)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	88db      	ldrh	r3, [r3, #6]
 80016ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016f0:	d808      	bhi.n	8001704 <PacketParser_Parse+0xfc>
 80016f2:	8afb      	ldrh	r3, [r7, #22]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	88d2      	ldrh	r2, [r2, #6]
 80016fa:	4413      	add	r3, r2
 80016fc:	1cda      	adds	r2, r3, #3
 80016fe:	897b      	ldrh	r3, [r7, #10]
 8001700:	429a      	cmp	r2, r3
 8001702:	db04      	blt.n	800170e <PacketParser_Parse+0x106>
    {
    	log_error("Input Data Size is too big.");
 8001704:	482b      	ldr	r0, [pc, #172]	@ (80017b4 <PacketParser_Parse+0x1ac>)
 8001706:	f000 f909 	bl	800191c <log_error>
        return PARSE_INPUT_TOO_LARGE;
 800170a:	2304      	movs	r3, #4
 800170c:	e040      	b.n	8001790 <PacketParser_Parse+0x188>
    }
    log_debug("Copying INPUT DATA to Packet Structure.");
 800170e:	482a      	ldr	r0, [pc, #168]	@ (80017b8 <PacketParser_Parse+0x1b0>)
 8001710:	f000 f8b6 	bl	8001880 <log_debug>
    // Copy INPUT_DATA array from Data Stream to Packet structure
    memcpy(parsedPacket->inputData, &rawData[index], parsedPacket->inputSize);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f103 0008 	add.w	r0, r3, #8
 800171a:	8afb      	ldrh	r3, [r7, #22]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	18d1      	adds	r1, r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	88db      	ldrh	r3, [r3, #6]
 8001724:	461a      	mov	r2, r3
 8001726:	f011 f92e 	bl	8012986 <memcpy>
    // Set Index to point EOD Flag
    if(!(parsedPacket->inputSize))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	88db      	ldrh	r3, [r3, #6]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d102      	bne.n	8001738 <PacketParser_Parse+0x130>
    {
    	index = 8;
 8001732:	2308      	movs	r3, #8
 8001734:	82fb      	strh	r3, [r7, #22]
 8001736:	e004      	b.n	8001742 <PacketParser_Parse+0x13a>
    }
    else
    {
    	index += parsedPacket->inputSize;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	88da      	ldrh	r2, [r3, #6]
 800173c:	8afb      	ldrh	r3, [r7, #22]
 800173e:	4413      	add	r3, r2
 8001740:	82fb      	strh	r3, [r7, #22]
    }
    log_debug("Checking the Received EOD word.");
 8001742:	481e      	ldr	r0, [pc, #120]	@ (80017bc <PacketParser_Parse+0x1b4>)
 8001744:	f000 f89c 	bl	8001880 <log_debug>
    // Retrieve EOD Flag from Data Stream
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8001748:	8afb      	ldrh	r3, [r7, #22]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4413      	add	r3, r2
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	061a      	lsls	r2, r3, #24
                           	   (rawData[index + 1] << 16) |
 8001752:	8afb      	ldrh	r3, [r7, #22]
 8001754:	3301      	adds	r3, #1
 8001756:	68f9      	ldr	r1, [r7, #12]
 8001758:	440b      	add	r3, r1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	041b      	lsls	r3, r3, #16
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 800175e:	431a      	orrs	r2, r3
							   (rawData[index + 2] << 8)  |
 8001760:	8afb      	ldrh	r3, [r7, #22]
 8001762:	3302      	adds	r3, #2
 8001764:	68f9      	ldr	r1, [r7, #12]
 8001766:	440b      	add	r3, r1
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	021b      	lsls	r3, r3, #8
                           	   (rawData[index + 1] << 16) |
 800176c:	4313      	orrs	r3, r2
							   (rawData[index + 3]);
 800176e:	8afa      	ldrh	r2, [r7, #22]
 8001770:	3203      	adds	r2, #3
 8001772:	68f9      	ldr	r1, [r7, #12]
 8001774:	440a      	add	r2, r1
 8001776:	7812      	ldrb	r2, [r2, #0]
							   (rawData[index + 2] << 8)  |
 8001778:	4313      	orrs	r3, r2
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 800177a:	613b      	str	r3, [r7, #16]
    // Check if EOD Flag is valid
    if (received_IN_EOD != IN_EOD_FLAG)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4a10      	ldr	r2, [pc, #64]	@ (80017c0 <PacketParser_Parse+0x1b8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d004      	beq.n	800178e <PacketParser_Parse+0x186>
    {
    	log_error("Received EOD Flag is Invalid");
 8001784:	480f      	ldr	r0, [pc, #60]	@ (80017c4 <PacketParser_Parse+0x1bc>)
 8001786:	f000 f8c9 	bl	800191c <log_error>
        return PARSE_EOD_MISMATCH;
 800178a:	2302      	movs	r3, #2
 800178c:	e000      	b.n	8001790 <PacketParser_Parse+0x188>
    }
    // Return to Indicate successful parsing
    return PARSE_SUCCESS;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	08014474 	.word	0x08014474
 800179c:	080144ac 	.word	0x080144ac
 80017a0:	080144d4 	.word	0x080144d4
 80017a4:	0801450c 	.word	0x0801450c
 80017a8:	08014534 	.word	0x08014534
 80017ac:	08014550 	.word	0x08014550
 80017b0:	08014580 	.word	0x08014580
 80017b4:	080145b0 	.word	0x080145b0
 80017b8:	080145cc 	.word	0x080145cc
 80017bc:	080145f4 	.word	0x080145f4
 80017c0:	deadbeef 	.word	0xdeadbeef
 80017c4:	08014614 	.word	0x08014614

080017c8 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 80017d2:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <log_init+0x1c>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	7013      	strb	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	20000000 	.word	0x20000000

080017e8 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b0c7      	sub	sp, #284	@ 0x11c
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	4604      	mov	r4, r0
 80017f0:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80017f4:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 80017f8:	6001      	str	r1, [r0, #0]
 80017fa:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80017fe:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8001802:	600a      	str	r2, [r1, #0]
 8001804:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001808:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001812:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001816:	4622      	mov	r2, r4
 8001818:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <log_generic+0x8c>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001822:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 8001826:	7812      	ldrb	r2, [r2, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d31e      	bcc.n	800186a <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 800182c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001830:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8001834:	f107 0010 	add.w	r0, r7, #16
 8001838:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001842:	f011 f817 	bl	8012874 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800184e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001852:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001856:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800185a:	4807      	ldr	r0, [pc, #28]	@ (8001878 <log_generic+0x90>)
 800185c:	9000      	str	r0, [sp, #0]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	6809      	ldr	r1, [r1, #0]
 8001862:	4806      	ldr	r0, [pc, #24]	@ (800187c <log_generic+0x94>)
 8001864:	f010 ff32 	bl	80126cc <iprintf>
 8001868:	e000      	b.n	800186c <log_generic+0x84>
        return;
 800186a:	bf00      	nop
}
 800186c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001870:	46bd      	mov	sp, r7
 8001872:	bd90      	pop	{r4, r7, pc}
 8001874:	20000000 	.word	0x20000000
 8001878:	08014644 	.word	0x08014644
 800187c:	08014634 	.word	0x08014634

08001880 <log_debug>:

void log_debug(const char *fmt, ...)
{
 8001880:	b40f      	push	{r0, r1, r2, r3}
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <log_debug+0x2c>)
 8001896:	4906      	ldr	r1, [pc, #24]	@ (80018b0 <log_debug+0x30>)
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff ffa5 	bl	80017e8 <log_generic>
    va_end(args);
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018a8:	b004      	add	sp, #16
 80018aa:	4770      	bx	lr
 80018ac:	0801464c 	.word	0x0801464c
 80018b0:	08014654 	.word	0x08014654

080018b4 <log_info>:

void log_info(const char *fmt, ...)
{
 80018b4:	b40f      	push	{r0, r1, r2, r3}
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4a05      	ldr	r2, [pc, #20]	@ (80018e0 <log_info+0x2c>)
 80018ca:	4906      	ldr	r1, [pc, #24]	@ (80018e4 <log_info+0x30>)
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7ff ff8b 	bl	80017e8 <log_generic>
    va_end(args);
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018dc:	b004      	add	sp, #16
 80018de:	4770      	bx	lr
 80018e0:	0801465c 	.word	0x0801465c
 80018e4:	08014664 	.word	0x08014664

080018e8 <log_warn>:

void log_warn(const char *fmt, ...)
{
 80018e8:	b40f      	push	{r0, r1, r2, r3}
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <log_warn+0x2c>)
 80018fe:	4906      	ldr	r1, [pc, #24]	@ (8001918 <log_warn+0x30>)
 8001900:	2002      	movs	r0, #2
 8001902:	f7ff ff71 	bl	80017e8 <log_generic>
    va_end(args);
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001910:	b004      	add	sp, #16
 8001912:	4770      	bx	lr
 8001914:	0801466c 	.word	0x0801466c
 8001918:	08014674 	.word	0x08014674

0800191c <log_error>:

void log_error(const char *fmt, ...)
{
 800191c:	b40f      	push	{r0, r1, r2, r3}
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4a05      	ldr	r2, [pc, #20]	@ (8001948 <log_error+0x2c>)
 8001932:	4906      	ldr	r1, [pc, #24]	@ (800194c <log_error+0x30>)
 8001934:	2003      	movs	r0, #3
 8001936:	f7ff ff57 	bl	80017e8 <log_generic>
    va_end(args);
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001944:	b004      	add	sp, #16
 8001946:	4770      	bx	lr
 8001948:	0801467c 	.word	0x0801467c
 800194c:	08014684 	.word	0x08014684

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001954:	f001 fb8c 	bl	8003070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001958:	f000 f848 	bl	80019ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195c:	f000 fafe 	bl	8001f5c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8001960:	f000 fa9a 	bl	8001e98 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8001964:	f000 fa00 	bl	8001d68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001968:	f000 f8d0 	bl	8001b0c <MX_I2C1_Init>
  MX_SPI1_Init();
 800196c:	f000 f9a6 	bl	8001cbc <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8001970:	f000 fa46 	bl	8001e00 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8001974:	f000 f920 	bl	8001bb8 <MX_RTC_Init>
  MX_RNG_Init();
 8001978:	f000 f908 	bl	8001b8c <MX_RNG_Init>
  MX_HASH_Init();
 800197c:	f000 f8ac 	bl	8001ad8 <MX_HASH_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 8001980:	bf00      	nop
 8001982:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <main+0x94>)
 8001984:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0fa      	beq.n	8001982 <main+0x32>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800198c:	2000      	movs	r0, #0
 800198e:	f001 f955 	bl	8002c3c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001992:	2001      	movs	r0, #1
 8001994:	f001 f952 	bl	8002c3c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001998:	2002      	movs	r0, #2
 800199a:	f001 f94f 	bl	8002c3c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800199e:	2101      	movs	r1, #1
 80019a0:	2000      	movs	r0, #0
 80019a2:	f001 f9eb 	bl	8002d7c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <main+0x98>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ac:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	@ (80019e8 <main+0x98>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <main+0x98>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <main+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80019c0:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <main+0x98>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80019c6:	4908      	ldr	r1, [pc, #32]	@ (80019e8 <main+0x98>)
 80019c8:	2000      	movs	r0, #0
 80019ca:	f001 fa71 	bl	8002eb0 <BSP_COM_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <main+0x88>
  {
    Error_Handler();
 80019d4:	f000 fbce 	bl	8002174 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HSMManager_Init();
 80019d8:	f7ff f8bc 	bl	8000b54 <HSMManager_Init>

  HSMManager_ProcessCommand();
 80019dc:	f7ff f92e 	bl	8000c3c <HSMManager_ProcessCommand>
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <main+0x90>
 80019e4:	20000760 	.word	0x20000760
 80019e8:	200001dc 	.word	0x200001dc

080019ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b09c      	sub	sp, #112	@ 0x70
 80019f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	2250      	movs	r2, #80	@ 0x50
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f010 ff48 	bl	8012890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
 8001a10:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001a12:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad0 <SystemClock_Config+0xe4>)
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	4a2e      	ldr	r2, [pc, #184]	@ (8001ad0 <SystemClock_Config+0xe4>)
 8001a18:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001a1c:	6113      	str	r3, [r2, #16]
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad0 <SystemClock_Config+0xe4>)
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a2a:	bf00      	nop
 8001a2c:	4b28      	ldr	r3, [pc, #160]	@ (8001ad0 <SystemClock_Config+0xe4>)
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d1f9      	bne.n	8001a2c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001a38:	2329      	movs	r3, #41	@ 0x29
 8001a3a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a3c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a42:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001a52:	2303      	movs	r3, #3
 8001a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a56:	2304      	movs	r3, #4
 8001a58:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8001a5a:	23fa      	movs	r3, #250	@ 0xfa
 8001a5c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a62:	2302      	movs	r3, #2
 8001a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a66:	2302      	movs	r3, #2
 8001a68:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a76:	f107 0320 	add.w	r3, r7, #32
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 fd76 	bl	800656c <HAL_RCC_OscConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a86:	f000 fb75 	bl	8002174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a8a:	231f      	movs	r3, #31
 8001a8c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	2105      	movs	r1, #5
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f005 f997 	bl	8006ddc <HAL_RCC_ClockConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001ab4:	f000 fb5e 	bl	8002174 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <SystemClock_Config+0xe8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ac0:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <SystemClock_Config+0xe8>)
 8001ac2:	f043 0320 	orr.w	r3, r3, #32
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	3770      	adds	r7, #112	@ 0x70
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	44020800 	.word	0x44020800
 8001ad4:	40022000 	.word	0x40022000

08001ad8 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <MX_HASH_Init+0x2c>)
 8001ade:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <MX_HASH_Init+0x30>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_BYTE_SWAP;
 8001ae2:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <MX_HASH_Init+0x2c>)
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <MX_HASH_Init+0x2c>)
 8001aea:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8001aee:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8001af0:	4804      	ldr	r0, [pc, #16]	@ (8001b04 <MX_HASH_Init+0x2c>)
 8001af2:	f001 ff6d 	bl	80039d0 <HAL_HASH_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_HASH_Init+0x28>
  {
    Error_Handler();
 8001afc:	f000 fb3a 	bl	8002174 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200001ec 	.word	0x200001ec
 8001b08:	420c0400 	.word	0x420c0400

08001b0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <MX_I2C1_Init+0x74>)
 8001b12:	4a1c      	ldr	r2, [pc, #112]	@ (8001b84 <MX_I2C1_Init+0x78>)
 8001b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	@ (8001b80 <MX_I2C1_Init+0x74>)
 8001b18:	4a1b      	ldr	r2, [pc, #108]	@ (8001b88 <MX_I2C1_Init+0x7c>)
 8001b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	@ (8001b80 <MX_I2C1_Init+0x74>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b22:	4b17      	ldr	r3, [pc, #92]	@ (8001b80 <MX_I2C1_Init+0x74>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b28:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <MX_I2C1_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <MX_I2C1_Init+0x74>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b34:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <MX_I2C1_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <MX_I2C1_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <MX_I2C1_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b46:	480e      	ldr	r0, [pc, #56]	@ (8001b80 <MX_I2C1_Init+0x74>)
 8001b48:	f002 feda 	bl	8004900 <HAL_I2C_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b52:	f000 fb0f 	bl	8002174 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b56:	2100      	movs	r1, #0
 8001b58:	4809      	ldr	r0, [pc, #36]	@ (8001b80 <MX_I2C1_Init+0x74>)
 8001b5a:	f002 ff6c 	bl	8004a36 <HAL_I2CEx_ConfigAnalogFilter>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b64:	f000 fb06 	bl	8002174 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_I2C1_Init+0x74>)
 8001b6c:	f002 ffae 	bl	8004acc <HAL_I2CEx_ConfigDigitalFilter>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b76:	f000 fafd 	bl	8002174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000022c 	.word	0x2000022c
 8001b84:	40005400 	.word	0x40005400
 8001b88:	10c043e5 	.word	0x10c043e5

08001b8c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001b90:	4b07      	ldr	r3, [pc, #28]	@ (8001bb0 <MX_RNG_Init+0x24>)
 8001b92:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <MX_RNG_Init+0x28>)
 8001b94:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <MX_RNG_Init+0x24>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b9c:	4804      	ldr	r0, [pc, #16]	@ (8001bb0 <MX_RNG_Init+0x24>)
 8001b9e:	f00a fcb7 	bl	800c510 <HAL_RNG_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001ba8:	f000 fae4 	bl	8002174 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000280 	.word	0x20000280
 8001bb4:	420c0800 	.word	0x420c0800

08001bb8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08e      	sub	sp, #56	@ 0x38
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001be6:	4b33      	ldr	r3, [pc, #204]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001be8:	4a33      	ldr	r2, [pc, #204]	@ (8001cb8 <MX_RTC_Init+0x100>)
 8001bea:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bec:	4b31      	ldr	r3, [pc, #196]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bf2:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001bf4:	227f      	movs	r2, #127	@ 0x7f
 8001bf6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001bfa:	22ff      	movs	r2, #255	@ 0xff
 8001bfc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c04:	4b2b      	ldr	r3, [pc, #172]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c10:	4b28      	ldr	r3, [pc, #160]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001c12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c16:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001c18:	4b26      	ldr	r3, [pc, #152]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001c1e:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c24:	4823      	ldr	r0, [pc, #140]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001c26:	f00a fe17 	bl	800c858 <HAL_RTC_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001c30:	f000 faa0 	bl	8002174 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481a      	ldr	r0, [pc, #104]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001c4c:	f00b f86a 	bl	800cd24 <HAL_RTCEx_PrivilegeModeSet>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001c56:	f000 fa8d 	bl	8002174 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	2201      	movs	r2, #1
 8001c74:	4619      	mov	r1, r3
 8001c76:	480f      	ldr	r0, [pc, #60]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001c78:	f00a fe70 	bl	800c95c <HAL_RTC_SetTime>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001c82:	f000 fa77 	bl	8002174 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c86:	2301      	movs	r3, #1
 8001c88:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	@ (8001cb4 <MX_RTC_Init+0xfc>)
 8001c9e:	f00a feef 	bl	800ca80 <HAL_RTC_SetDate>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001ca8:	f000 fa64 	bl	8002174 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	3738      	adds	r7, #56	@ 0x38
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000294 	.word	0x20000294
 8001cb8:	44007800 	.word	0x44007800

08001cbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cc0:	4b27      	ldr	r3, [pc, #156]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001cc2:	4a28      	ldr	r2, [pc, #160]	@ (8001d64 <MX_SPI1_Init+0xa8>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cc6:	4b26      	ldr	r3, [pc, #152]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001cc8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ccc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cce:	4b24      	ldr	r3, [pc, #144]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd4:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cda:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001ce8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001cf0:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001cf4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d0a:	2207      	movs	r2, #7
 8001d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d14:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d16:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d1c:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d28:	4b0d      	ldr	r3, [pc, #52]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d34:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d3a:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001d40:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d4c:	4804      	ldr	r0, [pc, #16]	@ (8001d60 <MX_SPI1_Init+0xa4>)
 8001d4e:	f00b f817 	bl	800cd80 <HAL_SPI_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d58:	f000 fa0c 	bl	8002174 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	200002c4 	.word	0x200002c4
 8001d64:	40013000 	.word	0x40013000

08001d68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d6c:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d6e:	4a23      	ldr	r2, [pc, #140]	@ (8001dfc <MX_USART2_UART_Init+0x94>)
 8001d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d72:	4b21      	ldr	r3, [pc, #132]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d8e:	220c      	movs	r2, #12
 8001d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b19      	ldr	r3, [pc, #100]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da4:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001daa:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db0:	4811      	ldr	r0, [pc, #68]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001db2:	f00b f970 	bl	800d096 <HAL_UART_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001dbc:	f000 f9da 	bl	8002174 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	480d      	ldr	r0, [pc, #52]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001dc4:	f00b fe9c 	bl	800db00 <HAL_UARTEx_SetTxFifoThreshold>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001dce:	f000 f9d1 	bl	8002174 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4808      	ldr	r0, [pc, #32]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001dd6:	f00b fed1 	bl	800db7c <HAL_UARTEx_SetRxFifoThreshold>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001de0:	f000 f9c8 	bl	8002174 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	@ (8001df8 <MX_USART2_UART_Init+0x90>)
 8001de6:	f00b fe52 	bl	800da8e <HAL_UARTEx_DisableFifoMode>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001df0:	f000 f9c0 	bl	8002174 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000354 	.word	0x20000354
 8001dfc:	40004400 	.word	0x40004400

08001e00 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e04:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e06:	4a23      	ldr	r2, [pc, #140]	@ (8001e94 <MX_USART6_UART_Init+0x94>)
 8001e08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001e0a:	4b21      	ldr	r3, [pc, #132]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e12:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e18:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e26:	220c      	movs	r2, #12
 8001e28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2a:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e30:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e36:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e48:	4811      	ldr	r0, [pc, #68]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e4a:	f00b f924 	bl	800d096 <HAL_UART_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001e54:	f000 f98e 	bl	8002174 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e58:	2100      	movs	r1, #0
 8001e5a:	480d      	ldr	r0, [pc, #52]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e5c:	f00b fe50 	bl	800db00 <HAL_UARTEx_SetTxFifoThreshold>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001e66:	f000 f985 	bl	8002174 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4808      	ldr	r0, [pc, #32]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e6e:	f00b fe85 	bl	800db7c <HAL_UARTEx_SetRxFifoThreshold>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001e78:	f000 f97c 	bl	8002174 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	@ (8001e90 <MX_USART6_UART_Init+0x90>)
 8001e7e:	f00b fe06 	bl	800da8e <HAL_UARTEx_DisableFifoMode>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001e88:	f000 f974 	bl	8002174 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200003e8 	.word	0x200003e8
 8001e94:	40006400 	.word	0x40006400

08001e98 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8001e9c:	4b29      	ldr	r3, [pc, #164]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f48 <MX_USB_PCD_Init+0xb0>)
 8001ea0:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001ea4:	4b27      	ldr	r3, [pc, #156]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001ea6:	4a29      	ldr	r2, [pc, #164]	@ (8001f4c <MX_USB_PCD_Init+0xb4>)
 8001ea8:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001eaa:	4b26      	ldr	r3, [pc, #152]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001eac:	2208      	movs	r2, #8
 8001eae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001eb0:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001eb6:	4b23      	ldr	r3, [pc, #140]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001eb8:	2202      	movs	r2, #2
 8001eba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001ebc:	4b21      	ldr	r3, [pc, #132]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001ec2:	4b20      	ldr	r3, [pc, #128]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001ece:	4b1d      	ldr	r3, [pc, #116]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001eda:	4b1a      	ldr	r3, [pc, #104]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001ee6:	4817      	ldr	r0, [pc, #92]	@ (8001f44 <MX_USB_PCD_Init+0xac>)
 8001ee8:	f002 fe9f 	bl	8004c2a <HAL_PCD_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8001ef2:	f000 f93f 	bl	8002174 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	4915      	ldr	r1, [pc, #84]	@ (8001f50 <MX_USB_PCD_Init+0xb8>)
 8001efa:	4813      	ldr	r0, [pc, #76]	@ (8001f48 <MX_USB_PCD_Init+0xb0>)
 8001efc:	f00e ffe6 	bl	8010ecc <USBD_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8001f06:	f000 f935 	bl	8002174 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001f0a:	4912      	ldr	r1, [pc, #72]	@ (8001f54 <MX_USB_PCD_Init+0xbc>)
 8001f0c:	480e      	ldr	r0, [pc, #56]	@ (8001f48 <MX_USB_PCD_Init+0xb0>)
 8001f0e:	f00f f80d 	bl	8010f2c <USBD_RegisterClass>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8001f18:	f000 f92c 	bl	8002174 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8001f1c:	490e      	ldr	r1, [pc, #56]	@ (8001f58 <MX_USB_PCD_Init+0xc0>)
 8001f1e:	480a      	ldr	r0, [pc, #40]	@ (8001f48 <MX_USB_PCD_Init+0xb0>)
 8001f20:	f00e fa8c 	bl	801043c <USBD_CDC_RegisterInterface>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8001f2a:	f000 f923 	bl	8002174 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001f2e:	4806      	ldr	r0, [pc, #24]	@ (8001f48 <MX_USB_PCD_Init+0xb0>)
 8001f30:	f00f f832 	bl	8010f98 <USBD_Start>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8001f3a:	f000 f91b 	bl	8002174 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000047c 	.word	0x2000047c
 8001f48:	20000760 	.word	0x20000760
 8001f4c:	40016000 	.word	0x40016000
 8001f50:	200000d4 	.word	0x200000d4
 8001f54:	20000038 	.word	0x20000038
 8001f58:	200000b8 	.word	0x200000b8

08001f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	@ 0x30
 8001f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f72:	4b7a      	ldr	r3, [pc, #488]	@ (800215c <MX_GPIO_Init+0x200>)
 8001f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f78:	4a78      	ldr	r2, [pc, #480]	@ (800215c <MX_GPIO_Init+0x200>)
 8001f7a:	f043 0310 	orr.w	r3, r3, #16
 8001f7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f82:	4b76      	ldr	r3, [pc, #472]	@ (800215c <MX_GPIO_Init+0x200>)
 8001f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f90:	4b72      	ldr	r3, [pc, #456]	@ (800215c <MX_GPIO_Init+0x200>)
 8001f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f96:	4a71      	ldr	r2, [pc, #452]	@ (800215c <MX_GPIO_Init+0x200>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fa0:	4b6e      	ldr	r3, [pc, #440]	@ (800215c <MX_GPIO_Init+0x200>)
 8001fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fae:	4b6b      	ldr	r3, [pc, #428]	@ (800215c <MX_GPIO_Init+0x200>)
 8001fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb4:	4a69      	ldr	r2, [pc, #420]	@ (800215c <MX_GPIO_Init+0x200>)
 8001fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fbe:	4b67      	ldr	r3, [pc, #412]	@ (800215c <MX_GPIO_Init+0x200>)
 8001fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	4b63      	ldr	r3, [pc, #396]	@ (800215c <MX_GPIO_Init+0x200>)
 8001fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fd2:	4a62      	ldr	r2, [pc, #392]	@ (800215c <MX_GPIO_Init+0x200>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fdc:	4b5f      	ldr	r3, [pc, #380]	@ (800215c <MX_GPIO_Init+0x200>)
 8001fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fea:	4b5c      	ldr	r3, [pc, #368]	@ (800215c <MX_GPIO_Init+0x200>)
 8001fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ff0:	4a5a      	ldr	r2, [pc, #360]	@ (800215c <MX_GPIO_Init+0x200>)
 8001ff2:	f043 0302 	orr.w	r3, r3, #2
 8001ff6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ffa:	4b58      	ldr	r3, [pc, #352]	@ (800215c <MX_GPIO_Init+0x200>)
 8001ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002008:	4b54      	ldr	r3, [pc, #336]	@ (800215c <MX_GPIO_Init+0x200>)
 800200a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800200e:	4a53      	ldr	r2, [pc, #332]	@ (800215c <MX_GPIO_Init+0x200>)
 8002010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002014:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002018:	4b50      	ldr	r3, [pc, #320]	@ (800215c <MX_GPIO_Init+0x200>)
 800201a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800201e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002026:	4b4d      	ldr	r3, [pc, #308]	@ (800215c <MX_GPIO_Init+0x200>)
 8002028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800202c:	4a4b      	ldr	r2, [pc, #300]	@ (800215c <MX_GPIO_Init+0x200>)
 800202e:	f043 0308 	orr.w	r3, r3, #8
 8002032:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002036:	4b49      	ldr	r3, [pc, #292]	@ (800215c <MX_GPIO_Init+0x200>)
 8002038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002044:	2332      	movs	r3, #50	@ 0x32
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002054:	230b      	movs	r3, #11
 8002056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	4619      	mov	r1, r3
 800205e:	4840      	ldr	r0, [pc, #256]	@ (8002160 <MX_GPIO_Init+0x204>)
 8002060:	f001 fb32 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002064:	2384      	movs	r3, #132	@ 0x84
 8002066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002070:	2302      	movs	r3, #2
 8002072:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002074:	230b      	movs	r3, #11
 8002076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	4839      	ldr	r0, [pc, #228]	@ (8002164 <MX_GPIO_Init+0x208>)
 8002080:	f001 fb22 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8002084:	2310      	movs	r3, #16
 8002086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002088:	2303      	movs	r3, #3
 800208a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	4619      	mov	r1, r3
 8002096:	4833      	ldr	r0, [pc, #204]	@ (8002164 <MX_GPIO_Init+0x208>)
 8002098:	f001 fb16 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800209c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020ae:	2307      	movs	r3, #7
 80020b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	4619      	mov	r1, r3
 80020b8:	482b      	ldr	r0, [pc, #172]	@ (8002168 <MX_GPIO_Init+0x20c>)
 80020ba:	f001 fb05 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 80020be:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80020c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020c4:	2303      	movs	r3, #3
 80020c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	4619      	mov	r1, r3
 80020d2:	4825      	ldr	r0, [pc, #148]	@ (8002168 <MX_GPIO_Init+0x20c>)
 80020d4:	f001 faf8 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80020d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e6:	2302      	movs	r3, #2
 80020e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020ea:	230b      	movs	r3, #11
 80020ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020ee:	f107 031c 	add.w	r3, r7, #28
 80020f2:	4619      	mov	r1, r3
 80020f4:	481c      	ldr	r0, [pc, #112]	@ (8002168 <MX_GPIO_Init+0x20c>)
 80020f6:	f001 fae7 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80020fa:	2380      	movs	r3, #128	@ 0x80
 80020fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020fe:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <MX_GPIO_Init+0x210>)
 8002100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	4619      	mov	r1, r3
 800210c:	4818      	ldr	r0, [pc, #96]	@ (8002170 <MX_GPIO_Init+0x214>)
 800210e:	f001 fadb 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8002112:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002120:	2302      	movs	r3, #2
 8002122:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002124:	230b      	movs	r3, #11
 8002126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	4810      	ldr	r0, [pc, #64]	@ (8002170 <MX_GPIO_Init+0x214>)
 8002130:	f001 faca 	bl	80036c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8002134:	23c0      	movs	r3, #192	@ 0xc0
 8002136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002144:	2308      	movs	r3, #8
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4619      	mov	r1, r3
 800214e:	4806      	ldr	r0, [pc, #24]	@ (8002168 <MX_GPIO_Init+0x20c>)
 8002150:	f001 faba 	bl	80036c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002154:	bf00      	nop
 8002156:	3730      	adds	r7, #48	@ 0x30
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	44020c00 	.word	0x44020c00
 8002160:	42020800 	.word	0x42020800
 8002164:	42020000 	.word	0x42020000
 8002168:	42020400 	.word	0x42020400
 800216c:	10110000 	.word	0x10110000
 8002170:	42021800 	.word	0x42021800

08002174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002178:	b672      	cpsid	i
}
 800217a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <Error_Handler+0x8>

08002180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8002198:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <HAL_HASH_MspInit+0x40>)
 800219a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800219e:	4a0c      	ldr	r2, [pc, #48]	@ (80021d0 <HAL_HASH_MspInit+0x40>)
 80021a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021a8:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <HAL_HASH_MspInit+0x40>)
 80021aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    /* HASH interrupt Init */
    HAL_NVIC_SetPriority(HASH_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	2075      	movs	r0, #117	@ 0x75
 80021bc:	f001 f916 	bl	80033ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_IRQn);
 80021c0:	2075      	movs	r0, #117	@ 0x75
 80021c2:	f001 f92d 	bl	8003420 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	44020c00 	.word	0x44020c00

080021d4 <HAL_HASH_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspDeInit(HASH_HandleTypeDef* hhash)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspDeInit 0 */

  /* USER CODE END HASH_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_HASH_CLK_DISABLE();
 80021dc:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <HAL_HASH_MspDeInit+0x28>)
 80021de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021e2:	4a06      	ldr	r2, [pc, #24]	@ (80021fc <HAL_HASH_MspDeInit+0x28>)
 80021e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80021e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* HASH interrupt DeInit */
    HAL_NVIC_DisableIRQ(HASH_IRQn);
 80021ec:	2075      	movs	r0, #117	@ 0x75
 80021ee:	f001 f925 	bl	800343c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN HASH_MspDeInit 1 */

  /* USER CODE END HASH_MspDeInit 1 */

}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	44020c00 	.word	0x44020c00

08002200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b0cc      	sub	sp, #304	@ 0x130
 8002204:	af00      	add	r7, sp, #0
 8002206:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800220a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800220e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002220:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002224:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002228:	4618      	mov	r0, r3
 800222a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800222e:	461a      	mov	r2, r3
 8002230:	2100      	movs	r1, #0
 8002232:	f010 fb2d 	bl	8012890 <memset>
  if(hi2c->Instance==I2C1)
 8002236:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800223a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a33      	ldr	r2, [pc, #204]	@ (8002310 <HAL_I2C_MspInit+0x110>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d15e      	bne.n	8002306 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002248:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800224c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002250:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800225c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002260:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002264:	2200      	movs	r2, #0
 8002266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226a:	f107 0310 	add.w	r3, r7, #16
 800226e:	4618      	mov	r0, r3
 8002270:	f005 f8f6 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800227a:	f7ff ff7b 	bl	8002174 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800227e:	4b25      	ldr	r3, [pc, #148]	@ (8002314 <HAL_I2C_MspInit+0x114>)
 8002280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002284:	4a23      	ldr	r2, [pc, #140]	@ (8002314 <HAL_I2C_MspInit+0x114>)
 8002286:	f043 0302 	orr.w	r3, r3, #2
 800228a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800228e:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <HAL_I2C_MspInit+0x114>)
 8002290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002294:	f003 0202 	and.w	r2, r3, #2
 8002298:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800229c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80022a6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80022aa:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b4:	2312      	movs	r3, #18
 80022b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022c6:	2304      	movs	r3, #4
 80022c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022cc:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80022d0:	4619      	mov	r1, r3
 80022d2:	4811      	ldr	r0, [pc, #68]	@ (8002318 <HAL_I2C_MspInit+0x118>)
 80022d4:	f001 f9f8 	bl	80036c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <HAL_I2C_MspInit+0x114>)
 80022da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022de:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <HAL_I2C_MspInit+0x114>)
 80022e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022e4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_I2C_MspInit+0x114>)
 80022ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022ee:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80022f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80022f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002300:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002304:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002306:	bf00      	nop
 8002308:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40005400 	.word	0x40005400
 8002314:	44020c00 	.word	0x44020c00
 8002318:	42020400 	.word	0x42020400

0800231c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b0c6      	sub	sp, #280	@ 0x118
 8002320:	af00      	add	r7, sp, #0
 8002322:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002326:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800232a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800232c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002334:	4618      	mov	r0, r3
 8002336:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800233a:	461a      	mov	r2, r3
 800233c:	2100      	movs	r1, #0
 800233e:	f010 faa7 	bl	8012890 <memset>
  if(hrng->Instance==RNG)
 8002342:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002346:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a1d      	ldr	r2, [pc, #116]	@ (80023c4 <HAL_RNG_MspInit+0xa8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d131      	bne.n	80023b8 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002354:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002358:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 800235c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002368:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800236c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002370:	2200      	movs	r2, #0
 8002372:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	4618      	mov	r0, r3
 800237c:	f005 f870 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8002386:	f7ff fef5 	bl	8002174 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800238a:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <HAL_RNG_MspInit+0xac>)
 800238c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002390:	4a0d      	ldr	r2, [pc, #52]	@ (80023c8 <HAL_RNG_MspInit+0xac>)
 8002392:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002396:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800239a:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <HAL_RNG_MspInit+0xac>)
 800239c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023a0:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80023a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80023b6:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80023b8:	bf00      	nop
 80023ba:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	420c0800 	.word	0x420c0800
 80023c8:	44020c00 	.word	0x44020c00

080023cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b0c6      	sub	sp, #280	@ 0x118
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023da:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80023e4:	4618      	mov	r0, r3
 80023e6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80023ea:	461a      	mov	r2, r3
 80023ec:	2100      	movs	r1, #0
 80023ee:	f010 fa4f 	bl	8012890 <memset>
  if(hrtc->Instance==RTC)
 80023f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80023f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a21      	ldr	r2, [pc, #132]	@ (8002484 <HAL_RTC_MspInit+0xb8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d13a      	bne.n	800247a <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002404:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002408:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 800240c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002418:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800241c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002420:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002424:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	4618      	mov	r0, r3
 800242e:	f005 f817 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8002438:	f7ff fe9c 	bl	8002174 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_RTC_MspInit+0xbc>)
 800243e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002442:	4a11      	ldr	r2, [pc, #68]	@ (8002488 <HAL_RTC_MspInit+0xbc>)
 8002444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002448:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800244c:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <HAL_RTC_MspInit+0xbc>)
 800244e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002452:	4a0d      	ldr	r2, [pc, #52]	@ (8002488 <HAL_RTC_MspInit+0xbc>)
 8002454:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002458:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800245c:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_RTC_MspInit+0xbc>)
 800245e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002462:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002466:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800246a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002474:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002478:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800247a:	bf00      	nop
 800247c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	44007800 	.word	0x44007800
 8002488:	44020c00 	.word	0x44020c00

0800248c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0ce      	sub	sp, #312	@ 0x138
 8002490:	af00      	add	r7, sp, #0
 8002492:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002496:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800249a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80024b0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80024b4:	4618      	mov	r0, r3
 80024b6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80024ba:	461a      	mov	r2, r3
 80024bc:	2100      	movs	r1, #0
 80024be:	f010 f9e7 	bl	8012890 <memset>
  if(hspi->Instance==SPI1)
 80024c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80024c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a49      	ldr	r2, [pc, #292]	@ (80025f4 <HAL_SPI_MspInit+0x168>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	f040 808a 	bne.w	80025ea <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80024d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80024da:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80024de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 80024ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80024ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80024f2:	2200      	movs	r2, #0
 80024f4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f8:	f107 0318 	add.w	r3, r7, #24
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 ffaf 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8002508:	f7ff fe34 	bl	8002174 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800250c:	4b3a      	ldr	r3, [pc, #232]	@ (80025f8 <HAL_SPI_MspInit+0x16c>)
 800250e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002512:	4a39      	ldr	r2, [pc, #228]	@ (80025f8 <HAL_SPI_MspInit+0x16c>)
 8002514:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002518:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800251c:	4b36      	ldr	r3, [pc, #216]	@ (80025f8 <HAL_SPI_MspInit+0x16c>)
 800251e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002522:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002526:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800252a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002534:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002538:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	4b2f      	ldr	r3, [pc, #188]	@ (80025f8 <HAL_SPI_MspInit+0x16c>)
 800253c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002540:	4a2d      	ldr	r2, [pc, #180]	@ (80025f8 <HAL_SPI_MspInit+0x16c>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800254a:	4b2b      	ldr	r3, [pc, #172]	@ (80025f8 <HAL_SPI_MspInit+0x16c>)
 800254c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002550:	f003 0201 	and.w	r2, r3, #1
 8002554:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002558:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002562:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002566:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002568:	4b23      	ldr	r3, [pc, #140]	@ (80025f8 <HAL_SPI_MspInit+0x16c>)
 800256a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800256e:	4a22      	ldr	r2, [pc, #136]	@ (80025f8 <HAL_SPI_MspInit+0x16c>)
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002578:	4b1f      	ldr	r3, [pc, #124]	@ (80025f8 <HAL_SPI_MspInit+0x16c>)
 800257a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800257e:	f003 0208 	and.w	r2, r3, #8
 8002582:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002586:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002590:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002594:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002596:	2360      	movs	r3, #96	@ 0x60
 8002598:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ae:	2305      	movs	r3, #5
 80025b0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b4:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80025b8:	4619      	mov	r1, r3
 80025ba:	4810      	ldr	r0, [pc, #64]	@ (80025fc <HAL_SPI_MspInit+0x170>)
 80025bc:	f001 f884 	bl	80036c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025c0:	2380      	movs	r3, #128	@ 0x80
 80025c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025d8:	2305      	movs	r3, #5
 80025da:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025de:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80025e2:	4619      	mov	r1, r3
 80025e4:	4806      	ldr	r0, [pc, #24]	@ (8002600 <HAL_SPI_MspInit+0x174>)
 80025e6:	f001 f86f 	bl	80036c8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80025ea:	bf00      	nop
 80025ec:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40013000 	.word	0x40013000
 80025f8:	44020c00 	.word	0x44020c00
 80025fc:	42020000 	.word	0x42020000
 8002600:	42020c00 	.word	0x42020c00

08002604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b0d0      	sub	sp, #320	@ 0x140
 8002608:	af00      	add	r7, sp, #0
 800260a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800260e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002612:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002624:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002628:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800262c:	4618      	mov	r0, r3
 800262e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8002632:	461a      	mov	r2, r3
 8002634:	2100      	movs	r1, #0
 8002636:	f010 f92b 	bl	8012890 <memset>
  if(huart->Instance==USART2)
 800263a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800263e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a7c      	ldr	r2, [pc, #496]	@ (8002838 <HAL_UART_MspInit+0x234>)
 8002648:	4293      	cmp	r3, r2
 800264a:	f040 808a 	bne.w	8002762 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800264e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002652:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002656:	f04f 0202 	mov.w	r2, #2
 800265a:	f04f 0300 	mov.w	r3, #0
 800265e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002662:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002666:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800266a:	2200      	movs	r2, #0
 800266c:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800266e:	f107 0320 	add.w	r3, r7, #32
 8002672:	4618      	mov	r0, r3
 8002674:	f004 fef4 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800267e:	f7ff fd79 	bl	8002174 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002682:	4b6e      	ldr	r3, [pc, #440]	@ (800283c <HAL_UART_MspInit+0x238>)
 8002684:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002688:	4a6c      	ldr	r2, [pc, #432]	@ (800283c <HAL_UART_MspInit+0x238>)
 800268a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800268e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002692:	4b6a      	ldr	r3, [pc, #424]	@ (800283c <HAL_UART_MspInit+0x238>)
 8002694:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002698:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 800269c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026aa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80026ae:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b0:	4b62      	ldr	r3, [pc, #392]	@ (800283c <HAL_UART_MspInit+0x238>)
 80026b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026b6:	4a61      	ldr	r2, [pc, #388]	@ (800283c <HAL_UART_MspInit+0x238>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026c0:	4b5e      	ldr	r3, [pc, #376]	@ (800283c <HAL_UART_MspInit+0x238>)
 80026c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026c6:	f003 0201 	and.w	r2, r3, #1
 80026ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80026dc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026de:	4b57      	ldr	r3, [pc, #348]	@ (800283c <HAL_UART_MspInit+0x238>)
 80026e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026e4:	4a55      	ldr	r2, [pc, #340]	@ (800283c <HAL_UART_MspInit+0x238>)
 80026e6:	f043 0308 	orr.w	r3, r3, #8
 80026ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026ee:	4b53      	ldr	r3, [pc, #332]	@ (800283c <HAL_UART_MspInit+0x238>)
 80026f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026f4:	f003 0208 	and.w	r2, r3, #8
 80026f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002706:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800270a:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800270c:	2308      	movs	r3, #8
 800270e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002724:	2307      	movs	r3, #7
 8002726:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800272e:	4619      	mov	r1, r3
 8002730:	4843      	ldr	r0, [pc, #268]	@ (8002840 <HAL_UART_MspInit+0x23c>)
 8002732:	f000 ffc9 	bl	80036c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002736:	2320      	movs	r3, #32
 8002738:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800274e:	2307      	movs	r3, #7
 8002750:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002754:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002758:	4619      	mov	r1, r3
 800275a:	483a      	ldr	r0, [pc, #232]	@ (8002844 <HAL_UART_MspInit+0x240>)
 800275c:	f000 ffb4 	bl	80036c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002760:	e065      	b.n	800282e <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 8002762:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002766:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a36      	ldr	r2, [pc, #216]	@ (8002848 <HAL_UART_MspInit+0x244>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d15c      	bne.n	800282e <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002774:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002778:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800277c:	f04f 0220 	mov.w	r2, #32
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002788:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800278c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002790:	2200      	movs	r2, #0
 8002792:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002794:	f107 0320 	add.w	r3, r7, #32
 8002798:	4618      	mov	r0, r3
 800279a:	f004 fe61 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 80027a4:	f7ff fce6 	bl	8002174 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027a8:	4b24      	ldr	r3, [pc, #144]	@ (800283c <HAL_UART_MspInit+0x238>)
 80027aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027ae:	4a23      	ldr	r2, [pc, #140]	@ (800283c <HAL_UART_MspInit+0x238>)
 80027b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80027b8:	4b20      	ldr	r3, [pc, #128]	@ (800283c <HAL_UART_MspInit+0x238>)
 80027ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027be:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 80027c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027c6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027d0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027d4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d6:	4b19      	ldr	r3, [pc, #100]	@ (800283c <HAL_UART_MspInit+0x238>)
 80027d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027dc:	4a17      	ldr	r2, [pc, #92]	@ (800283c <HAL_UART_MspInit+0x238>)
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <HAL_UART_MspInit+0x238>)
 80027e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027ec:	f003 0204 	and.w	r2, r3, #4
 80027f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002802:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002804:	23c0      	movs	r3, #192	@ 0xc0
 8002806:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800281c:	2307      	movs	r3, #7
 800281e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002822:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8002826:	4619      	mov	r1, r3
 8002828:	4808      	ldr	r0, [pc, #32]	@ (800284c <HAL_UART_MspInit+0x248>)
 800282a:	f000 ff4d 	bl	80036c8 <HAL_GPIO_Init>
}
 800282e:	bf00      	nop
 8002830:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40004400 	.word	0x40004400
 800283c:	44020c00 	.word	0x44020c00
 8002840:	42020000 	.word	0x42020000
 8002844:	42020c00 	.word	0x42020c00
 8002848:	40006400 	.word	0x40006400
 800284c:	42020800 	.word	0x42020800

08002850 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b0c6      	sub	sp, #280	@ 0x118
 8002854:	af00      	add	r7, sp, #0
 8002856:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800285a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800285e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002860:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002868:	4618      	mov	r0, r3
 800286a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800286e:	461a      	mov	r2, r3
 8002870:	2100      	movs	r1, #0
 8002872:	f010 f80d 	bl	8012890 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8002876:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800287a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a22      	ldr	r2, [pc, #136]	@ (800290c <HAL_PCD_MspInit+0xbc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d13b      	bne.n	8002900 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002888:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800288c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0310 	mov.w	r3, #16
 8002898:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800289c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80028a4:	2230      	movs	r2, #48	@ 0x30
 80028a6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 fdd6 	bl	8007460 <HAL_RCCEx_PeriphCLKConfig>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 80028ba:	f7ff fc5b 	bl	8002174 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 80028be:	f003 fe45 	bl	800654c <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80028c2:	4b13      	ldr	r3, [pc, #76]	@ (8002910 <HAL_PCD_MspInit+0xc0>)
 80028c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028c8:	4a11      	ldr	r2, [pc, #68]	@ (8002910 <HAL_PCD_MspInit+0xc0>)
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ce:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80028d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002910 <HAL_PCD_MspInit+0xc0>)
 80028d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028d8:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 80028dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80028ee:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2100      	movs	r1, #0
 80028f4:	204a      	movs	r0, #74	@ 0x4a
 80028f6:	f000 fd79 	bl	80033ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80028fa:	204a      	movs	r0, #74	@ 0x4a
 80028fc:	f000 fd90 	bl	8003420 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8002900:	bf00      	nop
 8002902:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40016000 	.word	0x40016000
 8002910:	44020c00 	.word	0x44020c00

08002914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <NMI_Handler+0x4>

0800291c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002920:	bf00      	nop
 8002922:	e7fd      	b.n	8002920 <HardFault_Handler+0x4>

08002924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <MemManage_Handler+0x4>

0800292c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <BusFault_Handler+0x4>

08002934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <UsageFault_Handler+0x4>

0800293c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800296a:	f000 fc1f 	bl	80031ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}

08002972 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002976:	2000      	movs	r0, #0
 8002978:	f000 fa78 	bl	8002e6c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}

08002980 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8002984:	4802      	ldr	r0, [pc, #8]	@ (8002990 <USB_DRD_FS_IRQHandler+0x10>)
 8002986:	f002 fa73 	bl	8004e70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	2000047c 	.word	0x2000047c

08002994 <HASH_IRQHandler>:

/**
  * @brief This function handles HASH global interrupt.
  */
void HASH_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_IRQn 0 */

  /* USER CODE END HASH_IRQn 0 */
  HAL_HASH_IRQHandler(&hhash);
 8002998:	4802      	ldr	r0, [pc, #8]	@ (80029a4 <HASH_IRQHandler+0x10>)
 800299a:	f001 f8e1 	bl	8003b60 <HAL_HASH_IRQHandler>
  /* USER CODE BEGIN HASH_IRQn 1 */

  /* USER CODE END HASH_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200001ec 	.word	0x200001ec

080029a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e00a      	b.n	80029d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029ba:	f3af 8000 	nop.w
 80029be:	4601      	mov	r1, r0
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	60ba      	str	r2, [r7, #8]
 80029c6:	b2ca      	uxtb	r2, r1
 80029c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3301      	adds	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	dbf0      	blt.n	80029ba <_read+0x12>
  }

  return len;
 80029d8:	687b      	ldr	r3, [r7, #4]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e009      	b.n	8002a08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	60ba      	str	r2, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fabb 	bl	8002f78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3301      	adds	r3, #1
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	dbf1      	blt.n	80029f4 <_write+0x12>
  }
  return len;
 8002a10:	687b      	ldr	r3, [r7, #4]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <_close>:

int _close(int file)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a42:	605a      	str	r2, [r3, #4]
  return 0;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_isatty>:

int _isatty(int file)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ae0 <_sbrk+0x5c>)
 8002a8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <_sbrk+0x60>)
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a98:	4b13      	ldr	r3, [pc, #76]	@ (8002ae8 <_sbrk+0x64>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d102      	bne.n	8002aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aa0:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <_sbrk+0x64>)
 8002aa2:	4a12      	ldr	r2, [pc, #72]	@ (8002aec <_sbrk+0x68>)
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aa6:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <_sbrk+0x64>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d207      	bcs.n	8002ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ab4:	f00f ff3a 	bl	801292c <__errno>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	220c      	movs	r2, #12
 8002abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	e009      	b.n	8002ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ac4:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <_sbrk+0x64>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aca:	4b07      	ldr	r3, [pc, #28]	@ (8002ae8 <_sbrk+0x64>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4a05      	ldr	r2, [pc, #20]	@ (8002ae8 <_sbrk+0x64>)
 8002ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200a0000 	.word	0x200a0000
 8002ae4:	00000500 	.word	0x00000500
 8002ae8:	20000a3c 	.word	0x20000a3c
 8002aec:	20011360 	.word	0x20011360

08002af0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002af6:	4b35      	ldr	r3, [pc, #212]	@ (8002bcc <SystemInit+0xdc>)
 8002af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afc:	4a33      	ldr	r2, [pc, #204]	@ (8002bcc <SystemInit+0xdc>)
 8002afe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b02:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8002b06:	4b32      	ldr	r3, [pc, #200]	@ (8002bd0 <SystemInit+0xe0>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002b0c:	4b30      	ldr	r3, [pc, #192]	@ (8002bd0 <SystemInit+0xe0>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002b12:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd0 <SystemInit+0xe0>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8002b18:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd0 <SystemInit+0xe0>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	492c      	ldr	r1, [pc, #176]	@ (8002bd0 <SystemInit+0xe0>)
 8002b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd4 <SystemInit+0xe4>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002b24:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd0 <SystemInit+0xe0>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8002b2a:	4b29      	ldr	r3, [pc, #164]	@ (8002bd0 <SystemInit+0xe0>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002b30:	4b27      	ldr	r3, [pc, #156]	@ (8002bd0 <SystemInit+0xe0>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8002b36:	4b26      	ldr	r3, [pc, #152]	@ (8002bd0 <SystemInit+0xe0>)
 8002b38:	4a27      	ldr	r2, [pc, #156]	@ (8002bd8 <SystemInit+0xe8>)
 8002b3a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002b3c:	4b24      	ldr	r3, [pc, #144]	@ (8002bd0 <SystemInit+0xe0>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002b42:	4b23      	ldr	r3, [pc, #140]	@ (8002bd0 <SystemInit+0xe0>)
 8002b44:	4a24      	ldr	r2, [pc, #144]	@ (8002bd8 <SystemInit+0xe8>)
 8002b46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002b48:	4b21      	ldr	r3, [pc, #132]	@ (8002bd0 <SystemInit+0xe0>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8002b4e:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <SystemInit+0xe0>)
 8002b50:	4a21      	ldr	r2, [pc, #132]	@ (8002bd8 <SystemInit+0xe8>)
 8002b52:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002b54:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd0 <SystemInit+0xe0>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd0 <SystemInit+0xe0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd0 <SystemInit+0xe0>)
 8002b60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002b66:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd0 <SystemInit+0xe0>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b6c:	4b17      	ldr	r3, [pc, #92]	@ (8002bcc <SystemInit+0xdc>)
 8002b6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b72:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002b74:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <SystemInit+0xec>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002b7c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002b84:	d003      	beq.n	8002b8e <SystemInit+0x9e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002b8c:	d117      	bne.n	8002bbe <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8002b8e:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <SystemInit+0xec>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	@ (8002bdc <SystemInit+0xec>)
 8002b9c:	4a10      	ldr	r2, [pc, #64]	@ (8002be0 <SystemInit+0xf0>)
 8002b9e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <SystemInit+0xec>)
 8002ba2:	4a10      	ldr	r2, [pc, #64]	@ (8002be4 <SystemInit+0xf4>)
 8002ba4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <SystemInit+0xec>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4a0c      	ldr	r2, [pc, #48]	@ (8002bdc <SystemInit+0xec>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <SystemInit+0xec>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	4a09      	ldr	r2, [pc, #36]	@ (8002bdc <SystemInit+0xec>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	61d3      	str	r3, [r2, #28]
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000ed00 	.word	0xe000ed00
 8002bd0:	44020c00 	.word	0x44020c00
 8002bd4:	eae2eae3 	.word	0xeae2eae3
 8002bd8:	01010280 	.word	0x01010280
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	08192a3b 	.word	0x08192a3b
 8002be4:	4c5d6e7f 	.word	0x4c5d6e7f

08002be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002be8:	480d      	ldr	r0, [pc, #52]	@ (8002c20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bec:	f7ff ff80 	bl	8002af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf0:	480c      	ldr	r0, [pc, #48]	@ (8002c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bf2:	490d      	ldr	r1, [pc, #52]	@ (8002c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c2c <LoopForever+0xe>)
  movs r3, #0
 8002bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf8:	e002      	b.n	8002c00 <LoopCopyDataInit>

08002bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfe:	3304      	adds	r3, #4

08002c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c04:	d3f9      	bcc.n	8002bfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c08:	4c0a      	ldr	r4, [pc, #40]	@ (8002c34 <LoopForever+0x16>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c0c:	e001      	b.n	8002c12 <LoopFillZerobss>

08002c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c10:	3204      	adds	r2, #4

08002c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c14:	d3fb      	bcc.n	8002c0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c16:	f00f fe8f 	bl	8012938 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c1a:	f7fe fe99 	bl	8001950 <main>

08002c1e <LoopForever>:

LoopForever:
    b LoopForever
 8002c1e:	e7fe      	b.n	8002c1e <LoopForever>
  ldr   r0, =_estack
 8002c20:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c28:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002c2c:	080147cc 	.word	0x080147cc
  ldr r2, =_sbss
 8002c30:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002c34:	20011360 	.word	0x20011360

08002c38 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c38:	e7fe      	b.n	8002c38 <ADC1_IRQHandler>
	...

08002c3c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	@ 0x30
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d009      	beq.n	8002c64 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <BSP_LED_Init+0x28>
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d003      	beq.n	8002c64 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002c5c:	f06f 0301 	mvn.w	r3, #1
 8002c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c62:	e055      	b.n	8002d10 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10f      	bne.n	8002c8a <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8002c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002d1c <BSP_LED_Init+0xe0>)
 8002c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c70:	4a2a      	ldr	r2, [pc, #168]	@ (8002d1c <BSP_LED_Init+0xe0>)
 8002c72:	f043 0320 	orr.w	r3, r3, #32
 8002c76:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c7a:	4b28      	ldr	r3, [pc, #160]	@ (8002d1c <BSP_LED_Init+0xe0>)
 8002c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	e021      	b.n	8002cce <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10f      	bne.n	8002cb0 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8002c90:	4b22      	ldr	r3, [pc, #136]	@ (8002d1c <BSP_LED_Init+0xe0>)
 8002c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c96:	4a21      	ldr	r2, [pc, #132]	@ (8002d1c <BSP_LED_Init+0xe0>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d1c <BSP_LED_Init+0xe0>)
 8002ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	e00e      	b.n	8002cce <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d1c <BSP_LED_Init+0xe0>)
 8002cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cb6:	4a19      	ldr	r2, [pc, #100]	@ (8002d1c <BSP_LED_Init+0xe0>)
 8002cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cbc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cc0:	4b16      	ldr	r3, [pc, #88]	@ (8002d1c <BSP_LED_Init+0xe0>)
 8002cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	4a13      	ldr	r2, [pc, #76]	@ (8002d20 <BSP_LED_Init+0xe4>)
 8002cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cd6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d24 <BSP_LED_Init+0xe8>)
 8002ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cec:	f107 0218 	add.w	r2, r7, #24
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fce8 	bl	80036c8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002d24 <BSP_LED_Init+0xe8>)
 8002cfc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	4a07      	ldr	r2, [pc, #28]	@ (8002d20 <BSP_LED_Init+0xe4>)
 8002d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f000 fe2e 	bl	800396c <HAL_GPIO_WritePin>
  }

  return ret;
 8002d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3730      	adds	r7, #48	@ 0x30
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	44020c00 	.word	0x44020c00
 8002d20:	08014754 	.word	0x08014754
 8002d24:	2000000c 	.word	0x2000000c

08002d28 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d009      	beq.n	8002d50 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <BSP_LED_Toggle+0x28>
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d003      	beq.n	8002d50 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d48:	f06f 0301 	mvn.w	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	e00b      	b.n	8002d68 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	4a08      	ldr	r2, [pc, #32]	@ (8002d74 <BSP_LED_Toggle+0x4c>)
 8002d54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	4907      	ldr	r1, [pc, #28]	@ (8002d78 <BSP_LED_Toggle+0x50>)
 8002d5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d60:	4619      	mov	r1, r3
 8002d62:	4610      	mov	r0, r2
 8002d64:	f000 fe1a 	bl	800399c <HAL_GPIO_TogglePin>
  }

  return ret;
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	2000000c 	.word	0x2000000c
 8002d78:	08014754 	.word	0x08014754

08002d7c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	460a      	mov	r2, r1
 8002d86:	71fb      	strb	r3, [r7, #7]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002d8c:	4b30      	ldr	r3, [pc, #192]	@ (8002e50 <BSP_PB_Init+0xd4>)
 8002d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d92:	4a2f      	ldr	r2, [pc, #188]	@ (8002e50 <BSP_PB_Init+0xd4>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e50 <BSP_PB_Init+0xd4>)
 8002d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002daa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dae:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002db0:	2302      	movs	r3, #2
 8002db2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002db4:	2302      	movs	r3, #2
 8002db6:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002db8:	79bb      	ldrb	r3, [r7, #6]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	@ (8002e54 <BSP_PB_Init+0xd8>)
 8002dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dca:	f107 020c 	add.w	r2, r7, #12
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fc79 	bl	80036c8 <HAL_GPIO_Init>
 8002dd6:	e036      	b.n	8002e46 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e58 <BSP_PB_Init+0xdc>)
 8002dda:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	4a1d      	ldr	r2, [pc, #116]	@ (8002e54 <BSP_PB_Init+0xd8>)
 8002de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de4:	f107 020c 	add.w	r2, r7, #12
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fc6c 	bl	80036c8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002df0:	79fa      	ldrb	r2, [r7, #7]
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4a18      	ldr	r2, [pc, #96]	@ (8002e5c <BSP_PB_Init+0xe0>)
 8002dfc:	441a      	add	r2, r3
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	4917      	ldr	r1, [pc, #92]	@ (8002e60 <BSP_PB_Init+0xe4>)
 8002e02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f000 fc01 	bl	8003610 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002e0e:	79fa      	ldrb	r2, [r7, #7]
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4a10      	ldr	r2, [pc, #64]	@ (8002e5c <BSP_PB_Init+0xe0>)
 8002e1a:	1898      	adds	r0, r3, r2
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	4a11      	ldr	r2, [pc, #68]	@ (8002e64 <BSP_PB_Init+0xe8>)
 8002e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e24:	461a      	mov	r2, r3
 8002e26:	2100      	movs	r1, #0
 8002e28:	f000 fbc6 	bl	80035b8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002e2c:	2018      	movs	r0, #24
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	4a0d      	ldr	r2, [pc, #52]	@ (8002e68 <BSP_PB_Init+0xec>)
 8002e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e36:	2200      	movs	r2, #0
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f000 fad7 	bl	80033ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002e3e:	2318      	movs	r3, #24
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 faed 	bl	8003420 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	44020c00 	.word	0x44020c00
 8002e54:	20000018 	.word	0x20000018
 8002e58:	10110000 	.word	0x10110000
 8002e5c:	20000a40 	.word	0x20000a40
 8002e60:	0801475c 	.word	0x0801475c
 8002e64:	2000001c 	.word	0x2000001c
 8002e68:	20000020 	.word	0x20000020

08002e6c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002e76:	79fa      	ldrb	r2, [r7, #7]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4a04      	ldr	r2, [pc, #16]	@ (8002e94 <BSP_PB_IRQHandler+0x28>)
 8002e82:	4413      	add	r3, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fbd7 	bl	8003638 <HAL_EXTI_IRQHandler>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20000a40 	.word	0x20000a40

08002e98 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ec6:	f06f 0301 	mvn.w	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e018      	b.n	8002f00 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2294      	movs	r2, #148	@ 0x94
 8002ed2:	fb02 f303 	mul.w	r3, r2, r3
 8002ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8002f0c <BSP_COM_Init+0x5c>)
 8002ed8:	4413      	add	r3, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f870 	bl	8002fc0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2294      	movs	r2, #148	@ 0x94
 8002ee4:	fb02 f303 	mul.w	r3, r2, r3
 8002ee8:	4a08      	ldr	r2, [pc, #32]	@ (8002f0c <BSP_COM_Init+0x5c>)
 8002eea:	4413      	add	r3, r2
 8002eec:	6839      	ldr	r1, [r7, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f80e 	bl	8002f10 <MX_USART_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002efa:	f06f 0303 	mvn.w	r3, #3
 8002efe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002f00:	68fb      	ldr	r3, [r7, #12]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000a4c 	.word	0x20000a4c

08002f10 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8002f1a:	4b16      	ldr	r3, [pc, #88]	@ (8002f74 <MX_USART_Init+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	220c      	movs	r2, #12
 8002f2e:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	895b      	ldrh	r3, [r3, #10]
 8002f34:	461a      	mov	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	891b      	ldrh	r3, [r3, #8]
 8002f46:	461a      	mov	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	899b      	ldrh	r3, [r3, #12]
 8002f50:	461a      	mov	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f5c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f00a f896 	bl	800d096 <HAL_UART_Init>
 8002f6a:	4603      	mov	r3, r0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000008 	.word	0x20000008

08002f78 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002f80:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <__io_putchar+0x30>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	2394      	movs	r3, #148	@ 0x94
 8002f88:	fb02 f303 	mul.w	r3, r2, r3
 8002f8c:	4a07      	ldr	r2, [pc, #28]	@ (8002fac <__io_putchar+0x34>)
 8002f8e:	1898      	adds	r0, r3, r2
 8002f90:	1d39      	adds	r1, r7, #4
 8002f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f96:	2201      	movs	r2, #1
 8002f98:	f00a f8cd 	bl	800d136 <HAL_UART_Transmit>
  return ch;
 8002f9c:	687b      	ldr	r3, [r7, #4]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000ae0 	.word	0x20000ae0
 8002fac:	20000a4c 	.word	0x20000a4c

08002fb0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7ff ff6f 	bl	8002e98 <BSP_PB_Callback>
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	@ 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002fc8:	4b27      	ldr	r3, [pc, #156]	@ (8003068 <COM1_MspInit+0xa8>)
 8002fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fce:	4a26      	ldr	r2, [pc, #152]	@ (8003068 <COM1_MspInit+0xa8>)
 8002fd0:	f043 0308 	orr.w	r3, r3, #8
 8002fd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fd8:	4b23      	ldr	r3, [pc, #140]	@ (8003068 <COM1_MspInit+0xa8>)
 8002fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002fe6:	4b20      	ldr	r3, [pc, #128]	@ (8003068 <COM1_MspInit+0xa8>)
 8002fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fec:	4a1e      	ldr	r2, [pc, #120]	@ (8003068 <COM1_MspInit+0xa8>)
 8002fee:	f043 0308 	orr.w	r3, r3, #8
 8002ff2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8003068 <COM1_MspInit+0xa8>)
 8002ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003004:	4b18      	ldr	r3, [pc, #96]	@ (8003068 <COM1_MspInit+0xa8>)
 8003006:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800300a:	4a17      	ldr	r2, [pc, #92]	@ (8003068 <COM1_MspInit+0xa8>)
 800300c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003010:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003014:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <COM1_MspInit+0xa8>)
 8003016:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800301a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8003022:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003026:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003028:	2302      	movs	r3, #2
 800302a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800302c:	2302      	movs	r3, #2
 800302e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003030:	2301      	movs	r3, #1
 8003032:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003034:	2307      	movs	r3, #7
 8003036:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	4619      	mov	r1, r3
 800303e:	480b      	ldr	r0, [pc, #44]	@ (800306c <COM1_MspInit+0xac>)
 8003040:	f000 fb42 	bl	80036c8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8003044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003048:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800304a:	2302      	movs	r3, #2
 800304c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800304e:	2307      	movs	r3, #7
 8003050:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4619      	mov	r1, r3
 8003058:	4804      	ldr	r0, [pc, #16]	@ (800306c <COM1_MspInit+0xac>)
 800305a:	f000 fb35 	bl	80036c8 <HAL_GPIO_Init>
}
 800305e:	bf00      	nop
 8003060:	3728      	adds	r7, #40	@ 0x28
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	44020c00 	.word	0x44020c00
 800306c:	42020c00 	.word	0x42020c00

08003070 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003074:	2003      	movs	r0, #3
 8003076:	f000 f9ae 	bl	80033d6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800307a:	f004 f867 	bl	800714c <HAL_RCC_GetSysClockFreq>
 800307e:	4602      	mov	r2, r0
 8003080:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <HAL_Init+0x44>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	490b      	ldr	r1, [pc, #44]	@ (80030b8 <HAL_Init+0x48>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <HAL_Init+0x4c>)
 8003092:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003094:	2004      	movs	r0, #4
 8003096:	f000 fa01 	bl	800349c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800309a:	200f      	movs	r0, #15
 800309c:	f000 f810 	bl	80030c0 <HAL_InitTick>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e002      	b.n	80030b0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030aa:	f7ff f869 	bl	8002180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	44020c00 	.word	0x44020c00
 80030b8:	0801473c 	.word	0x0801473c
 80030bc:	20000004 	.word	0x20000004

080030c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80030cc:	4b33      	ldr	r3, [pc, #204]	@ (800319c <HAL_InitTick+0xdc>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e05c      	b.n	8003192 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80030d8:	4b31      	ldr	r3, [pc, #196]	@ (80031a0 <HAL_InitTick+0xe0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d10c      	bne.n	80030fe <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80030e4:	4b2f      	ldr	r3, [pc, #188]	@ (80031a4 <HAL_InitTick+0xe4>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b2c      	ldr	r3, [pc, #176]	@ (800319c <HAL_InitTick+0xdc>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e037      	b.n	800316e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80030fe:	f000 fa25 	bl	800354c <HAL_SYSTICK_GetCLKSourceConfig>
 8003102:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d023      	beq.n	8003152 <HAL_InitTick+0x92>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d82d      	bhi.n	800316c <HAL_InitTick+0xac>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_InitTick+0x5e>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d00d      	beq.n	8003138 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800311c:	e026      	b.n	800316c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800311e:	4b21      	ldr	r3, [pc, #132]	@ (80031a4 <HAL_InitTick+0xe4>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b1e      	ldr	r3, [pc, #120]	@ (800319c <HAL_InitTick+0xdc>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	4619      	mov	r1, r3
 8003128:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800312c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	60fb      	str	r3, [r7, #12]
        break;
 8003136:	e01a      	b.n	800316e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003138:	4b18      	ldr	r3, [pc, #96]	@ (800319c <HAL_InitTick+0xdc>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003142:	fbb3 f3f2 	udiv	r3, r3, r2
 8003146:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800314a:	fbb2 f3f3 	udiv	r3, r2, r3
 800314e:	60fb      	str	r3, [r7, #12]
        break;
 8003150:	e00d      	b.n	800316e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003152:	4b12      	ldr	r3, [pc, #72]	@ (800319c <HAL_InitTick+0xdc>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800315c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003160:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	60fb      	str	r3, [r7, #12]
        break;
 800316a:	e000      	b.n	800316e <HAL_InitTick+0xae>
        break;
 800316c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f972 	bl	8003458 <HAL_SYSTICK_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e009      	b.n	8003192 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800317e:	2200      	movs	r2, #0
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	f04f 30ff 	mov.w	r0, #4294967295
 8003186:	f000 f931 	bl	80033ec <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800318a:	4a07      	ldr	r2, [pc, #28]	@ (80031a8 <HAL_InitTick+0xe8>)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000028 	.word	0x20000028
 80031a0:	e000e010 	.word	0xe000e010
 80031a4:	20000004 	.word	0x20000004
 80031a8:	20000024 	.word	0x20000024

080031ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <HAL_IncTick+0x20>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <HAL_IncTick+0x24>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <HAL_IncTick+0x24>)
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000028 	.word	0x20000028
 80031d0:	20000ae4 	.word	0x20000ae4

080031d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return uwTick;
 80031d8:	4b03      	ldr	r3, [pc, #12]	@ (80031e8 <HAL_GetTick+0x14>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000ae4 	.word	0x20000ae4

080031ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031f4:	f7ff ffee 	bl	80031d4 <HAL_GetTick>
 80031f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d005      	beq.n	8003212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003206:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <HAL_Delay+0x44>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003212:	bf00      	nop
 8003214:	f7ff ffde 	bl	80031d4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	429a      	cmp	r2, r3
 8003222:	d8f7      	bhi.n	8003214 <HAL_Delay+0x28>
  {
  }
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000028 	.word	0x20000028

08003234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003244:	4b0c      	ldr	r3, [pc, #48]	@ (8003278 <__NVIC_SetPriorityGrouping+0x44>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003250:	4013      	ands	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800325c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003266:	4a04      	ldr	r2, [pc, #16]	@ (8003278 <__NVIC_SetPriorityGrouping+0x44>)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	60d3      	str	r3, [r2, #12]
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003280:	4b04      	ldr	r3, [pc, #16]	@ (8003294 <__NVIC_GetPriorityGrouping+0x18>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	f003 0307 	and.w	r3, r3, #7
}
 800328a:	4618      	mov	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	db0b      	blt.n	80032c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	f003 021f 	and.w	r2, r3, #31
 80032b0:	4907      	ldr	r1, [pc, #28]	@ (80032d0 <__NVIC_EnableIRQ+0x38>)
 80032b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	2001      	movs	r0, #1
 80032ba:	fa00 f202 	lsl.w	r2, r0, r2
 80032be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	e000e100 	.word	0xe000e100

080032d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	db12      	blt.n	800330c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	f003 021f 	and.w	r2, r3, #31
 80032ec:	490a      	ldr	r1, [pc, #40]	@ (8003318 <__NVIC_DisableIRQ+0x44>)
 80032ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	2001      	movs	r0, #1
 80032f6:	fa00 f202 	lsl.w	r2, r0, r2
 80032fa:	3320      	adds	r3, #32
 80032fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003300:	f3bf 8f4f 	dsb	sy
}
 8003304:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003306:	f3bf 8f6f 	isb	sy
}
 800330a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000e100 	.word	0xe000e100

0800331c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	6039      	str	r1, [r7, #0]
 8003326:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800332c:	2b00      	cmp	r3, #0
 800332e:	db0a      	blt.n	8003346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	b2da      	uxtb	r2, r3
 8003334:	490c      	ldr	r1, [pc, #48]	@ (8003368 <__NVIC_SetPriority+0x4c>)
 8003336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800333a:	0112      	lsls	r2, r2, #4
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	440b      	add	r3, r1
 8003340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003344:	e00a      	b.n	800335c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	4908      	ldr	r1, [pc, #32]	@ (800336c <__NVIC_SetPriority+0x50>)
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	3b04      	subs	r3, #4
 8003354:	0112      	lsls	r2, r2, #4
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	440b      	add	r3, r1
 800335a:	761a      	strb	r2, [r3, #24]
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000e100 	.word	0xe000e100
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003370:	b480      	push	{r7}
 8003372:	b089      	sub	sp, #36	@ 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f1c3 0307 	rsb	r3, r3, #7
 800338a:	2b04      	cmp	r3, #4
 800338c:	bf28      	it	cs
 800338e:	2304      	movcs	r3, #4
 8003390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3304      	adds	r3, #4
 8003396:	2b06      	cmp	r3, #6
 8003398:	d902      	bls.n	80033a0 <NVIC_EncodePriority+0x30>
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3b03      	subs	r3, #3
 800339e:	e000      	b.n	80033a2 <NVIC_EncodePriority+0x32>
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	f04f 32ff 	mov.w	r2, #4294967295
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43da      	mvns	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	401a      	ands	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b8:	f04f 31ff 	mov.w	r1, #4294967295
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	43d9      	mvns	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c8:	4313      	orrs	r3, r2
         );
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3724      	adds	r7, #36	@ 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ff28 	bl	8003234 <__NVIC_SetPriorityGrouping>
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033fa:	f7ff ff3f 	bl	800327c <__NVIC_GetPriorityGrouping>
 80033fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	6978      	ldr	r0, [r7, #20]
 8003406:	f7ff ffb3 	bl	8003370 <NVIC_EncodePriority>
 800340a:	4602      	mov	r2, r0
 800340c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ff82 	bl	800331c <__NVIC_SetPriority>
}
 8003418:	bf00      	nop
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800342a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ff32 	bl	8003298 <__NVIC_EnableIRQ>
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ff42 	bl	80032d4 <__NVIC_DisableIRQ>
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003468:	d301      	bcc.n	800346e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800346a:	2301      	movs	r3, #1
 800346c:	e00d      	b.n	800348a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800346e:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <HAL_SYSTICK_Config+0x40>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003476:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <HAL_SYSTICK_Config+0x40>)
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800347c:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <HAL_SYSTICK_Config+0x40>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a05      	ldr	r2, [pc, #20]	@ (8003498 <HAL_SYSTICK_Config+0x40>)
 8003482:	f043 0303 	orr.w	r3, r3, #3
 8003486:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d844      	bhi.n	8003534 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80034aa:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	080034d3 	.word	0x080034d3
 80034b4:	080034f1 	.word	0x080034f1
 80034b8:	08003513 	.word	0x08003513
 80034bc:	08003535 	.word	0x08003535
 80034c0:	080034c5 	.word	0x080034c5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80034c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003544 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003544 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034ca:	f043 0304 	orr.w	r3, r3, #4
 80034ce:	6013      	str	r3, [r2, #0]
      break;
 80034d0:	e031      	b.n	8003536 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80034d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003544 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003544 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034d8:	f023 0304 	bic.w	r3, r3, #4
 80034dc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80034de:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80034e4:	4a18      	ldr	r2, [pc, #96]	@ (8003548 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034e6:	f023 030c 	bic.w	r3, r3, #12
 80034ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80034ee:	e022      	b.n	8003536 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80034f0:	4b14      	ldr	r3, [pc, #80]	@ (8003544 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a13      	ldr	r2, [pc, #76]	@ (8003544 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80034f6:	f023 0304 	bic.w	r3, r3, #4
 80034fa:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80034fc:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80034fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003502:	f023 030c 	bic.w	r3, r3, #12
 8003506:	4a10      	ldr	r2, [pc, #64]	@ (8003548 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003508:	f043 0304 	orr.w	r3, r3, #4
 800350c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003510:	e011      	b.n	8003536 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003512:	4b0c      	ldr	r3, [pc, #48]	@ (8003544 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a0b      	ldr	r2, [pc, #44]	@ (8003544 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003518:	f023 0304 	bic.w	r3, r3, #4
 800351c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800351e:	4b0a      	ldr	r3, [pc, #40]	@ (8003548 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003520:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003524:	f023 030c 	bic.w	r3, r3, #12
 8003528:	4a07      	ldr	r2, [pc, #28]	@ (8003548 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800352a:	f043 0308 	orr.w	r3, r3, #8
 800352e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003532:	e000      	b.n	8003536 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8003534:	bf00      	nop
  }
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000e010 	.word	0xe000e010
 8003548:	44020c00 	.word	0x44020c00

0800354c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003552:	4b17      	ldr	r3, [pc, #92]	@ (80035b0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800355e:	2304      	movs	r3, #4
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	e01e      	b.n	80035a2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003564:	4b13      	ldr	r3, [pc, #76]	@ (80035b4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8003566:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b08      	cmp	r3, #8
 8003574:	d00f      	beq.n	8003596 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d80f      	bhi.n	800359c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d003      	beq.n	8003590 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003588:	e008      	b.n	800359c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
        break;
 800358e:	e008      	b.n	80035a2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003590:	2301      	movs	r3, #1
 8003592:	607b      	str	r3, [r7, #4]
        break;
 8003594:	e005      	b.n	80035a2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003596:	2302      	movs	r3, #2
 8003598:	607b      	str	r3, [r7, #4]
        break;
 800359a:	e002      	b.n	80035a2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800359c:	2300      	movs	r3, #0
 800359e:	607b      	str	r3, [r7, #4]
        break;
 80035a0:	bf00      	nop
    }
  }
  return systick_source;
 80035a2:	687b      	ldr	r3, [r7, #4]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000e010 	.word	0xe000e010
 80035b4:	44020c00 	.word	0x44020c00

080035b8 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	460b      	mov	r3, r1
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80035ca:	7afb      	ldrb	r3, [r7, #11]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d011      	beq.n	80035f4 <HAL_EXTI_RegisterCallback+0x3c>
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	dc13      	bgt.n	80035fc <HAL_EXTI_RegisterCallback+0x44>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_EXTI_RegisterCallback+0x26>
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d007      	beq.n	80035ec <HAL_EXTI_RegisterCallback+0x34>
 80035dc:	e00e      	b.n	80035fc <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	609a      	str	r2, [r3, #8]
      break;
 80035ea:	e00a      	b.n	8003602 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	605a      	str	r2, [r3, #4]
      break;
 80035f2:	e006      	b.n	8003602 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	609a      	str	r2, [r3, #8]
      break;
 80035fa:	e002      	b.n	8003602 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003600:	bf00      	nop
  }

  return status;
 8003602:	7dfb      	ldrb	r3, [r7, #23]
}
 8003604:	4618      	mov	r0, r3
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e003      	b.n	800362c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800362a:	2300      	movs	r3, #0
  }
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	2201      	movs	r2, #1
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	4b17      	ldr	r3, [pc, #92]	@ (80036c0 <HAL_EXTI_IRQHandler+0x88>)
 8003662:	4413      	add	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	4b0d      	ldr	r3, [pc, #52]	@ (80036c4 <HAL_EXTI_IRQHandler+0x8c>)
 8003690:	4413      	add	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d009      	beq.n	80036b8 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	4798      	blx	r3
    }
  }
}
 80036b8:	bf00      	nop
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	4402200c 	.word	0x4402200c
 80036c4:	44022010 	.word	0x44022010

080036c8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80036d6:	e136      	b.n	8003946 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	2101      	movs	r1, #1
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	4013      	ands	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8128 	beq.w	8003940 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x38>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b12      	cmp	r3, #18
 80036fe:	d125      	bne.n	800374c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	08da      	lsrs	r2, r3, #3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3208      	adds	r2, #8
 8003708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800370c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	220f      	movs	r2, #15
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4013      	ands	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f003 020f 	and.w	r2, r3, #15
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	08da      	lsrs	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3208      	adds	r2, #8
 8003746:	6979      	ldr	r1, [r7, #20]
 8003748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	2203      	movs	r2, #3
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4013      	ands	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0203 	and.w	r2, r3, #3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d00b      	beq.n	80037a0 <HAL_GPIO_Init+0xd8>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d007      	beq.n	80037a0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003794:	2b11      	cmp	r3, #17
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b12      	cmp	r3, #18
 800379e:	d130      	bne.n	8003802 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	2203      	movs	r2, #3
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4013      	ands	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037d6:	2201      	movs	r2, #1
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4013      	ands	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 0201 	and.w	r2, r3, #1
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d017      	beq.n	800383a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2203      	movs	r2, #3
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4013      	ands	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d07c      	beq.n	8003940 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003846:	4a47      	ldr	r2, [pc, #284]	@ (8003964 <HAL_GPIO_Init+0x29c>)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	3318      	adds	r3, #24
 800384e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003852:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	220f      	movs	r2, #15
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4013      	ands	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0a9a      	lsrs	r2, r3, #10
 800386e:	4b3e      	ldr	r3, [pc, #248]	@ (8003968 <HAL_GPIO_Init+0x2a0>)
 8003870:	4013      	ands	r3, r2
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	f002 0203 	and.w	r2, r2, #3
 8003878:	00d2      	lsls	r2, r2, #3
 800387a:	4093      	lsls	r3, r2
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003882:	4938      	ldr	r1, [pc, #224]	@ (8003964 <HAL_GPIO_Init+0x29c>)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3318      	adds	r3, #24
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003890:	4b34      	ldr	r3, [pc, #208]	@ (8003964 <HAL_GPIO_Init+0x29c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	43db      	mvns	r3, r3
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4013      	ands	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80038b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003964 <HAL_GPIO_Init+0x29c>)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80038ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003964 <HAL_GPIO_Init+0x29c>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4013      	ands	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80038de:	4a21      	ldr	r2, [pc, #132]	@ (8003964 <HAL_GPIO_Init+0x29c>)
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80038e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003964 <HAL_GPIO_Init+0x29c>)
 80038e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4013      	ands	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800390a:	4a16      	ldr	r2, [pc, #88]	@ (8003964 <HAL_GPIO_Init+0x29c>)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003912:	4b14      	ldr	r3, [pc, #80]	@ (8003964 <HAL_GPIO_Init+0x29c>)
 8003914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003918:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	43db      	mvns	r3, r3
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4013      	ands	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003938:	4a0a      	ldr	r2, [pc, #40]	@ (8003964 <HAL_GPIO_Init+0x29c>)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	3301      	adds	r3, #1
 8003944:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	f47f aec1 	bne.w	80036d8 <HAL_GPIO_Init+0x10>
  }
}
 8003956:	bf00      	nop
 8003958:	bf00      	nop
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	44022000 	.word	0x44022000
 8003968:	002f7f7f 	.word	0x002f7f7f

0800396c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]
 8003978:	4613      	mov	r3, r2
 800397a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800397c:	787b      	ldrb	r3, [r7, #1]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003982:	887a      	ldrh	r2, [r7, #2]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003988:	e002      	b.n	8003990 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800398a:	887a      	ldrh	r2, [r7, #2]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4013      	ands	r3, r2
 80039b4:	041a      	lsls	r2, r3, #16
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	43d9      	mvns	r1, r3
 80039ba:	887b      	ldrh	r3, [r7, #2]
 80039bc:	400b      	ands	r3, r1
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	619a      	str	r2, [r3, #24]
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e02a      	b.n	8003a38 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fe fbca 	bl	8002190 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 8003a12:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	68f9      	ldr	r1, [r7, #12]
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_HASH_DeInit>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_DeInit(HASH_HandleTypeDef *hhash)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the HASH handle allocation */
  if (hhash == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_HASH_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e015      	b.n	8003a7e <HAL_HASH_DeInit+0x3e>
  }

  /* Change the default HASH phase */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Reset HashInCount */
  hhash->HashInCount = 0U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	61da      	str	r2, [r3, #28]

  /* Reset multi buffers accumulation flag */
  hhash->Accumulation = 0U;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DeInit the low level hardware */
  hhash->MspDeInitCallback(hhash);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_HASH_MspDeInit(hhash);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fe fbb4 	bl	80021d4 <HAL_HASH_MspDeInit>
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_RESET;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  __HAL_UNLOCK(hhash);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_HASH_Start_IT>:
  * @param  pOutBuffer pointer to the computed digest.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Start_IT(HASH_HandleTypeDef *hhash, const uint8_t *const pInBuffer, uint32_t Size,
                                    uint8_t *const pOutBuffer)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_HASH_StateTypeDef temp_state;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_HASH_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e05c      	b.n	8003b58 <HAL_HASH_Start_IT+0xd2>
  }

  /* Check if peripheral is ready to start process or suspended */
  temp_state = hhash->State;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003aa4:	75bb      	strb	r3, [r7, #22]
  if ((temp_state == HAL_HASH_STATE_READY) || (temp_state == HAL_HASH_STATE_SUSPENDED))
 8003aa6:	7dbb      	ldrb	r3, [r7, #22]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d002      	beq.n	8003ab2 <HAL_HASH_Start_IT+0x2c>
 8003aac:	7dbb      	ldrb	r3, [r7, #22]
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d14f      	bne.n	8003b52 <HAL_HASH_Start_IT+0xcc>
  {
    /* Process Locked */
    __HAL_LOCK(hhash);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_HASH_Start_IT+0x3a>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e04b      	b.n	8003b58 <HAL_HASH_Start_IT+0xd2>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    if (hhash->State == HAL_HASH_STATE_READY)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d128      	bne.n	8003b26 <HAL_HASH_Start_IT+0xa0>
    {
      /* Reset HashInCount and Initialize Size, pHashInBuffPtr and pHashOutBuffPtr parameters */
      hhash->HashInCount =  0U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	61da      	str	r2, [r3, #28]
      hhash->pHashInBuffPtr = pInBuffer;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	615a      	str	r2, [r3, #20]
      hhash->pHashOutBuffPtr = pOutBuffer;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	619a      	str	r2, [r3, #24]
      hhash->Size = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	621a      	str	r2, [r3, #32]

      /* Set HASH mode */
      CLEAR_BIT(hhash->Instance->CR, HASH_CR_MODE);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003afa:	601a      	str	r2, [r3, #0]
      /* Reset the HASH processor core */
      MODIFY_REG(hhash->Instance->CR, HASH_CR_INIT, HASH_CR_INIT);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0204 	orr.w	r2, r2, #4
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Configure the number of valid bits in last word of the message */
      MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (Size % 4U));
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f023 011f 	bic.w	r1, r3, #31
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	00da      	lsls	r2, r3, #3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]
    }
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Set the phase */
    hhash->Phase = HAL_HASH_PHASE_PROCESS;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    /* Enable the specified HASH interrupt*/
    __HAL_HASH_ENABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a1a      	ldr	r2, [r3, #32]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f042 0203 	orr.w	r2, r2, #3
 8003b44:	621a      	str	r2, [r3, #32]

    status = HASH_WriteData_IT(hhash);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f8c3 	bl	8003cd2 <HASH_WriteData_IT>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	75fb      	strb	r3, [r7, #23]
 8003b50:	e001      	b.n	8003b56 <HAL_HASH_Start_IT+0xd0>
  }
  else
  {
    status =  HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
 8003b54:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_HASH_IRQHandler>:
  * @param hhash HASH handle.
  * @note  HAL_HASH_IRQHandler() handles interrupts in HMAC processing as well.
  * @retval None
  */
void HAL_HASH_IRQHandler(HASH_HandleTypeDef *hhash)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t itsource = hhash->Instance->IMR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]
  uint32_t itflag   = hhash->Instance->SR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	613b      	str	r3, [r7, #16]

  /* If digest is ready */
  if ((itflag & HASH_FLAG_DCIS) == HASH_FLAG_DCIS)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d062      	beq.n	8003c48 <HAL_HASH_IRQHandler+0xe8>
  {
    /* Read the digest */
    HASH_GetDigest(hhash, hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH(hhash));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6999      	ldr	r1, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d03d      	beq.n	8003c10 <HAL_HASH_IRQHandler+0xb0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ba2:	d033      	beq.n	8003c0c <HAL_HASH_IRQHandler+0xac>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003bae:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8003bb2:	d029      	beq.n	8003c08 <HAL_HASH_IRQHandler+0xa8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003bbe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003bc2:	d01f      	beq.n	8003c04 <HAL_HASH_IRQHandler+0xa4>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003bce:	f5b3 1fd0 	cmp.w	r3, #1703936	@ 0x1a0000
 8003bd2:	d015      	beq.n	8003c00 <HAL_HASH_IRQHandler+0xa0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003bde:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003be2:	d00b      	beq.n	8003bfc <HAL_HASH_IRQHandler+0x9c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003bee:	f5b3 1ff0 	cmp.w	r3, #1966080	@ 0x1e0000
 8003bf2:	d101      	bne.n	8003bf8 <HAL_HASH_IRQHandler+0x98>
 8003bf4:	2340      	movs	r3, #64	@ 0x40
 8003bf6:	e00c      	b.n	8003c12 <HAL_HASH_IRQHandler+0xb2>
 8003bf8:	2314      	movs	r3, #20
 8003bfa:	e00a      	b.n	8003c12 <HAL_HASH_IRQHandler+0xb2>
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	e008      	b.n	8003c12 <HAL_HASH_IRQHandler+0xb2>
 8003c00:	231c      	movs	r3, #28
 8003c02:	e006      	b.n	8003c12 <HAL_HASH_IRQHandler+0xb2>
 8003c04:	2330      	movs	r3, #48	@ 0x30
 8003c06:	e004      	b.n	8003c12 <HAL_HASH_IRQHandler+0xb2>
 8003c08:	2320      	movs	r3, #32
 8003c0a:	e002      	b.n	8003c12 <HAL_HASH_IRQHandler+0xb2>
 8003c0c:	231c      	movs	r3, #28
 8003c0e:	e000      	b.n	8003c12 <HAL_HASH_IRQHandler+0xb2>
 8003c10:	2314      	movs	r3, #20
 8003c12:	461a      	mov	r2, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fb73 	bl	8004300 <HASH_GetDigest>

    /* Disable Interrupts */
    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0203 	bic.w	r2, r2, #3
 8003c28:	621a      	str	r2, [r3, #32]
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Reset HASH state machine */
    hhash->Phase = HAL_HASH_PHASE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    /* Call digest computation complete call back */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
    hhash->DgstCpltCallback(hhash);
#else
    HAL_HASH_DgstCpltCallback(hhash);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f823 	bl	8003c8e <HAL_HASH_DgstCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

  }
  /* If Peripheral ready to accept new data */
  if ((itflag & HASH_FLAG_DINIS) == HASH_FLAG_DINIS)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00f      	beq.n	8003c72 <HAL_HASH_IRQHandler+0x112>
  {
    if ((itsource & HASH_IT_DINI) == HASH_IT_DINI)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_HASH_IRQHandler+0x112>
    {
      status = HASH_WriteData_IT(hhash);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f838 	bl	8003cd2 <HASH_WriteData_IT>
 8003c62:	4603      	mov	r3, r0
 8003c64:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <HAL_HASH_IRQHandler+0x112>
      {
        /* Call error callback */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
        hhash->ErrorCallback(hhash);
#else
        HAL_HASH_ErrorCallback(hhash);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f818 	bl	8003ca2 <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c72:	bf00      	nop
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_HASH_InCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_InCpltCallback(HASH_HandleTypeDef *hhash)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_InCpltCallback() can be implemented in the user file.
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_HASH_DgstCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_DgstCpltCallback(HASH_HandleTypeDef *hhash)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_DgstCpltCallback() can be implemented in the user file.
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_HASH_ErrorCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_ErrorCallback(HASH_HandleTypeDef *hhash)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_ErrorCallback() can be implemented in the user file.
   */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_HASH_GetState>:
  * @note   The API yields the current state of the handle (BUSY, READY,...).
  * @param  hhash HASH handle.
  * @retval HAL HASH state
  */
HAL_HASH_StateTypeDef HAL_HASH_GetState(const HASH_HandleTypeDef *hhash)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  return hhash->State;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cc4:	b2db      	uxtb	r3, r3
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <HASH_WriteData_IT>:
  * @brief  Feed the input buffer to the HASH peripheral in interruption mode.
  * @param  hhash HASH handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData_IT(HASH_HandleTypeDef *hhash)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b088      	sub	sp, #32
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  uint32_t buffercounter;
  uint32_t count;
  __IO uint32_t keyaddr = (uint32_t)(hhash->pHashKeyBuffPtr);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	613b      	str	r3, [r7, #16]
  __IO uint32_t inputaddr = (uint32_t)(hhash->pHashInBuffPtr);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	60fb      	str	r3, [r7, #12]
  uint32_t nbbytePartialHash  = (((hhash->Instance->SR) >> 16U) * 4U); /* Nb byte  to enter in HASH fifo to trig
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	617b      	str	r3, [r7, #20]
                                                                      a partial HASH computation*/

  if (hhash->State == HAL_HASH_STATE_BUSY)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	f040 82ea 	bne.w	80042d4 <HASH_WriteData_IT+0x602>
  {
    if ((hhash->Instance->CR & HASH_CR_MODE) == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f040 80b3 	bne.w	8003e76 <HASH_WriteData_IT+0x1a4>
      }
      else
      {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	441a      	add	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d258      	bcs.n	8003dd2 <HASH_WriteData_IT+0x100>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003d20:	2300      	movs	r3, #0
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	e015      	b.n	8003d52 <HASH_WriteData_IT+0x80>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6812      	ldr	r2, [r2, #0]
 8003d30:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3304      	adds	r3, #4
 8003d36:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	1d1a      	adds	r2, r3, #4
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	1d1a      	adds	r2, r3, #4
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	615a      	str	r2, [r3, #20]
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	69fa      	ldr	r2, [r7, #28]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d3e5      	bcc.n	8003d26 <HASH_WriteData_IT+0x54>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d5e:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d117      	bne.n	8003d9c <HASH_WriteData_IT+0xca>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a1a      	ldr	r2, [r3, #32]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0203 	bic.w	r2, r2, #3
 8003d7a:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d80:	f043 0204 	orr.w	r2, r3, #4
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e2ad      	b.n	80042f8 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0da      	beq.n	8003d60 <HASH_WriteData_IT+0x8e>
 8003daa:	e2a4      	b.n	80042f6 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < hhash->Size)
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	461a      	mov	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	1d1a      	adds	r2, r3, #4
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	1d1a      	adds	r2, r3, #4
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	615a      	str	r2, [r3, #20]
          while ((hhash->HashInCount) < hhash->Size)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d3e6      	bcc.n	8003dac <HASH_WriteData_IT+0xda>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
          /*Call registered Input complete callback*/
          hhash->InCpltCallback(hhash);
#else
          /*Call legacy weak Input complete callback*/
          HAL_HASH_InCpltCallback(hhash);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff ff4b 	bl	8003c7a <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
          if (hhash->Accumulation == 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d138      	bne.n	8003e5e <HASH_WriteData_IT+0x18c>
          {
            if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	f040 827d 	bne.w	80042f6 <HASH_WriteData_IT+0x624>
            {
              /* Start the message padding then the Digest calculation */
              SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e0a:	609a      	str	r2, [r3, #8]

              /* Wait for HASH_FLAG_DCIS flag to be set */
              count = HASH_TIMEOUTVALUE;
 8003e0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e10:	61bb      	str	r3, [r7, #24]
              do
              {
                count--;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	3b01      	subs	r3, #1
 8003e16:	61bb      	str	r3, [r7, #24]
                if (count == 0U)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d117      	bne.n	8003e4e <HASH_WriteData_IT+0x17c>
                {
                  /* Disable Interrupts */
                  __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a1a      	ldr	r2, [r3, #32]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0203 	bic.w	r2, r2, #3
 8003e2c:	621a      	str	r2, [r3, #32]

                  /* Change state */
                  hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e32:	f043 0204 	orr.w	r2, r3, #4
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	635a      	str	r2, [r3, #52]	@ 0x34
                  hhash->State = HAL_HASH_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                  __HAL_UNLOCK(hhash);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                  return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e254      	b.n	80042f8 <HASH_WriteData_IT+0x626>
                }
              } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0da      	beq.n	8003e12 <HASH_WriteData_IT+0x140>
 8003e5c:	e24b      	b.n	80042f6 <HASH_WriteData_IT+0x624>
            }
          }
          else
          {
            /* Reset multi buffers accumulation flag */
            hhash->Accumulation = 0U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	63da      	str	r2, [r3, #60]	@ 0x3c
            /* Disable Interrupts */
            __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6a1a      	ldr	r2, [r3, #32]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	621a      	str	r2, [r3, #32]
 8003e74:	e23f      	b.n	80042f6 <HASH_WriteData_IT+0x624>
      }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
    }
    else /*HMAC */
    {
      if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2) /* loading input*/
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	f040 80df 	bne.w	8004040 <HASH_WriteData_IT+0x36e>
          __HAL_UNLOCK(hhash);
        }
        else
        {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
          if (hhash->Accumulation == 1U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d108      	bne.n	8003e9c <HASH_WriteData_IT+0x1ca>
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 0U);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 021f 	bic.w	r2, r2, #31
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	e00d      	b.n	8003eb8 <HASH_WriteData_IT+0x1e6>
          }
          else
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (hhash->Size % 4U));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f023 011f 	bic.w	r1, r3, #31
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	00da      	lsls	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]
          }
          if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	441a      	add	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d258      	bcs.n	8003f7a <HASH_WriteData_IT+0x2a8>
          {
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	e015      	b.n	8003efa <HASH_WriteData_IT+0x228>
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3304      	adds	r3, #4
 8003ede:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	1d1a      	adds	r2, r3, #4
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	1d1a      	adds	r2, r3, #4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	615a      	str	r2, [r3, #20]
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d3e5      	bcc.n	8003ece <HASH_WriteData_IT+0x1fc>
            }
            /* Wait for HASH_IT_DINI flag to be set */
            count = HASH_TIMEOUTVALUE;
 8003f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f06:	61bb      	str	r3, [r7, #24]
            do
            {
              count--;
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	61bb      	str	r3, [r7, #24]
              if (count == 0U)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d117      	bne.n	8003f44 <HASH_WriteData_IT+0x272>
              {
                /* Disable Interrupts */
                __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a1a      	ldr	r2, [r3, #32]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0203 	bic.w	r2, r2, #3
 8003f22:	621a      	str	r2, [r3, #32]

                /* Change state */
                hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f28:	f043 0204 	orr.w	r2, r3, #4
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	635a      	str	r2, [r3, #52]	@ 0x34
                hhash->State = HAL_HASH_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                __HAL_UNLOCK(hhash);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e1d9      	b.n	80042f8 <HASH_WriteData_IT+0x626>
              }
            } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0da      	beq.n	8003f08 <HASH_WriteData_IT+0x236>
 8003f52:	e1d0      	b.n	80042f6 <HASH_WriteData_IT+0x624>
          else
          {
            while ((hhash->HashInCount) < hhash->Size)
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	461a      	mov	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3304      	adds	r3, #4
 8003f64:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	1d1a      	adds	r2, r3, #4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	1d1a      	adds	r2, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	615a      	str	r2, [r3, #20]
            while ((hhash->HashInCount) < hhash->Size)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d3e6      	bcc.n	8003f54 <HASH_WriteData_IT+0x282>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
            /*Call registered Input complete callback*/
            hhash->InCpltCallback(hhash);
#else
            /*Call legacy weak Input complete callback*/
            HAL_HASH_InCpltCallback(hhash);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff fe77 	bl	8003c7a <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

            if (hhash->Accumulation == 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d143      	bne.n	800401c <HASH_WriteData_IT+0x34a>
            {
              if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	f040 81a9 	bne.w	80042f6 <HASH_WriteData_IT+0x624>
              {
                /* Start the message padding then the Digest calculation */
                SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fb2:	609a      	str	r2, [r3, #8]

                /* Wait for HASH_FLAG_BUSY flag to be set */
                count = HASH_TIMEOUTVALUE;
 8003fb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fb8:	61bb      	str	r3, [r7, #24]
                do
                {
                  count--;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	61bb      	str	r3, [r7, #24]
                  if (count == 0U)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d117      	bne.n	8003ff6 <HASH_WriteData_IT+0x324>
                  {
                    /* Disable Interrupts */
                    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0203 	bic.w	r2, r2, #3
 8003fd4:	621a      	str	r2, [r3, #32]

                    /* Change state */
                    hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fda:	f043 0204 	orr.w	r2, r3, #4
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	635a      	str	r2, [r3, #52]	@ 0x34
                    hhash->State = HAL_HASH_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    __HAL_UNLOCK(hhash);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e180      	b.n	80042f8 <HASH_WriteData_IT+0x626>
                  }
                } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d0da      	beq.n	8003fba <HASH_WriteData_IT+0x2e8>

                hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2205      	movs	r2, #5
 8004008:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                hhash->HashInCount = 0U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	61da      	str	r2, [r3, #28]
                hhash->pHashKeyBuffPtr = hhash->Init.pKey;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	625a      	str	r2, [r3, #36]	@ 0x24
 800401a:	e16c      	b.n	80042f6 <HASH_WriteData_IT+0x624>
            }

            else
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6a1a      	ldr	r2, [r3, #32]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0203 	bic.w	r2, r2, #3
 800402a:	621a      	str	r2, [r3, #32]
              hhash->State = HAL_HASH_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e15b      	b.n	80042f8 <HASH_WriteData_IT+0x626>
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
        }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
      }

      else if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3)/* loading Key*/
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004046:	2b05      	cmp	r3, #5
 8004048:	f040 80a1 	bne.w	800418e <HASH_WriteData_IT+0x4bc>
      {

        /* Configure the number of valid bits in last word of the Key */
        MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 011f 	bic.w	r1, r3, #31
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	00da      	lsls	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	609a      	str	r2, [r3, #8]

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	441a      	add	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	d253      	bcs.n	8004120 <HASH_WriteData_IT+0x44e>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	e015      	b.n	80040aa <HASH_WriteData_IT+0x3d8>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	461a      	mov	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	3304      	adds	r3, #4
 800408e:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	1d1a      	adds	r2, r3, #4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3304      	adds	r3, #4
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d3e5      	bcc.n	800407e <HASH_WriteData_IT+0x3ac>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 80040b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040b6:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d117      	bne.n	80040f4 <HASH_WriteData_IT+0x422>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6a1a      	ldr	r2, [r3, #32]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0203 	bic.w	r2, r2, #3
 80040d2:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040d8:	f043 0204 	orr.w	r2, r3, #4
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e101      	b.n	80042f8 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0da      	beq.n	80040b8 <HASH_WriteData_IT+0x3e6>
 8004102:	e0f8      	b.n	80042f6 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	461a      	mov	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	3304      	adds	r3, #4
 8004114:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	1d1a      	adds	r2, r3, #4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	61da      	str	r2, [r3, #28]
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	429a      	cmp	r2, r3
 800412a:	d3eb      	bcc.n	8004104 <HASH_WriteData_IT+0x432>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800413a:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_DCIS flag to be set */
          count = HASH_TIMEOUTVALUE;
 800413c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004140:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	3b01      	subs	r3, #1
 8004146:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d117      	bne.n	800417e <HASH_WriteData_IT+0x4ac>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6a1a      	ldr	r2, [r3, #32]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0203 	bic.w	r2, r2, #3
 800415c:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004162:	f043 0204 	orr.w	r2, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0bc      	b.n	80042f8 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0da      	beq.n	8004142 <HASH_WriteData_IT+0x470>
 800418c:	e0b3      	b.n	80042f6 <HASH_WriteData_IT+0x624>
        }
      }
      else  /*first step , loading key*/
      {

        hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2203      	movs	r2, #3
 8004192:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	441a      	add	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d258      	bcs.n	8004258 <HASH_WriteData_IT+0x586>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	e015      	b.n	80041d8 <HASH_WriteData_IT+0x506>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	461a      	mov	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	3304      	adds	r3, #4
 80041bc:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	1d1a      	adds	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	1d1a      	adds	r2, r3, #4
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3304      	adds	r3, #4
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d3e5      	bcc.n	80041ac <HASH_WriteData_IT+0x4da>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 80041e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041e4:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d117      	bne.n	8004222 <HASH_WriteData_IT+0x550>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6a1a      	ldr	r2, [r3, #32]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0203 	bic.w	r2, r2, #3
 8004200:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004206:	f043 0204 	orr.w	r2, r3, #4
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e06a      	b.n	80042f8 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0da      	beq.n	80041e6 <HASH_WriteData_IT+0x514>
 8004230:	e061      	b.n	80042f6 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	461a      	mov	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3304      	adds	r3, #4
 8004242:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	1d1a      	adds	r2, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	1d1a      	adds	r2, r3, #4
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	625a      	str	r2, [r3, #36]	@ 0x24
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69da      	ldr	r2, [r3, #28]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	429a      	cmp	r2, r3
 8004262:	d3e6      	bcc.n	8004232 <HASH_WriteData_IT+0x560>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004272:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_BUSY flag to be set */
          count = HASH_TIMEOUTVALUE;
 8004274:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004278:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	3b01      	subs	r3, #1
 800427e:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d117      	bne.n	80042b6 <HASH_WriteData_IT+0x5e4>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0203 	bic.w	r2, r2, #3
 8004294:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429a:	f043 0204 	orr.w	r2, r3, #4
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e020      	b.n	80042f8 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d0da      	beq.n	800427a <HASH_WriteData_IT+0x5a8>
          /*change Phase to step 2*/
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2204      	movs	r2, #4
 80042c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
          hhash->HashInCount = 0U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	61da      	str	r2, [r3, #28]
 80042d2:	e010      	b.n	80042f6 <HASH_WriteData_IT+0x624>
        }
      }
    }
  }
  else if ((hhash->State == HAL_HASH_STATE_SUSPENDED))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d101      	bne.n	80042e4 <HASH_WriteData_IT+0x612>
  {
    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e009      	b.n	80042f8 <HASH_WriteData_IT+0x626>
  }
  else
  {
    /* Busy error code field */
    hhash->ErrorCode |= HAL_HASH_ERROR_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e8:	f043 0201 	orr.w	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
    /*Call registered error callback*/
    hhash->ErrorCallback(hhash);
#else
    /*Call legacy weak error callback*/
    HAL_HASH_ErrorCallback(hhash);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff fcd6 	bl	8003ca2 <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(const HASH_HandleTypeDef *hhash, const uint8_t *pMsgDigest, uint8_t Size)
{
 8004300:	b480      	push	{r7}
 8004302:	b0b7      	sub	sp, #220	@ 0xdc
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	71fb      	strb	r3, [r7, #7]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  switch (Size)
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	2b30      	cmp	r3, #48	@ 0x30
 8004318:	dc44      	bgt.n	80043a4 <HASH_GetDigest+0xa4>
 800431a:	2b14      	cmp	r3, #20
 800431c:	f2c0 82e7 	blt.w	80048ee <HASH_GetDigest+0x5ee>
 8004320:	3b14      	subs	r3, #20
 8004322:	2b1c      	cmp	r3, #28
 8004324:	f200 82e3 	bhi.w	80048ee <HASH_GetDigest+0x5ee>
 8004328:	a201      	add	r2, pc, #4	@ (adr r2, 8004330 <HASH_GetDigest+0x30>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	080043ad 	.word	0x080043ad
 8004334:	080048ef 	.word	0x080048ef
 8004338:	080048ef 	.word	0x080048ef
 800433c:	080048ef 	.word	0x080048ef
 8004340:	080048ef 	.word	0x080048ef
 8004344:	080048ef 	.word	0x080048ef
 8004348:	080048ef 	.word	0x080048ef
 800434c:	080048ef 	.word	0x080048ef
 8004350:	08004445 	.word	0x08004445
 8004354:	080048ef 	.word	0x080048ef
 8004358:	080048ef 	.word	0x080048ef
 800435c:	080048ef 	.word	0x080048ef
 8004360:	08004519 	.word	0x08004519
 8004364:	080048ef 	.word	0x080048ef
 8004368:	080048ef 	.word	0x080048ef
 800436c:	080048ef 	.word	0x080048ef
 8004370:	080048ef 	.word	0x080048ef
 8004374:	080048ef 	.word	0x080048ef
 8004378:	080048ef 	.word	0x080048ef
 800437c:	080048ef 	.word	0x080048ef
 8004380:	080048ef 	.word	0x080048ef
 8004384:	080048ef 	.word	0x080048ef
 8004388:	080048ef 	.word	0x080048ef
 800438c:	080048ef 	.word	0x080048ef
 8004390:	080048ef 	.word	0x080048ef
 8004394:	080048ef 	.word	0x080048ef
 8004398:	080048ef 	.word	0x080048ef
 800439c:	080048ef 	.word	0x080048ef
 80043a0:	0800460b 	.word	0x0800460b
 80043a4:	2b40      	cmp	r3, #64	@ 0x40
 80043a6:	f000 81d1 	beq.w	800474c <HASH_GetDigest+0x44c>
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);

      break;
#endif /* defined(HASH_ALGOSELECTION_SHA512)*/
    default:
      break;
 80043aa:	e2a0      	b.n	80048ee <HASH_GetDigest+0x5ee>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043b6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
  return __builtin_bswap32(value);
 80043ba:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80043be:	ba12      	rev	r2, r2
 80043c0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80043c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043c6:	3304      	adds	r3, #4
 80043c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043d6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043de:	ba12      	rev	r2, r2
 80043e0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80043e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043e6:	3304      	adds	r3, #4
 80043e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043f6:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80043fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043fe:	ba12      	rev	r2, r2
 8004400:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004406:	3304      	adds	r3, #4
 8004408:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004416:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800441a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800441e:	ba12      	rev	r2, r2
 8004420:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004426:	3304      	adds	r3, #4
 8004428:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69da      	ldr	r2, [r3, #28]
 8004432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004436:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800443a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800443e:	ba12      	rev	r2, r2
 8004440:	601a      	str	r2, [r3, #0]
      break;
 8004442:	e255      	b.n	80048f0 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800444e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004452:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004456:	ba12      	rev	r2, r2
 8004458:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800445a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800445e:	3304      	adds	r3, #4
 8004460:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800446e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004476:	ba12      	rev	r2, r2
 8004478:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800447a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800447e:	3304      	adds	r3, #4
 8004480:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800448e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004492:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004496:	ba12      	rev	r2, r2
 8004498:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800449a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800449e:	3304      	adds	r3, #4
 80044a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ae:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 80044b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044b6:	ba12      	rev	r2, r2
 80044b8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80044ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044be:	3304      	adds	r3, #4
 80044c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69da      	ldr	r2, [r3, #28]
 80044ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ce:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80044d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044d6:	ba12      	rev	r2, r2
 80044d8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80044da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044de:	3304      	adds	r3, #4
 80044e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 80044e4:	4b98      	ldr	r3, [pc, #608]	@ (8004748 <HASH_GetDigest+0x448>)
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ec:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80044f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044f4:	ba12      	rev	r2, r2
 80044f6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80044f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044fc:	3304      	adds	r3, #4
 80044fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8004502:	4b91      	ldr	r3, [pc, #580]	@ (8004748 <HASH_GetDigest+0x448>)
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800450a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800450e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8004512:	ba12      	rev	r2, r2
 8004514:	601a      	str	r2, [r3, #0]
      break;
 8004516:	e1eb      	b.n	80048f0 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004522:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004526:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800452a:	ba12      	rev	r2, r2
 800452c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800452e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004532:	3304      	adds	r3, #4
 8004534:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004542:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8004546:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800454a:	ba12      	rev	r2, r2
 800454c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800454e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004552:	3304      	adds	r3, #4
 8004554:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004562:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004566:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800456a:	ba12      	rev	r2, r2
 800456c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800456e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004572:	3304      	adds	r3, #4
 8004574:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004582:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004586:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800458a:	ba12      	rev	r2, r2
 800458c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800458e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004592:	3304      	adds	r3, #4
 8004594:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69da      	ldr	r2, [r3, #28]
 800459e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80045aa:	ba12      	rev	r2, r2
 80045ac:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80045ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045b2:	3304      	adds	r3, #4
 80045b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 80045b8:	4b63      	ldr	r3, [pc, #396]	@ (8004748 <HASH_GetDigest+0x448>)
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045c0:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80045c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80045c8:	ba12      	rev	r2, r2
 80045ca:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80045cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045d0:	3304      	adds	r3, #4
 80045d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 80045d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004748 <HASH_GetDigest+0x448>)
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045de:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80045e2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80045e6:	ba12      	rev	r2, r2
 80045e8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80045ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045ee:	3304      	adds	r3, #4
 80045f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 80045f4:	4b54      	ldr	r3, [pc, #336]	@ (8004748 <HASH_GetDigest+0x448>)
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045fc:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8004600:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004604:	ba12      	rev	r2, r2
 8004606:	601a      	str	r2, [r3, #0]
      break;
 8004608:	e172      	b.n	80048f0 <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004614:	657a      	str	r2, [r7, #84]	@ 0x54
 8004616:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004618:	ba12      	rev	r2, r2
 800461a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800461c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004620:	3304      	adds	r3, #4
 8004622:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004630:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004632:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004634:	ba12      	rev	r2, r2
 8004636:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004638:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800463c:	3304      	adds	r3, #4
 800463e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800464c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800464e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004650:	ba12      	rev	r2, r2
 8004652:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004658:	3304      	adds	r3, #4
 800465a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004668:	663a      	str	r2, [r7, #96]	@ 0x60
 800466a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800466c:	ba12      	rev	r2, r2
 800466e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004674:	3304      	adds	r3, #4
 8004676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	69da      	ldr	r2, [r3, #28]
 8004680:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004684:	667a      	str	r2, [r7, #100]	@ 0x64
 8004686:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004688:	ba12      	rev	r2, r2
 800468a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800468c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004690:	3304      	adds	r3, #4
 8004692:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004696:	4b2c      	ldr	r3, [pc, #176]	@ (8004748 <HASH_GetDigest+0x448>)
 8004698:	695a      	ldr	r2, [r3, #20]
 800469a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800469e:	66ba      	str	r2, [r7, #104]	@ 0x68
 80046a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80046a2:	ba12      	rev	r2, r2
 80046a4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80046a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046aa:	3304      	adds	r3, #4
 80046ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 80046b0:	4b25      	ldr	r3, [pc, #148]	@ (8004748 <HASH_GetDigest+0x448>)
 80046b2:	699a      	ldr	r2, [r3, #24]
 80046b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046bc:	ba12      	rev	r2, r2
 80046be:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80046c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046c4:	3304      	adds	r3, #4
 80046c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 80046ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004748 <HASH_GetDigest+0x448>)
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046d2:	673a      	str	r2, [r7, #112]	@ 0x70
 80046d4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80046d6:	ba12      	rev	r2, r2
 80046d8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80046da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046de:	3304      	adds	r3, #4
 80046e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 80046e4:	4b18      	ldr	r3, [pc, #96]	@ (8004748 <HASH_GetDigest+0x448>)
 80046e6:	6a1a      	ldr	r2, [r3, #32]
 80046e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046ec:	677a      	str	r2, [r7, #116]	@ 0x74
 80046ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80046f0:	ba12      	rev	r2, r2
 80046f2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80046f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046f8:	3304      	adds	r3, #4
 80046fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 80046fe:	4b12      	ldr	r3, [pc, #72]	@ (8004748 <HASH_GetDigest+0x448>)
 8004700:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004706:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004708:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800470a:	ba12      	rev	r2, r2
 800470c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800470e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004712:	3304      	adds	r3, #4
 8004714:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 8004718:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <HASH_GetDigest+0x448>)
 800471a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800471c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004720:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004722:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004724:	ba12      	rev	r2, r2
 8004726:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800472c:	3304      	adds	r3, #4
 800472e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 8004732:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <HASH_GetDigest+0x448>)
 8004734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800473a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800473e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004742:	ba12      	rev	r2, r2
 8004744:	601a      	str	r2, [r3, #0]
      break;
 8004746:	e0d3      	b.n	80048f0 <HASH_GetDigest+0x5f0>
 8004748:	420c0710 	.word	0x420c0710
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004756:	617a      	str	r2, [r7, #20]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	ba12      	rev	r2, r2
 800475c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800475e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004762:	3304      	adds	r3, #4
 8004764:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004772:	61ba      	str	r2, [r7, #24]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	ba12      	rev	r2, r2
 8004778:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800477a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800477e:	3304      	adds	r3, #4
 8004780:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695a      	ldr	r2, [r3, #20]
 800478a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800478e:	61fa      	str	r2, [r7, #28]
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	ba12      	rev	r2, r2
 8004794:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800479a:	3304      	adds	r3, #4
 800479c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047aa:	623a      	str	r2, [r7, #32]
 80047ac:	6a3a      	ldr	r2, [r7, #32]
 80047ae:	ba12      	rev	r2, r2
 80047b0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80047b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047b6:	3304      	adds	r3, #4
 80047b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69da      	ldr	r2, [r3, #28]
 80047c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80047c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ca:	ba12      	rev	r2, r2
 80047cc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80047ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047d2:	3304      	adds	r3, #4
 80047d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 80047d8:	4b48      	ldr	r3, [pc, #288]	@ (80048fc <HASH_GetDigest+0x5fc>)
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047e0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80047e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047e4:	ba12      	rev	r2, r2
 80047e6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80047e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ec:	3304      	adds	r3, #4
 80047ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 80047f2:	4b42      	ldr	r3, [pc, #264]	@ (80048fc <HASH_GetDigest+0x5fc>)
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047fe:	ba12      	rev	r2, r2
 8004800:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004806:	3304      	adds	r3, #4
 8004808:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 800480c:	4b3b      	ldr	r3, [pc, #236]	@ (80048fc <HASH_GetDigest+0x5fc>)
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004814:	633a      	str	r2, [r7, #48]	@ 0x30
 8004816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004818:	ba12      	rev	r2, r2
 800481a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800481c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004820:	3304      	adds	r3, #4
 8004822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 8004826:	4b35      	ldr	r3, [pc, #212]	@ (80048fc <HASH_GetDigest+0x5fc>)
 8004828:	6a1a      	ldr	r2, [r3, #32]
 800482a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800482e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004832:	ba12      	rev	r2, r2
 8004834:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004836:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800483a:	3304      	adds	r3, #4
 800483c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 8004840:	4b2e      	ldr	r3, [pc, #184]	@ (80048fc <HASH_GetDigest+0x5fc>)
 8004842:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004848:	63ba      	str	r2, [r7, #56]	@ 0x38
 800484a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800484c:	ba12      	rev	r2, r2
 800484e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004854:	3304      	adds	r3, #4
 8004856:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 800485a:	4b28      	ldr	r3, [pc, #160]	@ (80048fc <HASH_GetDigest+0x5fc>)
 800485c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800485e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004862:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004864:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004866:	ba12      	rev	r2, r2
 8004868:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800486a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800486e:	3304      	adds	r3, #4
 8004870:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 8004874:	4b21      	ldr	r3, [pc, #132]	@ (80048fc <HASH_GetDigest+0x5fc>)
 8004876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004878:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800487c:	643a      	str	r2, [r7, #64]	@ 0x40
 800487e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004880:	ba12      	rev	r2, r2
 8004882:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004888:	3304      	adds	r3, #4
 800488a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[12]);
 800488e:	4b1b      	ldr	r3, [pc, #108]	@ (80048fc <HASH_GetDigest+0x5fc>)
 8004890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004896:	647a      	str	r2, [r7, #68]	@ 0x44
 8004898:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800489a:	ba12      	rev	r2, r2
 800489c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800489e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048a2:	3304      	adds	r3, #4
 80048a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[13]);
 80048a8:	4b14      	ldr	r3, [pc, #80]	@ (80048fc <HASH_GetDigest+0x5fc>)
 80048aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80048b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048b4:	ba12      	rev	r2, r2
 80048b6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80048b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048bc:	3304      	adds	r3, #4
 80048be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[14]);
 80048c2:	4b0e      	ldr	r3, [pc, #56]	@ (80048fc <HASH_GetDigest+0x5fc>)
 80048c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80048cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048ce:	ba12      	rev	r2, r2
 80048d0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80048d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048d6:	3304      	adds	r3, #4
 80048d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);
 80048dc:	4b07      	ldr	r3, [pc, #28]	@ (80048fc <HASH_GetDigest+0x5fc>)
 80048de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048e4:	653a      	str	r2, [r7, #80]	@ 0x50
 80048e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80048e8:	ba12      	rev	r2, r2
 80048ea:	601a      	str	r2, [r3, #0]
      break;
 80048ec:	e000      	b.n	80048f0 <HASH_GetDigest+0x5f0>
      break;
 80048ee:	bf00      	nop
  }
}
 80048f0:	bf00      	nop
 80048f2:	37dc      	adds	r7, #220	@ 0xdc
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	420c0710 	.word	0x420c0710

08004900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e08d      	b.n	8004a2e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fd fc6a 	bl	8002200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	@ 0x24
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0201 	bic.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004950:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004960:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d107      	bne.n	800497a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	e006      	b.n	8004988 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004986:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	2b02      	cmp	r3, #2
 800498e:	d108      	bne.n	80049a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	e007      	b.n	80049b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69d9      	ldr	r1, [r3, #28]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1a      	ldr	r2, [r3, #32]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d138      	bne.n	8004abe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e032      	b.n	8004ac0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2224      	movs	r2, #36	@ 0x24
 8004a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a88:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e000      	b.n	8004ac0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
  }
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b20      	cmp	r3, #32
 8004ae0:	d139      	bne.n	8004b56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e033      	b.n	8004b58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2224      	movs	r2, #36	@ 0x24
 8004afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0201 	bic.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	e000      	b.n	8004b58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b56:	2302      	movs	r3, #2
  }
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004b70:	230a      	movs	r3, #10
 8004b72:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004b74:	e002      	b.n	8004b7c <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f9      	bne.n	8004b76 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8004b82:	887b      	ldrh	r3, [r7, #2]
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	0c1b      	lsrs	r3, r3, #16
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b98:	b29b      	uxth	r3, r3
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004bb2:	230a      	movs	r3, #10
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004bb6:	e002      	b.n	8004bbe <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f9      	bne.n	8004bb8 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8004bc4:	887b      	ldrh	r3, [r7, #2]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bcc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bda:	b29b      	uxth	r3, r3
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004bf4:	230a      	movs	r3, #10
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004bf8:	e002      	b.n	8004c00 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f9      	bne.n	8004bfa <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8004c06:	887b      	ldrh	r3, [r7, #2]
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c1c:	b29b      	uxth	r3, r3
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af02      	add	r7, sp, #8
 8004c30:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0f3      	b.n	8004e24 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7fd fdfd 	bl	8002850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2203      	movs	r2, #3
 8004c5a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f009 f85f 	bl	800dd26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	7c1a      	ldrb	r2, [r3, #16]
 8004c70:	f88d 2000 	strb.w	r2, [sp]
 8004c74:	3304      	adds	r3, #4
 8004c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c78:	f009 f823 	bl	800dcc2 <USB_CoreInit>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0ca      	b.n	8004e24 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2100      	movs	r1, #0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f009 f85b 	bl	800dd50 <USB_SetCurrentMode>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0bb      	b.n	8004e24 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]
 8004cb0:	e03f      	b.n	8004d32 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	440b      	add	r3, r1
 8004cc0:	3315      	adds	r3, #21
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cc6:	7bfa      	ldrb	r2, [r7, #15]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3314      	adds	r3, #20
 8004cd6:	7bfa      	ldrb	r2, [r7, #15]
 8004cd8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cda:	7bfa      	ldrb	r2, [r7, #15]
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	440b      	add	r3, r1
 8004ce8:	3317      	adds	r3, #23
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	440b      	add	r3, r1
 8004cfc:	3324      	adds	r3, #36	@ 0x24
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d02:	7bfa      	ldrb	r2, [r7, #15]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	440b      	add	r3, r1
 8004d10:	3328      	adds	r3, #40	@ 0x28
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	440b      	add	r3, r1
 8004d26:	3304      	adds	r3, #4
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	791b      	ldrb	r3, [r3, #4]
 8004d36:	7bfa      	ldrb	r2, [r7, #15]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d3ba      	bcc.n	8004cb2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	73fb      	strb	r3, [r7, #15]
 8004d40:	e044      	b.n	8004dcc <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d42:	7bfa      	ldrb	r2, [r7, #15]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	440b      	add	r3, r1
 8004d50:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d58:	7bfa      	ldrb	r2, [r7, #15]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	440b      	add	r3, r1
 8004d66:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004d6a:	7bfa      	ldrb	r2, [r7, #15]
 8004d6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d6e:	7bfa      	ldrb	r2, [r7, #15]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	440b      	add	r3, r1
 8004d7c:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8004d80:	2200      	movs	r2, #0
 8004d82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d84:	7bfa      	ldrb	r2, [r7, #15]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	440b      	add	r3, r1
 8004d92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d9a:	7bfa      	ldrb	r2, [r7, #15]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	440b      	add	r3, r1
 8004da8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004db0:	7bfa      	ldrb	r2, [r7, #15]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	440b      	add	r3, r1
 8004dbe:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	791b      	ldrb	r3, [r3, #4]
 8004dd0:	7bfa      	ldrb	r2, [r7, #15]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d3b5      	bcc.n	8004d42 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	7c1a      	ldrb	r2, [r3, #16]
 8004dde:	f88d 2000 	strb.w	r2, [sp]
 8004de2:	3304      	adds	r3, #4
 8004de4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004de6:	f008 ffd6 	bl	800dd96 <USB_DevInit>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e013      	b.n	8004e24 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	7b1b      	ldrb	r3, [r3, #12]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d102      	bne.n	8004e18 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f001 fb6b 	bl	80064ee <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f00a fe2f 	bl	800fa80 <USB_DevDisconnect>

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d101      	bne.n	8004e42 <HAL_PCD_Start+0x16>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e012      	b.n	8004e68 <HAL_PCD_Start+0x3c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f008 ff55 	bl	800dcfe <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f00a fe00 	bl	800fa5e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f00a fe10 	bl	800faa2 <USB_ReadInterrupts>
 8004e82:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 faf2 	bl	8005478 <PCD_EP_ISR_Handler>

    return;
 8004e94:	e0de      	b.n	8005054 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d010      	beq.n	8004ec2 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8004eae:	400b      	ands	r3, r1
 8004eb0:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f00b fe5f 	bl	8010b76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004eb8:	2100      	movs	r1, #0
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f8e1 	bl	8005082 <HAL_PCD_SetAddress>

    return;
 8004ec0:	e0c8      	b.n	8005054 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8004eda:	400b      	ands	r3, r1
 8004edc:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004ede:	e0b9      	b.n	8005054 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8004ef8:	400b      	ands	r3, r1
 8004efa:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004efc:	e0aa      	b.n	8005054 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d029      	beq.n	8004f5c <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0204 	bic.w	r2, r2, #4
 8004f16:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0208 	bic.w	r2, r2, #8
 8004f26:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d107      	bne.n	8004f42 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f001 faf8 	bl	8006532 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f893 	bl	800506e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004f56:	400b      	ands	r3, r1
 8004f58:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004f5a:	e07b      	b.n	8005054 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d01c      	beq.n	8004fa0 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0208 	orr.w	r2, r2, #8
 8004f74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8004f84:	400b      	ands	r3, r1
 8004f86:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0204 	orr.w	r2, r2, #4
 8004f96:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f85e 	bl	800505a <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004f9e:	e059      	b.n	8005054 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d033      	beq.n	8005012 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8004fb8:	400b      	ands	r3, r1
 8004fba:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d121      	bne.n	800500a <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0204 	orr.w	r2, r2, #4
 8004fd4:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0208 	orr.w	r2, r2, #8
 8004fe4:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff4:	089b      	lsrs	r3, r3, #2
 8004ff6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005000:	2101      	movs	r1, #1
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f001 fa95 	bl	8006532 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005008:	e024      	b.n	8005054 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f825 	bl	800505a <HAL_PCD_SuspendCallback>
    return;
 8005010:	e020      	b.n	8005054 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00c      	beq.n	8005036 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 800502a:	400b      	ands	r3, r1
 800502c:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f00b fd93 	bl	8010b5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005034:	e00e      	b.n	8005054 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d009      	beq.n	8005054 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800504e:	400b      	ands	r3, r1
 8005050:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8005052:	bf00      	nop
  }
}
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_PCD_SetAddress+0x1a>
 8005098:	2302      	movs	r3, #2
 800509a:	e012      	b.n	80050c2 <HAL_PCD_SetAddress+0x40>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	78fa      	ldrb	r2, [r7, #3]
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f00a fcc0 	bl	800fa38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	4608      	mov	r0, r1
 80050d4:	4611      	mov	r1, r2
 80050d6:	461a      	mov	r2, r3
 80050d8:	4603      	mov	r3, r0
 80050da:	70fb      	strb	r3, [r7, #3]
 80050dc:	460b      	mov	r3, r1
 80050de:	803b      	strh	r3, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	da0f      	bge.n	8005110 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	f003 0207 	and.w	r2, r3, #7
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	3310      	adds	r3, #16
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	4413      	add	r3, r2
 8005104:	3304      	adds	r3, #4
 8005106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	705a      	strb	r2, [r3, #1]
 800510e:	e00f      	b.n	8005130 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	f003 0207 	and.w	r2, r3, #7
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	3304      	adds	r3, #4
 8005128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	b2da      	uxtb	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800513c:	883b      	ldrh	r3, [r7, #0]
 800513e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	78ba      	ldrb	r2, [r7, #2]
 800514a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800514c:	78bb      	ldrb	r3, [r7, #2]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d102      	bne.n	8005158 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_PCD_EP_Open+0x9c>
 8005162:	2302      	movs	r3, #2
 8005164:	e00e      	b.n	8005184 <HAL_PCD_EP_Open+0xba>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68f9      	ldr	r1, [r7, #12]
 8005174:	4618      	mov	r0, r3
 8005176:	f008 fe31 	bl	800dddc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8005182:	7afb      	ldrb	r3, [r7, #11]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800519c:	2b00      	cmp	r3, #0
 800519e:	da0f      	bge.n	80051c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	f003 0207 	and.w	r2, r3, #7
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	3310      	adds	r3, #16
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	4413      	add	r3, r2
 80051b4:	3304      	adds	r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	705a      	strb	r2, [r3, #1]
 80051be:	e00f      	b.n	80051e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	f003 0207 	and.w	r2, r3, #7
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	3304      	adds	r3, #4
 80051d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_PCD_EP_Close+0x6e>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e00e      	b.n	8005218 <HAL_PCD_EP_Close+0x8c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68f9      	ldr	r1, [r7, #12]
 8005208:	4618      	mov	r0, r3
 800520a:	f009 f947 	bl	800e49c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	607a      	str	r2, [r7, #4]
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	460b      	mov	r3, r1
 800522e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005230:	7afb      	ldrb	r3, [r7, #11]
 8005232:	f003 0207 	and.w	r2, r3, #7
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	3304      	adds	r3, #4
 8005248:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2200      	movs	r2, #0
 800525a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2200      	movs	r2, #0
 8005260:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005262:	7afb      	ldrb	r3, [r7, #11]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	b2da      	uxtb	r2, r3
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6979      	ldr	r1, [r7, #20]
 8005274:	4618      	mov	r0, r3
 8005276:	f009 fa9b 	bl	800e7b0 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	460b      	mov	r3, r1
 800528e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	f003 0207 	and.w	r2, r3, #7
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	440b      	add	r3, r1
 80052a2:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80052a6:	681b      	ldr	r3, [r3, #0]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	460b      	mov	r3, r1
 80052c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052c4:	7afb      	ldrb	r3, [r7, #11]
 80052c6:	f003 0207 	and.w	r2, r3, #7
 80052ca:	4613      	mov	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	3310      	adds	r3, #16
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	3304      	adds	r3, #4
 80052da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2200      	movs	r2, #0
 80052fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2201      	movs	r2, #1
 8005300:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005302:	7afb      	ldrb	r3, [r7, #11]
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	b2da      	uxtb	r2, r3
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6979      	ldr	r1, [r7, #20]
 8005314:	4618      	mov	r0, r3
 8005316:	f009 fa4b 	bl	800e7b0 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	7912      	ldrb	r2, [r2, #4]
 800533a:	4293      	cmp	r3, r2
 800533c:	d901      	bls.n	8005342 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e040      	b.n	80053c4 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005346:	2b00      	cmp	r3, #0
 8005348:	da0f      	bge.n	800536a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	f003 0207 	and.w	r2, r3, #7
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	3310      	adds	r3, #16
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	3304      	adds	r3, #4
 8005360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	705a      	strb	r2, [r3, #1]
 8005368:	e00d      	b.n	8005386 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4413      	add	r3, r2
 800537c:	3304      	adds	r3, #4
 800537e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	b2da      	uxtb	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_PCD_EP_SetStall+0x82>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e00e      	b.n	80053c4 <HAL_PCD_EP_SetStall+0xa0>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f00a fa65 	bl	800f884 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	7912      	ldrb	r2, [r2, #4]
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e042      	b.n	8005470 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	da0f      	bge.n	8005412 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	f003 0207 	and.w	r2, r3, #7
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	3310      	adds	r3, #16
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	4413      	add	r3, r2
 8005406:	3304      	adds	r3, #4
 8005408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	705a      	strb	r2, [r3, #1]
 8005410:	e00f      	b.n	8005432 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005412:	78fb      	ldrb	r3, [r7, #3]
 8005414:	f003 0207 	and.w	r2, r3, #7
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	4413      	add	r3, r2
 8005428:	3304      	adds	r3, #4
 800542a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	b2da      	uxtb	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_PCD_EP_ClrStall+0x86>
 800544e:	2302      	movs	r3, #2
 8005450:	e00e      	b.n	8005470 <HAL_PCD_EP_ClrStall+0xa4>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68f9      	ldr	r1, [r7, #12]
 8005460:	4618      	mov	r0, r3
 8005462:	f00a fa55 	bl	800f910 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08e      	sub	sp, #56	@ 0x38
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005480:	e326      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005488:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800548a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8005496:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800549a:	2b00      	cmp	r3, #0
 800549c:	f040 8124 	bne.w	80056e8 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80054a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d13e      	bne.n	8005528 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	4b89      	ldr	r3, [pc, #548]	@ (80056d8 <PCD_EP_ISR_Handler+0x260>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054c0:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3314      	adds	r3, #20
 80054c6:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80054c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	0c1b      	lsrs	r3, r3, #16
 80054da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80054e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	441a      	add	r2, r3
 80054ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ee:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80054f0:	2100      	movs	r1, #0
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f00b fb17 	bl	8010b26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	7c5b      	ldrb	r3, [r3, #17]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f000 82e6 	beq.w	8005ad0 <PCD_EP_ISR_Handler+0x658>
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f040 82e1 	bne.w	8005ad0 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	7c5b      	ldrb	r3, [r3, #17]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005518:	b2da      	uxtb	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	745a      	strb	r2, [r3, #17]
 8005526:	e2d3      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800552e:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005538:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800553a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800553e:	2b00      	cmp	r3, #0
 8005540:	d027      	beq.n	8005592 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f7ff fb09 	bl	8004b64 <PCD_GET_EP_RX_CNT>
 8005552:	4603      	mov	r3, r0
 8005554:	461a      	mov	r2, r3
 8005556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005558:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8005564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005566:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800556c:	b29b      	uxth	r3, r3
 800556e:	f00a fb07 	bl	800fb80 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4b58      	ldr	r3, [pc, #352]	@ (80056dc <PCD_EP_ISR_Handler+0x264>)
 800557a:	4013      	ands	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005588:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f00b fa9e 	bl	8010acc <HAL_PCD_SetupStageCallback>
 8005590:	e29e      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8005592:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8005596:	2b00      	cmp	r3, #0
 8005598:	f280 829a 	bge.w	8005ad0 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b4e      	ldr	r3, [pc, #312]	@ (80056dc <PCD_EP_ISR_Handler+0x264>)
 80055a4:	4013      	ands	r3, r2
 80055a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80055b2:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f7ff fad0 	bl	8004b64 <PCD_GET_EP_RX_CNT>
 80055c4:	4603      	mov	r3, r0
 80055c6:	461a      	mov	r2, r3
 80055c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80055cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d019      	beq.n	8005608 <PCD_EP_ISR_Handler+0x190>
 80055d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d015      	beq.n	8005608 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e2:	6959      	ldr	r1, [r3, #20]
 80055e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80055e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f00a fac7 	bl	800fb80 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80055f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f4:	695a      	ldr	r2, [r3, #20]
 80055f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	441a      	add	r2, r3
 80055fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005600:	2100      	movs	r1, #0
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f00b fa74 	bl	8010af0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005610:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005616:	2b00      	cmp	r3, #0
 8005618:	f040 825a 	bne.w	8005ad0 <PCD_EP_ISR_Handler+0x658>
 800561c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800561e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005622:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005626:	f000 8253 	beq.w	8005ad0 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800562a:	4b2d      	ldr	r3, [pc, #180]	@ (80056e0 <PCD_EP_ISR_Handler+0x268>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	4a2c      	ldr	r2, [pc, #176]	@ (80056e0 <PCD_EP_ISR_Handler+0x268>)
 8005630:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8005634:	6053      	str	r3, [r2, #4]
 8005636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <PCD_EP_ISR_Handler+0x1d4>
 800563e:	4b28      	ldr	r3, [pc, #160]	@ (80056e0 <PCD_EP_ISR_Handler+0x268>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4a27      	ldr	r2, [pc, #156]	@ (80056e0 <PCD_EP_ISR_Handler+0x268>)
 8005644:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005648:	6053      	str	r3, [r2, #4]
 800564a:	e02e      	b.n	80056aa <PCD_EP_ISR_Handler+0x232>
 800564c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	2b3e      	cmp	r3, #62	@ 0x3e
 8005652:	d814      	bhi.n	800567e <PCD_EP_ISR_Handler+0x206>
 8005654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <PCD_EP_ISR_Handler+0x1f6>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	3301      	adds	r3, #1
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	4b1c      	ldr	r3, [pc, #112]	@ (80056e0 <PCD_EP_ISR_Handler+0x268>)
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	069b      	lsls	r3, r3, #26
 8005676:	491a      	ldr	r1, [pc, #104]	@ (80056e0 <PCD_EP_ISR_Handler+0x268>)
 8005678:	4313      	orrs	r3, r2
 800567a:	604b      	str	r3, [r1, #4]
 800567c:	e015      	b.n	80056aa <PCD_EP_ISR_Handler+0x232>
 800567e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2b00      	cmp	r3, #0
 8005690:	d102      	bne.n	8005698 <PCD_EP_ISR_Handler+0x220>
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	3b01      	subs	r3, #1
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	4b11      	ldr	r3, [pc, #68]	@ (80056e0 <PCD_EP_ISR_Handler+0x268>)
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	069b      	lsls	r3, r3, #26
 80056a0:	4313      	orrs	r3, r2
 80056a2:	4a0f      	ldr	r2, [pc, #60]	@ (80056e0 <PCD_EP_ISR_Handler+0x268>)
 80056a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056a8:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <PCD_EP_ISR_Handler+0x26c>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	e1fb      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x658>
 80056d8:	07ff8f0f 	.word	0x07ff8f0f
 80056dc:	07ff0f8f 	.word	0x07ff0f8f
 80056e0:	40016400 	.word	0x40016400
 80056e4:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80056fa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f280 80bd 	bge.w	800587e <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4b9e      	ldr	r3, [pc, #632]	@ (8005990 <PCD_EP_ISR_Handler+0x518>)
 8005716:	4013      	ands	r3, r2
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800572e:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005730:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	4413      	add	r3, r2
 8005744:	3304      	adds	r3, #4
 8005746:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574a:	7b1b      	ldrb	r3, [r3, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d116      	bne.n	800577e <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	4619      	mov	r1, r3
 800575a:	4610      	mov	r0, r2
 800575c:	f7ff fa02 	bl	8004b64 <PCD_GET_EP_RX_CNT>
 8005760:	4603      	mov	r3, r0
 8005762:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8005764:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	d067      	beq.n	800583a <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005770:	6959      	ldr	r1, [r3, #20]
 8005772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005774:	88da      	ldrh	r2, [r3, #6]
 8005776:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005778:	f00a fa02 	bl	800fb80 <USB_ReadPMA>
 800577c:	e05d      	b.n	800583a <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800577e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005780:	78db      	ldrb	r3, [r3, #3]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d108      	bne.n	8005798 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005786:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005788:	461a      	mov	r2, r3
 800578a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f9ad 	bl	8005aec <HAL_PCD_EP_DB_Receive>
 8005792:	4603      	mov	r3, r0
 8005794:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005796:	e050      	b.n	800583a <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	4b7a      	ldr	r3, [pc, #488]	@ (8005994 <PCD_EP_ISR_Handler+0x51c>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	441a      	add	r2, r3
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057c6:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d016      	beq.n	800580e <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	4619      	mov	r1, r3
 80057ea:	4610      	mov	r0, r2
 80057ec:	f7ff f9db 	bl	8004ba6 <PCD_GET_EP_DBUF0_CNT>
 80057f0:	4603      	mov	r3, r0
 80057f2:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80057f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01f      	beq.n	800583a <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005800:	6959      	ldr	r1, [r3, #20]
 8005802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005804:	891a      	ldrh	r2, [r3, #8]
 8005806:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005808:	f00a f9ba 	bl	800fb80 <USB_ReadPMA>
 800580c:	e015      	b.n	800583a <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	4619      	mov	r1, r3
 8005818:	4610      	mov	r0, r2
 800581a:	f7ff f9e5 	bl	8004be8 <PCD_GET_EP_DBUF1_CNT>
 800581e:	4603      	mov	r3, r0
 8005820:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8005822:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582e:	6959      	ldr	r1, [r3, #20]
 8005830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005832:	895a      	ldrh	r2, [r3, #10]
 8005834:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005836:	f00a f9a3 	bl	800fb80 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800583a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583c:	69da      	ldr	r2, [r3, #28]
 800583e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005840:	441a      	add	r2, r3
 8005842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005844:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005848:	695a      	ldr	r2, [r3, #20]
 800584a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800584c:	441a      	add	r2, r3
 800584e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005850:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d004      	beq.n	8005864 <PCD_EP_ISR_Handler+0x3ec>
 800585a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800585c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	429a      	cmp	r2, r3
 8005862:	d206      	bcs.n	8005872 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f00b f940 	bl	8010af0 <HAL_PCD_DataOutStageCallback>
 8005870:	e005      	b.n	800587e <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005878:	4618      	mov	r0, r3
 800587a:	f008 ff99 	bl	800e7b0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800587e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8123 	beq.w	8005ad0 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 800588a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	3310      	adds	r3, #16
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	4413      	add	r3, r2
 800589c:	3304      	adds	r3, #4
 800589e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4b39      	ldr	r3, [pc, #228]	@ (8005998 <PCD_EP_ISR_Handler+0x520>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058ca:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80058cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ce:	78db      	ldrb	r3, [r3, #3]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	f040 80b8 	bne.w	8005a46 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 80058d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d8:	2200      	movs	r2, #0
 80058da:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80058dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058de:	7b1b      	ldrb	r3, [r3, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80a9 	beq.w	8005a38 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80058e6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80058e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d055      	beq.n	800599c <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d124      	bne.n	8005942 <PCD_EP_ISR_Handler+0x4ca>
 80058f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005902:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005912:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005916:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005926:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005936:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800593a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	e07a      	b.n	8005a38 <PCD_EP_ISR_Handler+0x5c0>
 8005942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d176      	bne.n	8005a38 <PCD_EP_ISR_Handler+0x5c0>
 800594a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005954:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005964:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005968:	b292      	uxth	r2, r2
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005976:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800597a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005984:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	e054      	b.n	8005a38 <PCD_EP_ISR_Handler+0x5c0>
 800598e:	bf00      	nop
 8005990:	07ff0f8f 	.word	0x07ff0f8f
 8005994:	07ff8f8f 	.word	0x07ff8f8f
 8005998:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800599c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d124      	bne.n	80059ee <PCD_EP_ISR_Handler+0x576>
 80059a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059c2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80059c6:	605a      	str	r2, [r3, #4]
 80059c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80059ea:	605a      	str	r2, [r3, #4]
 80059ec:	e024      	b.n	8005a38 <PCD_EP_ISR_Handler+0x5c0>
 80059ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d120      	bne.n	8005a38 <PCD_EP_ISR_Handler+0x5c0>
 80059f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a14:	b292      	uxth	r2, r2
 8005a16:	605a      	str	r2, [r3, #4]
 8005a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005a22:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a34:	6852      	ldr	r2, [r2, #4]
 8005a36:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f00b f871 	bl	8010b26 <HAL_PCD_DataInStageCallback>
 8005a44:	e044      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005a46:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d139      	bne.n	8005ac4 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	0c1b      	lsrs	r3, r3, #16
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a68:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d906      	bls.n	8005a82 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8005a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7e:	619a      	str	r2, [r3, #24]
 8005a80:	e002      	b.n	8005a88 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8005a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a84:	2200      	movs	r2, #0
 8005a86:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d106      	bne.n	8005a9e <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f00b f845 	bl	8010b26 <HAL_PCD_DataInStageCallback>
 8005a9c:	e018      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa0:	695a      	ldr	r2, [r3, #20]
 8005aa2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005aa4:	441a      	add	r2, r3
 8005aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aac:	69da      	ldr	r2, [r3, #28]
 8005aae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ab0:	441a      	add	r2, r3
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005abc:	4618      	mov	r0, r3
 8005abe:	f008 fe77 	bl	800e7b0 <USB_EPStartXfer>
 8005ac2:	e005      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005ac4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8e8 	bl	8005ca0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f47f acd1 	bne.w	8005482 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3738      	adds	r7, #56	@ 0x38
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop

08005aec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	@ 0x28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d062      	beq.n	8005bca <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7ff f849 	bl	8004ba6 <PCD_GET_EP_DBUF0_CNT>
 8005b14:	4603      	mov	r3, r0
 8005b16:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	699a      	ldr	r2, [r3, #24]
 8005b1c:	8bfb      	ldrh	r3, [r7, #30]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d306      	bcc.n	8005b30 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	8bfb      	ldrh	r3, [r7, #30]
 8005b28:	1ad2      	subs	r2, r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	619a      	str	r2, [r3, #24]
 8005b2e:	e002      	b.n	8005b36 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2200      	movs	r2, #0
 8005b34:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d11b      	bne.n	8005b76 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b52      	ldr	r3, [pc, #328]	@ (8005c98 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b5a:	61bb      	str	r3, [r7, #24]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	441a      	add	r2, r3
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b74:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d017      	beq.n	8005bb0 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	4b42      	ldr	r3, [pc, #264]	@ (8005c9c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	441a      	add	r2, r3
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005baa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bae:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8005bb0:	8bfb      	ldrh	r3, [r7, #30]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d06b      	beq.n	8005c8e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6959      	ldr	r1, [r3, #20]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	891a      	ldrh	r2, [r3, #8]
 8005bc2:	8bfb      	ldrh	r3, [r7, #30]
 8005bc4:	f009 ffdc 	bl	800fb80 <USB_ReadPMA>
 8005bc8:	e061      	b.n	8005c8e <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f7ff f807 	bl	8004be8 <PCD_GET_EP_DBUF1_CNT>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	8bfb      	ldrh	r3, [r7, #30]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d306      	bcc.n	8005bf6 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	8bfb      	ldrh	r3, [r7, #30]
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	619a      	str	r2, [r3, #24]
 8005bf4:	e002      	b.n	8005bfc <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d11b      	bne.n	8005c3c <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	4b20      	ldr	r3, [pc, #128]	@ (8005c98 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c3a:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d117      	bne.n	8005c76 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	4b11      	ldr	r3, [pc, #68]	@ (8005c9c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8005c58:	4013      	ands	r3, r2
 8005c5a:	623b      	str	r3, [r7, #32]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	441a      	add	r2, r3
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c74:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8005c76:	8bfb      	ldrh	r3, [r7, #30]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	6959      	ldr	r1, [r3, #20]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	895a      	ldrh	r2, [r3, #10]
 8005c88:	8bfb      	ldrh	r3, [r7, #30]
 8005c8a:	f009 ff79 	bl	800fb80 <USB_ReadPMA>
    }
  }

  return count;
 8005c8e:	8bfb      	ldrh	r3, [r7, #30]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3728      	adds	r7, #40	@ 0x28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	07ffbf8f 	.word	0x07ffbf8f
 8005c9c:	07ff8f8f 	.word	0x07ff8f8f

08005ca0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08e      	sub	sp, #56	@ 0x38
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 81d5 	beq.w	8006064 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f7fe ff6e 	bl	8004ba6 <PCD_GET_EP_DBUF0_CNT>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	8bfb      	ldrh	r3, [r7, #30]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d906      	bls.n	8005ce6 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	8bfb      	ldrh	r3, [r7, #30]
 8005cde:	1ad2      	subs	r2, r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	619a      	str	r2, [r3, #24]
 8005ce4:	e002      	b.n	8005cec <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f040 80c1 	bne.w	8005e78 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d124      	bne.n	8005d48 <HAL_PCD_EP_DB_Transmit+0xa8>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d1c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d40:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e024      	b.n	8005d92 <HAL_PCD_EP_DB_Transmit+0xf2>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	785b      	ldrb	r3, [r3, #1]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d120      	bne.n	8005d92 <HAL_PCD_EP_DB_Transmit+0xf2>
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d6e:	b292      	uxth	r2, r2
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005d7c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d124      	bne.n	8005de4 <HAL_PCD_EP_DB_Transmit+0x144>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005da4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005db4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005db8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ddc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005de0:	605a      	str	r2, [r3, #4]
 8005de2:	e024      	b.n	8005e2e <HAL_PCD_EP_DB_Transmit+0x18e>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d120      	bne.n	8005e2e <HAL_PCD_EP_DB_Transmit+0x18e>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005df6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005e0a:	b292      	uxth	r2, r2
 8005e0c:	605a      	str	r2, [r3, #4]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005e18:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005e2a:	6852      	ldr	r2, [r2, #4]
 8005e2c:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	4619      	mov	r1, r3
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f00a fe76 	bl	8010b26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e3a:	88fb      	ldrh	r3, [r7, #6]
 8005e3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 82e5 	beq.w	8006410 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	4b8e      	ldr	r3, [pc, #568]	@ (8006090 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e2cb      	b.n	8006410 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e78:	88fb      	ldrh	r3, [r7, #6]
 8005e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d017      	beq.n	8005eb2 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b7f      	ldr	r3, [pc, #508]	@ (8006090 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	441a      	add	r2, r3
 8005ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eb0:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	f040 82a9 	bne.w	8006410 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	695a      	ldr	r2, [r3, #20]
 8005ec2:	8bfb      	ldrh	r3, [r7, #30]
 8005ec4:	441a      	add	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	69da      	ldr	r2, [r3, #28]
 8005ece:	8bfb      	ldrh	r3, [r7, #30]
 8005ed0:	441a      	add	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	6a1a      	ldr	r2, [r3, #32]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d309      	bcc.n	8005ef6 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	6a1a      	ldr	r2, [r3, #32]
 8005eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eee:	1ad2      	subs	r2, r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	621a      	str	r2, [r3, #32]
 8005ef4:	e014      	b.n	8005f20 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8005efe:	8bfb      	ldrh	r3, [r7, #30]
 8005f00:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005f0a:	e009      	b.n	8005f20 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	785b      	ldrb	r3, [r3, #1]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d16a      	bne.n	8005ffe <HAL_PCD_EP_DB_Transmit+0x35e>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f46:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d112      	bne.n	8005f78 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f70:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	e06a      	b.n	800604e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f7c:	d81e      	bhi.n	8005fbc <HAL_PCD_EP_DB_Transmit+0x31c>
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8005f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f90:	3301      	adds	r3, #1
 8005f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa6:	069a      	lsls	r2, r3, #26
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	e048      	b.n	800604e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <HAL_PCD_EP_DB_Transmit+0x332>
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe4:	069b      	lsls	r3, r3, #26
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ff2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ff6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	e027      	b.n	800604e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d123      	bne.n	800604e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006010:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006020:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006024:	b292      	uxth	r2, r2
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006032:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006036:	6819      	ldr	r1, [r3, #0]
 8006038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603a:	041a      	lsls	r2, r3, #16
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006046:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800604a:	430a      	orrs	r2, r1
 800604c:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	6959      	ldr	r1, [r3, #20]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	891a      	ldrh	r2, [r3, #8]
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	b29b      	uxth	r3, r3
 800605e:	f009 fd2e 	bl	800fabe <USB_WritePMA>
 8006062:	e1d5      	b.n	8006410 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	4619      	mov	r1, r3
 800606e:	4610      	mov	r0, r2
 8006070:	f7fe fdba 	bl	8004be8 <PCD_GET_EP_DBUF1_CNT>
 8006074:	4603      	mov	r3, r0
 8006076:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	8bfb      	ldrh	r3, [r7, #30]
 800607e:	429a      	cmp	r2, r3
 8006080:	d308      	bcc.n	8006094 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	8bfb      	ldrh	r3, [r7, #30]
 8006088:	1ad2      	subs	r2, r2, r3
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	619a      	str	r2, [r3, #24]
 800608e:	e004      	b.n	800609a <HAL_PCD_EP_DB_Transmit+0x3fa>
 8006090:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2200      	movs	r2, #0
 8006098:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 80c1 	bne.w	8006226 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d124      	bne.n	80060f6 <HAL_PCD_EP_DB_Transmit+0x456>
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060ca:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060ee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	e024      	b.n	8006140 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	785b      	ldrb	r3, [r3, #1]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d120      	bne.n	8006140 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006108:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006118:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800611c:	b292      	uxth	r2, r2
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800612a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006138:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800613c:	6812      	ldr	r2, [r2, #0]
 800613e:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	785b      	ldrb	r3, [r3, #1]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d124      	bne.n	8006192 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006152:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006162:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006166:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800616a:	605a      	str	r2, [r3, #4]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006176:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006186:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800618a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800618e:	605a      	str	r2, [r3, #4]
 8006190:	e024      	b.n	80061dc <HAL_PCD_EP_DB_Transmit+0x53c>
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d120      	bne.n	80061dc <HAL_PCD_EP_DB_Transmit+0x53c>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061b8:	b292      	uxth	r2, r2
 80061ba:	605a      	str	r2, [r3, #4]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80061c6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061d8:	6852      	ldr	r2, [r2, #4]
 80061da:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	4619      	mov	r1, r3
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f00a fc9f 	bl	8010b26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f040 810e 	bne.w	8006410 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	4b95      	ldr	r3, [pc, #596]	@ (800645c <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8006206:	4013      	ands	r3, r2
 8006208:	623b      	str	r3, [r7, #32]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	441a      	add	r2, r3
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800621e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	e0f4      	b.n	8006410 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006226:	88fb      	ldrh	r3, [r7, #6]
 8006228:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d117      	bne.n	8006260 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	4b86      	ldr	r3, [pc, #536]	@ (800645c <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8006242:	4013      	ands	r3, r2
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	441a      	add	r2, r3
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800625a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800625e:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006266:	2b01      	cmp	r3, #1
 8006268:	f040 80d2 	bne.w	8006410 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	695a      	ldr	r2, [r3, #20]
 8006270:	8bfb      	ldrh	r3, [r7, #30]
 8006272:	441a      	add	r2, r3
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	8bfb      	ldrh	r3, [r7, #30]
 800627e:	441a      	add	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6a1a      	ldr	r2, [r3, #32]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	429a      	cmp	r2, r3
 800628e:	d309      	bcc.n	80062a4 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6a1a      	ldr	r2, [r3, #32]
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	1ad2      	subs	r2, r2, r3
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	621a      	str	r2, [r3, #32]
 80062a2:	e014      	b.n	80062ce <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d106      	bne.n	80062ba <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 80062ac:	8bfb      	ldrh	r3, [r7, #30]
 80062ae:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80062b8:	e009      	b.n	80062ce <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2200      	movs	r2, #0
 80062c4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	785b      	ldrb	r3, [r3, #1]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d16a      	bne.n	80063ac <HAL_PCD_EP_DB_Transmit+0x70c>
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062f4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80062f8:	605a      	str	r2, [r3, #4]
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d112      	bne.n	8006326 <HAL_PCD_EP_DB_Transmit+0x686>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800630a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800631a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800631e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006322:	605a      	str	r2, [r3, #4]
 8006324:	e06a      	b.n	80063fc <HAL_PCD_EP_DB_Transmit+0x75c>
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	2b3e      	cmp	r3, #62	@ 0x3e
 800632a:	d81e      	bhi.n	800636a <HAL_PCD_EP_DB_Transmit+0x6ca>
 800632c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632e:	085b      	lsrs	r3, r3, #1
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_PCD_EP_DB_Transmit+0x6a2>
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	3301      	adds	r3, #1
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800634c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006350:	6859      	ldr	r1, [r3, #4]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	069a      	lsls	r2, r3, #26
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006360:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006364:	430a      	orrs	r2, r1
 8006366:	605a      	str	r2, [r3, #4]
 8006368:	e048      	b.n	80063fc <HAL_PCD_EP_DB_Transmit+0x75c>
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <HAL_PCD_EP_DB_Transmit+0x6e0>
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	3b01      	subs	r3, #1
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800638a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	069b      	lsls	r3, r3, #26
 8006394:	431a      	orrs	r2, r3
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063a4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80063a8:	605a      	str	r2, [r3, #4]
 80063aa:	e027      	b.n	80063fc <HAL_PCD_EP_DB_Transmit+0x75c>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d123      	bne.n	80063fc <HAL_PCD_EP_DB_Transmit+0x75c>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063d2:	b292      	uxth	r2, r2
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063e4:	6859      	ldr	r1, [r3, #4]
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e8:	041a      	lsls	r2, r3, #16
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6818      	ldr	r0, [r3, #0]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	6959      	ldr	r1, [r3, #20]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	895a      	ldrh	r2, [r3, #10]
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	b29b      	uxth	r3, r3
 800640c:	f009 fb57 	bl	800fabe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	4b0f      	ldr	r3, [pc, #60]	@ (8006460 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8006422:	4013      	ands	r3, r2
 8006424:	633b      	str	r3, [r7, #48]	@ 0x30
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	f083 0310 	eor.w	r3, r3, #16
 800642c:	633b      	str	r3, [r7, #48]	@ 0x30
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	f083 0320 	eor.w	r3, r3, #32
 8006434:	633b      	str	r3, [r7, #48]	@ 0x30
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	441a      	add	r2, r3
 8006444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800644a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3738      	adds	r7, #56	@ 0x38
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	07ff8f8f 	.word	0x07ff8f8f
 8006460:	07ff8fbf 	.word	0x07ff8fbf

08006464 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	607b      	str	r3, [r7, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	817b      	strh	r3, [r7, #10]
 8006472:	4613      	mov	r3, r2
 8006474:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006476:	897b      	ldrh	r3, [r7, #10]
 8006478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006482:	897b      	ldrh	r3, [r7, #10]
 8006484:	f003 0207 	and.w	r2, r3, #7
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	3310      	adds	r3, #16
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4413      	add	r3, r2
 8006496:	3304      	adds	r3, #4
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	e00a      	b.n	80064b2 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800649c:	897a      	ldrh	r2, [r7, #10]
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	3304      	adds	r3, #4
 80064b0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80064b2:	893b      	ldrh	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d107      	bne.n	80064c8 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2200      	movs	r2, #0
 80064bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	80da      	strh	r2, [r3, #6]
 80064c6:	e00b      	b.n	80064e0 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2201      	movs	r2, #1
 80064cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	0c1b      	lsrs	r3, r3, #16
 80064da:	b29a      	uxth	r2, r3
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006510:	f043 0201 	orr.w	r2, r3, #1
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651c:	f043 0202 	orr.w	r2, r3, #2
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	460b      	mov	r3, r1
 800653c:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
	...

0800654c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8006550:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006554:	4a04      	ldr	r2, [pc, #16]	@ (8006568 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006556:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800655a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800655c:	bf00      	nop
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	44020800 	.word	0x44020800

0800656c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d102      	bne.n	8006580 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f000 bc28 	b.w	8006dd0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006580:	4b94      	ldr	r3, [pc, #592]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	f003 0318 	and.w	r3, r3, #24
 8006588:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800658a:	4b92      	ldr	r3, [pc, #584]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b00      	cmp	r3, #0
 800659e:	d05b      	beq.n	8006658 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	2b08      	cmp	r3, #8
 80065a4:	d005      	beq.n	80065b2 <HAL_RCC_OscConfig+0x46>
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	2b18      	cmp	r3, #24
 80065aa:	d114      	bne.n	80065d6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d111      	bne.n	80065d6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f000 bc08 	b.w	8006dd0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80065c0:	4b84      	ldr	r3, [pc, #528]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	041b      	lsls	r3, r3, #16
 80065ce:	4981      	ldr	r1, [pc, #516]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80065d4:	e040      	b.n	8006658 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d023      	beq.n	8006626 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80065de:	4b7d      	ldr	r3, [pc, #500]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a7c      	ldr	r2, [pc, #496]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80065e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ea:	f7fc fdf3 	bl	80031d4 <HAL_GetTick>
 80065ee:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80065f2:	f7fc fdef 	bl	80031d4 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e3e5      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006604:	4b73      	ldr	r3, [pc, #460]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006610:	4b70      	ldr	r3, [pc, #448]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	496d      	ldr	r1, [pc, #436]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006620:	4313      	orrs	r3, r2
 8006622:	618b      	str	r3, [r1, #24]
 8006624:	e018      	b.n	8006658 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006626:	4b6b      	ldr	r3, [pc, #428]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a6a      	ldr	r2, [pc, #424]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 800662c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006632:	f7fc fdcf 	bl	80031d4 <HAL_GetTick>
 8006636:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006638:	e008      	b.n	800664c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800663a:	f7fc fdcb 	bl	80031d4 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e3c1      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800664c:	4b61      	ldr	r3, [pc, #388]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1f0      	bne.n	800663a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 80a0 	beq.w	80067a6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	2b10      	cmp	r3, #16
 800666a:	d005      	beq.n	8006678 <HAL_RCC_OscConfig+0x10c>
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	2b18      	cmp	r3, #24
 8006670:	d109      	bne.n	8006686 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	2b03      	cmp	r3, #3
 8006676:	d106      	bne.n	8006686 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	f040 8092 	bne.w	80067a6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e3a4      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800668e:	d106      	bne.n	800669e <HAL_RCC_OscConfig+0x132>
 8006690:	4b50      	ldr	r3, [pc, #320]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a4f      	ldr	r2, [pc, #316]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	e058      	b.n	8006750 <HAL_RCC_OscConfig+0x1e4>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d112      	bne.n	80066cc <HAL_RCC_OscConfig+0x160>
 80066a6:	4b4b      	ldr	r3, [pc, #300]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a4a      	ldr	r2, [pc, #296]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80066ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	4b48      	ldr	r3, [pc, #288]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a47      	ldr	r2, [pc, #284]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80066b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	4b45      	ldr	r3, [pc, #276]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a44      	ldr	r2, [pc, #272]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80066c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e041      	b.n	8006750 <HAL_RCC_OscConfig+0x1e4>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066d4:	d112      	bne.n	80066fc <HAL_RCC_OscConfig+0x190>
 80066d6:	4b3f      	ldr	r3, [pc, #252]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a3e      	ldr	r2, [pc, #248]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80066dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	4b3c      	ldr	r3, [pc, #240]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a3b      	ldr	r2, [pc, #236]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80066e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	4b39      	ldr	r3, [pc, #228]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a38      	ldr	r2, [pc, #224]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 80066f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	e029      	b.n	8006750 <HAL_RCC_OscConfig+0x1e4>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006704:	d112      	bne.n	800672c <HAL_RCC_OscConfig+0x1c0>
 8006706:	4b33      	ldr	r3, [pc, #204]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a32      	ldr	r2, [pc, #200]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 800670c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	4b30      	ldr	r3, [pc, #192]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a2f      	ldr	r2, [pc, #188]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006718:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	4b2d      	ldr	r3, [pc, #180]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a2c      	ldr	r2, [pc, #176]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	e011      	b.n	8006750 <HAL_RCC_OscConfig+0x1e4>
 800672c:	4b29      	ldr	r3, [pc, #164]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a28      	ldr	r2, [pc, #160]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	4b26      	ldr	r3, [pc, #152]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a25      	ldr	r2, [pc, #148]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 800673e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	4b23      	ldr	r3, [pc, #140]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a22      	ldr	r2, [pc, #136]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 800674a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800674e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d013      	beq.n	8006780 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7fc fd3c 	bl	80031d4 <HAL_GetTick>
 800675c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006760:	f7fc fd38 	bl	80031d4 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b64      	cmp	r3, #100	@ 0x64
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e32e      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006772:	4b18      	ldr	r3, [pc, #96]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0f0      	beq.n	8006760 <HAL_RCC_OscConfig+0x1f4>
 800677e:	e012      	b.n	80067a6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006780:	f7fc fd28 	bl	80031d4 <HAL_GetTick>
 8006784:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006788:	f7fc fd24 	bl	80031d4 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b64      	cmp	r3, #100	@ 0x64
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e31a      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800679a:	4b0e      	ldr	r3, [pc, #56]	@ (80067d4 <HAL_RCC_OscConfig+0x268>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1f0      	bne.n	8006788 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 809a 	beq.w	80068e8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <HAL_RCC_OscConfig+0x25a>
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	2b18      	cmp	r3, #24
 80067be:	d149      	bne.n	8006854 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d146      	bne.n	8006854 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d104      	bne.n	80067d8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e2fe      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
 80067d2:	bf00      	nop
 80067d4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d11c      	bne.n	8006818 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80067de:	4b9a      	ldr	r3, [pc, #616]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0218 	and.w	r2, r3, #24
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d014      	beq.n	8006818 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80067ee:	4b96      	ldr	r3, [pc, #600]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f023 0218 	bic.w	r2, r3, #24
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	4993      	ldr	r1, [pc, #588]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8006800:	f000 fdd0 	bl	80073a4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006804:	4b91      	ldr	r3, [pc, #580]	@ (8006a4c <HAL_RCC_OscConfig+0x4e0>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f7fc fc59 	bl	80030c0 <HAL_InitTick>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d001      	beq.n	8006818 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e2db      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fc fcdc 	bl	80031d4 <HAL_GetTick>
 800681c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006820:	f7fc fcd8 	bl	80031d4 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e2ce      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006832:	4b85      	ldr	r3, [pc, #532]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f0      	beq.n	8006820 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800683e:	4b82      	ldr	r3, [pc, #520]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	041b      	lsls	r3, r3, #16
 800684c:	497e      	ldr	r1, [pc, #504]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 800684e:	4313      	orrs	r3, r2
 8006850:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006852:	e049      	b.n	80068e8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d02c      	beq.n	80068b6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800685c:	4b7a      	ldr	r3, [pc, #488]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f023 0218 	bic.w	r2, r3, #24
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	4977      	ldr	r1, [pc, #476]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800686e:	4b76      	ldr	r3, [pc, #472]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a75      	ldr	r2, [pc, #468]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006874:	f043 0301 	orr.w	r3, r3, #1
 8006878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687a:	f7fc fcab 	bl	80031d4 <HAL_GetTick>
 800687e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006882:	f7fc fca7 	bl	80031d4 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e29d      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006894:	4b6c      	ldr	r3, [pc, #432]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0f0      	beq.n	8006882 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80068a0:	4b69      	ldr	r3, [pc, #420]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	041b      	lsls	r3, r3, #16
 80068ae:	4966      	ldr	r1, [pc, #408]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068b0:	4313      	orrs	r3, r2
 80068b2:	610b      	str	r3, [r1, #16]
 80068b4:	e018      	b.n	80068e8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068b6:	4b64      	ldr	r3, [pc, #400]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a63      	ldr	r2, [pc, #396]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068bc:	f023 0301 	bic.w	r3, r3, #1
 80068c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c2:	f7fc fc87 	bl	80031d4 <HAL_GetTick>
 80068c6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068c8:	e008      	b.n	80068dc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80068ca:	f7fc fc83 	bl	80031d4 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e279      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068dc:	4b5a      	ldr	r3, [pc, #360]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1f0      	bne.n	80068ca <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d03c      	beq.n	800696e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01c      	beq.n	8006936 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068fc:	4b52      	ldr	r3, [pc, #328]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80068fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006902:	4a51      	ldr	r2, [pc, #324]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006904:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006908:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800690c:	f7fc fc62 	bl	80031d4 <HAL_GetTick>
 8006910:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006912:	e008      	b.n	8006926 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006914:	f7fc fc5e 	bl	80031d4 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d901      	bls.n	8006926 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e254      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006926:	4b48      	ldr	r3, [pc, #288]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800692c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0ef      	beq.n	8006914 <HAL_RCC_OscConfig+0x3a8>
 8006934:	e01b      	b.n	800696e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006936:	4b44      	ldr	r3, [pc, #272]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800693c:	4a42      	ldr	r2, [pc, #264]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 800693e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006942:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006946:	f7fc fc45 	bl	80031d4 <HAL_GetTick>
 800694a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800694e:	f7fc fc41 	bl	80031d4 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e237      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006960:	4b39      	ldr	r3, [pc, #228]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006966:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1ef      	bne.n	800694e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80d2 	beq.w	8006b20 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800697c:	4b34      	ldr	r3, [pc, #208]	@ (8006a50 <HAL_RCC_OscConfig+0x4e4>)
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d118      	bne.n	80069ba <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006988:	4b31      	ldr	r3, [pc, #196]	@ (8006a50 <HAL_RCC_OscConfig+0x4e4>)
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	4a30      	ldr	r2, [pc, #192]	@ (8006a50 <HAL_RCC_OscConfig+0x4e4>)
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006994:	f7fc fc1e 	bl	80031d4 <HAL_GetTick>
 8006998:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800699c:	f7fc fc1a 	bl	80031d4 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e210      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80069ae:	4b28      	ldr	r3, [pc, #160]	@ (8006a50 <HAL_RCC_OscConfig+0x4e4>)
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d108      	bne.n	80069d4 <HAL_RCC_OscConfig+0x468>
 80069c2:	4b21      	ldr	r3, [pc, #132]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80069c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80069ca:	f043 0301 	orr.w	r3, r3, #1
 80069ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069d2:	e074      	b.n	8006abe <HAL_RCC_OscConfig+0x552>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d118      	bne.n	8006a0e <HAL_RCC_OscConfig+0x4a2>
 80069dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80069de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069e2:	4a19      	ldr	r2, [pc, #100]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80069e4:	f023 0301 	bic.w	r3, r3, #1
 80069e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069ec:	4b16      	ldr	r3, [pc, #88]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80069ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069f2:	4a15      	ldr	r2, [pc, #84]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80069f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80069fc:	4b12      	ldr	r3, [pc, #72]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 80069fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a02:	4a11      	ldr	r2, [pc, #68]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006a04:	f023 0304 	bic.w	r3, r3, #4
 8006a08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a0c:	e057      	b.n	8006abe <HAL_RCC_OscConfig+0x552>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b05      	cmp	r3, #5
 8006a14:	d11e      	bne.n	8006a54 <HAL_RCC_OscConfig+0x4e8>
 8006a16:	4b0c      	ldr	r3, [pc, #48]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006a1e:	f043 0304 	orr.w	r3, r3, #4
 8006a22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a26:	4b08      	ldr	r3, [pc, #32]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a2c:	4a06      	ldr	r2, [pc, #24]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a36:	4b04      	ldr	r3, [pc, #16]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a3c:	4a02      	ldr	r2, [pc, #8]	@ (8006a48 <HAL_RCC_OscConfig+0x4dc>)
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a46:	e03a      	b.n	8006abe <HAL_RCC_OscConfig+0x552>
 8006a48:	44020c00 	.word	0x44020c00
 8006a4c:	20000024 	.word	0x20000024
 8006a50:	44020800 	.word	0x44020800
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b85      	cmp	r3, #133	@ 0x85
 8006a5a:	d118      	bne.n	8006a8e <HAL_RCC_OscConfig+0x522>
 8006a5c:	4ba2      	ldr	r3, [pc, #648]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a62:	4aa1      	ldr	r2, [pc, #644]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006a64:	f043 0304 	orr.w	r3, r3, #4
 8006a68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a6c:	4b9e      	ldr	r3, [pc, #632]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a72:	4a9d      	ldr	r2, [pc, #628]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a7c:	4b9a      	ldr	r3, [pc, #616]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a82:	4a99      	ldr	r2, [pc, #612]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a8c:	e017      	b.n	8006abe <HAL_RCC_OscConfig+0x552>
 8006a8e:	4b96      	ldr	r3, [pc, #600]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a94:	4a94      	ldr	r2, [pc, #592]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006a96:	f023 0301 	bic.w	r3, r3, #1
 8006a9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a9e:	4b92      	ldr	r3, [pc, #584]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aa4:	4a90      	ldr	r2, [pc, #576]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006aa6:	f023 0304 	bic.w	r3, r3, #4
 8006aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006aae:	4b8e      	ldr	r3, [pc, #568]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ab4:	4a8c      	ldr	r2, [pc, #560]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d016      	beq.n	8006af4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac6:	f7fc fb85 	bl	80031d4 <HAL_GetTick>
 8006aca:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006acc:	e00a      	b.n	8006ae4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ace:	f7fc fb81 	bl	80031d4 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e175      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ae4:	4b80      	ldr	r3, [pc, #512]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0ed      	beq.n	8006ace <HAL_RCC_OscConfig+0x562>
 8006af2:	e015      	b.n	8006b20 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af4:	f7fc fb6e 	bl	80031d4 <HAL_GetTick>
 8006af8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006afa:	e00a      	b.n	8006b12 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006afc:	f7fc fb6a 	bl	80031d4 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e15e      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b12:	4b75      	ldr	r3, [pc, #468]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1ed      	bne.n	8006afc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0320 	and.w	r3, r3, #32
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d036      	beq.n	8006b9a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d019      	beq.n	8006b68 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b34:	4b6c      	ldr	r3, [pc, #432]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a6b      	ldr	r2, [pc, #428]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006b3a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006b3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b40:	f7fc fb48 	bl	80031d4 <HAL_GetTick>
 8006b44:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006b48:	f7fc fb44 	bl	80031d4 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e13a      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006b5a:	4b63      	ldr	r3, [pc, #396]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0f0      	beq.n	8006b48 <HAL_RCC_OscConfig+0x5dc>
 8006b66:	e018      	b.n	8006b9a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b68:	4b5f      	ldr	r3, [pc, #380]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006b6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b74:	f7fc fb2e 	bl	80031d4 <HAL_GetTick>
 8006b78:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006b7a:	e008      	b.n	8006b8e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006b7c:	f7fc fb2a 	bl	80031d4 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e120      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006b8e:	4b56      	ldr	r3, [pc, #344]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f0      	bne.n	8006b7c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 8115 	beq.w	8006dce <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b18      	cmp	r3, #24
 8006ba8:	f000 80af 	beq.w	8006d0a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	f040 8086 	bne.w	8006cc2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a4b      	ldr	r2, [pc, #300]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006bbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc2:	f7fc fb07 	bl	80031d4 <HAL_GetTick>
 8006bc6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006bca:	f7fc fb03 	bl	80031d4 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e0f9      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006bdc:	4b42      	ldr	r3, [pc, #264]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f0      	bne.n	8006bca <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006be8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006bf0:	f023 0303 	bic.w	r3, r3, #3
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006bfc:	0212      	lsls	r2, r2, #8
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	4939      	ldr	r1, [pc, #228]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c14:	3b01      	subs	r3, #1
 8006c16:	025b      	lsls	r3, r3, #9
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c20:	3b01      	subs	r3, #1
 8006c22:	041b      	lsls	r3, r3, #16
 8006c24:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	061b      	lsls	r3, r3, #24
 8006c32:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c36:	492c      	ldr	r1, [pc, #176]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c40:	4a29      	ldr	r2, [pc, #164]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c42:	f023 0310 	bic.w	r3, r3, #16
 8006c46:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c4c:	4a26      	ldr	r2, [pc, #152]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006c52:	4b25      	ldr	r3, [pc, #148]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c56:	4a24      	ldr	r2, [pc, #144]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c58:	f043 0310 	orr.w	r3, r3, #16
 8006c5c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8006c5e:	4b22      	ldr	r3, [pc, #136]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c62:	f023 020c 	bic.w	r2, r3, #12
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6a:	491f      	ldr	r1, [pc, #124]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8006c70:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c74:	f023 0220 	bic.w	r2, r3, #32
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c7c:	491a      	ldr	r1, [pc, #104]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c82:	4b19      	ldr	r3, [pc, #100]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c86:	4a18      	ldr	r2, [pc, #96]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c8c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8006c8e:	4b16      	ldr	r3, [pc, #88]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a15      	ldr	r2, [pc, #84]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006c94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c9a:	f7fc fa9b 	bl	80031d4 <HAL_GetTick>
 8006c9e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006ca0:	e008      	b.n	8006cb4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006ca2:	f7fc fa97 	bl	80031d4 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e08d      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0f0      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x736>
 8006cc0:	e085      	b.n	8006dce <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006cc2:	4b09      	ldr	r3, [pc, #36]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a08      	ldr	r2, [pc, #32]	@ (8006ce8 <HAL_RCC_OscConfig+0x77c>)
 8006cc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cce:	f7fc fa81 	bl	80031d4 <HAL_GetTick>
 8006cd2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006cd4:	e00a      	b.n	8006cec <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006cd6:	f7fc fa7d 	bl	80031d4 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d903      	bls.n	8006cec <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e073      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
 8006ce8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006cec:	4b3a      	ldr	r3, [pc, #232]	@ (8006dd8 <HAL_RCC_OscConfig+0x86c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1ee      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006cf8:	4b37      	ldr	r3, [pc, #220]	@ (8006dd8 <HAL_RCC_OscConfig+0x86c>)
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfc:	4a36      	ldr	r2, [pc, #216]	@ (8006dd8 <HAL_RCC_OscConfig+0x86c>)
 8006cfe:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006d02:	f023 0303 	bic.w	r3, r3, #3
 8006d06:	6293      	str	r3, [r2, #40]	@ 0x28
 8006d08:	e061      	b.n	8006dce <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006d0a:	4b33      	ldr	r3, [pc, #204]	@ (8006dd8 <HAL_RCC_OscConfig+0x86c>)
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d10:	4b31      	ldr	r3, [pc, #196]	@ (8006dd8 <HAL_RCC_OscConfig+0x86c>)
 8006d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d14:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d031      	beq.n	8006d82 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f003 0203 	and.w	r2, r3, #3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d12a      	bne.n	8006d82 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	0a1b      	lsrs	r3, r3, #8
 8006d30:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d122      	bne.n	8006d82 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d46:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d11a      	bne.n	8006d82 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	0a5b      	lsrs	r3, r3, #9
 8006d50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d58:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d111      	bne.n	8006d82 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	0c1b      	lsrs	r3, r3, #16
 8006d62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d6a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d108      	bne.n	8006d82 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	0e1b      	lsrs	r3, r3, #24
 8006d74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d001      	beq.n	8006d86 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e024      	b.n	8006dd0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d86:	4b14      	ldr	r3, [pc, #80]	@ (8006dd8 <HAL_RCC_OscConfig+0x86c>)
 8006d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8a:	08db      	lsrs	r3, r3, #3
 8006d8c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d01a      	beq.n	8006dce <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006d98:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd8 <HAL_RCC_OscConfig+0x86c>)
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9c:	4a0e      	ldr	r2, [pc, #56]	@ (8006dd8 <HAL_RCC_OscConfig+0x86c>)
 8006d9e:	f023 0310 	bic.w	r3, r3, #16
 8006da2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da4:	f7fc fa16 	bl	80031d4 <HAL_GetTick>
 8006da8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8006daa:	bf00      	nop
 8006dac:	f7fc fa12 	bl	80031d4 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d0f9      	beq.n	8006dac <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dbc:	4a06      	ldr	r2, [pc, #24]	@ (8006dd8 <HAL_RCC_OscConfig+0x86c>)
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006dc2:	4b05      	ldr	r3, [pc, #20]	@ (8006dd8 <HAL_RCC_OscConfig+0x86c>)
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc6:	4a04      	ldr	r2, [pc, #16]	@ (8006dd8 <HAL_RCC_OscConfig+0x86c>)
 8006dc8:	f043 0310 	orr.w	r3, r3, #16
 8006dcc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3720      	adds	r7, #32
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	44020c00 	.word	0x44020c00

08006ddc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e19e      	b.n	800712e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006df0:	4b83      	ldr	r3, [pc, #524]	@ (8007000 <HAL_RCC_ClockConfig+0x224>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 030f 	and.w	r3, r3, #15
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d910      	bls.n	8006e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dfe:	4b80      	ldr	r3, [pc, #512]	@ (8007000 <HAL_RCC_ClockConfig+0x224>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f023 020f 	bic.w	r2, r3, #15
 8006e06:	497e      	ldr	r1, [pc, #504]	@ (8007000 <HAL_RCC_ClockConfig+0x224>)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8007000 <HAL_RCC_ClockConfig+0x224>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d001      	beq.n	8006e20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e186      	b.n	800712e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d012      	beq.n	8006e52 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	695a      	ldr	r2, [r3, #20]
 8006e30:	4b74      	ldr	r3, [pc, #464]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	0a1b      	lsrs	r3, r3, #8
 8006e36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d909      	bls.n	8006e52 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006e3e:	4b71      	ldr	r3, [pc, #452]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	021b      	lsls	r3, r3, #8
 8006e4c:	496d      	ldr	r1, [pc, #436]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0308 	and.w	r3, r3, #8
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d012      	beq.n	8006e84 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691a      	ldr	r2, [r3, #16]
 8006e62:	4b68      	ldr	r3, [pc, #416]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	091b      	lsrs	r3, r3, #4
 8006e68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d909      	bls.n	8006e84 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006e70:	4b64      	ldr	r3, [pc, #400]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	4961      	ldr	r1, [pc, #388]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d010      	beq.n	8006eb2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	4b5b      	ldr	r3, [pc, #364]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d908      	bls.n	8006eb2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006ea0:	4b58      	ldr	r3, [pc, #352]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	4955      	ldr	r1, [pc, #340]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d010      	beq.n	8006ee0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	4b50      	ldr	r3, [pc, #320]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	f003 030f 	and.w	r3, r3, #15
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d908      	bls.n	8006ee0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006ece:	4b4d      	ldr	r3, [pc, #308]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	f023 020f 	bic.w	r2, r3, #15
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	494a      	ldr	r1, [pc, #296]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 8093 	beq.w	8007014 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d107      	bne.n	8006f06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006ef6:	4b43      	ldr	r3, [pc, #268]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d121      	bne.n	8006f46 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e113      	b.n	800712e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d107      	bne.n	8006f1e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d115      	bne.n	8006f46 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e107      	b.n	800712e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d107      	bne.n	8006f36 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006f26:	4b37      	ldr	r3, [pc, #220]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d109      	bne.n	8006f46 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e0fb      	b.n	800712e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f36:	4b33      	ldr	r3, [pc, #204]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e0f3      	b.n	800712e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006f46:	4b2f      	ldr	r3, [pc, #188]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f023 0203 	bic.w	r2, r3, #3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	492c      	ldr	r1, [pc, #176]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f58:	f7fc f93c 	bl	80031d4 <HAL_GetTick>
 8006f5c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d112      	bne.n	8006f8c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f66:	e00a      	b.n	8006f7e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006f68:	f7fc f934 	bl	80031d4 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e0d7      	b.n	800712e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f7e:	4b21      	ldr	r3, [pc, #132]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	f003 0318 	and.w	r3, r3, #24
 8006f86:	2b18      	cmp	r3, #24
 8006f88:	d1ee      	bne.n	8006f68 <HAL_RCC_ClockConfig+0x18c>
 8006f8a:	e043      	b.n	8007014 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d112      	bne.n	8006fba <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f94:	e00a      	b.n	8006fac <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006f96:	f7fc f91d 	bl	80031d4 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e0c0      	b.n	800712e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fac:	4b15      	ldr	r3, [pc, #84]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f003 0318 	and.w	r3, r3, #24
 8006fb4:	2b10      	cmp	r3, #16
 8006fb6:	d1ee      	bne.n	8006f96 <HAL_RCC_ClockConfig+0x1ba>
 8006fb8:	e02c      	b.n	8007014 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d122      	bne.n	8007008 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006fc2:	e00a      	b.n	8006fda <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006fc4:	f7fc f906 	bl	80031d4 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e0a9      	b.n	800712e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006fda:	4b0a      	ldr	r3, [pc, #40]	@ (8007004 <HAL_RCC_ClockConfig+0x228>)
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f003 0318 	and.w	r3, r3, #24
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	d1ee      	bne.n	8006fc4 <HAL_RCC_ClockConfig+0x1e8>
 8006fe6:	e015      	b.n	8007014 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe8:	f7fc f8f4 	bl	80031d4 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d906      	bls.n	8007008 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e097      	b.n	800712e <HAL_RCC_ClockConfig+0x352>
 8006ffe:	bf00      	nop
 8007000:	40022000 	.word	0x40022000
 8007004:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007008:	4b4b      	ldr	r3, [pc, #300]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	f003 0318 	and.w	r3, r3, #24
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e9      	bne.n	8006fe8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d010      	beq.n	8007042 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	4b44      	ldr	r3, [pc, #272]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	f003 030f 	and.w	r3, r3, #15
 800702c:	429a      	cmp	r2, r3
 800702e:	d208      	bcs.n	8007042 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007030:	4b41      	ldr	r3, [pc, #260]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f023 020f 	bic.w	r2, r3, #15
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	493e      	ldr	r1, [pc, #248]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007042:	4b3e      	ldr	r3, [pc, #248]	@ (800713c <HAL_RCC_ClockConfig+0x360>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d210      	bcs.n	8007072 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007050:	4b3a      	ldr	r3, [pc, #232]	@ (800713c <HAL_RCC_ClockConfig+0x360>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f023 020f 	bic.w	r2, r3, #15
 8007058:	4938      	ldr	r1, [pc, #224]	@ (800713c <HAL_RCC_ClockConfig+0x360>)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	4313      	orrs	r3, r2
 800705e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007060:	4b36      	ldr	r3, [pc, #216]	@ (800713c <HAL_RCC_ClockConfig+0x360>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d001      	beq.n	8007072 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e05d      	b.n	800712e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0304 	and.w	r3, r3, #4
 800707a:	2b00      	cmp	r3, #0
 800707c:	d010      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	4b2d      	ldr	r3, [pc, #180]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800708a:	429a      	cmp	r2, r3
 800708c:	d208      	bcs.n	80070a0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800708e:	4b2a      	ldr	r3, [pc, #168]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	4927      	ldr	r1, [pc, #156]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 800709c:	4313      	orrs	r3, r2
 800709e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0308 	and.w	r3, r3, #8
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d012      	beq.n	80070d2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	4b21      	ldr	r3, [pc, #132]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	091b      	lsrs	r3, r3, #4
 80070b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d209      	bcs.n	80070d2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80070be:	4b1e      	ldr	r3, [pc, #120]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	491a      	ldr	r1, [pc, #104]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0310 	and.w	r3, r3, #16
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d012      	beq.n	8007104 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	695a      	ldr	r2, [r3, #20]
 80070e2:	4b15      	ldr	r3, [pc, #84]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	0a1b      	lsrs	r3, r3, #8
 80070e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d209      	bcs.n	8007104 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80070f0:	4b11      	ldr	r3, [pc, #68]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	490e      	ldr	r1, [pc, #56]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 8007100:	4313      	orrs	r3, r2
 8007102:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007104:	f000 f822 	bl	800714c <HAL_RCC_GetSysClockFreq>
 8007108:	4602      	mov	r2, r0
 800710a:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <HAL_RCC_ClockConfig+0x35c>)
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	490b      	ldr	r1, [pc, #44]	@ (8007140 <HAL_RCC_ClockConfig+0x364>)
 8007114:	5ccb      	ldrb	r3, [r1, r3]
 8007116:	fa22 f303 	lsr.w	r3, r2, r3
 800711a:	4a0a      	ldr	r2, [pc, #40]	@ (8007144 <HAL_RCC_ClockConfig+0x368>)
 800711c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800711e:	4b0a      	ldr	r3, [pc, #40]	@ (8007148 <HAL_RCC_ClockConfig+0x36c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4618      	mov	r0, r3
 8007124:	f7fb ffcc 	bl	80030c0 <HAL_InitTick>
 8007128:	4603      	mov	r3, r0
 800712a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800712c:	7afb      	ldrb	r3, [r7, #11]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	44020c00 	.word	0x44020c00
 800713c:	40022000 	.word	0x40022000
 8007140:	0801473c 	.word	0x0801473c
 8007144:	20000004 	.word	0x20000004
 8007148:	20000024 	.word	0x20000024

0800714c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800714c:	b480      	push	{r7}
 800714e:	b089      	sub	sp, #36	@ 0x24
 8007150:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8007152:	4b8c      	ldr	r3, [pc, #560]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	f003 0318 	and.w	r3, r3, #24
 800715a:	2b08      	cmp	r3, #8
 800715c:	d102      	bne.n	8007164 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800715e:	4b8a      	ldr	r3, [pc, #552]	@ (8007388 <HAL_RCC_GetSysClockFreq+0x23c>)
 8007160:	61fb      	str	r3, [r7, #28]
 8007162:	e107      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007164:	4b87      	ldr	r3, [pc, #540]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	f003 0318 	and.w	r3, r3, #24
 800716c:	2b00      	cmp	r3, #0
 800716e:	d112      	bne.n	8007196 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007170:	4b84      	ldr	r3, [pc, #528]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800717c:	4b81      	ldr	r3, [pc, #516]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	08db      	lsrs	r3, r3, #3
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	4a81      	ldr	r2, [pc, #516]	@ (800738c <HAL_RCC_GetSysClockFreq+0x240>)
 8007188:	fa22 f303 	lsr.w	r3, r2, r3
 800718c:	61fb      	str	r3, [r7, #28]
 800718e:	e0f1      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8007190:	4b7e      	ldr	r3, [pc, #504]	@ (800738c <HAL_RCC_GetSysClockFreq+0x240>)
 8007192:	61fb      	str	r3, [r7, #28]
 8007194:	e0ee      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007196:	4b7b      	ldr	r3, [pc, #492]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f003 0318 	and.w	r3, r3, #24
 800719e:	2b10      	cmp	r3, #16
 80071a0:	d102      	bne.n	80071a8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071a2:	4b7b      	ldr	r3, [pc, #492]	@ (8007390 <HAL_RCC_GetSysClockFreq+0x244>)
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	e0e5      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071a8:	4b76      	ldr	r3, [pc, #472]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	f003 0318 	and.w	r3, r3, #24
 80071b0:	2b18      	cmp	r3, #24
 80071b2:	f040 80dd 	bne.w	8007370 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80071b6:	4b73      	ldr	r3, [pc, #460]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 80071b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80071c0:	4b70      	ldr	r3, [pc, #448]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 80071c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c4:	0a1b      	lsrs	r3, r3, #8
 80071c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80071cc:	4b6d      	ldr	r3, [pc, #436]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	091b      	lsrs	r3, r3, #4
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80071d8:	4b6a      	ldr	r3, [pc, #424]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 80071da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80071dc:	08db      	lsrs	r3, r3, #3
 80071de:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	fb02 f303 	mul.w	r3, r2, r3
 80071e8:	ee07 3a90 	vmov	s15, r3
 80071ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 80b7 	beq.w	800736a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d003      	beq.n	800720a <HAL_RCC_GetSysClockFreq+0xbe>
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b03      	cmp	r3, #3
 8007206:	d056      	beq.n	80072b6 <HAL_RCC_GetSysClockFreq+0x16a>
 8007208:	e077      	b.n	80072fa <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800720a:	4b5e      	ldr	r3, [pc, #376]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d02d      	beq.n	8007272 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007216:	4b5b      	ldr	r3, [pc, #364]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	08db      	lsrs	r3, r3, #3
 800721c:	f003 0303 	and.w	r3, r3, #3
 8007220:	4a5a      	ldr	r2, [pc, #360]	@ (800738c <HAL_RCC_GetSysClockFreq+0x240>)
 8007222:	fa22 f303 	lsr.w	r3, r2, r3
 8007226:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	ee07 3a90 	vmov	s15, r3
 8007238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007240:	4b50      	ldr	r3, [pc, #320]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 8007242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007250:	ed97 6a02 	vldr	s12, [r7, #8]
 8007254:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8007394 <HAL_RCC_GetSysClockFreq+0x248>
 8007258:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800725c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007260:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007264:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8007270:	e065      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	ee07 3a90 	vmov	s15, r3
 8007278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8007398 <HAL_RCC_GetSysClockFreq+0x24c>
 8007280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007284:	4b3f      	ldr	r3, [pc, #252]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 8007286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728c:	ee07 3a90 	vmov	s15, r3
 8007290:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007294:	ed97 6a02 	vldr	s12, [r7, #8]
 8007298:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007394 <HAL_RCC_GetSysClockFreq+0x248>
 800729c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80072a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80072b4:	e043      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	ee07 3a90 	vmov	s15, r3
 80072bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800739c <HAL_RCC_GetSysClockFreq+0x250>
 80072c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c8:	4b2e      	ldr	r3, [pc, #184]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 80072ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d0:	ee07 3a90 	vmov	s15, r3
 80072d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80072d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80072dc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8007394 <HAL_RCC_GetSysClockFreq+0x248>
 80072e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80072e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80072f8:	e021      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	ee07 3a90 	vmov	s15, r3
 8007300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007304:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80073a0 <HAL_RCC_GetSysClockFreq+0x254>
 8007308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730c:	4b1d      	ldr	r3, [pc, #116]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 800730e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007314:	ee07 3a90 	vmov	s15, r3
 8007318:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800731c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007320:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8007394 <HAL_RCC_GetSysClockFreq+0x248>
 8007324:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007328:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800732c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007330:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007338:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800733c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800733e:	4b11      	ldr	r3, [pc, #68]	@ (8007384 <HAL_RCC_GetSysClockFreq+0x238>)
 8007340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007342:	0a5b      	lsrs	r3, r3, #9
 8007344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007348:	3301      	adds	r3, #1
 800734a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007356:	edd7 6a06 	vldr	s13, [r7, #24]
 800735a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800735e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007362:	ee17 3a90 	vmov	r3, s15
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	e004      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	61fb      	str	r3, [r7, #28]
 800736e:	e001      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8007370:	4b06      	ldr	r3, [pc, #24]	@ (800738c <HAL_RCC_GetSysClockFreq+0x240>)
 8007372:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8007374:	69fb      	ldr	r3, [r7, #28]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3724      	adds	r7, #36	@ 0x24
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	44020c00 	.word	0x44020c00
 8007388:	003d0900 	.word	0x003d0900
 800738c:	03d09000 	.word	0x03d09000
 8007390:	007a1200 	.word	0x007a1200
 8007394:	46000000 	.word	0x46000000
 8007398:	4c742400 	.word	0x4c742400
 800739c:	4af42400 	.word	0x4af42400
 80073a0:	4a742400 	.word	0x4a742400

080073a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80073a8:	f7ff fed0 	bl	800714c <HAL_RCC_GetSysClockFreq>
 80073ac:	4602      	mov	r2, r0
 80073ae:	4b08      	ldr	r3, [pc, #32]	@ (80073d0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80073b0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80073b2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80073b6:	4907      	ldr	r1, [pc, #28]	@ (80073d4 <HAL_RCC_GetHCLKFreq+0x30>)
 80073b8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80073ba:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80073be:	fa22 f303 	lsr.w	r3, r2, r3
 80073c2:	4a05      	ldr	r2, [pc, #20]	@ (80073d8 <HAL_RCC_GetHCLKFreq+0x34>)
 80073c4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80073c6:	4b04      	ldr	r3, [pc, #16]	@ (80073d8 <HAL_RCC_GetHCLKFreq+0x34>)
 80073c8:	681b      	ldr	r3, [r3, #0]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	44020c00 	.word	0x44020c00
 80073d4:	0801473c 	.word	0x0801473c
 80073d8:	20000004 	.word	0x20000004

080073dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80073e0:	f7ff ffe0 	bl	80073a4 <HAL_RCC_GetHCLKFreq>
 80073e4:	4602      	mov	r2, r0
 80073e6:	4b06      	ldr	r3, [pc, #24]	@ (8007400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	091b      	lsrs	r3, r3, #4
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	4904      	ldr	r1, [pc, #16]	@ (8007404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073f2:	5ccb      	ldrb	r3, [r1, r3]
 80073f4:	f003 031f 	and.w	r3, r3, #31
 80073f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	44020c00 	.word	0x44020c00
 8007404:	0801474c 	.word	0x0801474c

08007408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800740c:	f7ff ffca 	bl	80073a4 <HAL_RCC_GetHCLKFreq>
 8007410:	4602      	mov	r2, r0
 8007412:	4b06      	ldr	r3, [pc, #24]	@ (800742c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	0a1b      	lsrs	r3, r3, #8
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	4904      	ldr	r1, [pc, #16]	@ (8007430 <HAL_RCC_GetPCLK2Freq+0x28>)
 800741e:	5ccb      	ldrb	r3, [r1, r3]
 8007420:	f003 031f 	and.w	r3, r3, #31
 8007424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007428:	4618      	mov	r0, r3
 800742a:	bd80      	pop	{r7, pc}
 800742c:	44020c00 	.word	0x44020c00
 8007430:	0801474c 	.word	0x0801474c

08007434 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8007438:	f7ff ffb4 	bl	80073a4 <HAL_RCC_GetHCLKFreq>
 800743c:	4602      	mov	r2, r0
 800743e:	4b06      	ldr	r3, [pc, #24]	@ (8007458 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	0b1b      	lsrs	r3, r3, #12
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	4904      	ldr	r1, [pc, #16]	@ (800745c <HAL_RCC_GetPCLK3Freq+0x28>)
 800744a:	5ccb      	ldrb	r3, [r1, r3]
 800744c:	f003 031f 	and.w	r3, r3, #31
 8007450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007454:	4618      	mov	r0, r3
 8007456:	bd80      	pop	{r7, pc}
 8007458:	44020c00 	.word	0x44020c00
 800745c:	0801474c 	.word	0x0801474c

08007460 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007464:	b0d8      	sub	sp, #352	@ 0x160
 8007466:	af00      	add	r7, sp, #0
 8007468:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800746c:	2300      	movs	r3, #0
 800746e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007472:	2300      	movs	r3, #0
 8007474:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007478:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8007484:	2500      	movs	r5, #0
 8007486:	ea54 0305 	orrs.w	r3, r4, r5
 800748a:	d00b      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800748c:	4bcd      	ldr	r3, [pc, #820]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800748e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007492:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8007496:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800749a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800749c:	4ac9      	ldr	r2, [pc, #804]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800749e:	430b      	orrs	r3, r1
 80074a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ac:	f002 0801 	and.w	r8, r2, #1
 80074b0:	f04f 0900 	mov.w	r9, #0
 80074b4:	ea58 0309 	orrs.w	r3, r8, r9
 80074b8:	d042      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80074ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074c0:	2b05      	cmp	r3, #5
 80074c2:	d823      	bhi.n	800750c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80074c4:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80074c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ca:	bf00      	nop
 80074cc:	08007515 	.word	0x08007515
 80074d0:	080074e5 	.word	0x080074e5
 80074d4:	080074f9 	.word	0x080074f9
 80074d8:	08007515 	.word	0x08007515
 80074dc:	08007515 	.word	0x08007515
 80074e0:	08007515 	.word	0x08007515
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074e8:	3308      	adds	r3, #8
 80074ea:	4618      	mov	r0, r3
 80074ec:	f004 fee0 	bl	800c2b0 <RCCEx_PLL2_Config>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80074f6:	e00e      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074fc:	3330      	adds	r3, #48	@ 0x30
 80074fe:	4618      	mov	r0, r3
 8007500:	f004 ff6e 	bl	800c3e0 <RCCEx_PLL3_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800750a:	e004      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007512:	e000      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8007514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007516:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10c      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800751e:	4ba9      	ldr	r3, [pc, #676]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007520:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007524:	f023 0107 	bic.w	r1, r3, #7
 8007528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800752c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800752e:	4aa5      	ldr	r2, [pc, #660]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007530:	430b      	orrs	r3, r1
 8007532:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007536:	e003      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007538:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800753c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f002 0a02 	and.w	sl, r2, #2
 800754c:	f04f 0b00 	mov.w	fp, #0
 8007550:	ea5a 030b 	orrs.w	r3, sl, fp
 8007554:	f000 8088 	beq.w	8007668 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8007558:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800755c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800755e:	2b28      	cmp	r3, #40	@ 0x28
 8007560:	d868      	bhi.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007562:	a201      	add	r2, pc, #4	@ (adr r2, 8007568 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8007564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007568:	0800763d 	.word	0x0800763d
 800756c:	08007635 	.word	0x08007635
 8007570:	08007635 	.word	0x08007635
 8007574:	08007635 	.word	0x08007635
 8007578:	08007635 	.word	0x08007635
 800757c:	08007635 	.word	0x08007635
 8007580:	08007635 	.word	0x08007635
 8007584:	08007635 	.word	0x08007635
 8007588:	0800760d 	.word	0x0800760d
 800758c:	08007635 	.word	0x08007635
 8007590:	08007635 	.word	0x08007635
 8007594:	08007635 	.word	0x08007635
 8007598:	08007635 	.word	0x08007635
 800759c:	08007635 	.word	0x08007635
 80075a0:	08007635 	.word	0x08007635
 80075a4:	08007635 	.word	0x08007635
 80075a8:	08007621 	.word	0x08007621
 80075ac:	08007635 	.word	0x08007635
 80075b0:	08007635 	.word	0x08007635
 80075b4:	08007635 	.word	0x08007635
 80075b8:	08007635 	.word	0x08007635
 80075bc:	08007635 	.word	0x08007635
 80075c0:	08007635 	.word	0x08007635
 80075c4:	08007635 	.word	0x08007635
 80075c8:	0800763d 	.word	0x0800763d
 80075cc:	08007635 	.word	0x08007635
 80075d0:	08007635 	.word	0x08007635
 80075d4:	08007635 	.word	0x08007635
 80075d8:	08007635 	.word	0x08007635
 80075dc:	08007635 	.word	0x08007635
 80075e0:	08007635 	.word	0x08007635
 80075e4:	08007635 	.word	0x08007635
 80075e8:	0800763d 	.word	0x0800763d
 80075ec:	08007635 	.word	0x08007635
 80075f0:	08007635 	.word	0x08007635
 80075f4:	08007635 	.word	0x08007635
 80075f8:	08007635 	.word	0x08007635
 80075fc:	08007635 	.word	0x08007635
 8007600:	08007635 	.word	0x08007635
 8007604:	08007635 	.word	0x08007635
 8007608:	0800763d 	.word	0x0800763d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800760c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007610:	3308      	adds	r3, #8
 8007612:	4618      	mov	r0, r3
 8007614:	f004 fe4c 	bl	800c2b0 <RCCEx_PLL2_Config>
 8007618:	4603      	mov	r3, r0
 800761a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800761e:	e00e      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007620:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007624:	3330      	adds	r3, #48	@ 0x30
 8007626:	4618      	mov	r0, r3
 8007628:	f004 feda 	bl	800c3e0 <RCCEx_PLL3_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8007632:	e004      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800763a:	e000      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800763c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800763e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10c      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007646:	4b5f      	ldr	r3, [pc, #380]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007648:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800764c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007650:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007656:	4a5b      	ldr	r2, [pc, #364]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007658:	430b      	orrs	r3, r1
 800765a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800765e:	e003      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007660:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007664:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f002 0304 	and.w	r3, r2, #4
 8007674:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8007678:	2300      	movs	r3, #0
 800767a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800767e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8007682:	460b      	mov	r3, r1
 8007684:	4313      	orrs	r3, r2
 8007686:	d04e      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8007688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800768c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800768e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007692:	d02c      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8007694:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007698:	d825      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800769a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800769e:	d028      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80076a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076a4:	d81f      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80076a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80076a8:	d025      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80076aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80076ac:	d81b      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80076ae:	2b80      	cmp	r3, #128	@ 0x80
 80076b0:	d00f      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80076b2:	2b80      	cmp	r3, #128	@ 0x80
 80076b4:	d817      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01f      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80076ba:	2b40      	cmp	r3, #64	@ 0x40
 80076bc:	d113      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076c2:	3308      	adds	r3, #8
 80076c4:	4618      	mov	r0, r3
 80076c6:	f004 fdf3 	bl	800c2b0 <RCCEx_PLL2_Config>
 80076ca:	4603      	mov	r3, r0
 80076cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80076d0:	e014      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076d6:	3330      	adds	r3, #48	@ 0x30
 80076d8:	4618      	mov	r0, r3
 80076da:	f004 fe81 	bl	800c3e0 <RCCEx_PLL3_Config>
 80076de:	4603      	mov	r3, r0
 80076e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80076e4:	e00a      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076ec:	e006      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80076ee:	bf00      	nop
 80076f0:	e004      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80076f2:	bf00      	nop
 80076f4:	e002      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80076f6:	bf00      	nop
 80076f8:	e000      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80076fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10c      	bne.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007704:	4b2f      	ldr	r3, [pc, #188]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007706:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800770a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800770e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007714:	4a2b      	ldr	r2, [pc, #172]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007716:	430b      	orrs	r3, r1
 8007718:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800771c:	e003      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007722:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007726:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f002 0308 	and.w	r3, r2, #8
 8007732:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007736:	2300      	movs	r3, #0
 8007738:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800773c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8007740:	460b      	mov	r3, r1
 8007742:	4313      	orrs	r3, r2
 8007744:	d056      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8007746:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800774a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800774c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007750:	d031      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8007752:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007756:	d82a      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800775c:	d02d      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800775e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007762:	d824      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007764:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007768:	d029      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800776a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800776e:	d81e      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007774:	d011      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800777a:	d818      	bhi.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800777c:	2b00      	cmp	r3, #0
 800777e:	d023      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007784:	d113      	bne.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007786:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800778a:	3308      	adds	r3, #8
 800778c:	4618      	mov	r0, r3
 800778e:	f004 fd8f 	bl	800c2b0 <RCCEx_PLL2_Config>
 8007792:	4603      	mov	r3, r0
 8007794:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8007798:	e017      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800779a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800779e:	3330      	adds	r3, #48	@ 0x30
 80077a0:	4618      	mov	r0, r3
 80077a2:	f004 fe1d 	bl	800c3e0 <RCCEx_PLL3_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80077ac:	e00d      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80077b4:	e009      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80077b6:	bf00      	nop
 80077b8:	e007      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80077ba:	bf00      	nop
 80077bc:	e005      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80077be:	bf00      	nop
 80077c0:	e003      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80077c2:	bf00      	nop
 80077c4:	44020c00 	.word	0x44020c00
        break;
 80077c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10c      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80077d2:	4bbb      	ldr	r3, [pc, #748]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80077d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80077d8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80077dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077e2:	4ab7      	ldr	r2, [pc, #732]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80077e4:	430b      	orrs	r3, r1
 80077e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80077ea:	e003      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80077f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	f002 0310 	and.w	r3, r2, #16
 8007800:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007804:	2300      	movs	r3, #0
 8007806:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800780a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800780e:	460b      	mov	r3, r1
 8007810:	4313      	orrs	r3, r2
 8007812:	d053      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8007814:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800781a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800781e:	d031      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007820:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007824:	d82a      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007826:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800782a:	d02d      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800782c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007830:	d824      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007832:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007836:	d029      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007838:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800783c:	d81e      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800783e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007842:	d011      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007848:	d818      	bhi.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d020      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800784e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007852:	d113      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007854:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007858:	3308      	adds	r3, #8
 800785a:	4618      	mov	r0, r3
 800785c:	f004 fd28 	bl	800c2b0 <RCCEx_PLL2_Config>
 8007860:	4603      	mov	r3, r0
 8007862:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8007866:	e014      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800786c:	3330      	adds	r3, #48	@ 0x30
 800786e:	4618      	mov	r0, r3
 8007870:	f004 fdb6 	bl	800c3e0 <RCCEx_PLL3_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800787a:	e00a      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007882:	e006      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007884:	bf00      	nop
 8007886:	e004      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007888:	bf00      	nop
 800788a:	e002      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800788c:	bf00      	nop
 800788e:	e000      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007892:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10c      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800789a:	4b89      	ldr	r3, [pc, #548]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800789c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80078a0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80078a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078aa:	4a85      	ldr	r2, [pc, #532]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80078ac:	430b      	orrs	r3, r1
 80078ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80078b2:	e003      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80078bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f002 0320 	and.w	r3, r2, #32
 80078c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80078cc:	2300      	movs	r3, #0
 80078ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80078d2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80078d6:	460b      	mov	r3, r1
 80078d8:	4313      	orrs	r3, r2
 80078da:	d053      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80078dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80078e6:	d031      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80078e8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80078ec:	d82a      	bhi.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80078ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078f2:	d02d      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80078f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078f8:	d824      	bhi.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80078fa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80078fe:	d029      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8007900:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007904:	d81e      	bhi.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800790a:	d011      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800790c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007910:	d818      	bhi.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d020      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8007916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800791a:	d113      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800791c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007920:	3308      	adds	r3, #8
 8007922:	4618      	mov	r0, r3
 8007924:	f004 fcc4 	bl	800c2b0 <RCCEx_PLL2_Config>
 8007928:	4603      	mov	r3, r0
 800792a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800792e:	e014      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007934:	3330      	adds	r3, #48	@ 0x30
 8007936:	4618      	mov	r0, r3
 8007938:	f004 fd52 	bl	800c3e0 <RCCEx_PLL3_Config>
 800793c:	4603      	mov	r3, r0
 800793e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8007942:	e00a      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800794a:	e006      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800794c:	bf00      	nop
 800794e:	e004      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007950:	bf00      	nop
 8007952:	e002      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007954:	bf00      	nop
 8007956:	e000      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8007958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800795a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10c      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8007962:	4b57      	ldr	r3, [pc, #348]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007968:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800796c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007972:	4a53      	ldr	r2, [pc, #332]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007974:	430b      	orrs	r3, r1
 8007976:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800797a:	e003      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007980:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007984:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007990:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007994:	2300      	movs	r3, #0
 8007996:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800799a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800799e:	460b      	mov	r3, r1
 80079a0:	4313      	orrs	r3, r2
 80079a2:	d053      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80079a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079aa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80079ae:	d031      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80079b0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80079b4:	d82a      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80079b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ba:	d02d      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80079bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079c0:	d824      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80079c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80079c6:	d029      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80079c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80079cc:	d81e      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80079ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80079d2:	d011      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80079d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80079d8:	d818      	bhi.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d020      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80079de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079e2:	d113      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80079e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079e8:	3308      	adds	r3, #8
 80079ea:	4618      	mov	r0, r3
 80079ec:	f004 fc60 	bl	800c2b0 <RCCEx_PLL2_Config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80079f6:	e014      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079fc:	3330      	adds	r3, #48	@ 0x30
 80079fe:	4618      	mov	r0, r3
 8007a00:	f004 fcee 	bl	800c3e0 <RCCEx_PLL3_Config>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8007a0a:	e00a      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a12:	e006      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007a14:	bf00      	nop
 8007a16:	e004      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007a18:	bf00      	nop
 8007a1a:	e002      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007a1c:	bf00      	nop
 8007a1e:	e000      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10c      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8007a2a:	4b25      	ldr	r3, [pc, #148]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007a2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007a30:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8007a34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a3a:	4a21      	ldr	r2, [pc, #132]	@ (8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007a42:	e003      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007a4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a58:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8007a62:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8007a66:	460b      	mov	r3, r1
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	d055      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8007a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a72:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007a76:	d033      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8007a78:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8007a7c:	d82c      	bhi.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007a7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a82:	d02f      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8007a84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007a88:	d826      	bhi.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007a8a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a8e:	d02b      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8007a90:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007a94:	d820      	bhi.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007a96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a9a:	d013      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007a9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007aa0:	d81a      	bhi.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d022      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8007aa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007aaa:	d115      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007aac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f004 fbfc 	bl	800c2b0 <RCCEx_PLL2_Config>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8007abe:	e016      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8007ac0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ac4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ac8:	3330      	adds	r3, #48	@ 0x30
 8007aca:	4618      	mov	r0, r3
 8007acc:	f004 fc88 	bl	800c3e0 <RCCEx_PLL3_Config>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8007ad6:	e00a      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ade:	e006      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007ae0:	bf00      	nop
 8007ae2:	e004      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007ae4:	bf00      	nop
 8007ae6:	e002      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007ae8:	bf00      	nop
 8007aea:	e000      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10c      	bne.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8007af6:	4bbb      	ldr	r3, [pc, #748]	@ (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007af8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007afc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007b00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b06:	4ab7      	ldr	r2, [pc, #732]	@ (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007b0e:	e003      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b14:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8007b18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007b24:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8007b2e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8007b32:	460b      	mov	r3, r1
 8007b34:	4313      	orrs	r3, r2
 8007b36:	d053      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8007b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b3e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007b42:	d031      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007b44:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007b48:	d82a      	bhi.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007b4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b4e:	d02d      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8007b50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b54:	d824      	bhi.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007b56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b5a:	d029      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8007b5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007b60:	d81e      	bhi.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007b62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b66:	d011      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007b68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b6c:	d818      	bhi.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d020      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8007b72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b76:	d113      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f004 fb96 	bl	800c2b0 <RCCEx_PLL2_Config>
 8007b84:	4603      	mov	r3, r0
 8007b86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8007b8a:	e014      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b90:	3330      	adds	r3, #48	@ 0x30
 8007b92:	4618      	mov	r0, r3
 8007b94:	f004 fc24 	bl	800c3e0 <RCCEx_PLL3_Config>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8007b9e:	e00a      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ba6:	e006      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007ba8:	bf00      	nop
 8007baa:	e004      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007bac:	bf00      	nop
 8007bae:	e002      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007bb0:	bf00      	nop
 8007bb2:	e000      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10c      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8007bbe:	4b89      	ldr	r3, [pc, #548]	@ (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007bc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007bc4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bce:	4a85      	ldr	r2, [pc, #532]	@ (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007bd6:	e003      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007bdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8007be0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007bec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007bf6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	d055      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8007c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c08:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007c0c:	d031      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8007c0e:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007c12:	d82a      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c18:	d02d      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8007c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c1e:	d824      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007c20:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007c24:	d029      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8007c26:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007c2a:	d81e      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007c2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c30:	d011      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8007c32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c36:	d818      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d020      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8007c3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c40:	d113      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c46:	3308      	adds	r3, #8
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f004 fb31 	bl	800c2b0 <RCCEx_PLL2_Config>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007c54:	e014      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c5a:	3330      	adds	r3, #48	@ 0x30
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f004 fbbf 	bl	800c3e0 <RCCEx_PLL3_Config>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8007c68:	e00a      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c70:	e006      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007c72:	bf00      	nop
 8007c74:	e004      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007c76:	bf00      	nop
 8007c78:	e002      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8007c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c80:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10d      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8007c88:	4b56      	ldr	r3, [pc, #344]	@ (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c8e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8007c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c9a:	4a52      	ldr	r2, [pc, #328]	@ (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007ca2:	e003      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ca8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007cb8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007cc2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	d044      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8007ccc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cd4:	2b05      	cmp	r3, #5
 8007cd6:	d823      	bhi.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007d29 	.word	0x08007d29
 8007ce4:	08007cf9 	.word	0x08007cf9
 8007ce8:	08007d0d 	.word	0x08007d0d
 8007cec:	08007d29 	.word	0x08007d29
 8007cf0:	08007d29 	.word	0x08007d29
 8007cf4:	08007d29 	.word	0x08007d29
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f004 fad6 	bl	800c2b0 <RCCEx_PLL2_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8007d0a:	e00e      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d10:	3330      	adds	r3, #48	@ 0x30
 8007d12:	4618      	mov	r0, r3
 8007d14:	f004 fb64 	bl	800c3e0 <RCCEx_PLL3_Config>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8007d1e:	e004      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d26:	e000      	b.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8007d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10d      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8007d32:	4b2c      	ldr	r3, [pc, #176]	@ (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007d34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007d38:	f023 0107 	bic.w	r1, r3, #7
 8007d3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d44:	4a27      	ldr	r2, [pc, #156]	@ (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007d46:	430b      	orrs	r3, r1
 8007d48:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007d4c:	e003      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d52:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007d62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d66:	2300      	movs	r3, #0
 8007d68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d6c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007d70:	460b      	mov	r3, r1
 8007d72:	4313      	orrs	r3, r2
 8007d74:	d04f      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8007d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d7e:	2b50      	cmp	r3, #80	@ 0x50
 8007d80:	d029      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007d82:	2b50      	cmp	r3, #80	@ 0x50
 8007d84:	d823      	bhi.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d86:	2b40      	cmp	r3, #64	@ 0x40
 8007d88:	d027      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8007d8a:	2b40      	cmp	r3, #64	@ 0x40
 8007d8c:	d81f      	bhi.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d8e:	2b30      	cmp	r3, #48	@ 0x30
 8007d90:	d025      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8007d92:	2b30      	cmp	r3, #48	@ 0x30
 8007d94:	d81b      	bhi.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	d00f      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d817      	bhi.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d022      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007da2:	2b10      	cmp	r3, #16
 8007da4:	d113      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007da6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007daa:	3308      	adds	r3, #8
 8007dac:	4618      	mov	r0, r3
 8007dae:	f004 fa7f 	bl	800c2b0 <RCCEx_PLL2_Config>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007db8:	e017      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007dba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dbe:	3330      	adds	r3, #48	@ 0x30
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f004 fb0d 	bl	800c3e0 <RCCEx_PLL3_Config>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007dcc:	e00d      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007dd4:	e009      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007dd6:	bf00      	nop
 8007dd8:	e007      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007dda:	bf00      	nop
 8007ddc:	e005      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007dde:	bf00      	nop
 8007de0:	e003      	b.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8007de2:	bf00      	nop
 8007de4:	44020c00 	.word	0x44020c00
        break;
 8007de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10d      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8007df2:	4baf      	ldr	r3, [pc, #700]	@ (80080b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007df4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007df8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e04:	4aaa      	ldr	r2, [pc, #680]	@ (80080b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007e06:	430b      	orrs	r3, r1
 8007e08:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007e0c:	e003      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007e22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007e26:	2300      	movs	r3, #0
 8007e28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4313      	orrs	r3, r2
 8007e34:	d055      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007e36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e3e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007e42:	d031      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8007e44:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007e48:	d82a      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007e4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e4e:	d02d      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007e50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e54:	d824      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007e56:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e5a:	d029      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8007e5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e60:	d81e      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007e62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e66:	d011      	beq.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007e68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e6c:	d818      	bhi.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d020      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8007e72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e76:	d113      	bne.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f004 fa16 	bl	800c2b0 <RCCEx_PLL2_Config>
 8007e84:	4603      	mov	r3, r0
 8007e86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007e8a:	e014      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e90:	3330      	adds	r3, #48	@ 0x30
 8007e92:	4618      	mov	r0, r3
 8007e94:	f004 faa4 	bl	800c3e0 <RCCEx_PLL3_Config>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8007e9e:	e00a      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ea6:	e006      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007ea8:	bf00      	nop
 8007eaa:	e004      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007eac:	bf00      	nop
 8007eae:	e002      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007eb0:	bf00      	nop
 8007eb2:	e000      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10d      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80080b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ec4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ed0:	4a77      	ldr	r2, [pc, #476]	@ (80080b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007ed2:	430b      	orrs	r3, r1
 8007ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007ed8:	e003      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ede:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007eee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007ef8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007efc:	460b      	mov	r3, r1
 8007efe:	4313      	orrs	r3, r2
 8007f00:	d03d      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8007f02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f0e:	d01b      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8007f10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007f14:	d814      	bhi.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007f16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f1a:	d017      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8007f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f20:	d80e      	bhi.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d014      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8007f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f2a:	d109      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f30:	3330      	adds	r3, #48	@ 0x30
 8007f32:	4618      	mov	r0, r3
 8007f34:	f004 fa54 	bl	800c3e0 <RCCEx_PLL3_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8007f3e:	e008      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f46:	e004      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007f48:	bf00      	nop
 8007f4a:	e002      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007f4c:	bf00      	nop
 8007f4e:	e000      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8007f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10d      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007f5a:	4b55      	ldr	r3, [pc, #340]	@ (80080b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007f5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007f60:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f6c:	4a50      	ldr	r2, [pc, #320]	@ (80080b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007f6e:	430b      	orrs	r3, r1
 8007f70:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007f74:	e003      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f7a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007f8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f94:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	d03d      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8007f9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fa6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007faa:	d01b      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8007fac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007fb0:	d814      	bhi.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007fb2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007fb6:	d017      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8007fb8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007fbc:	d80e      	bhi.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d014      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8007fc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007fc6:	d109      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fcc:	3330      	adds	r3, #48	@ 0x30
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f004 fa06 	bl	800c3e0 <RCCEx_PLL3_Config>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8007fda:	e008      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007fe2:	e004      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007fe4:	bf00      	nop
 8007fe6:	e002      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007fe8:	bf00      	nop
 8007fea:	e000      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10d      	bne.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007ff6:	4b2e      	ldr	r3, [pc, #184]	@ (80080b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007ff8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007ffc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8008000:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008004:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008008:	4a29      	ldr	r2, [pc, #164]	@ (80080b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800800a:	430b      	orrs	r3, r1
 800800c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008010:	e003      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008012:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008016:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800801a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008026:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800802a:	2300      	movs	r3, #0
 800802c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008030:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008034:	460b      	mov	r3, r1
 8008036:	4313      	orrs	r3, r2
 8008038:	d040      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800803a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800803e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008042:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008046:	d01b      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8008048:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800804c:	d814      	bhi.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800804e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008052:	d017      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008054:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008058:	d80e      	bhi.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d014      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800805e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008062:	d109      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008064:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008068:	3330      	adds	r3, #48	@ 0x30
 800806a:	4618      	mov	r0, r3
 800806c:	f004 f9b8 	bl	800c3e0 <RCCEx_PLL3_Config>
 8008070:	4603      	mov	r3, r0
 8008072:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8008076:	e008      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800807e:	e004      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008080:	bf00      	nop
 8008082:	e002      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008084:	bf00      	nop
 8008086:	e000      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800808a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800808e:	2b00      	cmp	r3, #0
 8008090:	d110      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008092:	4b07      	ldr	r3, [pc, #28]	@ (80080b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008094:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008098:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800809c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080a4:	4a02      	ldr	r2, [pc, #8]	@ (80080b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80080a6:	430b      	orrs	r3, r1
 80080a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80080ac:	e006      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80080ae:	bf00      	nop
 80080b0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c4:	2100      	movs	r1, #0
 80080c6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80080ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80080d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4313      	orrs	r3, r2
 80080da:	d03d      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80080dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80080e8:	d01b      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80080ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80080ee:	d814      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80080f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080f4:	d017      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80080f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80080fa:	d80e      	bhi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d014      	beq.n	800812a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8008100:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008104:	d109      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008106:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800810a:	3330      	adds	r3, #48	@ 0x30
 800810c:	4618      	mov	r0, r3
 800810e:	f004 f967 	bl	800c3e0 <RCCEx_PLL3_Config>
 8008112:	4603      	mov	r3, r0
 8008114:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8008118:	e008      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008120:	e004      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8008122:	bf00      	nop
 8008124:	e002      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8008126:	bf00      	nop
 8008128:	e000      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800812a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800812c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10d      	bne.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008134:	4bbe      	ldr	r3, [pc, #760]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008136:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800813a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800813e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008142:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008146:	4aba      	ldr	r2, [pc, #744]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008148:	430b      	orrs	r3, r1
 800814a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800814e:	e003      	b.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008150:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008154:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8008158:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008164:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008168:	2300      	movs	r3, #0
 800816a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800816e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008172:	460b      	mov	r3, r1
 8008174:	4313      	orrs	r3, r2
 8008176:	d035      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8008178:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800817c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008180:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008184:	d015      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8008186:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800818a:	d80e      	bhi.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800818c:	2b00      	cmp	r3, #0
 800818e:	d012      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8008190:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008194:	d109      	bne.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800819a:	3330      	adds	r3, #48	@ 0x30
 800819c:	4618      	mov	r0, r3
 800819e:	f004 f91f 	bl	800c3e0 <RCCEx_PLL3_Config>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80081a8:	e006      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80081b0:	e002      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80081b2:	bf00      	nop
 80081b4:	e000      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80081b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10d      	bne.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80081c0:	4b9b      	ldr	r3, [pc, #620]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80081c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80081c6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80081ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081d2:	4a97      	ldr	r2, [pc, #604]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80081d4:	430b      	orrs	r3, r1
 80081d6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80081da:	e003      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80081e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	2100      	movs	r1, #0
 80081ee:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80081f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80081fe:	460b      	mov	r3, r1
 8008200:	4313      	orrs	r3, r2
 8008202:	d00e      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8008204:	4b8a      	ldr	r3, [pc, #552]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008206:	69db      	ldr	r3, [r3, #28]
 8008208:	4a89      	ldr	r2, [pc, #548]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800820a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800820e:	61d3      	str	r3, [r2, #28]
 8008210:	4b87      	ldr	r3, [pc, #540]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008212:	69d9      	ldr	r1, [r3, #28]
 8008214:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008218:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800821c:	4a84      	ldr	r2, [pc, #528]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800821e:	430b      	orrs	r3, r1
 8008220:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008222:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800822e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008232:	2300      	movs	r3, #0
 8008234:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008238:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800823c:	460b      	mov	r3, r1
 800823e:	4313      	orrs	r3, r2
 8008240:	d055      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8008242:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008246:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800824a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800824e:	d031      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8008250:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008254:	d82a      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800825a:	d02d      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800825c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008260:	d824      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008266:	d029      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8008268:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800826c:	d81e      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800826e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008272:	d011      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8008274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008278:	d818      	bhi.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d020      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800827e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008282:	d113      	bne.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008288:	3308      	adds	r3, #8
 800828a:	4618      	mov	r0, r3
 800828c:	f004 f810 	bl	800c2b0 <RCCEx_PLL2_Config>
 8008290:	4603      	mov	r3, r0
 8008292:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8008296:	e014      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008298:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800829c:	3330      	adds	r3, #48	@ 0x30
 800829e:	4618      	mov	r0, r3
 80082a0:	f004 f89e 	bl	800c3e0 <RCCEx_PLL3_Config>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80082aa:	e00a      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80082b2:	e006      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80082b4:	bf00      	nop
 80082b6:	e004      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80082b8:	bf00      	nop
 80082ba:	e002      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80082bc:	bf00      	nop
 80082be:	e000      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80082c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10d      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80082ca:	4b59      	ldr	r3, [pc, #356]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80082cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80082d0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80082d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80082dc:	4a54      	ldr	r2, [pc, #336]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80082de:	430b      	orrs	r3, r1
 80082e0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80082e4:	e003      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80082ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80082fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082fe:	2300      	movs	r3, #0
 8008300:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008304:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008308:	460b      	mov	r3, r1
 800830a:	4313      	orrs	r3, r2
 800830c:	d055      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800830e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008312:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008316:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800831a:	d031      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800831c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008320:	d82a      	bhi.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008322:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008326:	d02d      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8008328:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800832c:	d824      	bhi.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800832e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008332:	d029      	beq.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8008334:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008338:	d81e      	bhi.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800833a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800833e:	d011      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8008340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008344:	d818      	bhi.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d020      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800834a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800834e:	d113      	bne.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008350:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008354:	3308      	adds	r3, #8
 8008356:	4618      	mov	r0, r3
 8008358:	f003 ffaa 	bl	800c2b0 <RCCEx_PLL2_Config>
 800835c:	4603      	mov	r3, r0
 800835e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008362:	e014      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008368:	3330      	adds	r3, #48	@ 0x30
 800836a:	4618      	mov	r0, r3
 800836c:	f004 f838 	bl	800c3e0 <RCCEx_PLL3_Config>
 8008370:	4603      	mov	r3, r0
 8008372:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008376:	e00a      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800837e:	e006      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008380:	bf00      	nop
 8008382:	e004      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008384:	bf00      	nop
 8008386:	e002      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008388:	bf00      	nop
 800838a:	e000      	b.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800838c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800838e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10d      	bne.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008396:	4b26      	ldr	r3, [pc, #152]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008398:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800839c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80083a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80083a8:	4a21      	ldr	r2, [pc, #132]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80083aa:	430b      	orrs	r3, r1
 80083ac:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80083b0:	e003      	b.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80083b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80083ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	2100      	movs	r1, #0
 80083c4:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80083c8:	f003 0320 	and.w	r3, r3, #32
 80083cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80083d4:	460b      	mov	r3, r1
 80083d6:	4313      	orrs	r3, r2
 80083d8:	d057      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80083da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80083e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083e6:	d033      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80083e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083ec:	d82c      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80083ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083f2:	d02f      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80083f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083f8:	d826      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80083fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083fe:	d02b      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8008400:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008404:	d820      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008406:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800840a:	d013      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800840c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008410:	d81a      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008412:	2b00      	cmp	r3, #0
 8008414:	d022      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8008416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800841a:	d115      	bne.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800841c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008420:	3308      	adds	r3, #8
 8008422:	4618      	mov	r0, r3
 8008424:	f003 ff44 	bl	800c2b0 <RCCEx_PLL2_Config>
 8008428:	4603      	mov	r3, r0
 800842a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800842e:	e016      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8008430:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008434:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008438:	3330      	adds	r3, #48	@ 0x30
 800843a:	4618      	mov	r0, r3
 800843c:	f003 ffd0 	bl	800c3e0 <RCCEx_PLL3_Config>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8008446:	e00a      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800844e:	e006      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008450:	bf00      	nop
 8008452:	e004      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008454:	bf00      	nop
 8008456:	e002      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008458:	bf00      	nop
 800845a:	e000      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800845c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800845e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10d      	bne.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8008466:	4bbb      	ldr	r3, [pc, #748]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008468:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800846c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008470:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008474:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008478:	4ab6      	ldr	r2, [pc, #728]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800847a:	430b      	orrs	r3, r1
 800847c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008480:	e003      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008482:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008486:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800848a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	2100      	movs	r1, #0
 8008494:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8008498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800849c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80084a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4313      	orrs	r3, r2
 80084a8:	d055      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80084aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80084b2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80084b6:	d031      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80084b8:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80084bc:	d82a      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80084be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084c2:	d02d      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80084c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084c8:	d824      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80084ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084ce:	d029      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80084d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084d4:	d81e      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80084d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084da:	d011      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80084dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084e0:	d818      	bhi.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d020      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80084e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084ea:	d113      	bne.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80084ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084f0:	3308      	adds	r3, #8
 80084f2:	4618      	mov	r0, r3
 80084f4:	f003 fedc 	bl	800c2b0 <RCCEx_PLL2_Config>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80084fe:	e014      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008500:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008504:	3330      	adds	r3, #48	@ 0x30
 8008506:	4618      	mov	r0, r3
 8008508:	f003 ff6a 	bl	800c3e0 <RCCEx_PLL3_Config>
 800850c:	4603      	mov	r3, r0
 800850e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8008512:	e00a      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800851a:	e006      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800851c:	bf00      	nop
 800851e:	e004      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008520:	bf00      	nop
 8008522:	e002      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008524:	bf00      	nop
 8008526:	e000      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800852a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10d      	bne.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8008532:	4b88      	ldr	r3, [pc, #544]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008534:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008538:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 800853c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008540:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008544:	4a83      	ldr	r2, [pc, #524]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008546:	430b      	orrs	r3, r1
 8008548:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800854c:	e003      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800854e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008552:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8008556:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	2100      	movs	r1, #0
 8008560:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8008564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800856c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008570:	460b      	mov	r3, r1
 8008572:	4313      	orrs	r3, r2
 8008574:	d055      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8008576:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800857a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800857e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008582:	d031      	beq.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8008584:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008588:	d82a      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800858a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800858e:	d02d      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8008590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008594:	d824      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008596:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800859a:	d029      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800859c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80085a0:	d81e      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80085a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085a6:	d011      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80085a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085ac:	d818      	bhi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d020      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80085b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085b6:	d113      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085bc:	3308      	adds	r3, #8
 80085be:	4618      	mov	r0, r3
 80085c0:	f003 fe76 	bl	800c2b0 <RCCEx_PLL2_Config>
 80085c4:	4603      	mov	r3, r0
 80085c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80085ca:	e014      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80085cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085d0:	3330      	adds	r3, #48	@ 0x30
 80085d2:	4618      	mov	r0, r3
 80085d4:	f003 ff04 	bl	800c3e0 <RCCEx_PLL3_Config>
 80085d8:	4603      	mov	r3, r0
 80085da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80085de:	e00a      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80085e6:	e006      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80085e8:	bf00      	nop
 80085ea:	e004      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80085ec:	bf00      	nop
 80085ee:	e002      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80085f0:	bf00      	nop
 80085f2:	e000      	b.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80085f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10d      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80085fe:	4b55      	ldr	r3, [pc, #340]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008600:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008604:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008608:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800860c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008610:	4a50      	ldr	r2, [pc, #320]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008612:	430b      	orrs	r3, r1
 8008614:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008618:	e003      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800861e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8008622:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	2100      	movs	r1, #0
 800862c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8008630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008634:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008638:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800863c:	460b      	mov	r3, r1
 800863e:	4313      	orrs	r3, r2
 8008640:	d055      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8008642:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008646:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800864a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800864e:	d031      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8008650:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008654:	d82a      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800865a:	d02d      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800865c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008660:	d824      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008662:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008666:	d029      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8008668:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800866c:	d81e      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800866e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008672:	d011      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8008674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008678:	d818      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800867a:	2b00      	cmp	r3, #0
 800867c:	d020      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800867e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008682:	d113      	bne.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008684:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008688:	3308      	adds	r3, #8
 800868a:	4618      	mov	r0, r3
 800868c:	f003 fe10 	bl	800c2b0 <RCCEx_PLL2_Config>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8008696:	e014      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800869c:	3330      	adds	r3, #48	@ 0x30
 800869e:	4618      	mov	r0, r3
 80086a0:	f003 fe9e 	bl	800c3e0 <RCCEx_PLL3_Config>
 80086a4:	4603      	mov	r3, r0
 80086a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80086aa:	e00a      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80086b2:	e006      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80086b4:	bf00      	nop
 80086b6:	e004      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80086b8:	bf00      	nop
 80086ba:	e002      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80086bc:	bf00      	nop
 80086be:	e000      	b.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80086c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10d      	bne.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80086ca:	4b22      	ldr	r3, [pc, #136]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80086cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80086d0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80086d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80086dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80086de:	430b      	orrs	r3, r1
 80086e0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80086e4:	e003      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80086ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80086ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80086fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086fe:	2300      	movs	r3, #0
 8008700:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008704:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008708:	460b      	mov	r3, r1
 800870a:	4313      	orrs	r3, r2
 800870c:	d055      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800870e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008712:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008716:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800871a:	d035      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800871c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008720:	d82e      	bhi.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008722:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008726:	d031      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8008728:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800872c:	d828      	bhi.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800872e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008732:	d01b      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8008734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008738:	d822      	bhi.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800873e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008742:	d009      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8008744:	e01c      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008746:	4b03      	ldr	r3, [pc, #12]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800874a:	4a02      	ldr	r2, [pc, #8]	@ (8008754 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800874c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008750:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008752:	e01c      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8008754:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008758:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800875c:	3308      	adds	r3, #8
 800875e:	4618      	mov	r0, r3
 8008760:	f003 fda6 	bl	800c2b0 <RCCEx_PLL2_Config>
 8008764:	4603      	mov	r3, r0
 8008766:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800876a:	e010      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800876c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008770:	3330      	adds	r3, #48	@ 0x30
 8008772:	4618      	mov	r0, r3
 8008774:	f003 fe34 	bl	800c3e0 <RCCEx_PLL3_Config>
 8008778:	4603      	mov	r3, r0
 800877a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800877e:	e006      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008786:	e002      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8008788:	bf00      	nop
 800878a:	e000      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800878c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800878e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10d      	bne.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008796:	4bc3      	ldr	r3, [pc, #780]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800879c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80087a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80087a8:	4abe      	ldr	r2, [pc, #760]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80087aa:	430b      	orrs	r3, r1
 80087ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80087b0:	e003      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80087b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80087ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80087c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087ca:	2300      	movs	r3, #0
 80087cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80087d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80087d4:	460b      	mov	r3, r1
 80087d6:	4313      	orrs	r3, r2
 80087d8:	d051      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80087da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80087e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087e6:	d033      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80087e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087ec:	d82c      	bhi.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80087ee:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80087f2:	d02d      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80087f4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80087f8:	d826      	bhi.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80087fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087fe:	d019      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8008800:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008804:	d820      	bhi.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800880a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800880e:	d007      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8008810:	e01a      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008812:	4ba4      	ldr	r3, [pc, #656]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008816:	4aa3      	ldr	r2, [pc, #652]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800881c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800881e:	e018      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008820:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008824:	3308      	adds	r3, #8
 8008826:	4618      	mov	r0, r3
 8008828:	f003 fd42 	bl	800c2b0 <RCCEx_PLL2_Config>
 800882c:	4603      	mov	r3, r0
 800882e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008832:	e00e      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008834:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008838:	3330      	adds	r3, #48	@ 0x30
 800883a:	4618      	mov	r0, r3
 800883c:	f003 fdd0 	bl	800c3e0 <RCCEx_PLL3_Config>
 8008840:	4603      	mov	r3, r0
 8008842:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008846:	e004      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800884e:	e000      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8008850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008852:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10d      	bne.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800885a:	4b92      	ldr	r3, [pc, #584]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800885c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008860:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8008864:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008868:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800886c:	4a8d      	ldr	r2, [pc, #564]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800886e:	430b      	orrs	r3, r1
 8008870:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008874:	e003      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008876:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800887a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800887e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800888a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800888c:	2300      	movs	r3, #0
 800888e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008890:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008894:	460b      	mov	r3, r1
 8008896:	4313      	orrs	r3, r2
 8008898:	d032      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800889a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800889e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	d80f      	bhi.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d211      	bcs.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d911      	bls.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d109      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80088b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088b6:	3308      	adds	r3, #8
 80088b8:	4618      	mov	r0, r3
 80088ba:	f003 fcf9 	bl	800c2b0 <RCCEx_PLL2_Config>
 80088be:	4603      	mov	r3, r0
 80088c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80088c4:	e006      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80088cc:	e002      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80088ce:	bf00      	nop
 80088d0:	e000      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80088d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10d      	bne.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80088dc:	4b71      	ldr	r3, [pc, #452]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80088de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088e2:	f023 0107 	bic.w	r1, r3, #7
 80088e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80088ee:	4a6d      	ldr	r2, [pc, #436]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80088f0:	430b      	orrs	r3, r1
 80088f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80088f6:	e003      	b.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8008900:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	2100      	movs	r1, #0
 800890a:	6739      	str	r1, [r7, #112]	@ 0x70
 800890c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008910:	677b      	str	r3, [r7, #116]	@ 0x74
 8008912:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008916:	460b      	mov	r3, r1
 8008918:	4313      	orrs	r3, r2
 800891a:	d024      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800891c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008920:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008924:	2b00      	cmp	r3, #0
 8008926:	d005      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8008928:	2b08      	cmp	r3, #8
 800892a:	d005      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008932:	e002      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008934:	bf00      	nop
 8008936:	e000      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8008938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800893a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10d      	bne.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8008942:	4b58      	ldr	r3, [pc, #352]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008944:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008948:	f023 0108 	bic.w	r1, r3, #8
 800894c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008954:	4a53      	ldr	r2, [pc, #332]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008956:	430b      	orrs	r3, r1
 8008958:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800895c:	e003      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800895e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008962:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008966:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008972:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008974:	2300      	movs	r3, #0
 8008976:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008978:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800897c:	460b      	mov	r3, r1
 800897e:	4313      	orrs	r3, r2
 8008980:	f000 80b9 	beq.w	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8008984:	4b48      	ldr	r3, [pc, #288]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008988:	4a47      	ldr	r2, [pc, #284]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800898a:	f043 0301 	orr.w	r3, r3, #1
 800898e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008990:	f7fa fc20 	bl	80031d4 <HAL_GetTick>
 8008994:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008998:	e00b      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800899a:	f7fa fc1b 	bl	80031d4 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d903      	bls.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80089b0:	e005      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80089b2:	4b3d      	ldr	r3, [pc, #244]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80089b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0ed      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80089be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f040 8093 	bne.w	8008aee <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80089c8:	4b36      	ldr	r3, [pc, #216]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089d2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80089d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d023      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80089de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089e2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80089e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d01b      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80089ee:	4b2d      	ldr	r3, [pc, #180]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089f8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089fc:	4b29      	ldr	r3, [pc, #164]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80089fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a02:	4a28      	ldr	r2, [pc, #160]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a0c:	4b25      	ldr	r3, [pc, #148]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a12:	4a24      	ldr	r2, [pc, #144]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008a1c:	4a21      	ldr	r2, [pc, #132]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008a22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a26:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d019      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a32:	f7fa fbcf 	bl	80031d4 <HAL_GetTick>
 8008a36:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a3a:	e00d      	b.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a3c:	f7fa fbca 	bl	80031d4 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008a46:	1ad2      	subs	r2, r2, r3
 8008a48:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d903      	bls.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8008a56:	e006      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a58:	4b12      	ldr	r3, [pc, #72]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0ea      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8008a66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d13a      	bne.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008a6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a72:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a7e:	d115      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8008a80:	4b08      	ldr	r3, [pc, #32]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a8c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008a90:	091b      	lsrs	r3, r3, #4
 8008a92:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008a96:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8008a9a:	4a02      	ldr	r2, [pc, #8]	@ (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	61d3      	str	r3, [r2, #28]
 8008aa0:	e00a      	b.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8008aa2:	bf00      	nop
 8008aa4:	44020c00 	.word	0x44020c00
 8008aa8:	44020800 	.word	0x44020800
 8008aac:	4b9f      	ldr	r3, [pc, #636]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	4a9e      	ldr	r2, [pc, #632]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008ab2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008ab6:	61d3      	str	r3, [r2, #28]
 8008ab8:	4b9c      	ldr	r3, [pc, #624]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008abe:	4a9b      	ldr	r2, [pc, #620]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ac4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008ac8:	4b98      	ldr	r3, [pc, #608]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008aca:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8008ace:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ad2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8008ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ada:	4a94      	ldr	r2, [pc, #592]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008adc:	430b      	orrs	r3, r1
 8008ade:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008ae2:	e008      	b.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ae4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008ae8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8008aec:	e003      	b.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008af2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008af6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008b02:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b04:	2300      	movs	r3, #0
 8008b06:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	d035      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008b12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b16:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008b1a:	2b30      	cmp	r3, #48	@ 0x30
 8008b1c:	d014      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8008b1e:	2b30      	cmp	r3, #48	@ 0x30
 8008b20:	d80e      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008b22:	2b20      	cmp	r3, #32
 8008b24:	d012      	beq.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8008b26:	2b20      	cmp	r3, #32
 8008b28:	d80a      	bhi.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d010      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8008b2e:	2b10      	cmp	r3, #16
 8008b30:	d106      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b32:	4b7e      	ldr	r3, [pc, #504]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b36:	4a7d      	ldr	r2, [pc, #500]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b3c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8008b3e:	e008      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008b46:	e004      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008b48:	bf00      	nop
 8008b4a:	e002      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008b4c:	bf00      	nop
 8008b4e:	e000      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8008b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10d      	bne.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008b5a:	4b74      	ldr	r3, [pc, #464]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b60:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b68:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008b6c:	4a6f      	ldr	r2, [pc, #444]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008b6e:	430b      	orrs	r3, r1
 8008b70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008b74:	e003      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008b7a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008b7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008b8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b90:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008b94:	460b      	mov	r3, r1
 8008b96:	4313      	orrs	r3, r2
 8008b98:	d033      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8008b9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b9e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8008ba6:	2b40      	cmp	r3, #64	@ 0x40
 8008ba8:	d007      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8008baa:	e010      	b.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bac:	4b5f      	ldr	r3, [pc, #380]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb0:	4a5e      	ldr	r2, [pc, #376]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bb6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8008bb8:	e00d      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f003 fb75 	bl	800c2b0 <RCCEx_PLL2_Config>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8008bcc:	e003      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bd6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10d      	bne.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8008bde:	4b53      	ldr	r3, [pc, #332]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008be0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008be4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8008be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008bf0:	4a4e      	ldr	r2, [pc, #312]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008bf2:	430b      	orrs	r3, r1
 8008bf4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008bf8:	e003      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008bfe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008c0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c10:	2300      	movs	r3, #0
 8008c12:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c14:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	d033      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8008c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c22:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8008c2a:	2b80      	cmp	r3, #128	@ 0x80
 8008c2c:	d007      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8008c2e:	e010      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c30:	4b3e      	ldr	r3, [pc, #248]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c34:	4a3d      	ldr	r2, [pc, #244]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c3a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008c3c:	e00d      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c42:	3308      	adds	r3, #8
 8008c44:	4618      	mov	r0, r3
 8008c46:	f003 fb33 	bl	800c2b0 <RCCEx_PLL2_Config>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008c50:	e003      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10d      	bne.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8008c62:	4b32      	ldr	r3, [pc, #200]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008c64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c68:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8008c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c70:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008c74:	4a2d      	ldr	r2, [pc, #180]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008c76:	430b      	orrs	r3, r1
 8008c78:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008c7c:	e003      	b.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008c82:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008c86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8008c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c94:	2300      	movs	r3, #0
 8008c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c98:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	d04a      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8008ca2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d827      	bhi.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8008cae:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008cc9 	.word	0x08008cc9
 8008cb8:	08008cd7 	.word	0x08008cd7
 8008cbc:	08008ceb 	.word	0x08008ceb
 8008cc0:	08008d07 	.word	0x08008d07
 8008cc4:	08008d07 	.word	0x08008d07
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cc8:	4b18      	ldr	r3, [pc, #96]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ccc:	4a17      	ldr	r2, [pc, #92]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cd2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008cd4:	e018      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008cd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cda:	3308      	adds	r3, #8
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f003 fae7 	bl	800c2b0 <RCCEx_PLL2_Config>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008ce8:	e00e      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cee:	3330      	adds	r3, #48	@ 0x30
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f003 fb75 	bl	800c3e0 <RCCEx_PLL3_Config>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008cfc:	e004      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008d04:	e000      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8008d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10f      	bne.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008d10:	4b06      	ldr	r3, [pc, #24]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d16:	f023 0107 	bic.w	r1, r3, #7
 8008d1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d22:	4a02      	ldr	r2, [pc, #8]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008d24:	430b      	orrs	r3, r1
 8008d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008d2a:	e005      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8008d2c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d30:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008d34:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008d44:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d46:	2300      	movs	r3, #0
 8008d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d4a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4313      	orrs	r3, r2
 8008d52:	f000 8081 	beq.w	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8008d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008d5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d5e:	2b20      	cmp	r3, #32
 8008d60:	d85f      	bhi.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8008d62:	a201      	add	r2, pc, #4	@ (adr r2, 8008d68 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008ded 	.word	0x08008ded
 8008d6c:	08008e23 	.word	0x08008e23
 8008d70:	08008e23 	.word	0x08008e23
 8008d74:	08008e23 	.word	0x08008e23
 8008d78:	08008e23 	.word	0x08008e23
 8008d7c:	08008e23 	.word	0x08008e23
 8008d80:	08008e23 	.word	0x08008e23
 8008d84:	08008e23 	.word	0x08008e23
 8008d88:	08008dfb 	.word	0x08008dfb
 8008d8c:	08008e23 	.word	0x08008e23
 8008d90:	08008e23 	.word	0x08008e23
 8008d94:	08008e23 	.word	0x08008e23
 8008d98:	08008e23 	.word	0x08008e23
 8008d9c:	08008e23 	.word	0x08008e23
 8008da0:	08008e23 	.word	0x08008e23
 8008da4:	08008e23 	.word	0x08008e23
 8008da8:	08008e0f 	.word	0x08008e0f
 8008dac:	08008e23 	.word	0x08008e23
 8008db0:	08008e23 	.word	0x08008e23
 8008db4:	08008e23 	.word	0x08008e23
 8008db8:	08008e23 	.word	0x08008e23
 8008dbc:	08008e23 	.word	0x08008e23
 8008dc0:	08008e23 	.word	0x08008e23
 8008dc4:	08008e23 	.word	0x08008e23
 8008dc8:	08008e2b 	.word	0x08008e2b
 8008dcc:	08008e23 	.word	0x08008e23
 8008dd0:	08008e23 	.word	0x08008e23
 8008dd4:	08008e23 	.word	0x08008e23
 8008dd8:	08008e23 	.word	0x08008e23
 8008ddc:	08008e23 	.word	0x08008e23
 8008de0:	08008e23 	.word	0x08008e23
 8008de4:	08008e23 	.word	0x08008e23
 8008de8:	08008e2b 	.word	0x08008e2b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dec:	4bab      	ldr	r3, [pc, #684]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008df0:	4aaa      	ldr	r2, [pc, #680]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008df2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008df6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008df8:	e018      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008dfe:	3308      	adds	r3, #8
 8008e00:	4618      	mov	r0, r3
 8008e02:	f003 fa55 	bl	800c2b0 <RCCEx_PLL2_Config>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008e0c:	e00e      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e12:	3330      	adds	r3, #48	@ 0x30
 8008e14:	4618      	mov	r0, r3
 8008e16:	f003 fae3 	bl	800c3e0 <RCCEx_PLL3_Config>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008e20:	e004      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008e28:	e000      	b.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8008e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10d      	bne.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008e34:	4b99      	ldr	r3, [pc, #612]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008e3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e46:	4a95      	ldr	r2, [pc, #596]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008e48:	430b      	orrs	r3, r1
 8008e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e4e:	e003      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008e54:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008e58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e66:	2300      	movs	r3, #0
 8008e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e6a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4313      	orrs	r3, r2
 8008e72:	d04e      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8008e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e80:	d02e      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8008e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e86:	d827      	bhi.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008e88:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e8a:	d02b      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8008e8c:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e8e:	d823      	bhi.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008e90:	2b80      	cmp	r3, #128	@ 0x80
 8008e92:	d017      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8008e94:	2b80      	cmp	r3, #128	@ 0x80
 8008e96:	d81f      	bhi.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8008e9c:	2b40      	cmp	r3, #64	@ 0x40
 8008e9e:	d007      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8008ea0:	e01a      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea2:	4b7e      	ldr	r3, [pc, #504]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea6:	4a7d      	ldr	r2, [pc, #500]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eac:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008eae:	e01a      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f003 f9fa 	bl	800c2b0 <RCCEx_PLL2_Config>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008ec2:	e010      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008ec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ec8:	3330      	adds	r3, #48	@ 0x30
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f003 fa88 	bl	800c3e0 <RCCEx_PLL3_Config>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008ed6:	e006      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008ede:	e002      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008ee0:	bf00      	nop
 8008ee2:	e000      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10d      	bne.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008eee:	4b6b      	ldr	r3, [pc, #428]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ef4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f00:	4a66      	ldr	r2, [pc, #408]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008f02:	430b      	orrs	r3, r1
 8008f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008f08:	e003      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008f0e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8008f12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008f1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f20:	2300      	movs	r3, #0
 8008f22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f24:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	d055      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8008f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008f36:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008f3a:	d031      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8008f3c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008f40:	d82a      	bhi.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008f42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f46:	d02d      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8008f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f4c:	d824      	bhi.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008f4e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008f52:	d029      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8008f54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008f58:	d81e      	bhi.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f5e:	d011      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8008f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f64:	d818      	bhi.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d020      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8008f6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6e:	d113      	bne.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f74:	3308      	adds	r3, #8
 8008f76:	4618      	mov	r0, r3
 8008f78:	f003 f99a 	bl	800c2b0 <RCCEx_PLL2_Config>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008f82:	e014      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008f88:	3330      	adds	r3, #48	@ 0x30
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f003 fa28 	bl	800c3e0 <RCCEx_PLL3_Config>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8008f96:	e00a      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008f9e:	e006      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008fa0:	bf00      	nop
 8008fa2:	e004      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008fa4:	bf00      	nop
 8008fa6:	e002      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008fa8:	bf00      	nop
 8008faa:	e000      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10d      	bne.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8008fb6:	4b39      	ldr	r3, [pc, #228]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008fbc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008fc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008fc4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8008fc8:	4a34      	ldr	r2, [pc, #208]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008fd0:	e003      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008fd6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8008fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fe8:	2300      	movs	r3, #0
 8008fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	d058      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8008ff6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ffe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009002:	d031      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8009004:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009008:	d82a      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800900a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800900e:	d02d      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8009010:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009014:	d824      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009016:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800901a:	d029      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800901c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009020:	d81e      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8009022:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009026:	d011      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8009028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800902c:	d818      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800902e:	2b00      	cmp	r3, #0
 8009030:	d020      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8009032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009036:	d113      	bne.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009038:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800903c:	3308      	adds	r3, #8
 800903e:	4618      	mov	r0, r3
 8009040:	f003 f936 	bl	800c2b0 <RCCEx_PLL2_Config>
 8009044:	4603      	mov	r3, r0
 8009046:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800904a:	e014      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800904c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009050:	3330      	adds	r3, #48	@ 0x30
 8009052:	4618      	mov	r0, r3
 8009054:	f003 f9c4 	bl	800c3e0 <RCCEx_PLL3_Config>
 8009058:	4603      	mov	r3, r0
 800905a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800905e:	e00a      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009066:	e006      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009068:	bf00      	nop
 800906a:	e004      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800906c:	bf00      	nop
 800906e:	e002      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009070:	bf00      	nop
 8009072:	e000      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8009074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009076:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800907a:	2b00      	cmp	r3, #0
 800907c:	d110      	bne.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800907e:	4b07      	ldr	r3, [pc, #28]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009084:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8009088:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800908c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009090:	4902      	ldr	r1, [pc, #8]	@ (800909c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8009092:	4313      	orrs	r3, r2
 8009094:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009098:	e006      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800909a:	bf00      	nop
 800909c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80090a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	2100      	movs	r1, #0
 80090b2:	6239      	str	r1, [r7, #32]
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80090be:	460b      	mov	r3, r1
 80090c0:	4313      	orrs	r3, r2
 80090c2:	d055      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80090c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80090c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80090cc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80090d0:	d031      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80090d2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80090d6:	d82a      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80090d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090dc:	d02d      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80090de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090e2:	d824      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80090e4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80090e8:	d029      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80090ea:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80090ee:	d81e      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80090f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090f4:	d011      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80090f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090fa:	d818      	bhi.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d020      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8009100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009104:	d113      	bne.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009106:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800910a:	3308      	adds	r3, #8
 800910c:	4618      	mov	r0, r3
 800910e:	f003 f8cf 	bl	800c2b0 <RCCEx_PLL2_Config>
 8009112:	4603      	mov	r3, r0
 8009114:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009118:	e014      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800911a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800911e:	3330      	adds	r3, #48	@ 0x30
 8009120:	4618      	mov	r0, r3
 8009122:	f003 f95d 	bl	800c3e0 <RCCEx_PLL3_Config>
 8009126:	4603      	mov	r3, r0
 8009128:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800912c:	e00a      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009134:	e006      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009136:	bf00      	nop
 8009138:	e004      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800913a:	bf00      	nop
 800913c:	e002      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800913e:	bf00      	nop
 8009140:	e000      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8009142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009144:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10d      	bne.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800914c:	4b88      	ldr	r3, [pc, #544]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800914e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009152:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8009156:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800915a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800915e:	4984      	ldr	r1, [pc, #528]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009160:	4313      	orrs	r3, r2
 8009162:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009166:	e003      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009168:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800916c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009178:	2100      	movs	r1, #0
 800917a:	61b9      	str	r1, [r7, #24]
 800917c:	f003 0302 	and.w	r3, r3, #2
 8009180:	61fb      	str	r3, [r7, #28]
 8009182:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009186:	460b      	mov	r3, r1
 8009188:	4313      	orrs	r3, r2
 800918a:	d03d      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800918c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009190:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009194:	2b03      	cmp	r3, #3
 8009196:	d81c      	bhi.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8009198:	a201      	add	r2, pc, #4	@ (adr r2, 80091a0 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	080091db 	.word	0x080091db
 80091a4:	080091b1 	.word	0x080091b1
 80091a8:	080091bf 	.word	0x080091bf
 80091ac:	080091db 	.word	0x080091db
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091b0:	4b6f      	ldr	r3, [pc, #444]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80091b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b4:	4a6e      	ldr	r2, [pc, #440]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80091b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091ba:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80091bc:	e00e      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80091be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80091c2:	3308      	adds	r3, #8
 80091c4:	4618      	mov	r0, r3
 80091c6:	f003 f873 	bl	800c2b0 <RCCEx_PLL2_Config>
 80091ca:	4603      	mov	r3, r0
 80091cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80091d0:	e004      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80091d8:	e000      	b.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80091da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10d      	bne.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80091e4:	4b62      	ldr	r3, [pc, #392]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80091e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091ea:	f023 0203 	bic.w	r2, r3, #3
 80091ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80091f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80091f6:	495e      	ldr	r1, [pc, #376]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80091fe:	e003      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009200:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009204:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009208:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800920c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009210:	2100      	movs	r1, #0
 8009212:	6139      	str	r1, [r7, #16]
 8009214:	f003 0304 	and.w	r3, r3, #4
 8009218:	617b      	str	r3, [r7, #20]
 800921a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800921e:	460b      	mov	r3, r1
 8009220:	4313      	orrs	r3, r2
 8009222:	d03a      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8009224:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009228:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800922c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009230:	d00e      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8009232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009236:	d815      	bhi.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8009238:	2b00      	cmp	r3, #0
 800923a:	d017      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800923c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009240:	d110      	bne.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009242:	4b4b      	ldr	r3, [pc, #300]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009246:	4a4a      	ldr	r2, [pc, #296]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800924c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800924e:	e00e      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009250:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009254:	3308      	adds	r3, #8
 8009256:	4618      	mov	r0, r3
 8009258:	f003 f82a 	bl	800c2b0 <RCCEx_PLL2_Config>
 800925c:	4603      	mov	r3, r0
 800925e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8009262:	e004      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800926a:	e000      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800926c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800926e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10d      	bne.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8009276:	4b3e      	ldr	r3, [pc, #248]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800927c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009280:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009284:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009288:	4939      	ldr	r1, [pc, #228]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800928a:	4313      	orrs	r3, r2
 800928c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8009290:	e003      	b.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009292:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009296:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800929a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	2100      	movs	r1, #0
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	f003 0310 	and.w	r3, r3, #16
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80092b0:	460b      	mov	r3, r1
 80092b2:	4313      	orrs	r3, r2
 80092b4:	d038      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80092b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80092ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80092be:	2b30      	cmp	r3, #48	@ 0x30
 80092c0:	d01b      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80092c2:	2b30      	cmp	r3, #48	@ 0x30
 80092c4:	d815      	bhi.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80092c6:	2b10      	cmp	r3, #16
 80092c8:	d002      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	d007      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80092ce:	e010      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092d0:	4b27      	ldr	r3, [pc, #156]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80092d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d4:	4a26      	ldr	r2, [pc, #152]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80092d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092da:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80092dc:	e00e      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80092de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80092e2:	3330      	adds	r3, #48	@ 0x30
 80092e4:	4618      	mov	r0, r3
 80092e6:	f003 f87b 	bl	800c3e0 <RCCEx_PLL3_Config>
 80092ea:	4603      	mov	r3, r0
 80092ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80092f0:	e004      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80092f8:	e000      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80092fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10d      	bne.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8009304:	4b1a      	ldr	r3, [pc, #104]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009306:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800930a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800930e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009312:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009316:	4916      	ldr	r1, [pc, #88]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009318:	4313      	orrs	r3, r2
 800931a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800931e:	e003      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009320:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009324:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009328:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800932c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009330:	2100      	movs	r1, #0
 8009332:	6039      	str	r1, [r7, #0]
 8009334:	f003 0308 	and.w	r3, r3, #8
 8009338:	607b      	str	r3, [r7, #4]
 800933a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800933e:	460b      	mov	r3, r1
 8009340:	4313      	orrs	r3, r2
 8009342:	d00c      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8009344:	4b0a      	ldr	r3, [pc, #40]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800934a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800934e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009352:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8009356:	4906      	ldr	r1, [pc, #24]	@ (8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8009358:	4313      	orrs	r3, r2
 800935a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800935e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8009362:	4618      	mov	r0, r3
 8009364:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8009368:	46bd      	mov	sp, r7
 800936a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800936e:	bf00      	nop
 8009370:	44020c00 	.word	0x44020c00

08009374 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8009374:	b480      	push	{r7}
 8009376:	b08b      	sub	sp, #44	@ 0x2c
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800937c:	4bae      	ldr	r3, [pc, #696]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800937e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009384:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009386:	4bac      	ldr	r3, [pc, #688]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8009390:	4ba9      	ldr	r3, [pc, #676]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009394:	0a1b      	lsrs	r3, r3, #8
 8009396:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800939a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800939c:	4ba6      	ldr	r3, [pc, #664]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800939e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a0:	091b      	lsrs	r3, r3, #4
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80093a8:	4ba3      	ldr	r3, [pc, #652]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80093aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ac:	08db      	lsrs	r3, r3, #3
 80093ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	fb02 f303 	mul.w	r3, r2, r3
 80093b8:	ee07 3a90 	vmov	s15, r3
 80093bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 8126 	beq.w	8009618 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d053      	beq.n	800947a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d86f      	bhi.n	80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d003      	beq.n	80093e6 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d02b      	beq.n	800943c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80093e4:	e068      	b.n	80094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093e6:	4b94      	ldr	r3, [pc, #592]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	08db      	lsrs	r3, r3, #3
 80093ec:	f003 0303 	and.w	r3, r3, #3
 80093f0:	4a92      	ldr	r2, [pc, #584]	@ (800963c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80093f2:	fa22 f303 	lsr.w	r3, r2, r3
 80093f6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	ee07 3a90 	vmov	s15, r3
 8009408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941a:	ed97 6a04 	vldr	s12, [r7, #16]
 800941e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8009640 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8009422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800942e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009436:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800943a:	e068      	b.n	800950e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009446:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009644 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800944a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	ee07 3a90 	vmov	s15, r3
 8009454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009458:	ed97 6a04 	vldr	s12, [r7, #16]
 800945c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009640 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8009460:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009464:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009468:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800946c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009474:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009478:	e049      	b.n	800950e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	ee07 3a90 	vmov	s15, r3
 8009480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009484:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009648 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8009488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	ee07 3a90 	vmov	s15, r3
 8009492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009496:	ed97 6a04 	vldr	s12, [r7, #16]
 800949a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8009640 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800949e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80094b6:	e02a      	b.n	800950e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094b8:	4b5f      	ldr	r3, [pc, #380]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	08db      	lsrs	r3, r3, #3
 80094be:	f003 0303 	and.w	r3, r3, #3
 80094c2:	4a5e      	ldr	r2, [pc, #376]	@ (800963c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80094c4:	fa22 f303 	lsr.w	r3, r2, r3
 80094c8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	ee07 3a90 	vmov	s15, r3
 80094d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094e2:	6a3b      	ldr	r3, [r7, #32]
 80094e4:	ee07 3a90 	vmov	s15, r3
 80094e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80094f0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009640 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80094f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009508:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800950c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800950e:	4b4a      	ldr	r3, [pc, #296]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009516:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800951a:	d121      	bne.n	8009560 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800951c:	4b46      	ldr	r3, [pc, #280]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800951e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009524:	2b00      	cmp	r3, #0
 8009526:	d017      	beq.n	8009558 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009528:	4b43      	ldr	r3, [pc, #268]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800952a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800952c:	0a5b      	lsrs	r3, r3, #9
 800952e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800953a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800953e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8009542:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800954a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800954e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	601a      	str	r2, [r3, #0]
 8009556:	e006      	b.n	8009566 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	e002      	b.n	8009566 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009566:	4b34      	ldr	r3, [pc, #208]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800956e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009572:	d121      	bne.n	80095b8 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009574:	4b30      	ldr	r3, [pc, #192]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d017      	beq.n	80095b0 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009580:	4b2d      	ldr	r3, [pc, #180]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009584:	0c1b      	lsrs	r3, r3, #16
 8009586:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800958a:	ee07 3a90 	vmov	s15, r3
 800958e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009592:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009596:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800959a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800959e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095a6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	605a      	str	r2, [r3, #4]
 80095ae:	e006      	b.n	80095be <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	605a      	str	r2, [r3, #4]
 80095b6:	e002      	b.n	80095be <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095be:	4b1e      	ldr	r3, [pc, #120]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095ca:	d121      	bne.n	8009610 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80095cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80095ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d017      	beq.n	8009608 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80095d8:	4b17      	ldr	r3, [pc, #92]	@ (8009638 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80095da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095dc:	0e1b      	lsrs	r3, r3, #24
 80095de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095e2:	ee07 3a90 	vmov	s15, r3
 80095e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80095ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095ee:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80095f2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80095f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095fe:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009606:	e010      	b.n	800962a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	609a      	str	r2, [r3, #8]
}
 800960e:	e00c      	b.n	800962a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	609a      	str	r2, [r3, #8]
}
 8009616:	e008      	b.n	800962a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	609a      	str	r2, [r3, #8]
}
 800962a:	bf00      	nop
 800962c:	372c      	adds	r7, #44	@ 0x2c
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	44020c00 	.word	0x44020c00
 800963c:	03d09000 	.word	0x03d09000
 8009640:	46000000 	.word	0x46000000
 8009644:	4a742400 	.word	0x4a742400
 8009648:	4af42400 	.word	0x4af42400

0800964c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800964c:	b480      	push	{r7}
 800964e:	b08b      	sub	sp, #44	@ 0x2c
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009654:	4bae      	ldr	r3, [pc, #696]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800965e:	4bac      	ldr	r3, [pc, #688]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009662:	f003 0303 	and.w	r3, r3, #3
 8009666:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8009668:	4ba9      	ldr	r3, [pc, #676]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	0a1b      	lsrs	r3, r3, #8
 800966e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009672:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009674:	4ba6      	ldr	r3, [pc, #664]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009678:	091b      	lsrs	r3, r3, #4
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009680:	4ba3      	ldr	r3, [pc, #652]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009684:	08db      	lsrs	r3, r3, #3
 8009686:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	fb02 f303 	mul.w	r3, r2, r3
 8009690:	ee07 3a90 	vmov	s15, r3
 8009694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009698:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 8126 	beq.w	80098f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d053      	beq.n	8009752 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d86f      	bhi.n	8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d003      	beq.n	80096be <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d02b      	beq.n	8009714 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80096bc:	e068      	b.n	8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096be:	4b94      	ldr	r3, [pc, #592]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	08db      	lsrs	r3, r3, #3
 80096c4:	f003 0303 	and.w	r3, r3, #3
 80096c8:	4a92      	ldr	r2, [pc, #584]	@ (8009914 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80096ca:	fa22 f303 	lsr.w	r3, r2, r3
 80096ce:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	ee07 3a90 	vmov	s15, r3
 80096d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	ee07 3a90 	vmov	s15, r3
 80096e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f2:	ed97 6a04 	vldr	s12, [r7, #16]
 80096f6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8009918 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80096fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800970a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009712:	e068      	b.n	80097e6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	ee07 3a90 	vmov	s15, r3
 800971a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800991c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8009722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	ee07 3a90 	vmov	s15, r3
 800972c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009730:	ed97 6a04 	vldr	s12, [r7, #16]
 8009734:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009918 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800973c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009740:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800974c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009750:	e049      	b.n	80097e6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	ee07 3a90 	vmov	s15, r3
 8009758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009920 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8009760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976e:	ed97 6a04 	vldr	s12, [r7, #16]
 8009772:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8009918 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800977a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800977e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800978a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800978e:	e02a      	b.n	80097e6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009790:	4b5f      	ldr	r3, [pc, #380]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	08db      	lsrs	r3, r3, #3
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	4a5e      	ldr	r2, [pc, #376]	@ (8009914 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800979c:	fa22 f303 	lsr.w	r3, r2, r3
 80097a0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	ee07 3a90 	vmov	s15, r3
 80097a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	ee07 3a90 	vmov	s15, r3
 80097b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	ee07 3a90 	vmov	s15, r3
 80097c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097c4:	ed97 6a04 	vldr	s12, [r7, #16]
 80097c8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009918 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80097cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097e0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80097e4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097e6:	4b4a      	ldr	r3, [pc, #296]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097f2:	d121      	bne.n	8009838 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80097f4:	4b46      	ldr	r3, [pc, #280]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80097f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d017      	beq.n	8009830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009800:	4b43      	ldr	r3, [pc, #268]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009804:	0a5b      	lsrs	r3, r3, #9
 8009806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800980a:	ee07 3a90 	vmov	s15, r3
 800980e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8009812:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009816:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800981a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800981e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009826:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	e006      	b.n	800983e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	e002      	b.n	800983e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800983e:	4b34      	ldr	r3, [pc, #208]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009846:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800984a:	d121      	bne.n	8009890 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800984c:	4b30      	ldr	r3, [pc, #192]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800984e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d017      	beq.n	8009888 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009858:	4b2d      	ldr	r3, [pc, #180]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800985a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800985c:	0c1b      	lsrs	r3, r3, #16
 800985e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800986a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800986e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009872:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800987a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800987e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	605a      	str	r2, [r3, #4]
 8009886:	e006      	b.n	8009896 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	605a      	str	r2, [r3, #4]
 800988e:	e002      	b.n	8009896 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009896:	4b1e      	ldr	r3, [pc, #120]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800989e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098a2:	d121      	bne.n	80098e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80098a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80098a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d017      	beq.n	80098e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80098b0:	4b17      	ldr	r3, [pc, #92]	@ (8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80098b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098b4:	0e1b      	lsrs	r3, r3, #24
 80098b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80098c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80098c6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80098ca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80098ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098d6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80098de:	e010      	b.n	8009902 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	609a      	str	r2, [r3, #8]
}
 80098e6:	e00c      	b.n	8009902 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	609a      	str	r2, [r3, #8]
}
 80098ee:	e008      	b.n	8009902 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	609a      	str	r2, [r3, #8]
}
 8009902:	bf00      	nop
 8009904:	372c      	adds	r7, #44	@ 0x2c
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	44020c00 	.word	0x44020c00
 8009914:	03d09000 	.word	0x03d09000
 8009918:	46000000 	.word	0x46000000
 800991c:	4a742400 	.word	0x4a742400
 8009920:	4af42400 	.word	0x4af42400

08009924 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8009924:	b480      	push	{r7}
 8009926:	b08b      	sub	sp, #44	@ 0x2c
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800992c:	4bae      	ldr	r3, [pc, #696]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800992e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009934:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009936:	4bac      	ldr	r3, [pc, #688]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800993a:	f003 0303 	and.w	r3, r3, #3
 800993e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8009940:	4ba9      	ldr	r3, [pc, #676]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009944:	0a1b      	lsrs	r3, r3, #8
 8009946:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800994a:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800994c:	4ba6      	ldr	r3, [pc, #664]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800994e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009950:	091b      	lsrs	r3, r3, #4
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009958:	4ba3      	ldr	r3, [pc, #652]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800995a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800995c:	08db      	lsrs	r3, r3, #3
 800995e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	fb02 f303 	mul.w	r3, r2, r3
 8009968:	ee07 3a90 	vmov	s15, r3
 800996c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009970:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	2b00      	cmp	r3, #0
 8009978:	f000 8126 	beq.w	8009bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	2b03      	cmp	r3, #3
 8009980:	d053      	beq.n	8009a2a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	2b03      	cmp	r3, #3
 8009986:	d86f      	bhi.n	8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d003      	beq.n	8009996 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	2b02      	cmp	r3, #2
 8009992:	d02b      	beq.n	80099ec <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8009994:	e068      	b.n	8009a68 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009996:	4b94      	ldr	r3, [pc, #592]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	08db      	lsrs	r3, r3, #3
 800999c:	f003 0303 	and.w	r3, r3, #3
 80099a0:	4a92      	ldr	r2, [pc, #584]	@ (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80099a2:	fa22 f303 	lsr.w	r3, r2, r3
 80099a6:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	ee07 3a90 	vmov	s15, r3
 80099b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	ee07 3a90 	vmov	s15, r3
 80099c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ca:	ed97 6a04 	vldr	s12, [r7, #16]
 80099ce:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8009bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80099d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80099ea:	e068      	b.n	8009abe <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80099fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fe:	6a3b      	ldr	r3, [r7, #32]
 8009a00:	ee07 3a90 	vmov	s15, r3
 8009a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a08:	ed97 6a04 	vldr	s12, [r7, #16]
 8009a0c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a24:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009a28:	e049      	b.n	8009abe <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	ee07 3a90 	vmov	s15, r3
 8009a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a34:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8009a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a3c:	6a3b      	ldr	r3, [r7, #32]
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a46:	ed97 6a04 	vldr	s12, [r7, #16]
 8009a4a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8009bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a62:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009a66:	e02a      	b.n	8009abe <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a68:	4b5f      	ldr	r3, [pc, #380]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	08db      	lsrs	r3, r3, #3
 8009a6e:	f003 0303 	and.w	r3, r3, #3
 8009a72:	4a5e      	ldr	r2, [pc, #376]	@ (8009bec <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8009a74:	fa22 f303 	lsr.w	r3, r2, r3
 8009a78:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	ee07 3a90 	vmov	s15, r3
 8009a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	ee07 3a90 	vmov	s15, r3
 8009a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	ee07 3a90 	vmov	s15, r3
 8009a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a9c:	ed97 6a04 	vldr	s12, [r7, #16]
 8009aa0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009abc:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009abe:	4b4a      	ldr	r3, [pc, #296]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009aca:	d121      	bne.n	8009b10 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009acc:	4b46      	ldr	r3, [pc, #280]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d017      	beq.n	8009b08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009ad8:	4b43      	ldr	r3, [pc, #268]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009adc:	0a5b      	lsrs	r3, r3, #9
 8009ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ae2:	ee07 3a90 	vmov	s15, r3
 8009ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8009aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009aee:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009af2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009afe:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	e006      	b.n	8009b16 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	e002      	b.n	8009b16 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b16:	4b34      	ldr	r3, [pc, #208]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b22:	d121      	bne.n	8009b68 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009b24:	4b30      	ldr	r3, [pc, #192]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d017      	beq.n	8009b60 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009b30:	4b2d      	ldr	r3, [pc, #180]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b34:	0c1b      	lsrs	r3, r3, #16
 8009b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b3a:	ee07 3a90 	vmov	s15, r3
 8009b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009b42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b46:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009b4a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b56:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	605a      	str	r2, [r3, #4]
 8009b5e:	e006      	b.n	8009b6e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	605a      	str	r2, [r3, #4]
 8009b66:	e002      	b.n	8009b6e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b7a:	d121      	bne.n	8009bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d017      	beq.n	8009bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009b88:	4b17      	ldr	r3, [pc, #92]	@ (8009be8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b8c:	0e1b      	lsrs	r3, r3, #24
 8009b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b92:	ee07 3a90 	vmov	s15, r3
 8009b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8009b9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b9e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009ba2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bae:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8009bb6:	e010      	b.n	8009bda <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	609a      	str	r2, [r3, #8]
}
 8009bbe:	e00c      	b.n	8009bda <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	609a      	str	r2, [r3, #8]
}
 8009bc6:	e008      	b.n	8009bda <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	609a      	str	r2, [r3, #8]
}
 8009bda:	bf00      	nop
 8009bdc:	372c      	adds	r7, #44	@ 0x2c
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	44020c00 	.word	0x44020c00
 8009bec:	03d09000 	.word	0x03d09000
 8009bf0:	46000000 	.word	0x46000000
 8009bf4:	4a742400 	.word	0x4a742400
 8009bf8:	4af42400 	.word	0x4af42400

08009bfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009bfc:	b590      	push	{r4, r7, lr}
 8009bfe:	b08f      	sub	sp, #60	@ 0x3c
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c0a:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8009c0e:	4321      	orrs	r1, r4
 8009c10:	d150      	bne.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009c12:	4b26      	ldr	r3, [pc, #152]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c1c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009c1e:	4b23      	ldr	r3, [pc, #140]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c24:	f003 0302 	and.w	r3, r3, #2
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d108      	bne.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c32:	d104      	bne.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009c34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c3a:	f002 bb2a 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c4c:	d108      	bne.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c54:	d104      	bne.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8009c56:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c5c:	f002 bb19 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8009c60:	4b12      	ldr	r3, [pc, #72]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c6c:	d119      	bne.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c74:	d115      	bne.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009c76:	4b0d      	ldr	r3, [pc, #52]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8009c7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c82:	d30a      	bcc.n	8009c9a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8009c84:	4b09      	ldr	r3, [pc, #36]	@ (8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	0a1b      	lsrs	r3, r3, #8
 8009c8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c8e:	4a08      	ldr	r2, [pc, #32]	@ (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009c96:	f002 bafc 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009c9e:	f002 baf8 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca6:	f002 baf4 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009caa:	bf00      	nop
 8009cac:	44020c00 	.word	0x44020c00
 8009cb0:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8009cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cb8:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8009cbc:	ea50 0104 	orrs.w	r1, r0, r4
 8009cc0:	f001 8275 	beq.w	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8009cc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cc8:	2801      	cmp	r0, #1
 8009cca:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8009cce:	f082 82dd 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cd6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8009cda:	ea50 0104 	orrs.w	r1, r0, r4
 8009cde:	f001 816c 	beq.w	800afba <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8009ce2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ce6:	2801      	cmp	r0, #1
 8009ce8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8009cec:	f082 82ce 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cf4:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8009cf8:	ea50 0104 	orrs.w	r1, r0, r4
 8009cfc:	f001 8602 	beq.w	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8009d00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d04:	2801      	cmp	r0, #1
 8009d06:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8009d0a:	f082 82bf 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d12:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8009d16:	ea50 0104 	orrs.w	r1, r0, r4
 8009d1a:	f001 854c 	beq.w	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8009d1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d22:	2801      	cmp	r0, #1
 8009d24:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8009d28:	f082 82b0 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d30:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8009d34:	ea50 0104 	orrs.w	r1, r0, r4
 8009d38:	f001 849e 	beq.w	800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8009d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d40:	2801      	cmp	r0, #1
 8009d42:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8009d46:	f082 82a1 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d4e:	f1a1 0420 	sub.w	r4, r1, #32
 8009d52:	ea50 0104 	orrs.w	r1, r0, r4
 8009d56:	f001 83e8 	beq.w	800b52a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8009d5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d5e:	2801      	cmp	r0, #1
 8009d60:	f171 0120 	sbcs.w	r1, r1, #32
 8009d64:	f082 8292 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d6c:	f1a1 0410 	sub.w	r4, r1, #16
 8009d70:	ea50 0104 	orrs.w	r1, r0, r4
 8009d74:	f002 8256 	beq.w	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8009d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d7c:	2801      	cmp	r0, #1
 8009d7e:	f171 0110 	sbcs.w	r1, r1, #16
 8009d82:	f082 8283 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d8a:	f1a1 0408 	sub.w	r4, r1, #8
 8009d8e:	ea50 0104 	orrs.w	r1, r0, r4
 8009d92:	f002 81cc 	beq.w	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8009d96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d9a:	2801      	cmp	r0, #1
 8009d9c:	f171 0108 	sbcs.w	r1, r1, #8
 8009da0:	f082 8274 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009da4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009da8:	1f0c      	subs	r4, r1, #4
 8009daa:	ea50 0104 	orrs.w	r1, r0, r4
 8009dae:	f001 8648 	beq.w	800ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8009db2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009db6:	2801      	cmp	r0, #1
 8009db8:	f171 0104 	sbcs.w	r1, r1, #4
 8009dbc:	f082 8266 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dc4:	1e8c      	subs	r4, r1, #2
 8009dc6:	ea50 0104 	orrs.w	r1, r0, r4
 8009dca:	f002 8143 	beq.w	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8009dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dd2:	2801      	cmp	r0, #1
 8009dd4:	f171 0102 	sbcs.w	r1, r1, #2
 8009dd8:	f082 8258 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ddc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009de0:	1e4c      	subs	r4, r1, #1
 8009de2:	ea50 0104 	orrs.w	r1, r0, r4
 8009de6:	f002 80ce 	beq.w	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8009dea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dee:	2801      	cmp	r0, #1
 8009df0:	f171 0101 	sbcs.w	r1, r1, #1
 8009df4:	f082 824a 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dfc:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8009e00:	4321      	orrs	r1, r4
 8009e02:	f002 8059 	beq.w	800beb8 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8009e06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e0a:	4cd9      	ldr	r4, [pc, #868]	@ (800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8009e0c:	42a0      	cmp	r0, r4
 8009e0e:	f171 0100 	sbcs.w	r1, r1, #0
 8009e12:	f082 823b 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e1a:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8009e1e:	4321      	orrs	r1, r4
 8009e20:	f001 87d9 	beq.w	800bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8009e24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e28:	4cd2      	ldr	r4, [pc, #840]	@ (800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8009e2a:	42a0      	cmp	r0, r4
 8009e2c:	f171 0100 	sbcs.w	r1, r1, #0
 8009e30:	f082 822c 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e38:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8009e3c:	4321      	orrs	r1, r4
 8009e3e:	f001 8751 	beq.w	800bce4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8009e42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e46:	4ccc      	ldr	r4, [pc, #816]	@ (800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009e48:	42a0      	cmp	r0, r4
 8009e4a:	f171 0100 	sbcs.w	r1, r1, #0
 8009e4e:	f082 821d 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e56:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8009e5a:	4321      	orrs	r1, r4
 8009e5c:	f001 869a 	beq.w	800bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8009e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e64:	4cc5      	ldr	r4, [pc, #788]	@ (800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8009e66:	42a0      	cmp	r0, r4
 8009e68:	f171 0100 	sbcs.w	r1, r1, #0
 8009e6c:	f082 820e 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e74:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8009e78:	4321      	orrs	r1, r4
 8009e7a:	f001 8612 	beq.w	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8009e7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e82:	4cbf      	ldr	r4, [pc, #764]	@ (800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8009e84:	42a0      	cmp	r0, r4
 8009e86:	f171 0100 	sbcs.w	r1, r1, #0
 8009e8a:	f082 81ff 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e92:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8009e96:	4321      	orrs	r1, r4
 8009e98:	f002 817e 	beq.w	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8009e9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ea0:	4cb8      	ldr	r4, [pc, #736]	@ (800a184 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009ea2:	42a0      	cmp	r0, r4
 8009ea4:	f171 0100 	sbcs.w	r1, r1, #0
 8009ea8:	f082 81f0 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009eac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009eb0:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8009eb4:	4321      	orrs	r1, r4
 8009eb6:	f000 829e 	beq.w	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8009eba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ebe:	4cb2      	ldr	r4, [pc, #712]	@ (800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009ec0:	42a0      	cmp	r0, r4
 8009ec2:	f171 0100 	sbcs.w	r1, r1, #0
 8009ec6:	f082 81e1 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009eca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ece:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8009ed2:	4321      	orrs	r1, r4
 8009ed4:	f000 826d 	beq.w	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8009ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009edc:	4cab      	ldr	r4, [pc, #684]	@ (800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009ede:	42a0      	cmp	r0, r4
 8009ee0:	f171 0100 	sbcs.w	r1, r1, #0
 8009ee4:	f082 81d2 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009eec:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8009ef0:	4321      	orrs	r1, r4
 8009ef2:	f001 800d 	beq.w	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8009ef6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009efa:	4ca5      	ldr	r4, [pc, #660]	@ (800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009efc:	42a0      	cmp	r0, r4
 8009efe:	f171 0100 	sbcs.w	r1, r1, #0
 8009f02:	f082 81c3 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f0a:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8009f0e:	4321      	orrs	r1, r4
 8009f10:	f000 81d0 	beq.w	800a2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8009f14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f18:	4c9e      	ldr	r4, [pc, #632]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8009f1a:	42a0      	cmp	r0, r4
 8009f1c:	f171 0100 	sbcs.w	r1, r1, #0
 8009f20:	f082 81b4 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f28:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8009f2c:	4321      	orrs	r1, r4
 8009f2e:	f000 8142 	beq.w	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8009f32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f36:	4c98      	ldr	r4, [pc, #608]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8009f38:	42a0      	cmp	r0, r4
 8009f3a:	f171 0100 	sbcs.w	r1, r1, #0
 8009f3e:	f082 81a5 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f46:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8009f4a:	4321      	orrs	r1, r4
 8009f4c:	f001 824e 	beq.w	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8009f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f54:	4c91      	ldr	r4, [pc, #580]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8009f56:	42a0      	cmp	r0, r4
 8009f58:	f171 0100 	sbcs.w	r1, r1, #0
 8009f5c:	f082 8196 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f64:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8009f68:	4321      	orrs	r1, r4
 8009f6a:	f001 8197 	beq.w	800b29c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8009f6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f72:	4c8b      	ldr	r4, [pc, #556]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8009f74:	42a0      	cmp	r0, r4
 8009f76:	f171 0100 	sbcs.w	r1, r1, #0
 8009f7a:	f082 8187 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f82:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8009f86:	4321      	orrs	r1, r4
 8009f88:	f001 8154 	beq.w	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8009f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f90:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8009f94:	f171 0100 	sbcs.w	r1, r1, #0
 8009f98:	f082 8178 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fa0:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8009fa4:	4321      	orrs	r1, r4
 8009fa6:	f001 80b7 	beq.w	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8009faa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fae:	f248 0401 	movw	r4, #32769	@ 0x8001
 8009fb2:	42a0      	cmp	r0, r4
 8009fb4:	f171 0100 	sbcs.w	r1, r1, #0
 8009fb8:	f082 8168 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fc0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8009fc4:	4321      	orrs	r1, r4
 8009fc6:	f001 8064 	beq.w	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8009fca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fce:	f244 0401 	movw	r4, #16385	@ 0x4001
 8009fd2:	42a0      	cmp	r0, r4
 8009fd4:	f171 0100 	sbcs.w	r1, r1, #0
 8009fd8:	f082 8158 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fe0:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8009fe4:	4321      	orrs	r1, r4
 8009fe6:	f001 8011 	beq.w	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8009fea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fee:	f242 0401 	movw	r4, #8193	@ 0x2001
 8009ff2:	42a0      	cmp	r0, r4
 8009ff4:	f171 0100 	sbcs.w	r1, r1, #0
 8009ff8:	f082 8148 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009ffc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a000:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800a004:	4321      	orrs	r1, r4
 800a006:	f000 871e 	beq.w	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800a00a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a00e:	f241 0401 	movw	r4, #4097	@ 0x1001
 800a012:	42a0      	cmp	r0, r4
 800a014:	f171 0100 	sbcs.w	r1, r1, #0
 800a018:	f082 8138 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a01c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a020:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800a024:	4321      	orrs	r1, r4
 800a026:	f000 86a8 	beq.w	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800a02a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a02e:	f640 0401 	movw	r4, #2049	@ 0x801
 800a032:	42a0      	cmp	r0, r4
 800a034:	f171 0100 	sbcs.w	r1, r1, #0
 800a038:	f082 8128 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a03c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a040:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800a044:	4321      	orrs	r1, r4
 800a046:	f000 8632 	beq.w	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800a04a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a04e:	f240 4401 	movw	r4, #1025	@ 0x401
 800a052:	42a0      	cmp	r0, r4
 800a054:	f171 0100 	sbcs.w	r1, r1, #0
 800a058:	f082 8118 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a05c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a060:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800a064:	4321      	orrs	r1, r4
 800a066:	f000 85b0 	beq.w	800abca <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800a06a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a06e:	f240 2401 	movw	r4, #513	@ 0x201
 800a072:	42a0      	cmp	r0, r4
 800a074:	f171 0100 	sbcs.w	r1, r1, #0
 800a078:	f082 8108 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a07c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a080:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800a084:	4321      	orrs	r1, r4
 800a086:	f000 8535 	beq.w	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800a08a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a08e:	f240 1401 	movw	r4, #257	@ 0x101
 800a092:	42a0      	cmp	r0, r4
 800a094:	f171 0100 	sbcs.w	r1, r1, #0
 800a098:	f082 80f8 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a09c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0a0:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800a0a4:	4321      	orrs	r1, r4
 800a0a6:	f000 84ba 	beq.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800a0aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0ae:	2881      	cmp	r0, #129	@ 0x81
 800a0b0:	f171 0100 	sbcs.w	r1, r1, #0
 800a0b4:	f082 80ea 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a0b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0bc:	2821      	cmp	r0, #33	@ 0x21
 800a0be:	f171 0100 	sbcs.w	r1, r1, #0
 800a0c2:	d26f      	bcs.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a0c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0c8:	4301      	orrs	r1, r0
 800a0ca:	f002 80df 	beq.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a0ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0d2:	1e42      	subs	r2, r0, #1
 800a0d4:	f141 33ff 	adc.w	r3, r1, #4294967295
 800a0d8:	2a20      	cmp	r2, #32
 800a0da:	f173 0100 	sbcs.w	r1, r3, #0
 800a0de:	f082 80d5 	bcs.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a0e2:	2a1f      	cmp	r2, #31
 800a0e4:	f202 80d2 	bhi.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800a0e8:	a101      	add	r1, pc, #4	@ (adr r1, 800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800a0ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a0ee:	bf00      	nop
 800a0f0:	0800a451 	.word	0x0800a451
 800a0f4:	0800a51d 	.word	0x0800a51d
 800a0f8:	0800c28d 	.word	0x0800c28d
 800a0fc:	0800a5dd 	.word	0x0800a5dd
 800a100:	0800c28d 	.word	0x0800c28d
 800a104:	0800c28d 	.word	0x0800c28d
 800a108:	0800c28d 	.word	0x0800c28d
 800a10c:	0800a6ad 	.word	0x0800a6ad
 800a110:	0800c28d 	.word	0x0800c28d
 800a114:	0800c28d 	.word	0x0800c28d
 800a118:	0800c28d 	.word	0x0800c28d
 800a11c:	0800c28d 	.word	0x0800c28d
 800a120:	0800c28d 	.word	0x0800c28d
 800a124:	0800c28d 	.word	0x0800c28d
 800a128:	0800c28d 	.word	0x0800c28d
 800a12c:	0800a78f 	.word	0x0800a78f
 800a130:	0800c28d 	.word	0x0800c28d
 800a134:	0800c28d 	.word	0x0800c28d
 800a138:	0800c28d 	.word	0x0800c28d
 800a13c:	0800c28d 	.word	0x0800c28d
 800a140:	0800c28d 	.word	0x0800c28d
 800a144:	0800c28d 	.word	0x0800c28d
 800a148:	0800c28d 	.word	0x0800c28d
 800a14c:	0800c28d 	.word	0x0800c28d
 800a150:	0800c28d 	.word	0x0800c28d
 800a154:	0800c28d 	.word	0x0800c28d
 800a158:	0800c28d 	.word	0x0800c28d
 800a15c:	0800c28d 	.word	0x0800c28d
 800a160:	0800c28d 	.word	0x0800c28d
 800a164:	0800c28d 	.word	0x0800c28d
 800a168:	0800c28d 	.word	0x0800c28d
 800a16c:	0800a865 	.word	0x0800a865
 800a170:	80000001 	.word	0x80000001
 800a174:	40000001 	.word	0x40000001
 800a178:	20000001 	.word	0x20000001
 800a17c:	10000001 	.word	0x10000001
 800a180:	08000001 	.word	0x08000001
 800a184:	04000001 	.word	0x04000001
 800a188:	00800001 	.word	0x00800001
 800a18c:	00400001 	.word	0x00400001
 800a190:	00200001 	.word	0x00200001
 800a194:	00100001 	.word	0x00100001
 800a198:	00080001 	.word	0x00080001
 800a19c:	00040001 	.word	0x00040001
 800a1a0:	00020001 	.word	0x00020001
 800a1a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1a8:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800a1ac:	430b      	orrs	r3, r1
 800a1ae:	f000 83c4 	beq.w	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800a1b2:	f002 b86b 	b.w	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a1b6:	4ba1      	ldr	r3, [pc, #644]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a1b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1bc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a1c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1c8:	d036      	beq.n	800a238 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1d0:	d86b      	bhi.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1d8:	d02b      	beq.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1e0:	d863      	bhi.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1e8:	d01b      	beq.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1f0:	d85b      	bhi.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d004      	beq.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1fe:	d008      	beq.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800a200:	e053      	b.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a202:	f107 0320 	add.w	r3, r7, #32
 800a206:	4618      	mov	r0, r3
 800a208:	f7ff f8b4 	bl	8009374 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a210:	e04e      	b.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a212:	f107 0314 	add.w	r3, r7, #20
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff fa18 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a220:	e046      	b.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a222:	f107 0308 	add.w	r3, r7, #8
 800a226:	4618      	mov	r0, r3
 800a228:	f7ff fb7c 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a230:	e03e      	b.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a232:	4b83      	ldr	r3, [pc, #524]	@ (800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a234:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a236:	e03b      	b.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a238:	4b80      	ldr	r3, [pc, #512]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a23a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a23e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a242:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a244:	4b7d      	ldr	r3, [pc, #500]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0302 	and.w	r3, r3, #2
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d10c      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800a250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a252:	2b00      	cmp	r3, #0
 800a254:	d109      	bne.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a256:	4b79      	ldr	r3, [pc, #484]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	08db      	lsrs	r3, r3, #3
 800a25c:	f003 0303 	and.w	r3, r3, #3
 800a260:	4a78      	ldr	r2, [pc, #480]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800a262:	fa22 f303 	lsr.w	r3, r2, r3
 800a266:	637b      	str	r3, [r7, #52]	@ 0x34
 800a268:	e01e      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a26a:	4b74      	ldr	r3, [pc, #464]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a276:	d106      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a27e:	d102      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a280:	4b71      	ldr	r3, [pc, #452]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800a282:	637b      	str	r3, [r7, #52]	@ 0x34
 800a284:	e010      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a286:	4b6d      	ldr	r3, [pc, #436]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a28e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a292:	d106      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800a294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a296:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a29a:	d102      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a29c:	4b6b      	ldr	r3, [pc, #428]	@ (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a29e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2a0:	e002      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a2a6:	e003      	b.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800a2a8:	e002      	b.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2ae:	bf00      	nop
          }
        }
        break;
 800a2b0:	f001 bfef 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a2b4:	4b61      	ldr	r3, [pc, #388]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a2b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a2ba:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800a2be:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2c6:	d036      	beq.n	800a336 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2ce:	d86b      	bhi.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a2d6:	d02b      	beq.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a2de:	d863      	bhi.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2e6:	d01b      	beq.n	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2ee:	d85b      	bhi.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d004      	beq.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a2fc:	d008      	beq.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800a2fe:	e053      	b.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a300:	f107 0320 	add.w	r3, r7, #32
 800a304:	4618      	mov	r0, r3
 800a306:	f7ff f835 	bl	8009374 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a30e:	e04e      	b.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a310:	f107 0314 	add.w	r3, r7, #20
 800a314:	4618      	mov	r0, r3
 800a316:	f7ff f999 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a31e:	e046      	b.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a320:	f107 0308 	add.w	r3, r7, #8
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff fafd 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a32e:	e03e      	b.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a330:	4b43      	ldr	r3, [pc, #268]	@ (800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a332:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a334:	e03b      	b.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a336:	4b41      	ldr	r3, [pc, #260]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a33c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a340:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a342:	4b3e      	ldr	r3, [pc, #248]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0302 	and.w	r3, r3, #2
 800a34a:	2b02      	cmp	r3, #2
 800a34c:	d10c      	bne.n	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800a34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a350:	2b00      	cmp	r3, #0
 800a352:	d109      	bne.n	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a354:	4b39      	ldr	r3, [pc, #228]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	08db      	lsrs	r3, r3, #3
 800a35a:	f003 0303 	and.w	r3, r3, #3
 800a35e:	4a39      	ldr	r2, [pc, #228]	@ (800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800a360:	fa22 f303 	lsr.w	r3, r2, r3
 800a364:	637b      	str	r3, [r7, #52]	@ 0x34
 800a366:	e01e      	b.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a368:	4b34      	ldr	r3, [pc, #208]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a374:	d106      	bne.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a37c:	d102      	bne.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a37e:	4b32      	ldr	r3, [pc, #200]	@ (800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800a380:	637b      	str	r3, [r7, #52]	@ 0x34
 800a382:	e010      	b.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a384:	4b2d      	ldr	r3, [pc, #180]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a38c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a390:	d106      	bne.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800a392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a394:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a398:	d102      	bne.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a39a:	4b2c      	ldr	r3, [pc, #176]	@ (800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a39c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a39e:	e002      	b.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a3a4:	e003      	b.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800a3a6:	e002      	b.n	800a3ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a3ac:	bf00      	nop
          }
        }
        break;
 800a3ae:	f001 bf70 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800a3b2:	4b22      	ldr	r3, [pc, #136]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a3b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a3b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3bc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800a3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d108      	bne.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3c4:	f107 0320 	add.w	r3, r7, #32
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fe ffd3 	bl	8009374 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a3d2:	f001 bf5e 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d8:	2b40      	cmp	r3, #64	@ 0x40
 800a3da:	d108      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3dc:	f107 0314 	add.w	r3, r7, #20
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7ff f933 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3ea:	f001 bf52 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3f2:	f001 bf4e 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800a3f6:	4b11      	ldr	r3, [pc, #68]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a3f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a3fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a400:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800a402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a404:	2b00      	cmp	r3, #0
 800a406:	d108      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a408:	f107 0320 	add.w	r3, r7, #32
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7fe ffb1 	bl	8009374 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a414:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a416:	f001 bf3c 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	2b80      	cmp	r3, #128	@ 0x80
 800a41e:	d108      	bne.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a420:	f107 0314 	add.w	r3, r7, #20
 800a424:	4618      	mov	r0, r3
 800a426:	f7ff f911 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a42e:	f001 bf30 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a432:	2300      	movs	r3, #0
 800a434:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a436:	f001 bf2c 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a43a:	bf00      	nop
 800a43c:	44020c00 	.word	0x44020c00
 800a440:	00bb8000 	.word	0x00bb8000
 800a444:	03d09000 	.word	0x03d09000
 800a448:	003d0900 	.word	0x003d0900
 800a44c:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a450:	4b9d      	ldr	r3, [pc, #628]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a452:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a456:	f003 0307 	and.w	r3, r3, #7
 800a45a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d104      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a462:	f7fc ffd1 	bl	8007408 <HAL_RCC_GetPCLK2Freq>
 800a466:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a468:	f001 bf13 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800a46c:	4b96      	ldr	r3, [pc, #600]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a474:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a478:	d10a      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800a47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d107      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a480:	f107 0314 	add.w	r3, r7, #20
 800a484:	4618      	mov	r0, r3
 800a486:	f7ff f8e1 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a48e:	e043      	b.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800a490:	4b8d      	ldr	r3, [pc, #564]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a49c:	d10a      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800a49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d107      	bne.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4a4:	f107 0308 	add.w	r3, r7, #8
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7ff fa3b 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4b2:	e031      	b.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a4b4:	4b84      	ldr	r3, [pc, #528]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0302 	and.w	r3, r3, #2
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d10c      	bne.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800a4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c2:	2b03      	cmp	r3, #3
 800a4c4:	d109      	bne.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a4c6:	4b80      	ldr	r3, [pc, #512]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	08db      	lsrs	r3, r3, #3
 800a4cc:	f003 0303 	and.w	r3, r3, #3
 800a4d0:	4a7e      	ldr	r2, [pc, #504]	@ (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a4d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4d8:	e01e      	b.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800a4da:	4b7b      	ldr	r3, [pc, #492]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4e6:	d105      	bne.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ea:	2b04      	cmp	r3, #4
 800a4ec:	d102      	bne.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800a4ee:	4b78      	ldr	r3, [pc, #480]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a4f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4f2:	e011      	b.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a4f4:	4b74      	ldr	r3, [pc, #464]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a4f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d106      	bne.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800a502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a504:	2b05      	cmp	r3, #5
 800a506:	d103      	bne.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800a508:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a50c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a50e:	e003      	b.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800a510:	2300      	movs	r3, #0
 800a512:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a514:	f001 bebd 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a518:	f001 bebb 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a51c:	4b6a      	ldr	r3, [pc, #424]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a51e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a522:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a526:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d104      	bne.n	800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a52e:	f7fc ff55 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800a532:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a534:	f001 bead 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800a538:	4b63      	ldr	r3, [pc, #396]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a544:	d10a      	bne.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800a546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a548:	2b08      	cmp	r3, #8
 800a54a:	d107      	bne.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a54c:	f107 0314 	add.w	r3, r7, #20
 800a550:	4618      	mov	r0, r3
 800a552:	f7ff f87b 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	637b      	str	r3, [r7, #52]	@ 0x34
 800a55a:	e03d      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800a55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55e:	2b10      	cmp	r3, #16
 800a560:	d108      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a562:	f107 0308 	add.w	r3, r7, #8
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff f9dc 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a570:	f001 be8f 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a574:	4b54      	ldr	r3, [pc, #336]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0302 	and.w	r3, r3, #2
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d10c      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800a580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a582:	2b18      	cmp	r3, #24
 800a584:	d109      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a586:	4b50      	ldr	r3, [pc, #320]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	08db      	lsrs	r3, r3, #3
 800a58c:	f003 0303 	and.w	r3, r3, #3
 800a590:	4a4e      	ldr	r2, [pc, #312]	@ (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a592:	fa22 f303 	lsr.w	r3, r2, r3
 800a596:	637b      	str	r3, [r7, #52]	@ 0x34
 800a598:	e01e      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800a59a:	4b4b      	ldr	r3, [pc, #300]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5a6:	d105      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5aa:	2b20      	cmp	r3, #32
 800a5ac:	d102      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800a5ae:	4b48      	ldr	r3, [pc, #288]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a5b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5b2:	e011      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a5b4:	4b44      	ldr	r3, [pc, #272]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a5b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5ba:	f003 0302 	and.w	r3, r3, #2
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d106      	bne.n	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c4:	2b28      	cmp	r3, #40	@ 0x28
 800a5c6:	d103      	bne.n	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800a5c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5ce:	e003      	b.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5d4:	f001 be5d 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a5d8:	f001 be5b 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a5dc:	4b3a      	ldr	r3, [pc, #232]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a5de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a5e2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a5e6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d104      	bne.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a5ee:	f7fc fef5 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800a5f2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800a5f4:	f001 be4d 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800a5f8:	4b33      	ldr	r3, [pc, #204]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a600:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a604:	d10a      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800a606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a608:	2b40      	cmp	r3, #64	@ 0x40
 800a60a:	d107      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a60c:	f107 0314 	add.w	r3, r7, #20
 800a610:	4618      	mov	r0, r3
 800a612:	f7ff f81b 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	637b      	str	r3, [r7, #52]	@ 0x34
 800a61a:	e045      	b.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800a61c:	4b2a      	ldr	r3, [pc, #168]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a628:	d10a      	bne.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800a62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62c:	2b80      	cmp	r3, #128	@ 0x80
 800a62e:	d107      	bne.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a630:	f107 0308 	add.w	r3, r7, #8
 800a634:	4618      	mov	r0, r3
 800a636:	f7ff f975 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a63e:	e033      	b.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a640:	4b21      	ldr	r3, [pc, #132]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 0302 	and.w	r3, r3, #2
 800a648:	2b02      	cmp	r3, #2
 800a64a:	d10c      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800a64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a650:	d109      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a652:	4b1d      	ldr	r3, [pc, #116]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	08db      	lsrs	r3, r3, #3
 800a658:	f003 0303 	and.w	r3, r3, #3
 800a65c:	4a1b      	ldr	r2, [pc, #108]	@ (800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800a65e:	fa22 f303 	lsr.w	r3, r2, r3
 800a662:	637b      	str	r3, [r7, #52]	@ 0x34
 800a664:	e020      	b.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800a666:	4b18      	ldr	r3, [pc, #96]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a66e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a672:	d106      	bne.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800a674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a67a:	d102      	bne.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800a67c:	4b14      	ldr	r3, [pc, #80]	@ (800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800a67e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a680:	e012      	b.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a682:	4b11      	ldr	r3, [pc, #68]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a688:	f003 0302 	and.w	r3, r3, #2
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d107      	bne.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800a690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a692:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a696:	d103      	bne.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800a698:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a69c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a69e:	e003      	b.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a6a4:	f001 bdf5 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6a8:	f001 bdf3 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a6ac:	4b06      	ldr	r3, [pc, #24]	@ (800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800a6ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a6b2:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a6b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10a      	bne.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a6be:	f7fc fe8d 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800a6c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800a6c4:	f001 bde5 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6c8:	44020c00 	.word	0x44020c00
 800a6cc:	03d09000 	.word	0x03d09000
 800a6d0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800a6d4:	4ba0      	ldr	r3, [pc, #640]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6e0:	d10b      	bne.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6e8:	d107      	bne.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ea:	f107 0314 	add.w	r3, r7, #20
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe ffac 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6f8:	e047      	b.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800a6fa:	4b97      	ldr	r3, [pc, #604]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a702:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a706:	d10b      	bne.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800a708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a70e:	d107      	bne.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a710:	f107 0308 	add.w	r3, r7, #8
 800a714:	4618      	mov	r0, r3
 800a716:	f7ff f905 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a71e:	e034      	b.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a720:	4b8d      	ldr	r3, [pc, #564]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0302 	and.w	r3, r3, #2
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d10d      	bne.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800a72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a732:	d109      	bne.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a734:	4b88      	ldr	r3, [pc, #544]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	08db      	lsrs	r3, r3, #3
 800a73a:	f003 0303 	and.w	r3, r3, #3
 800a73e:	4a87      	ldr	r2, [pc, #540]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a740:	fa22 f303 	lsr.w	r3, r2, r3
 800a744:	637b      	str	r3, [r7, #52]	@ 0x34
 800a746:	e020      	b.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800a748:	4b83      	ldr	r3, [pc, #524]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a754:	d106      	bne.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800a756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a758:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a75c:	d102      	bne.n	800a764 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800a75e:	4b80      	ldr	r3, [pc, #512]	@ (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a760:	637b      	str	r3, [r7, #52]	@ 0x34
 800a762:	e012      	b.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a764:	4b7c      	ldr	r3, [pc, #496]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d107      	bne.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a774:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a778:	d103      	bne.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800a77a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a77e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a780:	e003      	b.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a786:	f001 bd84 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a78a:	f001 bd82 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a78e:	4b72      	ldr	r3, [pc, #456]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a790:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a794:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a798:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d104      	bne.n	800a7aa <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a7a0:	f7fc fe1c 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800a7a4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800a7a6:	f001 bd74 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800a7aa:	4b6b      	ldr	r3, [pc, #428]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7b6:	d10b      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7be:	d107      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7c0:	f107 0314 	add.w	r3, r7, #20
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe ff41 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7ce:	e047      	b.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800a7d0:	4b61      	ldr	r3, [pc, #388]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7dc:	d10b      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800a7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7e4:	d107      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7e6:	f107 0308 	add.w	r3, r7, #8
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7ff f89a 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7f4:	e034      	b.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a7f6:	4b58      	ldr	r3, [pc, #352]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 0302 	and.w	r3, r3, #2
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d10d      	bne.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800a802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a804:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a808:	d109      	bne.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a80a:	4b53      	ldr	r3, [pc, #332]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	08db      	lsrs	r3, r3, #3
 800a810:	f003 0303 	and.w	r3, r3, #3
 800a814:	4a51      	ldr	r2, [pc, #324]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a816:	fa22 f303 	lsr.w	r3, r2, r3
 800a81a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a81c:	e020      	b.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800a81e:	4b4e      	ldr	r3, [pc, #312]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a82a:	d106      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800a82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a832:	d102      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800a834:	4b4a      	ldr	r3, [pc, #296]	@ (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a836:	637b      	str	r3, [r7, #52]	@ 0x34
 800a838:	e012      	b.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a83a:	4b47      	ldr	r3, [pc, #284]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a83c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a840:	f003 0302 	and.w	r3, r3, #2
 800a844:	2b02      	cmp	r3, #2
 800a846:	d107      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800a848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a84e:	d103      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800a850:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a854:	637b      	str	r3, [r7, #52]	@ 0x34
 800a856:	e003      	b.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800a858:	2300      	movs	r3, #0
 800a85a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a85c:	f001 bd19 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a860:	f001 bd17 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a864:	4b3c      	ldr	r3, [pc, #240]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a866:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a86a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a86e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a872:	2b00      	cmp	r3, #0
 800a874:	d104      	bne.n	800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a876:	f7fc fdb1 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800a87a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800a87c:	f001 bd09 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800a880:	4b35      	ldr	r3, [pc, #212]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a888:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a88c:	d10b      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a890:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a894:	d107      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a896:	f107 0314 	add.w	r3, r7, #20
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7fe fed6 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8a4:	e047      	b.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800a8a6:	4b2c      	ldr	r3, [pc, #176]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8b2:	d10b      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8ba:	d107      	bne.n	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8bc:	f107 0308 	add.w	r3, r7, #8
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7ff f82f 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8ca:	e034      	b.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a8cc:	4b22      	ldr	r3, [pc, #136]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 0302 	and.w	r3, r3, #2
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d10d      	bne.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8da:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a8de:	d109      	bne.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a8e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	08db      	lsrs	r3, r3, #3
 800a8e6:	f003 0303 	and.w	r3, r3, #3
 800a8ea:	4a1c      	ldr	r2, [pc, #112]	@ (800a95c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800a8ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a8f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8f2:	e020      	b.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800a8f4:	4b18      	ldr	r3, [pc, #96]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a900:	d106      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800a902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a908:	d102      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800a90a:	4b15      	ldr	r3, [pc, #84]	@ (800a960 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800a90c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a90e:	e012      	b.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a910:	4b11      	ldr	r3, [pc, #68]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d107      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800a91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a920:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a924:	d103      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800a926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a92a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a92c:	e003      	b.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a932:	f001 bcae 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a936:	f001 bcac 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800a93a:	4b07      	ldr	r3, [pc, #28]	@ (800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800a93c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a940:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800a944:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800a946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10b      	bne.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a94c:	f7fc fd46 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800a950:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800a952:	f001 bc9e 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a956:	bf00      	nop
 800a958:	44020c00 	.word	0x44020c00
 800a95c:	03d09000 	.word	0x03d09000
 800a960:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800a964:	4ba0      	ldr	r3, [pc, #640]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a96c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a970:	d10b      	bne.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800a972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a974:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a978:	d107      	bne.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a97a:	f107 0314 	add.w	r3, r7, #20
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fe fe64 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	637b      	str	r3, [r7, #52]	@ 0x34
 800a988:	e047      	b.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800a98a:	4b97      	ldr	r3, [pc, #604]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a992:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a996:	d10b      	bne.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800a998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a99e:	d107      	bne.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9a0:	f107 0308 	add.w	r3, r7, #8
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fe ffbd 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9ae:	e034      	b.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800a9b0:	4b8d      	ldr	r3, [pc, #564]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 0302 	and.w	r3, r3, #2
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d10d      	bne.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a9c2:	d109      	bne.n	800a9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9c4:	4b88      	ldr	r3, [pc, #544]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	08db      	lsrs	r3, r3, #3
 800a9ca:	f003 0303 	and.w	r3, r3, #3
 800a9ce:	4a87      	ldr	r2, [pc, #540]	@ (800abec <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9d6:	e020      	b.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800a9d8:	4b83      	ldr	r3, [pc, #524]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9e4:	d106      	bne.n	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9ec:	d102      	bne.n	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800a9ee:	4b80      	ldr	r3, [pc, #512]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a9f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9f2:	e012      	b.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800a9f4:	4b7c      	ldr	r3, [pc, #496]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a9f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9fa:	f003 0302 	and.w	r3, r3, #2
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d107      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800aa02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa04:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800aa08:	d103      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800aa0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa10:	e003      	b.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800aa12:	2300      	movs	r3, #0
 800aa14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa16:	f001 bc3c 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aa1a:	f001 bc3a 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800aa1e:	4b72      	ldr	r3, [pc, #456]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800aa24:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800aa28:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d104      	bne.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800aa30:	f7fc fcd4 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800aa34:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800aa36:	f001 bc2c 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800aa3a:	4b6b      	ldr	r3, [pc, #428]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa46:	d10b      	bne.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800aa48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa4e:	d107      	bne.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa50:	f107 0314 	add.w	r3, r7, #20
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fe fdf9 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa5e:	e047      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800aa60:	4b61      	ldr	r3, [pc, #388]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa6c:	d10b      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa74:	d107      	bne.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa76:	f107 0308 	add.w	r3, r7, #8
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe ff52 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa84:	e034      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800aa86:	4b58      	ldr	r3, [pc, #352]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 0302 	and.w	r3, r3, #2
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d10d      	bne.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800aa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aa98:	d109      	bne.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa9a:	4b53      	ldr	r3, [pc, #332]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	08db      	lsrs	r3, r3, #3
 800aaa0:	f003 0303 	and.w	r3, r3, #3
 800aaa4:	4a51      	ldr	r2, [pc, #324]	@ (800abec <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800aaa6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaac:	e020      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800aaae:	4b4e      	ldr	r3, [pc, #312]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aab6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaba:	d106      	bne.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800aabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aac2:	d102      	bne.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800aac4:	4b4a      	ldr	r3, [pc, #296]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800aac6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aac8:	e012      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800aaca:	4b47      	ldr	r3, [pc, #284]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aacc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aad0:	f003 0302 	and.w	r3, r3, #2
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d107      	bne.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800aad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aada:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800aade:	d103      	bne.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800aae0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aae4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aae6:	e003      	b.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800aae8:	2300      	movs	r3, #0
 800aaea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aaec:	f001 bbd1 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aaf0:	f001 bbcf 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800aaf4:	4b3c      	ldr	r3, [pc, #240]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aaf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800aafa:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800aafe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800ab00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d104      	bne.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab06:	f7fc fc69 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800ab0a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800ab0c:	f001 bbc1 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800ab10:	4b35      	ldr	r3, [pc, #212]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab1c:	d10b      	bne.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab24:	d107      	bne.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab26:	f107 0314 	add.w	r3, r7, #20
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe fd8e 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab34:	e047      	b.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800ab36:	4b2c      	ldr	r3, [pc, #176]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab42:	d10b      	bne.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800ab44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab4a:	d107      	bne.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab4c:	f107 0308 	add.w	r3, r7, #8
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe fee7 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab5a:	e034      	b.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800ab5c:	4b22      	ldr	r3, [pc, #136]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 0302 	and.w	r3, r3, #2
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d10d      	bne.n	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800ab68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ab6e:	d109      	bne.n	800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab70:	4b1d      	ldr	r3, [pc, #116]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	08db      	lsrs	r3, r3, #3
 800ab76:	f003 0303 	and.w	r3, r3, #3
 800ab7a:	4a1c      	ldr	r2, [pc, #112]	@ (800abec <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800ab7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab82:	e020      	b.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800ab84:	4b18      	ldr	r3, [pc, #96]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab90:	d106      	bne.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800ab92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab98:	d102      	bne.n	800aba0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800ab9a:	4b15      	ldr	r3, [pc, #84]	@ (800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800ab9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab9e:	e012      	b.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800aba0:	4b11      	ldr	r3, [pc, #68]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800aba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aba6:	f003 0302 	and.w	r3, r3, #2
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d107      	bne.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800abae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800abb4:	d103      	bne.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800abb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abba:	637b      	str	r3, [r7, #52]	@ 0x34
 800abbc:	e003      	b.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800abbe:	2300      	movs	r3, #0
 800abc0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abc2:	f001 bb66 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800abc6:	f001 bb64 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800abca:	4b07      	ldr	r3, [pc, #28]	@ (800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800abcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800abd0:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800abd4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10b      	bne.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800abdc:	f7fc fbfe 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800abe0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800abe2:	f001 bb56 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800abe6:	bf00      	nop
 800abe8:	44020c00 	.word	0x44020c00
 800abec:	03d09000 	.word	0x03d09000
 800abf0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800abf4:	4ba1      	ldr	r3, [pc, #644]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac00:	d10b      	bne.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800ac02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac08:	d107      	bne.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac0a:	f107 0314 	add.w	r3, r7, #20
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fe fd1c 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac18:	e047      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800ac1a:	4b98      	ldr	r3, [pc, #608]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac26:	d10b      	bne.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800ac28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac2e:	d107      	bne.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac30:	f107 0308 	add.w	r3, r7, #8
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7fe fe75 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac3e:	e034      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800ac40:	4b8e      	ldr	r3, [pc, #568]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 0302 	and.w	r3, r3, #2
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d10d      	bne.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800ac52:	d109      	bne.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac54:	4b89      	ldr	r3, [pc, #548]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	08db      	lsrs	r3, r3, #3
 800ac5a:	f003 0303 	and.w	r3, r3, #3
 800ac5e:	4a88      	ldr	r2, [pc, #544]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800ac60:	fa22 f303 	lsr.w	r3, r2, r3
 800ac64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac66:	e020      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800ac68:	4b84      	ldr	r3, [pc, #528]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac74:	d106      	bne.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800ac76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac7c:	d102      	bne.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800ac7e:	4b81      	ldr	r3, [pc, #516]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800ac80:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac82:	e012      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800ac84:	4b7d      	ldr	r3, [pc, #500]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ac86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac8a:	f003 0302 	and.w	r3, r3, #2
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d107      	bne.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800ac98:	d103      	bne.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800ac9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aca0:	e003      	b.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aca6:	f001 baf4 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800acaa:	f001 baf2 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800acae:	4b73      	ldr	r3, [pc, #460]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800acb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800acb4:	f003 0307 	and.w	r3, r3, #7
 800acb8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800acba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d104      	bne.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800acc0:	f7fc fb8c 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800acc4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800acc6:	f001 bae4 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800acca:	4b6c      	ldr	r3, [pc, #432]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acd6:	d10a      	bne.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800acd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d107      	bne.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acde:	f107 0314 	add.w	r3, r7, #20
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe fcb2 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	637b      	str	r3, [r7, #52]	@ 0x34
 800acec:	e043      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800acee:	4b63      	ldr	r3, [pc, #396]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acfa:	d10a      	bne.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800acfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	d107      	bne.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad02:	f107 0308 	add.w	r3, r7, #8
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe fe0c 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad10:	e031      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800ad12:	4b5a      	ldr	r3, [pc, #360]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f003 0302 	and.w	r3, r3, #2
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d10c      	bne.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad20:	2b03      	cmp	r3, #3
 800ad22:	d109      	bne.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ad24:	4b55      	ldr	r3, [pc, #340]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	08db      	lsrs	r3, r3, #3
 800ad2a:	f003 0303 	and.w	r3, r3, #3
 800ad2e:	4a54      	ldr	r2, [pc, #336]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800ad30:	fa22 f303 	lsr.w	r3, r2, r3
 800ad34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad36:	e01e      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800ad38:	4b50      	ldr	r3, [pc, #320]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad44:	d105      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800ad46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad48:	2b04      	cmp	r3, #4
 800ad4a:	d102      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800ad4c:	4b4d      	ldr	r3, [pc, #308]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800ad4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad50:	e011      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800ad52:	4b4a      	ldr	r3, [pc, #296]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad58:	f003 0302 	and.w	r3, r3, #2
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d106      	bne.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800ad60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad62:	2b05      	cmp	r3, #5
 800ad64:	d103      	bne.n	800ad6e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800ad66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad6c:	e003      	b.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad72:	f001 ba8e 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ad76:	f001 ba8c 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800ad7a:	4b40      	ldr	r3, [pc, #256]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ad80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad84:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800ad86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d104      	bne.n	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad8c:	f7fc fb26 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800ad90:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800ad92:	f001 ba7e 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800ad96:	4b39      	ldr	r3, [pc, #228]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ada2:	d10a      	bne.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800ada4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada6:	2b10      	cmp	r3, #16
 800ada8:	d107      	bne.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adaa:	f107 0314 	add.w	r3, r7, #20
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fe fc4c 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800adb8:	e043      	b.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800adba:	4b30      	ldr	r3, [pc, #192]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800adc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adc6:	d10a      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800adc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adca:	2b20      	cmp	r3, #32
 800adcc:	d107      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adce:	f107 0308 	add.w	r3, r7, #8
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe fda6 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	637b      	str	r3, [r7, #52]	@ 0x34
 800addc:	e031      	b.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800adde:	4b27      	ldr	r3, [pc, #156]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 0302 	and.w	r3, r3, #2
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d10c      	bne.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800adea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adec:	2b30      	cmp	r3, #48	@ 0x30
 800adee:	d109      	bne.n	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800adf0:	4b22      	ldr	r3, [pc, #136]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	08db      	lsrs	r3, r3, #3
 800adf6:	f003 0303 	and.w	r3, r3, #3
 800adfa:	4a21      	ldr	r2, [pc, #132]	@ (800ae80 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800adfc:	fa22 f303 	lsr.w	r3, r2, r3
 800ae00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae02:	e01e      	b.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800ae04:	4b1d      	ldr	r3, [pc, #116]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae10:	d105      	bne.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800ae12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae14:	2b40      	cmp	r3, #64	@ 0x40
 800ae16:	d102      	bne.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800ae18:	4b1a      	ldr	r3, [pc, #104]	@ (800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800ae1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae1c:	e011      	b.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800ae1e:	4b17      	ldr	r3, [pc, #92]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ae20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae24:	f003 0302 	and.w	r3, r3, #2
 800ae28:	2b02      	cmp	r3, #2
 800ae2a:	d106      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800ae2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae2e:	2b50      	cmp	r3, #80	@ 0x50
 800ae30:	d103      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800ae32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae38:	e003      	b.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae3e:	f001 ba28 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae42:	f001 ba26 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ae46:	4b0d      	ldr	r3, [pc, #52]	@ (800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800ae48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae4c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ae50:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800ae52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d104      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800ae58:	f7fc faec 	bl	8007434 <HAL_RCC_GetPCLK3Freq>
 800ae5c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ae5e:	f001 ba18 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800ae62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae68:	d10e      	bne.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae6a:	f107 0314 	add.w	r3, r7, #20
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fbec 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae78:	f001 ba0b 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae7c:	44020c00 	.word	0x44020c00
 800ae80:	03d09000 	.word	0x03d09000
 800ae84:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800ae88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae8e:	d108      	bne.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae90:	f107 0308 	add.w	r3, r7, #8
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fe fd45 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae9e:	f001 b9f8 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800aea2:	4ba4      	ldr	r3, [pc, #656]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 0302 	and.w	r3, r3, #2
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d10d      	bne.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800aeae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aeb4:	d109      	bne.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aeb6:	4b9f      	ldr	r3, [pc, #636]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	08db      	lsrs	r3, r3, #3
 800aebc:	f003 0303 	and.w	r3, r3, #3
 800aec0:	4a9d      	ldr	r2, [pc, #628]	@ (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800aec2:	fa22 f303 	lsr.w	r3, r2, r3
 800aec6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aec8:	e020      	b.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800aeca:	4b9a      	ldr	r3, [pc, #616]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aed6:	d106      	bne.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800aed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aede:	d102      	bne.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800aee0:	4b96      	ldr	r3, [pc, #600]	@ (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800aee2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aee4:	e012      	b.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800aee6:	4b93      	ldr	r3, [pc, #588]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800aee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aeec:	f003 0302 	and.w	r3, r3, #2
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d107      	bne.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800aef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800aefa:	d103      	bne.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800aefc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af00:	637b      	str	r3, [r7, #52]	@ 0x34
 800af02:	e003      	b.n	800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800af04:	2300      	movs	r3, #0
 800af06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af08:	f001 b9c3 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800af0c:	f001 b9c1 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800af10:	4b88      	ldr	r3, [pc, #544]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800af16:	f003 0307 	and.w	r3, r3, #7
 800af1a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800af1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d104      	bne.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800af22:	f7fc fa3f 	bl	80073a4 <HAL_RCC_GetHCLKFreq>
 800af26:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800af28:	f001 b9b3 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800af2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d104      	bne.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800af32:	f7fc f90b 	bl	800714c <HAL_RCC_GetSysClockFreq>
 800af36:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800af38:	f001 b9ab 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800af3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d108      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af42:	f107 0314 	add.w	r3, r7, #20
 800af46:	4618      	mov	r0, r3
 800af48:	f7fe fb80 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af50:	f001 b99f 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800af54:	4b77      	ldr	r3, [pc, #476]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af60:	d105      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800af62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af64:	2b03      	cmp	r3, #3
 800af66:	d102      	bne.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800af68:	4b75      	ldr	r3, [pc, #468]	@ (800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800af6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af6c:	e023      	b.n	800afb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800af6e:	4b71      	ldr	r3, [pc, #452]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b02      	cmp	r3, #2
 800af78:	d10c      	bne.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800af7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7c:	2b04      	cmp	r3, #4
 800af7e:	d109      	bne.n	800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800af80:	4b6c      	ldr	r3, [pc, #432]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	08db      	lsrs	r3, r3, #3
 800af86:	f003 0303 	and.w	r3, r3, #3
 800af8a:	4a6b      	ldr	r2, [pc, #428]	@ (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800af8c:	fa22 f303 	lsr.w	r3, r2, r3
 800af90:	637b      	str	r3, [r7, #52]	@ 0x34
 800af92:	e010      	b.n	800afb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800af94:	4b67      	ldr	r3, [pc, #412]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afa0:	d105      	bne.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	2b05      	cmp	r3, #5
 800afa6:	d102      	bne.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800afa8:	4b64      	ldr	r3, [pc, #400]	@ (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800afaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800afac:	e003      	b.n	800afb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800afae:	2300      	movs	r3, #0
 800afb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800afb2:	f001 b96e 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800afb6:	f001 b96c 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800afba:	4b5e      	ldr	r3, [pc, #376]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800afbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800afc0:	f003 0308 	and.w	r3, r3, #8
 800afc4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800afc6:	4b5b      	ldr	r3, [pc, #364]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800afc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afcc:	f003 0302 	and.w	r3, r3, #2
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d106      	bne.n	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800afd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d103      	bne.n	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800afda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afde:	637b      	str	r3, [r7, #52]	@ 0x34
 800afe0:	e012      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800afe2:	4b54      	ldr	r3, [pc, #336]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800afe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800afec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aff0:	d106      	bne.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800aff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff4:	2b08      	cmp	r3, #8
 800aff6:	d103      	bne.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800aff8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800affc:	637b      	str	r3, [r7, #52]	@ 0x34
 800affe:	e003      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800b000:	2300      	movs	r3, #0
 800b002:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b004:	f001 b945 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b008:	f001 b943 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b00c:	4b49      	ldr	r3, [pc, #292]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b00e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b012:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b016:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d104      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b01e:	f7fc f9dd 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800b022:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b024:	f001 b935 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800b028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b02e:	d108      	bne.n	800b042 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b030:	f107 0308 	add.w	r3, r7, #8
 800b034:	4618      	mov	r0, r3
 800b036:	f7fe fc75 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b03e:	f001 b928 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b042:	4b3c      	ldr	r3, [pc, #240]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 0302 	and.w	r3, r3, #2
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d10d      	bne.n	800b06a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b054:	d109      	bne.n	800b06a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b056:	4b37      	ldr	r3, [pc, #220]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	08db      	lsrs	r3, r3, #3
 800b05c:	f003 0303 	and.w	r3, r3, #3
 800b060:	4a35      	ldr	r2, [pc, #212]	@ (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800b062:	fa22 f303 	lsr.w	r3, r2, r3
 800b066:	637b      	str	r3, [r7, #52]	@ 0x34
 800b068:	e011      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800b06a:	4b32      	ldr	r3, [pc, #200]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b076:	d106      	bne.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800b078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b07e:	d102      	bne.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800b080:	4b2e      	ldr	r3, [pc, #184]	@ (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800b082:	637b      	str	r3, [r7, #52]	@ 0x34
 800b084:	e003      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800b086:	2300      	movs	r3, #0
 800b088:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b08a:	f001 b902 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b08e:	f001 b900 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b092:	4b28      	ldr	r3, [pc, #160]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b094:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b098:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b09c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800b09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d104      	bne.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b0a4:	f7fc f99a 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800b0a8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b0aa:	f001 b8f2 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b0b4:	d108      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0b6:	f107 0308 	add.w	r3, r7, #8
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fe fc32 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0c4:	f001 b8e5 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800b0c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 0302 	and.w	r3, r3, #2
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d10d      	bne.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800b0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b0da:	d109      	bne.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b0dc:	4b15      	ldr	r3, [pc, #84]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	08db      	lsrs	r3, r3, #3
 800b0e2:	f003 0303 	and.w	r3, r3, #3
 800b0e6:	4a14      	ldr	r2, [pc, #80]	@ (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800b0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0ee:	e011      	b.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800b0f0:	4b10      	ldr	r3, [pc, #64]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b0f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0fc:	d106      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b100:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b104:	d102      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800b106:	4b0d      	ldr	r3, [pc, #52]	@ (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800b108:	637b      	str	r3, [r7, #52]	@ 0x34
 800b10a:	e003      	b.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800b10c:	2300      	movs	r3, #0
 800b10e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b110:	f001 b8bf 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b114:	f001 b8bd 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b118:	4b06      	ldr	r3, [pc, #24]	@ (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800b11a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b11e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b122:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800b124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b126:	2b00      	cmp	r3, #0
 800b128:	d10c      	bne.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b12a:	f7fc f983 	bl	8007434 <HAL_RCC_GetPCLK3Freq>
 800b12e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b130:	f001 b8af 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b134:	44020c00 	.word	0x44020c00
 800b138:	03d09000 	.word	0x03d09000
 800b13c:	003d0900 	.word	0x003d0900
 800b140:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800b144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b146:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b14a:	d108      	bne.n	800b15e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b14c:	f107 0308 	add.w	r3, r7, #8
 800b150:	4618      	mov	r0, r3
 800b152:	f7fe fbe7 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b15a:	f001 b89a 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800b15e:	4b9f      	ldr	r3, [pc, #636]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f003 0302 	and.w	r3, r3, #2
 800b166:	2b02      	cmp	r3, #2
 800b168:	d10d      	bne.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b170:	d109      	bne.n	800b186 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b172:	4b9a      	ldr	r3, [pc, #616]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	08db      	lsrs	r3, r3, #3
 800b178:	f003 0303 	and.w	r3, r3, #3
 800b17c:	4a98      	ldr	r2, [pc, #608]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b17e:	fa22 f303 	lsr.w	r3, r2, r3
 800b182:	637b      	str	r3, [r7, #52]	@ 0x34
 800b184:	e011      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800b186:	4b95      	ldr	r3, [pc, #596]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b18e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b192:	d106      	bne.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800b194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b196:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b19a:	d102      	bne.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800b19c:	4b91      	ldr	r3, [pc, #580]	@ (800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b19e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1a0:	e003      	b.n	800b1aa <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1a6:	f001 b874 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b1aa:	f001 b872 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b1ae:	4b8b      	ldr	r3, [pc, #556]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b1b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b1b4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b1b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d104      	bne.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b1c0:	f7fc f938 	bl	8007434 <HAL_RCC_GetPCLK3Freq>
 800b1c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b1c6:	f001 b864 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1d0:	d108      	bne.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1d2:	f107 0308 	add.w	r3, r7, #8
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fe fba4 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1e0:	f001 b857 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b1e4:	4b7d      	ldr	r3, [pc, #500]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f003 0302 	and.w	r3, r3, #2
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d10d      	bne.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800b1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1f6:	d109      	bne.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b1f8:	4b78      	ldr	r3, [pc, #480]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	08db      	lsrs	r3, r3, #3
 800b1fe:	f003 0303 	and.w	r3, r3, #3
 800b202:	4a77      	ldr	r2, [pc, #476]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b204:	fa22 f303 	lsr.w	r3, r2, r3
 800b208:	637b      	str	r3, [r7, #52]	@ 0x34
 800b20a:	e011      	b.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800b20c:	4b73      	ldr	r3, [pc, #460]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b218:	d106      	bne.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800b21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b21c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b220:	d102      	bne.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800b222:	4b70      	ldr	r3, [pc, #448]	@ (800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b224:	637b      	str	r3, [r7, #52]	@ 0x34
 800b226:	e003      	b.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800b228:	2300      	movs	r3, #0
 800b22a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b22c:	f001 b831 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b230:	f001 b82f 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800b234:	4b69      	ldr	r3, [pc, #420]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b236:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b23a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b23e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800b240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b242:	2b00      	cmp	r3, #0
 800b244:	d104      	bne.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b246:	f7fc f8c9 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800b24a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b24c:	f001 b821 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800b250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b252:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b256:	d108      	bne.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b258:	f107 0308 	add.w	r3, r7, #8
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fe fb61 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b266:	f001 b814 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800b26a:	4b5c      	ldr	r3, [pc, #368]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 0302 	and.w	r3, r3, #2
 800b272:	2b02      	cmp	r3, #2
 800b274:	d10e      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800b276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b27c:	d10a      	bne.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b27e:	4b57      	ldr	r3, [pc, #348]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	08db      	lsrs	r3, r3, #3
 800b284:	f003 0303 	and.w	r3, r3, #3
 800b288:	4a55      	ldr	r2, [pc, #340]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b28a:	fa22 f303 	lsr.w	r3, r2, r3
 800b28e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b290:	f000 bfff 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b294:	2300      	movs	r3, #0
 800b296:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b298:	f000 bffb 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b29c:	4b4f      	ldr	r3, [pc, #316]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b29e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b2a2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b2a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2aa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b2ae:	d056      	beq.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b2b6:	f200 808b 	bhi.w	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2c0:	d03e      	beq.n	800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2c8:	f200 8082 	bhi.w	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2d2:	d027      	beq.n	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2da:	d879      	bhi.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2e2:	d017      	beq.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800b2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2ea:	d871      	bhi.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d004      	beq.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2f8:	d004      	beq.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800b2fa:	e069      	b.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b2fc:	f7fc f89a 	bl	8007434 <HAL_RCC_GetPCLK3Freq>
 800b300:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b302:	e068      	b.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b304:	f107 0314 	add.w	r3, r7, #20
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fe f99f 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b312:	e060      	b.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b314:	f107 0308 	add.w	r3, r7, #8
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fe fb03 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b322:	e058      	b.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b324:	4b2d      	ldr	r3, [pc, #180]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b32a:	f003 0302 	and.w	r3, r3, #2
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d103      	bne.n	800b33a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800b332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b336:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b338:	e04d      	b.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b33e:	e04a      	b.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b340:	4b26      	ldr	r3, [pc, #152]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b346:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b34a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b34e:	d103      	bne.n	800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800b350:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b354:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b356:	e03e      	b.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800b358:	2300      	movs	r3, #0
 800b35a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b35c:	e03b      	b.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b35e:	4b1f      	ldr	r3, [pc, #124]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b364:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b368:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b36a:	4b1c      	ldr	r3, [pc, #112]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0302 	and.w	r3, r3, #2
 800b372:	2b02      	cmp	r3, #2
 800b374:	d10c      	bne.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800b376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d109      	bne.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b37c:	4b17      	ldr	r3, [pc, #92]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	08db      	lsrs	r3, r3, #3
 800b382:	f003 0303 	and.w	r3, r3, #3
 800b386:	4a16      	ldr	r2, [pc, #88]	@ (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800b388:	fa22 f303 	lsr.w	r3, r2, r3
 800b38c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b38e:	e01e      	b.n	800b3ce <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b390:	4b12      	ldr	r3, [pc, #72]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b39c:	d106      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800b39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3a4:	d102      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b3a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800b3a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3aa:	e010      	b.n	800b3ce <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3ac:	4b0b      	ldr	r3, [pc, #44]	@ (800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3b8:	d106      	bne.n	800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800b3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3c0:	d102      	bne.n	800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b3c2:	4b09      	ldr	r3, [pc, #36]	@ (800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800b3c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3c6:	e002      	b.n	800b3ce <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b3cc:	e003      	b.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800b3ce:	e002      	b.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b3d4:	bf00      	nop
          }
        }
        break;
 800b3d6:	f000 bf5c 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b3da:	bf00      	nop
 800b3dc:	44020c00 	.word	0x44020c00
 800b3e0:	03d09000 	.word	0x03d09000
 800b3e4:	003d0900 	.word	0x003d0900
 800b3e8:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b3ec:	4b9e      	ldr	r3, [pc, #632]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b3ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b3f2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b3f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b3fe:	d056      	beq.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800b400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b402:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b406:	f200 808b 	bhi.w	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b410:	d03e      	beq.n	800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800b412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b418:	f200 8082 	bhi.w	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b422:	d027      	beq.n	800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800b424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b426:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b42a:	d879      	bhi.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b432:	d017      	beq.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800b434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b43a:	d871      	bhi.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800b43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d004      	beq.n	800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800b442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b448:	d004      	beq.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800b44a:	e069      	b.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800b44c:	f7fb ffc6 	bl	80073dc <HAL_RCC_GetPCLK1Freq>
 800b450:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b452:	e068      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b454:	f107 0314 	add.w	r3, r7, #20
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fe f8f7 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b462:	e060      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b464:	f107 0308 	add.w	r3, r7, #8
 800b468:	4618      	mov	r0, r3
 800b46a:	f7fe fa5b 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b472:	e058      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b474:	4b7c      	ldr	r3, [pc, #496]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b47a:	f003 0302 	and.w	r3, r3, #2
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d103      	bne.n	800b48a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800b482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b486:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b488:	e04d      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b48e:	e04a      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b490:	4b75      	ldr	r3, [pc, #468]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b49a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b49e:	d103      	bne.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800b4a0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b4a4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b4a6:	e03e      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4ac:	e03b      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4ae:	4b6e      	ldr	r3, [pc, #440]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b4b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b4b4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b4b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4ba:	4b6b      	ldr	r3, [pc, #428]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f003 0302 	and.w	r3, r3, #2
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	d10c      	bne.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800b4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d109      	bne.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b4cc:	4b66      	ldr	r3, [pc, #408]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	08db      	lsrs	r3, r3, #3
 800b4d2:	f003 0303 	and.w	r3, r3, #3
 800b4d6:	4a65      	ldr	r2, [pc, #404]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800b4d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4de:	e01e      	b.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4e0:	4b61      	ldr	r3, [pc, #388]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b4e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4ec:	d106      	bne.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800b4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4f4:	d102      	bne.n	800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b4f6:	4b5e      	ldr	r3, [pc, #376]	@ (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800b4f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4fa:	e010      	b.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4fc:	4b5a      	ldr	r3, [pc, #360]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b504:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b508:	d106      	bne.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800b50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b510:	d102      	bne.n	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b512:	4b58      	ldr	r3, [pc, #352]	@ (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800b514:	637b      	str	r3, [r7, #52]	@ 0x34
 800b516:	e002      	b.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b51c:	e003      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800b51e:	e002      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800b520:	2300      	movs	r3, #0
 800b522:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b524:	bf00      	nop
          }
        }
        break;
 800b526:	f000 beb4 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800b52a:	4b4f      	ldr	r3, [pc, #316]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b52c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b530:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b534:	633b      	str	r3, [r7, #48]	@ 0x30
 800b536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b53c:	d056      	beq.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800b53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b544:	f200 808b 	bhi.w	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b54a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b54e:	d03e      	beq.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800b550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b552:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b556:	f200 8082 	bhi.w	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b560:	d027      	beq.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800b562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b564:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b568:	d879      	bhi.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b570:	d017      	beq.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800b572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b574:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b578:	d871      	bhi.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800b57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d004      	beq.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800b580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b586:	d004      	beq.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800b588:	e069      	b.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b58a:	f7fb ff53 	bl	8007434 <HAL_RCC_GetPCLK3Freq>
 800b58e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b590:	e068      	b.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b592:	f107 0314 	add.w	r3, r7, #20
 800b596:	4618      	mov	r0, r3
 800b598:	f7fe f858 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b5a0:	e060      	b.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5a2:	f107 0308 	add.w	r3, r7, #8
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fe f9bc 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b5b0:	e058      	b.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b5b2:	4b2d      	ldr	r3, [pc, #180]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5b8:	f003 0302 	and.w	r3, r3, #2
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d103      	bne.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800b5c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5c4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b5c6:	e04d      	b.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b5cc:	e04a      	b.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b5ce:	4b26      	ldr	r3, [pc, #152]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5dc:	d103      	bne.n	800b5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800b5de:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b5e2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b5e4:	e03e      	b.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b5ea:	e03b      	b.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5ec:	4b1e      	ldr	r3, [pc, #120]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b5f2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5f8:	4b1b      	ldr	r3, [pc, #108]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 0302 	and.w	r3, r3, #2
 800b600:	2b02      	cmp	r3, #2
 800b602:	d10c      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800b604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b606:	2b00      	cmp	r3, #0
 800b608:	d109      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b60a:	4b17      	ldr	r3, [pc, #92]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	08db      	lsrs	r3, r3, #3
 800b610:	f003 0303 	and.w	r3, r3, #3
 800b614:	4a15      	ldr	r2, [pc, #84]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800b616:	fa22 f303 	lsr.w	r3, r2, r3
 800b61a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b61c:	e01e      	b.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b61e:	4b12      	ldr	r3, [pc, #72]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b62a:	d106      	bne.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800b62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b62e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b632:	d102      	bne.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b634:	4b0e      	ldr	r3, [pc, #56]	@ (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800b636:	637b      	str	r3, [r7, #52]	@ 0x34
 800b638:	e010      	b.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b63a:	4b0b      	ldr	r3, [pc, #44]	@ (800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b646:	d106      	bne.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800b648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b64a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b64e:	d102      	bne.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b650:	4b08      	ldr	r3, [pc, #32]	@ (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800b652:	637b      	str	r3, [r7, #52]	@ 0x34
 800b654:	e002      	b.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b65a:	e003      	b.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800b65c:	e002      	b.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800b65e:	2300      	movs	r3, #0
 800b660:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b662:	bf00      	nop
          }
        }
        break;
 800b664:	f000 be15 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b668:	44020c00 	.word	0x44020c00
 800b66c:	03d09000 	.word	0x03d09000
 800b670:	003d0900 	.word	0x003d0900
 800b674:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800b678:	4b9e      	ldr	r3, [pc, #632]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b67a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b67e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800b682:	633b      	str	r3, [r7, #48]	@ 0x30
 800b684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b686:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b68a:	d056      	beq.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800b68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b68e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800b692:	f200 808b 	bhi.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b69c:	d03e      	beq.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800b69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6a4:	f200 8082 	bhi.w	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b6ae:	d027      	beq.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b6b6:	d879      	bhi.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6be:	d017      	beq.n	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6c6:	d871      	bhi.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d004      	beq.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800b6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6d4:	d004      	beq.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800b6d6:	e069      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b6d8:	f7fb feac 	bl	8007434 <HAL_RCC_GetPCLK3Freq>
 800b6dc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b6de:	e068      	b.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6e0:	f107 0314 	add.w	r3, r7, #20
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7fd ffb1 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6ee:	e060      	b.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6f0:	f107 0308 	add.w	r3, r7, #8
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7fe f915 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6fe:	e058      	b.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b700:	4b7c      	ldr	r3, [pc, #496]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b706:	f003 0302 	and.w	r3, r3, #2
 800b70a:	2b02      	cmp	r3, #2
 800b70c:	d103      	bne.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800b70e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b712:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b714:	e04d      	b.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b71a:	e04a      	b.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b71c:	4b75      	ldr	r3, [pc, #468]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b71e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b722:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b726:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b72a:	d103      	bne.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800b72c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b730:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b732:	e03e      	b.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800b734:	2300      	movs	r3, #0
 800b736:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b738:	e03b      	b.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b73a:	4b6e      	ldr	r3, [pc, #440]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b73c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b740:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b744:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b746:	4b6b      	ldr	r3, [pc, #428]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f003 0302 	and.w	r3, r3, #2
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d10c      	bne.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800b752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b754:	2b00      	cmp	r3, #0
 800b756:	d109      	bne.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b758:	4b66      	ldr	r3, [pc, #408]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	08db      	lsrs	r3, r3, #3
 800b75e:	f003 0303 	and.w	r3, r3, #3
 800b762:	4a65      	ldr	r2, [pc, #404]	@ (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b764:	fa22 f303 	lsr.w	r3, r2, r3
 800b768:	637b      	str	r3, [r7, #52]	@ 0x34
 800b76a:	e01e      	b.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b76c:	4b61      	ldr	r3, [pc, #388]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b778:	d106      	bne.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800b77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b77c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b780:	d102      	bne.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b782:	4b5e      	ldr	r3, [pc, #376]	@ (800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b784:	637b      	str	r3, [r7, #52]	@ 0x34
 800b786:	e010      	b.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b788:	4b5a      	ldr	r3, [pc, #360]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b790:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b794:	d106      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800b796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b798:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b79c:	d102      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b79e:	4b58      	ldr	r3, [pc, #352]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b7a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7a2:	e002      	b.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b7a8:	e003      	b.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800b7aa:	e002      	b.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b7b0:	bf00      	nop
          }
        }
        break;
 800b7b2:	f000 bd6e 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800b7b6:	4b4f      	ldr	r3, [pc, #316]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b7b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b7bc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b7c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b7c8:	d056      	beq.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7cc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b7d0:	f200 808b 	bhi.w	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b7da:	d03e      	beq.n	800b85a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800b7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b7e2:	f200 8082 	bhi.w	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b7ec:	d027      	beq.n	800b83e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800b7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b7f4:	d879      	bhi.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7fc:	d017      	beq.n	800b82e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b800:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b804:	d871      	bhi.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800b806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d004      	beq.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800b80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b80e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b812:	d004      	beq.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800b814:	e069      	b.n	800b8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b816:	f7fb fe0d 	bl	8007434 <HAL_RCC_GetPCLK3Freq>
 800b81a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b81c:	e068      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b81e:	f107 0314 	add.w	r3, r7, #20
 800b822:	4618      	mov	r0, r3
 800b824:	f7fd ff12 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b82c:	e060      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b82e:	f107 0308 	add.w	r3, r7, #8
 800b832:	4618      	mov	r0, r3
 800b834:	f7fe f876 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b83c:	e058      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b83e:	4b2d      	ldr	r3, [pc, #180]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b844:	f003 0302 	and.w	r3, r3, #2
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d103      	bne.n	800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800b84c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b850:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b852:	e04d      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b854:	2300      	movs	r3, #0
 800b856:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b858:	e04a      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b85a:	4b26      	ldr	r3, [pc, #152]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b85c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b860:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b864:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b868:	d103      	bne.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800b86a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b86e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b870:	e03e      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b876:	e03b      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b878:	4b1e      	ldr	r3, [pc, #120]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b87a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b87e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b882:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b884:	4b1b      	ldr	r3, [pc, #108]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 0302 	and.w	r3, r3, #2
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d10c      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800b890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b892:	2b00      	cmp	r3, #0
 800b894:	d109      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b896:	4b17      	ldr	r3, [pc, #92]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	08db      	lsrs	r3, r3, #3
 800b89c:	f003 0303 	and.w	r3, r3, #3
 800b8a0:	4a15      	ldr	r2, [pc, #84]	@ (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800b8a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8a8:	e01e      	b.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8aa:	4b12      	ldr	r3, [pc, #72]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b8b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8b6:	d106      	bne.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800b8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8be:	d102      	bne.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b8c0:	4b0e      	ldr	r3, [pc, #56]	@ (800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800b8c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8c4:	e010      	b.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8d2:	d106      	bne.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800b8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8da:	d102      	bne.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b8dc:	4b08      	ldr	r3, [pc, #32]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800b8de:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8e0:	e002      	b.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b8e6:	e003      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800b8e8:	e002      	b.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b8ee:	bf00      	nop
          }
        }
        break;
 800b8f0:	f000 bccf 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b8f4:	44020c00 	.word	0x44020c00
 800b8f8:	03d09000 	.word	0x03d09000
 800b8fc:	003d0900 	.word	0x003d0900
 800b900:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800b904:	4b9e      	ldr	r3, [pc, #632]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b906:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b90a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b90e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b912:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b916:	d056      	beq.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800b918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b91e:	f200 808b 	bhi.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b928:	d03e      	beq.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800b92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b92c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b930:	f200 8082 	bhi.w	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b936:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b93a:	d027      	beq.n	800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800b93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b93e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b942:	d879      	bhi.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b94a:	d017      	beq.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800b94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b94e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b952:	d871      	bhi.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800b954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b956:	2b00      	cmp	r3, #0
 800b958:	d004      	beq.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800b95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b95c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b960:	d004      	beq.n	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800b962:	e069      	b.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b964:	f7fb fd66 	bl	8007434 <HAL_RCC_GetPCLK3Freq>
 800b968:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b96a:	e068      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b96c:	f107 0314 	add.w	r3, r7, #20
 800b970:	4618      	mov	r0, r3
 800b972:	f7fd fe6b 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b97a:	e060      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b97c:	f107 0308 	add.w	r3, r7, #8
 800b980:	4618      	mov	r0, r3
 800b982:	f7fd ffcf 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b98a:	e058      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b98c:	4b7c      	ldr	r3, [pc, #496]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b98e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b992:	f003 0302 	and.w	r3, r3, #2
 800b996:	2b02      	cmp	r3, #2
 800b998:	d103      	bne.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800b99a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b99e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b9a0:	e04d      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b9a6:	e04a      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b9a8:	4b75      	ldr	r3, [pc, #468]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b9aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b9ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9b6:	d103      	bne.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800b9b8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b9bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b9be:	e03e      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b9c4:	e03b      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b9c6:	4b6e      	ldr	r3, [pc, #440]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b9c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b9cc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b9d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9d2:	4b6b      	ldr	r3, [pc, #428]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f003 0302 	and.w	r3, r3, #2
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d10c      	bne.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800b9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d109      	bne.n	800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b9e4:	4b66      	ldr	r3, [pc, #408]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	08db      	lsrs	r3, r3, #3
 800b9ea:	f003 0303 	and.w	r3, r3, #3
 800b9ee:	4a65      	ldr	r2, [pc, #404]	@ (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b9f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9f6:	e01e      	b.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9f8:	4b61      	ldr	r3, [pc, #388]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba04:	d106      	bne.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800ba06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba0c:	d102      	bne.n	800ba14 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ba0e:	4b5e      	ldr	r3, [pc, #376]	@ (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800ba10:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba12:	e010      	b.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba14:	4b5a      	ldr	r3, [pc, #360]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba20:	d106      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800ba22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba28:	d102      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ba2a:	4b58      	ldr	r3, [pc, #352]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800ba2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba2e:	e002      	b.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ba34:	e003      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800ba36:	e002      	b.n	800ba3e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba3c:	bf00      	nop
          }
        }
        break;
 800ba3e:	f000 bc28 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ba42:	4b4f      	ldr	r3, [pc, #316]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ba44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ba48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba4c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800ba4e:	4b4c      	ldr	r3, [pc, #304]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba5a:	d106      	bne.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800ba5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d103      	bne.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800ba62:	4b4a      	ldr	r3, [pc, #296]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800ba64:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800ba66:	f000 bc14 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba70:	d108      	bne.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba72:	f107 0320 	add.w	r3, r7, #32
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fd fc7c 	bl	8009374 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba80:	f000 bc07 	b.w	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800ba84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba8a:	d107      	bne.n	800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba8c:	f107 0314 	add.w	r3, r7, #20
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7fd fddb 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba9a:	e3fa      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800baa0:	e3f7      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800baa2:	4b37      	ldr	r3, [pc, #220]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800baa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800baa8:	f003 0307 	and.w	r3, r3, #7
 800baac:	633b      	str	r3, [r7, #48]	@ 0x30
 800baae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab0:	2b04      	cmp	r3, #4
 800bab2:	d861      	bhi.n	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800bab4:	a201      	add	r2, pc, #4	@ (adr r2, 800babc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800bab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baba:	bf00      	nop
 800babc:	0800bad1 	.word	0x0800bad1
 800bac0:	0800bae1 	.word	0x0800bae1
 800bac4:	0800baf1 	.word	0x0800baf1
 800bac8:	0800bb01 	.word	0x0800bb01
 800bacc:	0800bb07 	.word	0x0800bb07
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bad0:	f107 0320 	add.w	r3, r7, #32
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7fd fc4d 	bl	8009374 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800badc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bade:	e04e      	b.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bae0:	f107 0314 	add.w	r3, r7, #20
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7fd fdb1 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800baee:	e046      	b.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baf0:	f107 0308 	add.w	r3, r7, #8
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fd ff15 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bafe:	e03e      	b.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800bb00:	4b23      	ldr	r3, [pc, #140]	@ (800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800bb02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bb04:	e03b      	b.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb06:	4b1e      	ldr	r3, [pc, #120]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bb08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bb0c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bb10:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb12:	4b1b      	ldr	r3, [pc, #108]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f003 0302 	and.w	r3, r3, #2
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d10c      	bne.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800bb1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d109      	bne.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bb24:	4b16      	ldr	r3, [pc, #88]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	08db      	lsrs	r3, r3, #3
 800bb2a:	f003 0303 	and.w	r3, r3, #3
 800bb2e:	4a15      	ldr	r2, [pc, #84]	@ (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800bb30:	fa22 f303 	lsr.w	r3, r2, r3
 800bb34:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb36:	e01e      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb38:	4b11      	ldr	r3, [pc, #68]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb44:	d106      	bne.n	800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800bb46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb4c:	d102      	bne.n	800bb54 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bb4e:	4b0e      	ldr	r3, [pc, #56]	@ (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800bb50:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb52:	e010      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bb54:	4b0a      	ldr	r3, [pc, #40]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb60:	d106      	bne.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800bb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb68:	d102      	bne.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bb6a:	4b08      	ldr	r3, [pc, #32]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800bb6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb6e:	e002      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bb70:	2300      	movs	r3, #0
 800bb72:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bb74:	e003      	b.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800bb76:	e002      	b.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bb7c:	bf00      	nop
          }
        }
        break;
 800bb7e:	e388      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bb80:	44020c00 	.word	0x44020c00
 800bb84:	03d09000 	.word	0x03d09000
 800bb88:	003d0900 	.word	0x003d0900
 800bb8c:	007a1200 	.word	0x007a1200
 800bb90:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800bb94:	4ba9      	ldr	r3, [pc, #676]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bb96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb9e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba2:	2b20      	cmp	r3, #32
 800bba4:	f200 809a 	bhi.w	800bcdc <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800bba8:	a201      	add	r2, pc, #4	@ (adr r2, 800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800bbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbae:	bf00      	nop
 800bbb0:	0800bc35 	.word	0x0800bc35
 800bbb4:	0800bcdd 	.word	0x0800bcdd
 800bbb8:	0800bcdd 	.word	0x0800bcdd
 800bbbc:	0800bcdd 	.word	0x0800bcdd
 800bbc0:	0800bcdd 	.word	0x0800bcdd
 800bbc4:	0800bcdd 	.word	0x0800bcdd
 800bbc8:	0800bcdd 	.word	0x0800bcdd
 800bbcc:	0800bcdd 	.word	0x0800bcdd
 800bbd0:	0800bc45 	.word	0x0800bc45
 800bbd4:	0800bcdd 	.word	0x0800bcdd
 800bbd8:	0800bcdd 	.word	0x0800bcdd
 800bbdc:	0800bcdd 	.word	0x0800bcdd
 800bbe0:	0800bcdd 	.word	0x0800bcdd
 800bbe4:	0800bcdd 	.word	0x0800bcdd
 800bbe8:	0800bcdd 	.word	0x0800bcdd
 800bbec:	0800bcdd 	.word	0x0800bcdd
 800bbf0:	0800bc55 	.word	0x0800bc55
 800bbf4:	0800bcdd 	.word	0x0800bcdd
 800bbf8:	0800bcdd 	.word	0x0800bcdd
 800bbfc:	0800bcdd 	.word	0x0800bcdd
 800bc00:	0800bcdd 	.word	0x0800bcdd
 800bc04:	0800bcdd 	.word	0x0800bcdd
 800bc08:	0800bcdd 	.word	0x0800bcdd
 800bc0c:	0800bcdd 	.word	0x0800bcdd
 800bc10:	0800bc65 	.word	0x0800bc65
 800bc14:	0800bcdd 	.word	0x0800bcdd
 800bc18:	0800bcdd 	.word	0x0800bcdd
 800bc1c:	0800bcdd 	.word	0x0800bcdd
 800bc20:	0800bcdd 	.word	0x0800bcdd
 800bc24:	0800bcdd 	.word	0x0800bcdd
 800bc28:	0800bcdd 	.word	0x0800bcdd
 800bc2c:	0800bcdd 	.word	0x0800bcdd
 800bc30:	0800bc6b 	.word	0x0800bc6b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc34:	f107 0320 	add.w	r3, r7, #32
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7fd fb9b 	bl	8009374 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc42:	e04e      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc44:	f107 0314 	add.w	r3, r7, #20
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fd fcff 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc52:	e046      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc54:	f107 0308 	add.w	r3, r7, #8
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fd fe63 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc62:	e03e      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800bc64:	4b76      	ldr	r3, [pc, #472]	@ (800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800bc66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc68:	e03b      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc6a:	4b74      	ldr	r3, [pc, #464]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc70:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bc74:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc76:	4b71      	ldr	r3, [pc, #452]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f003 0302 	and.w	r3, r3, #2
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d10c      	bne.n	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800bc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d109      	bne.n	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bc88:	4b6c      	ldr	r3, [pc, #432]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	08db      	lsrs	r3, r3, #3
 800bc8e:	f003 0303 	and.w	r3, r3, #3
 800bc92:	4a6c      	ldr	r2, [pc, #432]	@ (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800bc94:	fa22 f303 	lsr.w	r3, r2, r3
 800bc98:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc9a:	e01e      	b.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc9c:	4b67      	ldr	r3, [pc, #412]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bca8:	d106      	bne.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800bcaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcb0:	d102      	bne.n	800bcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bcb2:	4b65      	ldr	r3, [pc, #404]	@ (800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800bcb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcb6:	e010      	b.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcb8:	4b60      	ldr	r3, [pc, #384]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bcc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bcc4:	d106      	bne.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800bcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bccc:	d102      	bne.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bcce:	4b5f      	ldr	r3, [pc, #380]	@ (800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800bcd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcd2:	e002      	b.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bcd8:	e003      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800bcda:	e002      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bce0:	bf00      	nop
          }
        }
        break;
 800bce2:	e2d6      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800bce4:	4b55      	ldr	r3, [pc, #340]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcea:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800bcee:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcf6:	d031      	beq.n	800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800bcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcfe:	d866      	bhi.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800bd00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd02:	2bc0      	cmp	r3, #192	@ 0xc0
 800bd04:	d027      	beq.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800bd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd08:	2bc0      	cmp	r3, #192	@ 0xc0
 800bd0a:	d860      	bhi.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd0e:	2b80      	cmp	r3, #128	@ 0x80
 800bd10:	d019      	beq.n	800bd46 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800bd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd14:	2b80      	cmp	r3, #128	@ 0x80
 800bd16:	d85a      	bhi.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800bd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d003      	beq.n	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd20:	2b40      	cmp	r3, #64	@ 0x40
 800bd22:	d008      	beq.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800bd24:	e053      	b.n	800bdce <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd26:	f107 0320 	add.w	r3, r7, #32
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fd fb22 	bl	8009374 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd34:	e04e      	b.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd36:	f107 0314 	add.w	r3, r7, #20
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7fd fc86 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd44:	e046      	b.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd46:	f107 0308 	add.w	r3, r7, #8
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7fd fdea 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd54:	e03e      	b.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800bd56:	4b3a      	ldr	r3, [pc, #232]	@ (800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800bd58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd5a:	e03b      	b.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd5c:	4b37      	ldr	r3, [pc, #220]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd62:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bd66:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd68:	4b34      	ldr	r3, [pc, #208]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f003 0302 	and.w	r3, r3, #2
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d10c      	bne.n	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800bd74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d109      	bne.n	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd7a:	4b30      	ldr	r3, [pc, #192]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	08db      	lsrs	r3, r3, #3
 800bd80:	f003 0303 	and.w	r3, r3, #3
 800bd84:	4a2f      	ldr	r2, [pc, #188]	@ (800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800bd86:	fa22 f303 	lsr.w	r3, r2, r3
 800bd8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd8c:	e01e      	b.n	800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd8e:	4b2b      	ldr	r3, [pc, #172]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd9a:	d106      	bne.n	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800bd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bda2:	d102      	bne.n	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bda4:	4b28      	ldr	r3, [pc, #160]	@ (800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800bda6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bda8:	e010      	b.n	800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdaa:	4b24      	ldr	r3, [pc, #144]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdb6:	d106      	bne.n	800bdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800bdb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bdbe:	d102      	bne.n	800bdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bdc0:	4b22      	ldr	r3, [pc, #136]	@ (800be4c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800bdc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdc4:	e002      	b.n	800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bdca:	e003      	b.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800bdcc:	e002      	b.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bdd2:	bf00      	nop
          }
        }
        break;
 800bdd4:	e25d      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800bdd6:	4b19      	ldr	r3, [pc, #100]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bdd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bddc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800bde0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800bde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d103      	bne.n	800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800bde8:	f7fb fb0e 	bl	8007408 <HAL_RCC_GetPCLK2Freq>
 800bdec:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800bdee:	e250      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800bdf0:	4b12      	ldr	r3, [pc, #72]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bdf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bdfc:	d10b      	bne.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be04:	d107      	bne.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be06:	f107 0314 	add.w	r3, r7, #20
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fd fc1e 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	637b      	str	r3, [r7, #52]	@ 0x34
 800be14:	e04f      	b.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800be16:	4b09      	ldr	r3, [pc, #36]	@ (800be3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be22:	d115      	bne.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800be24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800be2a:	d111      	bne.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be2c:	f107 0308 	add.w	r3, r7, #8
 800be30:	4618      	mov	r0, r3
 800be32:	f7fd fd77 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	637b      	str	r3, [r7, #52]	@ 0x34
 800be3a:	e03c      	b.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800be3c:	44020c00 	.word	0x44020c00
 800be40:	00bb8000 	.word	0x00bb8000
 800be44:	03d09000 	.word	0x03d09000
 800be48:	003d0900 	.word	0x003d0900
 800be4c:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800be50:	4b94      	ldr	r3, [pc, #592]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f003 0302 	and.w	r3, r3, #2
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d10d      	bne.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800be5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be5e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800be62:	d109      	bne.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800be64:	4b8f      	ldr	r3, [pc, #572]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	08db      	lsrs	r3, r3, #3
 800be6a:	f003 0303 	and.w	r3, r3, #3
 800be6e:	4a8e      	ldr	r2, [pc, #568]	@ (800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800be70:	fa22 f303 	lsr.w	r3, r2, r3
 800be74:	637b      	str	r3, [r7, #52]	@ 0x34
 800be76:	e01e      	b.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800be78:	4b8a      	ldr	r3, [pc, #552]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be84:	d106      	bne.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800be86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800be8c:	d102      	bne.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800be8e:	4b87      	ldr	r3, [pc, #540]	@ (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800be90:	637b      	str	r3, [r7, #52]	@ 0x34
 800be92:	e010      	b.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800be94:	4b83      	ldr	r3, [pc, #524]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bea0:	d106      	bne.n	800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800bea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800bea8:	d102      	bne.n	800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800beaa:	4b81      	ldr	r3, [pc, #516]	@ (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800beac:	637b      	str	r3, [r7, #52]	@ 0x34
 800beae:	e002      	b.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800beb0:	2300      	movs	r3, #0
 800beb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800beb4:	e1ed      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800beb6:	e1ec      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800beb8:	4b7a      	ldr	r3, [pc, #488]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800beba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bebe:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800bec2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800bec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d103      	bne.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800beca:	f7fb fab3 	bl	8007434 <HAL_RCC_GetPCLK3Freq>
 800bece:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800bed0:	e1df      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800bed2:	4b74      	ldr	r3, [pc, #464]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800beda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bede:	d10b      	bne.n	800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800bee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bee6:	d107      	bne.n	800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bee8:	f107 0314 	add.w	r3, r7, #20
 800beec:	4618      	mov	r0, r3
 800beee:	f7fd fbad 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bef6:	e045      	b.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800bef8:	4b6a      	ldr	r3, [pc, #424]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf04:	d10b      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800bf06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf0c:	d107      	bne.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf0e:	f107 0308 	add.w	r3, r7, #8
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fd fd06 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf1c:	e032      	b.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800bf1e:	4b61      	ldr	r3, [pc, #388]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f003 0302 	and.w	r3, r3, #2
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d10d      	bne.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bf30:	d109      	bne.n	800bf46 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bf32:	4b5c      	ldr	r3, [pc, #368]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	08db      	lsrs	r3, r3, #3
 800bf38:	f003 0303 	and.w	r3, r3, #3
 800bf3c:	4a5a      	ldr	r2, [pc, #360]	@ (800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800bf3e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf42:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf44:	e01e      	b.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800bf46:	4b57      	ldr	r3, [pc, #348]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf52:	d106      	bne.n	800bf62 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800bf54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bf5a:	d102      	bne.n	800bf62 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800bf5c:	4b53      	ldr	r3, [pc, #332]	@ (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800bf5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf60:	e010      	b.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800bf62:	4b50      	ldr	r3, [pc, #320]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf6e:	d106      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800bf70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf72:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800bf76:	d102      	bne.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800bf78:	4b4d      	ldr	r3, [pc, #308]	@ (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800bf7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf7c:	e002      	b.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf82:	e186      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800bf84:	e185      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bf86:	4b47      	ldr	r3, [pc, #284]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bf88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf8c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800bf90:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800bf92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d103      	bne.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800bf98:	f7fb fa36 	bl	8007408 <HAL_RCC_GetPCLK2Freq>
 800bf9c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800bf9e:	e178      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800bfa0:	4b40      	ldr	r3, [pc, #256]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bfac:	d10b      	bne.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800bfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bfb4:	d107      	bne.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfb6:	f107 0314 	add.w	r3, r7, #20
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fd fb46 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfc4:	e045      	b.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800bfc6:	4b37      	ldr	r3, [pc, #220]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bfce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfd2:	d10b      	bne.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfda:	d107      	bne.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfdc:	f107 0308 	add.w	r3, r7, #8
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fd fc9f 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfea:	e032      	b.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800bfec:	4b2d      	ldr	r3, [pc, #180]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f003 0302 	and.w	r3, r3, #2
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d10d      	bne.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800bff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffa:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800bffe:	d109      	bne.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c000:	4b28      	ldr	r3, [pc, #160]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	08db      	lsrs	r3, r3, #3
 800c006:	f003 0303 	and.w	r3, r3, #3
 800c00a:	4a27      	ldr	r2, [pc, #156]	@ (800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800c00c:	fa22 f303 	lsr.w	r3, r2, r3
 800c010:	637b      	str	r3, [r7, #52]	@ 0x34
 800c012:	e01e      	b.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800c014:	4b23      	ldr	r3, [pc, #140]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c01c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c020:	d106      	bne.n	800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800c022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c024:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c028:	d102      	bne.n	800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800c02a:	4b20      	ldr	r3, [pc, #128]	@ (800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800c02c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c02e:	e010      	b.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800c030:	4b1c      	ldr	r3, [pc, #112]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c038:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c03c:	d106      	bne.n	800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800c03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c040:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800c044:	d102      	bne.n	800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800c046:	4b1a      	ldr	r3, [pc, #104]	@ (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800c048:	637b      	str	r3, [r7, #52]	@ 0x34
 800c04a:	e002      	b.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800c04c:	2300      	movs	r3, #0
 800c04e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c050:	e11f      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c052:	e11e      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c054:	4b13      	ldr	r3, [pc, #76]	@ (800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800c056:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c05a:	f003 0303 	and.w	r3, r3, #3
 800c05e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c062:	2b03      	cmp	r3, #3
 800c064:	d85f      	bhi.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800c066:	a201      	add	r2, pc, #4	@ (adr r2, 800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800c068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06c:	0800c07d 	.word	0x0800c07d
 800c070:	0800c085 	.word	0x0800c085
 800c074:	0800c095 	.word	0x0800c095
 800c078:	0800c0b5 	.word	0x0800c0b5

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800c07c:	f7fb f992 	bl	80073a4 <HAL_RCC_GetHCLKFreq>
 800c080:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800c082:	e053      	b.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c084:	f107 0320 	add.w	r3, r7, #32
 800c088:	4618      	mov	r0, r3
 800c08a:	f7fd f973 	bl	8009374 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c090:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c092:	e04b      	b.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c094:	f107 0314 	add.w	r3, r7, #20
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fd fad7 	bl	800964c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c0a2:	e043      	b.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800c0a4:	44020c00 	.word	0x44020c00
 800c0a8:	03d09000 	.word	0x03d09000
 800c0ac:	003d0900 	.word	0x003d0900
 800c0b0:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0b4:	4b79      	ldr	r3, [pc, #484]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c0b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c0ba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c0be:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0c0:	4b76      	ldr	r3, [pc, #472]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 0302 	and.w	r3, r3, #2
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	d10c      	bne.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800c0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d109      	bne.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c0d2:	4b72      	ldr	r3, [pc, #456]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	08db      	lsrs	r3, r3, #3
 800c0d8:	f003 0303 	and.w	r3, r3, #3
 800c0dc:	4a70      	ldr	r2, [pc, #448]	@ (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800c0de:	fa22 f303 	lsr.w	r3, r2, r3
 800c0e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0e4:	e01e      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0e6:	4b6d      	ldr	r3, [pc, #436]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0f2:	d106      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800c0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0fa:	d102      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c0fc:	4b69      	ldr	r3, [pc, #420]	@ (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800c0fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800c100:	e010      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c102:	4b66      	ldr	r3, [pc, #408]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c10a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c10e:	d106      	bne.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800c110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c112:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c116:	d102      	bne.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c118:	4b63      	ldr	r3, [pc, #396]	@ (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800c11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c11c:	e002      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800c11e:	2300      	movs	r3, #0
 800c120:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c122:	e003      	b.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800c124:	e002      	b.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800c126:	2300      	movs	r3, #0
 800c128:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c12a:	bf00      	nop
          }
        }
        break;
 800c12c:	e0b1      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800c12e:	4b5b      	ldr	r3, [pc, #364]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c134:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c138:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800c13a:	4b58      	ldr	r3, [pc, #352]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c13c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c140:	f003 0302 	and.w	r3, r3, #2
 800c144:	2b02      	cmp	r3, #2
 800c146:	d106      	bne.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800c148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d103      	bne.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800c14e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c152:	637b      	str	r3, [r7, #52]	@ 0x34
 800c154:	e01f      	b.n	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800c156:	4b51      	ldr	r3, [pc, #324]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c15c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c160:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c164:	d106      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800c166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c168:	2b40      	cmp	r3, #64	@ 0x40
 800c16a:	d103      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800c16c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c170:	637b      	str	r3, [r7, #52]	@ 0x34
 800c172:	e010      	b.n	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800c174:	4b49      	ldr	r3, [pc, #292]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c17c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c180:	d106      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800c182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c184:	2b80      	cmp	r3, #128	@ 0x80
 800c186:	d103      	bne.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800c188:	f248 0312 	movw	r3, #32786	@ 0x8012
 800c18c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c18e:	e002      	b.n	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800c190:	2300      	movs	r3, #0
 800c192:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800c194:	e07d      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c196:	e07c      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c198:	4b40      	ldr	r3, [pc, #256]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c19a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c19e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c1a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c1a4:	4b3d      	ldr	r3, [pc, #244]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c1ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1b0:	d105      	bne.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d102      	bne.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800c1b8:	4b3c      	ldr	r3, [pc, #240]	@ (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800c1ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1bc:	e031      	b.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800c1be:	4b37      	ldr	r3, [pc, #220]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c1ca:	d10a      	bne.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800c1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ce:	2b10      	cmp	r3, #16
 800c1d0:	d107      	bne.n	800c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c1d2:	f107 0320 	add.w	r3, r7, #32
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fd f8cc 	bl	8009374 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1e0:	e01f      	b.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800c1e2:	4b2e      	ldr	r3, [pc, #184]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c1e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c1e8:	f003 0302 	and.w	r3, r3, #2
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d106      	bne.n	800c1fe <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f2:	2b20      	cmp	r3, #32
 800c1f4:	d103      	bne.n	800c1fe <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800c1f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c1fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1fc:	e011      	b.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800c1fe:	4b27      	ldr	r3, [pc, #156]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c208:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c20c:	d106      	bne.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800c20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c210:	2b30      	cmp	r3, #48	@ 0x30
 800c212:	d103      	bne.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800c214:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c218:	637b      	str	r3, [r7, #52]	@ 0x34
 800c21a:	e002      	b.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800c21c:	2300      	movs	r3, #0
 800c21e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800c220:	e037      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c222:	e036      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800c224:	4b1d      	ldr	r3, [pc, #116]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c226:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c22a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c22e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800c230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c232:	2b10      	cmp	r3, #16
 800c234:	d107      	bne.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c236:	f107 0320 	add.w	r3, r7, #32
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fd f89a 	bl	8009374 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c242:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c244:	e025      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800c246:	4b15      	ldr	r3, [pc, #84]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c24e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c252:	d10a      	bne.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800c254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c256:	2b20      	cmp	r3, #32
 800c258:	d107      	bne.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c25a:	f107 0308 	add.w	r3, r7, #8
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fd fb60 	bl	8009924 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	637b      	str	r3, [r7, #52]	@ 0x34
 800c268:	e00f      	b.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800c26a:	4b0c      	ldr	r3, [pc, #48]	@ (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c276:	d105      	bne.n	800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800c278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c27a:	2b30      	cmp	r3, #48	@ 0x30
 800c27c:	d102      	bne.n	800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800c27e:	4b0b      	ldr	r3, [pc, #44]	@ (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800c280:	637b      	str	r3, [r7, #52]	@ 0x34
 800c282:	e002      	b.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800c284:	2300      	movs	r3, #0
 800c286:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800c288:	e003      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c28a:	e002      	b.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800c28c:	2300      	movs	r3, #0
 800c28e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c290:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800c292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c294:	4618      	mov	r0, r3
 800c296:	373c      	adds	r7, #60	@ 0x3c
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd90      	pop	{r4, r7, pc}
 800c29c:	44020c00 	.word	0x44020c00
 800c2a0:	03d09000 	.word	0x03d09000
 800c2a4:	003d0900 	.word	0x003d0900
 800c2a8:	007a1200 	.word	0x007a1200
 800c2ac:	02dc6c00 	.word	0x02dc6c00

0800c2b0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800c2b8:	4b48      	ldr	r3, [pc, #288]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a47      	ldr	r2, [pc, #284]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c2be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c2c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c2c4:	f7f6 ff86 	bl	80031d4 <HAL_GetTick>
 800c2c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2ca:	e008      	b.n	800c2de <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c2cc:	f7f6 ff82 	bl	80031d4 <HAL_GetTick>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	2b02      	cmp	r3, #2
 800c2d8:	d901      	bls.n	800c2de <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	e07a      	b.n	800c3d4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c2de:	4b3f      	ldr	r3, [pc, #252]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1f0      	bne.n	800c2cc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c2ea:	4b3c      	ldr	r3, [pc, #240]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c2ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c2f2:	f023 0303 	bic.w	r3, r3, #3
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	6811      	ldr	r1, [r2, #0]
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	6852      	ldr	r2, [r2, #4]
 800c2fe:	0212      	lsls	r2, r2, #8
 800c300:	430a      	orrs	r2, r1
 800c302:	4936      	ldr	r1, [pc, #216]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c304:	4313      	orrs	r3, r2
 800c306:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	3b01      	subs	r3, #1
 800c30e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	3b01      	subs	r3, #1
 800c318:	025b      	lsls	r3, r3, #9
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	431a      	orrs	r2, r3
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	3b01      	subs	r3, #1
 800c324:	041b      	lsls	r3, r3, #16
 800c326:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c32a:	431a      	orrs	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	3b01      	subs	r3, #1
 800c332:	061b      	lsls	r3, r3, #24
 800c334:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c338:	4928      	ldr	r1, [pc, #160]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c33a:	4313      	orrs	r3, r2
 800c33c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c33e:	4b27      	ldr	r3, [pc, #156]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c342:	f023 020c 	bic.w	r2, r3, #12
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	699b      	ldr	r3, [r3, #24]
 800c34a:	4924      	ldr	r1, [pc, #144]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c34c:	4313      	orrs	r3, r2
 800c34e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800c350:	4b22      	ldr	r3, [pc, #136]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c354:	f023 0220 	bic.w	r2, r3, #32
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	69db      	ldr	r3, [r3, #28]
 800c35c:	491f      	ldr	r1, [pc, #124]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c35e:	4313      	orrs	r3, r2
 800c360:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c362:	4b1e      	ldr	r3, [pc, #120]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c36a:	491c      	ldr	r1, [pc, #112]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c36c:	4313      	orrs	r3, r2
 800c36e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800c370:	4b1a      	ldr	r3, [pc, #104]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c374:	4a19      	ldr	r2, [pc, #100]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c376:	f023 0310 	bic.w	r3, r3, #16
 800c37a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800c37c:	4b17      	ldr	r3, [pc, #92]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c37e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c380:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c384:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	6a12      	ldr	r2, [r2, #32]
 800c38c:	00d2      	lsls	r2, r2, #3
 800c38e:	4913      	ldr	r1, [pc, #76]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c390:	4313      	orrs	r3, r2
 800c392:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800c394:	4b11      	ldr	r3, [pc, #68]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c398:	4a10      	ldr	r2, [pc, #64]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c39a:	f043 0310 	orr.w	r3, r3, #16
 800c39e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800c3a0:	4b0e      	ldr	r3, [pc, #56]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a0d      	ldr	r2, [pc, #52]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c3a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c3aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c3ac:	f7f6 ff12 	bl	80031d4 <HAL_GetTick>
 800c3b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3b2:	e008      	b.n	800c3c6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c3b4:	f7f6 ff0e 	bl	80031d4 <HAL_GetTick>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d901      	bls.n	800c3c6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	e006      	b.n	800c3d4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c3c6:	4b05      	ldr	r3, [pc, #20]	@ (800c3dc <RCCEx_PLL2_Config+0x12c>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d0f0      	beq.n	800c3b4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800c3d2:	2300      	movs	r3, #0

}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	44020c00 	.word	0x44020c00

0800c3e0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800c3e8:	4b48      	ldr	r3, [pc, #288]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a47      	ldr	r2, [pc, #284]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c3ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c3f2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c3f4:	f7f6 feee 	bl	80031d4 <HAL_GetTick>
 800c3f8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3fa:	e008      	b.n	800c40e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3fc:	f7f6 feea 	bl	80031d4 <HAL_GetTick>
 800c400:	4602      	mov	r2, r0
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	1ad3      	subs	r3, r2, r3
 800c406:	2b02      	cmp	r3, #2
 800c408:	d901      	bls.n	800c40e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c40a:	2303      	movs	r3, #3
 800c40c:	e07a      	b.n	800c504 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c40e:	4b3f      	ldr	r3, [pc, #252]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1f0      	bne.n	800c3fc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c41a:	4b3c      	ldr	r3, [pc, #240]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c41c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c41e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c422:	f023 0303 	bic.w	r3, r3, #3
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	6811      	ldr	r1, [r2, #0]
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	6852      	ldr	r2, [r2, #4]
 800c42e:	0212      	lsls	r2, r2, #8
 800c430:	430a      	orrs	r2, r1
 800c432:	4936      	ldr	r1, [pc, #216]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c434:	4313      	orrs	r3, r2
 800c436:	630b      	str	r3, [r1, #48]	@ 0x30
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	3b01      	subs	r3, #1
 800c448:	025b      	lsls	r3, r3, #9
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	431a      	orrs	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	3b01      	subs	r3, #1
 800c454:	041b      	lsls	r3, r3, #16
 800c456:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c45a:	431a      	orrs	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	695b      	ldr	r3, [r3, #20]
 800c460:	3b01      	subs	r3, #1
 800c462:	061b      	lsls	r3, r3, #24
 800c464:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c468:	4928      	ldr	r1, [pc, #160]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c46e:	4b27      	ldr	r3, [pc, #156]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c472:	f023 020c 	bic.w	r2, r3, #12
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	699b      	ldr	r3, [r3, #24]
 800c47a:	4924      	ldr	r1, [pc, #144]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c47c:	4313      	orrs	r3, r2
 800c47e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800c480:	4b22      	ldr	r3, [pc, #136]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c484:	f023 0220 	bic.w	r2, r3, #32
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	69db      	ldr	r3, [r3, #28]
 800c48c:	491f      	ldr	r1, [pc, #124]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c48e:	4313      	orrs	r3, r2
 800c490:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c492:	4b1e      	ldr	r3, [pc, #120]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c49a:	491c      	ldr	r1, [pc, #112]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c49c:	4313      	orrs	r3, r2
 800c49e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800c4a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c4a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4a4:	4a19      	ldr	r2, [pc, #100]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c4a6:	f023 0310 	bic.w	r3, r3, #16
 800c4aa:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800c4ac:	4b17      	ldr	r3, [pc, #92]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c4ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c4b4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	6a12      	ldr	r2, [r2, #32]
 800c4bc:	00d2      	lsls	r2, r2, #3
 800c4be:	4913      	ldr	r1, [pc, #76]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800c4c4:	4b11      	ldr	r3, [pc, #68]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c4c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4c8:	4a10      	ldr	r2, [pc, #64]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c4ca:	f043 0310 	orr.w	r3, r3, #16
 800c4ce:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800c4d0:	4b0e      	ldr	r3, [pc, #56]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a0d      	ldr	r2, [pc, #52]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c4d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c4dc:	f7f6 fe7a 	bl	80031d4 <HAL_GetTick>
 800c4e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4e2:	e008      	b.n	800c4f6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c4e4:	f7f6 fe76 	bl	80031d4 <HAL_GetTick>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	1ad3      	subs	r3, r2, r3
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	d901      	bls.n	800c4f6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e006      	b.n	800c504 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4f6:	4b05      	ldr	r3, [pc, #20]	@ (800c50c <RCCEx_PLL3_Config+0x12c>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d0f0      	beq.n	800c4e4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800c502:	2300      	movs	r3, #0
}
 800c504:	4618      	mov	r0, r3
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	44020c00 	.word	0x44020c00

0800c510 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	e08c      	b.n	800c63c <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	7a5b      	ldrb	r3, [r3, #9]
 800c526:	b2db      	uxtb	r3, r3
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d105      	bne.n	800c538 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7f5 fef2 	bl	800231c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2202      	movs	r2, #2
 800c53c:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f022 0204 	bic.w	r2, r2, #4
 800c54c:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6859      	ldr	r1, [r3, #4]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	4b3b      	ldr	r3, [pc, #236]	@ (800c644 <HAL_RNG_Init+0x134>)
 800c558:	430b      	orrs	r3, r1
 800c55a:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800c564:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a37      	ldr	r2, [pc, #220]	@ (800c648 <HAL_RNG_Init+0x138>)
 800c56c:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800c57c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c57e:	f7f6 fe29 	bl	80031d4 <HAL_GetTick>
 800c582:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800c584:	e016      	b.n	800c5b4 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c586:	f7f6 fe25 	bl	80031d4 <HAL_GetTick>
 800c58a:	4602      	mov	r2, r0
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	1ad3      	subs	r3, r2, r3
 800c590:	2b04      	cmp	r3, #4
 800c592:	d90f      	bls.n	800c5b4 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c59e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5a2:	d107      	bne.n	800c5b4 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2202      	movs	r2, #2
 800c5ae:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e043      	b.n	800c63c <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c5be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5c2:	d0e0      	beq.n	800c586 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f042 0204 	orr.w	r2, r2, #4
 800c5d2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5de:	2b40      	cmp	r3, #64	@ 0x40
 800c5e0:	d104      	bne.n	800c5ec <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2204      	movs	r2, #4
 800c5e6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e027      	b.n	800c63c <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800c5ec:	f7f6 fdf2 	bl	80031d4 <HAL_GetTick>
 800c5f0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800c5f2:	e015      	b.n	800c620 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c5f4:	f7f6 fdee 	bl	80031d4 <HAL_GetTick>
 800c5f8:	4602      	mov	r2, r0
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	2b04      	cmp	r3, #4
 800c600:	d90e      	bls.n	800c620 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	f003 0301 	and.w	r3, r3, #1
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d007      	beq.n	800c620 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2204      	movs	r2, #4
 800c614:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2202      	movs	r2, #2
 800c61a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e00d      	b.n	800c63c <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	f003 0301 	and.w	r3, r3, #1
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d1e2      	bne.n	800c5f4 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	40f00e00 	.word	0x40f00e00
 800c648:	0003af66 	.word	0x0003af66

0800c64c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c656:	2300      	movs	r3, #0
 800c658:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	7a1b      	ldrb	r3, [r3, #8]
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d101      	bne.n	800c666 <HAL_RNG_GenerateRandomNumber+0x1a>
 800c662:	2302      	movs	r3, #2
 800c664:	e068      	b.n	800c738 <HAL_RNG_GenerateRandomNumber+0xec>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2201      	movs	r2, #1
 800c66a:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	7a5b      	ldrb	r3, [r3, #9]
 800c670:	b2db      	uxtb	r3, r3
 800c672:	2b01      	cmp	r3, #1
 800c674:	d157      	bne.n	800c726 <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2202      	movs	r2, #2
 800c67a:	725a      	strb	r2, [r3, #9]
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c686:	2b40      	cmp	r3, #64	@ 0x40
 800c688:	d10f      	bne.n	800c6aa <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2208      	movs	r2, #8
 800c68e:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 f85f 	bl	800c754 <RNG_RecoverSeedError>
 800c696:	4603      	mov	r3, r0
 800c698:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d104      	bne.n	800c6aa <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2220      	movs	r2, #32
 800c6a4:	60da      	str	r2, [r3, #12]
        return status;
 800c6a6:	7bfb      	ldrb	r3, [r7, #15]
 800c6a8:	e046      	b.n	800c738 <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800c6aa:	f7f6 fd93 	bl	80031d4 <HAL_GetTick>
 800c6ae:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c6b0:	e018      	b.n	800c6e4 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c6b2:	f7f6 fd8f 	bl	80031d4 <HAL_GetTick>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	2b04      	cmp	r3, #4
 800c6be:	d911      	bls.n	800c6e4 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	f003 0301 	and.w	r3, r3, #1
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d00a      	beq.n	800c6e4 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2202      	movs	r2, #2
 800c6d8:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e029      	b.n	800c738 <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	f003 0301 	and.w	r3, r3, #1
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d1df      	bne.n	800c6b2 <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	689a      	ldr	r2, [r3, #8]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	611a      	str	r2, [r3, #16]
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c706:	2b40      	cmp	r3, #64	@ 0x40
 800c708:	d105      	bne.n	800c716 <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2208      	movs	r2, #8
 800c70e:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	73fb      	strb	r3, [r7, #15]
 800c714:	e003      	b.n	800c71e <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	691a      	ldr	r2, [r3, #16]
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	601a      	str	r2, [r3, #0]
    }
    hrng->State = HAL_RNG_STATE_READY;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	725a      	strb	r2, [r3, #9]
 800c724:	e004      	b.n	800c730 <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2204      	movs	r2, #4
 800c72a:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	721a      	strb	r2, [r3, #8]

  return status;
 800c736:	7bfb      	ldrb	r3, [r7, #15]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800c748:	bf00      	nop
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c75c:	2300      	movs	r3, #0
 800c75e:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	f003 0304 	and.w	r3, r3, #4
 800c76a:	2b04      	cmp	r3, #4
 800c76c:	d008      	beq.n	800c780 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	685a      	ldr	r2, [r3, #4]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c77c:	605a      	str	r2, [r3, #4]
 800c77e:	e05f      	b.n	800c840 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c78e:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800c79e:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800c7a0:	2304      	movs	r3, #4
 800c7a2:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d110      	bne.n	800c7d2 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	f043 0202 	orr.w	r2, r3, #2
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7ff ffb9 	bl	800c740 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e03d      	b.n	800c84e <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c7dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7e0:	d0e0      	beq.n	800c7a4 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7ec:	2b40      	cmp	r3, #64	@ 0x40
 800c7ee:	d107      	bne.n	800c800 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c7fe:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800c800:	2304      	movs	r3, #4
 800c802:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	3b01      	subs	r3, #1
 800c808:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d110      	bne.n	800c832 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	f043 0202 	orr.w	r2, r3, #2
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff ff89 	bl	800c740 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	e00d      	b.n	800c84e <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	f003 0304 	and.w	r3, r3, #4
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	d0e1      	beq.n	800c804 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	f023 0208 	bic.w	r2, r3, #8
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
	...

0800c858 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c860:	2301      	movs	r3, #1
 800c862:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d071      	beq.n	800c94e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c870:	b2db      	uxtb	r3, r3
 800c872:	2b00      	cmp	r3, #0
 800c874:	d106      	bne.n	800c884 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2200      	movs	r2, #0
 800c87a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7f5 fda4 	bl	80023cc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2202      	movs	r2, #2
 800c888:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c88c:	4b32      	ldr	r3, [pc, #200]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	f003 0310 	and.w	r3, r3, #16
 800c894:	2b10      	cmp	r3, #16
 800c896:	d051      	beq.n	800c93c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c898:	4b2f      	ldr	r3, [pc, #188]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c89a:	22ca      	movs	r2, #202	@ 0xca
 800c89c:	625a      	str	r2, [r3, #36]	@ 0x24
 800c89e:	4b2e      	ldr	r3, [pc, #184]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c8a0:	2253      	movs	r2, #83	@ 0x53
 800c8a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f9a3 	bl	800cbf0 <RTC_EnterInitMode>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c8ae:	7bfb      	ldrb	r3, [r7, #15]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d13f      	bne.n	800c934 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c8b4:	4b28      	ldr	r3, [pc, #160]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c8b6:	699b      	ldr	r3, [r3, #24]
 800c8b8:	4a27      	ldr	r2, [pc, #156]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c8ba:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800c8be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8c2:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c8c4:	4b24      	ldr	r3, [pc, #144]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c8c6:	699a      	ldr	r2, [r3, #24]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6859      	ldr	r1, [r3, #4]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	4319      	orrs	r1, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	430b      	orrs	r3, r1
 800c8d8:	491f      	ldr	r1, [pc, #124]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	689b      	ldr	r3, [r3, #8]
 800c8e6:	041b      	lsls	r3, r3, #16
 800c8e8:	491b      	ldr	r1, [pc, #108]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c8ee:	4b1a      	ldr	r3, [pc, #104]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8fe:	430b      	orrs	r3, r1
 800c900:	4915      	ldr	r1, [pc, #84]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c902:	4313      	orrs	r3, r2
 800c904:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 f9ae 	bl	800cc68 <RTC_ExitInitMode>
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800c910:	7bfb      	ldrb	r3, [r7, #15]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d10e      	bne.n	800c934 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800c916:	4b10      	ldr	r3, [pc, #64]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c918:	699b      	ldr	r3, [r3, #24]
 800c91a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a19      	ldr	r1, [r3, #32]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	69db      	ldr	r3, [r3, #28]
 800c926:	4319      	orrs	r1, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	695b      	ldr	r3, [r3, #20]
 800c92c:	430b      	orrs	r3, r1
 800c92e:	490a      	ldr	r1, [pc, #40]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c930:	4313      	orrs	r3, r2
 800c932:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c934:	4b08      	ldr	r3, [pc, #32]	@ (800c958 <HAL_RTC_Init+0x100>)
 800c936:	22ff      	movs	r2, #255	@ 0xff
 800c938:	625a      	str	r2, [r3, #36]	@ 0x24
 800c93a:	e001      	b.n	800c940 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c93c:	2300      	movs	r3, #0
 800c93e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d103      	bne.n	800c94e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2201      	movs	r2, #1
 800c94a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c950:	4618      	mov	r0, r3
 800c952:	3710      	adds	r7, #16
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	44007800 	.word	0x44007800

0800c95c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c95c:	b590      	push	{r4, r7, lr}
 800c95e:	b087      	sub	sp, #28
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d101      	bne.n	800c976 <HAL_RTC_SetTime+0x1a>
 800c972:	2302      	movs	r3, #2
 800c974:	e07e      	b.n	800ca74 <HAL_RTC_SetTime+0x118>
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2202      	movs	r2, #2
 800c982:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c986:	4b3d      	ldr	r3, [pc, #244]	@ (800ca7c <HAL_RTC_SetTime+0x120>)
 800c988:	22ca      	movs	r2, #202	@ 0xca
 800c98a:	625a      	str	r2, [r3, #36]	@ 0x24
 800c98c:	4b3b      	ldr	r3, [pc, #236]	@ (800ca7c <HAL_RTC_SetTime+0x120>)
 800c98e:	2253      	movs	r2, #83	@ 0x53
 800c990:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f000 f92c 	bl	800cbf0 <RTC_EnterInitMode>
 800c998:	4603      	mov	r3, r0
 800c99a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c99c:	7cfb      	ldrb	r3, [r7, #19]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d159      	bne.n	800ca56 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c9a2:	4b36      	ldr	r3, [pc, #216]	@ (800ca7c <HAL_RTC_SetTime+0x120>)
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c9aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9ae:	d04d      	beq.n	800ca4c <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d125      	bne.n	800ca02 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c9b6:	4b31      	ldr	r3, [pc, #196]	@ (800ca7c <HAL_RTC_SetTime+0x120>)
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d102      	bne.n	800c9c8 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f000 f989 	bl	800cce4 <RTC_ByteToBcd2>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	785b      	ldrb	r3, [r3, #1]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f000 f982 	bl	800cce4 <RTC_ByteToBcd2>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9e4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	789b      	ldrb	r3, [r3, #2]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 f97a 	bl	800cce4 <RTC_ByteToBcd2>
 800c9f0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9f2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	78db      	ldrb	r3, [r3, #3]
 800c9fa:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	617b      	str	r3, [r7, #20]
 800ca00:	e017      	b.n	800ca32 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800ca02:	4b1e      	ldr	r3, [pc, #120]	@ (800ca7c <HAL_RTC_SetTime+0x120>)
 800ca04:	699b      	ldr	r3, [r3, #24]
 800ca06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d102      	bne.n	800ca14 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2200      	movs	r2, #0
 800ca12:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	785b      	ldrb	r3, [r3, #1]
 800ca1e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca20:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ca22:	68ba      	ldr	r2, [r7, #8]
 800ca24:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca26:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	78db      	ldrb	r3, [r3, #3]
 800ca2c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800ca32:	4a12      	ldr	r2, [pc, #72]	@ (800ca7c <HAL_RTC_SetTime+0x120>)
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800ca3a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ca3e:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800ca40:	4b0e      	ldr	r3, [pc, #56]	@ (800ca7c <HAL_RTC_SetTime+0x120>)
 800ca42:	699b      	ldr	r3, [r3, #24]
 800ca44:	4a0d      	ldr	r2, [pc, #52]	@ (800ca7c <HAL_RTC_SetTime+0x120>)
 800ca46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ca4a:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f000 f90b 	bl	800cc68 <RTC_ExitInitMode>
 800ca52:	4603      	mov	r3, r0
 800ca54:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca56:	4b09      	ldr	r3, [pc, #36]	@ (800ca7c <HAL_RTC_SetTime+0x120>)
 800ca58:	22ff      	movs	r2, #255	@ 0xff
 800ca5a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800ca5c:	7cfb      	ldrb	r3, [r7, #19]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d103      	bne.n	800ca6a <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2201      	movs	r2, #1
 800ca66:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800ca72:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	371c      	adds	r7, #28
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd90      	pop	{r4, r7, pc}
 800ca7c:	44007800 	.word	0x44007800

0800ca80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca80:	b590      	push	{r4, r7, lr}
 800ca82:	b087      	sub	sp, #28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d101      	bne.n	800ca9a <HAL_RTC_SetDate+0x1a>
 800ca96:	2302      	movs	r3, #2
 800ca98:	e071      	b.n	800cb7e <HAL_RTC_SetDate+0xfe>
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2202      	movs	r2, #2
 800caa6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d10e      	bne.n	800cace <HAL_RTC_SetDate+0x4e>
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	785b      	ldrb	r3, [r3, #1]
 800cab4:	f003 0310 	and.w	r3, r3, #16
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d008      	beq.n	800cace <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	785b      	ldrb	r3, [r3, #1]
 800cac0:	f023 0310 	bic.w	r3, r3, #16
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	330a      	adds	r3, #10
 800cac8:	b2da      	uxtb	r2, r3
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d11c      	bne.n	800cb0e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	78db      	ldrb	r3, [r3, #3]
 800cad8:	4618      	mov	r0, r3
 800cada:	f000 f903 	bl	800cce4 <RTC_ByteToBcd2>
 800cade:	4603      	mov	r3, r0
 800cae0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	785b      	ldrb	r3, [r3, #1]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 f8fc 	bl	800cce4 <RTC_ByteToBcd2>
 800caec:	4603      	mov	r3, r0
 800caee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800caf0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	789b      	ldrb	r3, [r3, #2]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 f8f4 	bl	800cce4 <RTC_ByteToBcd2>
 800cafc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cafe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	617b      	str	r3, [r7, #20]
 800cb0c:	e00e      	b.n	800cb2c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	78db      	ldrb	r3, [r3, #3]
 800cb12:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	785b      	ldrb	r3, [r3, #1]
 800cb18:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb1a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cb20:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cb28:	4313      	orrs	r3, r2
 800cb2a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb2c:	4b16      	ldr	r3, [pc, #88]	@ (800cb88 <HAL_RTC_SetDate+0x108>)
 800cb2e:	22ca      	movs	r2, #202	@ 0xca
 800cb30:	625a      	str	r2, [r3, #36]	@ 0x24
 800cb32:	4b15      	ldr	r3, [pc, #84]	@ (800cb88 <HAL_RTC_SetDate+0x108>)
 800cb34:	2253      	movs	r2, #83	@ 0x53
 800cb36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f000 f859 	bl	800cbf0 <RTC_EnterInitMode>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cb42:	7cfb      	ldrb	r3, [r7, #19]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10b      	bne.n	800cb60 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800cb48:	4a0f      	ldr	r2, [pc, #60]	@ (800cb88 <HAL_RTC_SetDate+0x108>)
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cb50:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cb54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f000 f886 	bl	800cc68 <RTC_ExitInitMode>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb60:	4b09      	ldr	r3, [pc, #36]	@ (800cb88 <HAL_RTC_SetDate+0x108>)
 800cb62:	22ff      	movs	r2, #255	@ 0xff
 800cb64:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800cb66:	7cfb      	ldrb	r3, [r7, #19]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d103      	bne.n	800cb74 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800cb7c:	7cfb      	ldrb	r3, [r7, #19]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	371c      	adds	r7, #28
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd90      	pop	{r4, r7, pc}
 800cb86:	bf00      	nop
 800cb88:	44007800 	.word	0x44007800

0800cb8c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800cb94:	4b15      	ldr	r3, [pc, #84]	@ (800cbec <HAL_RTC_WaitForSynchro+0x60>)
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	4a14      	ldr	r2, [pc, #80]	@ (800cbec <HAL_RTC_WaitForSynchro+0x60>)
 800cb9a:	f023 0320 	bic.w	r3, r3, #32
 800cb9e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800cba0:	f7f6 fb18 	bl	80031d4 <HAL_GetTick>
 800cba4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cba6:	e013      	b.n	800cbd0 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cba8:	f7f6 fb14 	bl	80031d4 <HAL_GetTick>
 800cbac:	4602      	mov	r2, r0
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cbb6:	d90b      	bls.n	800cbd0 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbb8:	4b0c      	ldr	r3, [pc, #48]	@ (800cbec <HAL_RTC_WaitForSynchro+0x60>)
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	f003 0320 	and.w	r3, r3, #32
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10c      	bne.n	800cbde <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2203      	movs	r2, #3
 800cbc8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800cbcc:	2303      	movs	r3, #3
 800cbce:	e008      	b.n	800cbe2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cbd0:	4b06      	ldr	r3, [pc, #24]	@ (800cbec <HAL_RTC_WaitForSynchro+0x60>)
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	f003 0320 	and.w	r3, r3, #32
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d0e5      	beq.n	800cba8 <HAL_RTC_WaitForSynchro+0x1c>
 800cbdc:	e000      	b.n	800cbe0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800cbde:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	44007800 	.word	0x44007800

0800cbf0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cbfc:	4b19      	ldr	r3, [pc, #100]	@ (800cc64 <RTC_EnterInitMode+0x74>)
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d128      	bne.n	800cc5a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc08:	4b16      	ldr	r3, [pc, #88]	@ (800cc64 <RTC_EnterInitMode+0x74>)
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	4a15      	ldr	r2, [pc, #84]	@ (800cc64 <RTC_EnterInitMode+0x74>)
 800cc0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc12:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800cc14:	f7f6 fade 	bl	80031d4 <HAL_GetTick>
 800cc18:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc1a:	e013      	b.n	800cc44 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cc1c:	f7f6 fada 	bl	80031d4 <HAL_GetTick>
 800cc20:	4602      	mov	r2, r0
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	1ad3      	subs	r3, r2, r3
 800cc26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc2a:	d90b      	bls.n	800cc44 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cc2c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc64 <RTC_EnterInitMode+0x74>)
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10f      	bne.n	800cc58 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800cc38:	2303      	movs	r3, #3
 800cc3a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2203      	movs	r2, #3
 800cc40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cc44:	4b07      	ldr	r3, [pc, #28]	@ (800cc64 <RTC_EnterInitMode+0x74>)
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d104      	bne.n	800cc5a <RTC_EnterInitMode+0x6a>
 800cc50:	7bfb      	ldrb	r3, [r7, #15]
 800cc52:	2b03      	cmp	r3, #3
 800cc54:	d1e2      	bne.n	800cc1c <RTC_EnterInitMode+0x2c>
 800cc56:	e000      	b.n	800cc5a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800cc58:	bf00      	nop
        }
      }
    }
  }

  return status;
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	44007800 	.word	0x44007800

0800cc68 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc70:	2300      	movs	r3, #0
 800cc72:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cc74:	4b1a      	ldr	r3, [pc, #104]	@ (800cce0 <RTC_ExitInitMode+0x78>)
 800cc76:	68db      	ldr	r3, [r3, #12]
 800cc78:	4a19      	ldr	r2, [pc, #100]	@ (800cce0 <RTC_ExitInitMode+0x78>)
 800cc7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc7e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cc80:	4b17      	ldr	r3, [pc, #92]	@ (800cce0 <RTC_ExitInitMode+0x78>)
 800cc82:	699b      	ldr	r3, [r3, #24]
 800cc84:	f003 0320 	and.w	r3, r3, #32
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d10c      	bne.n	800cca6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f7ff ff7d 	bl	800cb8c <HAL_RTC_WaitForSynchro>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d01e      	beq.n	800ccd6 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2203      	movs	r2, #3
 800cc9c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800cca0:	2303      	movs	r3, #3
 800cca2:	73fb      	strb	r3, [r7, #15]
 800cca4:	e017      	b.n	800ccd6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cca6:	4b0e      	ldr	r3, [pc, #56]	@ (800cce0 <RTC_ExitInitMode+0x78>)
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	4a0d      	ldr	r2, [pc, #52]	@ (800cce0 <RTC_ExitInitMode+0x78>)
 800ccac:	f023 0320 	bic.w	r3, r3, #32
 800ccb0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7ff ff6a 	bl	800cb8c <HAL_RTC_WaitForSynchro>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d005      	beq.n	800ccca <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2203      	movs	r2, #3
 800ccc2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ccc6:	2303      	movs	r3, #3
 800ccc8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ccca:	4b05      	ldr	r3, [pc, #20]	@ (800cce0 <RTC_ExitInitMode+0x78>)
 800cccc:	699b      	ldr	r3, [r3, #24]
 800ccce:	4a04      	ldr	r2, [pc, #16]	@ (800cce0 <RTC_ExitInitMode+0x78>)
 800ccd0:	f043 0320 	orr.w	r3, r3, #32
 800ccd4:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ccd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	44007800 	.word	0x44007800

0800cce4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	4603      	mov	r3, r0
 800ccec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800ccf2:	79fb      	ldrb	r3, [r7, #7]
 800ccf4:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800ccf6:	e005      	b.n	800cd04 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800ccfe:	7afb      	ldrb	r3, [r7, #11]
 800cd00:	3b0a      	subs	r3, #10
 800cd02:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800cd04:	7afb      	ldrb	r3, [r7, #11]
 800cd06:	2b09      	cmp	r3, #9
 800cd08:	d8f6      	bhi.n	800ccf8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	011b      	lsls	r3, r3, #4
 800cd10:	b2da      	uxtb	r2, r3
 800cd12:	7afb      	ldrb	r3, [r7, #11]
 800cd14:	4313      	orrs	r3, r2
 800cd16:	b2db      	uxtb	r3, r3
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	681a      	ldr	r2, [r3, #0]
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	4910      	ldr	r1, [pc, #64]	@ (800cd78 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	689a      	ldr	r2, [r3, #8]
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	431a      	orrs	r2, r3
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	699b      	ldr	r3, [r3, #24]
 800cd4a:	490c      	ldr	r1, [pc, #48]	@ (800cd7c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800cd50:	4b0a      	ldr	r3, [pc, #40]	@ (800cd7c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	6919      	ldr	r1, [r3, #16]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	695b      	ldr	r3, [r3, #20]
 800cd60:	041b      	lsls	r3, r3, #16
 800cd62:	430b      	orrs	r3, r1
 800cd64:	4905      	ldr	r1, [pc, #20]	@ (800cd7c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800cd66:	4313      	orrs	r3, r2
 800cd68:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	370c      	adds	r7, #12
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr
 800cd78:	44007800 	.word	0x44007800
 800cd7c:	44007c00 	.word	0x44007c00

0800cd80 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d101      	bne.n	800cd92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e162      	b.n	800d058 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4a70      	ldr	r2, [pc, #448]	@ (800cf58 <HAL_SPI_Init+0x1d8>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d018      	beq.n	800cdce <HAL_SPI_Init+0x4e>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a6e      	ldr	r2, [pc, #440]	@ (800cf5c <HAL_SPI_Init+0x1dc>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d013      	beq.n	800cdce <HAL_SPI_Init+0x4e>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a6d      	ldr	r2, [pc, #436]	@ (800cf60 <HAL_SPI_Init+0x1e0>)
 800cdac:	4293      	cmp	r3, r2
 800cdae:	d00e      	beq.n	800cdce <HAL_SPI_Init+0x4e>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a6b      	ldr	r2, [pc, #428]	@ (800cf64 <HAL_SPI_Init+0x1e4>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d009      	beq.n	800cdce <HAL_SPI_Init+0x4e>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a6a      	ldr	r2, [pc, #424]	@ (800cf68 <HAL_SPI_Init+0x1e8>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d004      	beq.n	800cdce <HAL_SPI_Init+0x4e>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a68      	ldr	r2, [pc, #416]	@ (800cf6c <HAL_SPI_Init+0x1ec>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	e000      	b.n	800cdd0 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800cdce:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a5f      	ldr	r2, [pc, #380]	@ (800cf58 <HAL_SPI_Init+0x1d8>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d018      	beq.n	800ce12 <HAL_SPI_Init+0x92>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a5d      	ldr	r2, [pc, #372]	@ (800cf5c <HAL_SPI_Init+0x1dc>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d013      	beq.n	800ce12 <HAL_SPI_Init+0x92>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a5c      	ldr	r2, [pc, #368]	@ (800cf60 <HAL_SPI_Init+0x1e0>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d00e      	beq.n	800ce12 <HAL_SPI_Init+0x92>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a5a      	ldr	r2, [pc, #360]	@ (800cf64 <HAL_SPI_Init+0x1e4>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d009      	beq.n	800ce12 <HAL_SPI_Init+0x92>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4a59      	ldr	r2, [pc, #356]	@ (800cf68 <HAL_SPI_Init+0x1e8>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d004      	beq.n	800ce12 <HAL_SPI_Init+0x92>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a57      	ldr	r2, [pc, #348]	@ (800cf6c <HAL_SPI_Init+0x1ec>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d105      	bne.n	800ce1e <HAL_SPI_Init+0x9e>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68db      	ldr	r3, [r3, #12]
 800ce16:	2b0f      	cmp	r3, #15
 800ce18:	d901      	bls.n	800ce1e <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	e11c      	b.n	800d058 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 f91e 	bl	800d060 <SPI_GetPacketSize>
 800ce24:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a4b      	ldr	r2, [pc, #300]	@ (800cf58 <HAL_SPI_Init+0x1d8>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d018      	beq.n	800ce62 <HAL_SPI_Init+0xe2>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a49      	ldr	r2, [pc, #292]	@ (800cf5c <HAL_SPI_Init+0x1dc>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d013      	beq.n	800ce62 <HAL_SPI_Init+0xe2>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a48      	ldr	r2, [pc, #288]	@ (800cf60 <HAL_SPI_Init+0x1e0>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d00e      	beq.n	800ce62 <HAL_SPI_Init+0xe2>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a46      	ldr	r2, [pc, #280]	@ (800cf64 <HAL_SPI_Init+0x1e4>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d009      	beq.n	800ce62 <HAL_SPI_Init+0xe2>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a45      	ldr	r2, [pc, #276]	@ (800cf68 <HAL_SPI_Init+0x1e8>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d004      	beq.n	800ce62 <HAL_SPI_Init+0xe2>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a43      	ldr	r2, [pc, #268]	@ (800cf6c <HAL_SPI_Init+0x1ec>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d102      	bne.n	800ce68 <HAL_SPI_Init+0xe8>
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2b08      	cmp	r3, #8
 800ce66:	d820      	bhi.n	800ceaa <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ce6c:	4a40      	ldr	r2, [pc, #256]	@ (800cf70 <HAL_SPI_Init+0x1f0>)
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	d018      	beq.n	800cea4 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a3f      	ldr	r2, [pc, #252]	@ (800cf74 <HAL_SPI_Init+0x1f4>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d013      	beq.n	800cea4 <HAL_SPI_Init+0x124>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4a3d      	ldr	r2, [pc, #244]	@ (800cf78 <HAL_SPI_Init+0x1f8>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d00e      	beq.n	800cea4 <HAL_SPI_Init+0x124>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a3c      	ldr	r2, [pc, #240]	@ (800cf7c <HAL_SPI_Init+0x1fc>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d009      	beq.n	800cea4 <HAL_SPI_Init+0x124>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a3a      	ldr	r2, [pc, #232]	@ (800cf80 <HAL_SPI_Init+0x200>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d004      	beq.n	800cea4 <HAL_SPI_Init+0x124>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a39      	ldr	r2, [pc, #228]	@ (800cf84 <HAL_SPI_Init+0x204>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d104      	bne.n	800ceae <HAL_SPI_Init+0x12e>
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2b10      	cmp	r3, #16
 800cea8:	d901      	bls.n	800ceae <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e0d4      	b.n	800d058 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d106      	bne.n	800cec8 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f7f5 fae2 	bl	800248c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2202      	movs	r2, #2
 800cecc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f022 0201 	bic.w	r2, r2, #1
 800cede:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ceea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	699b      	ldr	r3, [r3, #24]
 800cef0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cef4:	d119      	bne.n	800cf2a <HAL_SPI_Init+0x1aa>
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	685b      	ldr	r3, [r3, #4]
 800cefa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cefe:	d103      	bne.n	800cf08 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d008      	beq.n	800cf1a <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10c      	bne.n	800cf2a <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cf14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf18:	d107      	bne.n	800cf2a <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	681a      	ldr	r2, [r3, #0]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cf28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d028      	beq.n	800cf88 <HAL_SPI_Init+0x208>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	2b06      	cmp	r3, #6
 800cf3c:	d924      	bls.n	800cf88 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	430a      	orrs	r2, r1
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	e020      	b.n	800cf98 <HAL_SPI_Init+0x218>
 800cf56:	bf00      	nop
 800cf58:	40014c00 	.word	0x40014c00
 800cf5c:	50014c00 	.word	0x50014c00
 800cf60:	44002000 	.word	0x44002000
 800cf64:	54002000 	.word	0x54002000
 800cf68:	40015000 	.word	0x40015000
 800cf6c:	50015000 	.word	0x50015000
 800cf70:	40013000 	.word	0x40013000
 800cf74:	50013000 	.word	0x50013000
 800cf78:	40003800 	.word	0x40003800
 800cf7c:	50003800 	.word	0x50003800
 800cf80:	40003c00 	.word	0x40003c00
 800cf84:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cf96:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	69da      	ldr	r2, [r3, #28]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfa0:	431a      	orrs	r2, r3
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	431a      	orrs	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfaa:	ea42 0103 	orr.w	r1, r2, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	68da      	ldr	r2, [r3, #12]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	430a      	orrs	r2, r1
 800cfb8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfc2:	431a      	orrs	r2, r3
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc8:	431a      	orrs	r2, r3
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	699b      	ldr	r3, [r3, #24]
 800cfce:	431a      	orrs	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	431a      	orrs	r2, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	695b      	ldr	r3, [r3, #20]
 800cfda:	431a      	orrs	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a1b      	ldr	r3, [r3, #32]
 800cfe0:	431a      	orrs	r2, r3
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	431a      	orrs	r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfec:	431a      	orrs	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	431a      	orrs	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cff8:	431a      	orrs	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cffe:	431a      	orrs	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d004:	ea42 0103 	orr.w	r1, r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	430a      	orrs	r2, r1
 800d012:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f022 0201 	bic.w	r2, r2, #1
 800d022:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00a      	beq.n	800d046 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	430a      	orrs	r2, r1
 800d044:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800d056:	2300      	movs	r3, #0
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d06c:	095b      	lsrs	r3, r3, #5
 800d06e:	3301      	adds	r3, #1
 800d070:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	3301      	adds	r3, #1
 800d078:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	3307      	adds	r3, #7
 800d07e:	08db      	lsrs	r3, r3, #3
 800d080:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	fb02 f303 	mul.w	r3, r2, r3
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3714      	adds	r7, #20
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b082      	sub	sp, #8
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e042      	b.n	800d12e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d106      	bne.n	800d0c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7f5 faa2 	bl	8002604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2224      	movs	r2, #36	@ 0x24
 800d0c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f022 0201 	bic.w	r2, r2, #1
 800d0d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fab5 	bl	800d650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 f8c4 	bl	800d274 <UART_SetConfig>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d101      	bne.n	800d0f6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e01b      	b.n	800d12e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	685a      	ldr	r2, [r3, #4]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d104:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	689a      	ldr	r2, [r3, #8]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d114:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f042 0201 	orr.w	r2, r2, #1
 800d124:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 fb34 	bl	800d794 <UART_CheckIdleState>
 800d12c:	4603      	mov	r3, r0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b08a      	sub	sp, #40	@ 0x28
 800d13a:	af02      	add	r7, sp, #8
 800d13c:	60f8      	str	r0, [r7, #12]
 800d13e:	60b9      	str	r1, [r7, #8]
 800d140:	603b      	str	r3, [r7, #0]
 800d142:	4613      	mov	r3, r2
 800d144:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d14c:	2b20      	cmp	r3, #32
 800d14e:	f040 808b 	bne.w	800d268 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <HAL_UART_Transmit+0x28>
 800d158:	88fb      	ldrh	r3, [r7, #6]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e083      	b.n	800d26a <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d16c:	2b80      	cmp	r3, #128	@ 0x80
 800d16e:	d107      	bne.n	800d180 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	689a      	ldr	r2, [r3, #8]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d17e:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2200      	movs	r2, #0
 800d184:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2221      	movs	r2, #33	@ 0x21
 800d18c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d190:	f7f6 f820 	bl	80031d4 <HAL_GetTick>
 800d194:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	88fa      	ldrh	r2, [r7, #6]
 800d19a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	88fa      	ldrh	r2, [r7, #6]
 800d1a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1ae:	d108      	bne.n	800d1c2 <HAL_UART_Transmit+0x8c>
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	691b      	ldr	r3, [r3, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d104      	bne.n	800d1c2 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	61bb      	str	r3, [r7, #24]
 800d1c0:	e003      	b.n	800d1ca <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d1ca:	e030      	b.n	800d22e <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	9300      	str	r3, [sp, #0]
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	2180      	movs	r1, #128	@ 0x80
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f000 fb86 	bl	800d8e8 <UART_WaitOnFlagUntilTimeout>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d005      	beq.n	800d1ee <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2220      	movs	r2, #32
 800d1e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d1ea:	2303      	movs	r3, #3
 800d1ec:	e03d      	b.n	800d26a <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d10b      	bne.n	800d20c <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	881b      	ldrh	r3, [r3, #0]
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d202:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	3302      	adds	r3, #2
 800d208:	61bb      	str	r3, [r7, #24]
 800d20a:	e007      	b.n	800d21c <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	781a      	ldrb	r2, [r3, #0]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	3301      	adds	r3, #1
 800d21a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d222:	b29b      	uxth	r3, r3
 800d224:	3b01      	subs	r3, #1
 800d226:	b29a      	uxth	r2, r3
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d234:	b29b      	uxth	r3, r3
 800d236:	2b00      	cmp	r3, #0
 800d238:	d1c8      	bne.n	800d1cc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	2200      	movs	r2, #0
 800d242:	2140      	movs	r1, #64	@ 0x40
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	f000 fb4f 	bl	800d8e8 <UART_WaitOnFlagUntilTimeout>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d005      	beq.n	800d25c <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2220      	movs	r2, #32
 800d254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d258:	2303      	movs	r3, #3
 800d25a:	e006      	b.n	800d26a <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	2220      	movs	r2, #32
 800d260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d264:	2300      	movs	r3, #0
 800d266:	e000      	b.n	800d26a <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800d268:	2302      	movs	r3, #2
  }
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3720      	adds	r7, #32
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
	...

0800d274 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d278:	b094      	sub	sp, #80	@ 0x50
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	4b78      	ldr	r3, [pc, #480]	@ (800d46c <UART_SetConfig+0x1f8>)
 800d28a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d28e:	689a      	ldr	r2, [r3, #8]
 800d290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d292:	691b      	ldr	r3, [r3, #16]
 800d294:	431a      	orrs	r2, r3
 800d296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d298:	695b      	ldr	r3, [r3, #20]
 800d29a:	431a      	orrs	r2, r3
 800d29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d29e:	69db      	ldr	r3, [r3, #28]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4971      	ldr	r1, [pc, #452]	@ (800d470 <UART_SetConfig+0x1fc>)
 800d2ac:	4019      	ands	r1, r3
 800d2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2b4:	430b      	orrs	r3, r1
 800d2b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c4:	68d9      	ldr	r1, [r3, #12]
 800d2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	ea40 0301 	orr.w	r3, r0, r1
 800d2ce:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d2:	699b      	ldr	r3, [r3, #24]
 800d2d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	4b64      	ldr	r3, [pc, #400]	@ (800d46c <UART_SetConfig+0x1f8>)
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d009      	beq.n	800d2f4 <UART_SetConfig+0x80>
 800d2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	4b63      	ldr	r3, [pc, #396]	@ (800d474 <UART_SetConfig+0x200>)
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d004      	beq.n	800d2f4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ec:	6a1a      	ldr	r2, [r3, #32]
 800d2ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d2fe:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d308:	430b      	orrs	r3, r1
 800d30a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d312:	f023 000f 	bic.w	r0, r3, #15
 800d316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d318:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	ea40 0301 	orr.w	r3, r0, r1
 800d322:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	4b53      	ldr	r3, [pc, #332]	@ (800d478 <UART_SetConfig+0x204>)
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d102      	bne.n	800d334 <UART_SetConfig+0xc0>
 800d32e:	2301      	movs	r3, #1
 800d330:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d332:	e066      	b.n	800d402 <UART_SetConfig+0x18e>
 800d334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	4b50      	ldr	r3, [pc, #320]	@ (800d47c <UART_SetConfig+0x208>)
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d102      	bne.n	800d344 <UART_SetConfig+0xd0>
 800d33e:	2302      	movs	r3, #2
 800d340:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d342:	e05e      	b.n	800d402 <UART_SetConfig+0x18e>
 800d344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	4b4d      	ldr	r3, [pc, #308]	@ (800d480 <UART_SetConfig+0x20c>)
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d102      	bne.n	800d354 <UART_SetConfig+0xe0>
 800d34e:	2304      	movs	r3, #4
 800d350:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d352:	e056      	b.n	800d402 <UART_SetConfig+0x18e>
 800d354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	4b4a      	ldr	r3, [pc, #296]	@ (800d484 <UART_SetConfig+0x210>)
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d102      	bne.n	800d364 <UART_SetConfig+0xf0>
 800d35e:	2308      	movs	r3, #8
 800d360:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d362:	e04e      	b.n	800d402 <UART_SetConfig+0x18e>
 800d364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	4b47      	ldr	r3, [pc, #284]	@ (800d488 <UART_SetConfig+0x214>)
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d102      	bne.n	800d374 <UART_SetConfig+0x100>
 800d36e:	2310      	movs	r3, #16
 800d370:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d372:	e046      	b.n	800d402 <UART_SetConfig+0x18e>
 800d374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	4b44      	ldr	r3, [pc, #272]	@ (800d48c <UART_SetConfig+0x218>)
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d102      	bne.n	800d384 <UART_SetConfig+0x110>
 800d37e:	2320      	movs	r3, #32
 800d380:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d382:	e03e      	b.n	800d402 <UART_SetConfig+0x18e>
 800d384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	4b41      	ldr	r3, [pc, #260]	@ (800d490 <UART_SetConfig+0x21c>)
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d102      	bne.n	800d394 <UART_SetConfig+0x120>
 800d38e:	2340      	movs	r3, #64	@ 0x40
 800d390:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d392:	e036      	b.n	800d402 <UART_SetConfig+0x18e>
 800d394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	4b3e      	ldr	r3, [pc, #248]	@ (800d494 <UART_SetConfig+0x220>)
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d102      	bne.n	800d3a4 <UART_SetConfig+0x130>
 800d39e:	2380      	movs	r3, #128	@ 0x80
 800d3a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3a2:	e02e      	b.n	800d402 <UART_SetConfig+0x18e>
 800d3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	4b3b      	ldr	r3, [pc, #236]	@ (800d498 <UART_SetConfig+0x224>)
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d103      	bne.n	800d3b6 <UART_SetConfig+0x142>
 800d3ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d3b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3b4:	e025      	b.n	800d402 <UART_SetConfig+0x18e>
 800d3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	4b38      	ldr	r3, [pc, #224]	@ (800d49c <UART_SetConfig+0x228>)
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d103      	bne.n	800d3c8 <UART_SetConfig+0x154>
 800d3c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d3c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3c6:	e01c      	b.n	800d402 <UART_SetConfig+0x18e>
 800d3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ca:	681a      	ldr	r2, [r3, #0]
 800d3cc:	4b34      	ldr	r3, [pc, #208]	@ (800d4a0 <UART_SetConfig+0x22c>)
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d103      	bne.n	800d3da <UART_SetConfig+0x166>
 800d3d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3d8:	e013      	b.n	800d402 <UART_SetConfig+0x18e>
 800d3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	4b31      	ldr	r3, [pc, #196]	@ (800d4a4 <UART_SetConfig+0x230>)
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d103      	bne.n	800d3ec <UART_SetConfig+0x178>
 800d3e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d3e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3ea:	e00a      	b.n	800d402 <UART_SetConfig+0x18e>
 800d3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	4b1e      	ldr	r3, [pc, #120]	@ (800d46c <UART_SetConfig+0x1f8>)
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d103      	bne.n	800d3fe <UART_SetConfig+0x18a>
 800d3f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3fc:	e001      	b.n	800d402 <UART_SetConfig+0x18e>
 800d3fe:	2300      	movs	r3, #0
 800d400:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	4b19      	ldr	r3, [pc, #100]	@ (800d46c <UART_SetConfig+0x1f8>)
 800d408:	429a      	cmp	r2, r3
 800d40a:	d005      	beq.n	800d418 <UART_SetConfig+0x1a4>
 800d40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	4b18      	ldr	r3, [pc, #96]	@ (800d474 <UART_SetConfig+0x200>)
 800d412:	429a      	cmp	r2, r3
 800d414:	f040 8094 	bne.w	800d540 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d418:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d41a:	2200      	movs	r2, #0
 800d41c:	623b      	str	r3, [r7, #32]
 800d41e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d420:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d424:	f7fc fbea 	bl	8009bfc <HAL_RCCEx_GetPeriphCLKFreq>
 800d428:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d42a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f000 80f7 	beq.w	800d620 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d436:	4a1c      	ldr	r2, [pc, #112]	@ (800d4a8 <UART_SetConfig+0x234>)
 800d438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d43c:	461a      	mov	r2, r3
 800d43e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d440:	fbb3 f3f2 	udiv	r3, r3, r2
 800d444:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d448:	685a      	ldr	r2, [r3, #4]
 800d44a:	4613      	mov	r3, r2
 800d44c:	005b      	lsls	r3, r3, #1
 800d44e:	4413      	add	r3, r2
 800d450:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d452:	429a      	cmp	r2, r3
 800d454:	d305      	bcc.n	800d462 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d45c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d45e:	429a      	cmp	r2, r3
 800d460:	d924      	bls.n	800d4ac <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800d462:	2301      	movs	r3, #1
 800d464:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d468:	e069      	b.n	800d53e <UART_SetConfig+0x2ca>
 800d46a:	bf00      	nop
 800d46c:	44002400 	.word	0x44002400
 800d470:	cfff69f3 	.word	0xcfff69f3
 800d474:	54002400 	.word	0x54002400
 800d478:	40013800 	.word	0x40013800
 800d47c:	40004400 	.word	0x40004400
 800d480:	40004800 	.word	0x40004800
 800d484:	40004c00 	.word	0x40004c00
 800d488:	40005000 	.word	0x40005000
 800d48c:	40006400 	.word	0x40006400
 800d490:	40007800 	.word	0x40007800
 800d494:	40007c00 	.word	0x40007c00
 800d498:	40008000 	.word	0x40008000
 800d49c:	40006800 	.word	0x40006800
 800d4a0:	40006c00 	.word	0x40006c00
 800d4a4:	40008400 	.word	0x40008400
 800d4a8:	08014760 	.word	0x08014760
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	61bb      	str	r3, [r7, #24]
 800d4b2:	61fa      	str	r2, [r7, #28]
 800d4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4b8:	4a64      	ldr	r2, [pc, #400]	@ (800d64c <UART_SetConfig+0x3d8>)
 800d4ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	613b      	str	r3, [r7, #16]
 800d4c4:	617a      	str	r2, [r7, #20]
 800d4c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d4ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d4ce:	f7f2 fedd 	bl	800028c <__aeabi_uldivmod>
 800d4d2:	4602      	mov	r2, r0
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	4610      	mov	r0, r2
 800d4d8:	4619      	mov	r1, r3
 800d4da:	f04f 0200 	mov.w	r2, #0
 800d4de:	f04f 0300 	mov.w	r3, #0
 800d4e2:	020b      	lsls	r3, r1, #8
 800d4e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d4e8:	0202      	lsls	r2, r0, #8
 800d4ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4ec:	6849      	ldr	r1, [r1, #4]
 800d4ee:	0849      	lsrs	r1, r1, #1
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	eb12 0804 	adds.w	r8, r2, r4
 800d4fa:	eb43 0905 	adc.w	r9, r3, r5
 800d4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	60bb      	str	r3, [r7, #8]
 800d506:	60fa      	str	r2, [r7, #12]
 800d508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d50c:	4640      	mov	r0, r8
 800d50e:	4649      	mov	r1, r9
 800d510:	f7f2 febc 	bl	800028c <__aeabi_uldivmod>
 800d514:	4602      	mov	r2, r0
 800d516:	460b      	mov	r3, r1
 800d518:	4613      	mov	r3, r2
 800d51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d51e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d522:	d308      	bcc.n	800d536 <UART_SetConfig+0x2c2>
 800d524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d52a:	d204      	bcs.n	800d536 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800d52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d532:	60da      	str	r2, [r3, #12]
 800d534:	e003      	b.n	800d53e <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800d536:	2301      	movs	r3, #1
 800d538:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d53c:	e070      	b.n	800d620 <UART_SetConfig+0x3ac>
 800d53e:	e06f      	b.n	800d620 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d542:	69db      	ldr	r3, [r3, #28]
 800d544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d548:	d13c      	bne.n	800d5c4 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d54a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d54c:	2200      	movs	r2, #0
 800d54e:	603b      	str	r3, [r7, #0]
 800d550:	607a      	str	r2, [r7, #4]
 800d552:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d556:	f7fc fb51 	bl	8009bfc <HAL_RCCEx_GetPeriphCLKFreq>
 800d55a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d55c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d05e      	beq.n	800d620 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d566:	4a39      	ldr	r2, [pc, #228]	@ (800d64c <UART_SetConfig+0x3d8>)
 800d568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d56c:	461a      	mov	r2, r3
 800d56e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d570:	fbb3 f3f2 	udiv	r3, r3, r2
 800d574:	005a      	lsls	r2, r3, #1
 800d576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	085b      	lsrs	r3, r3, #1
 800d57c:	441a      	add	r2, r3
 800d57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	fbb2 f3f3 	udiv	r3, r2, r3
 800d586:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d58a:	2b0f      	cmp	r3, #15
 800d58c:	d916      	bls.n	800d5bc <UART_SetConfig+0x348>
 800d58e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d594:	d212      	bcs.n	800d5bc <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d598:	b29b      	uxth	r3, r3
 800d59a:	f023 030f 	bic.w	r3, r3, #15
 800d59e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d5a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5a2:	085b      	lsrs	r3, r3, #1
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	f003 0307 	and.w	r3, r3, #7
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d5b8:	60da      	str	r2, [r3, #12]
 800d5ba:	e031      	b.n	800d620 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d5c2:	e02d      	b.n	800d620 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d5c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	469a      	mov	sl, r3
 800d5ca:	4693      	mov	fp, r2
 800d5cc:	4650      	mov	r0, sl
 800d5ce:	4659      	mov	r1, fp
 800d5d0:	f7fc fb14 	bl	8009bfc <HAL_RCCEx_GetPeriphCLKFreq>
 800d5d4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d5d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d021      	beq.n	800d620 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5e0:	4a1a      	ldr	r2, [pc, #104]	@ (800d64c <UART_SetConfig+0x3d8>)
 800d5e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800d5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	085b      	lsrs	r3, r3, #1
 800d5f4:	441a      	add	r2, r3
 800d5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d602:	2b0f      	cmp	r3, #15
 800d604:	d909      	bls.n	800d61a <UART_SetConfig+0x3a6>
 800d606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d60c:	d205      	bcs.n	800d61a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d610:	b29a      	uxth	r2, r3
 800d612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	60da      	str	r2, [r3, #12]
 800d618:	e002      	b.n	800d620 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d622:	2201      	movs	r2, #1
 800d624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d62a:	2201      	movs	r2, #1
 800d62c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d632:	2200      	movs	r2, #0
 800d634:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d638:	2200      	movs	r2, #0
 800d63a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d63c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d640:	4618      	mov	r0, r3
 800d642:	3750      	adds	r7, #80	@ 0x50
 800d644:	46bd      	mov	sp, r7
 800d646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d64a:	bf00      	nop
 800d64c:	08014760 	.word	0x08014760

0800d650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d65c:	f003 0308 	and.w	r3, r3, #8
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00a      	beq.n	800d67a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	430a      	orrs	r2, r1
 800d678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d67e:	f003 0301 	and.w	r3, r3, #1
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00a      	beq.n	800d69c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	430a      	orrs	r2, r1
 800d69a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6a0:	f003 0302 	and.w	r3, r3, #2
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d00a      	beq.n	800d6be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	430a      	orrs	r2, r1
 800d6bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6c2:	f003 0304 	and.w	r3, r3, #4
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00a      	beq.n	800d6e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	430a      	orrs	r2, r1
 800d6de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6e4:	f003 0310 	and.w	r3, r3, #16
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d00a      	beq.n	800d702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	430a      	orrs	r2, r1
 800d700:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d706:	f003 0320 	and.w	r3, r3, #32
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00a      	beq.n	800d724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	689b      	ldr	r3, [r3, #8]
 800d714:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	430a      	orrs	r2, r1
 800d722:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d01a      	beq.n	800d766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	430a      	orrs	r2, r1
 800d744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d74a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d74e:	d10a      	bne.n	800d766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	430a      	orrs	r2, r1
 800d764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d76a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00a      	beq.n	800d788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	430a      	orrs	r2, r1
 800d786:	605a      	str	r2, [r3, #4]
  }
}
 800d788:	bf00      	nop
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b098      	sub	sp, #96	@ 0x60
 800d798:	af02      	add	r7, sp, #8
 800d79a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d7a4:	f7f5 fd16 	bl	80031d4 <HAL_GetTick>
 800d7a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f003 0308 	and.w	r3, r3, #8
 800d7b4:	2b08      	cmp	r3, #8
 800d7b6:	d12f      	bne.n	800d818 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f88e 	bl	800d8e8 <UART_WaitOnFlagUntilTimeout>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d022      	beq.n	800d818 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7da:	e853 3f00 	ldrex	r3, [r3]
 800d7de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d7e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d7e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	461a      	mov	r2, r3
 800d7ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d7f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7f8:	e841 2300 	strex	r3, r2, [r1]
 800d7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d7fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d800:	2b00      	cmp	r3, #0
 800d802:	d1e6      	bne.n	800d7d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2220      	movs	r2, #32
 800d808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d814:	2303      	movs	r3, #3
 800d816:	e063      	b.n	800d8e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f003 0304 	and.w	r3, r3, #4
 800d822:	2b04      	cmp	r3, #4
 800d824:	d149      	bne.n	800d8ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d826:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d82a:	9300      	str	r3, [sp, #0]
 800d82c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d82e:	2200      	movs	r2, #0
 800d830:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f857 	bl	800d8e8 <UART_WaitOnFlagUntilTimeout>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d03c      	beq.n	800d8ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d848:	e853 3f00 	ldrex	r3, [r3]
 800d84c:	623b      	str	r3, [r7, #32]
   return(result);
 800d84e:	6a3b      	ldr	r3, [r7, #32]
 800d850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	461a      	mov	r2, r3
 800d85c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d85e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d860:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d866:	e841 2300 	strex	r3, r2, [r1]
 800d86a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1e6      	bne.n	800d840 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	3308      	adds	r3, #8
 800d878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	e853 3f00 	ldrex	r3, [r3]
 800d880:	60fb      	str	r3, [r7, #12]
   return(result);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f023 0301 	bic.w	r3, r3, #1
 800d888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	3308      	adds	r3, #8
 800d890:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d892:	61fa      	str	r2, [r7, #28]
 800d894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d896:	69b9      	ldr	r1, [r7, #24]
 800d898:	69fa      	ldr	r2, [r7, #28]
 800d89a:	e841 2300 	strex	r3, r2, [r1]
 800d89e:	617b      	str	r3, [r7, #20]
   return(result);
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d1e5      	bne.n	800d872 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2220      	movs	r2, #32
 800d8aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8b6:	2303      	movs	r3, #3
 800d8b8:	e012      	b.n	800d8e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2220      	movs	r2, #32
 800d8be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2220      	movs	r2, #32
 800d8c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d8de:	2300      	movs	r3, #0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3758      	adds	r7, #88	@ 0x58
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8f8:	e04f      	b.n	800d99a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d900:	d04b      	beq.n	800d99a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d902:	f7f5 fc67 	bl	80031d4 <HAL_GetTick>
 800d906:	4602      	mov	r2, r0
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	69ba      	ldr	r2, [r7, #24]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d302      	bcc.n	800d918 <UART_WaitOnFlagUntilTimeout+0x30>
 800d912:	69bb      	ldr	r3, [r7, #24]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d101      	bne.n	800d91c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d918:	2303      	movs	r3, #3
 800d91a:	e04e      	b.n	800d9ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f003 0304 	and.w	r3, r3, #4
 800d926:	2b00      	cmp	r3, #0
 800d928:	d037      	beq.n	800d99a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	2b80      	cmp	r3, #128	@ 0x80
 800d92e:	d034      	beq.n	800d99a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	2b40      	cmp	r3, #64	@ 0x40
 800d934:	d031      	beq.n	800d99a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	69db      	ldr	r3, [r3, #28]
 800d93c:	f003 0308 	and.w	r3, r3, #8
 800d940:	2b08      	cmp	r3, #8
 800d942:	d110      	bne.n	800d966 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2208      	movs	r2, #8
 800d94a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	f000 f838 	bl	800d9c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2208      	movs	r2, #8
 800d956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2200      	movs	r2, #0
 800d95e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d962:	2301      	movs	r3, #1
 800d964:	e029      	b.n	800d9ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	69db      	ldr	r3, [r3, #28]
 800d96c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d974:	d111      	bne.n	800d99a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d97e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f000 f81e 	bl	800d9c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2220      	movs	r2, #32
 800d98a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2200      	movs	r2, #0
 800d992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d996:	2303      	movs	r3, #3
 800d998:	e00f      	b.n	800d9ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	69da      	ldr	r2, [r3, #28]
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	4013      	ands	r3, r2
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	bf0c      	ite	eq
 800d9aa:	2301      	moveq	r3, #1
 800d9ac:	2300      	movne	r3, #0
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	79fb      	ldrb	r3, [r7, #7]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d0a0      	beq.n	800d8fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d9b8:	2300      	movs	r3, #0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b095      	sub	sp, #84	@ 0x54
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9d2:	e853 3f00 	ldrex	r3, [r3]
 800d9d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d9de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d9ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d9ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d9f0:	e841 2300 	strex	r3, r2, [r1]
 800d9f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1e6      	bne.n	800d9ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	3308      	adds	r3, #8
 800da02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da04:	6a3b      	ldr	r3, [r7, #32]
 800da06:	e853 3f00 	ldrex	r3, [r3]
 800da0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da12:	f023 0301 	bic.w	r3, r3, #1
 800da16:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	3308      	adds	r3, #8
 800da1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800da22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da28:	e841 2300 	strex	r3, r2, [r1]
 800da2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1e3      	bne.n	800d9fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d118      	bne.n	800da6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	e853 3f00 	ldrex	r3, [r3]
 800da48:	60bb      	str	r3, [r7, #8]
   return(result);
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	f023 0310 	bic.w	r3, r3, #16
 800da50:	647b      	str	r3, [r7, #68]	@ 0x44
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	461a      	mov	r2, r3
 800da58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da5a:	61bb      	str	r3, [r7, #24]
 800da5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da5e:	6979      	ldr	r1, [r7, #20]
 800da60:	69ba      	ldr	r2, [r7, #24]
 800da62:	e841 2300 	strex	r3, r2, [r1]
 800da66:	613b      	str	r3, [r7, #16]
   return(result);
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1e6      	bne.n	800da3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2220      	movs	r2, #32
 800da72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2200      	movs	r2, #0
 800da7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800da82:	bf00      	nop
 800da84:	3754      	adds	r7, #84	@ 0x54
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800da8e:	b480      	push	{r7}
 800da90:	b085      	sub	sp, #20
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d101      	bne.n	800daa4 <HAL_UARTEx_DisableFifoMode+0x16>
 800daa0:	2302      	movs	r3, #2
 800daa2:	e027      	b.n	800daf4 <HAL_UARTEx_DisableFifoMode+0x66>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2224      	movs	r2, #36	@ 0x24
 800dab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	f022 0201 	bic.w	r2, r2, #1
 800daca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dad2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2200      	movs	r2, #0
 800dad8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2220      	movs	r2, #32
 800dae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3714      	adds	r7, #20
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db10:	2b01      	cmp	r3, #1
 800db12:	d101      	bne.n	800db18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800db14:	2302      	movs	r3, #2
 800db16:	e02d      	b.n	800db74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2201      	movs	r2, #1
 800db1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2224      	movs	r2, #36	@ 0x24
 800db24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f022 0201 	bic.w	r2, r2, #1
 800db3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	683a      	ldr	r2, [r7, #0]
 800db50:	430a      	orrs	r2, r1
 800db52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 f84f 	bl	800dbf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2220      	movs	r2, #32
 800db66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db72:	2300      	movs	r3, #0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d101      	bne.n	800db94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800db90:	2302      	movs	r3, #2
 800db92:	e02d      	b.n	800dbf0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2201      	movs	r2, #1
 800db98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2224      	movs	r2, #36	@ 0x24
 800dba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f022 0201 	bic.w	r2, r2, #1
 800dbba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	683a      	ldr	r2, [r7, #0]
 800dbcc:	430a      	orrs	r2, r1
 800dbce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 f811 	bl	800dbf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2220      	movs	r2, #32
 800dbe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dbee:	2300      	movs	r3, #0
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d108      	bne.n	800dc1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2201      	movs	r2, #1
 800dc14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dc18:	e031      	b.n	800dc7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dc1a:	2308      	movs	r3, #8
 800dc1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dc1e:	2308      	movs	r3, #8
 800dc20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	0e5b      	lsrs	r3, r3, #25
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	f003 0307 	and.w	r3, r3, #7
 800dc30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	0f5b      	lsrs	r3, r3, #29
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	f003 0307 	and.w	r3, r3, #7
 800dc40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc42:	7bbb      	ldrb	r3, [r7, #14]
 800dc44:	7b3a      	ldrb	r2, [r7, #12]
 800dc46:	4911      	ldr	r1, [pc, #68]	@ (800dc8c <UARTEx_SetNbDataToProcess+0x94>)
 800dc48:	5c8a      	ldrb	r2, [r1, r2]
 800dc4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dc4e:	7b3a      	ldrb	r2, [r7, #12]
 800dc50:	490f      	ldr	r1, [pc, #60]	@ (800dc90 <UARTEx_SetNbDataToProcess+0x98>)
 800dc52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dc54:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc60:	7bfb      	ldrb	r3, [r7, #15]
 800dc62:	7b7a      	ldrb	r2, [r7, #13]
 800dc64:	4909      	ldr	r1, [pc, #36]	@ (800dc8c <UARTEx_SetNbDataToProcess+0x94>)
 800dc66:	5c8a      	ldrb	r2, [r1, r2]
 800dc68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dc6c:	7b7a      	ldrb	r2, [r7, #13]
 800dc6e:	4908      	ldr	r1, [pc, #32]	@ (800dc90 <UARTEx_SetNbDataToProcess+0x98>)
 800dc70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dc72:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dc7e:	bf00      	nop
 800dc80:	3714      	adds	r7, #20
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	08014778 	.word	0x08014778
 800dc90:	08014780 	.word	0x08014780

0800dc94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dca0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcac:	f043 0201 	orr.w	r2, r3, #1
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	370c      	adds	r7, #12
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr

0800dcc2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	f107 001c 	add.w	r0, r7, #28
 800dcd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d101      	bne.n	800dcde <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e008      	b.n	800dcf0 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7ff ffd8 	bl	800dc94 <USB_CoreReset>
 800dce4:	4603      	mov	r3, r0
 800dce6:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800dcee:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcfa:	b004      	add	sp, #16
 800dcfc:	4770      	bx	lr

0800dcfe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800dcfe:	b480      	push	{r7}
 800dd00:	b085      	sub	sp, #20
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dd0c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800dd10:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dd18:	2300      	movs	r3, #0
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3714      	adds	r7, #20
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr

0800dd26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800dd26:	b480      	push	{r7}
 800dd28:	b085      	sub	sp, #20
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800dd2e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800dd32:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	43db      	mvns	r3, r3
 800dd3c:	401a      	ands	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800dd42:	2300      	movs	r3, #0
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3714      	adds	r7, #20
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr

0800dd50 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800dd5c:	78fb      	ldrb	r3, [r7, #3]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d106      	bne.n	800dd70 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	641a      	str	r2, [r3, #64]	@ 0x40
 800dd6e:	e00b      	b.n	800dd88 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800dd70:	78fb      	ldrb	r3, [r7, #3]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d106      	bne.n	800dd84 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd7a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	641a      	str	r2, [r3, #64]	@ 0x40
 800dd82:	e001      	b.n	800dd88 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800dd84:	2301      	movs	r3, #1
 800dd86:	e000      	b.n	800dd8a <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	370c      	adds	r7, #12
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr

0800dd96 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800dd96:	b084      	sub	sp, #16
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	f107 001c 	add.w	r0, r7, #28
 800dda4:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2201      	movs	r2, #1
 800ddac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddb2:	f023 0201 	bic.w	r2, r3, #1
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800ddba:	2100      	movs	r1, #0
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff ffc7 	bl	800dd50 <USB_SetCurrentMode>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800ddcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3710      	adds	r7, #16
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddd8:	b004      	add	sp, #16
 800ddda:	4770      	bx	lr

0800dddc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b09f      	sub	sp, #124	@ 0x7c
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800dde6:	2300      	movs	r3, #0
 800dde8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	4413      	add	r3, r2
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	4ba0      	ldr	r3, [pc, #640]	@ (800e07c <USB_ActivateEndpoint+0x2a0>)
 800ddfa:	4013      	ands	r3, r2
 800ddfc:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	78db      	ldrb	r3, [r3, #3]
 800de02:	2b03      	cmp	r3, #3
 800de04:	d819      	bhi.n	800de3a <USB_ActivateEndpoint+0x5e>
 800de06:	a201      	add	r2, pc, #4	@ (adr r2, 800de0c <USB_ActivateEndpoint+0x30>)
 800de08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de0c:	0800de1d 	.word	0x0800de1d
 800de10:	0800de31 	.word	0x0800de31
 800de14:	0800de43 	.word	0x0800de43
 800de18:	0800de27 	.word	0x0800de27
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800de1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800de22:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800de24:	e00e      	b.n	800de44 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800de26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de28:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800de2c:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800de2e:	e009      	b.n	800de44 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800de30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800de36:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800de38:	e004      	b.n	800de44 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800de3a:	2301      	movs	r3, #1
 800de3c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800de40:	e000      	b.n	800de44 <USB_ActivateEndpoint+0x68>
      break;
 800de42:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	441a      	add	r2, r3
 800de4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de58:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	4413      	add	r3, r2
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	4b86      	ldr	r3, [pc, #536]	@ (800e080 <USB_ActivateEndpoint+0x2a4>)
 800de68:	4013      	ands	r3, r2
 800de6a:	683a      	ldr	r2, [r7, #0]
 800de6c:	7812      	ldrb	r2, [r2, #0]
 800de6e:	4313      	orrs	r3, r2
 800de70:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	009b      	lsls	r3, r3, #2
 800de7a:	441a      	add	r2, r3
 800de7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de86:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	7b1b      	ldrb	r3, [r3, #12]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	f040 8177 	bne.w	800e180 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	785b      	ldrb	r3, [r3, #1]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d079      	beq.n	800df8e <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	00db      	lsls	r3, r3, #3
 800dea0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dea4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	00db      	lsls	r3, r3, #3
 800deb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800deb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800deb8:	0c12      	lsrs	r2, r2, #16
 800deba:	0412      	lsls	r2, r2, #16
 800debc:	601a      	str	r2, [r3, #0]
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	00db      	lsls	r3, r3, #3
 800dec4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dec8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800decc:	6819      	ldr	r1, [r3, #0]
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	88db      	ldrh	r3, [r3, #6]
 800ded2:	089b      	lsrs	r3, r3, #2
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	009a      	lsls	r2, r3, #2
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	00db      	lsls	r3, r3, #3
 800dede:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dee2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dee6:	430a      	orrs	r2, r1
 800dee8:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	4413      	add	r3, r2
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	61bb      	str	r3, [r7, #24]
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800defe:	2b00      	cmp	r3, #0
 800df00:	d013      	beq.n	800df2a <USB_ActivateEndpoint+0x14e>
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4413      	add	r3, r2
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	4b5c      	ldr	r3, [pc, #368]	@ (800e080 <USB_ActivateEndpoint+0x2a4>)
 800df10:	4013      	ands	r3, r2
 800df12:	617b      	str	r3, [r7, #20]
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	009b      	lsls	r3, r3, #2
 800df1c:	441a      	add	r2, r3
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800df28:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	78db      	ldrb	r3, [r3, #3]
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d018      	beq.n	800df64 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	4413      	add	r3, r2
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	4b51      	ldr	r3, [pc, #324]	@ (800e084 <USB_ActivateEndpoint+0x2a8>)
 800df40:	4013      	ands	r3, r2
 800df42:	60fb      	str	r3, [r7, #12]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f083 0320 	eor.w	r3, r3, #32
 800df4a:	60fb      	str	r3, [r7, #12]
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	441a      	add	r2, r3
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	e28c      	b.n	800e47e <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	4413      	add	r3, r2
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	4b44      	ldr	r3, [pc, #272]	@ (800e084 <USB_ActivateEndpoint+0x2a8>)
 800df72:	4013      	ands	r3, r2
 800df74:	613b      	str	r3, [r7, #16]
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	441a      	add	r2, r3
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df8a:	6013      	str	r3, [r2, #0]
 800df8c:	e277      	b.n	800e47e <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	00db      	lsls	r3, r3, #3
 800df94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df9c:	685a      	ldr	r2, [r3, #4]
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	00db      	lsls	r3, r3, #3
 800dfa4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfa8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfac:	0c12      	lsrs	r2, r2, #16
 800dfae:	0412      	lsls	r2, r2, #16
 800dfb0:	605a      	str	r2, [r3, #4]
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	00db      	lsls	r3, r3, #3
 800dfb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfc0:	6859      	ldr	r1, [r3, #4]
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	88db      	ldrh	r3, [r3, #6]
 800dfc6:	089b      	lsrs	r3, r3, #2
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	009a      	lsls	r2, r3, #2
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	00db      	lsls	r3, r3, #3
 800dfd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfda:	430a      	orrs	r2, r1
 800dfdc:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	00db      	lsls	r3, r3, #3
 800dfe4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfe8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfec:	685a      	ldr	r2, [r3, #4]
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	00db      	lsls	r3, r3, #3
 800dff4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dff8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dffc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e000:	605a      	str	r2, [r3, #4]
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	691b      	ldr	r3, [r3, #16]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d112      	bne.n	800e030 <USB_ActivateEndpoint+0x254>
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	00db      	lsls	r3, r3, #3
 800e010:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e014:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e018:	685a      	ldr	r2, [r3, #4]
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	00db      	lsls	r3, r3, #3
 800e020:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e024:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e028:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e02c:	605a      	str	r2, [r3, #4]
 800e02e:	e04d      	b.n	800e0cc <USB_ActivateEndpoint+0x2f0>
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	691b      	ldr	r3, [r3, #16]
 800e034:	2b3e      	cmp	r3, #62	@ 0x3e
 800e036:	d827      	bhi.n	800e088 <USB_ActivateEndpoint+0x2ac>
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	691b      	ldr	r3, [r3, #16]
 800e03c:	085b      	lsrs	r3, r3, #1
 800e03e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	691b      	ldr	r3, [r3, #16]
 800e044:	f003 0301 	and.w	r3, r3, #1
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d002      	beq.n	800e052 <USB_ActivateEndpoint+0x276>
 800e04c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e04e:	3301      	adds	r3, #1
 800e050:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	00db      	lsls	r3, r3, #3
 800e058:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e05c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e060:	6859      	ldr	r1, [r3, #4]
 800e062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e064:	069a      	lsls	r2, r3, #26
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e070:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e074:	430a      	orrs	r2, r1
 800e076:	605a      	str	r2, [r3, #4]
 800e078:	e028      	b.n	800e0cc <USB_ActivateEndpoint+0x2f0>
 800e07a:	bf00      	nop
 800e07c:	07ff898f 	.word	0x07ff898f
 800e080:	07ff8f8f 	.word	0x07ff8f8f
 800e084:	07ff8fbf 	.word	0x07ff8fbf
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	691b      	ldr	r3, [r3, #16]
 800e08c:	095b      	lsrs	r3, r3, #5
 800e08e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	691b      	ldr	r3, [r3, #16]
 800e094:	f003 031f 	and.w	r3, r3, #31
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d102      	bne.n	800e0a2 <USB_ActivateEndpoint+0x2c6>
 800e09c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	00db      	lsls	r3, r3, #3
 800e0a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0b0:	685a      	ldr	r2, [r3, #4]
 800e0b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0b4:	069b      	lsls	r3, r3, #26
 800e0b6:	431a      	orrs	r2, r3
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	00db      	lsls	r3, r3, #3
 800e0be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0c6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e0ca:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4413      	add	r3, r2
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d013      	beq.n	800e10c <USB_ActivateEndpoint+0x330>
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	4413      	add	r3, r2
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	4b9c      	ldr	r3, [pc, #624]	@ (800e364 <USB_ActivateEndpoint+0x588>)
 800e0f2:	4013      	ands	r3, r2
 800e0f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	441a      	add	r2, r3
 800e100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e102:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e10a:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d11c      	bne.n	800e14e <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	4b91      	ldr	r3, [pc, #580]	@ (800e368 <USB_ActivateEndpoint+0x58c>)
 800e122:	4013      	ands	r3, r2
 800e124:	61fb      	str	r3, [r7, #28]
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e12c:	61fb      	str	r3, [r7, #28]
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e134:	61fb      	str	r3, [r7, #28]
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	441a      	add	r2, r3
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e14a:	6013      	str	r3, [r2, #0]
 800e14c:	e197      	b.n	800e47e <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	781b      	ldrb	r3, [r3, #0]
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	4413      	add	r3, r2
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	4b83      	ldr	r3, [pc, #524]	@ (800e368 <USB_ActivateEndpoint+0x58c>)
 800e15c:	4013      	ands	r3, r2
 800e15e:	623b      	str	r3, [r7, #32]
 800e160:	6a3b      	ldr	r3, [r7, #32]
 800e162:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e166:	623b      	str	r3, [r7, #32]
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	441a      	add	r2, r3
 800e172:	6a3b      	ldr	r3, [r7, #32]
 800e174:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e17c:	6013      	str	r3, [r2, #0]
 800e17e:	e17e      	b.n	800e47e <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	78db      	ldrb	r3, [r3, #3]
 800e184:	2b02      	cmp	r3, #2
 800e186:	d114      	bne.n	800e1b2 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	4413      	add	r3, r2
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	4b73      	ldr	r3, [pc, #460]	@ (800e364 <USB_ActivateEndpoint+0x588>)
 800e196:	4013      	ands	r3, r2
 800e198:	663b      	str	r3, [r7, #96]	@ 0x60
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	441a      	add	r2, r3
 800e1a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1a6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1ae:	6013      	str	r3, [r2, #0]
 800e1b0:	e013      	b.n	800e1da <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	4413      	add	r3, r2
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	4b6b      	ldr	r3, [pc, #428]	@ (800e36c <USB_ActivateEndpoint+0x590>)
 800e1c0:	4013      	ands	r3, r2
 800e1c2:	667b      	str	r3, [r7, #100]	@ 0x64
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	441a      	add	r2, r3
 800e1ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1d8:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	00db      	lsls	r3, r3, #3
 800e1e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	00db      	lsls	r3, r3, #3
 800e1f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1f8:	0c12      	lsrs	r2, r2, #16
 800e1fa:	0412      	lsls	r2, r2, #16
 800e1fc:	601a      	str	r2, [r3, #0]
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	00db      	lsls	r3, r3, #3
 800e204:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e208:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e20c:	6819      	ldr	r1, [r3, #0]
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	891b      	ldrh	r3, [r3, #8]
 800e212:	089b      	lsrs	r3, r3, #2
 800e214:	b29b      	uxth	r3, r3
 800e216:	009a      	lsls	r2, r3, #2
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	00db      	lsls	r3, r3, #3
 800e21e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e222:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e226:	430a      	orrs	r2, r1
 800e228:	601a      	str	r2, [r3, #0]
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	00db      	lsls	r3, r3, #3
 800e230:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e234:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e238:	685a      	ldr	r2, [r3, #4]
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	00db      	lsls	r3, r3, #3
 800e240:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e244:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e248:	0c12      	lsrs	r2, r2, #16
 800e24a:	0412      	lsls	r2, r2, #16
 800e24c:	605a      	str	r2, [r3, #4]
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	00db      	lsls	r3, r3, #3
 800e254:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e258:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e25c:	6859      	ldr	r1, [r3, #4]
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	895b      	ldrh	r3, [r3, #10]
 800e262:	089b      	lsrs	r3, r3, #2
 800e264:	b29b      	uxth	r3, r3
 800e266:	009a      	lsls	r2, r3, #2
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e272:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e276:	430a      	orrs	r2, r1
 800e278:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	785b      	ldrb	r3, [r3, #1]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d178      	bne.n	800e374 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	009b      	lsls	r3, r3, #2
 800e28a:	4413      	add	r3, r2
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e290:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e296:	2b00      	cmp	r3, #0
 800e298:	d013      	beq.n	800e2c2 <USB_ActivateEndpoint+0x4e6>
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	4413      	add	r3, r2
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	4b2f      	ldr	r3, [pc, #188]	@ (800e364 <USB_ActivateEndpoint+0x588>)
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	441a      	add	r2, r3
 800e2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e2bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2c0:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	009b      	lsls	r3, r3, #2
 800e2ca:	4413      	add	r3, r2
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d013      	beq.n	800e302 <USB_ActivateEndpoint+0x526>
 800e2da:	687a      	ldr	r2, [r7, #4]
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4413      	add	r3, r2
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	4b1f      	ldr	r3, [pc, #124]	@ (800e364 <USB_ActivateEndpoint+0x588>)
 800e2e8:	4013      	ands	r3, r2
 800e2ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	441a      	add	r2, r3
 800e2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e300:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	4413      	add	r3, r2
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	4b16      	ldr	r3, [pc, #88]	@ (800e368 <USB_ActivateEndpoint+0x58c>)
 800e310:	4013      	ands	r3, r2
 800e312:	633b      	str	r3, [r7, #48]	@ 0x30
 800e314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e316:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e31a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e31e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e322:	633b      	str	r3, [r7, #48]	@ 0x30
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	441a      	add	r2, r3
 800e32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e330:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e338:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	4413      	add	r3, r2
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	4b0a      	ldr	r3, [pc, #40]	@ (800e370 <USB_ActivateEndpoint+0x594>)
 800e348:	4013      	ands	r3, r2
 800e34a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	441a      	add	r2, r3
 800e356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e35c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e360:	6013      	str	r3, [r2, #0]
 800e362:	e08c      	b.n	800e47e <USB_ActivateEndpoint+0x6a2>
 800e364:	07ff8f8f 	.word	0x07ff8f8f
 800e368:	07ffbf8f 	.word	0x07ffbf8f
 800e36c:	07ff8e8f 	.word	0x07ff8e8f
 800e370:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	4413      	add	r3, r2
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e382:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d013      	beq.n	800e3b4 <USB_ActivateEndpoint+0x5d8>
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	781b      	ldrb	r3, [r3, #0]
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	4b3d      	ldr	r3, [pc, #244]	@ (800e490 <USB_ActivateEndpoint+0x6b4>)
 800e39a:	4013      	ands	r3, r2
 800e39c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	441a      	add	r2, r3
 800e3a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e3aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e3ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3b2:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	4413      	add	r3, r2
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	657b      	str	r3, [r7, #84]	@ 0x54
 800e3c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d013      	beq.n	800e3f4 <USB_ActivateEndpoint+0x618>
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	4413      	add	r3, r2
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	4b2d      	ldr	r3, [pc, #180]	@ (800e490 <USB_ActivateEndpoint+0x6b4>)
 800e3da:	4013      	ands	r3, r2
 800e3dc:	653b      	str	r3, [r7, #80]	@ 0x50
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	441a      	add	r2, r3
 800e3e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e3ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e3f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	78db      	ldrb	r3, [r3, #3]
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d018      	beq.n	800e42e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	4413      	add	r3, r2
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	4b22      	ldr	r3, [pc, #136]	@ (800e494 <USB_ActivateEndpoint+0x6b8>)
 800e40a:	4013      	ands	r3, r2
 800e40c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e40e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e410:	f083 0320 	eor.w	r3, r3, #32
 800e414:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	009b      	lsls	r3, r3, #2
 800e41e:	441a      	add	r2, r3
 800e420:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e42a:	6013      	str	r3, [r2, #0]
 800e42c:	e013      	b.n	800e456 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	009b      	lsls	r3, r3, #2
 800e436:	4413      	add	r3, r2
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	4b16      	ldr	r3, [pc, #88]	@ (800e494 <USB_ActivateEndpoint+0x6b8>)
 800e43c:	4013      	ands	r3, r2
 800e43e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	441a      	add	r2, r3
 800e44a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e44c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e454:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	4413      	add	r3, r2
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	4b0d      	ldr	r3, [pc, #52]	@ (800e498 <USB_ActivateEndpoint+0x6bc>)
 800e464:	4013      	ands	r3, r2
 800e466:	647b      	str	r3, [r7, #68]	@ 0x44
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	441a      	add	r2, r3
 800e472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e47c:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800e47e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800e482:	4618      	mov	r0, r3
 800e484:	377c      	adds	r7, #124	@ 0x7c
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr
 800e48e:	bf00      	nop
 800e490:	07ff8f8f 	.word	0x07ff8f8f
 800e494:	07ff8fbf 	.word	0x07ff8fbf
 800e498:	07ffbf8f 	.word	0x07ffbf8f

0800e49c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b097      	sub	sp, #92	@ 0x5c
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	7b1b      	ldrb	r3, [r3, #12]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d16d      	bne.n	800e58a <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	785b      	ldrb	r3, [r3, #1]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d034      	beq.n	800e520 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	4413      	add	r3, r2
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	613b      	str	r3, [r7, #16]
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d013      	beq.n	800e4f6 <USB_DeactivateEndpoint+0x5a>
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	4413      	add	r3, r2
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	4b6d      	ldr	r3, [pc, #436]	@ (800e690 <USB_DeactivateEndpoint+0x1f4>)
 800e4dc:	4013      	ands	r3, r2
 800e4de:	60fb      	str	r3, [r7, #12]
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	441a      	add	r2, r3
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e4f4:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	4413      	add	r3, r2
 800e500:	681a      	ldr	r2, [r3, #0]
 800e502:	4b64      	ldr	r3, [pc, #400]	@ (800e694 <USB_DeactivateEndpoint+0x1f8>)
 800e504:	4013      	ands	r3, r2
 800e506:	60bb      	str	r3, [r7, #8]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	441a      	add	r2, r3
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e51c:	6013      	str	r3, [r2, #0]
 800e51e:	e139      	b.n	800e794 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	61fb      	str	r3, [r7, #28]
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e534:	2b00      	cmp	r3, #0
 800e536:	d013      	beq.n	800e560 <USB_DeactivateEndpoint+0xc4>
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	4413      	add	r3, r2
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	4b52      	ldr	r3, [pc, #328]	@ (800e690 <USB_DeactivateEndpoint+0x1f4>)
 800e546:	4013      	ands	r3, r2
 800e548:	61bb      	str	r3, [r7, #24]
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	441a      	add	r2, r3
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e55a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e55e:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	4413      	add	r3, r2
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	4b4a      	ldr	r3, [pc, #296]	@ (800e698 <USB_DeactivateEndpoint+0x1fc>)
 800e56e:	4013      	ands	r3, r2
 800e570:	617b      	str	r3, [r7, #20]
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	009b      	lsls	r3, r3, #2
 800e57a:	441a      	add	r2, r3
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e586:	6013      	str	r3, [r2, #0]
 800e588:	e104      	b.n	800e794 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	785b      	ldrb	r3, [r3, #1]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	f040 8084 	bne.w	800e69c <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	4413      	add	r3, r2
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d013      	beq.n	800e5d4 <USB_DeactivateEndpoint+0x138>
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	4413      	add	r3, r2
 800e5b6:	681a      	ldr	r2, [r3, #0]
 800e5b8:	4b35      	ldr	r3, [pc, #212]	@ (800e690 <USB_DeactivateEndpoint+0x1f4>)
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	441a      	add	r2, r3
 800e5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e5ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5d2:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	4413      	add	r3, r2
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800e5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d013      	beq.n	800e614 <USB_DeactivateEndpoint+0x178>
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	4413      	add	r3, r2
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	4b25      	ldr	r3, [pc, #148]	@ (800e690 <USB_DeactivateEndpoint+0x1f4>)
 800e5fa:	4013      	ands	r3, r2
 800e5fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	009b      	lsls	r3, r3, #2
 800e606:	441a      	add	r2, r3
 800e608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e60a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e60e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e612:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	4413      	add	r3, r2
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	4b1b      	ldr	r3, [pc, #108]	@ (800e690 <USB_DeactivateEndpoint+0x1f4>)
 800e622:	4013      	ands	r3, r2
 800e624:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	009b      	lsls	r3, r3, #2
 800e62e:	441a      	add	r2, r3
 800e630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e636:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e63a:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e63c:	687a      	ldr	r2, [r7, #4]
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	4413      	add	r3, r2
 800e646:	681a      	ldr	r2, [r3, #0]
 800e648:	4b13      	ldr	r3, [pc, #76]	@ (800e698 <USB_DeactivateEndpoint+0x1fc>)
 800e64a:	4013      	ands	r3, r2
 800e64c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	781b      	ldrb	r3, [r3, #0]
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	441a      	add	r2, r3
 800e658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e65a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e65e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e662:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	4413      	add	r3, r2
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	4b08      	ldr	r3, [pc, #32]	@ (800e694 <USB_DeactivateEndpoint+0x1f8>)
 800e672:	4013      	ands	r3, r2
 800e674:	623b      	str	r3, [r7, #32]
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	441a      	add	r2, r3
 800e680:	6a3b      	ldr	r3, [r7, #32]
 800e682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e68a:	6013      	str	r3, [r2, #0]
 800e68c:	e082      	b.n	800e794 <USB_DeactivateEndpoint+0x2f8>
 800e68e:	bf00      	nop
 800e690:	07ff8f8f 	.word	0x07ff8f8f
 800e694:	07ff8fbf 	.word	0x07ff8fbf
 800e698:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4413      	add	r3, r2
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	657b      	str	r3, [r7, #84]	@ 0x54
 800e6aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d013      	beq.n	800e6dc <USB_DeactivateEndpoint+0x240>
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	4413      	add	r3, r2
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	4b38      	ldr	r3, [pc, #224]	@ (800e7a4 <USB_DeactivateEndpoint+0x308>)
 800e6c2:	4013      	ands	r3, r2
 800e6c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	441a      	add	r2, r3
 800e6d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e6d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6da:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d013      	beq.n	800e71c <USB_DeactivateEndpoint+0x280>
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	009b      	lsls	r3, r3, #2
 800e6fc:	4413      	add	r3, r2
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	4b28      	ldr	r3, [pc, #160]	@ (800e7a4 <USB_DeactivateEndpoint+0x308>)
 800e702:	4013      	ands	r3, r2
 800e704:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	441a      	add	r2, r3
 800e710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e716:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e71a:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	4413      	add	r3, r2
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	4b1e      	ldr	r3, [pc, #120]	@ (800e7a4 <USB_DeactivateEndpoint+0x308>)
 800e72a:	4013      	ands	r3, r2
 800e72c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e72e:	687a      	ldr	r2, [r7, #4]
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	441a      	add	r2, r3
 800e738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e73a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e73e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e742:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	4413      	add	r3, r2
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	4b15      	ldr	r3, [pc, #84]	@ (800e7a8 <USB_DeactivateEndpoint+0x30c>)
 800e752:	4013      	ands	r3, r2
 800e754:	643b      	str	r3, [r7, #64]	@ 0x40
 800e756:	687a      	ldr	r2, [r7, #4]
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	441a      	add	r2, r3
 800e760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e76a:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	4413      	add	r3, r2
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	4b0c      	ldr	r3, [pc, #48]	@ (800e7ac <USB_DeactivateEndpoint+0x310>)
 800e77a:	4013      	ands	r3, r2
 800e77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	441a      	add	r2, r3
 800e788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e78a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e78e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e792:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e794:	2300      	movs	r3, #0
}
 800e796:	4618      	mov	r0, r3
 800e798:	375c      	adds	r7, #92	@ 0x5c
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	07ff8f8f 	.word	0x07ff8f8f
 800e7a8:	07ff8fbf 	.word	0x07ff8fbf
 800e7ac:	07ffbf8f 	.word	0x07ffbf8f

0800e7b0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b096      	sub	sp, #88	@ 0x58
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	785b      	ldrb	r3, [r3, #1]
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	f040 84ed 	bne.w	800f19e <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	699a      	ldr	r2, [r3, #24]
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	691b      	ldr	r3, [r3, #16]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d903      	bls.n	800e7d8 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	657b      	str	r3, [r7, #84]	@ 0x54
 800e7d6:	e002      	b.n	800e7de <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	699b      	ldr	r3, [r3, #24]
 800e7dc:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	7b1b      	ldrb	r3, [r3, #12]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d12e      	bne.n	800e844 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	6959      	ldr	r1, [r3, #20]
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	88da      	ldrh	r2, [r3, #6]
 800e7ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f001 f963 	bl	800fabe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	00db      	lsls	r3, r3, #3
 800e7fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e802:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	00db      	lsls	r3, r3, #3
 800e80e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e812:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e816:	b292      	uxth	r2, r2
 800e818:	601a      	str	r2, [r3, #0]
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	00db      	lsls	r3, r3, #3
 800e820:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e824:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e828:	6819      	ldr	r1, [r3, #0]
 800e82a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e82c:	041a      	lsls	r2, r3, #16
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	00db      	lsls	r3, r3, #3
 800e834:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e838:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e83c:	430a      	orrs	r2, r1
 800e83e:	601a      	str	r2, [r3, #0]
 800e840:	f000 bc90 	b.w	800f164 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	78db      	ldrb	r3, [r3, #3]
 800e848:	2b02      	cmp	r3, #2
 800e84a:	f040 8332 	bne.w	800eeb2 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	6a1a      	ldr	r2, [r3, #32]
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	691b      	ldr	r3, [r3, #16]
 800e856:	429a      	cmp	r2, r3
 800e858:	f240 82e4 	bls.w	800ee24 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	4413      	add	r3, r2
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	4ba4      	ldr	r3, [pc, #656]	@ (800eafc <USB_EPStartXfer+0x34c>)
 800e86a:	4013      	ands	r3, r2
 800e86c:	613b      	str	r3, [r7, #16]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	441a      	add	r2, r3
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e87e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e882:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	6a1a      	ldr	r2, [r3, #32]
 800e888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e88a:	1ad2      	subs	r2, r2, r3
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	4413      	add	r3, r2
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f000 8161 	beq.w	800eb68 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	785b      	ldrb	r3, [r3, #1]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d16a      	bne.n	800e984 <USB_EPStartXfer+0x1d4>
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	00db      	lsls	r3, r3, #3
 800e8b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8bc:	685a      	ldr	r2, [r3, #4]
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	00db      	lsls	r3, r3, #3
 800e8c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8cc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e8d0:	605a      	str	r2, [r3, #4]
 800e8d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d112      	bne.n	800e8fe <USB_EPStartXfer+0x14e>
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	00db      	lsls	r3, r3, #3
 800e8de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8e6:	685a      	ldr	r2, [r3, #4]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	00db      	lsls	r3, r3, #3
 800e8ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8f6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e8fa:	605a      	str	r2, [r3, #4]
 800e8fc:	e06a      	b.n	800e9d4 <USB_EPStartXfer+0x224>
 800e8fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e900:	2b3e      	cmp	r3, #62	@ 0x3e
 800e902:	d81e      	bhi.n	800e942 <USB_EPStartXfer+0x192>
 800e904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e906:	085b      	lsrs	r3, r3, #1
 800e908:	653b      	str	r3, [r7, #80]	@ 0x50
 800e90a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e90c:	f003 0301 	and.w	r3, r3, #1
 800e910:	2b00      	cmp	r3, #0
 800e912:	d002      	beq.n	800e91a <USB_EPStartXfer+0x16a>
 800e914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e916:	3301      	adds	r3, #1
 800e918:	653b      	str	r3, [r7, #80]	@ 0x50
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	00db      	lsls	r3, r3, #3
 800e920:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e924:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e928:	6859      	ldr	r1, [r3, #4]
 800e92a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e92c:	069a      	lsls	r2, r3, #26
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	00db      	lsls	r3, r3, #3
 800e934:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e938:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e93c:	430a      	orrs	r2, r1
 800e93e:	605a      	str	r2, [r3, #4]
 800e940:	e048      	b.n	800e9d4 <USB_EPStartXfer+0x224>
 800e942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e944:	095b      	lsrs	r3, r3, #5
 800e946:	653b      	str	r3, [r7, #80]	@ 0x50
 800e948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e94a:	f003 031f 	and.w	r3, r3, #31
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d102      	bne.n	800e958 <USB_EPStartXfer+0x1a8>
 800e952:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e954:	3b01      	subs	r3, #1
 800e956:	653b      	str	r3, [r7, #80]	@ 0x50
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e962:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e966:	685a      	ldr	r2, [r3, #4]
 800e968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e96a:	069b      	lsls	r3, r3, #26
 800e96c:	431a      	orrs	r2, r3
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	00db      	lsls	r3, r3, #3
 800e974:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e978:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e97c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e980:	605a      	str	r2, [r3, #4]
 800e982:	e027      	b.n	800e9d4 <USB_EPStartXfer+0x224>
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	785b      	ldrb	r3, [r3, #1]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d123      	bne.n	800e9d4 <USB_EPStartXfer+0x224>
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	00db      	lsls	r3, r3, #3
 800e992:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e996:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e99a:	685a      	ldr	r2, [r3, #4]
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	00db      	lsls	r3, r3, #3
 800e9a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9aa:	b292      	uxth	r2, r2
 800e9ac:	605a      	str	r2, [r3, #4]
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	00db      	lsls	r3, r3, #3
 800e9b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9bc:	6859      	ldr	r1, [r3, #4]
 800e9be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9c0:	041a      	lsls	r2, r3, #16
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	00db      	lsls	r3, r3, #3
 800e9c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9d0:	430a      	orrs	r2, r1
 800e9d2:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	895b      	ldrh	r3, [r3, #10]
 800e9d8:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	6959      	ldr	r1, [r3, #20]
 800e9de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	8b7a      	ldrh	r2, [r7, #26]
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f001 f86a 	bl	800fabe <USB_WritePMA>
            ep->xfer_buff += len;
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	695a      	ldr	r2, [r3, #20]
 800e9ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9f0:	441a      	add	r2, r3
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	6a1a      	ldr	r2, [r3, #32]
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	691b      	ldr	r3, [r3, #16]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d906      	bls.n	800ea10 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	6a1a      	ldr	r2, [r3, #32]
 800ea06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea08:	1ad2      	subs	r2, r2, r3
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	621a      	str	r2, [r3, #32]
 800ea0e:	e005      	b.n	800ea1c <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	6a1b      	ldr	r3, [r3, #32]
 800ea14:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	785b      	ldrb	r3, [r3, #1]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d16d      	bne.n	800eb00 <USB_EPStartXfer+0x350>
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	00db      	lsls	r3, r3, #3
 800ea2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	00db      	lsls	r3, r3, #3
 800ea3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea42:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ea46:	601a      	str	r2, [r3, #0]
 800ea48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d112      	bne.n	800ea74 <USB_EPStartXfer+0x2c4>
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	00db      	lsls	r3, r3, #3
 800ea54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	00db      	lsls	r3, r3, #3
 800ea64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea6c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ea70:	601a      	str	r2, [r3, #0]
 800ea72:	e06d      	b.n	800eb50 <USB_EPStartXfer+0x3a0>
 800ea74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea76:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea78:	d81e      	bhi.n	800eab8 <USB_EPStartXfer+0x308>
 800ea7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea7c:	085b      	lsrs	r3, r3, #1
 800ea7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea82:	f003 0301 	and.w	r3, r3, #1
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d002      	beq.n	800ea90 <USB_EPStartXfer+0x2e0>
 800ea8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	00db      	lsls	r3, r3, #3
 800ea96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea9e:	6819      	ldr	r1, [r3, #0]
 800eaa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaa2:	069a      	lsls	r2, r3, #26
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	00db      	lsls	r3, r3, #3
 800eaaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eaae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eab2:	430a      	orrs	r2, r1
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	e04b      	b.n	800eb50 <USB_EPStartXfer+0x3a0>
 800eab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaba:	095b      	lsrs	r3, r3, #5
 800eabc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eabe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eac0:	f003 031f 	and.w	r3, r3, #31
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d102      	bne.n	800eace <USB_EPStartXfer+0x31e>
 800eac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaca:	3b01      	subs	r3, #1
 800eacc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	00db      	lsls	r3, r3, #3
 800ead4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ead8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eae0:	069b      	lsls	r3, r3, #26
 800eae2:	431a      	orrs	r2, r3
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	00db      	lsls	r3, r3, #3
 800eaea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eaee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eaf2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eaf6:	601a      	str	r2, [r3, #0]
 800eaf8:	e02a      	b.n	800eb50 <USB_EPStartXfer+0x3a0>
 800eafa:	bf00      	nop
 800eafc:	07ff8f8f 	.word	0x07ff8f8f
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	785b      	ldrb	r3, [r3, #1]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d123      	bne.n	800eb50 <USB_EPStartXfer+0x3a0>
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	00db      	lsls	r3, r3, #3
 800eb0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb16:	681a      	ldr	r2, [r3, #0]
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	00db      	lsls	r3, r3, #3
 800eb1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb26:	b292      	uxth	r2, r2
 800eb28:	601a      	str	r2, [r3, #0]
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	00db      	lsls	r3, r3, #3
 800eb30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb38:	6819      	ldr	r1, [r3, #0]
 800eb3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb3c:	041a      	lsls	r2, r3, #16
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	00db      	lsls	r3, r3, #3
 800eb44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb4c:	430a      	orrs	r2, r1
 800eb4e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	891b      	ldrh	r3, [r3, #8]
 800eb54:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	6959      	ldr	r1, [r3, #20]
 800eb5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	8b7a      	ldrh	r2, [r7, #26]
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 ffac 	bl	800fabe <USB_WritePMA>
 800eb66:	e2fd      	b.n	800f164 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	785b      	ldrb	r3, [r3, #1]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d16a      	bne.n	800ec46 <USB_EPStartXfer+0x496>
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	00db      	lsls	r3, r3, #3
 800eb76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	00db      	lsls	r3, r3, #3
 800eb86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb8e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d112      	bne.n	800ebc0 <USB_EPStartXfer+0x410>
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	00db      	lsls	r3, r3, #3
 800eba0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eba4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	00db      	lsls	r3, r3, #3
 800ebb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebb8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ebbc:	601a      	str	r2, [r3, #0]
 800ebbe:	e06a      	b.n	800ec96 <USB_EPStartXfer+0x4e6>
 800ebc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebc2:	2b3e      	cmp	r3, #62	@ 0x3e
 800ebc4:	d81e      	bhi.n	800ec04 <USB_EPStartXfer+0x454>
 800ebc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebc8:	085b      	lsrs	r3, r3, #1
 800ebca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ebcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebce:	f003 0301 	and.w	r3, r3, #1
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d002      	beq.n	800ebdc <USB_EPStartXfer+0x42c>
 800ebd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebd8:	3301      	adds	r3, #1
 800ebda:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	00db      	lsls	r3, r3, #3
 800ebe2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebe6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebea:	6819      	ldr	r1, [r3, #0]
 800ebec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebee:	069a      	lsls	r2, r3, #26
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	00db      	lsls	r3, r3, #3
 800ebf6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ebfa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ebfe:	430a      	orrs	r2, r1
 800ec00:	601a      	str	r2, [r3, #0]
 800ec02:	e048      	b.n	800ec96 <USB_EPStartXfer+0x4e6>
 800ec04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec06:	095b      	lsrs	r3, r3, #5
 800ec08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec0c:	f003 031f 	and.w	r3, r3, #31
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d102      	bne.n	800ec1a <USB_EPStartXfer+0x46a>
 800ec14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec16:	3b01      	subs	r3, #1
 800ec18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	00db      	lsls	r3, r3, #3
 800ec20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec2c:	069b      	lsls	r3, r3, #26
 800ec2e:	431a      	orrs	r2, r3
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	00db      	lsls	r3, r3, #3
 800ec36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec3e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ec42:	601a      	str	r2, [r3, #0]
 800ec44:	e027      	b.n	800ec96 <USB_EPStartXfer+0x4e6>
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	785b      	ldrb	r3, [r3, #1]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d123      	bne.n	800ec96 <USB_EPStartXfer+0x4e6>
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	00db      	lsls	r3, r3, #3
 800ec54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	00db      	lsls	r3, r3, #3
 800ec64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec6c:	b292      	uxth	r2, r2
 800ec6e:	601a      	str	r2, [r3, #0]
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	00db      	lsls	r3, r3, #3
 800ec76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec7e:	6819      	ldr	r1, [r3, #0]
 800ec80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec82:	041a      	lsls	r2, r3, #16
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	00db      	lsls	r3, r3, #3
 800ec8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec92:	430a      	orrs	r2, r1
 800ec94:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	891b      	ldrh	r3, [r3, #8]
 800ec9a:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	6959      	ldr	r1, [r3, #20]
 800eca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	8b7a      	ldrh	r2, [r7, #26]
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f000 ff09 	bl	800fabe <USB_WritePMA>
            ep->xfer_buff += len;
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	695a      	ldr	r2, [r3, #20]
 800ecb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecb2:	441a      	add	r2, r3
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	6a1a      	ldr	r2, [r3, #32]
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	691b      	ldr	r3, [r3, #16]
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d906      	bls.n	800ecd2 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	6a1a      	ldr	r2, [r3, #32]
 800ecc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecca:	1ad2      	subs	r2, r2, r3
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	621a      	str	r2, [r3, #32]
 800ecd0:	e005      	b.n	800ecde <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	6a1b      	ldr	r3, [r3, #32]
 800ecd6:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	785b      	ldrb	r3, [r3, #1]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d16a      	bne.n	800edbc <USB_EPStartXfer+0x60c>
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	00db      	lsls	r3, r3, #3
 800ecec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecf0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecf4:	685a      	ldr	r2, [r3, #4]
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	00db      	lsls	r3, r3, #3
 800ecfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed04:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ed08:	605a      	str	r2, [r3, #4]
 800ed0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d112      	bne.n	800ed36 <USB_EPStartXfer+0x586>
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	00db      	lsls	r3, r3, #3
 800ed16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed1e:	685a      	ldr	r2, [r3, #4]
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	00db      	lsls	r3, r3, #3
 800ed26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed2e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ed32:	605a      	str	r2, [r3, #4]
 800ed34:	e06a      	b.n	800ee0c <USB_EPStartXfer+0x65c>
 800ed36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed38:	2b3e      	cmp	r3, #62	@ 0x3e
 800ed3a:	d81e      	bhi.n	800ed7a <USB_EPStartXfer+0x5ca>
 800ed3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed3e:	085b      	lsrs	r3, r3, #1
 800ed40:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed44:	f003 0301 	and.w	r3, r3, #1
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <USB_EPStartXfer+0x5a2>
 800ed4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed4e:	3301      	adds	r3, #1
 800ed50:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	00db      	lsls	r3, r3, #3
 800ed58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed60:	6859      	ldr	r1, [r3, #4]
 800ed62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed64:	069a      	lsls	r2, r3, #26
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	00db      	lsls	r3, r3, #3
 800ed6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed74:	430a      	orrs	r2, r1
 800ed76:	605a      	str	r2, [r3, #4]
 800ed78:	e048      	b.n	800ee0c <USB_EPStartXfer+0x65c>
 800ed7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed7c:	095b      	lsrs	r3, r3, #5
 800ed7e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed82:	f003 031f 	and.w	r3, r3, #31
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d102      	bne.n	800ed90 <USB_EPStartXfer+0x5e0>
 800ed8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed8c:	3b01      	subs	r3, #1
 800ed8e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	00db      	lsls	r3, r3, #3
 800ed96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed9e:	685a      	ldr	r2, [r3, #4]
 800eda0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eda2:	069b      	lsls	r3, r3, #26
 800eda4:	431a      	orrs	r2, r3
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	00db      	lsls	r3, r3, #3
 800edac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edb4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800edb8:	605a      	str	r2, [r3, #4]
 800edba:	e027      	b.n	800ee0c <USB_EPStartXfer+0x65c>
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	785b      	ldrb	r3, [r3, #1]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d123      	bne.n	800ee0c <USB_EPStartXfer+0x65c>
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	00db      	lsls	r3, r3, #3
 800edca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edd2:	685a      	ldr	r2, [r3, #4]
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	00db      	lsls	r3, r3, #3
 800edda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ede2:	b292      	uxth	r2, r2
 800ede4:	605a      	str	r2, [r3, #4]
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	00db      	lsls	r3, r3, #3
 800edec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edf0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edf4:	6859      	ldr	r1, [r3, #4]
 800edf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edf8:	041a      	lsls	r2, r3, #16
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	00db      	lsls	r3, r3, #3
 800ee00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee08:	430a      	orrs	r2, r1
 800ee0a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	895b      	ldrh	r3, [r3, #10]
 800ee10:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	6959      	ldr	r1, [r3, #20]
 800ee16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	8b7a      	ldrh	r2, [r7, #26]
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f000 fe4e 	bl	800fabe <USB_WritePMA>
 800ee22:	e19f      	b.n	800f164 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	6a1b      	ldr	r3, [r3, #32]
 800ee28:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	4ba0      	ldr	r3, [pc, #640]	@ (800f0b8 <USB_EPStartXfer+0x908>)
 800ee38:	4013      	ands	r3, r2
 800ee3a:	617b      	str	r3, [r7, #20]
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	441a      	add	r2, r3
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ee4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee50:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	00db      	lsls	r3, r3, #3
 800ee58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	00db      	lsls	r3, r3, #3
 800ee68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee70:	b292      	uxth	r2, r2
 800ee72:	601a      	str	r2, [r3, #0]
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	00db      	lsls	r3, r3, #3
 800ee7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee82:	6819      	ldr	r1, [r3, #0]
 800ee84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee86:	041a      	lsls	r2, r3, #16
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	00db      	lsls	r3, r3, #3
 800ee8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee96:	430a      	orrs	r2, r1
 800ee98:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	891b      	ldrh	r3, [r3, #8]
 800ee9e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	6959      	ldr	r1, [r3, #20]
 800eea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	8b7a      	ldrh	r2, [r7, #26]
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 fe07 	bl	800fabe <USB_WritePMA>
 800eeb0:	e158      	b.n	800f164 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	6a1a      	ldr	r2, [r3, #32]
 800eeb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeb8:	1ad2      	subs	r2, r2, r3
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	009b      	lsls	r3, r3, #2
 800eec6:	4413      	add	r3, r2
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eece:	2b00      	cmp	r3, #0
 800eed0:	f000 80a3 	beq.w	800f01a <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	785b      	ldrb	r3, [r3, #1]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d16a      	bne.n	800efb2 <USB_EPStartXfer+0x802>
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	00db      	lsls	r3, r3, #3
 800eee2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eee6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eeea:	685a      	ldr	r2, [r3, #4]
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	00db      	lsls	r3, r3, #3
 800eef2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eef6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eefa:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800eefe:	605a      	str	r2, [r3, #4]
 800ef00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d112      	bne.n	800ef2c <USB_EPStartXfer+0x77c>
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	00db      	lsls	r3, r3, #3
 800ef0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef14:	685a      	ldr	r2, [r3, #4]
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	00db      	lsls	r3, r3, #3
 800ef1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef24:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ef28:	605a      	str	r2, [r3, #4]
 800ef2a:	e06a      	b.n	800f002 <USB_EPStartXfer+0x852>
 800ef2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef2e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ef30:	d81e      	bhi.n	800ef70 <USB_EPStartXfer+0x7c0>
 800ef32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef34:	085b      	lsrs	r3, r3, #1
 800ef36:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef3a:	f003 0301 	and.w	r3, r3, #1
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d002      	beq.n	800ef48 <USB_EPStartXfer+0x798>
 800ef42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef44:	3301      	adds	r3, #1
 800ef46:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	00db      	lsls	r3, r3, #3
 800ef4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef56:	6859      	ldr	r1, [r3, #4]
 800ef58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef5a:	069a      	lsls	r2, r3, #26
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	00db      	lsls	r3, r3, #3
 800ef62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef6a:	430a      	orrs	r2, r1
 800ef6c:	605a      	str	r2, [r3, #4]
 800ef6e:	e048      	b.n	800f002 <USB_EPStartXfer+0x852>
 800ef70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef72:	095b      	lsrs	r3, r3, #5
 800ef74:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef78:	f003 031f 	and.w	r3, r3, #31
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d102      	bne.n	800ef86 <USB_EPStartXfer+0x7d6>
 800ef80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef82:	3b01      	subs	r3, #1
 800ef84:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	00db      	lsls	r3, r3, #3
 800ef8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ef90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ef94:	685a      	ldr	r2, [r3, #4]
 800ef96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef98:	069b      	lsls	r3, r3, #26
 800ef9a:	431a      	orrs	r2, r3
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	00db      	lsls	r3, r3, #3
 800efa2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efa6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efaa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800efae:	605a      	str	r2, [r3, #4]
 800efb0:	e027      	b.n	800f002 <USB_EPStartXfer+0x852>
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	785b      	ldrb	r3, [r3, #1]
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d123      	bne.n	800f002 <USB_EPStartXfer+0x852>
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	00db      	lsls	r3, r3, #3
 800efc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efc8:	685a      	ldr	r2, [r3, #4]
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	781b      	ldrb	r3, [r3, #0]
 800efce:	00db      	lsls	r3, r3, #3
 800efd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efd8:	b292      	uxth	r2, r2
 800efda:	605a      	str	r2, [r3, #4]
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	00db      	lsls	r3, r3, #3
 800efe2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800efe6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800efea:	6859      	ldr	r1, [r3, #4]
 800efec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efee:	041a      	lsls	r2, r3, #16
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	00db      	lsls	r3, r3, #3
 800eff6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800effa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800effe:	430a      	orrs	r2, r1
 800f000:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	895b      	ldrh	r3, [r3, #10]
 800f006:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	6959      	ldr	r1, [r3, #20]
 800f00c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f00e:	b29b      	uxth	r3, r3
 800f010:	8b7a      	ldrh	r2, [r7, #26]
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 fd53 	bl	800fabe <USB_WritePMA>
 800f018:	e0a4      	b.n	800f164 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	785b      	ldrb	r3, [r3, #1]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d16d      	bne.n	800f0fe <USB_EPStartXfer+0x94e>
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	00db      	lsls	r3, r3, #3
 800f028:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f02c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	00db      	lsls	r3, r3, #3
 800f038:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f03c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f040:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f044:	601a      	str	r2, [r3, #0]
 800f046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d112      	bne.n	800f072 <USB_EPStartXfer+0x8c2>
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	00db      	lsls	r3, r3, #3
 800f052:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f056:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	00db      	lsls	r3, r3, #3
 800f062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f066:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f06a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f06e:	601a      	str	r2, [r3, #0]
 800f070:	e06d      	b.n	800f14e <USB_EPStartXfer+0x99e>
 800f072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f074:	2b3e      	cmp	r3, #62	@ 0x3e
 800f076:	d821      	bhi.n	800f0bc <USB_EPStartXfer+0x90c>
 800f078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f07a:	085b      	lsrs	r3, r3, #1
 800f07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f07e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f080:	f003 0301 	and.w	r3, r3, #1
 800f084:	2b00      	cmp	r3, #0
 800f086:	d002      	beq.n	800f08e <USB_EPStartXfer+0x8de>
 800f088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f08a:	3301      	adds	r3, #1
 800f08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	00db      	lsls	r3, r3, #3
 800f094:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f098:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f09c:	6819      	ldr	r1, [r3, #0]
 800f09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0a0:	069a      	lsls	r2, r3, #26
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	00db      	lsls	r3, r3, #3
 800f0a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0b0:	430a      	orrs	r2, r1
 800f0b2:	601a      	str	r2, [r3, #0]
 800f0b4:	e04b      	b.n	800f14e <USB_EPStartXfer+0x99e>
 800f0b6:	bf00      	nop
 800f0b8:	07ff8e8f 	.word	0x07ff8e8f
 800f0bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0be:	095b      	lsrs	r3, r3, #5
 800f0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0c4:	f003 031f 	and.w	r3, r3, #31
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d102      	bne.n	800f0d2 <USB_EPStartXfer+0x922>
 800f0cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0ce:	3b01      	subs	r3, #1
 800f0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	781b      	ldrb	r3, [r3, #0]
 800f0d6:	00db      	lsls	r3, r3, #3
 800f0d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0e4:	069b      	lsls	r3, r3, #26
 800f0e6:	431a      	orrs	r2, r3
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	00db      	lsls	r3, r3, #3
 800f0ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f0f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f0f6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f0fa:	601a      	str	r2, [r3, #0]
 800f0fc:	e027      	b.n	800f14e <USB_EPStartXfer+0x99e>
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	785b      	ldrb	r3, [r3, #1]
 800f102:	2b01      	cmp	r3, #1
 800f104:	d123      	bne.n	800f14e <USB_EPStartXfer+0x99e>
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	00db      	lsls	r3, r3, #3
 800f10c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f110:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	00db      	lsls	r3, r3, #3
 800f11c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f120:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f124:	b292      	uxth	r2, r2
 800f126:	601a      	str	r2, [r3, #0]
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	00db      	lsls	r3, r3, #3
 800f12e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f132:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f136:	6819      	ldr	r1, [r3, #0]
 800f138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f13a:	041a      	lsls	r2, r3, #16
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	00db      	lsls	r3, r3, #3
 800f142:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f146:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f14a:	430a      	orrs	r2, r1
 800f14c:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	891b      	ldrh	r3, [r3, #8]
 800f152:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	6959      	ldr	r1, [r3, #20]
 800f158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	8b7a      	ldrh	r2, [r7, #26]
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 fcad 	bl	800fabe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800f164:	687a      	ldr	r2, [r7, #4]
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	4413      	add	r3, r2
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	4b8b      	ldr	r3, [pc, #556]	@ (800f3a0 <USB_EPStartXfer+0xbf0>)
 800f172:	4013      	ands	r3, r2
 800f174:	60fb      	str	r3, [r7, #12]
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f083 0310 	eor.w	r3, r3, #16
 800f17c:	60fb      	str	r3, [r7, #12]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f083 0320 	eor.w	r3, r3, #32
 800f184:	60fb      	str	r3, [r7, #12]
 800f186:	687a      	ldr	r2, [r7, #4]
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	009b      	lsls	r3, r3, #2
 800f18e:	441a      	add	r2, r3
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f19a:	6013      	str	r3, [r2, #0]
 800f19c:	e36b      	b.n	800f876 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	7b1b      	ldrb	r3, [r3, #12]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	f040 8081 	bne.w	800f2aa <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	699a      	ldr	r2, [r3, #24]
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	691b      	ldr	r3, [r3, #16]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d909      	bls.n	800f1c8 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	691b      	ldr	r3, [r3, #16]
 800f1b8:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	699a      	ldr	r2, [r3, #24]
 800f1be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1c0:	1ad2      	subs	r2, r2, r3
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	619a      	str	r2, [r3, #24]
 800f1c6:	e005      	b.n	800f1d4 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	699b      	ldr	r3, [r3, #24]
 800f1cc:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	00db      	lsls	r3, r3, #3
 800f1da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1e2:	685a      	ldr	r2, [r3, #4]
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	00db      	lsls	r3, r3, #3
 800f1ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f1ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f1f2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f1f6:	605a      	str	r2, [r3, #4]
 800f1f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d112      	bne.n	800f224 <USB_EPStartXfer+0xa74>
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	00db      	lsls	r3, r3, #3
 800f204:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f208:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	00db      	lsls	r3, r3, #3
 800f214:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f218:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f21c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f220:	605a      	str	r2, [r3, #4]
 800f222:	e30c      	b.n	800f83e <USB_EPStartXfer+0x108e>
 800f224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f226:	2b3e      	cmp	r3, #62	@ 0x3e
 800f228:	d81e      	bhi.n	800f268 <USB_EPStartXfer+0xab8>
 800f22a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f22c:	085b      	lsrs	r3, r3, #1
 800f22e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f232:	f003 0301 	and.w	r3, r3, #1
 800f236:	2b00      	cmp	r3, #0
 800f238:	d002      	beq.n	800f240 <USB_EPStartXfer+0xa90>
 800f23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f23c:	3301      	adds	r3, #1
 800f23e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	00db      	lsls	r3, r3, #3
 800f246:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f24a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f24e:	6859      	ldr	r1, [r3, #4]
 800f250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f252:	069a      	lsls	r2, r3, #26
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f25e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f262:	430a      	orrs	r2, r1
 800f264:	605a      	str	r2, [r3, #4]
 800f266:	e2ea      	b.n	800f83e <USB_EPStartXfer+0x108e>
 800f268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f26a:	095b      	lsrs	r3, r3, #5
 800f26c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f26e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f270:	f003 031f 	and.w	r3, r3, #31
 800f274:	2b00      	cmp	r3, #0
 800f276:	d102      	bne.n	800f27e <USB_EPStartXfer+0xace>
 800f278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f27a:	3b01      	subs	r3, #1
 800f27c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	00db      	lsls	r3, r3, #3
 800f284:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f288:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f28c:	685a      	ldr	r2, [r3, #4]
 800f28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f290:	069b      	lsls	r3, r3, #26
 800f292:	431a      	orrs	r2, r3
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	00db      	lsls	r3, r3, #3
 800f29a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f29e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f2a6:	605a      	str	r2, [r3, #4]
 800f2a8:	e2c9      	b.n	800f83e <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	78db      	ldrb	r3, [r3, #3]
 800f2ae:	2b02      	cmp	r3, #2
 800f2b0:	f040 8176 	bne.w	800f5a0 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	785b      	ldrb	r3, [r3, #1]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d173      	bne.n	800f3a4 <USB_EPStartXfer+0xbf4>
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	00db      	lsls	r3, r3, #3
 800f2c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	00db      	lsls	r3, r3, #3
 800f2d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2da:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f2de:	601a      	str	r2, [r3, #0]
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	691b      	ldr	r3, [r3, #16]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d112      	bne.n	800f30e <USB_EPStartXfer+0xb5e>
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	00db      	lsls	r3, r3, #3
 800f2ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f2f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f2f6:	681a      	ldr	r2, [r3, #0]
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	00db      	lsls	r3, r3, #3
 800f2fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f302:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f306:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f30a:	601a      	str	r2, [r3, #0]
 800f30c:	e073      	b.n	800f3f6 <USB_EPStartXfer+0xc46>
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	691b      	ldr	r3, [r3, #16]
 800f312:	2b3e      	cmp	r3, #62	@ 0x3e
 800f314:	d820      	bhi.n	800f358 <USB_EPStartXfer+0xba8>
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	691b      	ldr	r3, [r3, #16]
 800f31a:	085b      	lsrs	r3, r3, #1
 800f31c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	691b      	ldr	r3, [r3, #16]
 800f322:	f003 0301 	and.w	r3, r3, #1
 800f326:	2b00      	cmp	r3, #0
 800f328:	d002      	beq.n	800f330 <USB_EPStartXfer+0xb80>
 800f32a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f32c:	3301      	adds	r3, #1
 800f32e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	00db      	lsls	r3, r3, #3
 800f336:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f33a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f33e:	6819      	ldr	r1, [r3, #0]
 800f340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f342:	069a      	lsls	r2, r3, #26
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	00db      	lsls	r3, r3, #3
 800f34a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f34e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f352:	430a      	orrs	r2, r1
 800f354:	601a      	str	r2, [r3, #0]
 800f356:	e04e      	b.n	800f3f6 <USB_EPStartXfer+0xc46>
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	691b      	ldr	r3, [r3, #16]
 800f35c:	095b      	lsrs	r3, r3, #5
 800f35e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	691b      	ldr	r3, [r3, #16]
 800f364:	f003 031f 	and.w	r3, r3, #31
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d102      	bne.n	800f372 <USB_EPStartXfer+0xbc2>
 800f36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f36e:	3b01      	subs	r3, #1
 800f370:	637b      	str	r3, [r7, #52]	@ 0x34
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	00db      	lsls	r3, r3, #3
 800f378:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f37c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f384:	069b      	lsls	r3, r3, #26
 800f386:	431a      	orrs	r2, r3
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	00db      	lsls	r3, r3, #3
 800f38e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f392:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f396:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f39a:	601a      	str	r2, [r3, #0]
 800f39c:	e02b      	b.n	800f3f6 <USB_EPStartXfer+0xc46>
 800f39e:	bf00      	nop
 800f3a0:	07ff8fbf 	.word	0x07ff8fbf
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	785b      	ldrb	r3, [r3, #1]
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d124      	bne.n	800f3f6 <USB_EPStartXfer+0xc46>
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	00db      	lsls	r3, r3, #3
 800f3b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	00db      	lsls	r3, r3, #3
 800f3c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3ca:	b292      	uxth	r2, r2
 800f3cc:	601a      	str	r2, [r3, #0]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	00db      	lsls	r3, r3, #3
 800f3d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3dc:	6819      	ldr	r1, [r3, #0]
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	691b      	ldr	r3, [r3, #16]
 800f3e2:	041a      	lsls	r2, r3, #16
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	00db      	lsls	r3, r3, #3
 800f3ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f3ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f3f2:	430a      	orrs	r2, r1
 800f3f4:	601a      	str	r2, [r3, #0]
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	785b      	ldrb	r3, [r3, #1]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d170      	bne.n	800f4e0 <USB_EPStartXfer+0xd30>
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	00db      	lsls	r3, r3, #3
 800f404:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f408:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f40c:	685a      	ldr	r2, [r3, #4]
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	00db      	lsls	r3, r3, #3
 800f414:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f418:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f41c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f420:	605a      	str	r2, [r3, #4]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	691b      	ldr	r3, [r3, #16]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d112      	bne.n	800f450 <USB_EPStartXfer+0xca0>
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	00db      	lsls	r3, r3, #3
 800f430:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f434:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f438:	685a      	ldr	r2, [r3, #4]
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	00db      	lsls	r3, r3, #3
 800f440:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f444:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f448:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f44c:	605a      	str	r2, [r3, #4]
 800f44e:	e070      	b.n	800f532 <USB_EPStartXfer+0xd82>
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	691b      	ldr	r3, [r3, #16]
 800f454:	2b3e      	cmp	r3, #62	@ 0x3e
 800f456:	d820      	bhi.n	800f49a <USB_EPStartXfer+0xcea>
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	691b      	ldr	r3, [r3, #16]
 800f45c:	085b      	lsrs	r3, r3, #1
 800f45e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	f003 0301 	and.w	r3, r3, #1
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d002      	beq.n	800f472 <USB_EPStartXfer+0xcc2>
 800f46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f46e:	3301      	adds	r3, #1
 800f470:	633b      	str	r3, [r7, #48]	@ 0x30
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	00db      	lsls	r3, r3, #3
 800f478:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f47c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f480:	6859      	ldr	r1, [r3, #4]
 800f482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f484:	069a      	lsls	r2, r3, #26
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	00db      	lsls	r3, r3, #3
 800f48c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f490:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f494:	430a      	orrs	r2, r1
 800f496:	605a      	str	r2, [r3, #4]
 800f498:	e04b      	b.n	800f532 <USB_EPStartXfer+0xd82>
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	691b      	ldr	r3, [r3, #16]
 800f49e:	095b      	lsrs	r3, r3, #5
 800f4a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	691b      	ldr	r3, [r3, #16]
 800f4a6:	f003 031f 	and.w	r3, r3, #31
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d102      	bne.n	800f4b4 <USB_EPStartXfer+0xd04>
 800f4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	00db      	lsls	r3, r3, #3
 800f4ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4c2:	685a      	ldr	r2, [r3, #4]
 800f4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4c6:	069b      	lsls	r3, r3, #26
 800f4c8:	431a      	orrs	r2, r3
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	00db      	lsls	r3, r3, #3
 800f4d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f4dc:	605a      	str	r2, [r3, #4]
 800f4de:	e028      	b.n	800f532 <USB_EPStartXfer+0xd82>
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	785b      	ldrb	r3, [r3, #1]
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	d124      	bne.n	800f532 <USB_EPStartXfer+0xd82>
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	00db      	lsls	r3, r3, #3
 800f4ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f4f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f4f6:	685a      	ldr	r2, [r3, #4]
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	00db      	lsls	r3, r3, #3
 800f4fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f502:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f506:	b292      	uxth	r2, r2
 800f508:	605a      	str	r2, [r3, #4]
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	00db      	lsls	r3, r3, #3
 800f510:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f514:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f518:	6859      	ldr	r1, [r3, #4]
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	041a      	lsls	r2, r3, #16
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	00db      	lsls	r3, r3, #3
 800f526:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f52a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f52e:	430a      	orrs	r2, r1
 800f530:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	69db      	ldr	r3, [r3, #28]
 800f536:	2b00      	cmp	r3, #0
 800f538:	f000 8181 	beq.w	800f83e <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	4413      	add	r3, r2
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f54a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f54c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f550:	2b00      	cmp	r3, #0
 800f552:	d004      	beq.n	800f55e <USB_EPStartXfer+0xdae>
 800f554:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d10b      	bne.n	800f576 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f55e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f564:	2b00      	cmp	r3, #0
 800f566:	f040 816a 	bne.w	800f83e <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f56a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f56c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f570:	2b00      	cmp	r3, #0
 800f572:	f040 8164 	bne.w	800f83e <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	4413      	add	r3, r2
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	4b98      	ldr	r3, [pc, #608]	@ (800f7e4 <USB_EPStartXfer+0x1034>)
 800f584:	4013      	ands	r3, r2
 800f586:	623b      	str	r3, [r7, #32]
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	441a      	add	r2, r3
 800f592:	6a3b      	ldr	r3, [r7, #32]
 800f594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f598:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f59c:	6013      	str	r3, [r2, #0]
 800f59e:	e14e      	b.n	800f83e <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	78db      	ldrb	r3, [r3, #3]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	f040 8148 	bne.w	800f83a <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	699a      	ldr	r2, [r3, #24]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	691b      	ldr	r3, [r3, #16]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d909      	bls.n	800f5ca <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	691b      	ldr	r3, [r3, #16]
 800f5ba:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	699a      	ldr	r2, [r3, #24]
 800f5c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f5c2:	1ad2      	subs	r2, r2, r3
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	619a      	str	r2, [r3, #24]
 800f5c8:	e005      	b.n	800f5d6 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	699b      	ldr	r3, [r3, #24]
 800f5ce:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	785b      	ldrb	r3, [r3, #1]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d16a      	bne.n	800f6b4 <USB_EPStartXfer+0xf04>
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	00db      	lsls	r3, r3, #3
 800f5e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	00db      	lsls	r3, r3, #3
 800f5f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f5f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f5fc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f600:	601a      	str	r2, [r3, #0]
 800f602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f604:	2b00      	cmp	r3, #0
 800f606:	d112      	bne.n	800f62e <USB_EPStartXfer+0xe7e>
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	00db      	lsls	r3, r3, #3
 800f60e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f612:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	00db      	lsls	r3, r3, #3
 800f61e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f622:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f626:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f62a:	601a      	str	r2, [r3, #0]
 800f62c:	e06a      	b.n	800f704 <USB_EPStartXfer+0xf54>
 800f62e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f630:	2b3e      	cmp	r3, #62	@ 0x3e
 800f632:	d81e      	bhi.n	800f672 <USB_EPStartXfer+0xec2>
 800f634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f636:	085b      	lsrs	r3, r3, #1
 800f638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f63a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f63c:	f003 0301 	and.w	r3, r3, #1
 800f640:	2b00      	cmp	r3, #0
 800f642:	d002      	beq.n	800f64a <USB_EPStartXfer+0xe9a>
 800f644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f646:	3301      	adds	r3, #1
 800f648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	00db      	lsls	r3, r3, #3
 800f650:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f654:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f658:	6819      	ldr	r1, [r3, #0]
 800f65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f65c:	069a      	lsls	r2, r3, #26
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	00db      	lsls	r3, r3, #3
 800f664:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f668:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f66c:	430a      	orrs	r2, r1
 800f66e:	601a      	str	r2, [r3, #0]
 800f670:	e048      	b.n	800f704 <USB_EPStartXfer+0xf54>
 800f672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f674:	095b      	lsrs	r3, r3, #5
 800f676:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f67a:	f003 031f 	and.w	r3, r3, #31
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d102      	bne.n	800f688 <USB_EPStartXfer+0xed8>
 800f682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f684:	3b01      	subs	r3, #1
 800f686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	00db      	lsls	r3, r3, #3
 800f68e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f692:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f69a:	069b      	lsls	r3, r3, #26
 800f69c:	431a      	orrs	r2, r3
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	00db      	lsls	r3, r3, #3
 800f6a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6ac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f6b0:	601a      	str	r2, [r3, #0]
 800f6b2:	e027      	b.n	800f704 <USB_EPStartXfer+0xf54>
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	785b      	ldrb	r3, [r3, #1]
 800f6b8:	2b01      	cmp	r3, #1
 800f6ba:	d123      	bne.n	800f704 <USB_EPStartXfer+0xf54>
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	00db      	lsls	r3, r3, #3
 800f6c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	781b      	ldrb	r3, [r3, #0]
 800f6d0:	00db      	lsls	r3, r3, #3
 800f6d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6da:	b292      	uxth	r2, r2
 800f6dc:	601a      	str	r2, [r3, #0]
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	00db      	lsls	r3, r3, #3
 800f6e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f6ec:	6819      	ldr	r1, [r3, #0]
 800f6ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6f0:	041a      	lsls	r2, r3, #16
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	00db      	lsls	r3, r3, #3
 800f6f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f6fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f700:	430a      	orrs	r2, r1
 800f702:	601a      	str	r2, [r3, #0]
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	785b      	ldrb	r3, [r3, #1]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d16d      	bne.n	800f7e8 <USB_EPStartXfer+0x1038>
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	00db      	lsls	r3, r3, #3
 800f712:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f716:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f71a:	685a      	ldr	r2, [r3, #4]
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	00db      	lsls	r3, r3, #3
 800f722:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f726:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f72a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800f72e:	605a      	str	r2, [r3, #4]
 800f730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f732:	2b00      	cmp	r3, #0
 800f734:	d112      	bne.n	800f75c <USB_EPStartXfer+0xfac>
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	00db      	lsls	r3, r3, #3
 800f73c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f740:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f744:	685a      	ldr	r2, [r3, #4]
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	00db      	lsls	r3, r3, #3
 800f74c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f750:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f754:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f758:	605a      	str	r2, [r3, #4]
 800f75a:	e070      	b.n	800f83e <USB_EPStartXfer+0x108e>
 800f75c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f75e:	2b3e      	cmp	r3, #62	@ 0x3e
 800f760:	d81e      	bhi.n	800f7a0 <USB_EPStartXfer+0xff0>
 800f762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f764:	085b      	lsrs	r3, r3, #1
 800f766:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f76a:	f003 0301 	and.w	r3, r3, #1
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d002      	beq.n	800f778 <USB_EPStartXfer+0xfc8>
 800f772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f774:	3301      	adds	r3, #1
 800f776:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	00db      	lsls	r3, r3, #3
 800f77e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f782:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f786:	6859      	ldr	r1, [r3, #4]
 800f788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f78a:	069a      	lsls	r2, r3, #26
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	00db      	lsls	r3, r3, #3
 800f792:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f796:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f79a:	430a      	orrs	r2, r1
 800f79c:	605a      	str	r2, [r3, #4]
 800f79e:	e04e      	b.n	800f83e <USB_EPStartXfer+0x108e>
 800f7a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7a2:	095b      	lsrs	r3, r3, #5
 800f7a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f7a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7a8:	f003 031f 	and.w	r3, r3, #31
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d102      	bne.n	800f7b6 <USB_EPStartXfer+0x1006>
 800f7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b2:	3b01      	subs	r3, #1
 800f7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	00db      	lsls	r3, r3, #3
 800f7bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7c4:	685a      	ldr	r2, [r3, #4]
 800f7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7c8:	069b      	lsls	r3, r3, #26
 800f7ca:	431a      	orrs	r2, r3
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	00db      	lsls	r3, r3, #3
 800f7d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7da:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f7de:	605a      	str	r2, [r3, #4]
 800f7e0:	e02d      	b.n	800f83e <USB_EPStartXfer+0x108e>
 800f7e2:	bf00      	nop
 800f7e4:	07ff8f8f 	.word	0x07ff8f8f
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	785b      	ldrb	r3, [r3, #1]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d126      	bne.n	800f83e <USB_EPStartXfer+0x108e>
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	00db      	lsls	r3, r3, #3
 800f7f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f7fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f7fe:	685a      	ldr	r2, [r3, #4]
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	00db      	lsls	r3, r3, #3
 800f806:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f80a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f80e:	b292      	uxth	r2, r2
 800f810:	605a      	str	r2, [r3, #4]
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	00db      	lsls	r3, r3, #3
 800f818:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f81c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f820:	6859      	ldr	r1, [r3, #4]
 800f822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f824:	041a      	lsls	r2, r3, #16
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	00db      	lsls	r3, r3, #3
 800f82c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f830:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f834:	430a      	orrs	r2, r1
 800f836:	605a      	str	r2, [r3, #4]
 800f838:	e001      	b.n	800f83e <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800f83a:	2301      	movs	r3, #1
 800f83c:	e01c      	b.n	800f878 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f83e:	687a      	ldr	r2, [r7, #4]
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	4413      	add	r3, r2
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	4b0d      	ldr	r3, [pc, #52]	@ (800f880 <USB_EPStartXfer+0x10d0>)
 800f84c:	4013      	ands	r3, r2
 800f84e:	61fb      	str	r3, [r7, #28]
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f856:	61fb      	str	r3, [r7, #28]
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f85e:	61fb      	str	r3, [r7, #28]
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	441a      	add	r2, r3
 800f86a:	69fb      	ldr	r3, [r7, #28]
 800f86c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f874:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f876:	2300      	movs	r3, #0
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3758      	adds	r7, #88	@ 0x58
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	07ffbf8f 	.word	0x07ffbf8f

0800f884 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	785b      	ldrb	r3, [r3, #1]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d018      	beq.n	800f8c8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f896:	687a      	ldr	r2, [r7, #4]
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	009b      	lsls	r3, r3, #2
 800f89e:	4413      	add	r3, r2
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	4b19      	ldr	r3, [pc, #100]	@ (800f908 <USB_EPSetStall+0x84>)
 800f8a4:	4013      	ands	r3, r2
 800f8a6:	60bb      	str	r3, [r7, #8]
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	f083 0310 	eor.w	r3, r3, #16
 800f8ae:	60bb      	str	r3, [r7, #8]
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	441a      	add	r2, r3
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f8c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8c4:	6013      	str	r3, [r2, #0]
 800f8c6:	e017      	b.n	800f8f8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	4413      	add	r3, r2
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	4b0d      	ldr	r3, [pc, #52]	@ (800f90c <USB_EPSetStall+0x88>)
 800f8d6:	4013      	ands	r3, r2
 800f8d8:	60fb      	str	r3, [r7, #12]
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f8e0:	60fb      	str	r3, [r7, #12]
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	009b      	lsls	r3, r3, #2
 800f8ea:	441a      	add	r2, r3
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f8f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f8f8:	2300      	movs	r3, #0
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	3714      	adds	r7, #20
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr
 800f906:	bf00      	nop
 800f908:	07ff8fbf 	.word	0x07ff8fbf
 800f90c:	07ffbf8f 	.word	0x07ffbf8f

0800f910 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800f910:	b480      	push	{r7}
 800f912:	b089      	sub	sp, #36	@ 0x24
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	7b1b      	ldrb	r3, [r3, #12]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d17c      	bne.n	800fa1c <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	785b      	ldrb	r3, [r3, #1]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d03c      	beq.n	800f9a4 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	781b      	ldrb	r3, [r3, #0]
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	4413      	add	r3, r2
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	613b      	str	r3, [r7, #16]
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d013      	beq.n	800f96a <USB_EPClearStall+0x5a>
 800f942:	687a      	ldr	r2, [r7, #4]
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	009b      	lsls	r3, r3, #2
 800f94a:	4413      	add	r3, r2
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	4b37      	ldr	r3, [pc, #220]	@ (800fa2c <USB_EPClearStall+0x11c>)
 800f950:	4013      	ands	r3, r2
 800f952:	60fb      	str	r3, [r7, #12]
 800f954:	687a      	ldr	r2, [r7, #4]
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	441a      	add	r2, r3
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f964:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f968:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	78db      	ldrb	r3, [r3, #3]
 800f96e:	2b01      	cmp	r3, #1
 800f970:	d054      	beq.n	800fa1c <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	009b      	lsls	r3, r3, #2
 800f97a:	4413      	add	r3, r2
 800f97c:	681a      	ldr	r2, [r3, #0]
 800f97e:	4b2c      	ldr	r3, [pc, #176]	@ (800fa30 <USB_EPClearStall+0x120>)
 800f980:	4013      	ands	r3, r2
 800f982:	60bb      	str	r3, [r7, #8]
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	f083 0320 	eor.w	r3, r3, #32
 800f98a:	60bb      	str	r3, [r7, #8]
 800f98c:	687a      	ldr	r2, [r7, #4]
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	009b      	lsls	r3, r3, #2
 800f994:	441a      	add	r2, r3
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f99c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9a0:	6013      	str	r3, [r2, #0]
 800f9a2:	e03b      	b.n	800fa1c <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	4413      	add	r3, r2
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	61fb      	str	r3, [r7, #28]
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d013      	beq.n	800f9e4 <USB_EPClearStall+0xd4>
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	4413      	add	r3, r2
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	4b18      	ldr	r3, [pc, #96]	@ (800fa2c <USB_EPClearStall+0x11c>)
 800f9ca:	4013      	ands	r3, r2
 800f9cc:	61bb      	str	r3, [r7, #24]
 800f9ce:	687a      	ldr	r2, [r7, #4]
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	009b      	lsls	r3, r3, #2
 800f9d6:	441a      	add	r2, r3
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f9de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9e2:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f9e4:	687a      	ldr	r2, [r7, #4]
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	009b      	lsls	r3, r3, #2
 800f9ec:	4413      	add	r3, r2
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	4b10      	ldr	r3, [pc, #64]	@ (800fa34 <USB_EPClearStall+0x124>)
 800f9f2:	4013      	ands	r3, r2
 800f9f4:	617b      	str	r3, [r7, #20]
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f9fc:	617b      	str	r3, [r7, #20]
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800fa04:	617b      	str	r3, [r7, #20]
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	009b      	lsls	r3, r3, #2
 800fa0e:	441a      	add	r2, r3
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fa16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa1a:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800fa1c:	2300      	movs	r3, #0
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3724      	adds	r7, #36	@ 0x24
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr
 800fa2a:	bf00      	nop
 800fa2c:	07ff8f8f 	.word	0x07ff8f8f
 800fa30:	07ff8fbf 	.word	0x07ff8fbf
 800fa34:	07ffbf8f 	.word	0x07ffbf8f

0800fa38 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b083      	sub	sp, #12
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	460b      	mov	r3, r1
 800fa42:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800fa44:	78fb      	ldrb	r3, [r7, #3]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d102      	bne.n	800fa50 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2280      	movs	r2, #128	@ 0x80
 800fa4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800fa50:	2300      	movs	r3, #0
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	370c      	adds	r7, #12
 800fa56:	46bd      	mov	sp, r7
 800fa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5c:	4770      	bx	lr

0800fa5e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800fa5e:	b480      	push	{r7}
 800fa60:	b083      	sub	sp, #12
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa6a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fa72:	2300      	movs	r3, #0
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	370c      	adds	r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b083      	sub	sp, #12
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa8c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fa94:	2300      	movs	r3, #0
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	370c      	adds	r7, #12
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr

0800faa2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800faa2:	b480      	push	{r7}
 800faa4:	b085      	sub	sp, #20
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800faae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fab0:	68fb      	ldr	r3, [r7, #12]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3714      	adds	r7, #20
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr

0800fabe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fabe:	b480      	push	{r7}
 800fac0:	b08b      	sub	sp, #44	@ 0x2c
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	60f8      	str	r0, [r7, #12]
 800fac6:	60b9      	str	r1, [r7, #8]
 800fac8:	4611      	mov	r1, r2
 800faca:	461a      	mov	r2, r3
 800facc:	460b      	mov	r3, r1
 800face:	80fb      	strh	r3, [r7, #6]
 800fad0:	4613      	mov	r3, r2
 800fad2:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800fad4:	88bb      	ldrh	r3, [r7, #4]
 800fad6:	3303      	adds	r3, #3
 800fad8:	089b      	lsrs	r3, r3, #2
 800fada:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800fadc:	88bb      	ldrh	r3, [r7, #4]
 800fade:	f003 0303 	and.w	r3, r3, #3
 800fae2:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800fae8:	8afb      	ldrh	r3, [r7, #22]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d002      	beq.n	800faf4 <USB_WritePMA+0x36>
  {
    NbWords--;
 800faee:	69bb      	ldr	r3, [r7, #24]
 800faf0:	3b01      	subs	r3, #1
 800faf2:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800faf4:	88fb      	ldrh	r3, [r7, #6]
 800faf6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fafa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fafe:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800fb00:	69bb      	ldr	r3, [r7, #24]
 800fb02:	623b      	str	r3, [r7, #32]
 800fb04:	e015      	b.n	800fb32 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800fb0e:	69fb      	ldr	r3, [r7, #28]
 800fb10:	3304      	adds	r3, #4
 800fb12:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	3301      	adds	r3, #1
 800fb18:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	3301      	adds	r3, #1
 800fb24:	613b      	str	r3, [r7, #16]
    pBuf++;
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800fb2c:	6a3b      	ldr	r3, [r7, #32]
 800fb2e:	3b01      	subs	r3, #1
 800fb30:	623b      	str	r3, [r7, #32]
 800fb32:	6a3b      	ldr	r3, [r7, #32]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d1e6      	bne.n	800fb06 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800fb38:	8afb      	ldrh	r3, [r7, #22]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d01a      	beq.n	800fb74 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	461a      	mov	r2, r3
 800fb48:	6a3b      	ldr	r3, [r7, #32]
 800fb4a:	00db      	lsls	r3, r3, #3
 800fb4c:	fa02 f303 	lsl.w	r3, r2, r3
 800fb50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb52:	4313      	orrs	r3, r2
 800fb54:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800fb56:	6a3b      	ldr	r3, [r7, #32]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	623b      	str	r3, [r7, #32]
      pBuf++;
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	3301      	adds	r3, #1
 800fb60:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800fb62:	8afb      	ldrh	r3, [r7, #22]
 800fb64:	3b01      	subs	r3, #1
 800fb66:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800fb68:	8afb      	ldrh	r3, [r7, #22]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d1e9      	bne.n	800fb42 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb72:	601a      	str	r2, [r3, #0]
  }
}
 800fb74:	bf00      	nop
 800fb76:	372c      	adds	r7, #44	@ 0x2c
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b08b      	sub	sp, #44	@ 0x2c
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	60b9      	str	r1, [r7, #8]
 800fb8a:	4611      	mov	r1, r2
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	460b      	mov	r3, r1
 800fb90:	80fb      	strh	r3, [r7, #6]
 800fb92:	4613      	mov	r3, r2
 800fb94:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800fb96:	88bb      	ldrh	r3, [r7, #4]
 800fb98:	3303      	adds	r3, #3
 800fb9a:	089b      	lsrs	r3, r3, #2
 800fb9c:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800fb9e:	88bb      	ldrh	r3, [r7, #4]
 800fba0:	f003 0303 	and.w	r3, r3, #3
 800fba4:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800fbaa:	88fb      	ldrh	r3, [r7, #6]
 800fbac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800fbb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800fbb4:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800fbb6:	8b7b      	ldrh	r3, [r7, #26]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d002      	beq.n	800fbc2 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbc6:	e015      	b.n	800fbf4 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800fbc8:	6a3b      	ldr	r3, [r7, #32]
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800fbd0:	6a3b      	ldr	r3, [r7, #32]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	623b      	str	r3, [r7, #32]
    pBuf++;
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	617b      	str	r3, [r7, #20]
    pBuf++;
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	3301      	adds	r3, #1
 800fbec:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800fbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf0:	3b01      	subs	r3, #1
 800fbf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d1e6      	bne.n	800fbc8 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800fbfa:	8b7b      	ldrh	r3, [r7, #26]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d017      	beq.n	800fc30 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800fc00:	6a3b      	ldr	r3, [r7, #32]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800fc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc08:	b2db      	uxtb	r3, r3
 800fc0a:	00db      	lsls	r3, r3, #3
 800fc0c:	693a      	ldr	r2, [r7, #16]
 800fc0e:	fa22 f303 	lsr.w	r3, r2, r3
 800fc12:	b2da      	uxtb	r2, r3
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	701a      	strb	r2, [r3, #0]
      count++;
 800fc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	3301      	adds	r3, #1
 800fc22:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800fc24:	8b7b      	ldrh	r3, [r7, #26]
 800fc26:	3b01      	subs	r3, #1
 800fc28:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800fc2a:	8b7b      	ldrh	r3, [r7, #26]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d1ea      	bne.n	800fc06 <USB_ReadPMA+0x86>
  }
}
 800fc30:	bf00      	nop
 800fc32:	372c      	adds	r7, #44	@ 0x2c
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	460b      	mov	r3, r1
 800fc46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fc48:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800fc4c:	f001 f8fa 	bl	8010e44 <USBD_static_malloc>
 800fc50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d109      	bne.n	800fc6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	32b0      	adds	r2, #176	@ 0xb0
 800fc62:	2100      	movs	r1, #0
 800fc64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fc68:	2302      	movs	r3, #2
 800fc6a:	e0d4      	b.n	800fe16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fc6c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800fc70:	2100      	movs	r1, #0
 800fc72:	68f8      	ldr	r0, [r7, #12]
 800fc74:	f002 fe0c 	bl	8012890 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	32b0      	adds	r2, #176	@ 0xb0
 800fc82:	68f9      	ldr	r1, [r7, #12]
 800fc84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	32b0      	adds	r2, #176	@ 0xb0
 800fc92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	7c1b      	ldrb	r3, [r3, #16]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d138      	bne.n	800fd16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fca4:	4b5e      	ldr	r3, [pc, #376]	@ (800fe20 <USBD_CDC_Init+0x1e4>)
 800fca6:	7819      	ldrb	r1, [r3, #0]
 800fca8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fcac:	2202      	movs	r2, #2
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f000 ffcf 	bl	8010c52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fcb4:	4b5a      	ldr	r3, [pc, #360]	@ (800fe20 <USBD_CDC_Init+0x1e4>)
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	f003 020f 	and.w	r2, r3, #15
 800fcbc:	6879      	ldr	r1, [r7, #4]
 800fcbe:	4613      	mov	r3, r2
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	4413      	add	r3, r2
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	440b      	add	r3, r1
 800fcc8:	3324      	adds	r3, #36	@ 0x24
 800fcca:	2201      	movs	r2, #1
 800fccc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fcce:	4b55      	ldr	r3, [pc, #340]	@ (800fe24 <USBD_CDC_Init+0x1e8>)
 800fcd0:	7819      	ldrb	r1, [r3, #0]
 800fcd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fcd6:	2202      	movs	r2, #2
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f000 ffba 	bl	8010c52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fcde:	4b51      	ldr	r3, [pc, #324]	@ (800fe24 <USBD_CDC_Init+0x1e8>)
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	f003 020f 	and.w	r2, r3, #15
 800fce6:	6879      	ldr	r1, [r7, #4]
 800fce8:	4613      	mov	r3, r2
 800fcea:	009b      	lsls	r3, r3, #2
 800fcec:	4413      	add	r3, r2
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	440b      	add	r3, r1
 800fcf2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fcfa:	4b4b      	ldr	r3, [pc, #300]	@ (800fe28 <USBD_CDC_Init+0x1ec>)
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	f003 020f 	and.w	r2, r3, #15
 800fd02:	6879      	ldr	r1, [r7, #4]
 800fd04:	4613      	mov	r3, r2
 800fd06:	009b      	lsls	r3, r3, #2
 800fd08:	4413      	add	r3, r2
 800fd0a:	009b      	lsls	r3, r3, #2
 800fd0c:	440b      	add	r3, r1
 800fd0e:	3326      	adds	r3, #38	@ 0x26
 800fd10:	2210      	movs	r2, #16
 800fd12:	801a      	strh	r2, [r3, #0]
 800fd14:	e035      	b.n	800fd82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fd16:	4b42      	ldr	r3, [pc, #264]	@ (800fe20 <USBD_CDC_Init+0x1e4>)
 800fd18:	7819      	ldrb	r1, [r3, #0]
 800fd1a:	2340      	movs	r3, #64	@ 0x40
 800fd1c:	2202      	movs	r2, #2
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f000 ff97 	bl	8010c52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fd24:	4b3e      	ldr	r3, [pc, #248]	@ (800fe20 <USBD_CDC_Init+0x1e4>)
 800fd26:	781b      	ldrb	r3, [r3, #0]
 800fd28:	f003 020f 	and.w	r2, r3, #15
 800fd2c:	6879      	ldr	r1, [r7, #4]
 800fd2e:	4613      	mov	r3, r2
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	4413      	add	r3, r2
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	440b      	add	r3, r1
 800fd38:	3324      	adds	r3, #36	@ 0x24
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fd3e:	4b39      	ldr	r3, [pc, #228]	@ (800fe24 <USBD_CDC_Init+0x1e8>)
 800fd40:	7819      	ldrb	r1, [r3, #0]
 800fd42:	2340      	movs	r3, #64	@ 0x40
 800fd44:	2202      	movs	r2, #2
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f000 ff83 	bl	8010c52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fd4c:	4b35      	ldr	r3, [pc, #212]	@ (800fe24 <USBD_CDC_Init+0x1e8>)
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	f003 020f 	and.w	r2, r3, #15
 800fd54:	6879      	ldr	r1, [r7, #4]
 800fd56:	4613      	mov	r3, r2
 800fd58:	009b      	lsls	r3, r3, #2
 800fd5a:	4413      	add	r3, r2
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	440b      	add	r3, r1
 800fd60:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fd64:	2201      	movs	r2, #1
 800fd66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fd68:	4b2f      	ldr	r3, [pc, #188]	@ (800fe28 <USBD_CDC_Init+0x1ec>)
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	f003 020f 	and.w	r2, r3, #15
 800fd70:	6879      	ldr	r1, [r7, #4]
 800fd72:	4613      	mov	r3, r2
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	4413      	add	r3, r2
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	440b      	add	r3, r1
 800fd7c:	3326      	adds	r3, #38	@ 0x26
 800fd7e:	2210      	movs	r2, #16
 800fd80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fd82:	4b29      	ldr	r3, [pc, #164]	@ (800fe28 <USBD_CDC_Init+0x1ec>)
 800fd84:	7819      	ldrb	r1, [r3, #0]
 800fd86:	2308      	movs	r3, #8
 800fd88:	2203      	movs	r2, #3
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 ff61 	bl	8010c52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fd90:	4b25      	ldr	r3, [pc, #148]	@ (800fe28 <USBD_CDC_Init+0x1ec>)
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	f003 020f 	and.w	r2, r3, #15
 800fd98:	6879      	ldr	r1, [r7, #4]
 800fd9a:	4613      	mov	r3, r2
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	4413      	add	r3, r2
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	440b      	add	r3, r1
 800fda4:	3324      	adds	r3, #36	@ 0x24
 800fda6:	2201      	movs	r2, #1
 800fda8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	2200      	movs	r2, #0
 800fdae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	33b0      	adds	r3, #176	@ 0xb0
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	4413      	add	r3, r2
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d101      	bne.n	800fde4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fde0:	2302      	movs	r3, #2
 800fde2:	e018      	b.n	800fe16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	7c1b      	ldrb	r3, [r3, #16]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d10a      	bne.n	800fe02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fdec:	4b0d      	ldr	r3, [pc, #52]	@ (800fe24 <USBD_CDC_Init+0x1e8>)
 800fdee:	7819      	ldrb	r1, [r3, #0]
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fdf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 fff4 	bl	8010de8 <USBD_LL_PrepareReceive>
 800fe00:	e008      	b.n	800fe14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fe02:	4b08      	ldr	r3, [pc, #32]	@ (800fe24 <USBD_CDC_Init+0x1e8>)
 800fe04:	7819      	ldrb	r1, [r3, #0]
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fe0c:	2340      	movs	r3, #64	@ 0x40
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f000 ffea 	bl	8010de8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	200000b3 	.word	0x200000b3
 800fe24:	200000b4 	.word	0x200000b4
 800fe28:	200000b5 	.word	0x200000b5

0800fe2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	460b      	mov	r3, r1
 800fe36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fe38:	4b3a      	ldr	r3, [pc, #232]	@ (800ff24 <USBD_CDC_DeInit+0xf8>)
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 ff27 	bl	8010c92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fe44:	4b37      	ldr	r3, [pc, #220]	@ (800ff24 <USBD_CDC_DeInit+0xf8>)
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	f003 020f 	and.w	r2, r3, #15
 800fe4c:	6879      	ldr	r1, [r7, #4]
 800fe4e:	4613      	mov	r3, r2
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	4413      	add	r3, r2
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	440b      	add	r3, r1
 800fe58:	3324      	adds	r3, #36	@ 0x24
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fe5e:	4b32      	ldr	r3, [pc, #200]	@ (800ff28 <USBD_CDC_DeInit+0xfc>)
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	4619      	mov	r1, r3
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 ff14 	bl	8010c92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fe6a:	4b2f      	ldr	r3, [pc, #188]	@ (800ff28 <USBD_CDC_DeInit+0xfc>)
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	f003 020f 	and.w	r2, r3, #15
 800fe72:	6879      	ldr	r1, [r7, #4]
 800fe74:	4613      	mov	r3, r2
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	4413      	add	r3, r2
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	440b      	add	r3, r1
 800fe7e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fe82:	2200      	movs	r2, #0
 800fe84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fe86:	4b29      	ldr	r3, [pc, #164]	@ (800ff2c <USBD_CDC_DeInit+0x100>)
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f000 ff00 	bl	8010c92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fe92:	4b26      	ldr	r3, [pc, #152]	@ (800ff2c <USBD_CDC_DeInit+0x100>)
 800fe94:	781b      	ldrb	r3, [r3, #0]
 800fe96:	f003 020f 	and.w	r2, r3, #15
 800fe9a:	6879      	ldr	r1, [r7, #4]
 800fe9c:	4613      	mov	r3, r2
 800fe9e:	009b      	lsls	r3, r3, #2
 800fea0:	4413      	add	r3, r2
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	440b      	add	r3, r1
 800fea6:	3324      	adds	r3, #36	@ 0x24
 800fea8:	2200      	movs	r2, #0
 800feaa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800feac:	4b1f      	ldr	r3, [pc, #124]	@ (800ff2c <USBD_CDC_DeInit+0x100>)
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	f003 020f 	and.w	r2, r3, #15
 800feb4:	6879      	ldr	r1, [r7, #4]
 800feb6:	4613      	mov	r3, r2
 800feb8:	009b      	lsls	r3, r3, #2
 800feba:	4413      	add	r3, r2
 800febc:	009b      	lsls	r3, r3, #2
 800febe:	440b      	add	r3, r1
 800fec0:	3326      	adds	r3, #38	@ 0x26
 800fec2:	2200      	movs	r2, #0
 800fec4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	32b0      	adds	r2, #176	@ 0xb0
 800fed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d01f      	beq.n	800ff18 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	33b0      	adds	r3, #176	@ 0xb0
 800fee2:	009b      	lsls	r3, r3, #2
 800fee4:	4413      	add	r3, r2
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	32b0      	adds	r2, #176	@ 0xb0
 800fef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fefa:	4618      	mov	r0, r3
 800fefc:	f000 ffb0 	bl	8010e60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	32b0      	adds	r2, #176	@ 0xb0
 800ff0a:	2100      	movs	r1, #0
 800ff0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2200      	movs	r2, #0
 800ff14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ff18:	2300      	movs	r3, #0
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3708      	adds	r7, #8
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd80      	pop	{r7, pc}
 800ff22:	bf00      	nop
 800ff24:	200000b3 	.word	0x200000b3
 800ff28:	200000b4 	.word	0x200000b4
 800ff2c:	200000b5 	.word	0x200000b5

0800ff30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b086      	sub	sp, #24
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	32b0      	adds	r2, #176	@ 0xb0
 800ff44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff48:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff52:	2300      	movs	r3, #0
 800ff54:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d101      	bne.n	800ff60 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ff5c:	2303      	movs	r3, #3
 800ff5e:	e0bf      	b.n	80100e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d050      	beq.n	801000e <USBD_CDC_Setup+0xde>
 800ff6c:	2b20      	cmp	r3, #32
 800ff6e:	f040 80af 	bne.w	80100d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	88db      	ldrh	r3, [r3, #6]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d03a      	beq.n	800fff0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	781b      	ldrb	r3, [r3, #0]
 800ff7e:	b25b      	sxtb	r3, r3
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	da1b      	bge.n	800ffbc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	33b0      	adds	r3, #176	@ 0xb0
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	4413      	add	r3, r2
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	689b      	ldr	r3, [r3, #8]
 800ff96:	683a      	ldr	r2, [r7, #0]
 800ff98:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ff9a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ff9c:	683a      	ldr	r2, [r7, #0]
 800ff9e:	88d2      	ldrh	r2, [r2, #6]
 800ffa0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	88db      	ldrh	r3, [r3, #6]
 800ffa6:	2b07      	cmp	r3, #7
 800ffa8:	bf28      	it	cs
 800ffaa:	2307      	movcs	r3, #7
 800ffac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	89fa      	ldrh	r2, [r7, #14]
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f002 fa46 	bl	8012446 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ffba:	e090      	b.n	80100de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	785a      	ldrb	r2, [r3, #1]
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	88db      	ldrh	r3, [r3, #6]
 800ffca:	2b3f      	cmp	r3, #63	@ 0x3f
 800ffcc:	d803      	bhi.n	800ffd6 <USBD_CDC_Setup+0xa6>
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	88db      	ldrh	r3, [r3, #6]
 800ffd2:	b2da      	uxtb	r2, r3
 800ffd4:	e000      	b.n	800ffd8 <USBD_CDC_Setup+0xa8>
 800ffd6:	2240      	movs	r2, #64	@ 0x40
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ffde:	6939      	ldr	r1, [r7, #16]
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f002 fa58 	bl	801249e <USBD_CtlPrepareRx>
      break;
 800ffee:	e076      	b.n	80100de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	33b0      	adds	r3, #176	@ 0xb0
 800fffa:	009b      	lsls	r3, r3, #2
 800fffc:	4413      	add	r3, r2
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	689b      	ldr	r3, [r3, #8]
 8010002:	683a      	ldr	r2, [r7, #0]
 8010004:	7850      	ldrb	r0, [r2, #1]
 8010006:	2200      	movs	r2, #0
 8010008:	6839      	ldr	r1, [r7, #0]
 801000a:	4798      	blx	r3
      break;
 801000c:	e067      	b.n	80100de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	785b      	ldrb	r3, [r3, #1]
 8010012:	2b0b      	cmp	r3, #11
 8010014:	d851      	bhi.n	80100ba <USBD_CDC_Setup+0x18a>
 8010016:	a201      	add	r2, pc, #4	@ (adr r2, 801001c <USBD_CDC_Setup+0xec>)
 8010018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801001c:	0801004d 	.word	0x0801004d
 8010020:	080100c9 	.word	0x080100c9
 8010024:	080100bb 	.word	0x080100bb
 8010028:	080100bb 	.word	0x080100bb
 801002c:	080100bb 	.word	0x080100bb
 8010030:	080100bb 	.word	0x080100bb
 8010034:	080100bb 	.word	0x080100bb
 8010038:	080100bb 	.word	0x080100bb
 801003c:	080100bb 	.word	0x080100bb
 8010040:	080100bb 	.word	0x080100bb
 8010044:	08010077 	.word	0x08010077
 8010048:	080100a1 	.word	0x080100a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010052:	b2db      	uxtb	r3, r3
 8010054:	2b03      	cmp	r3, #3
 8010056:	d107      	bne.n	8010068 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010058:	f107 030a 	add.w	r3, r7, #10
 801005c:	2202      	movs	r2, #2
 801005e:	4619      	mov	r1, r3
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f002 f9f0 	bl	8012446 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010066:	e032      	b.n	80100ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010068:	6839      	ldr	r1, [r7, #0]
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f002 f86d 	bl	801214a <USBD_CtlError>
            ret = USBD_FAIL;
 8010070:	2303      	movs	r3, #3
 8010072:	75fb      	strb	r3, [r7, #23]
          break;
 8010074:	e02b      	b.n	80100ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801007c:	b2db      	uxtb	r3, r3
 801007e:	2b03      	cmp	r3, #3
 8010080:	d107      	bne.n	8010092 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010082:	f107 030d 	add.w	r3, r7, #13
 8010086:	2201      	movs	r2, #1
 8010088:	4619      	mov	r1, r3
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f002 f9db 	bl	8012446 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010090:	e01d      	b.n	80100ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010092:	6839      	ldr	r1, [r7, #0]
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f002 f858 	bl	801214a <USBD_CtlError>
            ret = USBD_FAIL;
 801009a:	2303      	movs	r3, #3
 801009c:	75fb      	strb	r3, [r7, #23]
          break;
 801009e:	e016      	b.n	80100ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100a6:	b2db      	uxtb	r3, r3
 80100a8:	2b03      	cmp	r3, #3
 80100aa:	d00f      	beq.n	80100cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80100ac:	6839      	ldr	r1, [r7, #0]
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f002 f84b 	bl	801214a <USBD_CtlError>
            ret = USBD_FAIL;
 80100b4:	2303      	movs	r3, #3
 80100b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80100b8:	e008      	b.n	80100cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80100ba:	6839      	ldr	r1, [r7, #0]
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f002 f844 	bl	801214a <USBD_CtlError>
          ret = USBD_FAIL;
 80100c2:	2303      	movs	r3, #3
 80100c4:	75fb      	strb	r3, [r7, #23]
          break;
 80100c6:	e002      	b.n	80100ce <USBD_CDC_Setup+0x19e>
          break;
 80100c8:	bf00      	nop
 80100ca:	e008      	b.n	80100de <USBD_CDC_Setup+0x1ae>
          break;
 80100cc:	bf00      	nop
      }
      break;
 80100ce:	e006      	b.n	80100de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80100d0:	6839      	ldr	r1, [r7, #0]
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f002 f839 	bl	801214a <USBD_CtlError>
      ret = USBD_FAIL;
 80100d8:	2303      	movs	r3, #3
 80100da:	75fb      	strb	r3, [r7, #23]
      break;
 80100dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80100de:	7dfb      	ldrb	r3, [r7, #23]
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3718      	adds	r7, #24
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	460b      	mov	r3, r1
 80100f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80100fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	32b0      	adds	r2, #176	@ 0xb0
 8010106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d101      	bne.n	8010112 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801010e:	2303      	movs	r3, #3
 8010110:	e065      	b.n	80101de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	32b0      	adds	r2, #176	@ 0xb0
 801011c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010120:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010122:	78fb      	ldrb	r3, [r7, #3]
 8010124:	f003 020f 	and.w	r2, r3, #15
 8010128:	6879      	ldr	r1, [r7, #4]
 801012a:	4613      	mov	r3, r2
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	4413      	add	r3, r2
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	440b      	add	r3, r1
 8010134:	3318      	adds	r3, #24
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d02f      	beq.n	801019c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801013c:	78fb      	ldrb	r3, [r7, #3]
 801013e:	f003 020f 	and.w	r2, r3, #15
 8010142:	6879      	ldr	r1, [r7, #4]
 8010144:	4613      	mov	r3, r2
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	4413      	add	r3, r2
 801014a:	009b      	lsls	r3, r3, #2
 801014c:	440b      	add	r3, r1
 801014e:	3318      	adds	r3, #24
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	78fb      	ldrb	r3, [r7, #3]
 8010154:	f003 010f 	and.w	r1, r3, #15
 8010158:	68f8      	ldr	r0, [r7, #12]
 801015a:	460b      	mov	r3, r1
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	440b      	add	r3, r1
 8010160:	00db      	lsls	r3, r3, #3
 8010162:	4403      	add	r3, r0
 8010164:	3324      	adds	r3, #36	@ 0x24
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	fbb2 f1f3 	udiv	r1, r2, r3
 801016c:	fb01 f303 	mul.w	r3, r1, r3
 8010170:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010172:	2b00      	cmp	r3, #0
 8010174:	d112      	bne.n	801019c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010176:	78fb      	ldrb	r3, [r7, #3]
 8010178:	f003 020f 	and.w	r2, r3, #15
 801017c:	6879      	ldr	r1, [r7, #4]
 801017e:	4613      	mov	r3, r2
 8010180:	009b      	lsls	r3, r3, #2
 8010182:	4413      	add	r3, r2
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	440b      	add	r3, r1
 8010188:	3318      	adds	r3, #24
 801018a:	2200      	movs	r2, #0
 801018c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801018e:	78f9      	ldrb	r1, [r7, #3]
 8010190:	2300      	movs	r3, #0
 8010192:	2200      	movs	r2, #0
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 fe0c 	bl	8010db2 <USBD_LL_Transmit>
 801019a:	e01f      	b.n	80101dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	2200      	movs	r2, #0
 80101a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	33b0      	adds	r3, #176	@ 0xb0
 80101ae:	009b      	lsls	r3, r3, #2
 80101b0:	4413      	add	r3, r2
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	691b      	ldr	r3, [r3, #16]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d010      	beq.n	80101dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	33b0      	adds	r3, #176	@ 0xb0
 80101c4:	009b      	lsls	r3, r3, #2
 80101c6:	4413      	add	r3, r2
 80101c8:	685b      	ldr	r3, [r3, #4]
 80101ca:	691b      	ldr	r3, [r3, #16]
 80101cc:	68ba      	ldr	r2, [r7, #8]
 80101ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80101d2:	68ba      	ldr	r2, [r7, #8]
 80101d4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80101d8:	78fa      	ldrb	r2, [r7, #3]
 80101da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80101dc:	2300      	movs	r3, #0
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3710      	adds	r7, #16
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}

080101e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80101e6:	b580      	push	{r7, lr}
 80101e8:	b084      	sub	sp, #16
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	6078      	str	r0, [r7, #4]
 80101ee:	460b      	mov	r3, r1
 80101f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	32b0      	adds	r2, #176	@ 0xb0
 80101fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010200:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	32b0      	adds	r2, #176	@ 0xb0
 801020c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d101      	bne.n	8010218 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010214:	2303      	movs	r3, #3
 8010216:	e01a      	b.n	801024e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010218:	78fb      	ldrb	r3, [r7, #3]
 801021a:	4619      	mov	r1, r3
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 fdfe 	bl	8010e1e <USBD_LL_GetRxDataSize>
 8010222:	4602      	mov	r2, r0
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010230:	687a      	ldr	r2, [r7, #4]
 8010232:	33b0      	adds	r3, #176	@ 0xb0
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	4413      	add	r3, r2
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	68db      	ldr	r3, [r3, #12]
 801023c:	68fa      	ldr	r2, [r7, #12]
 801023e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8010242:	68fa      	ldr	r2, [r7, #12]
 8010244:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010248:	4611      	mov	r1, r2
 801024a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801024c:	2300      	movs	r3, #0
}
 801024e:	4618      	mov	r0, r3
 8010250:	3710      	adds	r7, #16
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}

08010256 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010256:	b580      	push	{r7, lr}
 8010258:	b084      	sub	sp, #16
 801025a:	af00      	add	r7, sp, #0
 801025c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	32b0      	adds	r2, #176	@ 0xb0
 8010268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801026c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d101      	bne.n	8010278 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010274:	2303      	movs	r3, #3
 8010276:	e024      	b.n	80102c2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801027e:	687a      	ldr	r2, [r7, #4]
 8010280:	33b0      	adds	r3, #176	@ 0xb0
 8010282:	009b      	lsls	r3, r3, #2
 8010284:	4413      	add	r3, r2
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d019      	beq.n	80102c0 <USBD_CDC_EP0_RxReady+0x6a>
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010292:	2bff      	cmp	r3, #255	@ 0xff
 8010294:	d014      	beq.n	80102c0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801029c:	687a      	ldr	r2, [r7, #4]
 801029e:	33b0      	adds	r3, #176	@ 0xb0
 80102a0:	009b      	lsls	r3, r3, #2
 80102a2:	4413      	add	r3, r2
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	689b      	ldr	r3, [r3, #8]
 80102a8:	68fa      	ldr	r2, [r7, #12]
 80102aa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80102ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80102b0:	68fa      	ldr	r2, [r7, #12]
 80102b2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80102b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	22ff      	movs	r2, #255	@ 0xff
 80102bc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80102c0:	2300      	movs	r3, #0
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3710      	adds	r7, #16
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
	...

080102cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b086      	sub	sp, #24
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80102d4:	2182      	movs	r1, #130	@ 0x82
 80102d6:	4818      	ldr	r0, [pc, #96]	@ (8010338 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80102d8:	f001 f901 	bl	80114de <USBD_GetEpDesc>
 80102dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80102de:	2101      	movs	r1, #1
 80102e0:	4815      	ldr	r0, [pc, #84]	@ (8010338 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80102e2:	f001 f8fc 	bl	80114de <USBD_GetEpDesc>
 80102e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80102e8:	2181      	movs	r1, #129	@ 0x81
 80102ea:	4813      	ldr	r0, [pc, #76]	@ (8010338 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80102ec:	f001 f8f7 	bl	80114de <USBD_GetEpDesc>
 80102f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d002      	beq.n	80102fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	2210      	movs	r2, #16
 80102fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d006      	beq.n	8010312 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	2200      	movs	r2, #0
 8010308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801030c:	711a      	strb	r2, [r3, #4]
 801030e:	2200      	movs	r2, #0
 8010310:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d006      	beq.n	8010326 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2200      	movs	r2, #0
 801031c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010320:	711a      	strb	r2, [r3, #4]
 8010322:	2200      	movs	r2, #0
 8010324:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2243      	movs	r2, #67	@ 0x43
 801032a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801032c:	4b02      	ldr	r3, [pc, #8]	@ (8010338 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801032e:	4618      	mov	r0, r3
 8010330:	3718      	adds	r7, #24
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	20000070 	.word	0x20000070

0801033c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b086      	sub	sp, #24
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010344:	2182      	movs	r1, #130	@ 0x82
 8010346:	4818      	ldr	r0, [pc, #96]	@ (80103a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010348:	f001 f8c9 	bl	80114de <USBD_GetEpDesc>
 801034c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801034e:	2101      	movs	r1, #1
 8010350:	4815      	ldr	r0, [pc, #84]	@ (80103a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010352:	f001 f8c4 	bl	80114de <USBD_GetEpDesc>
 8010356:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010358:	2181      	movs	r1, #129	@ 0x81
 801035a:	4813      	ldr	r0, [pc, #76]	@ (80103a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801035c:	f001 f8bf 	bl	80114de <USBD_GetEpDesc>
 8010360:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d002      	beq.n	801036e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	2210      	movs	r2, #16
 801036c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d006      	beq.n	8010382 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	2200      	movs	r2, #0
 8010378:	711a      	strb	r2, [r3, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	f042 0202 	orr.w	r2, r2, #2
 8010380:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d006      	beq.n	8010396 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2200      	movs	r2, #0
 801038c:	711a      	strb	r2, [r3, #4]
 801038e:	2200      	movs	r2, #0
 8010390:	f042 0202 	orr.w	r2, r2, #2
 8010394:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2243      	movs	r2, #67	@ 0x43
 801039a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801039c:	4b02      	ldr	r3, [pc, #8]	@ (80103a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3718      	adds	r7, #24
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	bf00      	nop
 80103a8:	20000070 	.word	0x20000070

080103ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b086      	sub	sp, #24
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80103b4:	2182      	movs	r1, #130	@ 0x82
 80103b6:	4818      	ldr	r0, [pc, #96]	@ (8010418 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80103b8:	f001 f891 	bl	80114de <USBD_GetEpDesc>
 80103bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80103be:	2101      	movs	r1, #1
 80103c0:	4815      	ldr	r0, [pc, #84]	@ (8010418 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80103c2:	f001 f88c 	bl	80114de <USBD_GetEpDesc>
 80103c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80103c8:	2181      	movs	r1, #129	@ 0x81
 80103ca:	4813      	ldr	r0, [pc, #76]	@ (8010418 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80103cc:	f001 f887 	bl	80114de <USBD_GetEpDesc>
 80103d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d002      	beq.n	80103de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	2210      	movs	r2, #16
 80103dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d006      	beq.n	80103f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	2200      	movs	r2, #0
 80103e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80103ec:	711a      	strb	r2, [r3, #4]
 80103ee:	2200      	movs	r2, #0
 80103f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d006      	beq.n	8010406 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010400:	711a      	strb	r2, [r3, #4]
 8010402:	2200      	movs	r2, #0
 8010404:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2243      	movs	r2, #67	@ 0x43
 801040a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801040c:	4b02      	ldr	r3, [pc, #8]	@ (8010418 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801040e:	4618      	mov	r0, r3
 8010410:	3718      	adds	r7, #24
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	20000070 	.word	0x20000070

0801041c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801041c:	b480      	push	{r7}
 801041e:	b083      	sub	sp, #12
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	220a      	movs	r2, #10
 8010428:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801042a:	4b03      	ldr	r3, [pc, #12]	@ (8010438 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801042c:	4618      	mov	r0, r3
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr
 8010438:	2000002c 	.word	0x2000002c

0801043c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801043c:	b480      	push	{r7}
 801043e:	b083      	sub	sp, #12
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d101      	bne.n	8010450 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801044c:	2303      	movs	r3, #3
 801044e:	e009      	b.n	8010464 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	33b0      	adds	r3, #176	@ 0xb0
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	4413      	add	r3, r2
 801045e:	683a      	ldr	r2, [r7, #0]
 8010460:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010462:	2300      	movs	r3, #0
}
 8010464:	4618      	mov	r0, r3
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010470:	b480      	push	{r7}
 8010472:	b087      	sub	sp, #28
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	32b0      	adds	r2, #176	@ 0xb0
 8010486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801048a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d101      	bne.n	8010496 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010492:	2303      	movs	r3, #3
 8010494:	e008      	b.n	80104a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	68ba      	ldr	r2, [r7, #8]
 801049a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	687a      	ldr	r2, [r7, #4]
 80104a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80104a6:	2300      	movs	r3, #0
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	371c      	adds	r7, #28
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr

080104b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80104b4:	b480      	push	{r7}
 80104b6:	b085      	sub	sp, #20
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	32b0      	adds	r2, #176	@ 0xb0
 80104c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d101      	bne.n	80104d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80104d4:	2303      	movs	r3, #3
 80104d6:	e004      	b.n	80104e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	683a      	ldr	r2, [r7, #0]
 80104dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80104e0:	2300      	movs	r3, #0
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3714      	adds	r7, #20
 80104e6:	46bd      	mov	sp, r7
 80104e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ec:	4770      	bx	lr
	...

080104f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	32b0      	adds	r2, #176	@ 0xb0
 8010502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010506:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010508:	2301      	movs	r3, #1
 801050a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d101      	bne.n	8010516 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010512:	2303      	movs	r3, #3
 8010514:	e025      	b.n	8010562 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801051c:	2b00      	cmp	r3, #0
 801051e:	d11f      	bne.n	8010560 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	2201      	movs	r2, #1
 8010524:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010528:	4b10      	ldr	r3, [pc, #64]	@ (801056c <USBD_CDC_TransmitPacket+0x7c>)
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	f003 020f 	and.w	r2, r3, #15
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	4613      	mov	r3, r2
 801053a:	009b      	lsls	r3, r3, #2
 801053c:	4413      	add	r3, r2
 801053e:	009b      	lsls	r3, r3, #2
 8010540:	4403      	add	r3, r0
 8010542:	3318      	adds	r3, #24
 8010544:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010546:	4b09      	ldr	r3, [pc, #36]	@ (801056c <USBD_CDC_TransmitPacket+0x7c>)
 8010548:	7819      	ldrb	r1, [r3, #0]
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f000 fc2b 	bl	8010db2 <USBD_LL_Transmit>

    ret = USBD_OK;
 801055c:	2300      	movs	r3, #0
 801055e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010560:	7bfb      	ldrb	r3, [r7, #15]
}
 8010562:	4618      	mov	r0, r3
 8010564:	3710      	adds	r7, #16
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	200000b3 	.word	0x200000b3

08010570 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b084      	sub	sp, #16
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	32b0      	adds	r2, #176	@ 0xb0
 8010582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010586:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	32b0      	adds	r2, #176	@ 0xb0
 8010592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d101      	bne.n	801059e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801059a:	2303      	movs	r3, #3
 801059c:	e018      	b.n	80105d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	7c1b      	ldrb	r3, [r3, #16]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d10a      	bne.n	80105bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80105a6:	4b0c      	ldr	r3, [pc, #48]	@ (80105d8 <USBD_CDC_ReceivePacket+0x68>)
 80105a8:	7819      	ldrb	r1, [r3, #0]
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80105b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f000 fc17 	bl	8010de8 <USBD_LL_PrepareReceive>
 80105ba:	e008      	b.n	80105ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80105bc:	4b06      	ldr	r3, [pc, #24]	@ (80105d8 <USBD_CDC_ReceivePacket+0x68>)
 80105be:	7819      	ldrb	r1, [r3, #0]
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80105c6:	2340      	movs	r3, #64	@ 0x40
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f000 fc0d 	bl	8010de8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80105ce:	2300      	movs	r3, #0
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3710      	adds	r7, #16
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	200000b4 	.word	0x200000b4

080105dc <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80105e0:	2200      	movs	r2, #0
 80105e2:	4905      	ldr	r1, [pc, #20]	@ (80105f8 <TEMPLATE_Init+0x1c>)
 80105e4:	4805      	ldr	r0, [pc, #20]	@ (80105fc <TEMPLATE_Init+0x20>)
 80105e6:	f7ff ff43 	bl	8010470 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80105ea:	4905      	ldr	r1, [pc, #20]	@ (8010600 <TEMPLATE_Init+0x24>)
 80105ec:	4803      	ldr	r0, [pc, #12]	@ (80105fc <TEMPLATE_Init+0x20>)
 80105ee:	f7ff ff61 	bl	80104b4 <USBD_CDC_SetRxBuffer>
      return (0);
 80105f2:	2300      	movs	r3, #0
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	bd80      	pop	{r7, pc}
 80105f8:	20000ce8 	.word	0x20000ce8
 80105fc:	20000760 	.word	0x20000760
 8010600:	20000ae8 	.word	0x20000ae8

08010604 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 8010604:	b480      	push	{r7}
 8010606:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 8010608:	2300      	movs	r3, #0
}
 801060a:	4618      	mov	r0, r3
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <USB_Transmit>:

uint8_t USB_Transmit(uint8_t *data, uint32_t len)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b0a4      	sub	sp, #144	@ 0x90
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
    uint32_t offset = 0;
 801061e:	2300      	movs	r3, #0
 8010620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const uint32_t bytesPerLine = 16;
 8010624:	2310      	movs	r3, #16
 8010626:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (offset < len)
 8010628:	e0a4      	b.n	8010774 <USB_Transmit+0x160>
    {
        uint16_t chunk_len = ((len - offset) >= CDC_BLOCK_SIZE) ? CDC_BLOCK_SIZE : (len - offset);
 801062a:	683a      	ldr	r2, [r7, #0]
 801062c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010630:	1ad3      	subs	r3, r2, r3
 8010632:	2b40      	cmp	r3, #64	@ 0x40
 8010634:	bf28      	it	cs
 8010636:	2340      	movcs	r3, #64	@ 0x40
 8010638:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        tx_complete = 0;
 801063c:	4b53      	ldr	r3, [pc, #332]	@ (801078c <USB_Transmit+0x178>)
 801063e:	2200      	movs	r2, #0
 8010640:	701a      	strb	r2, [r3, #0]
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &data[offset], chunk_len);
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010648:	4413      	add	r3, r2
 801064a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801064e:	4619      	mov	r1, r3
 8010650:	484f      	ldr	r0, [pc, #316]	@ (8010790 <USB_Transmit+0x17c>)
 8010652:	f7ff ff0d 	bl	8010470 <USBD_CDC_SetTxBuffer>

        // Log in 32-byte lines
        uint32_t printed = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 801065c:	e056      	b.n	801070c <USB_Transmit+0xf8>
        {
            uint32_t lineLen = ((chunk_len - printed) > bytesPerLine) ? bytesPerLine : (chunk_len - printed);
 801065e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010662:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801066a:	4293      	cmp	r3, r2
 801066c:	bf28      	it	cs
 801066e:	4613      	movcs	r3, r2
 8010670:	673b      	str	r3, [r7, #112]	@ 0x70
            char log_line[BYTES_PER_LINE * 3 + 1] = {0};
 8010672:	2300      	movs	r3, #0
 8010674:	60bb      	str	r3, [r7, #8]
 8010676:	f107 030c 	add.w	r3, r7, #12
 801067a:	225d      	movs	r2, #93	@ 0x5d
 801067c:	2100      	movs	r1, #0
 801067e:	4618      	mov	r0, r3
 8010680:	f002 f906 	bl	8012890 <memset>
            char *ptr = log_line;
 8010684:	f107 0308 	add.w	r3, r7, #8
 8010688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            for (uint32_t i = 0; i < lineLen; i++)
 801068c:	2300      	movs	r3, #0
 801068e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010692:	e01c      	b.n	80106ce <USB_Transmit+0xba>
            {
                ptr += snprintf(ptr, 4, "%02X ", data[offset + printed + i]);
 8010694:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010698:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801069c:	441a      	add	r2, r3
 801069e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80106a2:	4413      	add	r3, r2
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	4413      	add	r3, r2
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	4a3a      	ldr	r2, [pc, #232]	@ (8010794 <USB_Transmit+0x180>)
 80106ac:	2104      	movs	r1, #4
 80106ae:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80106b2:	f002 f81d 	bl	80126f0 <sniprintf>
 80106b6:	4603      	mov	r3, r0
 80106b8:	461a      	mov	r2, r3
 80106ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80106be:	4413      	add	r3, r2
 80106c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            for (uint32_t i = 0; i < lineLen; i++)
 80106c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80106c8:	3301      	adds	r3, #1
 80106ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80106ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80106d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d3dd      	bcc.n	8010694 <USB_Transmit+0x80>
            }

            if (printed == 0)
 80106d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d108      	bne.n	80106f2 <USB_Transmit+0xde>
            {
                log_info("USB Tx [%d bytes]: %s", chunk_len, log_line);
 80106e0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80106e4:	f107 0208 	add.w	r2, r7, #8
 80106e8:	4619      	mov	r1, r3
 80106ea:	482b      	ldr	r0, [pc, #172]	@ (8010798 <USB_Transmit+0x184>)
 80106ec:	f7f1 f8e2 	bl	80018b4 <log_info>
 80106f0:	e006      	b.n	8010700 <USB_Transmit+0xec>
            }
            else
            {
                log_info("%19s%s", "", log_line);
 80106f2:	f107 0308 	add.w	r3, r7, #8
 80106f6:	461a      	mov	r2, r3
 80106f8:	4928      	ldr	r1, [pc, #160]	@ (801079c <USB_Transmit+0x188>)
 80106fa:	4829      	ldr	r0, [pc, #164]	@ (80107a0 <USB_Transmit+0x18c>)
 80106fc:	f7f1 f8da 	bl	80018b4 <log_info>
            }

            printed += lineLen;
 8010700:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010704:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010706:	4413      	add	r3, r2
 8010708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 801070c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8010710:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8010714:	429a      	cmp	r2, r3
 8010716:	d3a2      	bcc.n	801065e <USB_Transmit+0x4a>
        }

        if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 8010718:	481d      	ldr	r0, [pc, #116]	@ (8010790 <USB_Transmit+0x17c>)
 801071a:	f7ff fee9 	bl	80104f0 <USBD_CDC_TransmitPacket>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d001      	beq.n	8010728 <USB_Transmit+0x114>
        {
            return USBD_FAIL;
 8010724:	2303      	movs	r3, #3
 8010726:	e02c      	b.n	8010782 <USB_Transmit+0x16e>
        }

        uint32_t timeout = 10000;
 8010728:	f242 7310 	movw	r3, #10000	@ 0x2710
 801072c:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (tx_complete == 0 && timeout--);
 801072e:	bf00      	nop
 8010730:	4b16      	ldr	r3, [pc, #88]	@ (801078c <USB_Transmit+0x178>)
 8010732:	781b      	ldrb	r3, [r3, #0]
 8010734:	b2db      	uxtb	r3, r3
 8010736:	2b00      	cmp	r3, #0
 8010738:	d104      	bne.n	8010744 <USB_Transmit+0x130>
 801073a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801073c:	1e5a      	subs	r2, r3, #1
 801073e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010740:	2b00      	cmp	r3, #0
 8010742:	d1f5      	bne.n	8010730 <USB_Transmit+0x11c>
        if (timeout == 0)
 8010744:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010746:	2b00      	cmp	r3, #0
 8010748:	d104      	bne.n	8010754 <USB_Transmit+0x140>
        {
            log_error("USB TX Timeout");
 801074a:	4816      	ldr	r0, [pc, #88]	@ (80107a4 <USB_Transmit+0x190>)
 801074c:	f7f1 f8e6 	bl	800191c <log_error>
            return USBD_FAIL;
 8010750:	2303      	movs	r3, #3
 8010752:	e016      	b.n	8010782 <USB_Transmit+0x16e>
        }

        offset += chunk_len;
 8010754:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8010758:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801075c:	4413      	add	r3, r2
 801075e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (volatile int i = 0; i < 200; i++);
 8010762:	2300      	movs	r3, #0
 8010764:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010766:	e002      	b.n	801076e <USB_Transmit+0x15a>
 8010768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801076a:	3301      	adds	r3, #1
 801076c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801076e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010770:	2bc7      	cmp	r3, #199	@ 0xc7
 8010772:	ddf9      	ble.n	8010768 <USB_Transmit+0x154>
    while (offset < len)
 8010774:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	429a      	cmp	r2, r3
 801077c:	f4ff af55 	bcc.w	801062a <USB_Transmit+0x16>
    }

    return USBD_OK;
 8010780:	2300      	movs	r3, #0
}
 8010782:	4618      	mov	r0, r3
 8010784:	3790      	adds	r7, #144	@ 0x90
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	200000b6 	.word	0x200000b6
 8010790:	20000760 	.word	0x20000760
 8010794:	0801468c 	.word	0x0801468c
 8010798:	08014694 	.word	0x08014694
 801079c:	080146ac 	.word	0x080146ac
 80107a0:	080146b0 	.word	0x080146b0
 80107a4:	080146b8 	.word	0x080146b8

080107a8 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80107a8:	b480      	push	{r7}
 80107aa:	b083      	sub	sp, #12
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	4603      	mov	r3, r0
 80107b0:	6039      	str	r1, [r7, #0]
 80107b2:	71fb      	strb	r3, [r7, #7]
 80107b4:	4613      	mov	r3, r2
 80107b6:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 80107b8:	79fb      	ldrb	r3, [r7, #7]
 80107ba:	2b23      	cmp	r3, #35	@ 0x23
 80107bc:	f200 8098 	bhi.w	80108f0 <TEMPLATE_Control+0x148>
 80107c0:	a201      	add	r2, pc, #4	@ (adr r2, 80107c8 <TEMPLATE_Control+0x20>)
 80107c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c6:	bf00      	nop
 80107c8:	080108f1 	.word	0x080108f1
 80107cc:	080108f1 	.word	0x080108f1
 80107d0:	080108f1 	.word	0x080108f1
 80107d4:	080108f1 	.word	0x080108f1
 80107d8:	080108f1 	.word	0x080108f1
 80107dc:	080108f1 	.word	0x080108f1
 80107e0:	080108f1 	.word	0x080108f1
 80107e4:	080108f1 	.word	0x080108f1
 80107e8:	080108f1 	.word	0x080108f1
 80107ec:	080108f1 	.word	0x080108f1
 80107f0:	080108f1 	.word	0x080108f1
 80107f4:	080108f1 	.word	0x080108f1
 80107f8:	080108f1 	.word	0x080108f1
 80107fc:	080108f1 	.word	0x080108f1
 8010800:	080108f1 	.word	0x080108f1
 8010804:	080108f1 	.word	0x080108f1
 8010808:	080108f1 	.word	0x080108f1
 801080c:	080108f1 	.word	0x080108f1
 8010810:	080108f1 	.word	0x080108f1
 8010814:	080108f1 	.word	0x080108f1
 8010818:	080108f1 	.word	0x080108f1
 801081c:	080108f1 	.word	0x080108f1
 8010820:	080108f1 	.word	0x080108f1
 8010824:	080108f1 	.word	0x080108f1
 8010828:	080108f1 	.word	0x080108f1
 801082c:	080108f1 	.word	0x080108f1
 8010830:	080108f1 	.word	0x080108f1
 8010834:	080108f1 	.word	0x080108f1
 8010838:	080108f1 	.word	0x080108f1
 801083c:	080108f1 	.word	0x080108f1
 8010840:	080108f1 	.word	0x080108f1
 8010844:	080108f1 	.word	0x080108f1
 8010848:	08010859 	.word	0x08010859
 801084c:	0801089d 	.word	0x0801089d
 8010850:	080108f1 	.word	0x080108f1
 8010854:	080108f1 	.word	0x080108f1
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	461a      	mov	r2, r3
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	3301      	adds	r3, #1
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	021b      	lsls	r3, r3, #8
 8010866:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	3302      	adds	r3, #2
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8010870:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	3303      	adds	r3, #3
 8010876:	781b      	ldrb	r3, [r3, #0]
 8010878:	061b      	lsls	r3, r3, #24
 801087a:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 801087c:	461a      	mov	r2, r3
 801087e:	4b20      	ldr	r3, [pc, #128]	@ (8010900 <TEMPLATE_Control+0x158>)
 8010880:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	791a      	ldrb	r2, [r3, #4]
 8010886:	4b1e      	ldr	r3, [pc, #120]	@ (8010900 <TEMPLATE_Control+0x158>)
 8010888:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	795a      	ldrb	r2, [r3, #5]
 801088e:	4b1c      	ldr	r3, [pc, #112]	@ (8010900 <TEMPLATE_Control+0x158>)
 8010890:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	799a      	ldrb	r2, [r3, #6]
 8010896:	4b1a      	ldr	r3, [pc, #104]	@ (8010900 <TEMPLATE_Control+0x158>)
 8010898:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 801089a:	e02a      	b.n	80108f2 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 801089c:	4b18      	ldr	r3, [pc, #96]	@ (8010900 <TEMPLATE_Control+0x158>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	b2da      	uxtb	r2, r3
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 80108a6:	4b16      	ldr	r3, [pc, #88]	@ (8010900 <TEMPLATE_Control+0x158>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	0a1a      	lsrs	r2, r3, #8
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	3301      	adds	r3, #1
 80108b0:	b2d2      	uxtb	r2, r2
 80108b2:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 80108b4:	4b12      	ldr	r3, [pc, #72]	@ (8010900 <TEMPLATE_Control+0x158>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	0c1a      	lsrs	r2, r3, #16
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	3302      	adds	r3, #2
 80108be:	b2d2      	uxtb	r2, r2
 80108c0:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 80108c2:	4b0f      	ldr	r3, [pc, #60]	@ (8010900 <TEMPLATE_Control+0x158>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	0e1a      	lsrs	r2, r3, #24
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	3303      	adds	r3, #3
 80108cc:	b2d2      	uxtb	r2, r2
 80108ce:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	3304      	adds	r3, #4
 80108d4:	4a0a      	ldr	r2, [pc, #40]	@ (8010900 <TEMPLATE_Control+0x158>)
 80108d6:	7912      	ldrb	r2, [r2, #4]
 80108d8:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	3305      	adds	r3, #5
 80108de:	4a08      	ldr	r2, [pc, #32]	@ (8010900 <TEMPLATE_Control+0x158>)
 80108e0:	7952      	ldrb	r2, [r2, #5]
 80108e2:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	3306      	adds	r3, #6
 80108e8:	4a05      	ldr	r2, [pc, #20]	@ (8010900 <TEMPLATE_Control+0x158>)
 80108ea:	7992      	ldrb	r2, [r2, #6]
 80108ec:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 80108ee:	e000      	b.n	80108f2 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 80108f0:	bf00      	nop
  }

  return (0);
 80108f2:	2300      	movs	r3, #0
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	370c      	adds	r7, #12
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr
 8010900:	200000cc 	.word	0x200000cc

08010904 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 8010904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010908:	b08b      	sub	sp, #44	@ 0x2c
 801090a:	af00      	add	r7, sp, #0
 801090c:	6078      	str	r0, [r7, #4]
 801090e:	6039      	str	r1, [r7, #0]
 8010910:	466b      	mov	r3, sp
 8010912:	461e      	mov	r6, r3
    const uint32_t bytesPerLine = 16;
 8010914:	2310      	movs	r3, #16
 8010916:	61bb      	str	r3, [r7, #24]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 8010918:	69ba      	ldr	r2, [r7, #24]
 801091a:	4613      	mov	r3, r2
 801091c:	005b      	lsls	r3, r3, #1
 801091e:	4413      	add	r3, r2
 8010920:	617b      	str	r3, [r7, #20]
 8010922:	69ba      	ldr	r2, [r7, #24]
 8010924:	4613      	mov	r3, r2
 8010926:	005b      	lsls	r3, r3, #1
 8010928:	4413      	add	r3, r2
 801092a:	3301      	adds	r3, #1
 801092c:	2200      	movs	r2, #0
 801092e:	4698      	mov	r8, r3
 8010930:	4691      	mov	r9, r2
 8010932:	f04f 0200 	mov.w	r2, #0
 8010936:	f04f 0300 	mov.w	r3, #0
 801093a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801093e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010946:	69ba      	ldr	r2, [r7, #24]
 8010948:	4613      	mov	r3, r2
 801094a:	005b      	lsls	r3, r3, #1
 801094c:	4413      	add	r3, r2
 801094e:	3301      	adds	r3, #1
 8010950:	2200      	movs	r2, #0
 8010952:	461c      	mov	r4, r3
 8010954:	4615      	mov	r5, r2
 8010956:	f04f 0200 	mov.w	r2, #0
 801095a:	f04f 0300 	mov.w	r3, #0
 801095e:	00eb      	lsls	r3, r5, #3
 8010960:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010964:	00e2      	lsls	r2, r4, #3
 8010966:	69ba      	ldr	r2, [r7, #24]
 8010968:	4613      	mov	r3, r2
 801096a:	005b      	lsls	r3, r3, #1
 801096c:	4413      	add	r3, r2
 801096e:	3301      	adds	r3, #1
 8010970:	3307      	adds	r3, #7
 8010972:	08db      	lsrs	r3, r3, #3
 8010974:	00db      	lsls	r3, r3, #3
 8010976:	ebad 0d03 	sub.w	sp, sp, r3
 801097a:	466b      	mov	r3, sp
 801097c:	3300      	adds	r3, #0
 801097e:	613b      	str	r3, [r7, #16]
    uint32_t totalLen = *Len;
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	60fb      	str	r3, [r7, #12]
    uint32_t printed = 0;
 8010986:	2300      	movs	r3, #0
 8010988:	627b      	str	r3, [r7, #36]	@ 0x24

    if (*Len > CDC_DATA_FS_MAX_PACKET_SIZE) {
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2b40      	cmp	r3, #64	@ 0x40
 8010990:	d944      	bls.n	8010a1c <TEMPLATE_Receive+0x118>
        *Len = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	2240      	movs	r2, #64	@ 0x40
 8010996:	601a      	str	r2, [r3, #0]
    }

    while (printed < *Len)
 8010998:	e040      	b.n	8010a1c <TEMPLATE_Receive+0x118>
    {
        uint32_t lineLen = ((*Len - printed) > bytesPerLine) ? bytesPerLine : (*Len - printed);
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	69ba      	ldr	r2, [r7, #24]
 80109a4:	4293      	cmp	r3, r2
 80109a6:	bf28      	it	cs
 80109a8:	4613      	movcs	r3, r2
 80109aa:	60bb      	str	r3, [r7, #8]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 80109ac:	69ba      	ldr	r2, [r7, #24]
 80109ae:	4613      	mov	r3, r2
 80109b0:	005b      	lsls	r3, r3, #1
 80109b2:	4413      	add	r3, r2
        memset(hexLine, 0, sizeof(hexLine));
 80109b4:	3301      	adds	r3, #1
 80109b6:	461a      	mov	r2, r3
 80109b8:	2100      	movs	r1, #0
 80109ba:	6938      	ldr	r0, [r7, #16]
 80109bc:	f001 ff68 	bl	8012890 <memset>
        char *ptr = hexLine;
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	623b      	str	r3, [r7, #32]

        for (uint32_t i = 0; i < lineLen; ++i)
 80109c4:	2300      	movs	r3, #0
 80109c6:	61fb      	str	r3, [r7, #28]
 80109c8:	e012      	b.n	80109f0 <TEMPLATE_Receive+0xec>
        {
            ptr += snprintf(ptr, 4, "%02X ", Buf[printed + i]);
 80109ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	4413      	add	r3, r2
 80109d0:	687a      	ldr	r2, [r7, #4]
 80109d2:	4413      	add	r3, r2
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	4a2d      	ldr	r2, [pc, #180]	@ (8010a8c <TEMPLATE_Receive+0x188>)
 80109d8:	2104      	movs	r1, #4
 80109da:	6a38      	ldr	r0, [r7, #32]
 80109dc:	f001 fe88 	bl	80126f0 <sniprintf>
 80109e0:	4603      	mov	r3, r0
 80109e2:	461a      	mov	r2, r3
 80109e4:	6a3b      	ldr	r3, [r7, #32]
 80109e6:	4413      	add	r3, r2
 80109e8:	623b      	str	r3, [r7, #32]
        for (uint32_t i = 0; i < lineLen; ++i)
 80109ea:	69fb      	ldr	r3, [r7, #28]
 80109ec:	3301      	adds	r3, #1
 80109ee:	61fb      	str	r3, [r7, #28]
 80109f0:	69fa      	ldr	r2, [r7, #28]
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d3e8      	bcc.n	80109ca <TEMPLATE_Receive+0xc6>
        }

        if (printed == 0)
 80109f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d105      	bne.n	8010a0a <TEMPLATE_Receive+0x106>
        {
            // First line includes logger message
            log_info("USB Rx [%lu bytes]: %s", totalLen, hexLine);
 80109fe:	693a      	ldr	r2, [r7, #16]
 8010a00:	68f9      	ldr	r1, [r7, #12]
 8010a02:	4823      	ldr	r0, [pc, #140]	@ (8010a90 <TEMPLATE_Receive+0x18c>)
 8010a04:	f7f0 ff56 	bl	80018b4 <log_info>
 8010a08:	e004      	b.n	8010a14 <TEMPLATE_Receive+0x110>
        }
        else
        {
            // Subsequent lines have 26-space indent
            log_info("%19s%s", "", hexLine);
 8010a0a:	693a      	ldr	r2, [r7, #16]
 8010a0c:	4921      	ldr	r1, [pc, #132]	@ (8010a94 <TEMPLATE_Receive+0x190>)
 8010a0e:	4822      	ldr	r0, [pc, #136]	@ (8010a98 <TEMPLATE_Receive+0x194>)
 8010a10:	f7f0 ff50 	bl	80018b4 <log_info>
        }

        printed += lineLen;
 8010a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	4413      	add	r3, r2
 8010a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (printed < *Len)
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d3b9      	bcc.n	801099a <TEMPLATE_Receive+0x96>
    }

    // Copy to usb_rx_buffer if space permits
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	681a      	ldr	r2, [r3, #0]
 8010a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8010a9c <TEMPLATE_Receive+0x198>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4413      	add	r3, r2
 8010a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010a34:	d215      	bcs.n	8010a62 <TEMPLATE_Receive+0x15e>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 8010a36:	4b19      	ldr	r3, [pc, #100]	@ (8010a9c <TEMPLATE_Receive+0x198>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	4a19      	ldr	r2, [pc, #100]	@ (8010aa0 <TEMPLATE_Receive+0x19c>)
 8010a3c:	1898      	adds	r0, r3, r2
 8010a3e:	683b      	ldr	r3, [r7, #0]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	461a      	mov	r2, r3
 8010a44:	6879      	ldr	r1, [r7, #4]
 8010a46:	f001 ff9e 	bl	8012986 <memcpy>
        usb_rx_index += *Len;
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	681a      	ldr	r2, [r3, #0]
 8010a4e:	4b13      	ldr	r3, [pc, #76]	@ (8010a9c <TEMPLATE_Receive+0x198>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4413      	add	r3, r2
 8010a54:	4a11      	ldr	r2, [pc, #68]	@ (8010a9c <TEMPLATE_Receive+0x198>)
 8010a56:	6013      	str	r3, [r2, #0]
        log_error("USB buffer overflow");
        return USBD_FAIL;
    }

    // If this was the last packet
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8010a5e:	d80b      	bhi.n	8010a78 <TEMPLATE_Receive+0x174>
 8010a60:	e007      	b.n	8010a72 <TEMPLATE_Receive+0x16e>
        usb_rx_index = 0;
 8010a62:	4b0e      	ldr	r3, [pc, #56]	@ (8010a9c <TEMPLATE_Receive+0x198>)
 8010a64:	2200      	movs	r2, #0
 8010a66:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 8010a68:	480e      	ldr	r0, [pc, #56]	@ (8010aa4 <TEMPLATE_Receive+0x1a0>)
 8010a6a:	f7f0 ff57 	bl	800191c <log_error>
        return USBD_FAIL;
 8010a6e:	2303      	movs	r3, #3
 8010a70:	e006      	b.n	8010a80 <TEMPLATE_Receive+0x17c>
    {
        usb_rx_complete = true;
 8010a72:	4b0d      	ldr	r3, [pc, #52]	@ (8010aa8 <TEMPLATE_Receive+0x1a4>)
 8010a74:	2201      	movs	r2, #1
 8010a76:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010a78:	480c      	ldr	r0, [pc, #48]	@ (8010aac <TEMPLATE_Receive+0x1a8>)
 8010a7a:	f7ff fd79 	bl	8010570 <USBD_CDC_ReceivePacket>
    return USBD_OK;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	46b5      	mov	sp, r6
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	372c      	adds	r7, #44	@ 0x2c
 8010a86:	46bd      	mov	sp, r7
 8010a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a8c:	0801468c 	.word	0x0801468c
 8010a90:	080146c8 	.word	0x080146c8
 8010a94:	080146ac 	.word	0x080146ac
 8010a98:	080146b0 	.word	0x080146b0
 8010a9c:	20010ee8 	.word	0x20010ee8
 8010aa0:	20000ee8 	.word	0x20000ee8
 8010aa4:	080146e0 	.word	0x080146e0
 8010aa8:	20010eec 	.word	0x20010eec
 8010aac:	20000760 	.word	0x20000760

08010ab0 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	60b9      	str	r1, [r7, #8]
 8010aba:	4613      	mov	r3, r2
 8010abc:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 8010abe:	2300      	movs	r3, #0

}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3714      	adds	r7, #20
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr

08010acc <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b082      	sub	sp, #8
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4610      	mov	r0, r2
 8010ae4:	f000 faa5 	bl	8011032 <USBD_LL_SetupStage>
}
 8010ae8:	bf00      	nop
 8010aea:	3708      	adds	r7, #8
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	460b      	mov	r3, r1
 8010afa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8010b02:	78fa      	ldrb	r2, [r7, #3]
 8010b04:	6879      	ldr	r1, [r7, #4]
 8010b06:	4613      	mov	r3, r2
 8010b08:	009b      	lsls	r3, r3, #2
 8010b0a:	4413      	add	r3, r2
 8010b0c:	00db      	lsls	r3, r3, #3
 8010b0e:	440b      	add	r3, r1
 8010b10:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8010b14:	681a      	ldr	r2, [r3, #0]
 8010b16:	78fb      	ldrb	r3, [r7, #3]
 8010b18:	4619      	mov	r1, r3
 8010b1a:	f000 fadf 	bl	80110dc <USBD_LL_DataOutStage>
}
 8010b1e:	bf00      	nop
 8010b20:	3708      	adds	r7, #8
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}

08010b26 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010b26:	b580      	push	{r7, lr}
 8010b28:	b082      	sub	sp, #8
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	6078      	str	r0, [r7, #4]
 8010b2e:	460b      	mov	r3, r1
 8010b30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8010b38:	78fa      	ldrb	r2, [r7, #3]
 8010b3a:	6879      	ldr	r1, [r7, #4]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	4413      	add	r3, r2
 8010b42:	00db      	lsls	r3, r3, #3
 8010b44:	440b      	add	r3, r1
 8010b46:	3328      	adds	r3, #40	@ 0x28
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	78fb      	ldrb	r3, [r7, #3]
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	f000 fb78 	bl	8011242 <USBD_LL_DataInStage>
}
 8010b52:	bf00      	nop
 8010b54:	3708      	adds	r7, #8
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}

08010b5a <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8010b5a:	b580      	push	{r7, lr}
 8010b5c:	b082      	sub	sp, #8
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 fc7e 	bl	801146a <USBD_LL_SOF>
}
 8010b6e:	bf00      	nop
 8010b70:	3708      	adds	r7, #8
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b084      	sub	sp, #16
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	79db      	ldrb	r3, [r3, #7]
 8010b86:	2b02      	cmp	r3, #2
 8010b88:	d001      	beq.n	8010b8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010b8a:	f7f1 faf3 	bl	8002174 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8010b94:	7bfa      	ldrb	r2, [r7, #15]
 8010b96:	4611      	mov	r1, r2
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f000 fc56 	bl	801144a <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f000 fbfe 	bl	80113a6 <USBD_LL_Reset>
}
 8010baa:	bf00      	nop
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
	...

08010bb4 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	4a19      	ldr	r2, [pc, #100]	@ (8010c24 <USBD_LL_Init+0x70>)
 8010bc0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010bca:	2340      	movs	r3, #64	@ 0x40
 8010bcc:	2200      	movs	r2, #0
 8010bce:	2100      	movs	r1, #0
 8010bd0:	f7f5 fc48 	bl	8006464 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010bda:	2380      	movs	r3, #128	@ 0x80
 8010bdc:	2200      	movs	r2, #0
 8010bde:	2180      	movs	r1, #128	@ 0x80
 8010be0:	f7f5 fc40 	bl	8006464 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010bea:	23c0      	movs	r3, #192	@ 0xc0
 8010bec:	2200      	movs	r2, #0
 8010bee:	2181      	movs	r1, #129	@ 0x81
 8010bf0:	f7f5 fc38 	bl	8006464 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010bfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010bfe:	2200      	movs	r2, #0
 8010c00:	2101      	movs	r1, #1
 8010c02:	f7f5 fc2f 	bl	8006464 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010c0c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8010c10:	2200      	movs	r2, #0
 8010c12:	2182      	movs	r1, #130	@ 0x82
 8010c14:	f7f5 fc26 	bl	8006464 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 8010c18:	2300      	movs	r3, #0
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3708      	adds	r7, #8
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	2000047c 	.word	0x2000047c

08010c28 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7f4 f8f8 	bl	8004e2c <HAL_PCD_Start>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 8010c40:	7bfb      	ldrb	r3, [r7, #15]
 8010c42:	4618      	mov	r0, r3
 8010c44:	f000 f916 	bl	8010e74 <USBD_Get_USB_Status>
 8010c48:	4603      	mov	r3, r0
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3710      	adds	r7, #16
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}

08010c52 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 8010c52:	b580      	push	{r7, lr}
 8010c54:	b084      	sub	sp, #16
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
 8010c5a:	4608      	mov	r0, r1
 8010c5c:	4611      	mov	r1, r2
 8010c5e:	461a      	mov	r2, r3
 8010c60:	4603      	mov	r3, r0
 8010c62:	70fb      	strb	r3, [r7, #3]
 8010c64:	460b      	mov	r3, r1
 8010c66:	70bb      	strb	r3, [r7, #2]
 8010c68:	4613      	mov	r3, r2
 8010c6a:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010c72:	78bb      	ldrb	r3, [r7, #2]
 8010c74:	883a      	ldrh	r2, [r7, #0]
 8010c76:	78f9      	ldrb	r1, [r7, #3]
 8010c78:	f7f4 fa27 	bl	80050ca <HAL_PCD_EP_Open>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010c80:	7bfb      	ldrb	r3, [r7, #15]
 8010c82:	4618      	mov	r0, r3
 8010c84:	f000 f8f6 	bl	8010e74 <USBD_Get_USB_Status>
 8010c88:	4603      	mov	r3, r0
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3710      	adds	r7, #16
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}

08010c92 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c92:	b580      	push	{r7, lr}
 8010c94:	b084      	sub	sp, #16
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	6078      	str	r0, [r7, #4]
 8010c9a:	460b      	mov	r3, r1
 8010c9c:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010ca4:	78fa      	ldrb	r2, [r7, #3]
 8010ca6:	4611      	mov	r1, r2
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f7f4 fa6f 	bl	800518c <HAL_PCD_EP_Close>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010cb2:	7bfb      	ldrb	r3, [r7, #15]
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f000 f8dd 	bl	8010e74 <USBD_Get_USB_Status>
 8010cba:	4603      	mov	r3, r0
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3710      	adds	r7, #16
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	460b      	mov	r3, r1
 8010cce:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010cd6:	78fa      	ldrb	r2, [r7, #3]
 8010cd8:	4611      	mov	r1, r2
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7f4 fb22 	bl	8005324 <HAL_PCD_EP_SetStall>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010ce4:	7bfb      	ldrb	r3, [r7, #15]
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f000 f8c4 	bl	8010e74 <USBD_Get_USB_Status>
 8010cec:	4603      	mov	r3, r0
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3710      	adds	r7, #16
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}

08010cf6 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 8010cf6:	b580      	push	{r7, lr}
 8010cf8:	b084      	sub	sp, #16
 8010cfa:	af00      	add	r7, sp, #0
 8010cfc:	6078      	str	r0, [r7, #4]
 8010cfe:	460b      	mov	r3, r1
 8010d00:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010d08:	78fa      	ldrb	r2, [r7, #3]
 8010d0a:	4611      	mov	r1, r2
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7f4 fb5d 	bl	80053cc <HAL_PCD_EP_ClrStall>
 8010d12:	4603      	mov	r3, r0
 8010d14:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010d16:	7bfb      	ldrb	r3, [r7, #15]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f000 f8ab 	bl	8010e74 <USBD_Get_USB_Status>
 8010d1e:	4603      	mov	r3, r0
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3710      	adds	r7, #16
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b085      	sub	sp, #20
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010d3a:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 8010d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	da0b      	bge.n	8010d5c <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010d44:	78fb      	ldrb	r3, [r7, #3]
 8010d46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010d4a:	68f9      	ldr	r1, [r7, #12]
 8010d4c:	4613      	mov	r3, r2
 8010d4e:	009b      	lsls	r3, r3, #2
 8010d50:	4413      	add	r3, r2
 8010d52:	00db      	lsls	r3, r3, #3
 8010d54:	440b      	add	r3, r1
 8010d56:	3316      	adds	r3, #22
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	e00b      	b.n	8010d74 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010d5c:	78fb      	ldrb	r3, [r7, #3]
 8010d5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010d62:	68f9      	ldr	r1, [r7, #12]
 8010d64:	4613      	mov	r3, r2
 8010d66:	009b      	lsls	r3, r3, #2
 8010d68:	4413      	add	r3, r2
 8010d6a:	00db      	lsls	r3, r3, #3
 8010d6c:	440b      	add	r3, r1
 8010d6e:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8010d72:	781b      	ldrb	r3, [r3, #0]
      }
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3714      	adds	r7, #20
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr

08010d80 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	460b      	mov	r3, r1
 8010d8a:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010d92:	78fa      	ldrb	r2, [r7, #3]
 8010d94:	4611      	mov	r1, r2
 8010d96:	4618      	mov	r0, r3
 8010d98:	f7f4 f973 	bl	8005082 <HAL_PCD_SetAddress>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010da0:	7bfb      	ldrb	r3, [r7, #15]
 8010da2:	4618      	mov	r0, r3
 8010da4:	f000 f866 	bl	8010e74 <USBD_Get_USB_Status>
 8010da8:	4603      	mov	r3, r0
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3710      	adds	r7, #16
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}

08010db2 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 8010db2:	b580      	push	{r7, lr}
 8010db4:	b086      	sub	sp, #24
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	60f8      	str	r0, [r7, #12]
 8010dba:	607a      	str	r2, [r7, #4]
 8010dbc:	603b      	str	r3, [r7, #0]
 8010dbe:	460b      	mov	r3, r1
 8010dc0:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010dc8:	7af9      	ldrb	r1, [r7, #11]
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	f7f4 fa71 	bl	80052b4 <HAL_PCD_EP_Transmit>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010dd6:	7dfb      	ldrb	r3, [r7, #23]
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f000 f84b 	bl	8010e74 <USBD_Get_USB_Status>
 8010dde:	4603      	mov	r3, r0
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3718      	adds	r7, #24
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b086      	sub	sp, #24
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	60f8      	str	r0, [r7, #12]
 8010df0:	607a      	str	r2, [r7, #4]
 8010df2:	603b      	str	r3, [r7, #0]
 8010df4:	460b      	mov	r3, r1
 8010df6:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010dfe:	7af9      	ldrb	r1, [r7, #11]
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	687a      	ldr	r2, [r7, #4]
 8010e04:	f7f4 fa0c 	bl	8005220 <HAL_PCD_EP_Receive>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010e0c:	7dfb      	ldrb	r3, [r7, #23]
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f000 f830 	bl	8010e74 <USBD_Get_USB_Status>
 8010e14:	4603      	mov	r3, r0
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3718      	adds	r7, #24
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}

08010e1e <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e1e:	b580      	push	{r7, lr}
 8010e20:	b082      	sub	sp, #8
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
 8010e26:	460b      	mov	r3, r1
 8010e28:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010e30:	78fa      	ldrb	r2, [r7, #3]
 8010e32:	4611      	mov	r1, r2
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7f4 fa25 	bl	8005284 <HAL_PCD_EP_GetRxCount>
 8010e3a:	4603      	mov	r3, r0
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3708      	adds	r7, #8
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}

08010e44 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 8010e4c:	4b03      	ldr	r3, [pc, #12]	@ (8010e5c <USBD_static_malloc+0x18>)
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop
 8010e5c:	20010ef0 	.word	0x20010ef0

08010e60 <USBD_static_free>:

void USBD_static_free(void *p)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b083      	sub	sp, #12
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 8010e68:	bf00      	nop
 8010e6a:	370c      	adds	r7, #12
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr

08010e74 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b085      	sub	sp, #20
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 8010e82:	79fb      	ldrb	r3, [r7, #7]
 8010e84:	2b03      	cmp	r3, #3
 8010e86:	d817      	bhi.n	8010eb8 <USBD_Get_USB_Status+0x44>
 8010e88:	a201      	add	r2, pc, #4	@ (adr r2, 8010e90 <USBD_Get_USB_Status+0x1c>)
 8010e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e8e:	bf00      	nop
 8010e90:	08010ea1 	.word	0x08010ea1
 8010e94:	08010ea7 	.word	0x08010ea7
 8010e98:	08010ead 	.word	0x08010ead
 8010e9c:	08010eb3 	.word	0x08010eb3
      {
      case HAL_OK :
             usb_status = USBD_OK;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	73fb      	strb	r3, [r7, #15]
             break;
 8010ea4:	e00b      	b.n	8010ebe <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 8010ea6:	2303      	movs	r3, #3
 8010ea8:	73fb      	strb	r3, [r7, #15]
             break;
 8010eaa:	e008      	b.n	8010ebe <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 8010eac:	2301      	movs	r3, #1
 8010eae:	73fb      	strb	r3, [r7, #15]
             break;
 8010eb0:	e005      	b.n	8010ebe <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 8010eb2:	2303      	movs	r3, #3
 8010eb4:	73fb      	strb	r3, [r7, #15]
             break;
 8010eb6:	e002      	b.n	8010ebe <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 8010eb8:	2303      	movs	r3, #3
 8010eba:	73fb      	strb	r3, [r7, #15]
             break;
 8010ebc:	bf00      	nop
      }
      return usb_status;
 8010ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3714      	adds	r7, #20
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr

08010ecc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b086      	sub	sp, #24
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	60f8      	str	r0, [r7, #12]
 8010ed4:	60b9      	str	r1, [r7, #8]
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d101      	bne.n	8010ee4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010ee0:	2303      	movs	r3, #3
 8010ee2:	e01f      	b.n	8010f24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d003      	beq.n	8010f0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	68ba      	ldr	r2, [r7, #8]
 8010f06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	79fa      	ldrb	r2, [r7, #7]
 8010f16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010f18:	68f8      	ldr	r0, [r7, #12]
 8010f1a:	f7ff fe4b 	bl	8010bb4 <USBD_LL_Init>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3718      	adds	r7, #24
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010f36:	2300      	movs	r3, #0
 8010f38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d101      	bne.n	8010f44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010f40:	2303      	movs	r3, #3
 8010f42:	e025      	b.n	8010f90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	683a      	ldr	r2, [r7, #0]
 8010f48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	32ae      	adds	r2, #174	@ 0xae
 8010f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d00f      	beq.n	8010f80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	32ae      	adds	r2, #174	@ 0xae
 8010f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f70:	f107 020e 	add.w	r2, r7, #14
 8010f74:	4610      	mov	r0, r2
 8010f76:	4798      	blx	r3
 8010f78:	4602      	mov	r2, r0
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010f86:	1c5a      	adds	r2, r3, #1
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010f8e:	2300      	movs	r3, #0
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3710      	adds	r7, #16
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}

08010f98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f7ff fe41 	bl	8010c28 <USBD_LL_Start>
 8010fa6:	4603      	mov	r3, r0
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3708      	adds	r7, #8
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b083      	sub	sp, #12
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010fb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	370c      	adds	r7, #12
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc4:	4770      	bx	lr

08010fc6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010fc6:	b580      	push	{r7, lr}
 8010fc8:	b084      	sub	sp, #16
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
 8010fce:	460b      	mov	r3, r1
 8010fd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d009      	beq.n	8010ff4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	78fa      	ldrb	r2, [r7, #3]
 8010fea:	4611      	mov	r1, r2
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	4798      	blx	r3
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3710      	adds	r7, #16
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}

08010ffe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ffe:	b580      	push	{r7, lr}
 8011000:	b084      	sub	sp, #16
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
 8011006:	460b      	mov	r3, r1
 8011008:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801100a:	2300      	movs	r3, #0
 801100c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	78fa      	ldrb	r2, [r7, #3]
 8011018:	4611      	mov	r1, r2
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	4798      	blx	r3
 801101e:	4603      	mov	r3, r0
 8011020:	2b00      	cmp	r3, #0
 8011022:	d001      	beq.n	8011028 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011024:	2303      	movs	r3, #3
 8011026:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011028:	7bfb      	ldrb	r3, [r7, #15]
}
 801102a:	4618      	mov	r0, r3
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}

08011032 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011032:	b580      	push	{r7, lr}
 8011034:	b084      	sub	sp, #16
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
 801103a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011042:	6839      	ldr	r1, [r7, #0]
 8011044:	4618      	mov	r0, r3
 8011046:	f001 f846 	bl	80120d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2201      	movs	r2, #1
 801104e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011058:	461a      	mov	r2, r3
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011066:	f003 031f 	and.w	r3, r3, #31
 801106a:	2b02      	cmp	r3, #2
 801106c:	d01a      	beq.n	80110a4 <USBD_LL_SetupStage+0x72>
 801106e:	2b02      	cmp	r3, #2
 8011070:	d822      	bhi.n	80110b8 <USBD_LL_SetupStage+0x86>
 8011072:	2b00      	cmp	r3, #0
 8011074:	d002      	beq.n	801107c <USBD_LL_SetupStage+0x4a>
 8011076:	2b01      	cmp	r3, #1
 8011078:	d00a      	beq.n	8011090 <USBD_LL_SetupStage+0x5e>
 801107a:	e01d      	b.n	80110b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011082:	4619      	mov	r1, r3
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f000 fa9d 	bl	80115c4 <USBD_StdDevReq>
 801108a:	4603      	mov	r3, r0
 801108c:	73fb      	strb	r3, [r7, #15]
      break;
 801108e:	e020      	b.n	80110d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011096:	4619      	mov	r1, r3
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f000 fb05 	bl	80116a8 <USBD_StdItfReq>
 801109e:	4603      	mov	r3, r0
 80110a0:	73fb      	strb	r3, [r7, #15]
      break;
 80110a2:	e016      	b.n	80110d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80110aa:	4619      	mov	r1, r3
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f000 fb67 	bl	8011780 <USBD_StdEPReq>
 80110b2:	4603      	mov	r3, r0
 80110b4:	73fb      	strb	r3, [r7, #15]
      break;
 80110b6:	e00c      	b.n	80110d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80110be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	4619      	mov	r1, r3
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f7ff fdfc 	bl	8010cc4 <USBD_LL_StallEP>
 80110cc:	4603      	mov	r3, r0
 80110ce:	73fb      	strb	r3, [r7, #15]
      break;
 80110d0:	bf00      	nop
  }

  return ret;
 80110d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3710      	adds	r7, #16
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b086      	sub	sp, #24
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	460b      	mov	r3, r1
 80110e6:	607a      	str	r2, [r7, #4]
 80110e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80110ea:	2300      	movs	r3, #0
 80110ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80110ee:	7afb      	ldrb	r3, [r7, #11]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d16e      	bne.n	80111d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80110fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011102:	2b03      	cmp	r3, #3
 8011104:	f040 8098 	bne.w	8011238 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	689a      	ldr	r2, [r3, #8]
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	429a      	cmp	r2, r3
 8011112:	d913      	bls.n	801113c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	689a      	ldr	r2, [r3, #8]
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	1ad2      	subs	r2, r2, r3
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	68da      	ldr	r2, [r3, #12]
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	689b      	ldr	r3, [r3, #8]
 801112a:	4293      	cmp	r3, r2
 801112c:	bf28      	it	cs
 801112e:	4613      	movcs	r3, r2
 8011130:	461a      	mov	r2, r3
 8011132:	6879      	ldr	r1, [r7, #4]
 8011134:	68f8      	ldr	r0, [r7, #12]
 8011136:	f001 f9cf 	bl	80124d8 <USBD_CtlContinueRx>
 801113a:	e07d      	b.n	8011238 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011142:	f003 031f 	and.w	r3, r3, #31
 8011146:	2b02      	cmp	r3, #2
 8011148:	d014      	beq.n	8011174 <USBD_LL_DataOutStage+0x98>
 801114a:	2b02      	cmp	r3, #2
 801114c:	d81d      	bhi.n	801118a <USBD_LL_DataOutStage+0xae>
 801114e:	2b00      	cmp	r3, #0
 8011150:	d002      	beq.n	8011158 <USBD_LL_DataOutStage+0x7c>
 8011152:	2b01      	cmp	r3, #1
 8011154:	d003      	beq.n	801115e <USBD_LL_DataOutStage+0x82>
 8011156:	e018      	b.n	801118a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011158:	2300      	movs	r3, #0
 801115a:	75bb      	strb	r3, [r7, #22]
            break;
 801115c:	e018      	b.n	8011190 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011164:	b2db      	uxtb	r3, r3
 8011166:	4619      	mov	r1, r3
 8011168:	68f8      	ldr	r0, [r7, #12]
 801116a:	f000 f99e 	bl	80114aa <USBD_CoreFindIF>
 801116e:	4603      	mov	r3, r0
 8011170:	75bb      	strb	r3, [r7, #22]
            break;
 8011172:	e00d      	b.n	8011190 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801117a:	b2db      	uxtb	r3, r3
 801117c:	4619      	mov	r1, r3
 801117e:	68f8      	ldr	r0, [r7, #12]
 8011180:	f000 f9a0 	bl	80114c4 <USBD_CoreFindEP>
 8011184:	4603      	mov	r3, r0
 8011186:	75bb      	strb	r3, [r7, #22]
            break;
 8011188:	e002      	b.n	8011190 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801118a:	2300      	movs	r3, #0
 801118c:	75bb      	strb	r3, [r7, #22]
            break;
 801118e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011190:	7dbb      	ldrb	r3, [r7, #22]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d119      	bne.n	80111ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801119c:	b2db      	uxtb	r3, r3
 801119e:	2b03      	cmp	r3, #3
 80111a0:	d113      	bne.n	80111ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80111a2:	7dba      	ldrb	r2, [r7, #22]
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	32ae      	adds	r2, #174	@ 0xae
 80111a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111ac:	691b      	ldr	r3, [r3, #16]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00b      	beq.n	80111ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80111b2:	7dba      	ldrb	r2, [r7, #22]
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80111ba:	7dba      	ldrb	r2, [r7, #22]
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	32ae      	adds	r2, #174	@ 0xae
 80111c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111c4:	691b      	ldr	r3, [r3, #16]
 80111c6:	68f8      	ldr	r0, [r7, #12]
 80111c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80111ca:	68f8      	ldr	r0, [r7, #12]
 80111cc:	f001 f995 	bl	80124fa <USBD_CtlSendStatus>
 80111d0:	e032      	b.n	8011238 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80111d2:	7afb      	ldrb	r3, [r7, #11]
 80111d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111d8:	b2db      	uxtb	r3, r3
 80111da:	4619      	mov	r1, r3
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f000 f971 	bl	80114c4 <USBD_CoreFindEP>
 80111e2:	4603      	mov	r3, r0
 80111e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80111e6:	7dbb      	ldrb	r3, [r7, #22]
 80111e8:	2bff      	cmp	r3, #255	@ 0xff
 80111ea:	d025      	beq.n	8011238 <USBD_LL_DataOutStage+0x15c>
 80111ec:	7dbb      	ldrb	r3, [r7, #22]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d122      	bne.n	8011238 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111f8:	b2db      	uxtb	r3, r3
 80111fa:	2b03      	cmp	r3, #3
 80111fc:	d117      	bne.n	801122e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80111fe:	7dba      	ldrb	r2, [r7, #22]
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	32ae      	adds	r2, #174	@ 0xae
 8011204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011208:	699b      	ldr	r3, [r3, #24]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00f      	beq.n	801122e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801120e:	7dba      	ldrb	r2, [r7, #22]
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011216:	7dba      	ldrb	r2, [r7, #22]
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	32ae      	adds	r2, #174	@ 0xae
 801121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011220:	699b      	ldr	r3, [r3, #24]
 8011222:	7afa      	ldrb	r2, [r7, #11]
 8011224:	4611      	mov	r1, r2
 8011226:	68f8      	ldr	r0, [r7, #12]
 8011228:	4798      	blx	r3
 801122a:	4603      	mov	r3, r0
 801122c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801122e:	7dfb      	ldrb	r3, [r7, #23]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d001      	beq.n	8011238 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011234:	7dfb      	ldrb	r3, [r7, #23]
 8011236:	e000      	b.n	801123a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011238:	2300      	movs	r3, #0
}
 801123a:	4618      	mov	r0, r3
 801123c:	3718      	adds	r7, #24
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011242:	b580      	push	{r7, lr}
 8011244:	b086      	sub	sp, #24
 8011246:	af00      	add	r7, sp, #0
 8011248:	60f8      	str	r0, [r7, #12]
 801124a:	460b      	mov	r3, r1
 801124c:	607a      	str	r2, [r7, #4]
 801124e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011250:	7afb      	ldrb	r3, [r7, #11]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d16f      	bne.n	8011336 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	3314      	adds	r3, #20
 801125a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011262:	2b02      	cmp	r3, #2
 8011264:	d15a      	bne.n	801131c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011266:	693b      	ldr	r3, [r7, #16]
 8011268:	689a      	ldr	r2, [r3, #8]
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	68db      	ldr	r3, [r3, #12]
 801126e:	429a      	cmp	r2, r3
 8011270:	d914      	bls.n	801129c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	689a      	ldr	r2, [r3, #8]
 8011276:	693b      	ldr	r3, [r7, #16]
 8011278:	68db      	ldr	r3, [r3, #12]
 801127a:	1ad2      	subs	r2, r2, r3
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	689b      	ldr	r3, [r3, #8]
 8011284:	461a      	mov	r2, r3
 8011286:	6879      	ldr	r1, [r7, #4]
 8011288:	68f8      	ldr	r0, [r7, #12]
 801128a:	f001 f8f7 	bl	801247c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801128e:	2300      	movs	r3, #0
 8011290:	2200      	movs	r2, #0
 8011292:	2100      	movs	r1, #0
 8011294:	68f8      	ldr	r0, [r7, #12]
 8011296:	f7ff fda7 	bl	8010de8 <USBD_LL_PrepareReceive>
 801129a:	e03f      	b.n	801131c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	68da      	ldr	r2, [r3, #12]
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	689b      	ldr	r3, [r3, #8]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d11c      	bne.n	80112e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80112a8:	693b      	ldr	r3, [r7, #16]
 80112aa:	685a      	ldr	r2, [r3, #4]
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80112b0:	429a      	cmp	r2, r3
 80112b2:	d316      	bcc.n	80112e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	685a      	ldr	r2, [r3, #4]
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80112be:	429a      	cmp	r2, r3
 80112c0:	d20f      	bcs.n	80112e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80112c2:	2200      	movs	r2, #0
 80112c4:	2100      	movs	r1, #0
 80112c6:	68f8      	ldr	r0, [r7, #12]
 80112c8:	f001 f8d8 	bl	801247c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2200      	movs	r2, #0
 80112d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80112d4:	2300      	movs	r3, #0
 80112d6:	2200      	movs	r2, #0
 80112d8:	2100      	movs	r1, #0
 80112da:	68f8      	ldr	r0, [r7, #12]
 80112dc:	f7ff fd84 	bl	8010de8 <USBD_LL_PrepareReceive>
 80112e0:	e01c      	b.n	801131c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	2b03      	cmp	r3, #3
 80112ec:	d10f      	bne.n	801130e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112f4:	68db      	ldr	r3, [r3, #12]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d009      	beq.n	801130e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2200      	movs	r2, #0
 80112fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011308:	68db      	ldr	r3, [r3, #12]
 801130a:	68f8      	ldr	r0, [r7, #12]
 801130c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801130e:	2180      	movs	r1, #128	@ 0x80
 8011310:	68f8      	ldr	r0, [r7, #12]
 8011312:	f7ff fcd7 	bl	8010cc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011316:	68f8      	ldr	r0, [r7, #12]
 8011318:	f001 f902 	bl	8012520 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011322:	2b00      	cmp	r3, #0
 8011324:	d03a      	beq.n	801139c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011326:	68f8      	ldr	r0, [r7, #12]
 8011328:	f7ff fe42 	bl	8010fb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	2200      	movs	r2, #0
 8011330:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011334:	e032      	b.n	801139c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011336:	7afb      	ldrb	r3, [r7, #11]
 8011338:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801133c:	b2db      	uxtb	r3, r3
 801133e:	4619      	mov	r1, r3
 8011340:	68f8      	ldr	r0, [r7, #12]
 8011342:	f000 f8bf 	bl	80114c4 <USBD_CoreFindEP>
 8011346:	4603      	mov	r3, r0
 8011348:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801134a:	7dfb      	ldrb	r3, [r7, #23]
 801134c:	2bff      	cmp	r3, #255	@ 0xff
 801134e:	d025      	beq.n	801139c <USBD_LL_DataInStage+0x15a>
 8011350:	7dfb      	ldrb	r3, [r7, #23]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d122      	bne.n	801139c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801135c:	b2db      	uxtb	r3, r3
 801135e:	2b03      	cmp	r3, #3
 8011360:	d11c      	bne.n	801139c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011362:	7dfa      	ldrb	r2, [r7, #23]
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	32ae      	adds	r2, #174	@ 0xae
 8011368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801136c:	695b      	ldr	r3, [r3, #20]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d014      	beq.n	801139c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011372:	7dfa      	ldrb	r2, [r7, #23]
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801137a:	7dfa      	ldrb	r2, [r7, #23]
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	32ae      	adds	r2, #174	@ 0xae
 8011380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011384:	695b      	ldr	r3, [r3, #20]
 8011386:	7afa      	ldrb	r2, [r7, #11]
 8011388:	4611      	mov	r1, r2
 801138a:	68f8      	ldr	r0, [r7, #12]
 801138c:	4798      	blx	r3
 801138e:	4603      	mov	r3, r0
 8011390:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011392:	7dbb      	ldrb	r3, [r7, #22]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d001      	beq.n	801139c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011398:	7dbb      	ldrb	r3, [r7, #22]
 801139a:	e000      	b.n	801139e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801139c:	2300      	movs	r3, #0
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3718      	adds	r7, #24
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}

080113a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80113a6:	b580      	push	{r7, lr}
 80113a8:	b084      	sub	sp, #16
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80113ae:	2300      	movs	r3, #0
 80113b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2201      	movs	r2, #1
 80113b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2200      	movs	r2, #0
 80113be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2200      	movs	r2, #0
 80113c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2200      	movs	r2, #0
 80113cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2200      	movs	r2, #0
 80113d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d014      	beq.n	801140c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d00e      	beq.n	801140c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	687a      	ldr	r2, [r7, #4]
 80113f8:	6852      	ldr	r2, [r2, #4]
 80113fa:	b2d2      	uxtb	r2, r2
 80113fc:	4611      	mov	r1, r2
 80113fe:	6878      	ldr	r0, [r7, #4]
 8011400:	4798      	blx	r3
 8011402:	4603      	mov	r3, r0
 8011404:	2b00      	cmp	r3, #0
 8011406:	d001      	beq.n	801140c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011408:	2303      	movs	r3, #3
 801140a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801140c:	2340      	movs	r3, #64	@ 0x40
 801140e:	2200      	movs	r2, #0
 8011410:	2100      	movs	r1, #0
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f7ff fc1d 	bl	8010c52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2201      	movs	r2, #1
 801141c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2240      	movs	r2, #64	@ 0x40
 8011424:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011428:	2340      	movs	r3, #64	@ 0x40
 801142a:	2200      	movs	r2, #0
 801142c:	2180      	movs	r1, #128	@ 0x80
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f7ff fc0f 	bl	8010c52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2201      	movs	r2, #1
 8011438:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2240      	movs	r2, #64	@ 0x40
 801143e:	621a      	str	r2, [r3, #32]

  return ret;
 8011440:	7bfb      	ldrb	r3, [r7, #15]
}
 8011442:	4618      	mov	r0, r3
 8011444:	3710      	adds	r7, #16
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}

0801144a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801144a:	b480      	push	{r7}
 801144c:	b083      	sub	sp, #12
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
 8011452:	460b      	mov	r3, r1
 8011454:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	78fa      	ldrb	r2, [r7, #3]
 801145a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801145c:	2300      	movs	r3, #0
}
 801145e:	4618      	mov	r0, r3
 8011460:	370c      	adds	r7, #12
 8011462:	46bd      	mov	sp, r7
 8011464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011468:	4770      	bx	lr

0801146a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801146a:	b580      	push	{r7, lr}
 801146c:	b082      	sub	sp, #8
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011478:	b2db      	uxtb	r3, r3
 801147a:	2b03      	cmp	r3, #3
 801147c:	d110      	bne.n	80114a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011484:	2b00      	cmp	r3, #0
 8011486:	d00b      	beq.n	80114a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801148e:	69db      	ldr	r3, [r3, #28]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d005      	beq.n	80114a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801149a:	69db      	ldr	r3, [r3, #28]
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80114a0:	2300      	movs	r3, #0
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3708      	adds	r7, #8
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}

080114aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80114aa:	b480      	push	{r7}
 80114ac:	b083      	sub	sp, #12
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	6078      	str	r0, [r7, #4]
 80114b2:	460b      	mov	r3, r1
 80114b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80114b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	370c      	adds	r7, #12
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr

080114c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80114c4:	b480      	push	{r7}
 80114c6:	b083      	sub	sp, #12
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	460b      	mov	r3, r1
 80114ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80114d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	370c      	adds	r7, #12
 80114d6:	46bd      	mov	sp, r7
 80114d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114dc:	4770      	bx	lr

080114de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80114de:	b580      	push	{r7, lr}
 80114e0:	b086      	sub	sp, #24
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	6078      	str	r0, [r7, #4]
 80114e6:	460b      	mov	r3, r1
 80114e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80114f2:	2300      	movs	r3, #0
 80114f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	885b      	ldrh	r3, [r3, #2]
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	68fa      	ldr	r2, [r7, #12]
 80114fe:	7812      	ldrb	r2, [r2, #0]
 8011500:	4293      	cmp	r3, r2
 8011502:	d91f      	bls.n	8011544 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801150a:	e013      	b.n	8011534 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801150c:	f107 030a 	add.w	r3, r7, #10
 8011510:	4619      	mov	r1, r3
 8011512:	6978      	ldr	r0, [r7, #20]
 8011514:	f000 f81b 	bl	801154e <USBD_GetNextDesc>
 8011518:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	785b      	ldrb	r3, [r3, #1]
 801151e:	2b05      	cmp	r3, #5
 8011520:	d108      	bne.n	8011534 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	789b      	ldrb	r3, [r3, #2]
 801152a:	78fa      	ldrb	r2, [r7, #3]
 801152c:	429a      	cmp	r2, r3
 801152e:	d008      	beq.n	8011542 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011530:	2300      	movs	r3, #0
 8011532:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	885b      	ldrh	r3, [r3, #2]
 8011538:	b29a      	uxth	r2, r3
 801153a:	897b      	ldrh	r3, [r7, #10]
 801153c:	429a      	cmp	r2, r3
 801153e:	d8e5      	bhi.n	801150c <USBD_GetEpDesc+0x2e>
 8011540:	e000      	b.n	8011544 <USBD_GetEpDesc+0x66>
          break;
 8011542:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011544:	693b      	ldr	r3, [r7, #16]
}
 8011546:	4618      	mov	r0, r3
 8011548:	3718      	adds	r7, #24
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}

0801154e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801154e:	b480      	push	{r7}
 8011550:	b085      	sub	sp, #20
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	881b      	ldrh	r3, [r3, #0]
 8011560:	68fa      	ldr	r2, [r7, #12]
 8011562:	7812      	ldrb	r2, [r2, #0]
 8011564:	4413      	add	r3, r2
 8011566:	b29a      	uxth	r2, r3
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	461a      	mov	r2, r3
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	4413      	add	r3, r2
 8011576:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011578:	68fb      	ldr	r3, [r7, #12]
}
 801157a:	4618      	mov	r0, r3
 801157c:	3714      	adds	r7, #20
 801157e:	46bd      	mov	sp, r7
 8011580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011584:	4770      	bx	lr

08011586 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011586:	b480      	push	{r7}
 8011588:	b087      	sub	sp, #28
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	781b      	ldrb	r3, [r3, #0]
 8011596:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	3301      	adds	r3, #1
 801159c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80115a4:	8a3b      	ldrh	r3, [r7, #16]
 80115a6:	021b      	lsls	r3, r3, #8
 80115a8:	b21a      	sxth	r2, r3
 80115aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80115ae:	4313      	orrs	r3, r2
 80115b0:	b21b      	sxth	r3, r3
 80115b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80115b4:	89fb      	ldrh	r3, [r7, #14]
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	371c      	adds	r7, #28
 80115ba:	46bd      	mov	sp, r7
 80115bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c0:	4770      	bx	lr
	...

080115c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b084      	sub	sp, #16
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80115ce:	2300      	movs	r3, #0
 80115d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80115da:	2b40      	cmp	r3, #64	@ 0x40
 80115dc:	d005      	beq.n	80115ea <USBD_StdDevReq+0x26>
 80115de:	2b40      	cmp	r3, #64	@ 0x40
 80115e0:	d857      	bhi.n	8011692 <USBD_StdDevReq+0xce>
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d00f      	beq.n	8011606 <USBD_StdDevReq+0x42>
 80115e6:	2b20      	cmp	r3, #32
 80115e8:	d153      	bne.n	8011692 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	32ae      	adds	r2, #174	@ 0xae
 80115f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115f8:	689b      	ldr	r3, [r3, #8]
 80115fa:	6839      	ldr	r1, [r7, #0]
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	4798      	blx	r3
 8011600:	4603      	mov	r3, r0
 8011602:	73fb      	strb	r3, [r7, #15]
      break;
 8011604:	e04a      	b.n	801169c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	785b      	ldrb	r3, [r3, #1]
 801160a:	2b09      	cmp	r3, #9
 801160c:	d83b      	bhi.n	8011686 <USBD_StdDevReq+0xc2>
 801160e:	a201      	add	r2, pc, #4	@ (adr r2, 8011614 <USBD_StdDevReq+0x50>)
 8011610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011614:	08011669 	.word	0x08011669
 8011618:	0801167d 	.word	0x0801167d
 801161c:	08011687 	.word	0x08011687
 8011620:	08011673 	.word	0x08011673
 8011624:	08011687 	.word	0x08011687
 8011628:	08011647 	.word	0x08011647
 801162c:	0801163d 	.word	0x0801163d
 8011630:	08011687 	.word	0x08011687
 8011634:	0801165f 	.word	0x0801165f
 8011638:	08011651 	.word	0x08011651
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801163c:	6839      	ldr	r1, [r7, #0]
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f000 fa3c 	bl	8011abc <USBD_GetDescriptor>
          break;
 8011644:	e024      	b.n	8011690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011646:	6839      	ldr	r1, [r7, #0]
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f000 fba1 	bl	8011d90 <USBD_SetAddress>
          break;
 801164e:	e01f      	b.n	8011690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011650:	6839      	ldr	r1, [r7, #0]
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f000 fbe0 	bl	8011e18 <USBD_SetConfig>
 8011658:	4603      	mov	r3, r0
 801165a:	73fb      	strb	r3, [r7, #15]
          break;
 801165c:	e018      	b.n	8011690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801165e:	6839      	ldr	r1, [r7, #0]
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f000 fc83 	bl	8011f6c <USBD_GetConfig>
          break;
 8011666:	e013      	b.n	8011690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011668:	6839      	ldr	r1, [r7, #0]
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f000 fcb4 	bl	8011fd8 <USBD_GetStatus>
          break;
 8011670:	e00e      	b.n	8011690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011672:	6839      	ldr	r1, [r7, #0]
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f000 fce3 	bl	8012040 <USBD_SetFeature>
          break;
 801167a:	e009      	b.n	8011690 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801167c:	6839      	ldr	r1, [r7, #0]
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f000 fd07 	bl	8012092 <USBD_ClrFeature>
          break;
 8011684:	e004      	b.n	8011690 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011686:	6839      	ldr	r1, [r7, #0]
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f000 fd5e 	bl	801214a <USBD_CtlError>
          break;
 801168e:	bf00      	nop
      }
      break;
 8011690:	e004      	b.n	801169c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011692:	6839      	ldr	r1, [r7, #0]
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f000 fd58 	bl	801214a <USBD_CtlError>
      break;
 801169a:	bf00      	nop
  }

  return ret;
 801169c:	7bfb      	ldrb	r3, [r7, #15]
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3710      	adds	r7, #16
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
 80116a6:	bf00      	nop

080116a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b084      	sub	sp, #16
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80116b2:	2300      	movs	r3, #0
 80116b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	781b      	ldrb	r3, [r3, #0]
 80116ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80116be:	2b40      	cmp	r3, #64	@ 0x40
 80116c0:	d005      	beq.n	80116ce <USBD_StdItfReq+0x26>
 80116c2:	2b40      	cmp	r3, #64	@ 0x40
 80116c4:	d852      	bhi.n	801176c <USBD_StdItfReq+0xc4>
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d001      	beq.n	80116ce <USBD_StdItfReq+0x26>
 80116ca:	2b20      	cmp	r3, #32
 80116cc:	d14e      	bne.n	801176c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	3b01      	subs	r3, #1
 80116d8:	2b02      	cmp	r3, #2
 80116da:	d840      	bhi.n	801175e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	889b      	ldrh	r3, [r3, #4]
 80116e0:	b2db      	uxtb	r3, r3
 80116e2:	2b01      	cmp	r3, #1
 80116e4:	d836      	bhi.n	8011754 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	889b      	ldrh	r3, [r3, #4]
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	4619      	mov	r1, r3
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f7ff fedb 	bl	80114aa <USBD_CoreFindIF>
 80116f4:	4603      	mov	r3, r0
 80116f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80116f8:	7bbb      	ldrb	r3, [r7, #14]
 80116fa:	2bff      	cmp	r3, #255	@ 0xff
 80116fc:	d01d      	beq.n	801173a <USBD_StdItfReq+0x92>
 80116fe:	7bbb      	ldrb	r3, [r7, #14]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d11a      	bne.n	801173a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011704:	7bba      	ldrb	r2, [r7, #14]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	32ae      	adds	r2, #174	@ 0xae
 801170a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801170e:	689b      	ldr	r3, [r3, #8]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d00f      	beq.n	8011734 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011714:	7bba      	ldrb	r2, [r7, #14]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801171c:	7bba      	ldrb	r2, [r7, #14]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	32ae      	adds	r2, #174	@ 0xae
 8011722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011726:	689b      	ldr	r3, [r3, #8]
 8011728:	6839      	ldr	r1, [r7, #0]
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	4798      	blx	r3
 801172e:	4603      	mov	r3, r0
 8011730:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011732:	e004      	b.n	801173e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011734:	2303      	movs	r3, #3
 8011736:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011738:	e001      	b.n	801173e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801173a:	2303      	movs	r3, #3
 801173c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	88db      	ldrh	r3, [r3, #6]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d110      	bne.n	8011768 <USBD_StdItfReq+0xc0>
 8011746:	7bfb      	ldrb	r3, [r7, #15]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d10d      	bne.n	8011768 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f000 fed4 	bl	80124fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011752:	e009      	b.n	8011768 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011754:	6839      	ldr	r1, [r7, #0]
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f000 fcf7 	bl	801214a <USBD_CtlError>
          break;
 801175c:	e004      	b.n	8011768 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801175e:	6839      	ldr	r1, [r7, #0]
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f000 fcf2 	bl	801214a <USBD_CtlError>
          break;
 8011766:	e000      	b.n	801176a <USBD_StdItfReq+0xc2>
          break;
 8011768:	bf00      	nop
      }
      break;
 801176a:	e004      	b.n	8011776 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801176c:	6839      	ldr	r1, [r7, #0]
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f000 fceb 	bl	801214a <USBD_CtlError>
      break;
 8011774:	bf00      	nop
  }

  return ret;
 8011776:	7bfb      	ldrb	r3, [r7, #15]
}
 8011778:	4618      	mov	r0, r3
 801177a:	3710      	adds	r7, #16
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801178a:	2300      	movs	r3, #0
 801178c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	889b      	ldrh	r3, [r3, #4]
 8011792:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	781b      	ldrb	r3, [r3, #0]
 8011798:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801179c:	2b40      	cmp	r3, #64	@ 0x40
 801179e:	d007      	beq.n	80117b0 <USBD_StdEPReq+0x30>
 80117a0:	2b40      	cmp	r3, #64	@ 0x40
 80117a2:	f200 817f 	bhi.w	8011aa4 <USBD_StdEPReq+0x324>
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d02a      	beq.n	8011800 <USBD_StdEPReq+0x80>
 80117aa:	2b20      	cmp	r3, #32
 80117ac:	f040 817a 	bne.w	8011aa4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80117b0:	7bbb      	ldrb	r3, [r7, #14]
 80117b2:	4619      	mov	r1, r3
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f7ff fe85 	bl	80114c4 <USBD_CoreFindEP>
 80117ba:	4603      	mov	r3, r0
 80117bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80117be:	7b7b      	ldrb	r3, [r7, #13]
 80117c0:	2bff      	cmp	r3, #255	@ 0xff
 80117c2:	f000 8174 	beq.w	8011aae <USBD_StdEPReq+0x32e>
 80117c6:	7b7b      	ldrb	r3, [r7, #13]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	f040 8170 	bne.w	8011aae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80117ce:	7b7a      	ldrb	r2, [r7, #13]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80117d6:	7b7a      	ldrb	r2, [r7, #13]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	32ae      	adds	r2, #174	@ 0xae
 80117dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	f000 8163 	beq.w	8011aae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80117e8:	7b7a      	ldrb	r2, [r7, #13]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	32ae      	adds	r2, #174	@ 0xae
 80117ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117f2:	689b      	ldr	r3, [r3, #8]
 80117f4:	6839      	ldr	r1, [r7, #0]
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	4798      	blx	r3
 80117fa:	4603      	mov	r3, r0
 80117fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80117fe:	e156      	b.n	8011aae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	785b      	ldrb	r3, [r3, #1]
 8011804:	2b03      	cmp	r3, #3
 8011806:	d008      	beq.n	801181a <USBD_StdEPReq+0x9a>
 8011808:	2b03      	cmp	r3, #3
 801180a:	f300 8145 	bgt.w	8011a98 <USBD_StdEPReq+0x318>
 801180e:	2b00      	cmp	r3, #0
 8011810:	f000 809b 	beq.w	801194a <USBD_StdEPReq+0x1ca>
 8011814:	2b01      	cmp	r3, #1
 8011816:	d03c      	beq.n	8011892 <USBD_StdEPReq+0x112>
 8011818:	e13e      	b.n	8011a98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011820:	b2db      	uxtb	r3, r3
 8011822:	2b02      	cmp	r3, #2
 8011824:	d002      	beq.n	801182c <USBD_StdEPReq+0xac>
 8011826:	2b03      	cmp	r3, #3
 8011828:	d016      	beq.n	8011858 <USBD_StdEPReq+0xd8>
 801182a:	e02c      	b.n	8011886 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801182c:	7bbb      	ldrb	r3, [r7, #14]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00d      	beq.n	801184e <USBD_StdEPReq+0xce>
 8011832:	7bbb      	ldrb	r3, [r7, #14]
 8011834:	2b80      	cmp	r3, #128	@ 0x80
 8011836:	d00a      	beq.n	801184e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011838:	7bbb      	ldrb	r3, [r7, #14]
 801183a:	4619      	mov	r1, r3
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f7ff fa41 	bl	8010cc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011842:	2180      	movs	r1, #128	@ 0x80
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f7ff fa3d 	bl	8010cc4 <USBD_LL_StallEP>
 801184a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801184c:	e020      	b.n	8011890 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801184e:	6839      	ldr	r1, [r7, #0]
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f000 fc7a 	bl	801214a <USBD_CtlError>
              break;
 8011856:	e01b      	b.n	8011890 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	885b      	ldrh	r3, [r3, #2]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d10e      	bne.n	801187e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011860:	7bbb      	ldrb	r3, [r7, #14]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d00b      	beq.n	801187e <USBD_StdEPReq+0xfe>
 8011866:	7bbb      	ldrb	r3, [r7, #14]
 8011868:	2b80      	cmp	r3, #128	@ 0x80
 801186a:	d008      	beq.n	801187e <USBD_StdEPReq+0xfe>
 801186c:	683b      	ldr	r3, [r7, #0]
 801186e:	88db      	ldrh	r3, [r3, #6]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d104      	bne.n	801187e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011874:	7bbb      	ldrb	r3, [r7, #14]
 8011876:	4619      	mov	r1, r3
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f7ff fa23 	bl	8010cc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f000 fe3b 	bl	80124fa <USBD_CtlSendStatus>

              break;
 8011884:	e004      	b.n	8011890 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011886:	6839      	ldr	r1, [r7, #0]
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f000 fc5e 	bl	801214a <USBD_CtlError>
              break;
 801188e:	bf00      	nop
          }
          break;
 8011890:	e107      	b.n	8011aa2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011898:	b2db      	uxtb	r3, r3
 801189a:	2b02      	cmp	r3, #2
 801189c:	d002      	beq.n	80118a4 <USBD_StdEPReq+0x124>
 801189e:	2b03      	cmp	r3, #3
 80118a0:	d016      	beq.n	80118d0 <USBD_StdEPReq+0x150>
 80118a2:	e04b      	b.n	801193c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80118a4:	7bbb      	ldrb	r3, [r7, #14]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d00d      	beq.n	80118c6 <USBD_StdEPReq+0x146>
 80118aa:	7bbb      	ldrb	r3, [r7, #14]
 80118ac:	2b80      	cmp	r3, #128	@ 0x80
 80118ae:	d00a      	beq.n	80118c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80118b0:	7bbb      	ldrb	r3, [r7, #14]
 80118b2:	4619      	mov	r1, r3
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f7ff fa05 	bl	8010cc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80118ba:	2180      	movs	r1, #128	@ 0x80
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f7ff fa01 	bl	8010cc4 <USBD_LL_StallEP>
 80118c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80118c4:	e040      	b.n	8011948 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80118c6:	6839      	ldr	r1, [r7, #0]
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f000 fc3e 	bl	801214a <USBD_CtlError>
              break;
 80118ce:	e03b      	b.n	8011948 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	885b      	ldrh	r3, [r3, #2]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d136      	bne.n	8011946 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80118d8:	7bbb      	ldrb	r3, [r7, #14]
 80118da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d004      	beq.n	80118ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80118e2:	7bbb      	ldrb	r3, [r7, #14]
 80118e4:	4619      	mov	r1, r3
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f7ff fa05 	bl	8010cf6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f000 fe04 	bl	80124fa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80118f2:	7bbb      	ldrb	r3, [r7, #14]
 80118f4:	4619      	mov	r1, r3
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f7ff fde4 	bl	80114c4 <USBD_CoreFindEP>
 80118fc:	4603      	mov	r3, r0
 80118fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011900:	7b7b      	ldrb	r3, [r7, #13]
 8011902:	2bff      	cmp	r3, #255	@ 0xff
 8011904:	d01f      	beq.n	8011946 <USBD_StdEPReq+0x1c6>
 8011906:	7b7b      	ldrb	r3, [r7, #13]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d11c      	bne.n	8011946 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801190c:	7b7a      	ldrb	r2, [r7, #13]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011914:	7b7a      	ldrb	r2, [r7, #13]
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	32ae      	adds	r2, #174	@ 0xae
 801191a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801191e:	689b      	ldr	r3, [r3, #8]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d010      	beq.n	8011946 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011924:	7b7a      	ldrb	r2, [r7, #13]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	32ae      	adds	r2, #174	@ 0xae
 801192a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801192e:	689b      	ldr	r3, [r3, #8]
 8011930:	6839      	ldr	r1, [r7, #0]
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	4798      	blx	r3
 8011936:	4603      	mov	r3, r0
 8011938:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801193a:	e004      	b.n	8011946 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801193c:	6839      	ldr	r1, [r7, #0]
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 fc03 	bl	801214a <USBD_CtlError>
              break;
 8011944:	e000      	b.n	8011948 <USBD_StdEPReq+0x1c8>
              break;
 8011946:	bf00      	nop
          }
          break;
 8011948:	e0ab      	b.n	8011aa2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011950:	b2db      	uxtb	r3, r3
 8011952:	2b02      	cmp	r3, #2
 8011954:	d002      	beq.n	801195c <USBD_StdEPReq+0x1dc>
 8011956:	2b03      	cmp	r3, #3
 8011958:	d032      	beq.n	80119c0 <USBD_StdEPReq+0x240>
 801195a:	e097      	b.n	8011a8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801195c:	7bbb      	ldrb	r3, [r7, #14]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d007      	beq.n	8011972 <USBD_StdEPReq+0x1f2>
 8011962:	7bbb      	ldrb	r3, [r7, #14]
 8011964:	2b80      	cmp	r3, #128	@ 0x80
 8011966:	d004      	beq.n	8011972 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011968:	6839      	ldr	r1, [r7, #0]
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 fbed 	bl	801214a <USBD_CtlError>
                break;
 8011970:	e091      	b.n	8011a96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011976:	2b00      	cmp	r3, #0
 8011978:	da0b      	bge.n	8011992 <USBD_StdEPReq+0x212>
 801197a:	7bbb      	ldrb	r3, [r7, #14]
 801197c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011980:	4613      	mov	r3, r2
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	4413      	add	r3, r2
 8011986:	009b      	lsls	r3, r3, #2
 8011988:	3310      	adds	r3, #16
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	4413      	add	r3, r2
 801198e:	3304      	adds	r3, #4
 8011990:	e00b      	b.n	80119aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011992:	7bbb      	ldrb	r3, [r7, #14]
 8011994:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011998:	4613      	mov	r3, r2
 801199a:	009b      	lsls	r3, r3, #2
 801199c:	4413      	add	r3, r2
 801199e:	009b      	lsls	r3, r3, #2
 80119a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	4413      	add	r3, r2
 80119a8:	3304      	adds	r3, #4
 80119aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	2200      	movs	r2, #0
 80119b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	2202      	movs	r2, #2
 80119b6:	4619      	mov	r1, r3
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f000 fd44 	bl	8012446 <USBD_CtlSendData>
              break;
 80119be:	e06a      	b.n	8011a96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80119c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	da11      	bge.n	80119ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80119c8:	7bbb      	ldrb	r3, [r7, #14]
 80119ca:	f003 020f 	and.w	r2, r3, #15
 80119ce:	6879      	ldr	r1, [r7, #4]
 80119d0:	4613      	mov	r3, r2
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	4413      	add	r3, r2
 80119d6:	009b      	lsls	r3, r3, #2
 80119d8:	440b      	add	r3, r1
 80119da:	3324      	adds	r3, #36	@ 0x24
 80119dc:	881b      	ldrh	r3, [r3, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d117      	bne.n	8011a12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80119e2:	6839      	ldr	r1, [r7, #0]
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f000 fbb0 	bl	801214a <USBD_CtlError>
                  break;
 80119ea:	e054      	b.n	8011a96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80119ec:	7bbb      	ldrb	r3, [r7, #14]
 80119ee:	f003 020f 	and.w	r2, r3, #15
 80119f2:	6879      	ldr	r1, [r7, #4]
 80119f4:	4613      	mov	r3, r2
 80119f6:	009b      	lsls	r3, r3, #2
 80119f8:	4413      	add	r3, r2
 80119fa:	009b      	lsls	r3, r3, #2
 80119fc:	440b      	add	r3, r1
 80119fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011a02:	881b      	ldrh	r3, [r3, #0]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d104      	bne.n	8011a12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011a08:	6839      	ldr	r1, [r7, #0]
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f000 fb9d 	bl	801214a <USBD_CtlError>
                  break;
 8011a10:	e041      	b.n	8011a96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	da0b      	bge.n	8011a32 <USBD_StdEPReq+0x2b2>
 8011a1a:	7bbb      	ldrb	r3, [r7, #14]
 8011a1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011a20:	4613      	mov	r3, r2
 8011a22:	009b      	lsls	r3, r3, #2
 8011a24:	4413      	add	r3, r2
 8011a26:	009b      	lsls	r3, r3, #2
 8011a28:	3310      	adds	r3, #16
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	4413      	add	r3, r2
 8011a2e:	3304      	adds	r3, #4
 8011a30:	e00b      	b.n	8011a4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011a32:	7bbb      	ldrb	r3, [r7, #14]
 8011a34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a38:	4613      	mov	r3, r2
 8011a3a:	009b      	lsls	r3, r3, #2
 8011a3c:	4413      	add	r3, r2
 8011a3e:	009b      	lsls	r3, r3, #2
 8011a40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	4413      	add	r3, r2
 8011a48:	3304      	adds	r3, #4
 8011a4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011a4c:	7bbb      	ldrb	r3, [r7, #14]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d002      	beq.n	8011a58 <USBD_StdEPReq+0x2d8>
 8011a52:	7bbb      	ldrb	r3, [r7, #14]
 8011a54:	2b80      	cmp	r3, #128	@ 0x80
 8011a56:	d103      	bne.n	8011a60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	601a      	str	r2, [r3, #0]
 8011a5e:	e00e      	b.n	8011a7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011a60:	7bbb      	ldrb	r3, [r7, #14]
 8011a62:	4619      	mov	r1, r3
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f7ff f95f 	bl	8010d28 <USBD_LL_IsStallEP>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d003      	beq.n	8011a78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011a70:	68bb      	ldr	r3, [r7, #8]
 8011a72:	2201      	movs	r2, #1
 8011a74:	601a      	str	r2, [r3, #0]
 8011a76:	e002      	b.n	8011a7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	2202      	movs	r2, #2
 8011a82:	4619      	mov	r1, r3
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f000 fcde 	bl	8012446 <USBD_CtlSendData>
              break;
 8011a8a:	e004      	b.n	8011a96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011a8c:	6839      	ldr	r1, [r7, #0]
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f000 fb5b 	bl	801214a <USBD_CtlError>
              break;
 8011a94:	bf00      	nop
          }
          break;
 8011a96:	e004      	b.n	8011aa2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011a98:	6839      	ldr	r1, [r7, #0]
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f000 fb55 	bl	801214a <USBD_CtlError>
          break;
 8011aa0:	bf00      	nop
      }
      break;
 8011aa2:	e005      	b.n	8011ab0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011aa4:	6839      	ldr	r1, [r7, #0]
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 fb4f 	bl	801214a <USBD_CtlError>
      break;
 8011aac:	e000      	b.n	8011ab0 <USBD_StdEPReq+0x330>
      break;
 8011aae:	bf00      	nop
  }

  return ret;
 8011ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3710      	adds	r7, #16
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
	...

08011abc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b084      	sub	sp, #16
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011aca:	2300      	movs	r3, #0
 8011acc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	885b      	ldrh	r3, [r3, #2]
 8011ad6:	0a1b      	lsrs	r3, r3, #8
 8011ad8:	b29b      	uxth	r3, r3
 8011ada:	3b01      	subs	r3, #1
 8011adc:	2b06      	cmp	r3, #6
 8011ade:	f200 8128 	bhi.w	8011d32 <USBD_GetDescriptor+0x276>
 8011ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8011ae8 <USBD_GetDescriptor+0x2c>)
 8011ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ae8:	08011b05 	.word	0x08011b05
 8011aec:	08011b1d 	.word	0x08011b1d
 8011af0:	08011b5d 	.word	0x08011b5d
 8011af4:	08011d33 	.word	0x08011d33
 8011af8:	08011d33 	.word	0x08011d33
 8011afc:	08011cd3 	.word	0x08011cd3
 8011b00:	08011cff 	.word	0x08011cff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	687a      	ldr	r2, [r7, #4]
 8011b0e:	7c12      	ldrb	r2, [r2, #16]
 8011b10:	f107 0108 	add.w	r1, r7, #8
 8011b14:	4610      	mov	r0, r2
 8011b16:	4798      	blx	r3
 8011b18:	60f8      	str	r0, [r7, #12]
      break;
 8011b1a:	e112      	b.n	8011d42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	7c1b      	ldrb	r3, [r3, #16]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d10d      	bne.n	8011b40 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b2c:	f107 0208 	add.w	r2, r7, #8
 8011b30:	4610      	mov	r0, r2
 8011b32:	4798      	blx	r3
 8011b34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	3301      	adds	r3, #1
 8011b3a:	2202      	movs	r2, #2
 8011b3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011b3e:	e100      	b.n	8011d42 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b48:	f107 0208 	add.w	r2, r7, #8
 8011b4c:	4610      	mov	r0, r2
 8011b4e:	4798      	blx	r3
 8011b50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	3301      	adds	r3, #1
 8011b56:	2202      	movs	r2, #2
 8011b58:	701a      	strb	r2, [r3, #0]
      break;
 8011b5a:	e0f2      	b.n	8011d42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	885b      	ldrh	r3, [r3, #2]
 8011b60:	b2db      	uxtb	r3, r3
 8011b62:	2b05      	cmp	r3, #5
 8011b64:	f200 80ac 	bhi.w	8011cc0 <USBD_GetDescriptor+0x204>
 8011b68:	a201      	add	r2, pc, #4	@ (adr r2, 8011b70 <USBD_GetDescriptor+0xb4>)
 8011b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b6e:	bf00      	nop
 8011b70:	08011b89 	.word	0x08011b89
 8011b74:	08011bbd 	.word	0x08011bbd
 8011b78:	08011bf1 	.word	0x08011bf1
 8011b7c:	08011c25 	.word	0x08011c25
 8011b80:	08011c59 	.word	0x08011c59
 8011b84:	08011c8d 	.word	0x08011c8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d00b      	beq.n	8011bac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	7c12      	ldrb	r2, [r2, #16]
 8011ba0:	f107 0108 	add.w	r1, r7, #8
 8011ba4:	4610      	mov	r0, r2
 8011ba6:	4798      	blx	r3
 8011ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011baa:	e091      	b.n	8011cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011bac:	6839      	ldr	r1, [r7, #0]
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f000 facb 	bl	801214a <USBD_CtlError>
            err++;
 8011bb4:	7afb      	ldrb	r3, [r7, #11]
 8011bb6:	3301      	adds	r3, #1
 8011bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8011bba:	e089      	b.n	8011cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bc2:	689b      	ldr	r3, [r3, #8]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d00b      	beq.n	8011be0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bce:	689b      	ldr	r3, [r3, #8]
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	7c12      	ldrb	r2, [r2, #16]
 8011bd4:	f107 0108 	add.w	r1, r7, #8
 8011bd8:	4610      	mov	r0, r2
 8011bda:	4798      	blx	r3
 8011bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011bde:	e077      	b.n	8011cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011be0:	6839      	ldr	r1, [r7, #0]
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f000 fab1 	bl	801214a <USBD_CtlError>
            err++;
 8011be8:	7afb      	ldrb	r3, [r7, #11]
 8011bea:	3301      	adds	r3, #1
 8011bec:	72fb      	strb	r3, [r7, #11]
          break;
 8011bee:	e06f      	b.n	8011cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bf6:	68db      	ldr	r3, [r3, #12]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d00b      	beq.n	8011c14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c02:	68db      	ldr	r3, [r3, #12]
 8011c04:	687a      	ldr	r2, [r7, #4]
 8011c06:	7c12      	ldrb	r2, [r2, #16]
 8011c08:	f107 0108 	add.w	r1, r7, #8
 8011c0c:	4610      	mov	r0, r2
 8011c0e:	4798      	blx	r3
 8011c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c12:	e05d      	b.n	8011cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c14:	6839      	ldr	r1, [r7, #0]
 8011c16:	6878      	ldr	r0, [r7, #4]
 8011c18:	f000 fa97 	bl	801214a <USBD_CtlError>
            err++;
 8011c1c:	7afb      	ldrb	r3, [r7, #11]
 8011c1e:	3301      	adds	r3, #1
 8011c20:	72fb      	strb	r3, [r7, #11]
          break;
 8011c22:	e055      	b.n	8011cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c2a:	691b      	ldr	r3, [r3, #16]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d00b      	beq.n	8011c48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c36:	691b      	ldr	r3, [r3, #16]
 8011c38:	687a      	ldr	r2, [r7, #4]
 8011c3a:	7c12      	ldrb	r2, [r2, #16]
 8011c3c:	f107 0108 	add.w	r1, r7, #8
 8011c40:	4610      	mov	r0, r2
 8011c42:	4798      	blx	r3
 8011c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c46:	e043      	b.n	8011cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c48:	6839      	ldr	r1, [r7, #0]
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f000 fa7d 	bl	801214a <USBD_CtlError>
            err++;
 8011c50:	7afb      	ldrb	r3, [r7, #11]
 8011c52:	3301      	adds	r3, #1
 8011c54:	72fb      	strb	r3, [r7, #11]
          break;
 8011c56:	e03b      	b.n	8011cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c5e:	695b      	ldr	r3, [r3, #20]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d00b      	beq.n	8011c7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c6a:	695b      	ldr	r3, [r3, #20]
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	7c12      	ldrb	r2, [r2, #16]
 8011c70:	f107 0108 	add.w	r1, r7, #8
 8011c74:	4610      	mov	r0, r2
 8011c76:	4798      	blx	r3
 8011c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c7a:	e029      	b.n	8011cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c7c:	6839      	ldr	r1, [r7, #0]
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f000 fa63 	bl	801214a <USBD_CtlError>
            err++;
 8011c84:	7afb      	ldrb	r3, [r7, #11]
 8011c86:	3301      	adds	r3, #1
 8011c88:	72fb      	strb	r3, [r7, #11]
          break;
 8011c8a:	e021      	b.n	8011cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c92:	699b      	ldr	r3, [r3, #24]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d00b      	beq.n	8011cb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c9e:	699b      	ldr	r3, [r3, #24]
 8011ca0:	687a      	ldr	r2, [r7, #4]
 8011ca2:	7c12      	ldrb	r2, [r2, #16]
 8011ca4:	f107 0108 	add.w	r1, r7, #8
 8011ca8:	4610      	mov	r0, r2
 8011caa:	4798      	blx	r3
 8011cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011cae:	e00f      	b.n	8011cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011cb0:	6839      	ldr	r1, [r7, #0]
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f000 fa49 	bl	801214a <USBD_CtlError>
            err++;
 8011cb8:	7afb      	ldrb	r3, [r7, #11]
 8011cba:	3301      	adds	r3, #1
 8011cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8011cbe:	e007      	b.n	8011cd0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011cc0:	6839      	ldr	r1, [r7, #0]
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f000 fa41 	bl	801214a <USBD_CtlError>
          err++;
 8011cc8:	7afb      	ldrb	r3, [r7, #11]
 8011cca:	3301      	adds	r3, #1
 8011ccc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011cce:	bf00      	nop
      }
      break;
 8011cd0:	e037      	b.n	8011d42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	7c1b      	ldrb	r3, [r3, #16]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d109      	bne.n	8011cee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ce2:	f107 0208 	add.w	r2, r7, #8
 8011ce6:	4610      	mov	r0, r2
 8011ce8:	4798      	blx	r3
 8011cea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011cec:	e029      	b.n	8011d42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011cee:	6839      	ldr	r1, [r7, #0]
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f000 fa2a 	bl	801214a <USBD_CtlError>
        err++;
 8011cf6:	7afb      	ldrb	r3, [r7, #11]
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	72fb      	strb	r3, [r7, #11]
      break;
 8011cfc:	e021      	b.n	8011d42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	7c1b      	ldrb	r3, [r3, #16]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d10d      	bne.n	8011d22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d0e:	f107 0208 	add.w	r2, r7, #8
 8011d12:	4610      	mov	r0, r2
 8011d14:	4798      	blx	r3
 8011d16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	3301      	adds	r3, #1
 8011d1c:	2207      	movs	r2, #7
 8011d1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d20:	e00f      	b.n	8011d42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011d22:	6839      	ldr	r1, [r7, #0]
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	f000 fa10 	bl	801214a <USBD_CtlError>
        err++;
 8011d2a:	7afb      	ldrb	r3, [r7, #11]
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8011d30:	e007      	b.n	8011d42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011d32:	6839      	ldr	r1, [r7, #0]
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f000 fa08 	bl	801214a <USBD_CtlError>
      err++;
 8011d3a:	7afb      	ldrb	r3, [r7, #11]
 8011d3c:	3301      	adds	r3, #1
 8011d3e:	72fb      	strb	r3, [r7, #11]
      break;
 8011d40:	bf00      	nop
  }

  if (err != 0U)
 8011d42:	7afb      	ldrb	r3, [r7, #11]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d11e      	bne.n	8011d86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	88db      	ldrh	r3, [r3, #6]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d016      	beq.n	8011d7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011d50:	893b      	ldrh	r3, [r7, #8]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d00e      	beq.n	8011d74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	88da      	ldrh	r2, [r3, #6]
 8011d5a:	893b      	ldrh	r3, [r7, #8]
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	bf28      	it	cs
 8011d60:	4613      	movcs	r3, r2
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011d66:	893b      	ldrh	r3, [r7, #8]
 8011d68:	461a      	mov	r2, r3
 8011d6a:	68f9      	ldr	r1, [r7, #12]
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f000 fb6a 	bl	8012446 <USBD_CtlSendData>
 8011d72:	e009      	b.n	8011d88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011d74:	6839      	ldr	r1, [r7, #0]
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f000 f9e7 	bl	801214a <USBD_CtlError>
 8011d7c:	e004      	b.n	8011d88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f000 fbbb 	bl	80124fa <USBD_CtlSendStatus>
 8011d84:	e000      	b.n	8011d88 <USBD_GetDescriptor+0x2cc>
    return;
 8011d86:	bf00      	nop
  }
}
 8011d88:	3710      	adds	r7, #16
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop

08011d90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	889b      	ldrh	r3, [r3, #4]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d131      	bne.n	8011e06 <USBD_SetAddress+0x76>
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	88db      	ldrh	r3, [r3, #6]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d12d      	bne.n	8011e06 <USBD_SetAddress+0x76>
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	885b      	ldrh	r3, [r3, #2]
 8011dae:	2b7f      	cmp	r3, #127	@ 0x7f
 8011db0:	d829      	bhi.n	8011e06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	885b      	ldrh	r3, [r3, #2]
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011dbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011dc4:	b2db      	uxtb	r3, r3
 8011dc6:	2b03      	cmp	r3, #3
 8011dc8:	d104      	bne.n	8011dd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011dca:	6839      	ldr	r1, [r7, #0]
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f000 f9bc 	bl	801214a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dd2:	e01d      	b.n	8011e10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	7bfa      	ldrb	r2, [r7, #15]
 8011dd8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011ddc:	7bfb      	ldrb	r3, [r7, #15]
 8011dde:	4619      	mov	r1, r3
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f7fe ffcd 	bl	8010d80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f000 fb87 	bl	80124fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011dec:	7bfb      	ldrb	r3, [r7, #15]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d004      	beq.n	8011dfc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2202      	movs	r2, #2
 8011df6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dfa:	e009      	b.n	8011e10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e04:	e004      	b.n	8011e10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011e06:	6839      	ldr	r1, [r7, #0]
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f000 f99e 	bl	801214a <USBD_CtlError>
  }
}
 8011e0e:	bf00      	nop
 8011e10:	bf00      	nop
 8011e12:	3710      	adds	r7, #16
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b084      	sub	sp, #16
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e22:	2300      	movs	r3, #0
 8011e24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	885b      	ldrh	r3, [r3, #2]
 8011e2a:	b2da      	uxtb	r2, r3
 8011e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8011f68 <USBD_SetConfig+0x150>)
 8011e2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011e30:	4b4d      	ldr	r3, [pc, #308]	@ (8011f68 <USBD_SetConfig+0x150>)
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	2b01      	cmp	r3, #1
 8011e36:	d905      	bls.n	8011e44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011e38:	6839      	ldr	r1, [r7, #0]
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 f985 	bl	801214a <USBD_CtlError>
    return USBD_FAIL;
 8011e40:	2303      	movs	r3, #3
 8011e42:	e08c      	b.n	8011f5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	2b02      	cmp	r3, #2
 8011e4e:	d002      	beq.n	8011e56 <USBD_SetConfig+0x3e>
 8011e50:	2b03      	cmp	r3, #3
 8011e52:	d029      	beq.n	8011ea8 <USBD_SetConfig+0x90>
 8011e54:	e075      	b.n	8011f42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011e56:	4b44      	ldr	r3, [pc, #272]	@ (8011f68 <USBD_SetConfig+0x150>)
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d020      	beq.n	8011ea0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011e5e:	4b42      	ldr	r3, [pc, #264]	@ (8011f68 <USBD_SetConfig+0x150>)
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	461a      	mov	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011e68:	4b3f      	ldr	r3, [pc, #252]	@ (8011f68 <USBD_SetConfig+0x150>)
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7ff f8a9 	bl	8010fc6 <USBD_SetClassConfig>
 8011e74:	4603      	mov	r3, r0
 8011e76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011e78:	7bfb      	ldrb	r3, [r7, #15]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d008      	beq.n	8011e90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011e7e:	6839      	ldr	r1, [r7, #0]
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f000 f962 	bl	801214a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2202      	movs	r2, #2
 8011e8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011e8e:	e065      	b.n	8011f5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f000 fb32 	bl	80124fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2203      	movs	r2, #3
 8011e9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011e9e:	e05d      	b.n	8011f5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f000 fb2a 	bl	80124fa <USBD_CtlSendStatus>
      break;
 8011ea6:	e059      	b.n	8011f5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8011f68 <USBD_SetConfig+0x150>)
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d112      	bne.n	8011ed6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2202      	movs	r2, #2
 8011eb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8011f68 <USBD_SetConfig+0x150>)
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011ec2:	4b29      	ldr	r3, [pc, #164]	@ (8011f68 <USBD_SetConfig+0x150>)
 8011ec4:	781b      	ldrb	r3, [r3, #0]
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f7ff f898 	bl	8010ffe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f000 fb13 	bl	80124fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011ed4:	e042      	b.n	8011f5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011ed6:	4b24      	ldr	r3, [pc, #144]	@ (8011f68 <USBD_SetConfig+0x150>)
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	461a      	mov	r2, r3
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	685b      	ldr	r3, [r3, #4]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d02a      	beq.n	8011f3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	b2db      	uxtb	r3, r3
 8011eea:	4619      	mov	r1, r3
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f7ff f886 	bl	8010ffe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8011f68 <USBD_SetConfig+0x150>)
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011efc:	4b1a      	ldr	r3, [pc, #104]	@ (8011f68 <USBD_SetConfig+0x150>)
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	4619      	mov	r1, r3
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	f7ff f85f 	bl	8010fc6 <USBD_SetClassConfig>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011f0c:	7bfb      	ldrb	r3, [r7, #15]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d00f      	beq.n	8011f32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011f12:	6839      	ldr	r1, [r7, #0]
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f000 f918 	bl	801214a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	b2db      	uxtb	r3, r3
 8011f20:	4619      	mov	r1, r3
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f7ff f86b 	bl	8010ffe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2202      	movs	r2, #2
 8011f2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011f30:	e014      	b.n	8011f5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f000 fae1 	bl	80124fa <USBD_CtlSendStatus>
      break;
 8011f38:	e010      	b.n	8011f5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f000 fadd 	bl	80124fa <USBD_CtlSendStatus>
      break;
 8011f40:	e00c      	b.n	8011f5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011f42:	6839      	ldr	r1, [r7, #0]
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f000 f900 	bl	801214a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011f4a:	4b07      	ldr	r3, [pc, #28]	@ (8011f68 <USBD_SetConfig+0x150>)
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	4619      	mov	r1, r3
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f7ff f854 	bl	8010ffe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011f56:	2303      	movs	r3, #3
 8011f58:	73fb      	strb	r3, [r7, #15]
      break;
 8011f5a:	bf00      	nop
  }

  return ret;
 8011f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	20011110 	.word	0x20011110

08011f6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b082      	sub	sp, #8
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	88db      	ldrh	r3, [r3, #6]
 8011f7a:	2b01      	cmp	r3, #1
 8011f7c:	d004      	beq.n	8011f88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011f7e:	6839      	ldr	r1, [r7, #0]
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f000 f8e2 	bl	801214a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011f86:	e023      	b.n	8011fd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f8e:	b2db      	uxtb	r3, r3
 8011f90:	2b02      	cmp	r3, #2
 8011f92:	dc02      	bgt.n	8011f9a <USBD_GetConfig+0x2e>
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	dc03      	bgt.n	8011fa0 <USBD_GetConfig+0x34>
 8011f98:	e015      	b.n	8011fc6 <USBD_GetConfig+0x5a>
 8011f9a:	2b03      	cmp	r3, #3
 8011f9c:	d00b      	beq.n	8011fb6 <USBD_GetConfig+0x4a>
 8011f9e:	e012      	b.n	8011fc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2200      	movs	r2, #0
 8011fa4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	3308      	adds	r3, #8
 8011faa:	2201      	movs	r2, #1
 8011fac:	4619      	mov	r1, r3
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f000 fa49 	bl	8012446 <USBD_CtlSendData>
        break;
 8011fb4:	e00c      	b.n	8011fd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	3304      	adds	r3, #4
 8011fba:	2201      	movs	r2, #1
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f000 fa41 	bl	8012446 <USBD_CtlSendData>
        break;
 8011fc4:	e004      	b.n	8011fd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011fc6:	6839      	ldr	r1, [r7, #0]
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f000 f8be 	bl	801214a <USBD_CtlError>
        break;
 8011fce:	bf00      	nop
}
 8011fd0:	bf00      	nop
 8011fd2:	3708      	adds	r7, #8
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}

08011fd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b082      	sub	sp, #8
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
 8011fe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fe8:	b2db      	uxtb	r3, r3
 8011fea:	3b01      	subs	r3, #1
 8011fec:	2b02      	cmp	r3, #2
 8011fee:	d81e      	bhi.n	801202e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	88db      	ldrh	r3, [r3, #6]
 8011ff4:	2b02      	cmp	r3, #2
 8011ff6:	d004      	beq.n	8012002 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011ff8:	6839      	ldr	r1, [r7, #0]
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f000 f8a5 	bl	801214a <USBD_CtlError>
        break;
 8012000:	e01a      	b.n	8012038 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2201      	movs	r2, #1
 8012006:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801200e:	2b00      	cmp	r3, #0
 8012010:	d005      	beq.n	801201e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	68db      	ldr	r3, [r3, #12]
 8012016:	f043 0202 	orr.w	r2, r3, #2
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	330c      	adds	r3, #12
 8012022:	2202      	movs	r2, #2
 8012024:	4619      	mov	r1, r3
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f000 fa0d 	bl	8012446 <USBD_CtlSendData>
      break;
 801202c:	e004      	b.n	8012038 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801202e:	6839      	ldr	r1, [r7, #0]
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 f88a 	bl	801214a <USBD_CtlError>
      break;
 8012036:	bf00      	nop
  }
}
 8012038:	bf00      	nop
 801203a:	3708      	adds	r7, #8
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}

08012040 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	885b      	ldrh	r3, [r3, #2]
 801204e:	2b01      	cmp	r3, #1
 8012050:	d107      	bne.n	8012062 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2201      	movs	r2, #1
 8012056:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f000 fa4d 	bl	80124fa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012060:	e013      	b.n	801208a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	885b      	ldrh	r3, [r3, #2]
 8012066:	2b02      	cmp	r3, #2
 8012068:	d10b      	bne.n	8012082 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	889b      	ldrh	r3, [r3, #4]
 801206e:	0a1b      	lsrs	r3, r3, #8
 8012070:	b29b      	uxth	r3, r3
 8012072:	b2da      	uxtb	r2, r3
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f000 fa3d 	bl	80124fa <USBD_CtlSendStatus>
}
 8012080:	e003      	b.n	801208a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012082:	6839      	ldr	r1, [r7, #0]
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f000 f860 	bl	801214a <USBD_CtlError>
}
 801208a:	bf00      	nop
 801208c:	3708      	adds	r7, #8
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}

08012092 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012092:	b580      	push	{r7, lr}
 8012094:	b082      	sub	sp, #8
 8012096:	af00      	add	r7, sp, #0
 8012098:	6078      	str	r0, [r7, #4]
 801209a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80120a2:	b2db      	uxtb	r3, r3
 80120a4:	3b01      	subs	r3, #1
 80120a6:	2b02      	cmp	r3, #2
 80120a8:	d80b      	bhi.n	80120c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	885b      	ldrh	r3, [r3, #2]
 80120ae:	2b01      	cmp	r3, #1
 80120b0:	d10c      	bne.n	80120cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2200      	movs	r2, #0
 80120b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f000 fa1d 	bl	80124fa <USBD_CtlSendStatus>
      }
      break;
 80120c0:	e004      	b.n	80120cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80120c2:	6839      	ldr	r1, [r7, #0]
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f000 f840 	bl	801214a <USBD_CtlError>
      break;
 80120ca:	e000      	b.n	80120ce <USBD_ClrFeature+0x3c>
      break;
 80120cc:	bf00      	nop
  }
}
 80120ce:	bf00      	nop
 80120d0:	3708      	adds	r7, #8
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}

080120d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80120d6:	b580      	push	{r7, lr}
 80120d8:	b084      	sub	sp, #16
 80120da:	af00      	add	r7, sp, #0
 80120dc:	6078      	str	r0, [r7, #4]
 80120de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	781a      	ldrb	r2, [r3, #0]
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	3301      	adds	r3, #1
 80120f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	781a      	ldrb	r2, [r3, #0]
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	3301      	adds	r3, #1
 80120fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012100:	68f8      	ldr	r0, [r7, #12]
 8012102:	f7ff fa40 	bl	8011586 <SWAPBYTE>
 8012106:	4603      	mov	r3, r0
 8012108:	461a      	mov	r2, r3
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	3301      	adds	r3, #1
 8012112:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	3301      	adds	r3, #1
 8012118:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801211a:	68f8      	ldr	r0, [r7, #12]
 801211c:	f7ff fa33 	bl	8011586 <SWAPBYTE>
 8012120:	4603      	mov	r3, r0
 8012122:	461a      	mov	r2, r3
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	3301      	adds	r3, #1
 801212c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	3301      	adds	r3, #1
 8012132:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012134:	68f8      	ldr	r0, [r7, #12]
 8012136:	f7ff fa26 	bl	8011586 <SWAPBYTE>
 801213a:	4603      	mov	r3, r0
 801213c:	461a      	mov	r2, r3
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	80da      	strh	r2, [r3, #6]
}
 8012142:	bf00      	nop
 8012144:	3710      	adds	r7, #16
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}

0801214a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801214a:	b580      	push	{r7, lr}
 801214c:	b082      	sub	sp, #8
 801214e:	af00      	add	r7, sp, #0
 8012150:	6078      	str	r0, [r7, #4]
 8012152:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012154:	2180      	movs	r1, #128	@ 0x80
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f7fe fdb4 	bl	8010cc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801215c:	2100      	movs	r1, #0
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f7fe fdb0 	bl	8010cc4 <USBD_LL_StallEP>
}
 8012164:	bf00      	nop
 8012166:	3708      	adds	r7, #8
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b086      	sub	sp, #24
 8012170:	af00      	add	r7, sp, #0
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012178:	2300      	movs	r3, #0
 801217a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d036      	beq.n	80121f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012186:	6938      	ldr	r0, [r7, #16]
 8012188:	f000 f836 	bl	80121f8 <USBD_GetLen>
 801218c:	4603      	mov	r3, r0
 801218e:	3301      	adds	r3, #1
 8012190:	b29b      	uxth	r3, r3
 8012192:	005b      	lsls	r3, r3, #1
 8012194:	b29a      	uxth	r2, r3
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801219a:	7dfb      	ldrb	r3, [r7, #23]
 801219c:	68ba      	ldr	r2, [r7, #8]
 801219e:	4413      	add	r3, r2
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	7812      	ldrb	r2, [r2, #0]
 80121a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80121a6:	7dfb      	ldrb	r3, [r7, #23]
 80121a8:	3301      	adds	r3, #1
 80121aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80121ac:	7dfb      	ldrb	r3, [r7, #23]
 80121ae:	68ba      	ldr	r2, [r7, #8]
 80121b0:	4413      	add	r3, r2
 80121b2:	2203      	movs	r2, #3
 80121b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80121b6:	7dfb      	ldrb	r3, [r7, #23]
 80121b8:	3301      	adds	r3, #1
 80121ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80121bc:	e013      	b.n	80121e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80121be:	7dfb      	ldrb	r3, [r7, #23]
 80121c0:	68ba      	ldr	r2, [r7, #8]
 80121c2:	4413      	add	r3, r2
 80121c4:	693a      	ldr	r2, [r7, #16]
 80121c6:	7812      	ldrb	r2, [r2, #0]
 80121c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	3301      	adds	r3, #1
 80121ce:	613b      	str	r3, [r7, #16]
    idx++;
 80121d0:	7dfb      	ldrb	r3, [r7, #23]
 80121d2:	3301      	adds	r3, #1
 80121d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80121d6:	7dfb      	ldrb	r3, [r7, #23]
 80121d8:	68ba      	ldr	r2, [r7, #8]
 80121da:	4413      	add	r3, r2
 80121dc:	2200      	movs	r2, #0
 80121de:	701a      	strb	r2, [r3, #0]
    idx++;
 80121e0:	7dfb      	ldrb	r3, [r7, #23]
 80121e2:	3301      	adds	r3, #1
 80121e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	781b      	ldrb	r3, [r3, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d1e7      	bne.n	80121be <USBD_GetString+0x52>
 80121ee:	e000      	b.n	80121f2 <USBD_GetString+0x86>
    return;
 80121f0:	bf00      	nop
  }
}
 80121f2:	3718      	adds	r7, #24
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}

080121f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80121f8:	b480      	push	{r7}
 80121fa:	b085      	sub	sp, #20
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012200:	2300      	movs	r3, #0
 8012202:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012208:	e005      	b.n	8012216 <USBD_GetLen+0x1e>
  {
    len++;
 801220a:	7bfb      	ldrb	r3, [r7, #15]
 801220c:	3301      	adds	r3, #1
 801220e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	3301      	adds	r3, #1
 8012214:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d1f5      	bne.n	801220a <USBD_GetLen+0x12>
  }

  return len;
 801221e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012220:	4618      	mov	r0, r3
 8012222:	3714      	adds	r7, #20
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr

0801222c <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	4603      	mov	r3, r0
 8012234:	6039      	str	r1, [r7, #0]
 8012236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	2212      	movs	r2, #18
 801223c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 801223e:	4b03      	ldr	r3, [pc, #12]	@ (801224c <USBD_Class_DeviceDescriptor+0x20>)
}
 8012240:	4618      	mov	r0, r3
 8012242:	370c      	adds	r7, #12
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr
 801224c:	200000f0 	.word	0x200000f0

08012250 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012250:	b480      	push	{r7}
 8012252:	b083      	sub	sp, #12
 8012254:	af00      	add	r7, sp, #0
 8012256:	4603      	mov	r3, r0
 8012258:	6039      	str	r1, [r7, #0]
 801225a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	2204      	movs	r2, #4
 8012260:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 8012262:	4b03      	ldr	r3, [pc, #12]	@ (8012270 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8012264:	4618      	mov	r0, r3
 8012266:	370c      	adds	r7, #12
 8012268:	46bd      	mov	sp, r7
 801226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226e:	4770      	bx	lr
 8012270:	20000104 	.word	0x20000104

08012274 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	af00      	add	r7, sp, #0
 801227a:	4603      	mov	r3, r0
 801227c:	6039      	str	r1, [r7, #0]
 801227e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8012280:	79fb      	ldrb	r3, [r7, #7]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d105      	bne.n	8012292 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8012286:	683a      	ldr	r2, [r7, #0]
 8012288:	4907      	ldr	r1, [pc, #28]	@ (80122a8 <USBD_Class_ProductStrDescriptor+0x34>)
 801228a:	4808      	ldr	r0, [pc, #32]	@ (80122ac <USBD_Class_ProductStrDescriptor+0x38>)
 801228c:	f7ff ff6e 	bl	801216c <USBD_GetString>
 8012290:	e004      	b.n	801229c <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8012292:	683a      	ldr	r2, [r7, #0]
 8012294:	4904      	ldr	r1, [pc, #16]	@ (80122a8 <USBD_Class_ProductStrDescriptor+0x34>)
 8012296:	4805      	ldr	r0, [pc, #20]	@ (80122ac <USBD_Class_ProductStrDescriptor+0x38>)
 8012298:	f7ff ff68 	bl	801216c <USBD_GetString>
  }
  return USBD_StrDesc;
 801229c:	4b02      	ldr	r3, [pc, #8]	@ (80122a8 <USBD_Class_ProductStrDescriptor+0x34>)
}
 801229e:	4618      	mov	r0, r3
 80122a0:	3708      	adds	r7, #8
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}
 80122a6:	bf00      	nop
 80122a8:	20011114 	.word	0x20011114
 80122ac:	080146f4 	.word	0x080146f4

080122b0 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b082      	sub	sp, #8
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	4603      	mov	r3, r0
 80122b8:	6039      	str	r1, [r7, #0]
 80122ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80122bc:	683a      	ldr	r2, [r7, #0]
 80122be:	4904      	ldr	r1, [pc, #16]	@ (80122d0 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 80122c0:	4804      	ldr	r0, [pc, #16]	@ (80122d4 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 80122c2:	f7ff ff53 	bl	801216c <USBD_GetString>
  return USBD_StrDesc;
 80122c6:	4b02      	ldr	r3, [pc, #8]	@ (80122d0 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3708      	adds	r7, #8
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	20011114 	.word	0x20011114
 80122d4:	0801470c 	.word	0x0801470c

080122d8 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	4603      	mov	r3, r0
 80122e0:	6039      	str	r1, [r7, #0]
 80122e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	221a      	movs	r2, #26
 80122e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 80122ea:	f000 f843 	bl	8012374 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 80122ee:	4b02      	ldr	r3, [pc, #8]	@ (80122f8 <USBD_Class_SerialStrDescriptor+0x20>)
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3708      	adds	r7, #8
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	20000108 	.word	0x20000108

080122fc <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b082      	sub	sp, #8
 8012300:	af00      	add	r7, sp, #0
 8012302:	4603      	mov	r3, r0
 8012304:	6039      	str	r1, [r7, #0]
 8012306:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8012308:	79fb      	ldrb	r3, [r7, #7]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d105      	bne.n	801231a <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 801230e:	683a      	ldr	r2, [r7, #0]
 8012310:	4907      	ldr	r1, [pc, #28]	@ (8012330 <USBD_Class_ConfigStrDescriptor+0x34>)
 8012312:	4808      	ldr	r0, [pc, #32]	@ (8012334 <USBD_Class_ConfigStrDescriptor+0x38>)
 8012314:	f7ff ff2a 	bl	801216c <USBD_GetString>
 8012318:	e004      	b.n	8012324 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 801231a:	683a      	ldr	r2, [r7, #0]
 801231c:	4904      	ldr	r1, [pc, #16]	@ (8012330 <USBD_Class_ConfigStrDescriptor+0x34>)
 801231e:	4805      	ldr	r0, [pc, #20]	@ (8012334 <USBD_Class_ConfigStrDescriptor+0x38>)
 8012320:	f7ff ff24 	bl	801216c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012324:	4b02      	ldr	r3, [pc, #8]	@ (8012330 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 8012326:	4618      	mov	r0, r3
 8012328:	3708      	adds	r7, #8
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}
 801232e:	bf00      	nop
 8012330:	20011114 	.word	0x20011114
 8012334:	08014720 	.word	0x08014720

08012338 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b082      	sub	sp, #8
 801233c:	af00      	add	r7, sp, #0
 801233e:	4603      	mov	r3, r0
 8012340:	6039      	str	r1, [r7, #0]
 8012342:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8012344:	79fb      	ldrb	r3, [r7, #7]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d105      	bne.n	8012356 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 801234a:	683a      	ldr	r2, [r7, #0]
 801234c:	4907      	ldr	r1, [pc, #28]	@ (801236c <USBD_Class_InterfaceStrDescriptor+0x34>)
 801234e:	4808      	ldr	r0, [pc, #32]	@ (8012370 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8012350:	f7ff ff0c 	bl	801216c <USBD_GetString>
 8012354:	e004      	b.n	8012360 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8012356:	683a      	ldr	r2, [r7, #0]
 8012358:	4904      	ldr	r1, [pc, #16]	@ (801236c <USBD_Class_InterfaceStrDescriptor+0x34>)
 801235a:	4805      	ldr	r0, [pc, #20]	@ (8012370 <USBD_Class_InterfaceStrDescriptor+0x38>)
 801235c:	f7ff ff06 	bl	801216c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012360:	4b02      	ldr	r3, [pc, #8]	@ (801236c <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 8012362:	4618      	mov	r0, r3
 8012364:	3708      	adds	r7, #8
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	20011114 	.word	0x20011114
 8012370:	0801472c 	.word	0x0801472c

08012374 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 801237a:	4b0f      	ldr	r3, [pc, #60]	@ (80123b8 <Get_SerialNum+0x44>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 8012380:	4b0e      	ldr	r3, [pc, #56]	@ (80123bc <Get_SerialNum+0x48>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8012386:	4b0e      	ldr	r3, [pc, #56]	@ (80123c0 <Get_SerialNum+0x4c>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801238c:	68fa      	ldr	r2, [r7, #12]
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	4413      	add	r3, r2
 8012392:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d009      	beq.n	80123ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 801239a:	2208      	movs	r2, #8
 801239c:	4909      	ldr	r1, [pc, #36]	@ (80123c4 <Get_SerialNum+0x50>)
 801239e:	68f8      	ldr	r0, [r7, #12]
 80123a0:	f000 f814 	bl	80123cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 80123a4:	2204      	movs	r2, #4
 80123a6:	4908      	ldr	r1, [pc, #32]	@ (80123c8 <Get_SerialNum+0x54>)
 80123a8:	68b8      	ldr	r0, [r7, #8]
 80123aa:	f000 f80f 	bl	80123cc <IntToUnicode>
  }
}
 80123ae:	bf00      	nop
 80123b0:	3710      	adds	r7, #16
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	08fff800 	.word	0x08fff800
 80123bc:	08fff804 	.word	0x08fff804
 80123c0:	08fff808 	.word	0x08fff808
 80123c4:	2000010a 	.word	0x2000010a
 80123c8:	2000011a 	.word	0x2000011a

080123cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 80123cc:	b480      	push	{r7}
 80123ce:	b087      	sub	sp, #28
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	60f8      	str	r0, [r7, #12]
 80123d4:	60b9      	str	r1, [r7, #8]
 80123d6:	4613      	mov	r3, r2
 80123d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 80123da:	2300      	movs	r3, #0
 80123dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 80123de:	2300      	movs	r3, #0
 80123e0:	75fb      	strb	r3, [r7, #23]
 80123e2:	e025      	b.n	8012430 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	0f1b      	lsrs	r3, r3, #28
 80123e8:	2b09      	cmp	r3, #9
 80123ea:	d80a      	bhi.n	8012402 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	0f1b      	lsrs	r3, r3, #28
 80123f0:	b2da      	uxtb	r2, r3
 80123f2:	7dfb      	ldrb	r3, [r7, #23]
 80123f4:	005b      	lsls	r3, r3, #1
 80123f6:	68b9      	ldr	r1, [r7, #8]
 80123f8:	440b      	add	r3, r1
 80123fa:	3230      	adds	r2, #48	@ 0x30
 80123fc:	b2d2      	uxtb	r2, r2
 80123fe:	701a      	strb	r2, [r3, #0]
 8012400:	e009      	b.n	8012416 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	0f1b      	lsrs	r3, r3, #28
 8012406:	b2da      	uxtb	r2, r3
 8012408:	7dfb      	ldrb	r3, [r7, #23]
 801240a:	005b      	lsls	r3, r3, #1
 801240c:	68b9      	ldr	r1, [r7, #8]
 801240e:	440b      	add	r3, r1
 8012410:	3237      	adds	r2, #55	@ 0x37
 8012412:	b2d2      	uxtb	r2, r2
 8012414:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	011b      	lsls	r3, r3, #4
 801241a:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 801241c:	7dfb      	ldrb	r3, [r7, #23]
 801241e:	005b      	lsls	r3, r3, #1
 8012420:	3301      	adds	r3, #1
 8012422:	68ba      	ldr	r2, [r7, #8]
 8012424:	4413      	add	r3, r2
 8012426:	2200      	movs	r2, #0
 8012428:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 801242a:	7dfb      	ldrb	r3, [r7, #23]
 801242c:	3301      	adds	r3, #1
 801242e:	75fb      	strb	r3, [r7, #23]
 8012430:	7dfa      	ldrb	r2, [r7, #23]
 8012432:	79fb      	ldrb	r3, [r7, #7]
 8012434:	429a      	cmp	r2, r3
 8012436:	d3d5      	bcc.n	80123e4 <IntToUnicode+0x18>
  }
}
 8012438:	bf00      	nop
 801243a:	bf00      	nop
 801243c:	371c      	adds	r7, #28
 801243e:	46bd      	mov	sp, r7
 8012440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012444:	4770      	bx	lr

08012446 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012446:	b580      	push	{r7, lr}
 8012448:	b084      	sub	sp, #16
 801244a:	af00      	add	r7, sp, #0
 801244c:	60f8      	str	r0, [r7, #12]
 801244e:	60b9      	str	r1, [r7, #8]
 8012450:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2202      	movs	r2, #2
 8012456:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	687a      	ldr	r2, [r7, #4]
 801245e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	68ba      	ldr	r2, [r7, #8]
 801246a:	2100      	movs	r1, #0
 801246c:	68f8      	ldr	r0, [r7, #12]
 801246e:	f7fe fca0 	bl	8010db2 <USBD_LL_Transmit>

  return USBD_OK;
 8012472:	2300      	movs	r3, #0
}
 8012474:	4618      	mov	r0, r3
 8012476:	3710      	adds	r7, #16
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}

0801247c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	60f8      	str	r0, [r7, #12]
 8012484:	60b9      	str	r1, [r7, #8]
 8012486:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	68ba      	ldr	r2, [r7, #8]
 801248c:	2100      	movs	r1, #0
 801248e:	68f8      	ldr	r0, [r7, #12]
 8012490:	f7fe fc8f 	bl	8010db2 <USBD_LL_Transmit>

  return USBD_OK;
 8012494:	2300      	movs	r3, #0
}
 8012496:	4618      	mov	r0, r3
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801249e:	b580      	push	{r7, lr}
 80124a0:	b084      	sub	sp, #16
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	60f8      	str	r0, [r7, #12]
 80124a6:	60b9      	str	r1, [r7, #8]
 80124a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2203      	movs	r2, #3
 80124ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	68ba      	ldr	r2, [r7, #8]
 80124c6:	2100      	movs	r1, #0
 80124c8:	68f8      	ldr	r0, [r7, #12]
 80124ca:	f7fe fc8d 	bl	8010de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80124ce:	2300      	movs	r3, #0
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	3710      	adds	r7, #16
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	af00      	add	r7, sp, #0
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	68ba      	ldr	r2, [r7, #8]
 80124e8:	2100      	movs	r1, #0
 80124ea:	68f8      	ldr	r0, [r7, #12]
 80124ec:	f7fe fc7c 	bl	8010de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80124f0:	2300      	movs	r3, #0
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3710      	adds	r7, #16
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}

080124fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80124fa:	b580      	push	{r7, lr}
 80124fc:	b082      	sub	sp, #8
 80124fe:	af00      	add	r7, sp, #0
 8012500:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2204      	movs	r2, #4
 8012506:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801250a:	2300      	movs	r3, #0
 801250c:	2200      	movs	r2, #0
 801250e:	2100      	movs	r1, #0
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f7fe fc4e 	bl	8010db2 <USBD_LL_Transmit>

  return USBD_OK;
 8012516:	2300      	movs	r3, #0
}
 8012518:	4618      	mov	r0, r3
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2205      	movs	r2, #5
 801252c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012530:	2300      	movs	r3, #0
 8012532:	2200      	movs	r2, #0
 8012534:	2100      	movs	r1, #0
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	f7fe fc56 	bl	8010de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801253c:	2300      	movs	r3, #0
}
 801253e:	4618      	mov	r0, r3
 8012540:	3708      	adds	r7, #8
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
	...

08012548 <std>:
 8012548:	2300      	movs	r3, #0
 801254a:	b510      	push	{r4, lr}
 801254c:	4604      	mov	r4, r0
 801254e:	6083      	str	r3, [r0, #8]
 8012550:	8181      	strh	r1, [r0, #12]
 8012552:	4619      	mov	r1, r3
 8012554:	6643      	str	r3, [r0, #100]	@ 0x64
 8012556:	81c2      	strh	r2, [r0, #14]
 8012558:	2208      	movs	r2, #8
 801255a:	6183      	str	r3, [r0, #24]
 801255c:	e9c0 3300 	strd	r3, r3, [r0]
 8012560:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012564:	305c      	adds	r0, #92	@ 0x5c
 8012566:	f000 f993 	bl	8012890 <memset>
 801256a:	4b0d      	ldr	r3, [pc, #52]	@ (80125a0 <std+0x58>)
 801256c:	6224      	str	r4, [r4, #32]
 801256e:	6263      	str	r3, [r4, #36]	@ 0x24
 8012570:	4b0c      	ldr	r3, [pc, #48]	@ (80125a4 <std+0x5c>)
 8012572:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012574:	4b0c      	ldr	r3, [pc, #48]	@ (80125a8 <std+0x60>)
 8012576:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012578:	4b0c      	ldr	r3, [pc, #48]	@ (80125ac <std+0x64>)
 801257a:	6323      	str	r3, [r4, #48]	@ 0x30
 801257c:	4b0c      	ldr	r3, [pc, #48]	@ (80125b0 <std+0x68>)
 801257e:	429c      	cmp	r4, r3
 8012580:	d006      	beq.n	8012590 <std+0x48>
 8012582:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012586:	4294      	cmp	r4, r2
 8012588:	d002      	beq.n	8012590 <std+0x48>
 801258a:	33d0      	adds	r3, #208	@ 0xd0
 801258c:	429c      	cmp	r4, r3
 801258e:	d105      	bne.n	801259c <std+0x54>
 8012590:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012598:	f000 b9f2 	b.w	8012980 <__retarget_lock_init_recursive>
 801259c:	bd10      	pop	{r4, pc}
 801259e:	bf00      	nop
 80125a0:	08012799 	.word	0x08012799
 80125a4:	080127bb 	.word	0x080127bb
 80125a8:	080127f3 	.word	0x080127f3
 80125ac:	08012817 	.word	0x08012817
 80125b0:	20011214 	.word	0x20011214

080125b4 <stdio_exit_handler>:
 80125b4:	4a02      	ldr	r2, [pc, #8]	@ (80125c0 <stdio_exit_handler+0xc>)
 80125b6:	4903      	ldr	r1, [pc, #12]	@ (80125c4 <stdio_exit_handler+0x10>)
 80125b8:	4803      	ldr	r0, [pc, #12]	@ (80125c8 <stdio_exit_handler+0x14>)
 80125ba:	f000 b869 	b.w	8012690 <_fwalk_sglue>
 80125be:	bf00      	nop
 80125c0:	20000124 	.word	0x20000124
 80125c4:	080134f1 	.word	0x080134f1
 80125c8:	20000134 	.word	0x20000134

080125cc <cleanup_stdio>:
 80125cc:	6841      	ldr	r1, [r0, #4]
 80125ce:	4b0c      	ldr	r3, [pc, #48]	@ (8012600 <cleanup_stdio+0x34>)
 80125d0:	4299      	cmp	r1, r3
 80125d2:	b510      	push	{r4, lr}
 80125d4:	4604      	mov	r4, r0
 80125d6:	d001      	beq.n	80125dc <cleanup_stdio+0x10>
 80125d8:	f000 ff8a 	bl	80134f0 <_fflush_r>
 80125dc:	68a1      	ldr	r1, [r4, #8]
 80125de:	4b09      	ldr	r3, [pc, #36]	@ (8012604 <cleanup_stdio+0x38>)
 80125e0:	4299      	cmp	r1, r3
 80125e2:	d002      	beq.n	80125ea <cleanup_stdio+0x1e>
 80125e4:	4620      	mov	r0, r4
 80125e6:	f000 ff83 	bl	80134f0 <_fflush_r>
 80125ea:	68e1      	ldr	r1, [r4, #12]
 80125ec:	4b06      	ldr	r3, [pc, #24]	@ (8012608 <cleanup_stdio+0x3c>)
 80125ee:	4299      	cmp	r1, r3
 80125f0:	d004      	beq.n	80125fc <cleanup_stdio+0x30>
 80125f2:	4620      	mov	r0, r4
 80125f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125f8:	f000 bf7a 	b.w	80134f0 <_fflush_r>
 80125fc:	bd10      	pop	{r4, pc}
 80125fe:	bf00      	nop
 8012600:	20011214 	.word	0x20011214
 8012604:	2001127c 	.word	0x2001127c
 8012608:	200112e4 	.word	0x200112e4

0801260c <global_stdio_init.part.0>:
 801260c:	b510      	push	{r4, lr}
 801260e:	4b0b      	ldr	r3, [pc, #44]	@ (801263c <global_stdio_init.part.0+0x30>)
 8012610:	2104      	movs	r1, #4
 8012612:	4c0b      	ldr	r4, [pc, #44]	@ (8012640 <global_stdio_init.part.0+0x34>)
 8012614:	4a0b      	ldr	r2, [pc, #44]	@ (8012644 <global_stdio_init.part.0+0x38>)
 8012616:	4620      	mov	r0, r4
 8012618:	601a      	str	r2, [r3, #0]
 801261a:	2200      	movs	r2, #0
 801261c:	f7ff ff94 	bl	8012548 <std>
 8012620:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012624:	2201      	movs	r2, #1
 8012626:	2109      	movs	r1, #9
 8012628:	f7ff ff8e 	bl	8012548 <std>
 801262c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012630:	2202      	movs	r2, #2
 8012632:	2112      	movs	r1, #18
 8012634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012638:	f7ff bf86 	b.w	8012548 <std>
 801263c:	2001134c 	.word	0x2001134c
 8012640:	20011214 	.word	0x20011214
 8012644:	080125b5 	.word	0x080125b5

08012648 <__sfp_lock_acquire>:
 8012648:	4801      	ldr	r0, [pc, #4]	@ (8012650 <__sfp_lock_acquire+0x8>)
 801264a:	f000 b99a 	b.w	8012982 <__retarget_lock_acquire_recursive>
 801264e:	bf00      	nop
 8012650:	20011355 	.word	0x20011355

08012654 <__sfp_lock_release>:
 8012654:	4801      	ldr	r0, [pc, #4]	@ (801265c <__sfp_lock_release+0x8>)
 8012656:	f000 b995 	b.w	8012984 <__retarget_lock_release_recursive>
 801265a:	bf00      	nop
 801265c:	20011355 	.word	0x20011355

08012660 <__sinit>:
 8012660:	b510      	push	{r4, lr}
 8012662:	4604      	mov	r4, r0
 8012664:	f7ff fff0 	bl	8012648 <__sfp_lock_acquire>
 8012668:	6a23      	ldr	r3, [r4, #32]
 801266a:	b11b      	cbz	r3, 8012674 <__sinit+0x14>
 801266c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012670:	f7ff bff0 	b.w	8012654 <__sfp_lock_release>
 8012674:	4b04      	ldr	r3, [pc, #16]	@ (8012688 <__sinit+0x28>)
 8012676:	6223      	str	r3, [r4, #32]
 8012678:	4b04      	ldr	r3, [pc, #16]	@ (801268c <__sinit+0x2c>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d1f5      	bne.n	801266c <__sinit+0xc>
 8012680:	f7ff ffc4 	bl	801260c <global_stdio_init.part.0>
 8012684:	e7f2      	b.n	801266c <__sinit+0xc>
 8012686:	bf00      	nop
 8012688:	080125cd 	.word	0x080125cd
 801268c:	2001134c 	.word	0x2001134c

08012690 <_fwalk_sglue>:
 8012690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012694:	4607      	mov	r7, r0
 8012696:	4688      	mov	r8, r1
 8012698:	4614      	mov	r4, r2
 801269a:	2600      	movs	r6, #0
 801269c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80126a0:	f1b9 0901 	subs.w	r9, r9, #1
 80126a4:	d505      	bpl.n	80126b2 <_fwalk_sglue+0x22>
 80126a6:	6824      	ldr	r4, [r4, #0]
 80126a8:	2c00      	cmp	r4, #0
 80126aa:	d1f7      	bne.n	801269c <_fwalk_sglue+0xc>
 80126ac:	4630      	mov	r0, r6
 80126ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126b2:	89ab      	ldrh	r3, [r5, #12]
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d907      	bls.n	80126c8 <_fwalk_sglue+0x38>
 80126b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80126bc:	3301      	adds	r3, #1
 80126be:	d003      	beq.n	80126c8 <_fwalk_sglue+0x38>
 80126c0:	4629      	mov	r1, r5
 80126c2:	4638      	mov	r0, r7
 80126c4:	47c0      	blx	r8
 80126c6:	4306      	orrs	r6, r0
 80126c8:	3568      	adds	r5, #104	@ 0x68
 80126ca:	e7e9      	b.n	80126a0 <_fwalk_sglue+0x10>

080126cc <iprintf>:
 80126cc:	b40f      	push	{r0, r1, r2, r3}
 80126ce:	b507      	push	{r0, r1, r2, lr}
 80126d0:	4906      	ldr	r1, [pc, #24]	@ (80126ec <iprintf+0x20>)
 80126d2:	ab04      	add	r3, sp, #16
 80126d4:	6808      	ldr	r0, [r1, #0]
 80126d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80126da:	6881      	ldr	r1, [r0, #8]
 80126dc:	9301      	str	r3, [sp, #4]
 80126de:	f000 fbd9 	bl	8012e94 <_vfiprintf_r>
 80126e2:	b003      	add	sp, #12
 80126e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80126e8:	b004      	add	sp, #16
 80126ea:	4770      	bx	lr
 80126ec:	20000130 	.word	0x20000130

080126f0 <sniprintf>:
 80126f0:	b40c      	push	{r2, r3}
 80126f2:	4b18      	ldr	r3, [pc, #96]	@ (8012754 <sniprintf+0x64>)
 80126f4:	b530      	push	{r4, r5, lr}
 80126f6:	1e0c      	subs	r4, r1, #0
 80126f8:	b09d      	sub	sp, #116	@ 0x74
 80126fa:	681d      	ldr	r5, [r3, #0]
 80126fc:	da08      	bge.n	8012710 <sniprintf+0x20>
 80126fe:	238b      	movs	r3, #139	@ 0x8b
 8012700:	f04f 30ff 	mov.w	r0, #4294967295
 8012704:	602b      	str	r3, [r5, #0]
 8012706:	b01d      	add	sp, #116	@ 0x74
 8012708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801270c:	b002      	add	sp, #8
 801270e:	4770      	bx	lr
 8012710:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012714:	9002      	str	r0, [sp, #8]
 8012716:	9006      	str	r0, [sp, #24]
 8012718:	a902      	add	r1, sp, #8
 801271a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801271e:	bf14      	ite	ne
 8012720:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012724:	4623      	moveq	r3, r4
 8012726:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012728:	4628      	mov	r0, r5
 801272a:	9304      	str	r3, [sp, #16]
 801272c:	9307      	str	r3, [sp, #28]
 801272e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012732:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012736:	ab21      	add	r3, sp, #132	@ 0x84
 8012738:	9301      	str	r3, [sp, #4]
 801273a:	f000 fa85 	bl	8012c48 <_svfiprintf_r>
 801273e:	1c43      	adds	r3, r0, #1
 8012740:	bfbc      	itt	lt
 8012742:	238b      	movlt	r3, #139	@ 0x8b
 8012744:	602b      	strlt	r3, [r5, #0]
 8012746:	2c00      	cmp	r4, #0
 8012748:	d0dd      	beq.n	8012706 <sniprintf+0x16>
 801274a:	9b02      	ldr	r3, [sp, #8]
 801274c:	2200      	movs	r2, #0
 801274e:	701a      	strb	r2, [r3, #0]
 8012750:	e7d9      	b.n	8012706 <sniprintf+0x16>
 8012752:	bf00      	nop
 8012754:	20000130 	.word	0x20000130

08012758 <siprintf>:
 8012758:	b40e      	push	{r1, r2, r3}
 801275a:	b500      	push	{lr}
 801275c:	b09c      	sub	sp, #112	@ 0x70
 801275e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012762:	ab1d      	add	r3, sp, #116	@ 0x74
 8012764:	9002      	str	r0, [sp, #8]
 8012766:	9006      	str	r0, [sp, #24]
 8012768:	9107      	str	r1, [sp, #28]
 801276a:	9104      	str	r1, [sp, #16]
 801276c:	4808      	ldr	r0, [pc, #32]	@ (8012790 <siprintf+0x38>)
 801276e:	4909      	ldr	r1, [pc, #36]	@ (8012794 <siprintf+0x3c>)
 8012770:	f853 2b04 	ldr.w	r2, [r3], #4
 8012774:	9105      	str	r1, [sp, #20]
 8012776:	a902      	add	r1, sp, #8
 8012778:	6800      	ldr	r0, [r0, #0]
 801277a:	9301      	str	r3, [sp, #4]
 801277c:	f000 fa64 	bl	8012c48 <_svfiprintf_r>
 8012780:	9b02      	ldr	r3, [sp, #8]
 8012782:	2200      	movs	r2, #0
 8012784:	701a      	strb	r2, [r3, #0]
 8012786:	b01c      	add	sp, #112	@ 0x70
 8012788:	f85d eb04 	ldr.w	lr, [sp], #4
 801278c:	b003      	add	sp, #12
 801278e:	4770      	bx	lr
 8012790:	20000130 	.word	0x20000130
 8012794:	ffff0208 	.word	0xffff0208

08012798 <__sread>:
 8012798:	b510      	push	{r4, lr}
 801279a:	460c      	mov	r4, r1
 801279c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127a0:	f000 f8a0 	bl	80128e4 <_read_r>
 80127a4:	2800      	cmp	r0, #0
 80127a6:	bfab      	itete	ge
 80127a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80127aa:	89a3      	ldrhlt	r3, [r4, #12]
 80127ac:	181b      	addge	r3, r3, r0
 80127ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80127b2:	bfac      	ite	ge
 80127b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80127b6:	81a3      	strhlt	r3, [r4, #12]
 80127b8:	bd10      	pop	{r4, pc}

080127ba <__swrite>:
 80127ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127be:	461f      	mov	r7, r3
 80127c0:	898b      	ldrh	r3, [r1, #12]
 80127c2:	4605      	mov	r5, r0
 80127c4:	460c      	mov	r4, r1
 80127c6:	05db      	lsls	r3, r3, #23
 80127c8:	4616      	mov	r6, r2
 80127ca:	d505      	bpl.n	80127d8 <__swrite+0x1e>
 80127cc:	2302      	movs	r3, #2
 80127ce:	2200      	movs	r2, #0
 80127d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127d4:	f000 f874 	bl	80128c0 <_lseek_r>
 80127d8:	89a3      	ldrh	r3, [r4, #12]
 80127da:	4632      	mov	r2, r6
 80127dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127e0:	4628      	mov	r0, r5
 80127e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80127e6:	81a3      	strh	r3, [r4, #12]
 80127e8:	463b      	mov	r3, r7
 80127ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127ee:	f000 b88b 	b.w	8012908 <_write_r>

080127f2 <__sseek>:
 80127f2:	b510      	push	{r4, lr}
 80127f4:	460c      	mov	r4, r1
 80127f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127fa:	f000 f861 	bl	80128c0 <_lseek_r>
 80127fe:	1c43      	adds	r3, r0, #1
 8012800:	89a3      	ldrh	r3, [r4, #12]
 8012802:	bf15      	itete	ne
 8012804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801280a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801280e:	81a3      	strheq	r3, [r4, #12]
 8012810:	bf18      	it	ne
 8012812:	81a3      	strhne	r3, [r4, #12]
 8012814:	bd10      	pop	{r4, pc}

08012816 <__sclose>:
 8012816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801281a:	f000 b841 	b.w	80128a0 <_close_r>

0801281e <_vsniprintf_r>:
 801281e:	b530      	push	{r4, r5, lr}
 8012820:	4614      	mov	r4, r2
 8012822:	b09b      	sub	sp, #108	@ 0x6c
 8012824:	4605      	mov	r5, r0
 8012826:	461a      	mov	r2, r3
 8012828:	2c00      	cmp	r4, #0
 801282a:	da05      	bge.n	8012838 <_vsniprintf_r+0x1a>
 801282c:	238b      	movs	r3, #139	@ 0x8b
 801282e:	6003      	str	r3, [r0, #0]
 8012830:	f04f 30ff 	mov.w	r0, #4294967295
 8012834:	b01b      	add	sp, #108	@ 0x6c
 8012836:	bd30      	pop	{r4, r5, pc}
 8012838:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801283c:	9100      	str	r1, [sp, #0]
 801283e:	9104      	str	r1, [sp, #16]
 8012840:	4669      	mov	r1, sp
 8012842:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012846:	bf14      	ite	ne
 8012848:	f104 33ff 	addne.w	r3, r4, #4294967295
 801284c:	4623      	moveq	r3, r4
 801284e:	9302      	str	r3, [sp, #8]
 8012850:	9305      	str	r3, [sp, #20]
 8012852:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012856:	f8ad 300e 	strh.w	r3, [sp, #14]
 801285a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801285c:	f000 f9f4 	bl	8012c48 <_svfiprintf_r>
 8012860:	1c43      	adds	r3, r0, #1
 8012862:	bfbc      	itt	lt
 8012864:	238b      	movlt	r3, #139	@ 0x8b
 8012866:	602b      	strlt	r3, [r5, #0]
 8012868:	2c00      	cmp	r4, #0
 801286a:	d0e3      	beq.n	8012834 <_vsniprintf_r+0x16>
 801286c:	9b00      	ldr	r3, [sp, #0]
 801286e:	2200      	movs	r2, #0
 8012870:	701a      	strb	r2, [r3, #0]
 8012872:	e7df      	b.n	8012834 <_vsniprintf_r+0x16>

08012874 <vsniprintf>:
 8012874:	b507      	push	{r0, r1, r2, lr}
 8012876:	9300      	str	r3, [sp, #0]
 8012878:	4613      	mov	r3, r2
 801287a:	460a      	mov	r2, r1
 801287c:	4601      	mov	r1, r0
 801287e:	4803      	ldr	r0, [pc, #12]	@ (801288c <vsniprintf+0x18>)
 8012880:	6800      	ldr	r0, [r0, #0]
 8012882:	f7ff ffcc 	bl	801281e <_vsniprintf_r>
 8012886:	b003      	add	sp, #12
 8012888:	f85d fb04 	ldr.w	pc, [sp], #4
 801288c:	20000130 	.word	0x20000130

08012890 <memset>:
 8012890:	4402      	add	r2, r0
 8012892:	4603      	mov	r3, r0
 8012894:	4293      	cmp	r3, r2
 8012896:	d100      	bne.n	801289a <memset+0xa>
 8012898:	4770      	bx	lr
 801289a:	f803 1b01 	strb.w	r1, [r3], #1
 801289e:	e7f9      	b.n	8012894 <memset+0x4>

080128a0 <_close_r>:
 80128a0:	b538      	push	{r3, r4, r5, lr}
 80128a2:	2300      	movs	r3, #0
 80128a4:	4d05      	ldr	r5, [pc, #20]	@ (80128bc <_close_r+0x1c>)
 80128a6:	4604      	mov	r4, r0
 80128a8:	4608      	mov	r0, r1
 80128aa:	602b      	str	r3, [r5, #0]
 80128ac:	f7f0 f8b5 	bl	8002a1a <_close>
 80128b0:	1c43      	adds	r3, r0, #1
 80128b2:	d102      	bne.n	80128ba <_close_r+0x1a>
 80128b4:	682b      	ldr	r3, [r5, #0]
 80128b6:	b103      	cbz	r3, 80128ba <_close_r+0x1a>
 80128b8:	6023      	str	r3, [r4, #0]
 80128ba:	bd38      	pop	{r3, r4, r5, pc}
 80128bc:	20011350 	.word	0x20011350

080128c0 <_lseek_r>:
 80128c0:	b538      	push	{r3, r4, r5, lr}
 80128c2:	4604      	mov	r4, r0
 80128c4:	4d06      	ldr	r5, [pc, #24]	@ (80128e0 <_lseek_r+0x20>)
 80128c6:	4608      	mov	r0, r1
 80128c8:	4611      	mov	r1, r2
 80128ca:	2200      	movs	r2, #0
 80128cc:	602a      	str	r2, [r5, #0]
 80128ce:	461a      	mov	r2, r3
 80128d0:	f7f0 f8ca 	bl	8002a68 <_lseek>
 80128d4:	1c43      	adds	r3, r0, #1
 80128d6:	d102      	bne.n	80128de <_lseek_r+0x1e>
 80128d8:	682b      	ldr	r3, [r5, #0]
 80128da:	b103      	cbz	r3, 80128de <_lseek_r+0x1e>
 80128dc:	6023      	str	r3, [r4, #0]
 80128de:	bd38      	pop	{r3, r4, r5, pc}
 80128e0:	20011350 	.word	0x20011350

080128e4 <_read_r>:
 80128e4:	b538      	push	{r3, r4, r5, lr}
 80128e6:	4604      	mov	r4, r0
 80128e8:	4d06      	ldr	r5, [pc, #24]	@ (8012904 <_read_r+0x20>)
 80128ea:	4608      	mov	r0, r1
 80128ec:	4611      	mov	r1, r2
 80128ee:	2200      	movs	r2, #0
 80128f0:	602a      	str	r2, [r5, #0]
 80128f2:	461a      	mov	r2, r3
 80128f4:	f7f0 f858 	bl	80029a8 <_read>
 80128f8:	1c43      	adds	r3, r0, #1
 80128fa:	d102      	bne.n	8012902 <_read_r+0x1e>
 80128fc:	682b      	ldr	r3, [r5, #0]
 80128fe:	b103      	cbz	r3, 8012902 <_read_r+0x1e>
 8012900:	6023      	str	r3, [r4, #0]
 8012902:	bd38      	pop	{r3, r4, r5, pc}
 8012904:	20011350 	.word	0x20011350

08012908 <_write_r>:
 8012908:	b538      	push	{r3, r4, r5, lr}
 801290a:	4604      	mov	r4, r0
 801290c:	4d06      	ldr	r5, [pc, #24]	@ (8012928 <_write_r+0x20>)
 801290e:	4608      	mov	r0, r1
 8012910:	4611      	mov	r1, r2
 8012912:	2200      	movs	r2, #0
 8012914:	602a      	str	r2, [r5, #0]
 8012916:	461a      	mov	r2, r3
 8012918:	f7f0 f863 	bl	80029e2 <_write>
 801291c:	1c43      	adds	r3, r0, #1
 801291e:	d102      	bne.n	8012926 <_write_r+0x1e>
 8012920:	682b      	ldr	r3, [r5, #0]
 8012922:	b103      	cbz	r3, 8012926 <_write_r+0x1e>
 8012924:	6023      	str	r3, [r4, #0]
 8012926:	bd38      	pop	{r3, r4, r5, pc}
 8012928:	20011350 	.word	0x20011350

0801292c <__errno>:
 801292c:	4b01      	ldr	r3, [pc, #4]	@ (8012934 <__errno+0x8>)
 801292e:	6818      	ldr	r0, [r3, #0]
 8012930:	4770      	bx	lr
 8012932:	bf00      	nop
 8012934:	20000130 	.word	0x20000130

08012938 <__libc_init_array>:
 8012938:	b570      	push	{r4, r5, r6, lr}
 801293a:	4d0d      	ldr	r5, [pc, #52]	@ (8012970 <__libc_init_array+0x38>)
 801293c:	2600      	movs	r6, #0
 801293e:	4c0d      	ldr	r4, [pc, #52]	@ (8012974 <__libc_init_array+0x3c>)
 8012940:	1b64      	subs	r4, r4, r5
 8012942:	10a4      	asrs	r4, r4, #2
 8012944:	42a6      	cmp	r6, r4
 8012946:	d109      	bne.n	801295c <__libc_init_array+0x24>
 8012948:	4d0b      	ldr	r5, [pc, #44]	@ (8012978 <__libc_init_array+0x40>)
 801294a:	2600      	movs	r6, #0
 801294c:	4c0b      	ldr	r4, [pc, #44]	@ (801297c <__libc_init_array+0x44>)
 801294e:	f000 ff7d 	bl	801384c <_init>
 8012952:	1b64      	subs	r4, r4, r5
 8012954:	10a4      	asrs	r4, r4, #2
 8012956:	42a6      	cmp	r6, r4
 8012958:	d105      	bne.n	8012966 <__libc_init_array+0x2e>
 801295a:	bd70      	pop	{r4, r5, r6, pc}
 801295c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012960:	3601      	adds	r6, #1
 8012962:	4798      	blx	r3
 8012964:	e7ee      	b.n	8012944 <__libc_init_array+0xc>
 8012966:	f855 3b04 	ldr.w	r3, [r5], #4
 801296a:	3601      	adds	r6, #1
 801296c:	4798      	blx	r3
 801296e:	e7f2      	b.n	8012956 <__libc_init_array+0x1e>
 8012970:	080147c4 	.word	0x080147c4
 8012974:	080147c4 	.word	0x080147c4
 8012978:	080147c4 	.word	0x080147c4
 801297c:	080147c8 	.word	0x080147c8

08012980 <__retarget_lock_init_recursive>:
 8012980:	4770      	bx	lr

08012982 <__retarget_lock_acquire_recursive>:
 8012982:	4770      	bx	lr

08012984 <__retarget_lock_release_recursive>:
 8012984:	4770      	bx	lr

08012986 <memcpy>:
 8012986:	440a      	add	r2, r1
 8012988:	1e43      	subs	r3, r0, #1
 801298a:	4291      	cmp	r1, r2
 801298c:	d100      	bne.n	8012990 <memcpy+0xa>
 801298e:	4770      	bx	lr
 8012990:	b510      	push	{r4, lr}
 8012992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012996:	4291      	cmp	r1, r2
 8012998:	f803 4f01 	strb.w	r4, [r3, #1]!
 801299c:	d1f9      	bne.n	8012992 <memcpy+0xc>
 801299e:	bd10      	pop	{r4, pc}

080129a0 <_free_r>:
 80129a0:	b538      	push	{r3, r4, r5, lr}
 80129a2:	4605      	mov	r5, r0
 80129a4:	2900      	cmp	r1, #0
 80129a6:	d041      	beq.n	8012a2c <_free_r+0x8c>
 80129a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129ac:	1f0c      	subs	r4, r1, #4
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	bfb8      	it	lt
 80129b2:	18e4      	addlt	r4, r4, r3
 80129b4:	f000 f8e0 	bl	8012b78 <__malloc_lock>
 80129b8:	4a1d      	ldr	r2, [pc, #116]	@ (8012a30 <_free_r+0x90>)
 80129ba:	6813      	ldr	r3, [r2, #0]
 80129bc:	b933      	cbnz	r3, 80129cc <_free_r+0x2c>
 80129be:	6063      	str	r3, [r4, #4]
 80129c0:	6014      	str	r4, [r2, #0]
 80129c2:	4628      	mov	r0, r5
 80129c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129c8:	f000 b8dc 	b.w	8012b84 <__malloc_unlock>
 80129cc:	42a3      	cmp	r3, r4
 80129ce:	d908      	bls.n	80129e2 <_free_r+0x42>
 80129d0:	6820      	ldr	r0, [r4, #0]
 80129d2:	1821      	adds	r1, r4, r0
 80129d4:	428b      	cmp	r3, r1
 80129d6:	bf01      	itttt	eq
 80129d8:	6819      	ldreq	r1, [r3, #0]
 80129da:	685b      	ldreq	r3, [r3, #4]
 80129dc:	1809      	addeq	r1, r1, r0
 80129de:	6021      	streq	r1, [r4, #0]
 80129e0:	e7ed      	b.n	80129be <_free_r+0x1e>
 80129e2:	461a      	mov	r2, r3
 80129e4:	685b      	ldr	r3, [r3, #4]
 80129e6:	b10b      	cbz	r3, 80129ec <_free_r+0x4c>
 80129e8:	42a3      	cmp	r3, r4
 80129ea:	d9fa      	bls.n	80129e2 <_free_r+0x42>
 80129ec:	6811      	ldr	r1, [r2, #0]
 80129ee:	1850      	adds	r0, r2, r1
 80129f0:	42a0      	cmp	r0, r4
 80129f2:	d10b      	bne.n	8012a0c <_free_r+0x6c>
 80129f4:	6820      	ldr	r0, [r4, #0]
 80129f6:	4401      	add	r1, r0
 80129f8:	1850      	adds	r0, r2, r1
 80129fa:	6011      	str	r1, [r2, #0]
 80129fc:	4283      	cmp	r3, r0
 80129fe:	d1e0      	bne.n	80129c2 <_free_r+0x22>
 8012a00:	6818      	ldr	r0, [r3, #0]
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	4408      	add	r0, r1
 8012a06:	6053      	str	r3, [r2, #4]
 8012a08:	6010      	str	r0, [r2, #0]
 8012a0a:	e7da      	b.n	80129c2 <_free_r+0x22>
 8012a0c:	d902      	bls.n	8012a14 <_free_r+0x74>
 8012a0e:	230c      	movs	r3, #12
 8012a10:	602b      	str	r3, [r5, #0]
 8012a12:	e7d6      	b.n	80129c2 <_free_r+0x22>
 8012a14:	6820      	ldr	r0, [r4, #0]
 8012a16:	1821      	adds	r1, r4, r0
 8012a18:	428b      	cmp	r3, r1
 8012a1a:	bf02      	ittt	eq
 8012a1c:	6819      	ldreq	r1, [r3, #0]
 8012a1e:	685b      	ldreq	r3, [r3, #4]
 8012a20:	1809      	addeq	r1, r1, r0
 8012a22:	6063      	str	r3, [r4, #4]
 8012a24:	bf08      	it	eq
 8012a26:	6021      	streq	r1, [r4, #0]
 8012a28:	6054      	str	r4, [r2, #4]
 8012a2a:	e7ca      	b.n	80129c2 <_free_r+0x22>
 8012a2c:	bd38      	pop	{r3, r4, r5, pc}
 8012a2e:	bf00      	nop
 8012a30:	2001135c 	.word	0x2001135c

08012a34 <sbrk_aligned>:
 8012a34:	b570      	push	{r4, r5, r6, lr}
 8012a36:	4e0f      	ldr	r6, [pc, #60]	@ (8012a74 <sbrk_aligned+0x40>)
 8012a38:	460c      	mov	r4, r1
 8012a3a:	4605      	mov	r5, r0
 8012a3c:	6831      	ldr	r1, [r6, #0]
 8012a3e:	b911      	cbnz	r1, 8012a46 <sbrk_aligned+0x12>
 8012a40:	f000 fe2c 	bl	801369c <_sbrk_r>
 8012a44:	6030      	str	r0, [r6, #0]
 8012a46:	4621      	mov	r1, r4
 8012a48:	4628      	mov	r0, r5
 8012a4a:	f000 fe27 	bl	801369c <_sbrk_r>
 8012a4e:	1c43      	adds	r3, r0, #1
 8012a50:	d103      	bne.n	8012a5a <sbrk_aligned+0x26>
 8012a52:	f04f 34ff 	mov.w	r4, #4294967295
 8012a56:	4620      	mov	r0, r4
 8012a58:	bd70      	pop	{r4, r5, r6, pc}
 8012a5a:	1cc4      	adds	r4, r0, #3
 8012a5c:	f024 0403 	bic.w	r4, r4, #3
 8012a60:	42a0      	cmp	r0, r4
 8012a62:	d0f8      	beq.n	8012a56 <sbrk_aligned+0x22>
 8012a64:	1a21      	subs	r1, r4, r0
 8012a66:	4628      	mov	r0, r5
 8012a68:	f000 fe18 	bl	801369c <_sbrk_r>
 8012a6c:	3001      	adds	r0, #1
 8012a6e:	d1f2      	bne.n	8012a56 <sbrk_aligned+0x22>
 8012a70:	e7ef      	b.n	8012a52 <sbrk_aligned+0x1e>
 8012a72:	bf00      	nop
 8012a74:	20011358 	.word	0x20011358

08012a78 <_malloc_r>:
 8012a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a7c:	1ccd      	adds	r5, r1, #3
 8012a7e:	4606      	mov	r6, r0
 8012a80:	f025 0503 	bic.w	r5, r5, #3
 8012a84:	3508      	adds	r5, #8
 8012a86:	2d0c      	cmp	r5, #12
 8012a88:	bf38      	it	cc
 8012a8a:	250c      	movcc	r5, #12
 8012a8c:	2d00      	cmp	r5, #0
 8012a8e:	db01      	blt.n	8012a94 <_malloc_r+0x1c>
 8012a90:	42a9      	cmp	r1, r5
 8012a92:	d904      	bls.n	8012a9e <_malloc_r+0x26>
 8012a94:	230c      	movs	r3, #12
 8012a96:	6033      	str	r3, [r6, #0]
 8012a98:	2000      	movs	r0, #0
 8012a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012b74 <_malloc_r+0xfc>
 8012aa2:	f000 f869 	bl	8012b78 <__malloc_lock>
 8012aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8012aaa:	461c      	mov	r4, r3
 8012aac:	bb44      	cbnz	r4, 8012b00 <_malloc_r+0x88>
 8012aae:	4629      	mov	r1, r5
 8012ab0:	4630      	mov	r0, r6
 8012ab2:	f7ff ffbf 	bl	8012a34 <sbrk_aligned>
 8012ab6:	1c43      	adds	r3, r0, #1
 8012ab8:	4604      	mov	r4, r0
 8012aba:	d158      	bne.n	8012b6e <_malloc_r+0xf6>
 8012abc:	f8d8 4000 	ldr.w	r4, [r8]
 8012ac0:	4627      	mov	r7, r4
 8012ac2:	2f00      	cmp	r7, #0
 8012ac4:	d143      	bne.n	8012b4e <_malloc_r+0xd6>
 8012ac6:	2c00      	cmp	r4, #0
 8012ac8:	d04b      	beq.n	8012b62 <_malloc_r+0xea>
 8012aca:	6823      	ldr	r3, [r4, #0]
 8012acc:	4639      	mov	r1, r7
 8012ace:	4630      	mov	r0, r6
 8012ad0:	eb04 0903 	add.w	r9, r4, r3
 8012ad4:	f000 fde2 	bl	801369c <_sbrk_r>
 8012ad8:	4581      	cmp	r9, r0
 8012ada:	d142      	bne.n	8012b62 <_malloc_r+0xea>
 8012adc:	6821      	ldr	r1, [r4, #0]
 8012ade:	4630      	mov	r0, r6
 8012ae0:	1a6d      	subs	r5, r5, r1
 8012ae2:	4629      	mov	r1, r5
 8012ae4:	f7ff ffa6 	bl	8012a34 <sbrk_aligned>
 8012ae8:	3001      	adds	r0, #1
 8012aea:	d03a      	beq.n	8012b62 <_malloc_r+0xea>
 8012aec:	6823      	ldr	r3, [r4, #0]
 8012aee:	442b      	add	r3, r5
 8012af0:	6023      	str	r3, [r4, #0]
 8012af2:	f8d8 3000 	ldr.w	r3, [r8]
 8012af6:	685a      	ldr	r2, [r3, #4]
 8012af8:	bb62      	cbnz	r2, 8012b54 <_malloc_r+0xdc>
 8012afa:	f8c8 7000 	str.w	r7, [r8]
 8012afe:	e00f      	b.n	8012b20 <_malloc_r+0xa8>
 8012b00:	6822      	ldr	r2, [r4, #0]
 8012b02:	1b52      	subs	r2, r2, r5
 8012b04:	d420      	bmi.n	8012b48 <_malloc_r+0xd0>
 8012b06:	2a0b      	cmp	r2, #11
 8012b08:	d917      	bls.n	8012b3a <_malloc_r+0xc2>
 8012b0a:	1961      	adds	r1, r4, r5
 8012b0c:	42a3      	cmp	r3, r4
 8012b0e:	6025      	str	r5, [r4, #0]
 8012b10:	bf18      	it	ne
 8012b12:	6059      	strne	r1, [r3, #4]
 8012b14:	6863      	ldr	r3, [r4, #4]
 8012b16:	bf08      	it	eq
 8012b18:	f8c8 1000 	streq.w	r1, [r8]
 8012b1c:	5162      	str	r2, [r4, r5]
 8012b1e:	604b      	str	r3, [r1, #4]
 8012b20:	4630      	mov	r0, r6
 8012b22:	f000 f82f 	bl	8012b84 <__malloc_unlock>
 8012b26:	f104 000b 	add.w	r0, r4, #11
 8012b2a:	1d23      	adds	r3, r4, #4
 8012b2c:	f020 0007 	bic.w	r0, r0, #7
 8012b30:	1ac2      	subs	r2, r0, r3
 8012b32:	bf1c      	itt	ne
 8012b34:	1a1b      	subne	r3, r3, r0
 8012b36:	50a3      	strne	r3, [r4, r2]
 8012b38:	e7af      	b.n	8012a9a <_malloc_r+0x22>
 8012b3a:	6862      	ldr	r2, [r4, #4]
 8012b3c:	42a3      	cmp	r3, r4
 8012b3e:	bf0c      	ite	eq
 8012b40:	f8c8 2000 	streq.w	r2, [r8]
 8012b44:	605a      	strne	r2, [r3, #4]
 8012b46:	e7eb      	b.n	8012b20 <_malloc_r+0xa8>
 8012b48:	4623      	mov	r3, r4
 8012b4a:	6864      	ldr	r4, [r4, #4]
 8012b4c:	e7ae      	b.n	8012aac <_malloc_r+0x34>
 8012b4e:	463c      	mov	r4, r7
 8012b50:	687f      	ldr	r7, [r7, #4]
 8012b52:	e7b6      	b.n	8012ac2 <_malloc_r+0x4a>
 8012b54:	461a      	mov	r2, r3
 8012b56:	685b      	ldr	r3, [r3, #4]
 8012b58:	42a3      	cmp	r3, r4
 8012b5a:	d1fb      	bne.n	8012b54 <_malloc_r+0xdc>
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	6053      	str	r3, [r2, #4]
 8012b60:	e7de      	b.n	8012b20 <_malloc_r+0xa8>
 8012b62:	230c      	movs	r3, #12
 8012b64:	4630      	mov	r0, r6
 8012b66:	6033      	str	r3, [r6, #0]
 8012b68:	f000 f80c 	bl	8012b84 <__malloc_unlock>
 8012b6c:	e794      	b.n	8012a98 <_malloc_r+0x20>
 8012b6e:	6005      	str	r5, [r0, #0]
 8012b70:	e7d6      	b.n	8012b20 <_malloc_r+0xa8>
 8012b72:	bf00      	nop
 8012b74:	2001135c 	.word	0x2001135c

08012b78 <__malloc_lock>:
 8012b78:	4801      	ldr	r0, [pc, #4]	@ (8012b80 <__malloc_lock+0x8>)
 8012b7a:	f7ff bf02 	b.w	8012982 <__retarget_lock_acquire_recursive>
 8012b7e:	bf00      	nop
 8012b80:	20011354 	.word	0x20011354

08012b84 <__malloc_unlock>:
 8012b84:	4801      	ldr	r0, [pc, #4]	@ (8012b8c <__malloc_unlock+0x8>)
 8012b86:	f7ff befd 	b.w	8012984 <__retarget_lock_release_recursive>
 8012b8a:	bf00      	nop
 8012b8c:	20011354 	.word	0x20011354

08012b90 <__ssputs_r>:
 8012b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b94:	461f      	mov	r7, r3
 8012b96:	688e      	ldr	r6, [r1, #8]
 8012b98:	4682      	mov	sl, r0
 8012b9a:	460c      	mov	r4, r1
 8012b9c:	42be      	cmp	r6, r7
 8012b9e:	4690      	mov	r8, r2
 8012ba0:	680b      	ldr	r3, [r1, #0]
 8012ba2:	d82d      	bhi.n	8012c00 <__ssputs_r+0x70>
 8012ba4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012ba8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012bac:	d026      	beq.n	8012bfc <__ssputs_r+0x6c>
 8012bae:	6965      	ldr	r5, [r4, #20]
 8012bb0:	6909      	ldr	r1, [r1, #16]
 8012bb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012bb6:	eba3 0901 	sub.w	r9, r3, r1
 8012bba:	1c7b      	adds	r3, r7, #1
 8012bbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012bc0:	444b      	add	r3, r9
 8012bc2:	106d      	asrs	r5, r5, #1
 8012bc4:	429d      	cmp	r5, r3
 8012bc6:	bf38      	it	cc
 8012bc8:	461d      	movcc	r5, r3
 8012bca:	0553      	lsls	r3, r2, #21
 8012bcc:	d527      	bpl.n	8012c1e <__ssputs_r+0x8e>
 8012bce:	4629      	mov	r1, r5
 8012bd0:	f7ff ff52 	bl	8012a78 <_malloc_r>
 8012bd4:	4606      	mov	r6, r0
 8012bd6:	b360      	cbz	r0, 8012c32 <__ssputs_r+0xa2>
 8012bd8:	464a      	mov	r2, r9
 8012bda:	6921      	ldr	r1, [r4, #16]
 8012bdc:	f7ff fed3 	bl	8012986 <memcpy>
 8012be0:	89a3      	ldrh	r3, [r4, #12]
 8012be2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012bea:	81a3      	strh	r3, [r4, #12]
 8012bec:	6126      	str	r6, [r4, #16]
 8012bee:	444e      	add	r6, r9
 8012bf0:	6165      	str	r5, [r4, #20]
 8012bf2:	eba5 0509 	sub.w	r5, r5, r9
 8012bf6:	6026      	str	r6, [r4, #0]
 8012bf8:	463e      	mov	r6, r7
 8012bfa:	60a5      	str	r5, [r4, #8]
 8012bfc:	42be      	cmp	r6, r7
 8012bfe:	d900      	bls.n	8012c02 <__ssputs_r+0x72>
 8012c00:	463e      	mov	r6, r7
 8012c02:	4632      	mov	r2, r6
 8012c04:	4641      	mov	r1, r8
 8012c06:	6820      	ldr	r0, [r4, #0]
 8012c08:	f000 fd2e 	bl	8013668 <memmove>
 8012c0c:	68a3      	ldr	r3, [r4, #8]
 8012c0e:	2000      	movs	r0, #0
 8012c10:	1b9b      	subs	r3, r3, r6
 8012c12:	60a3      	str	r3, [r4, #8]
 8012c14:	6823      	ldr	r3, [r4, #0]
 8012c16:	4433      	add	r3, r6
 8012c18:	6023      	str	r3, [r4, #0]
 8012c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c1e:	462a      	mov	r2, r5
 8012c20:	f000 fd5a 	bl	80136d8 <_realloc_r>
 8012c24:	4606      	mov	r6, r0
 8012c26:	2800      	cmp	r0, #0
 8012c28:	d1e0      	bne.n	8012bec <__ssputs_r+0x5c>
 8012c2a:	6921      	ldr	r1, [r4, #16]
 8012c2c:	4650      	mov	r0, sl
 8012c2e:	f7ff feb7 	bl	80129a0 <_free_r>
 8012c32:	230c      	movs	r3, #12
 8012c34:	f04f 30ff 	mov.w	r0, #4294967295
 8012c38:	f8ca 3000 	str.w	r3, [sl]
 8012c3c:	89a3      	ldrh	r3, [r4, #12]
 8012c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c42:	81a3      	strh	r3, [r4, #12]
 8012c44:	e7e9      	b.n	8012c1a <__ssputs_r+0x8a>
	...

08012c48 <_svfiprintf_r>:
 8012c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c4c:	4698      	mov	r8, r3
 8012c4e:	898b      	ldrh	r3, [r1, #12]
 8012c50:	b09d      	sub	sp, #116	@ 0x74
 8012c52:	4607      	mov	r7, r0
 8012c54:	061b      	lsls	r3, r3, #24
 8012c56:	460d      	mov	r5, r1
 8012c58:	4614      	mov	r4, r2
 8012c5a:	d510      	bpl.n	8012c7e <_svfiprintf_r+0x36>
 8012c5c:	690b      	ldr	r3, [r1, #16]
 8012c5e:	b973      	cbnz	r3, 8012c7e <_svfiprintf_r+0x36>
 8012c60:	2140      	movs	r1, #64	@ 0x40
 8012c62:	f7ff ff09 	bl	8012a78 <_malloc_r>
 8012c66:	6028      	str	r0, [r5, #0]
 8012c68:	6128      	str	r0, [r5, #16]
 8012c6a:	b930      	cbnz	r0, 8012c7a <_svfiprintf_r+0x32>
 8012c6c:	230c      	movs	r3, #12
 8012c6e:	603b      	str	r3, [r7, #0]
 8012c70:	f04f 30ff 	mov.w	r0, #4294967295
 8012c74:	b01d      	add	sp, #116	@ 0x74
 8012c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c7a:	2340      	movs	r3, #64	@ 0x40
 8012c7c:	616b      	str	r3, [r5, #20]
 8012c7e:	2300      	movs	r3, #0
 8012c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c84:	f04f 0901 	mov.w	r9, #1
 8012c88:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8012e2c <_svfiprintf_r+0x1e4>
 8012c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c8e:	2320      	movs	r3, #32
 8012c90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c94:	2330      	movs	r3, #48	@ 0x30
 8012c96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c9a:	4623      	mov	r3, r4
 8012c9c:	469a      	mov	sl, r3
 8012c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ca2:	b10a      	cbz	r2, 8012ca8 <_svfiprintf_r+0x60>
 8012ca4:	2a25      	cmp	r2, #37	@ 0x25
 8012ca6:	d1f9      	bne.n	8012c9c <_svfiprintf_r+0x54>
 8012ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8012cac:	d00b      	beq.n	8012cc6 <_svfiprintf_r+0x7e>
 8012cae:	465b      	mov	r3, fp
 8012cb0:	4622      	mov	r2, r4
 8012cb2:	4629      	mov	r1, r5
 8012cb4:	4638      	mov	r0, r7
 8012cb6:	f7ff ff6b 	bl	8012b90 <__ssputs_r>
 8012cba:	3001      	adds	r0, #1
 8012cbc:	f000 80a7 	beq.w	8012e0e <_svfiprintf_r+0x1c6>
 8012cc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012cc2:	445a      	add	r2, fp
 8012cc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8012cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	f000 809f 	beq.w	8012e0e <_svfiprintf_r+0x1c6>
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8012cd6:	f10a 0a01 	add.w	sl, sl, #1
 8012cda:	9304      	str	r3, [sp, #16]
 8012cdc:	9307      	str	r3, [sp, #28]
 8012cde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012ce2:	931a      	str	r3, [sp, #104]	@ 0x68
 8012ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ce8:	4654      	mov	r4, sl
 8012cea:	2205      	movs	r2, #5
 8012cec:	484f      	ldr	r0, [pc, #316]	@ (8012e2c <_svfiprintf_r+0x1e4>)
 8012cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cf2:	f000 fce3 	bl	80136bc <memchr>
 8012cf6:	9a04      	ldr	r2, [sp, #16]
 8012cf8:	b9d8      	cbnz	r0, 8012d32 <_svfiprintf_r+0xea>
 8012cfa:	06d0      	lsls	r0, r2, #27
 8012cfc:	bf44      	itt	mi
 8012cfe:	2320      	movmi	r3, #32
 8012d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d04:	0711      	lsls	r1, r2, #28
 8012d06:	bf44      	itt	mi
 8012d08:	232b      	movmi	r3, #43	@ 0x2b
 8012d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8012d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d14:	d015      	beq.n	8012d42 <_svfiprintf_r+0xfa>
 8012d16:	9a07      	ldr	r2, [sp, #28]
 8012d18:	4654      	mov	r4, sl
 8012d1a:	2000      	movs	r0, #0
 8012d1c:	f04f 0c0a 	mov.w	ip, #10
 8012d20:	4621      	mov	r1, r4
 8012d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d26:	3b30      	subs	r3, #48	@ 0x30
 8012d28:	2b09      	cmp	r3, #9
 8012d2a:	d94b      	bls.n	8012dc4 <_svfiprintf_r+0x17c>
 8012d2c:	b1b0      	cbz	r0, 8012d5c <_svfiprintf_r+0x114>
 8012d2e:	9207      	str	r2, [sp, #28]
 8012d30:	e014      	b.n	8012d5c <_svfiprintf_r+0x114>
 8012d32:	eba0 0308 	sub.w	r3, r0, r8
 8012d36:	46a2      	mov	sl, r4
 8012d38:	fa09 f303 	lsl.w	r3, r9, r3
 8012d3c:	4313      	orrs	r3, r2
 8012d3e:	9304      	str	r3, [sp, #16]
 8012d40:	e7d2      	b.n	8012ce8 <_svfiprintf_r+0xa0>
 8012d42:	9b03      	ldr	r3, [sp, #12]
 8012d44:	1d19      	adds	r1, r3, #4
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	9103      	str	r1, [sp, #12]
 8012d4c:	bfbb      	ittet	lt
 8012d4e:	425b      	neglt	r3, r3
 8012d50:	f042 0202 	orrlt.w	r2, r2, #2
 8012d54:	9307      	strge	r3, [sp, #28]
 8012d56:	9307      	strlt	r3, [sp, #28]
 8012d58:	bfb8      	it	lt
 8012d5a:	9204      	strlt	r2, [sp, #16]
 8012d5c:	7823      	ldrb	r3, [r4, #0]
 8012d5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d60:	d10a      	bne.n	8012d78 <_svfiprintf_r+0x130>
 8012d62:	7863      	ldrb	r3, [r4, #1]
 8012d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d66:	d132      	bne.n	8012dce <_svfiprintf_r+0x186>
 8012d68:	9b03      	ldr	r3, [sp, #12]
 8012d6a:	3402      	adds	r4, #2
 8012d6c:	1d1a      	adds	r2, r3, #4
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d74:	9203      	str	r2, [sp, #12]
 8012d76:	9305      	str	r3, [sp, #20]
 8012d78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012e3c <_svfiprintf_r+0x1f4>
 8012d7c:	2203      	movs	r2, #3
 8012d7e:	7821      	ldrb	r1, [r4, #0]
 8012d80:	4650      	mov	r0, sl
 8012d82:	f000 fc9b 	bl	80136bc <memchr>
 8012d86:	b138      	cbz	r0, 8012d98 <_svfiprintf_r+0x150>
 8012d88:	eba0 000a 	sub.w	r0, r0, sl
 8012d8c:	2240      	movs	r2, #64	@ 0x40
 8012d8e:	9b04      	ldr	r3, [sp, #16]
 8012d90:	3401      	adds	r4, #1
 8012d92:	4082      	lsls	r2, r0
 8012d94:	4313      	orrs	r3, r2
 8012d96:	9304      	str	r3, [sp, #16]
 8012d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d9c:	2206      	movs	r2, #6
 8012d9e:	4824      	ldr	r0, [pc, #144]	@ (8012e30 <_svfiprintf_r+0x1e8>)
 8012da0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012da4:	f000 fc8a 	bl	80136bc <memchr>
 8012da8:	2800      	cmp	r0, #0
 8012daa:	d036      	beq.n	8012e1a <_svfiprintf_r+0x1d2>
 8012dac:	4b21      	ldr	r3, [pc, #132]	@ (8012e34 <_svfiprintf_r+0x1ec>)
 8012dae:	bb1b      	cbnz	r3, 8012df8 <_svfiprintf_r+0x1b0>
 8012db0:	9b03      	ldr	r3, [sp, #12]
 8012db2:	3307      	adds	r3, #7
 8012db4:	f023 0307 	bic.w	r3, r3, #7
 8012db8:	3308      	adds	r3, #8
 8012dba:	9303      	str	r3, [sp, #12]
 8012dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dbe:	4433      	add	r3, r6
 8012dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8012dc2:	e76a      	b.n	8012c9a <_svfiprintf_r+0x52>
 8012dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8012dc8:	460c      	mov	r4, r1
 8012dca:	2001      	movs	r0, #1
 8012dcc:	e7a8      	b.n	8012d20 <_svfiprintf_r+0xd8>
 8012dce:	2300      	movs	r3, #0
 8012dd0:	3401      	adds	r4, #1
 8012dd2:	f04f 0c0a 	mov.w	ip, #10
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	9305      	str	r3, [sp, #20]
 8012dda:	4620      	mov	r0, r4
 8012ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012de0:	3a30      	subs	r2, #48	@ 0x30
 8012de2:	2a09      	cmp	r2, #9
 8012de4:	d903      	bls.n	8012dee <_svfiprintf_r+0x1a6>
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d0c6      	beq.n	8012d78 <_svfiprintf_r+0x130>
 8012dea:	9105      	str	r1, [sp, #20]
 8012dec:	e7c4      	b.n	8012d78 <_svfiprintf_r+0x130>
 8012dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8012df2:	4604      	mov	r4, r0
 8012df4:	2301      	movs	r3, #1
 8012df6:	e7f0      	b.n	8012dda <_svfiprintf_r+0x192>
 8012df8:	ab03      	add	r3, sp, #12
 8012dfa:	462a      	mov	r2, r5
 8012dfc:	a904      	add	r1, sp, #16
 8012dfe:	4638      	mov	r0, r7
 8012e00:	9300      	str	r3, [sp, #0]
 8012e02:	4b0d      	ldr	r3, [pc, #52]	@ (8012e38 <_svfiprintf_r+0x1f0>)
 8012e04:	f3af 8000 	nop.w
 8012e08:	1c42      	adds	r2, r0, #1
 8012e0a:	4606      	mov	r6, r0
 8012e0c:	d1d6      	bne.n	8012dbc <_svfiprintf_r+0x174>
 8012e0e:	89ab      	ldrh	r3, [r5, #12]
 8012e10:	065b      	lsls	r3, r3, #25
 8012e12:	f53f af2d 	bmi.w	8012c70 <_svfiprintf_r+0x28>
 8012e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e18:	e72c      	b.n	8012c74 <_svfiprintf_r+0x2c>
 8012e1a:	ab03      	add	r3, sp, #12
 8012e1c:	462a      	mov	r2, r5
 8012e1e:	a904      	add	r1, sp, #16
 8012e20:	4638      	mov	r0, r7
 8012e22:	9300      	str	r3, [sp, #0]
 8012e24:	4b04      	ldr	r3, [pc, #16]	@ (8012e38 <_svfiprintf_r+0x1f0>)
 8012e26:	f000 f9bf 	bl	80131a8 <_printf_i>
 8012e2a:	e7ed      	b.n	8012e08 <_svfiprintf_r+0x1c0>
 8012e2c:	08014788 	.word	0x08014788
 8012e30:	08014792 	.word	0x08014792
 8012e34:	00000000 	.word	0x00000000
 8012e38:	08012b91 	.word	0x08012b91
 8012e3c:	0801478e 	.word	0x0801478e

08012e40 <__sfputc_r>:
 8012e40:	6893      	ldr	r3, [r2, #8]
 8012e42:	3b01      	subs	r3, #1
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	6093      	str	r3, [r2, #8]
 8012e48:	b410      	push	{r4}
 8012e4a:	da08      	bge.n	8012e5e <__sfputc_r+0x1e>
 8012e4c:	6994      	ldr	r4, [r2, #24]
 8012e4e:	42a3      	cmp	r3, r4
 8012e50:	db01      	blt.n	8012e56 <__sfputc_r+0x16>
 8012e52:	290a      	cmp	r1, #10
 8012e54:	d103      	bne.n	8012e5e <__sfputc_r+0x1e>
 8012e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e5a:	f000 bb71 	b.w	8013540 <__swbuf_r>
 8012e5e:	6813      	ldr	r3, [r2, #0]
 8012e60:	1c58      	adds	r0, r3, #1
 8012e62:	6010      	str	r0, [r2, #0]
 8012e64:	4608      	mov	r0, r1
 8012e66:	7019      	strb	r1, [r3, #0]
 8012e68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012e6c:	4770      	bx	lr

08012e6e <__sfputs_r>:
 8012e6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e70:	4606      	mov	r6, r0
 8012e72:	460f      	mov	r7, r1
 8012e74:	4614      	mov	r4, r2
 8012e76:	18d5      	adds	r5, r2, r3
 8012e78:	42ac      	cmp	r4, r5
 8012e7a:	d101      	bne.n	8012e80 <__sfputs_r+0x12>
 8012e7c:	2000      	movs	r0, #0
 8012e7e:	e007      	b.n	8012e90 <__sfputs_r+0x22>
 8012e80:	463a      	mov	r2, r7
 8012e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e86:	4630      	mov	r0, r6
 8012e88:	f7ff ffda 	bl	8012e40 <__sfputc_r>
 8012e8c:	1c43      	adds	r3, r0, #1
 8012e8e:	d1f3      	bne.n	8012e78 <__sfputs_r+0xa>
 8012e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012e94 <_vfiprintf_r>:
 8012e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e98:	460d      	mov	r5, r1
 8012e9a:	b09d      	sub	sp, #116	@ 0x74
 8012e9c:	4614      	mov	r4, r2
 8012e9e:	4698      	mov	r8, r3
 8012ea0:	4606      	mov	r6, r0
 8012ea2:	b118      	cbz	r0, 8012eac <_vfiprintf_r+0x18>
 8012ea4:	6a03      	ldr	r3, [r0, #32]
 8012ea6:	b90b      	cbnz	r3, 8012eac <_vfiprintf_r+0x18>
 8012ea8:	f7ff fbda 	bl	8012660 <__sinit>
 8012eac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012eae:	07d9      	lsls	r1, r3, #31
 8012eb0:	d405      	bmi.n	8012ebe <_vfiprintf_r+0x2a>
 8012eb2:	89ab      	ldrh	r3, [r5, #12]
 8012eb4:	059a      	lsls	r2, r3, #22
 8012eb6:	d402      	bmi.n	8012ebe <_vfiprintf_r+0x2a>
 8012eb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012eba:	f7ff fd62 	bl	8012982 <__retarget_lock_acquire_recursive>
 8012ebe:	89ab      	ldrh	r3, [r5, #12]
 8012ec0:	071b      	lsls	r3, r3, #28
 8012ec2:	d501      	bpl.n	8012ec8 <_vfiprintf_r+0x34>
 8012ec4:	692b      	ldr	r3, [r5, #16]
 8012ec6:	b99b      	cbnz	r3, 8012ef0 <_vfiprintf_r+0x5c>
 8012ec8:	4629      	mov	r1, r5
 8012eca:	4630      	mov	r0, r6
 8012ecc:	f000 fb76 	bl	80135bc <__swsetup_r>
 8012ed0:	b170      	cbz	r0, 8012ef0 <_vfiprintf_r+0x5c>
 8012ed2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ed4:	07dc      	lsls	r4, r3, #31
 8012ed6:	d504      	bpl.n	8012ee2 <_vfiprintf_r+0x4e>
 8012ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8012edc:	b01d      	add	sp, #116	@ 0x74
 8012ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee2:	89ab      	ldrh	r3, [r5, #12]
 8012ee4:	0598      	lsls	r0, r3, #22
 8012ee6:	d4f7      	bmi.n	8012ed8 <_vfiprintf_r+0x44>
 8012ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012eea:	f7ff fd4b 	bl	8012984 <__retarget_lock_release_recursive>
 8012eee:	e7f3      	b.n	8012ed8 <_vfiprintf_r+0x44>
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ef6:	f04f 0901 	mov.w	r9, #1
 8012efa:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80130b0 <_vfiprintf_r+0x21c>
 8012efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f00:	2320      	movs	r3, #32
 8012f02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012f06:	2330      	movs	r3, #48	@ 0x30
 8012f08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012f0c:	4623      	mov	r3, r4
 8012f0e:	469a      	mov	sl, r3
 8012f10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f14:	b10a      	cbz	r2, 8012f1a <_vfiprintf_r+0x86>
 8012f16:	2a25      	cmp	r2, #37	@ 0x25
 8012f18:	d1f9      	bne.n	8012f0e <_vfiprintf_r+0x7a>
 8012f1a:	ebba 0b04 	subs.w	fp, sl, r4
 8012f1e:	d00b      	beq.n	8012f38 <_vfiprintf_r+0xa4>
 8012f20:	465b      	mov	r3, fp
 8012f22:	4622      	mov	r2, r4
 8012f24:	4629      	mov	r1, r5
 8012f26:	4630      	mov	r0, r6
 8012f28:	f7ff ffa1 	bl	8012e6e <__sfputs_r>
 8012f2c:	3001      	adds	r0, #1
 8012f2e:	f000 80a7 	beq.w	8013080 <_vfiprintf_r+0x1ec>
 8012f32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f34:	445a      	add	r2, fp
 8012f36:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f38:	f89a 3000 	ldrb.w	r3, [sl]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	f000 809f 	beq.w	8013080 <_vfiprintf_r+0x1ec>
 8012f42:	2300      	movs	r3, #0
 8012f44:	f04f 32ff 	mov.w	r2, #4294967295
 8012f48:	f10a 0a01 	add.w	sl, sl, #1
 8012f4c:	9304      	str	r3, [sp, #16]
 8012f4e:	9307      	str	r3, [sp, #28]
 8012f50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012f54:	931a      	str	r3, [sp, #104]	@ 0x68
 8012f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f5a:	4654      	mov	r4, sl
 8012f5c:	2205      	movs	r2, #5
 8012f5e:	4854      	ldr	r0, [pc, #336]	@ (80130b0 <_vfiprintf_r+0x21c>)
 8012f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f64:	f000 fbaa 	bl	80136bc <memchr>
 8012f68:	9a04      	ldr	r2, [sp, #16]
 8012f6a:	b9d8      	cbnz	r0, 8012fa4 <_vfiprintf_r+0x110>
 8012f6c:	06d1      	lsls	r1, r2, #27
 8012f6e:	bf44      	itt	mi
 8012f70:	2320      	movmi	r3, #32
 8012f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f76:	0713      	lsls	r3, r2, #28
 8012f78:	bf44      	itt	mi
 8012f7a:	232b      	movmi	r3, #43	@ 0x2b
 8012f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f80:	f89a 3000 	ldrb.w	r3, [sl]
 8012f84:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f86:	d015      	beq.n	8012fb4 <_vfiprintf_r+0x120>
 8012f88:	9a07      	ldr	r2, [sp, #28]
 8012f8a:	4654      	mov	r4, sl
 8012f8c:	2000      	movs	r0, #0
 8012f8e:	f04f 0c0a 	mov.w	ip, #10
 8012f92:	4621      	mov	r1, r4
 8012f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f98:	3b30      	subs	r3, #48	@ 0x30
 8012f9a:	2b09      	cmp	r3, #9
 8012f9c:	d94b      	bls.n	8013036 <_vfiprintf_r+0x1a2>
 8012f9e:	b1b0      	cbz	r0, 8012fce <_vfiprintf_r+0x13a>
 8012fa0:	9207      	str	r2, [sp, #28]
 8012fa2:	e014      	b.n	8012fce <_vfiprintf_r+0x13a>
 8012fa4:	eba0 0308 	sub.w	r3, r0, r8
 8012fa8:	46a2      	mov	sl, r4
 8012faa:	fa09 f303 	lsl.w	r3, r9, r3
 8012fae:	4313      	orrs	r3, r2
 8012fb0:	9304      	str	r3, [sp, #16]
 8012fb2:	e7d2      	b.n	8012f5a <_vfiprintf_r+0xc6>
 8012fb4:	9b03      	ldr	r3, [sp, #12]
 8012fb6:	1d19      	adds	r1, r3, #4
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	9103      	str	r1, [sp, #12]
 8012fbe:	bfbb      	ittet	lt
 8012fc0:	425b      	neglt	r3, r3
 8012fc2:	f042 0202 	orrlt.w	r2, r2, #2
 8012fc6:	9307      	strge	r3, [sp, #28]
 8012fc8:	9307      	strlt	r3, [sp, #28]
 8012fca:	bfb8      	it	lt
 8012fcc:	9204      	strlt	r2, [sp, #16]
 8012fce:	7823      	ldrb	r3, [r4, #0]
 8012fd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8012fd2:	d10a      	bne.n	8012fea <_vfiprintf_r+0x156>
 8012fd4:	7863      	ldrb	r3, [r4, #1]
 8012fd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012fd8:	d132      	bne.n	8013040 <_vfiprintf_r+0x1ac>
 8012fda:	9b03      	ldr	r3, [sp, #12]
 8012fdc:	3402      	adds	r4, #2
 8012fde:	1d1a      	adds	r2, r3, #4
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012fe6:	9203      	str	r2, [sp, #12]
 8012fe8:	9305      	str	r3, [sp, #20]
 8012fea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80130c0 <_vfiprintf_r+0x22c>
 8012fee:	2203      	movs	r2, #3
 8012ff0:	7821      	ldrb	r1, [r4, #0]
 8012ff2:	4650      	mov	r0, sl
 8012ff4:	f000 fb62 	bl	80136bc <memchr>
 8012ff8:	b138      	cbz	r0, 801300a <_vfiprintf_r+0x176>
 8012ffa:	eba0 000a 	sub.w	r0, r0, sl
 8012ffe:	2240      	movs	r2, #64	@ 0x40
 8013000:	9b04      	ldr	r3, [sp, #16]
 8013002:	3401      	adds	r4, #1
 8013004:	4082      	lsls	r2, r0
 8013006:	4313      	orrs	r3, r2
 8013008:	9304      	str	r3, [sp, #16]
 801300a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801300e:	2206      	movs	r2, #6
 8013010:	4828      	ldr	r0, [pc, #160]	@ (80130b4 <_vfiprintf_r+0x220>)
 8013012:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013016:	f000 fb51 	bl	80136bc <memchr>
 801301a:	2800      	cmp	r0, #0
 801301c:	d03f      	beq.n	801309e <_vfiprintf_r+0x20a>
 801301e:	4b26      	ldr	r3, [pc, #152]	@ (80130b8 <_vfiprintf_r+0x224>)
 8013020:	bb1b      	cbnz	r3, 801306a <_vfiprintf_r+0x1d6>
 8013022:	9b03      	ldr	r3, [sp, #12]
 8013024:	3307      	adds	r3, #7
 8013026:	f023 0307 	bic.w	r3, r3, #7
 801302a:	3308      	adds	r3, #8
 801302c:	9303      	str	r3, [sp, #12]
 801302e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013030:	443b      	add	r3, r7
 8013032:	9309      	str	r3, [sp, #36]	@ 0x24
 8013034:	e76a      	b.n	8012f0c <_vfiprintf_r+0x78>
 8013036:	fb0c 3202 	mla	r2, ip, r2, r3
 801303a:	460c      	mov	r4, r1
 801303c:	2001      	movs	r0, #1
 801303e:	e7a8      	b.n	8012f92 <_vfiprintf_r+0xfe>
 8013040:	2300      	movs	r3, #0
 8013042:	3401      	adds	r4, #1
 8013044:	f04f 0c0a 	mov.w	ip, #10
 8013048:	4619      	mov	r1, r3
 801304a:	9305      	str	r3, [sp, #20]
 801304c:	4620      	mov	r0, r4
 801304e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013052:	3a30      	subs	r2, #48	@ 0x30
 8013054:	2a09      	cmp	r2, #9
 8013056:	d903      	bls.n	8013060 <_vfiprintf_r+0x1cc>
 8013058:	2b00      	cmp	r3, #0
 801305a:	d0c6      	beq.n	8012fea <_vfiprintf_r+0x156>
 801305c:	9105      	str	r1, [sp, #20]
 801305e:	e7c4      	b.n	8012fea <_vfiprintf_r+0x156>
 8013060:	fb0c 2101 	mla	r1, ip, r1, r2
 8013064:	4604      	mov	r4, r0
 8013066:	2301      	movs	r3, #1
 8013068:	e7f0      	b.n	801304c <_vfiprintf_r+0x1b8>
 801306a:	ab03      	add	r3, sp, #12
 801306c:	462a      	mov	r2, r5
 801306e:	a904      	add	r1, sp, #16
 8013070:	4630      	mov	r0, r6
 8013072:	9300      	str	r3, [sp, #0]
 8013074:	4b11      	ldr	r3, [pc, #68]	@ (80130bc <_vfiprintf_r+0x228>)
 8013076:	f3af 8000 	nop.w
 801307a:	4607      	mov	r7, r0
 801307c:	1c78      	adds	r0, r7, #1
 801307e:	d1d6      	bne.n	801302e <_vfiprintf_r+0x19a>
 8013080:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013082:	07d9      	lsls	r1, r3, #31
 8013084:	d405      	bmi.n	8013092 <_vfiprintf_r+0x1fe>
 8013086:	89ab      	ldrh	r3, [r5, #12]
 8013088:	059a      	lsls	r2, r3, #22
 801308a:	d402      	bmi.n	8013092 <_vfiprintf_r+0x1fe>
 801308c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801308e:	f7ff fc79 	bl	8012984 <__retarget_lock_release_recursive>
 8013092:	89ab      	ldrh	r3, [r5, #12]
 8013094:	065b      	lsls	r3, r3, #25
 8013096:	f53f af1f 	bmi.w	8012ed8 <_vfiprintf_r+0x44>
 801309a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801309c:	e71e      	b.n	8012edc <_vfiprintf_r+0x48>
 801309e:	ab03      	add	r3, sp, #12
 80130a0:	462a      	mov	r2, r5
 80130a2:	a904      	add	r1, sp, #16
 80130a4:	4630      	mov	r0, r6
 80130a6:	9300      	str	r3, [sp, #0]
 80130a8:	4b04      	ldr	r3, [pc, #16]	@ (80130bc <_vfiprintf_r+0x228>)
 80130aa:	f000 f87d 	bl	80131a8 <_printf_i>
 80130ae:	e7e4      	b.n	801307a <_vfiprintf_r+0x1e6>
 80130b0:	08014788 	.word	0x08014788
 80130b4:	08014792 	.word	0x08014792
 80130b8:	00000000 	.word	0x00000000
 80130bc:	08012e6f 	.word	0x08012e6f
 80130c0:	0801478e 	.word	0x0801478e

080130c4 <_printf_common>:
 80130c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130c8:	4616      	mov	r6, r2
 80130ca:	4698      	mov	r8, r3
 80130cc:	688a      	ldr	r2, [r1, #8]
 80130ce:	4607      	mov	r7, r0
 80130d0:	690b      	ldr	r3, [r1, #16]
 80130d2:	460c      	mov	r4, r1
 80130d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80130d8:	4293      	cmp	r3, r2
 80130da:	bfb8      	it	lt
 80130dc:	4613      	movlt	r3, r2
 80130de:	6033      	str	r3, [r6, #0]
 80130e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80130e4:	b10a      	cbz	r2, 80130ea <_printf_common+0x26>
 80130e6:	3301      	adds	r3, #1
 80130e8:	6033      	str	r3, [r6, #0]
 80130ea:	6823      	ldr	r3, [r4, #0]
 80130ec:	0699      	lsls	r1, r3, #26
 80130ee:	bf42      	ittt	mi
 80130f0:	6833      	ldrmi	r3, [r6, #0]
 80130f2:	3302      	addmi	r3, #2
 80130f4:	6033      	strmi	r3, [r6, #0]
 80130f6:	6825      	ldr	r5, [r4, #0]
 80130f8:	f015 0506 	ands.w	r5, r5, #6
 80130fc:	d106      	bne.n	801310c <_printf_common+0x48>
 80130fe:	f104 0a19 	add.w	sl, r4, #25
 8013102:	68e3      	ldr	r3, [r4, #12]
 8013104:	6832      	ldr	r2, [r6, #0]
 8013106:	1a9b      	subs	r3, r3, r2
 8013108:	42ab      	cmp	r3, r5
 801310a:	dc2b      	bgt.n	8013164 <_printf_common+0xa0>
 801310c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013110:	6822      	ldr	r2, [r4, #0]
 8013112:	3b00      	subs	r3, #0
 8013114:	bf18      	it	ne
 8013116:	2301      	movne	r3, #1
 8013118:	0692      	lsls	r2, r2, #26
 801311a:	d430      	bmi.n	801317e <_printf_common+0xba>
 801311c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013120:	4641      	mov	r1, r8
 8013122:	4638      	mov	r0, r7
 8013124:	47c8      	blx	r9
 8013126:	3001      	adds	r0, #1
 8013128:	d023      	beq.n	8013172 <_printf_common+0xae>
 801312a:	6823      	ldr	r3, [r4, #0]
 801312c:	341a      	adds	r4, #26
 801312e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8013132:	f003 0306 	and.w	r3, r3, #6
 8013136:	2b04      	cmp	r3, #4
 8013138:	bf0a      	itet	eq
 801313a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801313e:	2500      	movne	r5, #0
 8013140:	6833      	ldreq	r3, [r6, #0]
 8013142:	f04f 0600 	mov.w	r6, #0
 8013146:	bf08      	it	eq
 8013148:	1aed      	subeq	r5, r5, r3
 801314a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801314e:	bf08      	it	eq
 8013150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013154:	4293      	cmp	r3, r2
 8013156:	bfc4      	itt	gt
 8013158:	1a9b      	subgt	r3, r3, r2
 801315a:	18ed      	addgt	r5, r5, r3
 801315c:	42b5      	cmp	r5, r6
 801315e:	d11a      	bne.n	8013196 <_printf_common+0xd2>
 8013160:	2000      	movs	r0, #0
 8013162:	e008      	b.n	8013176 <_printf_common+0xb2>
 8013164:	2301      	movs	r3, #1
 8013166:	4652      	mov	r2, sl
 8013168:	4641      	mov	r1, r8
 801316a:	4638      	mov	r0, r7
 801316c:	47c8      	blx	r9
 801316e:	3001      	adds	r0, #1
 8013170:	d103      	bne.n	801317a <_printf_common+0xb6>
 8013172:	f04f 30ff 	mov.w	r0, #4294967295
 8013176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801317a:	3501      	adds	r5, #1
 801317c:	e7c1      	b.n	8013102 <_printf_common+0x3e>
 801317e:	18e1      	adds	r1, r4, r3
 8013180:	1c5a      	adds	r2, r3, #1
 8013182:	2030      	movs	r0, #48	@ 0x30
 8013184:	3302      	adds	r3, #2
 8013186:	4422      	add	r2, r4
 8013188:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801318c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013190:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013194:	e7c2      	b.n	801311c <_printf_common+0x58>
 8013196:	2301      	movs	r3, #1
 8013198:	4622      	mov	r2, r4
 801319a:	4641      	mov	r1, r8
 801319c:	4638      	mov	r0, r7
 801319e:	47c8      	blx	r9
 80131a0:	3001      	adds	r0, #1
 80131a2:	d0e6      	beq.n	8013172 <_printf_common+0xae>
 80131a4:	3601      	adds	r6, #1
 80131a6:	e7d9      	b.n	801315c <_printf_common+0x98>

080131a8 <_printf_i>:
 80131a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80131ac:	7e0f      	ldrb	r7, [r1, #24]
 80131ae:	4691      	mov	r9, r2
 80131b0:	4680      	mov	r8, r0
 80131b2:	460c      	mov	r4, r1
 80131b4:	2f78      	cmp	r7, #120	@ 0x78
 80131b6:	469a      	mov	sl, r3
 80131b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80131ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80131be:	d807      	bhi.n	80131d0 <_printf_i+0x28>
 80131c0:	2f62      	cmp	r7, #98	@ 0x62
 80131c2:	d80a      	bhi.n	80131da <_printf_i+0x32>
 80131c4:	2f00      	cmp	r7, #0
 80131c6:	f000 80d2 	beq.w	801336e <_printf_i+0x1c6>
 80131ca:	2f58      	cmp	r7, #88	@ 0x58
 80131cc:	f000 80b9 	beq.w	8013342 <_printf_i+0x19a>
 80131d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80131d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80131d8:	e03a      	b.n	8013250 <_printf_i+0xa8>
 80131da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80131de:	2b15      	cmp	r3, #21
 80131e0:	d8f6      	bhi.n	80131d0 <_printf_i+0x28>
 80131e2:	a101      	add	r1, pc, #4	@ (adr r1, 80131e8 <_printf_i+0x40>)
 80131e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80131e8:	08013241 	.word	0x08013241
 80131ec:	08013255 	.word	0x08013255
 80131f0:	080131d1 	.word	0x080131d1
 80131f4:	080131d1 	.word	0x080131d1
 80131f8:	080131d1 	.word	0x080131d1
 80131fc:	080131d1 	.word	0x080131d1
 8013200:	08013255 	.word	0x08013255
 8013204:	080131d1 	.word	0x080131d1
 8013208:	080131d1 	.word	0x080131d1
 801320c:	080131d1 	.word	0x080131d1
 8013210:	080131d1 	.word	0x080131d1
 8013214:	08013355 	.word	0x08013355
 8013218:	0801327f 	.word	0x0801327f
 801321c:	0801330f 	.word	0x0801330f
 8013220:	080131d1 	.word	0x080131d1
 8013224:	080131d1 	.word	0x080131d1
 8013228:	08013377 	.word	0x08013377
 801322c:	080131d1 	.word	0x080131d1
 8013230:	0801327f 	.word	0x0801327f
 8013234:	080131d1 	.word	0x080131d1
 8013238:	080131d1 	.word	0x080131d1
 801323c:	08013317 	.word	0x08013317
 8013240:	6833      	ldr	r3, [r6, #0]
 8013242:	1d1a      	adds	r2, r3, #4
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	6032      	str	r2, [r6, #0]
 8013248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801324c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013250:	2301      	movs	r3, #1
 8013252:	e09d      	b.n	8013390 <_printf_i+0x1e8>
 8013254:	6833      	ldr	r3, [r6, #0]
 8013256:	6820      	ldr	r0, [r4, #0]
 8013258:	1d19      	adds	r1, r3, #4
 801325a:	6031      	str	r1, [r6, #0]
 801325c:	0606      	lsls	r6, r0, #24
 801325e:	d501      	bpl.n	8013264 <_printf_i+0xbc>
 8013260:	681d      	ldr	r5, [r3, #0]
 8013262:	e003      	b.n	801326c <_printf_i+0xc4>
 8013264:	0645      	lsls	r5, r0, #25
 8013266:	d5fb      	bpl.n	8013260 <_printf_i+0xb8>
 8013268:	f9b3 5000 	ldrsh.w	r5, [r3]
 801326c:	2d00      	cmp	r5, #0
 801326e:	da03      	bge.n	8013278 <_printf_i+0xd0>
 8013270:	232d      	movs	r3, #45	@ 0x2d
 8013272:	426d      	negs	r5, r5
 8013274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013278:	4859      	ldr	r0, [pc, #356]	@ (80133e0 <_printf_i+0x238>)
 801327a:	230a      	movs	r3, #10
 801327c:	e011      	b.n	80132a2 <_printf_i+0xfa>
 801327e:	6821      	ldr	r1, [r4, #0]
 8013280:	6833      	ldr	r3, [r6, #0]
 8013282:	0608      	lsls	r0, r1, #24
 8013284:	f853 5b04 	ldr.w	r5, [r3], #4
 8013288:	d402      	bmi.n	8013290 <_printf_i+0xe8>
 801328a:	0649      	lsls	r1, r1, #25
 801328c:	bf48      	it	mi
 801328e:	b2ad      	uxthmi	r5, r5
 8013290:	2f6f      	cmp	r7, #111	@ 0x6f
 8013292:	6033      	str	r3, [r6, #0]
 8013294:	4852      	ldr	r0, [pc, #328]	@ (80133e0 <_printf_i+0x238>)
 8013296:	bf14      	ite	ne
 8013298:	230a      	movne	r3, #10
 801329a:	2308      	moveq	r3, #8
 801329c:	2100      	movs	r1, #0
 801329e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80132a2:	6866      	ldr	r6, [r4, #4]
 80132a4:	2e00      	cmp	r6, #0
 80132a6:	60a6      	str	r6, [r4, #8]
 80132a8:	bfa2      	ittt	ge
 80132aa:	6821      	ldrge	r1, [r4, #0]
 80132ac:	f021 0104 	bicge.w	r1, r1, #4
 80132b0:	6021      	strge	r1, [r4, #0]
 80132b2:	b90d      	cbnz	r5, 80132b8 <_printf_i+0x110>
 80132b4:	2e00      	cmp	r6, #0
 80132b6:	d04b      	beq.n	8013350 <_printf_i+0x1a8>
 80132b8:	4616      	mov	r6, r2
 80132ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80132be:	fb03 5711 	mls	r7, r3, r1, r5
 80132c2:	5dc7      	ldrb	r7, [r0, r7]
 80132c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80132c8:	462f      	mov	r7, r5
 80132ca:	460d      	mov	r5, r1
 80132cc:	42bb      	cmp	r3, r7
 80132ce:	d9f4      	bls.n	80132ba <_printf_i+0x112>
 80132d0:	2b08      	cmp	r3, #8
 80132d2:	d10b      	bne.n	80132ec <_printf_i+0x144>
 80132d4:	6823      	ldr	r3, [r4, #0]
 80132d6:	07df      	lsls	r7, r3, #31
 80132d8:	d508      	bpl.n	80132ec <_printf_i+0x144>
 80132da:	6923      	ldr	r3, [r4, #16]
 80132dc:	6861      	ldr	r1, [r4, #4]
 80132de:	4299      	cmp	r1, r3
 80132e0:	bfde      	ittt	le
 80132e2:	2330      	movle	r3, #48	@ 0x30
 80132e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80132e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80132ec:	1b92      	subs	r2, r2, r6
 80132ee:	6122      	str	r2, [r4, #16]
 80132f0:	464b      	mov	r3, r9
 80132f2:	aa03      	add	r2, sp, #12
 80132f4:	4621      	mov	r1, r4
 80132f6:	4640      	mov	r0, r8
 80132f8:	f8cd a000 	str.w	sl, [sp]
 80132fc:	f7ff fee2 	bl	80130c4 <_printf_common>
 8013300:	3001      	adds	r0, #1
 8013302:	d14a      	bne.n	801339a <_printf_i+0x1f2>
 8013304:	f04f 30ff 	mov.w	r0, #4294967295
 8013308:	b004      	add	sp, #16
 801330a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801330e:	6823      	ldr	r3, [r4, #0]
 8013310:	f043 0320 	orr.w	r3, r3, #32
 8013314:	6023      	str	r3, [r4, #0]
 8013316:	2778      	movs	r7, #120	@ 0x78
 8013318:	4832      	ldr	r0, [pc, #200]	@ (80133e4 <_printf_i+0x23c>)
 801331a:	6823      	ldr	r3, [r4, #0]
 801331c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013320:	061f      	lsls	r7, r3, #24
 8013322:	6831      	ldr	r1, [r6, #0]
 8013324:	f851 5b04 	ldr.w	r5, [r1], #4
 8013328:	d402      	bmi.n	8013330 <_printf_i+0x188>
 801332a:	065f      	lsls	r7, r3, #25
 801332c:	bf48      	it	mi
 801332e:	b2ad      	uxthmi	r5, r5
 8013330:	6031      	str	r1, [r6, #0]
 8013332:	07d9      	lsls	r1, r3, #31
 8013334:	bf44      	itt	mi
 8013336:	f043 0320 	orrmi.w	r3, r3, #32
 801333a:	6023      	strmi	r3, [r4, #0]
 801333c:	b11d      	cbz	r5, 8013346 <_printf_i+0x19e>
 801333e:	2310      	movs	r3, #16
 8013340:	e7ac      	b.n	801329c <_printf_i+0xf4>
 8013342:	4827      	ldr	r0, [pc, #156]	@ (80133e0 <_printf_i+0x238>)
 8013344:	e7e9      	b.n	801331a <_printf_i+0x172>
 8013346:	6823      	ldr	r3, [r4, #0]
 8013348:	f023 0320 	bic.w	r3, r3, #32
 801334c:	6023      	str	r3, [r4, #0]
 801334e:	e7f6      	b.n	801333e <_printf_i+0x196>
 8013350:	4616      	mov	r6, r2
 8013352:	e7bd      	b.n	80132d0 <_printf_i+0x128>
 8013354:	6833      	ldr	r3, [r6, #0]
 8013356:	6825      	ldr	r5, [r4, #0]
 8013358:	1d18      	adds	r0, r3, #4
 801335a:	6961      	ldr	r1, [r4, #20]
 801335c:	6030      	str	r0, [r6, #0]
 801335e:	062e      	lsls	r6, r5, #24
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	d501      	bpl.n	8013368 <_printf_i+0x1c0>
 8013364:	6019      	str	r1, [r3, #0]
 8013366:	e002      	b.n	801336e <_printf_i+0x1c6>
 8013368:	0668      	lsls	r0, r5, #25
 801336a:	d5fb      	bpl.n	8013364 <_printf_i+0x1bc>
 801336c:	8019      	strh	r1, [r3, #0]
 801336e:	2300      	movs	r3, #0
 8013370:	4616      	mov	r6, r2
 8013372:	6123      	str	r3, [r4, #16]
 8013374:	e7bc      	b.n	80132f0 <_printf_i+0x148>
 8013376:	6833      	ldr	r3, [r6, #0]
 8013378:	2100      	movs	r1, #0
 801337a:	1d1a      	adds	r2, r3, #4
 801337c:	6032      	str	r2, [r6, #0]
 801337e:	681e      	ldr	r6, [r3, #0]
 8013380:	6862      	ldr	r2, [r4, #4]
 8013382:	4630      	mov	r0, r6
 8013384:	f000 f99a 	bl	80136bc <memchr>
 8013388:	b108      	cbz	r0, 801338e <_printf_i+0x1e6>
 801338a:	1b80      	subs	r0, r0, r6
 801338c:	6060      	str	r0, [r4, #4]
 801338e:	6863      	ldr	r3, [r4, #4]
 8013390:	6123      	str	r3, [r4, #16]
 8013392:	2300      	movs	r3, #0
 8013394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013398:	e7aa      	b.n	80132f0 <_printf_i+0x148>
 801339a:	6923      	ldr	r3, [r4, #16]
 801339c:	4632      	mov	r2, r6
 801339e:	4649      	mov	r1, r9
 80133a0:	4640      	mov	r0, r8
 80133a2:	47d0      	blx	sl
 80133a4:	3001      	adds	r0, #1
 80133a6:	d0ad      	beq.n	8013304 <_printf_i+0x15c>
 80133a8:	6823      	ldr	r3, [r4, #0]
 80133aa:	079b      	lsls	r3, r3, #30
 80133ac:	d413      	bmi.n	80133d6 <_printf_i+0x22e>
 80133ae:	68e0      	ldr	r0, [r4, #12]
 80133b0:	9b03      	ldr	r3, [sp, #12]
 80133b2:	4298      	cmp	r0, r3
 80133b4:	bfb8      	it	lt
 80133b6:	4618      	movlt	r0, r3
 80133b8:	e7a6      	b.n	8013308 <_printf_i+0x160>
 80133ba:	2301      	movs	r3, #1
 80133bc:	4632      	mov	r2, r6
 80133be:	4649      	mov	r1, r9
 80133c0:	4640      	mov	r0, r8
 80133c2:	47d0      	blx	sl
 80133c4:	3001      	adds	r0, #1
 80133c6:	d09d      	beq.n	8013304 <_printf_i+0x15c>
 80133c8:	3501      	adds	r5, #1
 80133ca:	68e3      	ldr	r3, [r4, #12]
 80133cc:	9903      	ldr	r1, [sp, #12]
 80133ce:	1a5b      	subs	r3, r3, r1
 80133d0:	42ab      	cmp	r3, r5
 80133d2:	dcf2      	bgt.n	80133ba <_printf_i+0x212>
 80133d4:	e7eb      	b.n	80133ae <_printf_i+0x206>
 80133d6:	2500      	movs	r5, #0
 80133d8:	f104 0619 	add.w	r6, r4, #25
 80133dc:	e7f5      	b.n	80133ca <_printf_i+0x222>
 80133de:	bf00      	nop
 80133e0:	08014799 	.word	0x08014799
 80133e4:	080147aa 	.word	0x080147aa

080133e8 <__sflush_r>:
 80133e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80133ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133f0:	0716      	lsls	r6, r2, #28
 80133f2:	4605      	mov	r5, r0
 80133f4:	460c      	mov	r4, r1
 80133f6:	d454      	bmi.n	80134a2 <__sflush_r+0xba>
 80133f8:	684b      	ldr	r3, [r1, #4]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	dc02      	bgt.n	8013404 <__sflush_r+0x1c>
 80133fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013400:	2b00      	cmp	r3, #0
 8013402:	dd48      	ble.n	8013496 <__sflush_r+0xae>
 8013404:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013406:	2e00      	cmp	r6, #0
 8013408:	d045      	beq.n	8013496 <__sflush_r+0xae>
 801340a:	2300      	movs	r3, #0
 801340c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013410:	682f      	ldr	r7, [r5, #0]
 8013412:	6a21      	ldr	r1, [r4, #32]
 8013414:	602b      	str	r3, [r5, #0]
 8013416:	d030      	beq.n	801347a <__sflush_r+0x92>
 8013418:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801341a:	89a3      	ldrh	r3, [r4, #12]
 801341c:	0759      	lsls	r1, r3, #29
 801341e:	d505      	bpl.n	801342c <__sflush_r+0x44>
 8013420:	6863      	ldr	r3, [r4, #4]
 8013422:	1ad2      	subs	r2, r2, r3
 8013424:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013426:	b10b      	cbz	r3, 801342c <__sflush_r+0x44>
 8013428:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801342a:	1ad2      	subs	r2, r2, r3
 801342c:	2300      	movs	r3, #0
 801342e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013430:	6a21      	ldr	r1, [r4, #32]
 8013432:	4628      	mov	r0, r5
 8013434:	47b0      	blx	r6
 8013436:	1c43      	adds	r3, r0, #1
 8013438:	89a3      	ldrh	r3, [r4, #12]
 801343a:	d106      	bne.n	801344a <__sflush_r+0x62>
 801343c:	6829      	ldr	r1, [r5, #0]
 801343e:	291d      	cmp	r1, #29
 8013440:	d82b      	bhi.n	801349a <__sflush_r+0xb2>
 8013442:	4a2a      	ldr	r2, [pc, #168]	@ (80134ec <__sflush_r+0x104>)
 8013444:	410a      	asrs	r2, r1
 8013446:	07d6      	lsls	r6, r2, #31
 8013448:	d427      	bmi.n	801349a <__sflush_r+0xb2>
 801344a:	2200      	movs	r2, #0
 801344c:	04d9      	lsls	r1, r3, #19
 801344e:	6062      	str	r2, [r4, #4]
 8013450:	6922      	ldr	r2, [r4, #16]
 8013452:	6022      	str	r2, [r4, #0]
 8013454:	d504      	bpl.n	8013460 <__sflush_r+0x78>
 8013456:	1c42      	adds	r2, r0, #1
 8013458:	d101      	bne.n	801345e <__sflush_r+0x76>
 801345a:	682b      	ldr	r3, [r5, #0]
 801345c:	b903      	cbnz	r3, 8013460 <__sflush_r+0x78>
 801345e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013462:	602f      	str	r7, [r5, #0]
 8013464:	b1b9      	cbz	r1, 8013496 <__sflush_r+0xae>
 8013466:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801346a:	4299      	cmp	r1, r3
 801346c:	d002      	beq.n	8013474 <__sflush_r+0x8c>
 801346e:	4628      	mov	r0, r5
 8013470:	f7ff fa96 	bl	80129a0 <_free_r>
 8013474:	2300      	movs	r3, #0
 8013476:	6363      	str	r3, [r4, #52]	@ 0x34
 8013478:	e00d      	b.n	8013496 <__sflush_r+0xae>
 801347a:	2301      	movs	r3, #1
 801347c:	4628      	mov	r0, r5
 801347e:	47b0      	blx	r6
 8013480:	4602      	mov	r2, r0
 8013482:	1c50      	adds	r0, r2, #1
 8013484:	d1c9      	bne.n	801341a <__sflush_r+0x32>
 8013486:	682b      	ldr	r3, [r5, #0]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d0c6      	beq.n	801341a <__sflush_r+0x32>
 801348c:	2b1d      	cmp	r3, #29
 801348e:	d001      	beq.n	8013494 <__sflush_r+0xac>
 8013490:	2b16      	cmp	r3, #22
 8013492:	d11d      	bne.n	80134d0 <__sflush_r+0xe8>
 8013494:	602f      	str	r7, [r5, #0]
 8013496:	2000      	movs	r0, #0
 8013498:	e021      	b.n	80134de <__sflush_r+0xf6>
 801349a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801349e:	b21b      	sxth	r3, r3
 80134a0:	e01a      	b.n	80134d8 <__sflush_r+0xf0>
 80134a2:	690f      	ldr	r7, [r1, #16]
 80134a4:	2f00      	cmp	r7, #0
 80134a6:	d0f6      	beq.n	8013496 <__sflush_r+0xae>
 80134a8:	0793      	lsls	r3, r2, #30
 80134aa:	680e      	ldr	r6, [r1, #0]
 80134ac:	600f      	str	r7, [r1, #0]
 80134ae:	bf0c      	ite	eq
 80134b0:	694b      	ldreq	r3, [r1, #20]
 80134b2:	2300      	movne	r3, #0
 80134b4:	eba6 0807 	sub.w	r8, r6, r7
 80134b8:	608b      	str	r3, [r1, #8]
 80134ba:	f1b8 0f00 	cmp.w	r8, #0
 80134be:	ddea      	ble.n	8013496 <__sflush_r+0xae>
 80134c0:	4643      	mov	r3, r8
 80134c2:	463a      	mov	r2, r7
 80134c4:	6a21      	ldr	r1, [r4, #32]
 80134c6:	4628      	mov	r0, r5
 80134c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80134ca:	47b0      	blx	r6
 80134cc:	2800      	cmp	r0, #0
 80134ce:	dc08      	bgt.n	80134e2 <__sflush_r+0xfa>
 80134d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134d8:	f04f 30ff 	mov.w	r0, #4294967295
 80134dc:	81a3      	strh	r3, [r4, #12]
 80134de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134e2:	4407      	add	r7, r0
 80134e4:	eba8 0800 	sub.w	r8, r8, r0
 80134e8:	e7e7      	b.n	80134ba <__sflush_r+0xd2>
 80134ea:	bf00      	nop
 80134ec:	dfbffffe 	.word	0xdfbffffe

080134f0 <_fflush_r>:
 80134f0:	b538      	push	{r3, r4, r5, lr}
 80134f2:	690b      	ldr	r3, [r1, #16]
 80134f4:	4605      	mov	r5, r0
 80134f6:	460c      	mov	r4, r1
 80134f8:	b913      	cbnz	r3, 8013500 <_fflush_r+0x10>
 80134fa:	2500      	movs	r5, #0
 80134fc:	4628      	mov	r0, r5
 80134fe:	bd38      	pop	{r3, r4, r5, pc}
 8013500:	b118      	cbz	r0, 801350a <_fflush_r+0x1a>
 8013502:	6a03      	ldr	r3, [r0, #32]
 8013504:	b90b      	cbnz	r3, 801350a <_fflush_r+0x1a>
 8013506:	f7ff f8ab 	bl	8012660 <__sinit>
 801350a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d0f3      	beq.n	80134fa <_fflush_r+0xa>
 8013512:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013514:	07d0      	lsls	r0, r2, #31
 8013516:	d404      	bmi.n	8013522 <_fflush_r+0x32>
 8013518:	0599      	lsls	r1, r3, #22
 801351a:	d402      	bmi.n	8013522 <_fflush_r+0x32>
 801351c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801351e:	f7ff fa30 	bl	8012982 <__retarget_lock_acquire_recursive>
 8013522:	4628      	mov	r0, r5
 8013524:	4621      	mov	r1, r4
 8013526:	f7ff ff5f 	bl	80133e8 <__sflush_r>
 801352a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801352c:	4605      	mov	r5, r0
 801352e:	07da      	lsls	r2, r3, #31
 8013530:	d4e4      	bmi.n	80134fc <_fflush_r+0xc>
 8013532:	89a3      	ldrh	r3, [r4, #12]
 8013534:	059b      	lsls	r3, r3, #22
 8013536:	d4e1      	bmi.n	80134fc <_fflush_r+0xc>
 8013538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801353a:	f7ff fa23 	bl	8012984 <__retarget_lock_release_recursive>
 801353e:	e7dd      	b.n	80134fc <_fflush_r+0xc>

08013540 <__swbuf_r>:
 8013540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013542:	460e      	mov	r6, r1
 8013544:	4614      	mov	r4, r2
 8013546:	4605      	mov	r5, r0
 8013548:	b118      	cbz	r0, 8013552 <__swbuf_r+0x12>
 801354a:	6a03      	ldr	r3, [r0, #32]
 801354c:	b90b      	cbnz	r3, 8013552 <__swbuf_r+0x12>
 801354e:	f7ff f887 	bl	8012660 <__sinit>
 8013552:	69a3      	ldr	r3, [r4, #24]
 8013554:	60a3      	str	r3, [r4, #8]
 8013556:	89a3      	ldrh	r3, [r4, #12]
 8013558:	071a      	lsls	r2, r3, #28
 801355a:	d501      	bpl.n	8013560 <__swbuf_r+0x20>
 801355c:	6923      	ldr	r3, [r4, #16]
 801355e:	b943      	cbnz	r3, 8013572 <__swbuf_r+0x32>
 8013560:	4621      	mov	r1, r4
 8013562:	4628      	mov	r0, r5
 8013564:	f000 f82a 	bl	80135bc <__swsetup_r>
 8013568:	b118      	cbz	r0, 8013572 <__swbuf_r+0x32>
 801356a:	f04f 37ff 	mov.w	r7, #4294967295
 801356e:	4638      	mov	r0, r7
 8013570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013572:	6823      	ldr	r3, [r4, #0]
 8013574:	b2f6      	uxtb	r6, r6
 8013576:	6922      	ldr	r2, [r4, #16]
 8013578:	4637      	mov	r7, r6
 801357a:	1a98      	subs	r0, r3, r2
 801357c:	6963      	ldr	r3, [r4, #20]
 801357e:	4283      	cmp	r3, r0
 8013580:	dc05      	bgt.n	801358e <__swbuf_r+0x4e>
 8013582:	4621      	mov	r1, r4
 8013584:	4628      	mov	r0, r5
 8013586:	f7ff ffb3 	bl	80134f0 <_fflush_r>
 801358a:	2800      	cmp	r0, #0
 801358c:	d1ed      	bne.n	801356a <__swbuf_r+0x2a>
 801358e:	68a3      	ldr	r3, [r4, #8]
 8013590:	3b01      	subs	r3, #1
 8013592:	60a3      	str	r3, [r4, #8]
 8013594:	6823      	ldr	r3, [r4, #0]
 8013596:	1c5a      	adds	r2, r3, #1
 8013598:	6022      	str	r2, [r4, #0]
 801359a:	701e      	strb	r6, [r3, #0]
 801359c:	1c43      	adds	r3, r0, #1
 801359e:	6962      	ldr	r2, [r4, #20]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d004      	beq.n	80135ae <__swbuf_r+0x6e>
 80135a4:	89a3      	ldrh	r3, [r4, #12]
 80135a6:	07db      	lsls	r3, r3, #31
 80135a8:	d5e1      	bpl.n	801356e <__swbuf_r+0x2e>
 80135aa:	2e0a      	cmp	r6, #10
 80135ac:	d1df      	bne.n	801356e <__swbuf_r+0x2e>
 80135ae:	4621      	mov	r1, r4
 80135b0:	4628      	mov	r0, r5
 80135b2:	f7ff ff9d 	bl	80134f0 <_fflush_r>
 80135b6:	2800      	cmp	r0, #0
 80135b8:	d0d9      	beq.n	801356e <__swbuf_r+0x2e>
 80135ba:	e7d6      	b.n	801356a <__swbuf_r+0x2a>

080135bc <__swsetup_r>:
 80135bc:	b538      	push	{r3, r4, r5, lr}
 80135be:	4b29      	ldr	r3, [pc, #164]	@ (8013664 <__swsetup_r+0xa8>)
 80135c0:	4605      	mov	r5, r0
 80135c2:	460c      	mov	r4, r1
 80135c4:	6818      	ldr	r0, [r3, #0]
 80135c6:	b118      	cbz	r0, 80135d0 <__swsetup_r+0x14>
 80135c8:	6a03      	ldr	r3, [r0, #32]
 80135ca:	b90b      	cbnz	r3, 80135d0 <__swsetup_r+0x14>
 80135cc:	f7ff f848 	bl	8012660 <__sinit>
 80135d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135d4:	0719      	lsls	r1, r3, #28
 80135d6:	d422      	bmi.n	801361e <__swsetup_r+0x62>
 80135d8:	06da      	lsls	r2, r3, #27
 80135da:	d407      	bmi.n	80135ec <__swsetup_r+0x30>
 80135dc:	2209      	movs	r2, #9
 80135de:	602a      	str	r2, [r5, #0]
 80135e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135e4:	f04f 30ff 	mov.w	r0, #4294967295
 80135e8:	81a3      	strh	r3, [r4, #12]
 80135ea:	e033      	b.n	8013654 <__swsetup_r+0x98>
 80135ec:	0758      	lsls	r0, r3, #29
 80135ee:	d512      	bpl.n	8013616 <__swsetup_r+0x5a>
 80135f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80135f2:	b141      	cbz	r1, 8013606 <__swsetup_r+0x4a>
 80135f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80135f8:	4299      	cmp	r1, r3
 80135fa:	d002      	beq.n	8013602 <__swsetup_r+0x46>
 80135fc:	4628      	mov	r0, r5
 80135fe:	f7ff f9cf 	bl	80129a0 <_free_r>
 8013602:	2300      	movs	r3, #0
 8013604:	6363      	str	r3, [r4, #52]	@ 0x34
 8013606:	89a3      	ldrh	r3, [r4, #12]
 8013608:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801360c:	81a3      	strh	r3, [r4, #12]
 801360e:	2300      	movs	r3, #0
 8013610:	6063      	str	r3, [r4, #4]
 8013612:	6923      	ldr	r3, [r4, #16]
 8013614:	6023      	str	r3, [r4, #0]
 8013616:	89a3      	ldrh	r3, [r4, #12]
 8013618:	f043 0308 	orr.w	r3, r3, #8
 801361c:	81a3      	strh	r3, [r4, #12]
 801361e:	6923      	ldr	r3, [r4, #16]
 8013620:	b94b      	cbnz	r3, 8013636 <__swsetup_r+0x7a>
 8013622:	89a3      	ldrh	r3, [r4, #12]
 8013624:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801362c:	d003      	beq.n	8013636 <__swsetup_r+0x7a>
 801362e:	4621      	mov	r1, r4
 8013630:	4628      	mov	r0, r5
 8013632:	f000 f8a4 	bl	801377e <__smakebuf_r>
 8013636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801363a:	f013 0201 	ands.w	r2, r3, #1
 801363e:	d00a      	beq.n	8013656 <__swsetup_r+0x9a>
 8013640:	2200      	movs	r2, #0
 8013642:	60a2      	str	r2, [r4, #8]
 8013644:	6962      	ldr	r2, [r4, #20]
 8013646:	4252      	negs	r2, r2
 8013648:	61a2      	str	r2, [r4, #24]
 801364a:	6922      	ldr	r2, [r4, #16]
 801364c:	b942      	cbnz	r2, 8013660 <__swsetup_r+0xa4>
 801364e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013652:	d1c5      	bne.n	80135e0 <__swsetup_r+0x24>
 8013654:	bd38      	pop	{r3, r4, r5, pc}
 8013656:	0799      	lsls	r1, r3, #30
 8013658:	bf58      	it	pl
 801365a:	6962      	ldrpl	r2, [r4, #20]
 801365c:	60a2      	str	r2, [r4, #8]
 801365e:	e7f4      	b.n	801364a <__swsetup_r+0x8e>
 8013660:	2000      	movs	r0, #0
 8013662:	e7f7      	b.n	8013654 <__swsetup_r+0x98>
 8013664:	20000130 	.word	0x20000130

08013668 <memmove>:
 8013668:	4288      	cmp	r0, r1
 801366a:	b510      	push	{r4, lr}
 801366c:	eb01 0402 	add.w	r4, r1, r2
 8013670:	d902      	bls.n	8013678 <memmove+0x10>
 8013672:	4284      	cmp	r4, r0
 8013674:	4623      	mov	r3, r4
 8013676:	d807      	bhi.n	8013688 <memmove+0x20>
 8013678:	1e43      	subs	r3, r0, #1
 801367a:	42a1      	cmp	r1, r4
 801367c:	d008      	beq.n	8013690 <memmove+0x28>
 801367e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013682:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013686:	e7f8      	b.n	801367a <memmove+0x12>
 8013688:	4402      	add	r2, r0
 801368a:	4601      	mov	r1, r0
 801368c:	428a      	cmp	r2, r1
 801368e:	d100      	bne.n	8013692 <memmove+0x2a>
 8013690:	bd10      	pop	{r4, pc}
 8013692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801369a:	e7f7      	b.n	801368c <memmove+0x24>

0801369c <_sbrk_r>:
 801369c:	b538      	push	{r3, r4, r5, lr}
 801369e:	2300      	movs	r3, #0
 80136a0:	4d05      	ldr	r5, [pc, #20]	@ (80136b8 <_sbrk_r+0x1c>)
 80136a2:	4604      	mov	r4, r0
 80136a4:	4608      	mov	r0, r1
 80136a6:	602b      	str	r3, [r5, #0]
 80136a8:	f7ef f9ec 	bl	8002a84 <_sbrk>
 80136ac:	1c43      	adds	r3, r0, #1
 80136ae:	d102      	bne.n	80136b6 <_sbrk_r+0x1a>
 80136b0:	682b      	ldr	r3, [r5, #0]
 80136b2:	b103      	cbz	r3, 80136b6 <_sbrk_r+0x1a>
 80136b4:	6023      	str	r3, [r4, #0]
 80136b6:	bd38      	pop	{r3, r4, r5, pc}
 80136b8:	20011350 	.word	0x20011350

080136bc <memchr>:
 80136bc:	b2c9      	uxtb	r1, r1
 80136be:	4603      	mov	r3, r0
 80136c0:	4402      	add	r2, r0
 80136c2:	b510      	push	{r4, lr}
 80136c4:	4293      	cmp	r3, r2
 80136c6:	4618      	mov	r0, r3
 80136c8:	d101      	bne.n	80136ce <memchr+0x12>
 80136ca:	2000      	movs	r0, #0
 80136cc:	e003      	b.n	80136d6 <memchr+0x1a>
 80136ce:	7804      	ldrb	r4, [r0, #0]
 80136d0:	3301      	adds	r3, #1
 80136d2:	428c      	cmp	r4, r1
 80136d4:	d1f6      	bne.n	80136c4 <memchr+0x8>
 80136d6:	bd10      	pop	{r4, pc}

080136d8 <_realloc_r>:
 80136d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136dc:	4680      	mov	r8, r0
 80136de:	4615      	mov	r5, r2
 80136e0:	460c      	mov	r4, r1
 80136e2:	b921      	cbnz	r1, 80136ee <_realloc_r+0x16>
 80136e4:	4611      	mov	r1, r2
 80136e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136ea:	f7ff b9c5 	b.w	8012a78 <_malloc_r>
 80136ee:	b92a      	cbnz	r2, 80136fc <_realloc_r+0x24>
 80136f0:	f7ff f956 	bl	80129a0 <_free_r>
 80136f4:	2400      	movs	r4, #0
 80136f6:	4620      	mov	r0, r4
 80136f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136fc:	f000 f89e 	bl	801383c <_malloc_usable_size_r>
 8013700:	4285      	cmp	r5, r0
 8013702:	4606      	mov	r6, r0
 8013704:	d802      	bhi.n	801370c <_realloc_r+0x34>
 8013706:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801370a:	d8f4      	bhi.n	80136f6 <_realloc_r+0x1e>
 801370c:	4629      	mov	r1, r5
 801370e:	4640      	mov	r0, r8
 8013710:	f7ff f9b2 	bl	8012a78 <_malloc_r>
 8013714:	4607      	mov	r7, r0
 8013716:	2800      	cmp	r0, #0
 8013718:	d0ec      	beq.n	80136f4 <_realloc_r+0x1c>
 801371a:	42b5      	cmp	r5, r6
 801371c:	462a      	mov	r2, r5
 801371e:	4621      	mov	r1, r4
 8013720:	bf28      	it	cs
 8013722:	4632      	movcs	r2, r6
 8013724:	f7ff f92f 	bl	8012986 <memcpy>
 8013728:	4621      	mov	r1, r4
 801372a:	4640      	mov	r0, r8
 801372c:	463c      	mov	r4, r7
 801372e:	f7ff f937 	bl	80129a0 <_free_r>
 8013732:	e7e0      	b.n	80136f6 <_realloc_r+0x1e>

08013734 <__swhatbuf_r>:
 8013734:	b570      	push	{r4, r5, r6, lr}
 8013736:	460c      	mov	r4, r1
 8013738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801373c:	b096      	sub	sp, #88	@ 0x58
 801373e:	4615      	mov	r5, r2
 8013740:	2900      	cmp	r1, #0
 8013742:	461e      	mov	r6, r3
 8013744:	da0c      	bge.n	8013760 <__swhatbuf_r+0x2c>
 8013746:	89a3      	ldrh	r3, [r4, #12]
 8013748:	2100      	movs	r1, #0
 801374a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801374e:	bf14      	ite	ne
 8013750:	2340      	movne	r3, #64	@ 0x40
 8013752:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013756:	2000      	movs	r0, #0
 8013758:	6031      	str	r1, [r6, #0]
 801375a:	602b      	str	r3, [r5, #0]
 801375c:	b016      	add	sp, #88	@ 0x58
 801375e:	bd70      	pop	{r4, r5, r6, pc}
 8013760:	466a      	mov	r2, sp
 8013762:	f000 f849 	bl	80137f8 <_fstat_r>
 8013766:	2800      	cmp	r0, #0
 8013768:	dbed      	blt.n	8013746 <__swhatbuf_r+0x12>
 801376a:	9901      	ldr	r1, [sp, #4]
 801376c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013770:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013774:	4259      	negs	r1, r3
 8013776:	4159      	adcs	r1, r3
 8013778:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801377c:	e7eb      	b.n	8013756 <__swhatbuf_r+0x22>

0801377e <__smakebuf_r>:
 801377e:	898b      	ldrh	r3, [r1, #12]
 8013780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013782:	079d      	lsls	r5, r3, #30
 8013784:	4606      	mov	r6, r0
 8013786:	460c      	mov	r4, r1
 8013788:	d507      	bpl.n	801379a <__smakebuf_r+0x1c>
 801378a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801378e:	6023      	str	r3, [r4, #0]
 8013790:	6123      	str	r3, [r4, #16]
 8013792:	2301      	movs	r3, #1
 8013794:	6163      	str	r3, [r4, #20]
 8013796:	b003      	add	sp, #12
 8013798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801379a:	ab01      	add	r3, sp, #4
 801379c:	466a      	mov	r2, sp
 801379e:	f7ff ffc9 	bl	8013734 <__swhatbuf_r>
 80137a2:	9f00      	ldr	r7, [sp, #0]
 80137a4:	4605      	mov	r5, r0
 80137a6:	4630      	mov	r0, r6
 80137a8:	4639      	mov	r1, r7
 80137aa:	f7ff f965 	bl	8012a78 <_malloc_r>
 80137ae:	b948      	cbnz	r0, 80137c4 <__smakebuf_r+0x46>
 80137b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137b4:	059a      	lsls	r2, r3, #22
 80137b6:	d4ee      	bmi.n	8013796 <__smakebuf_r+0x18>
 80137b8:	f023 0303 	bic.w	r3, r3, #3
 80137bc:	f043 0302 	orr.w	r3, r3, #2
 80137c0:	81a3      	strh	r3, [r4, #12]
 80137c2:	e7e2      	b.n	801378a <__smakebuf_r+0xc>
 80137c4:	89a3      	ldrh	r3, [r4, #12]
 80137c6:	6020      	str	r0, [r4, #0]
 80137c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80137cc:	81a3      	strh	r3, [r4, #12]
 80137ce:	9b01      	ldr	r3, [sp, #4]
 80137d0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80137d4:	b15b      	cbz	r3, 80137ee <__smakebuf_r+0x70>
 80137d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80137da:	4630      	mov	r0, r6
 80137dc:	f000 f81e 	bl	801381c <_isatty_r>
 80137e0:	b128      	cbz	r0, 80137ee <__smakebuf_r+0x70>
 80137e2:	89a3      	ldrh	r3, [r4, #12]
 80137e4:	f023 0303 	bic.w	r3, r3, #3
 80137e8:	f043 0301 	orr.w	r3, r3, #1
 80137ec:	81a3      	strh	r3, [r4, #12]
 80137ee:	89a3      	ldrh	r3, [r4, #12]
 80137f0:	431d      	orrs	r5, r3
 80137f2:	81a5      	strh	r5, [r4, #12]
 80137f4:	e7cf      	b.n	8013796 <__smakebuf_r+0x18>
	...

080137f8 <_fstat_r>:
 80137f8:	b538      	push	{r3, r4, r5, lr}
 80137fa:	2300      	movs	r3, #0
 80137fc:	4d06      	ldr	r5, [pc, #24]	@ (8013818 <_fstat_r+0x20>)
 80137fe:	4604      	mov	r4, r0
 8013800:	4608      	mov	r0, r1
 8013802:	4611      	mov	r1, r2
 8013804:	602b      	str	r3, [r5, #0]
 8013806:	f7ef f914 	bl	8002a32 <_fstat>
 801380a:	1c43      	adds	r3, r0, #1
 801380c:	d102      	bne.n	8013814 <_fstat_r+0x1c>
 801380e:	682b      	ldr	r3, [r5, #0]
 8013810:	b103      	cbz	r3, 8013814 <_fstat_r+0x1c>
 8013812:	6023      	str	r3, [r4, #0]
 8013814:	bd38      	pop	{r3, r4, r5, pc}
 8013816:	bf00      	nop
 8013818:	20011350 	.word	0x20011350

0801381c <_isatty_r>:
 801381c:	b538      	push	{r3, r4, r5, lr}
 801381e:	2300      	movs	r3, #0
 8013820:	4d05      	ldr	r5, [pc, #20]	@ (8013838 <_isatty_r+0x1c>)
 8013822:	4604      	mov	r4, r0
 8013824:	4608      	mov	r0, r1
 8013826:	602b      	str	r3, [r5, #0]
 8013828:	f7ef f913 	bl	8002a52 <_isatty>
 801382c:	1c43      	adds	r3, r0, #1
 801382e:	d102      	bne.n	8013836 <_isatty_r+0x1a>
 8013830:	682b      	ldr	r3, [r5, #0]
 8013832:	b103      	cbz	r3, 8013836 <_isatty_r+0x1a>
 8013834:	6023      	str	r3, [r4, #0]
 8013836:	bd38      	pop	{r3, r4, r5, pc}
 8013838:	20011350 	.word	0x20011350

0801383c <_malloc_usable_size_r>:
 801383c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013840:	1f18      	subs	r0, r3, #4
 8013842:	2b00      	cmp	r3, #0
 8013844:	bfbc      	itt	lt
 8013846:	580b      	ldrlt	r3, [r1, r0]
 8013848:	18c0      	addlt	r0, r0, r3
 801384a:	4770      	bx	lr

0801384c <_init>:
 801384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801384e:	bf00      	nop
 8013850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013852:	bc08      	pop	{r3}
 8013854:	469e      	mov	lr, r3
 8013856:	4770      	bx	lr

08013858 <_fini>:
 8013858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801385a:	bf00      	nop
 801385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801385e:	bc08      	pop	{r3}
 8013860:	469e      	mov	lr, r3
 8013862:	4770      	bx	lr
