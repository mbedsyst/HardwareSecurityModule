
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001014c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08010398  08010398  00011398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010470  08010470  00012170  2**0
                  CONTENTS
  4 .ARM          00000008  08010470  08010470  00011470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010478  08010478  00012170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010478  08010478  00011478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801047c  0801047c  0001147c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  08010480  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001150  20000170  080105f0  00012170  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  200012c0  080105f0  000122c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00012170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d74  00000000  00000000  000121a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047c3  00000000  00000000  00035f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  0003a6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001540  00000000  00000000  0003c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006df2  00000000  00000000  0003d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002635e  00000000  00000000  000445d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014888e  00000000  00000000  0006a930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b31be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b40  00000000  00000000  001b3204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001bad44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000170 	.word	0x20000170
 8000268:	00000000 	.word	0x00000000
 800026c:	08010380 	.word	0x08010380

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000174 	.word	0x20000174
 8000288:	08010380 	.word	0x08010380

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b97e 	b.w	80005b0 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d2:	460c      	mov	r4, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14d      	bne.n	8000374 <__udivmoddi4+0xa8>
 80002d8:	428a      	cmp	r2, r1
 80002da:	460f      	mov	r7, r1
 80002dc:	4684      	mov	ip, r0
 80002de:	4696      	mov	lr, r2
 80002e0:	fab2 f382 	clz	r3, r2
 80002e4:	d960      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80002e6:	b14b      	cbz	r3, 80002fc <__udivmoddi4+0x30>
 80002e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000300:	fa1f f48e 	uxth.w	r4, lr
 8000304:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000308:	fbb7 f1f6 	udiv	r1, r7, r6
 800030c:	fb06 7711 	mls	r7, r6, r1, r7
 8000310:	fb01 f004 	mul.w	r0, r1, r4
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x62>
 800031c:	eb1e 0202 	adds.w	r2, lr, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x60>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 812d 	bhi.w	8000586 <__udivmoddi4+0x2ba>
 800032c:	4639      	mov	r1, r7
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	fa1f fc8c 	uxth.w	ip, ip
 8000334:	fbb2 f0f6 	udiv	r0, r2, r6
 8000338:	fb06 2210 	mls	r2, r6, r0, r2
 800033c:	fb00 f404 	mul.w	r4, r0, r4
 8000340:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000344:	4564      	cmp	r4, ip
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x8e>
 8000348:	eb1e 0c0c 	adds.w	ip, lr, ip
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x8c>
 8000352:	4564      	cmp	r4, ip
 8000354:	f200 811a 	bhi.w	800058c <__udivmoddi4+0x2c0>
 8000358:	4610      	mov	r0, r2
 800035a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035e:	ebac 0c04 	sub.w	ip, ip, r4
 8000362:	2100      	movs	r1, #0
 8000364:	b125      	cbz	r5, 8000370 <__udivmoddi4+0xa4>
 8000366:	fa2c f303 	lsr.w	r3, ip, r3
 800036a:	2200      	movs	r2, #0
 800036c:	e9c5 3200 	strd	r3, r2, [r5]
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d905      	bls.n	8000384 <__udivmoddi4+0xb8>
 8000378:	b10d      	cbz	r5, 800037e <__udivmoddi4+0xb2>
 800037a:	e9c5 0100 	strd	r0, r1, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	4608      	mov	r0, r1
 8000382:	e7f5      	b.n	8000370 <__udivmoddi4+0xa4>
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d14d      	bne.n	8000428 <__udivmoddi4+0x15c>
 800038c:	42a3      	cmp	r3, r4
 800038e:	f0c0 80f2 	bcc.w	8000576 <__udivmoddi4+0x2aa>
 8000392:	4290      	cmp	r0, r2
 8000394:	f080 80ef 	bcs.w	8000576 <__udivmoddi4+0x2aa>
 8000398:	4606      	mov	r6, r0
 800039a:	4623      	mov	r3, r4
 800039c:	4608      	mov	r0, r1
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e6      	beq.n	8000370 <__udivmoddi4+0xa4>
 80003a2:	e9c5 6300 	strd	r6, r3, [r5]
 80003a6:	e7e3      	b.n	8000370 <__udivmoddi4+0xa4>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 80a2 	bne.w	80004f2 <__udivmoddi4+0x226>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b4:	fa1f f68e 	uxth.w	r6, lr
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80003be:	fb07 2014 	mls	r0, r7, r4, r2
 80003c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb06 f004 	mul.w	r0, r6, r4
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d90f      	bls.n	80003f2 <__udivmoddi4+0x126>
 80003d2:	eb1e 0202 	adds.w	r2, lr, r2
 80003d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003da:	bf2c      	ite	cs
 80003dc:	f04f 0901 	movcs.w	r9, #1
 80003e0:	f04f 0900 	movcc.w	r9, #0
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d903      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003e8:	f1b9 0f00 	cmp.w	r9, #0
 80003ec:	f000 80c8 	beq.w	8000580 <__udivmoddi4+0x2b4>
 80003f0:	4644      	mov	r4, r8
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	fa1f fc8c 	uxth.w	ip, ip
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	fb00 f606 	mul.w	r6, r0, r6
 8000404:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000408:	4566      	cmp	r6, ip
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x152>
 800040c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x150>
 8000416:	4566      	cmp	r6, ip
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c6>
 800041c:	4610      	mov	r0, r2
 800041e:	ebac 0c06 	sub.w	ip, ip, r6
 8000422:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000426:	e79d      	b.n	8000364 <__udivmoddi4+0x98>
 8000428:	f1c1 0620 	rsb	r6, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	fa20 fc06 	lsr.w	ip, r0, r6
 800043a:	40f4      	lsrs	r4, r6
 800043c:	408a      	lsls	r2, r1
 800043e:	431f      	orrs	r7, r3
 8000440:	ea4e 030c 	orr.w	r3, lr, ip
 8000444:	fa00 fe01 	lsl.w	lr, r0, r1
 8000448:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800044c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000450:	fa1f fc87 	uxth.w	ip, r7
 8000454:	fbb4 f0f8 	udiv	r0, r4, r8
 8000458:	fb08 4410 	mls	r4, r8, r0, r4
 800045c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000460:	fb00 f90c 	mul.w	r9, r0, ip
 8000464:	45a1      	cmp	r9, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1ba>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 3aff 	add.w	sl, r0, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a1      	cmp	r9, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b8>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 8093 	beq.w	80005aa <__udivmoddi4+0x2de>
 8000484:	4650      	mov	r0, sl
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000492:	fb08 4413 	mls	r4, r8, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d906      	bls.n	80004b0 <__udivmoddi4+0x1e4>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x1e2>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d87a      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004ae:	4643      	mov	r3, r8
 80004b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b4:	eba4 040c 	sub.w	r4, r4, ip
 80004b8:	fba0 9802 	umull	r9, r8, r0, r2
 80004bc:	4544      	cmp	r4, r8
 80004be:	46cc      	mov	ip, r9
 80004c0:	4643      	mov	r3, r8
 80004c2:	d302      	bcc.n	80004ca <__udivmoddi4+0x1fe>
 80004c4:	d106      	bne.n	80004d4 <__udivmoddi4+0x208>
 80004c6:	45ce      	cmp	lr, r9
 80004c8:	d204      	bcs.n	80004d4 <__udivmoddi4+0x208>
 80004ca:	3801      	subs	r0, #1
 80004cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004d0:	eb68 0307 	sbc.w	r3, r8, r7
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x222>
 80004d6:	ebbe 020c 	subs.w	r2, lr, ip
 80004da:	eb64 0403 	sbc.w	r4, r4, r3
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e73e      	b.n	8000370 <__udivmoddi4+0xa4>
 80004f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f6:	f1c3 0120 	rsb	r1, r3, #32
 80004fa:	fa04 f203 	lsl.w	r2, r4, r3
 80004fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000508:	fa20 f101 	lsr.w	r1, r0, r1
 800050c:	fa1f f68e 	uxth.w	r6, lr
 8000510:	fbb4 f0f7 	udiv	r0, r4, r7
 8000514:	430a      	orrs	r2, r1
 8000516:	fb07 4410 	mls	r4, r7, r0, r4
 800051a:	0c11      	lsrs	r1, r2, #16
 800051c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000520:	fb00 f406 	mul.w	r4, r0, r6
 8000524:	428c      	cmp	r4, r1
 8000526:	d90e      	bls.n	8000546 <__udivmoddi4+0x27a>
 8000528:	eb1e 0101 	adds.w	r1, lr, r1
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0901 	movcs.w	r9, #1
 8000536:	f04f 0900 	movcc.w	r9, #0
 800053a:	428c      	cmp	r4, r1
 800053c:	d902      	bls.n	8000544 <__udivmoddi4+0x278>
 800053e:	f1b9 0f00 	cmp.w	r9, #0
 8000542:	d02c      	beq.n	800059e <__udivmoddi4+0x2d2>
 8000544:	4640      	mov	r0, r8
 8000546:	1b09      	subs	r1, r1, r4
 8000548:	b292      	uxth	r2, r2
 800054a:	fbb1 f4f7 	udiv	r4, r1, r7
 800054e:	fb07 1114 	mls	r1, r7, r4, r1
 8000552:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000556:	fb04 f106 	mul.w	r1, r4, r6
 800055a:	4291      	cmp	r1, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x2a2>
 800055e:	eb1e 0202 	adds.w	r2, lr, r2
 8000562:	f104 38ff 	add.w	r8, r4, #4294967295
 8000566:	d201      	bcs.n	800056c <__udivmoddi4+0x2a0>
 8000568:	4291      	cmp	r1, r2
 800056a:	d815      	bhi.n	8000598 <__udivmoddi4+0x2cc>
 800056c:	4644      	mov	r4, r8
 800056e:	1a52      	subs	r2, r2, r1
 8000570:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000574:	e721      	b.n	80003ba <__udivmoddi4+0xee>
 8000576:	1a86      	subs	r6, r0, r2
 8000578:	eb64 0303 	sbc.w	r3, r4, r3
 800057c:	2001      	movs	r0, #1
 800057e:	e70e      	b.n	800039e <__udivmoddi4+0xd2>
 8000580:	3c02      	subs	r4, #2
 8000582:	4472      	add	r2, lr
 8000584:	e735      	b.n	80003f2 <__udivmoddi4+0x126>
 8000586:	3902      	subs	r1, #2
 8000588:	4472      	add	r2, lr
 800058a:	e6d0      	b.n	800032e <__udivmoddi4+0x62>
 800058c:	44f4      	add	ip, lr
 800058e:	3802      	subs	r0, #2
 8000590:	e6e3      	b.n	800035a <__udivmoddi4+0x8e>
 8000592:	44f4      	add	ip, lr
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x152>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e7e7      	b.n	800056e <__udivmoddi4+0x2a2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4471      	add	r1, lr
 80005a2:	e7d0      	b.n	8000546 <__udivmoddi4+0x27a>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443c      	add	r4, r7
 80005a8:	e782      	b.n	80004b0 <__udivmoddi4+0x1e4>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e76a      	b.n	8000486 <__udivmoddi4+0x1ba>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b092      	sub	sp, #72	@ 0x48
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f001 fa8d 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f869 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fb05 	bl	8000bd0 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80005c6:	f000 faa1 	bl	8000b0c <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 fa07 	bl	80009dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ce:	f000 f8d7 	bl	8000780 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005d2:	f000 f9ad 	bl	8000930 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80005d6:	f000 fa4d 	bl	8000a74 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80005da:	f000 f927 	bl	800082c <MX_RTC_Init>
  MX_RNG_Init();
 80005de:	f000 f90f 	bl	8000800 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80005e2:	bf00      	nop
 80005e4:	4b27      	ldr	r3, [pc, #156]	@ (8000684 <main+0xd0>)
 80005e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0fa      	beq.n	80005e4 <main+0x30>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f001 f89e 	bl	8001730 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f001 f89b 	bl	8001730 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005fa:	2002      	movs	r0, #2
 80005fc:	f001 f898 	bl	8001730 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000600:	2101      	movs	r1, #1
 8000602:	2000      	movs	r0, #0
 8000604:	f001 f90a 	bl	800181c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000608:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <main+0xd4>)
 800060a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800060e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000610:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <main+0xd4>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000616:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <main+0xd4>)
 8000618:	2200      	movs	r2, #0
 800061a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800061c:	4b1a      	ldr	r3, [pc, #104]	@ (8000688 <main+0xd4>)
 800061e:	2200      	movs	r2, #0
 8000620:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <main+0xd4>)
 8000624:	2200      	movs	r2, #0
 8000626:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000628:	4917      	ldr	r1, [pc, #92]	@ (8000688 <main+0xd4>)
 800062a:	2000      	movs	r0, #0
 800062c:	f001 f990 	bl	8001950 <BSP_COM_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <main+0x86>
  {
    Error_Handler();
 8000636:	f000 fbc7 	bl	8000dc8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      for(uint32_t j = 0; j <= UINT32_MAX; j++)
 800063a:	2300      	movs	r3, #0
 800063c:	647b      	str	r3, [r7, #68]	@ 0x44
      {
          snprintf(TxMessageBuffer, sizeof(TxMessageBuffer), "Counter: %lu\r\n", (unsigned long)j);
 800063e:	1d38      	adds	r0, r7, #4
 8000640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000642:	4a12      	ldr	r2, [pc, #72]	@ (800068c <main+0xd8>)
 8000644:	2140      	movs	r1, #64	@ 0x40
 8000646:	f00f f9d5 	bl	800f9f4 <sniprintf>
          TEMPLATE_Transmit((uint8_t*)TxMessageBuffer, strlen(TxMessageBuffer));
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fe1d 	bl	800028c <strlen>
 8000652:	4603      	mov	r3, r0
 8000654:	b29a      	uxth	r2, r3
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f00d fb86 	bl	800dd6c <TEMPLATE_Transmit>
          HAL_Delay(j%1000);
 8000660:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <main+0xdc>)
 8000664:	fba3 1302 	umull	r1, r3, r3, r2
 8000668:	099b      	lsrs	r3, r3, #6
 800066a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800066e:	fb01 f303 	mul.w	r3, r1, r3
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	4618      	mov	r0, r3
 8000676:	f001 faed 	bl	8001c54 <HAL_Delay>
      for(uint32_t j = 0; j <= UINT32_MAX; j++)
 800067a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800067c:	3301      	adds	r3, #1
 800067e:	647b      	str	r3, [r7, #68]	@ 0x44
          snprintf(TxMessageBuffer, sizeof(TxMessageBuffer), "Counter: %lu\r\n", (unsigned long)j);
 8000680:	bf00      	nop
 8000682:	e7dc      	b.n	800063e <main+0x8a>
 8000684:	200006d0 	.word	0x200006d0
 8000688:	2000018c 	.word	0x2000018c
 800068c:	08010398 	.word	0x08010398
 8000690:	10624dd3 	.word	0x10624dd3

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b09c      	sub	sp, #112	@ 0x70
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2250      	movs	r2, #80	@ 0x50
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00f f9da 	bl	800fa5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
 80006b8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000778 <SystemClock_Config+0xe4>)
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	4a2e      	ldr	r2, [pc, #184]	@ (8000778 <SystemClock_Config+0xe4>)
 80006c0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80006c4:	6113      	str	r3, [r2, #16]
 80006c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemClock_Config+0xe4>)
 80006c8:	691b      	ldr	r3, [r3, #16]
 80006ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006d2:	bf00      	nop
 80006d4:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <SystemClock_Config+0xe4>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	f003 0308 	and.w	r3, r3, #8
 80006dc:	2b08      	cmp	r3, #8
 80006de:	d1f9      	bne.n	80006d4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80006e0:	2329      	movs	r3, #41	@ 0x29
 80006e2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80006ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006fa:	2303      	movs	r3, #3
 80006fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fe:	2304      	movs	r3, #4
 8000700:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000702:	23fa      	movs	r3, #250	@ 0xfa
 8000704:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000712:	2304      	movs	r3, #4
 8000714:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000716:	2300      	movs	r3, #0
 8000718:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fc72 	bl	800400c <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072e:	f000 fb4b 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	231f      	movs	r3, #31
 8000734:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2303      	movs	r3, #3
 8000738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074a:	f107 0308 	add.w	r3, r7, #8
 800074e:	2105      	movs	r1, #5
 8000750:	4618      	mov	r0, r3
 8000752:	f004 f893 	bl	800487c <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800075c:	f000 fb34 	bl	8000dc8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <SystemClock_Config+0xe8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000768:	4a04      	ldr	r2, [pc, #16]	@ (800077c <SystemClock_Config+0xe8>)
 800076a:	f043 0320 	orr.w	r3, r3, #32
 800076e:	6013      	str	r3, [r2, #0]
}
 8000770:	bf00      	nop
 8000772:	3770      	adds	r7, #112	@ 0x70
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	44020800 	.word	0x44020800
 800077c:	40022000 	.word	0x40022000

08000780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000784:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <MX_I2C1_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	@ (80007f8 <MX_I2C1_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 800078a:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <MX_I2C1_Init+0x74>)
 800078c:	4a1b      	ldr	r2, [pc, #108]	@ (80007fc <MX_I2C1_Init+0x7c>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000796:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <MX_I2C1_Init+0x74>)
 8000798:	2201      	movs	r2, #1
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007a2:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ba:	480e      	ldr	r0, [pc, #56]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007bc:	f001 fdf0 	bl	80023a0 <HAL_I2C_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007c6:	f000 faff 	bl	8000dc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4809      	ldr	r0, [pc, #36]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007ce:	f001 fe82 	bl	80024d6 <HAL_I2CEx_ConfigAnalogFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d8:	f000 faf6 	bl	8000dc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_I2C1_Init+0x74>)
 80007e0:	f001 fec4 	bl	800256c <HAL_I2CEx_ConfigDigitalFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 faed 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000019c 	.word	0x2000019c
 80007f8:	40005400 	.word	0x40005400
 80007fc:	10c043e5 	.word	0x10c043e5

08000800 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <MX_RNG_Init+0x24>)
 8000806:	4a08      	ldr	r2, [pc, #32]	@ (8000828 <MX_RNG_Init+0x28>)
 8000808:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_RNG_Init+0x24>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <MX_RNG_Init+0x24>)
 8000812:	f009 fbcd 	bl	8009fb0 <HAL_RNG_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800081c:	f000 fad4 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200001f0 	.word	0x200001f0
 8000828:	420c0800 	.word	0x420c0800

0800082c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	@ 0x38
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800085a:	4b33      	ldr	r3, [pc, #204]	@ (8000928 <MX_RTC_Init+0xfc>)
 800085c:	4a33      	ldr	r2, [pc, #204]	@ (800092c <MX_RTC_Init+0x100>)
 800085e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000860:	4b31      	ldr	r3, [pc, #196]	@ (8000928 <MX_RTC_Init+0xfc>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000866:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <MX_RTC_Init+0xfc>)
 8000868:	227f      	movs	r2, #127	@ 0x7f
 800086a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800086c:	4b2e      	ldr	r3, [pc, #184]	@ (8000928 <MX_RTC_Init+0xfc>)
 800086e:	22ff      	movs	r2, #255	@ 0xff
 8000870:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000872:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <MX_RTC_Init+0xfc>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000878:	4b2b      	ldr	r3, [pc, #172]	@ (8000928 <MX_RTC_Init+0xfc>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800087e:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <MX_RTC_Init+0xfc>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000884:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <MX_RTC_Init+0xfc>)
 8000886:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800088a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800088c:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_RTC_Init+0xfc>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000892:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <MX_RTC_Init+0xfc>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000898:	4823      	ldr	r0, [pc, #140]	@ (8000928 <MX_RTC_Init+0xfc>)
 800089a:	f009 fc27 	bl	800a0ec <HAL_RTC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008a4:	f000 fa90 	bl	8000dc8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	481a      	ldr	r0, [pc, #104]	@ (8000928 <MX_RTC_Init+0xfc>)
 80008c0:	f009 fe7a 	bl	800a5b8 <HAL_RTCEx_PrivilegeModeSet>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80008ca:	f000 fa7d 	bl	8000dc8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	2201      	movs	r2, #1
 80008e8:	4619      	mov	r1, r3
 80008ea:	480f      	ldr	r0, [pc, #60]	@ (8000928 <MX_RTC_Init+0xfc>)
 80008ec:	f009 fc80 	bl	800a1f0 <HAL_RTC_SetTime>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80008f6:	f000 fa67 	bl	8000dc8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008fa:	2301      	movs	r3, #1
 80008fc:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80008fe:	2301      	movs	r3, #1
 8000900:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000902:	2301      	movs	r3, #1
 8000904:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000906:	2300      	movs	r3, #0
 8000908:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2201      	movs	r2, #1
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <MX_RTC_Init+0xfc>)
 8000912:	f009 fcff 	bl	800a314 <HAL_RTC_SetDate>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 800091c:	f000 fa54 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	3738      	adds	r7, #56	@ 0x38
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000204 	.word	0x20000204
 800092c:	44007800 	.word	0x44007800

08000930 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000934:	4b27      	ldr	r3, [pc, #156]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 8000936:	4a28      	ldr	r2, [pc, #160]	@ (80009d8 <MX_SPI1_Init+0xa8>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093a:	4b26      	ldr	r3, [pc, #152]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 800093c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000942:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 800094a:	2207      	movs	r2, #7
 800094c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000954:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 800095c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000960:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 8000964:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000968:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000976:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 800097e:	2207      	movs	r2, #7
 8000980:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 8000984:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000988:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 800098c:	2200      	movs	r2, #0
 800098e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000990:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 8000998:	2200      	movs	r2, #0
 800099a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800099c:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_SPI1_Init+0xa4>)
 80009c2:	f009 fe27 	bl	800a614 <HAL_SPI_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80009cc:	f000 f9fc 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000234 	.word	0x20000234
 80009d8:	40013000 	.word	0x40013000

080009dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e0:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 80009e2:	4a23      	ldr	r2, [pc, #140]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e6:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a24:	4811      	ldr	r0, [pc, #68]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 8000a26:	f009 ff80 	bl	800a92a <HAL_UART_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a30:	f000 f9ca 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 8000a38:	f00a fc0e 	bl	800b258 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a42:	f000 f9c1 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4808      	ldr	r0, [pc, #32]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 8000a4a:	f00a fc43 	bl	800b2d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f000 f9b8 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_USART2_UART_Init+0x90>)
 8000a5a:	f00a fbc4 	bl	800b1e6 <HAL_UARTEx_DisableFifoMode>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a64:	f000 f9b0 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200002c4 	.word	0x200002c4
 8000a70:	40004400 	.word	0x40004400

08000a74 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000a78:	4b22      	ldr	r3, [pc, #136]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000a7a:	4a23      	ldr	r2, [pc, #140]	@ (8000b08 <MX_USART6_UART_Init+0x94>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000abc:	4811      	ldr	r0, [pc, #68]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000abe:	f009 ff34 	bl	800a92a <HAL_UART_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000ac8:	f000 f97e 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	480d      	ldr	r0, [pc, #52]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000ad0:	f00a fbc2 	bl	800b258 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000ada:	f000 f975 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4808      	ldr	r0, [pc, #32]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000ae2:	f00a fbf7 	bl	800b2d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000aec:	f000 f96c 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_USART6_UART_Init+0x90>)
 8000af2:	f00a fb78 	bl	800b1e6 <HAL_UARTEx_DisableFifoMode>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000afc:	f000 f964 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000358 	.word	0x20000358
 8000b08:	40006400 	.word	0x40006400

08000b0c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8000b10:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b12:	4a2a      	ldr	r2, [pc, #168]	@ (8000bbc <MX_USB_PCD_Init+0xb0>)
 8000b14:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000b18:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b1a:	4a29      	ldr	r2, [pc, #164]	@ (8000bc0 <MX_USB_PCD_Init+0xb4>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000b1e:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b20:	2208      	movs	r2, #8
 8000b22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000b24:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b26:	2202      	movs	r2, #2
 8000b28:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b2a:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000b30:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000b36:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000b5a:	4817      	ldr	r0, [pc, #92]	@ (8000bb8 <MX_USB_PCD_Init+0xac>)
 8000b5c:	f001 fdb5 	bl	80026ca <HAL_PCD_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8000b66:	f000 f92f 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4915      	ldr	r1, [pc, #84]	@ (8000bc4 <MX_USB_PCD_Init+0xb8>)
 8000b6e:	4813      	ldr	r0, [pc, #76]	@ (8000bbc <MX_USB_PCD_Init+0xb0>)
 8000b70:	f00d fc02 	bl	800e378 <USBD_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8000b7a:	f000 f925 	bl	8000dc8 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000b7e:	4912      	ldr	r1, [pc, #72]	@ (8000bc8 <MX_USB_PCD_Init+0xbc>)
 8000b80:	480e      	ldr	r0, [pc, #56]	@ (8000bbc <MX_USB_PCD_Init+0xb0>)
 8000b82:	f00d fc29 	bl	800e3d8 <USBD_RegisterClass>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8000b8c:	f000 f91c 	bl	8000dc8 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8000b90:	490e      	ldr	r1, [pc, #56]	@ (8000bcc <MX_USB_PCD_Init+0xc0>)
 8000b92:	480a      	ldr	r0, [pc, #40]	@ (8000bbc <MX_USB_PCD_Init+0xb0>)
 8000b94:	f00c fffe 	bl	800db94 <USBD_CDC_RegisterInterface>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8000b9e:	f000 f913 	bl	8000dc8 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000ba2:	4806      	ldr	r0, [pc, #24]	@ (8000bbc <MX_USB_PCD_Init+0xb0>)
 8000ba4:	f00d fc4e 	bl	800e444 <USBD_Start>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8000bae:	f000 f90b 	bl	8000dc8 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200003ec 	.word	0x200003ec
 8000bbc:	200006d0 	.word	0x200006d0
 8000bc0:	40016000 	.word	0x40016000
 8000bc4:	200000d0 	.word	0x200000d0
 8000bc8:	20000034 	.word	0x20000034
 8000bcc:	200000b4 	.word	0x200000b4

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	@ 0x30
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000be6:	4b72      	ldr	r3, [pc, #456]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bec:	4a70      	ldr	r2, [pc, #448]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000bf6:	4b6e      	ldr	r3, [pc, #440]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000bfc:	f003 0310 	and.w	r3, r3, #16
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c04:	4b6a      	ldr	r3, [pc, #424]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c0a:	4a69      	ldr	r2, [pc, #420]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c14:	4b66      	ldr	r3, [pc, #408]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	4b63      	ldr	r3, [pc, #396]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c28:	4a61      	ldr	r2, [pc, #388]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c32:	4b5f      	ldr	r3, [pc, #380]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b5b      	ldr	r3, [pc, #364]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c46:	4a5a      	ldr	r2, [pc, #360]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c50:	4b57      	ldr	r3, [pc, #348]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	4b54      	ldr	r3, [pc, #336]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c64:	4a52      	ldr	r2, [pc, #328]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c6e:	4b50      	ldr	r3, [pc, #320]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c74:	f003 0302 	and.w	r3, r3, #2
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7c:	4b4c      	ldr	r3, [pc, #304]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c82:	4a4b      	ldr	r2, [pc, #300]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c8c:	4b48      	ldr	r3, [pc, #288]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	4b45      	ldr	r3, [pc, #276]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca0:	4a43      	ldr	r2, [pc, #268]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000caa:	4b41      	ldr	r3, [pc, #260]	@ (8000db0 <MX_GPIO_Init+0x1e0>)
 8000cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cb8:	2332      	movs	r3, #50	@ 0x32
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc8:	230b      	movs	r3, #11
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4838      	ldr	r0, [pc, #224]	@ (8000db4 <MX_GPIO_Init+0x1e4>)
 8000cd4:	f001 f9fa 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cd8:	2384      	movs	r3, #132	@ 0x84
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce8:	230b      	movs	r3, #11
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4831      	ldr	r0, [pc, #196]	@ (8000db8 <MX_GPIO_Init+0x1e8>)
 8000cf4:	f001 f9ea 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	482b      	ldr	r0, [pc, #172]	@ (8000db8 <MX_GPIO_Init+0x1e8>)
 8000d0c:	f001 f9de 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000d10:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	4825      	ldr	r0, [pc, #148]	@ (8000dbc <MX_GPIO_Init+0x1ec>)
 8000d26:	f001 f9d1 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3c:	230b      	movs	r3, #11
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	481d      	ldr	r0, [pc, #116]	@ (8000dbc <MX_GPIO_Init+0x1ec>)
 8000d48:	f001 f9c0 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000d4c:	2380      	movs	r3, #128	@ 0x80
 8000d4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <MX_GPIO_Init+0x1f0>)
 8000d52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4819      	ldr	r0, [pc, #100]	@ (8000dc4 <MX_GPIO_Init+0x1f4>)
 8000d60:	f001 f9b4 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000d64:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d72:	2302      	movs	r3, #2
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d76:	230b      	movs	r3, #11
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4810      	ldr	r0, [pc, #64]	@ (8000dc4 <MX_GPIO_Init+0x1f4>)
 8000d82:	f001 f9a3 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000d86:	23c0      	movs	r3, #192	@ 0xc0
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d96:	2308      	movs	r3, #8
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <MX_GPIO_Init+0x1ec>)
 8000da2:	f001 f993 	bl	80020cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da6:	bf00      	nop
 8000da8:	3730      	adds	r7, #48	@ 0x30
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	44020c00 	.word	0x44020c00
 8000db4:	42020800 	.word	0x42020800
 8000db8:	42020000 	.word	0x42020000
 8000dbc:	42020400 	.word	0x42020400
 8000dc0:	10110000 	.word	0x10110000
 8000dc4:	42021800 	.word	0x42021800

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <Error_Handler+0x8>

08000dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0cc      	sub	sp, #304	@ 0x130
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000dee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000df2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e08:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000e12:	461a      	mov	r2, r3
 8000e14:	2100      	movs	r1, #0
 8000e16:	f00e fe21 	bl	800fa5c <memset>
  if(hi2c->Instance==I2C1)
 8000e1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a33      	ldr	r2, [pc, #204]	@ (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d15e      	bne.n	8000eea <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e30:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000e34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e44:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4618      	mov	r0, r3
 8000e54:	f004 f854 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000e5e:	f7ff ffb3 	bl	8000dc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e68:	4a23      	ldr	r2, [pc, #140]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e72:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e78:	f003 0202 	and.w	r2, r3, #2
 8000e7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e80:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e8a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e8e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e94:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e98:	2312      	movs	r3, #18
 8000e9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4811      	ldr	r0, [pc, #68]	@ (8000efc <HAL_I2C_MspInit+0x118>)
 8000eb8:	f001 f908 	bl	80020cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000ec4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ed2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000ed6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000eda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ee4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000ee8:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000eea:	bf00      	nop
 8000eec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	44020c00 	.word	0x44020c00
 8000efc:	42020400 	.word	0x42020400

08000f00 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0c6      	sub	sp, #280	@ 0x118
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000f0e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f10:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	f00e fd9b 	bl	800fa5c <memset>
  if(hrng->Instance==RNG)
 8000f26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f2a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <HAL_RNG_MspInit+0xa8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d131      	bne.n	8000f9c <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000f38:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f3c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8000f40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000f4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f54:	2200      	movs	r2, #0
 8000f56:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 ffce 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8000f6a:	f7ff ff2d 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <HAL_RNG_MspInit+0xac>)
 8000f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <HAL_RNG_MspInit+0xac>)
 8000f76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <HAL_RNG_MspInit+0xac>)
 8000f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f84:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8000f88:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f9a:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000f9c:	bf00      	nop
 8000f9e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	420c0800 	.word	0x420c0800
 8000fac:	44020c00 	.word	0x44020c00

08000fb0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0c6      	sub	sp, #280	@ 0x118
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000fbe:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f00e fd43 	bl	800fa5c <memset>
  if(hrtc->Instance==RTC)
 8000fd6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fda:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a21      	ldr	r2, [pc, #132]	@ (8001068 <HAL_RTC_MspInit+0xb8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d13a      	bne.n	800105e <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fe8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000fec:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8000ff0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ffc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001008:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4618      	mov	r0, r3
 8001012:	f003 ff75 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 800101c:	f7ff fed4 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001020:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_RTC_MspInit+0xbc>)
 8001022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001026:	4a11      	ldr	r2, [pc, #68]	@ (800106c <HAL_RTC_MspInit+0xbc>)
 8001028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800102c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001030:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <HAL_RTC_MspInit+0xbc>)
 8001032:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001036:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <HAL_RTC_MspInit+0xbc>)
 8001038:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800103c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001040:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_RTC_MspInit+0xbc>)
 8001042:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001046:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800104a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800104e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001058:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800105c:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800105e:	bf00      	nop
 8001060:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	44007800 	.word	0x44007800
 800106c:	44020c00 	.word	0x44020c00

08001070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0ce      	sub	sp, #312	@ 0x138
 8001074:	af00      	add	r7, sp, #0
 8001076:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800107a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800107e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001090:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001094:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001098:	4618      	mov	r0, r3
 800109a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	f00e fcdb 	bl	800fa5c <memset>
  if(hspi->Instance==SPI1)
 80010a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010aa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a49      	ldr	r2, [pc, #292]	@ (80011d8 <HAL_SPI_MspInit+0x168>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	f040 808a 	bne.w	80011ce <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80010ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010be:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80010c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 80010ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80010d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80010d6:	2200      	movs	r2, #0
 80010d8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010dc:	f107 0318 	add.w	r3, r7, #24
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 ff0d 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 80010ec:	f7ff fe6c 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f0:	4b3a      	ldr	r3, [pc, #232]	@ (80011dc <HAL_SPI_MspInit+0x16c>)
 80010f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80010f6:	4a39      	ldr	r2, [pc, #228]	@ (80011dc <HAL_SPI_MspInit+0x16c>)
 80010f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010fc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001100:	4b36      	ldr	r3, [pc, #216]	@ (80011dc <HAL_SPI_MspInit+0x16c>)
 8001102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001106:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800110a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800110e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001118:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800111c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b2f      	ldr	r3, [pc, #188]	@ (80011dc <HAL_SPI_MspInit+0x16c>)
 8001120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001124:	4a2d      	ldr	r2, [pc, #180]	@ (80011dc <HAL_SPI_MspInit+0x16c>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800112e:	4b2b      	ldr	r3, [pc, #172]	@ (80011dc <HAL_SPI_MspInit+0x16c>)
 8001130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001134:	f003 0201 	and.w	r2, r3, #1
 8001138:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800113c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001146:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800114a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800114c:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <HAL_SPI_MspInit+0x16c>)
 800114e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001152:	4a22      	ldr	r2, [pc, #136]	@ (80011dc <HAL_SPI_MspInit+0x16c>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800115c:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <HAL_SPI_MspInit+0x16c>)
 800115e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001162:	f003 0208 	and.w	r2, r3, #8
 8001166:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800116a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001174:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001178:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800117a:	2360      	movs	r3, #96	@ 0x60
 800117c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001192:	2305      	movs	r3, #5
 8001194:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800119c:	4619      	mov	r1, r3
 800119e:	4810      	ldr	r0, [pc, #64]	@ (80011e0 <HAL_SPI_MspInit+0x170>)
 80011a0:	f000 ff94 	bl	80020cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011bc:	2305      	movs	r3, #5
 80011be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c2:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80011c6:	4619      	mov	r1, r3
 80011c8:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <HAL_SPI_MspInit+0x174>)
 80011ca:	f000 ff7f 	bl	80020cc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011ce:	bf00      	nop
 80011d0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40013000 	.word	0x40013000
 80011dc:	44020c00 	.word	0x44020c00
 80011e0:	42020000 	.word	0x42020000
 80011e4:	42020c00 	.word	0x42020c00

080011e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0d0      	sub	sp, #320	@ 0x140
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011f2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80011f6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001208:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800120c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001210:	4618      	mov	r0, r3
 8001212:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001216:	461a      	mov	r2, r3
 8001218:	2100      	movs	r1, #0
 800121a:	f00e fc1f 	bl	800fa5c <memset>
  if(huart->Instance==USART2)
 800121e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001222:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a7c      	ldr	r2, [pc, #496]	@ (800141c <HAL_UART_MspInit+0x234>)
 800122c:	4293      	cmp	r3, r2
 800122e:	f040 808a 	bne.w	8001346 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001232:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001236:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800123a:	f04f 0202 	mov.w	r2, #2
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001246:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800124a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800124e:	2200      	movs	r2, #0
 8001250:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fe52 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001262:	f7ff fdb1 	bl	8000dc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001266:	4b6e      	ldr	r3, [pc, #440]	@ (8001420 <HAL_UART_MspInit+0x238>)
 8001268:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800126c:	4a6c      	ldr	r2, [pc, #432]	@ (8001420 <HAL_UART_MspInit+0x238>)
 800126e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001272:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001276:	4b6a      	ldr	r3, [pc, #424]	@ (8001420 <HAL_UART_MspInit+0x238>)
 8001278:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800127c:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8001280:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001284:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800128e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001292:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b62      	ldr	r3, [pc, #392]	@ (8001420 <HAL_UART_MspInit+0x238>)
 8001296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800129a:	4a61      	ldr	r2, [pc, #388]	@ (8001420 <HAL_UART_MspInit+0x238>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001420 <HAL_UART_MspInit+0x238>)
 80012a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012aa:	f003 0201 	and.w	r2, r3, #1
 80012ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012c0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c2:	4b57      	ldr	r3, [pc, #348]	@ (8001420 <HAL_UART_MspInit+0x238>)
 80012c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c8:	4a55      	ldr	r2, [pc, #340]	@ (8001420 <HAL_UART_MspInit+0x238>)
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012d2:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <HAL_UART_MspInit+0x238>)
 80012d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d8:	f003 0208 	and.w	r2, r3, #8
 80012dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012ee:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012f0:	2308      	movs	r3, #8
 80012f2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001308:	2307      	movs	r3, #7
 800130a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001312:	4619      	mov	r1, r3
 8001314:	4843      	ldr	r0, [pc, #268]	@ (8001424 <HAL_UART_MspInit+0x23c>)
 8001316:	f000 fed9 	bl	80020cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800131a:	2320      	movs	r3, #32
 800131c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001332:	2307      	movs	r3, #7
 8001334:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001338:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800133c:	4619      	mov	r1, r3
 800133e:	483a      	ldr	r0, [pc, #232]	@ (8001428 <HAL_UART_MspInit+0x240>)
 8001340:	f000 fec4 	bl	80020cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001344:	e065      	b.n	8001412 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 8001346:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800134a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a36      	ldr	r2, [pc, #216]	@ (800142c <HAL_UART_MspInit+0x244>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d15c      	bne.n	8001412 <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001358:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800135c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001360:	f04f 0220 	mov.w	r2, #32
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 800136c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001370:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001374:	2200      	movs	r2, #0
 8001376:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001378:	f107 0320 	add.w	r3, r7, #32
 800137c:	4618      	mov	r0, r3
 800137e:	f003 fdbf 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001388:	f7ff fd1e 	bl	8000dc8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800138c:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <HAL_UART_MspInit+0x238>)
 800138e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001392:	4a23      	ldr	r2, [pc, #140]	@ (8001420 <HAL_UART_MspInit+0x238>)
 8001394:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001398:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800139c:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <HAL_UART_MspInit+0x238>)
 800139e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013a2:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 80013a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013b4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013b8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <HAL_UART_MspInit+0x238>)
 80013bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c0:	4a17      	ldr	r2, [pc, #92]	@ (8001420 <HAL_UART_MspInit+0x238>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_UART_MspInit+0x238>)
 80013cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d0:	f003 0204 	and.w	r2, r3, #4
 80013d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013e6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013e8:	23c0      	movs	r3, #192	@ 0xc0
 80013ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001400:	2307      	movs	r3, #7
 8001402:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001406:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800140a:	4619      	mov	r1, r3
 800140c:	4808      	ldr	r0, [pc, #32]	@ (8001430 <HAL_UART_MspInit+0x248>)
 800140e:	f000 fe5d 	bl	80020cc <HAL_GPIO_Init>
}
 8001412:	bf00      	nop
 8001414:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40004400 	.word	0x40004400
 8001420:	44020c00 	.word	0x44020c00
 8001424:	42020000 	.word	0x42020000
 8001428:	42020c00 	.word	0x42020c00
 800142c:	40006400 	.word	0x40006400
 8001430:	42020800 	.word	0x42020800

08001434 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0c6      	sub	sp, #280	@ 0x118
 8001438:	af00      	add	r7, sp, #0
 800143a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800143e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001442:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001444:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001448:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800144c:	4618      	mov	r0, r3
 800144e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001452:	461a      	mov	r2, r3
 8001454:	2100      	movs	r1, #0
 8001456:	f00e fb01 	bl	800fa5c <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800145a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800145e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a22      	ldr	r2, [pc, #136]	@ (80014f0 <HAL_PCD_MspInit+0xbc>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d13b      	bne.n	80014e4 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800146c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001470:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0310 	mov.w	r3, #16
 800147c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001480:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001488:	2230      	movs	r2, #48	@ 0x30
 800148a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4618      	mov	r0, r3
 8001494:	f003 fd34 	bl	8004f00 <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800149e:	f7ff fc93 	bl	8000dc8 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 80014a2:	f002 fda3 	bl	8003fec <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <HAL_PCD_MspInit+0xc0>)
 80014a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014ac:	4a11      	ldr	r2, [pc, #68]	@ (80014f4 <HAL_PCD_MspInit+0xc0>)
 80014ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014b2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80014b6:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <HAL_PCD_MspInit+0xc0>)
 80014b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014bc:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 80014c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014d2:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	204a      	movs	r0, #74	@ 0x4a
 80014da:	f000 fc97 	bl	8001e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80014de:	204a      	movs	r0, #74	@ 0x4a
 80014e0:	f000 fcae 	bl	8001e40 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80014e4:	bf00      	nop
 80014e6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40016000 	.word	0x40016000
 80014f4:	44020c00 	.word	0x44020c00

080014f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <NMI_Handler+0x4>

08001500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <MemManage_Handler+0x4>

08001510 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <UsageFault_Handler+0x4>

08001520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154e:	f000 fb61 	bl	8001c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}

08001556 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800155a:	2000      	movs	r0, #0
 800155c:	f000 f9d6 	bl	800190c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <USB_DRD_FS_IRQHandler+0x10>)
 800156a:	f001 f9d1 	bl	8002910 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200003ec 	.word	0x200003ec

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	@ (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f00e fa60 	bl	800fa6c <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200a0000 	.word	0x200a0000
 80015d8:	00000500 	.word	0x00000500
 80015dc:	200009ac 	.word	0x200009ac
 80015e0:	200012c0 	.word	0x200012c0

080015e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015ea:	4b35      	ldr	r3, [pc, #212]	@ (80016c0 <SystemInit+0xdc>)
 80015ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015f0:	4a33      	ldr	r2, [pc, #204]	@ (80016c0 <SystemInit+0xdc>)
 80015f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80015fa:	4b32      	ldr	r3, [pc, #200]	@ (80016c4 <SystemInit+0xe0>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001600:	4b30      	ldr	r3, [pc, #192]	@ (80016c4 <SystemInit+0xe0>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001606:	4b2f      	ldr	r3, [pc, #188]	@ (80016c4 <SystemInit+0xe0>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800160c:	4b2d      	ldr	r3, [pc, #180]	@ (80016c4 <SystemInit+0xe0>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	492c      	ldr	r1, [pc, #176]	@ (80016c4 <SystemInit+0xe0>)
 8001612:	4b2d      	ldr	r3, [pc, #180]	@ (80016c8 <SystemInit+0xe4>)
 8001614:	4013      	ands	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001618:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <SystemInit+0xe0>)
 800161a:	2200      	movs	r2, #0
 800161c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800161e:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <SystemInit+0xe0>)
 8001620:	2200      	movs	r2, #0
 8001622:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001624:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <SystemInit+0xe0>)
 8001626:	2200      	movs	r2, #0
 8001628:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800162a:	4b26      	ldr	r3, [pc, #152]	@ (80016c4 <SystemInit+0xe0>)
 800162c:	4a27      	ldr	r2, [pc, #156]	@ (80016cc <SystemInit+0xe8>)
 800162e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001630:	4b24      	ldr	r3, [pc, #144]	@ (80016c4 <SystemInit+0xe0>)
 8001632:	2200      	movs	r2, #0
 8001634:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001636:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <SystemInit+0xe0>)
 8001638:	4a24      	ldr	r2, [pc, #144]	@ (80016cc <SystemInit+0xe8>)
 800163a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800163c:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <SystemInit+0xe0>)
 800163e:	2200      	movs	r2, #0
 8001640:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001642:	4b20      	ldr	r3, [pc, #128]	@ (80016c4 <SystemInit+0xe0>)
 8001644:	4a21      	ldr	r2, [pc, #132]	@ (80016cc <SystemInit+0xe8>)
 8001646:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001648:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <SystemInit+0xe0>)
 800164a:	2200      	movs	r2, #0
 800164c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800164e:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <SystemInit+0xe0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a1c      	ldr	r2, [pc, #112]	@ (80016c4 <SystemInit+0xe0>)
 8001654:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001658:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800165a:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <SystemInit+0xe0>)
 800165c:	2200      	movs	r2, #0
 800165e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001660:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <SystemInit+0xdc>)
 8001662:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001666:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001668:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <SystemInit+0xec>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001670:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001678:	d003      	beq.n	8001682 <SystemInit+0x9e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001680:	d117      	bne.n	80016b2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <SystemInit+0xec>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <SystemInit+0xec>)
 8001690:	4a10      	ldr	r2, [pc, #64]	@ (80016d4 <SystemInit+0xf0>)
 8001692:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001694:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <SystemInit+0xec>)
 8001696:	4a10      	ldr	r2, [pc, #64]	@ (80016d8 <SystemInit+0xf4>)
 8001698:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800169a:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <SystemInit+0xec>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a0c      	ldr	r2, [pc, #48]	@ (80016d0 <SystemInit+0xec>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <SystemInit+0xec>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a09      	ldr	r2, [pc, #36]	@ (80016d0 <SystemInit+0xec>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	61d3      	str	r3, [r2, #28]
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	44020c00 	.word	0x44020c00
 80016c8:	eae2eae3 	.word	0xeae2eae3
 80016cc:	01010280 	.word	0x01010280
 80016d0:	40022000 	.word	0x40022000
 80016d4:	08192a3b 	.word	0x08192a3b
 80016d8:	4c5d6e7f 	.word	0x4c5d6e7f

080016dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016dc:	480d      	ldr	r0, [pc, #52]	@ (8001714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016e0:	f7ff ff80 	bl	80015e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <LoopForever+0x6>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	@ (800171c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <LoopForever+0xe>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001728 <LoopForever+0x16>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800170a:	f00e f9b5 	bl	800fa78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800170e:	f7fe ff51 	bl	80005b4 <main>

08001712 <LoopForever>:

LoopForever:
    b LoopForever
 8001712:	e7fe      	b.n	8001712 <LoopForever>
  ldr   r0, =_estack
 8001714:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001720:	08010480 	.word	0x08010480
  ldr r2, =_sbss
 8001724:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001728:	200012c0 	.word	0x200012c0

0800172c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC1_IRQHandler>
	...

08001730 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	@ 0x30
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800173a:	2300      	movs	r3, #0
 800173c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d009      	beq.n	8001758 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d006      	beq.n	8001758 <BSP_LED_Init+0x28>
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d003      	beq.n	8001758 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001750:	f06f 0301 	mvn.w	r3, #1
 8001754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001756:	e055      	b.n	8001804 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d10f      	bne.n	800177e <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 800175e:	4b2c      	ldr	r3, [pc, #176]	@ (8001810 <BSP_LED_Init+0xe0>)
 8001760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001764:	4a2a      	ldr	r2, [pc, #168]	@ (8001810 <BSP_LED_Init+0xe0>)
 8001766:	f043 0320 	orr.w	r3, r3, #32
 800176a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800176e:	4b28      	ldr	r3, [pc, #160]	@ (8001810 <BSP_LED_Init+0xe0>)
 8001770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	e021      	b.n	80017c2 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10f      	bne.n	80017a4 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <BSP_LED_Init+0xe0>)
 8001786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178a:	4a21      	ldr	r2, [pc, #132]	@ (8001810 <BSP_LED_Init+0xe0>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001794:	4b1e      	ldr	r3, [pc, #120]	@ (8001810 <BSP_LED_Init+0xe0>)
 8001796:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	e00e      	b.n	80017c2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80017a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <BSP_LED_Init+0xe0>)
 80017a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017aa:	4a19      	ldr	r2, [pc, #100]	@ (8001810 <BSP_LED_Init+0xe0>)
 80017ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <BSP_LED_Init+0xe0>)
 80017b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4a13      	ldr	r2, [pc, #76]	@ (8001814 <BSP_LED_Init+0xe4>)
 80017c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ca:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	4a0f      	ldr	r2, [pc, #60]	@ (8001818 <BSP_LED_Init+0xe8>)
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	f107 0218 	add.w	r2, r7, #24
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fc70 	bl	80020cc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <BSP_LED_Init+0xe8>)
 80017f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <BSP_LED_Init+0xe4>)
 80017f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017fc:	2200      	movs	r2, #0
 80017fe:	4619      	mov	r1, r3
 8001800:	f000 fdb6 	bl	8002370 <HAL_GPIO_WritePin>
  }

  return ret;
 8001804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001806:	4618      	mov	r0, r3
 8001808:	3730      	adds	r7, #48	@ 0x30
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	44020c00 	.word	0x44020c00
 8001814:	08010408 	.word	0x08010408
 8001818:	20000008 	.word	0x20000008

0800181c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	4613      	mov	r3, r2
 800182a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800182c:	4b30      	ldr	r3, [pc, #192]	@ (80018f0 <BSP_PB_Init+0xd4>)
 800182e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001832:	4a2f      	ldr	r2, [pc, #188]	@ (80018f0 <BSP_PB_Init+0xd4>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800183c:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <BSP_PB_Init+0xd4>)
 800183e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800184a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800184e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001850:	2302      	movs	r3, #2
 8001852:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001854:	2302      	movs	r3, #2
 8001856:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10c      	bne.n	8001878 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	4a23      	ldr	r2, [pc, #140]	@ (80018f4 <BSP_PB_Init+0xd8>)
 8001866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186a:	f107 020c 	add.w	r2, r7, #12
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f000 fc2b 	bl	80020cc <HAL_GPIO_Init>
 8001876:	e036      	b.n	80018e6 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001878:	4b1f      	ldr	r3, [pc, #124]	@ (80018f8 <BSP_PB_Init+0xdc>)
 800187a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	4a1d      	ldr	r2, [pc, #116]	@ (80018f4 <BSP_PB_Init+0xd8>)
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	f107 020c 	add.w	r2, r7, #12
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fc1e 	bl	80020cc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001890:	79fa      	ldrb	r2, [r7, #7]
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4a18      	ldr	r2, [pc, #96]	@ (80018fc <BSP_PB_Init+0xe0>)
 800189c:	441a      	add	r2, r3
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	4917      	ldr	r1, [pc, #92]	@ (8001900 <BSP_PB_Init+0xe4>)
 80018a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4610      	mov	r0, r2
 80018aa:	f000 fbb3 	bl	8002014 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80018ae:	79fa      	ldrb	r2, [r7, #7]
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4a10      	ldr	r2, [pc, #64]	@ (80018fc <BSP_PB_Init+0xe0>)
 80018ba:	1898      	adds	r0, r3, r2
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	4a11      	ldr	r2, [pc, #68]	@ (8001904 <BSP_PB_Init+0xe8>)
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	461a      	mov	r2, r3
 80018c6:	2100      	movs	r1, #0
 80018c8:	f000 fb78 	bl	8001fbc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80018cc:	2018      	movs	r0, #24
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <BSP_PB_Init+0xec>)
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	f000 fa97 	bl	8001e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80018de:	2318      	movs	r3, #24
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 faad 	bl	8001e40 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	44020c00 	.word	0x44020c00
 80018f4:	20000014 	.word	0x20000014
 80018f8:	10110000 	.word	0x10110000
 80018fc:	200009b0 	.word	0x200009b0
 8001900:	08010410 	.word	0x08010410
 8001904:	20000018 	.word	0x20000018
 8001908:	2000001c 	.word	0x2000001c

0800190c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001916:	79fa      	ldrb	r2, [r7, #7]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <BSP_PB_IRQHandler+0x28>)
 8001922:	4413      	add	r3, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fb89 	bl	800203c <HAL_EXTI_IRQHandler>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200009b0 	.word	0x200009b0

08001938 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001966:	f06f 0301 	mvn.w	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e018      	b.n	80019a0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2294      	movs	r2, #148	@ 0x94
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <BSP_COM_Init+0x5c>)
 8001978:	4413      	add	r3, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f854 	bl	8001a28 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2294      	movs	r2, #148	@ 0x94
 8001984:	fb02 f303 	mul.w	r3, r2, r3
 8001988:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <BSP_COM_Init+0x5c>)
 800198a:	4413      	add	r3, r2
 800198c:	6839      	ldr	r1, [r7, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f80e 	bl	80019b0 <MX_USART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800199a:	f06f 0303 	mvn.w	r3, #3
 800199e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80019a0:	68fb      	ldr	r3, [r7, #12]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200009bc 	.word	0x200009bc

080019b0 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80019ba:	4b16      	ldr	r3, [pc, #88]	@ (8001a14 <MX_USART_Init+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	220c      	movs	r2, #12
 80019ce:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	895b      	ldrh	r3, [r3, #10]
 80019d4:	461a      	mov	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	891b      	ldrh	r3, [r3, #8]
 80019e6:	461a      	mov	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	899b      	ldrh	r3, [r3, #12]
 80019f0:	461a      	mov	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019fc:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f008 ff90 	bl	800a92a <HAL_UART_Init>
 8001a0a:	4603      	mov	r3, r0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000004 	.word	0x20000004

08001a18 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff ff8b 	bl	8001938 <BSP_PB_Callback>
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001a30:	4b27      	ldr	r3, [pc, #156]	@ (8001ad0 <COM1_MspInit+0xa8>)
 8001a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a36:	4a26      	ldr	r2, [pc, #152]	@ (8001ad0 <COM1_MspInit+0xa8>)
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a40:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <COM1_MspInit+0xa8>)
 8001a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001a4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <COM1_MspInit+0xa8>)
 8001a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a54:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad0 <COM1_MspInit+0xa8>)
 8001a56:	f043 0308 	orr.w	r3, r3, #8
 8001a5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <COM1_MspInit+0xa8>)
 8001a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001a6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <COM1_MspInit+0xa8>)
 8001a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a72:	4a17      	ldr	r2, [pc, #92]	@ (8001ad0 <COM1_MspInit+0xa8>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a78:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <COM1_MspInit+0xa8>)
 8001a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001a8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a8e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a94:	2302      	movs	r3, #2
 8001a96:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480b      	ldr	r0, [pc, #44]	@ (8001ad4 <COM1_MspInit+0xac>)
 8001aa8:	f000 fb10 	bl	80020cc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001aac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ab0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4804      	ldr	r0, [pc, #16]	@ (8001ad4 <COM1_MspInit+0xac>)
 8001ac2:	f000 fb03 	bl	80020cc <HAL_GPIO_Init>
}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	@ 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	44020c00 	.word	0x44020c00
 8001ad4:	42020c00 	.word	0x42020c00

08001ad8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 f98a 	bl	8001df6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ae2:	f003 f883 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_Init+0x44>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	490b      	ldr	r1, [pc, #44]	@ (8001b20 <HAL_Init+0x48>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <HAL_Init+0x4c>)
 8001afa:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001afc:	2004      	movs	r0, #4
 8001afe:	f000 f9cf 	bl	8001ea0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b02:	200f      	movs	r0, #15
 8001b04:	f000 f810 	bl	8001b28 <HAL_InitTick>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e002      	b.n	8001b18 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b12:	f7ff f95f 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	44020c00 	.word	0x44020c00
 8001b20:	080103f0 	.word	0x080103f0
 8001b24:	20000000 	.word	0x20000000

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001b34:	4b33      	ldr	r3, [pc, #204]	@ (8001c04 <HAL_InitTick+0xdc>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e05c      	b.n	8001bfa <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001b40:	4b31      	ldr	r3, [pc, #196]	@ (8001c08 <HAL_InitTick+0xe0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d10c      	bne.n	8001b66 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c0c <HAL_InitTick+0xe4>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b2c      	ldr	r3, [pc, #176]	@ (8001c04 <HAL_InitTick+0xdc>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e037      	b.n	8001bd6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001b66:	f000 f9f3 	bl	8001f50 <HAL_SYSTICK_GetCLKSourceConfig>
 8001b6a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d023      	beq.n	8001bba <HAL_InitTick+0x92>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d82d      	bhi.n	8001bd4 <HAL_InitTick+0xac>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_InitTick+0x5e>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d00d      	beq.n	8001ba0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001b84:	e026      	b.n	8001bd4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001b86:	4b21      	ldr	r3, [pc, #132]	@ (8001c0c <HAL_InitTick+0xe4>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <HAL_InitTick+0xdc>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001b94:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9c:	60fb      	str	r3, [r7, #12]
        break;
 8001b9e:	e01a      	b.n	8001bd6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_InitTick+0xdc>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bae:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	60fb      	str	r3, [r7, #12]
        break;
 8001bb8:	e00d      	b.n	8001bd6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001bba:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_InitTick+0xdc>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bc8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd0:	60fb      	str	r3, [r7, #12]
        break;
 8001bd2:	e000      	b.n	8001bd6 <HAL_InitTick+0xae>
        break;
 8001bd4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 f940 	bl	8001e5c <HAL_SYSTICK_Config>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e009      	b.n	8001bfa <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be6:	2200      	movs	r2, #0
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	f04f 30ff 	mov.w	r0, #4294967295
 8001bee:	f000 f90d 	bl	8001e0c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001bf2:	4a07      	ldr	r2, [pc, #28]	@ (8001c10 <HAL_InitTick+0xe8>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000024 	.word	0x20000024
 8001c08:	e000e010 	.word	0xe000e010
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000020 	.word	0x20000020

08001c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_IncTick+0x20>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_IncTick+0x24>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a04      	ldr	r2, [pc, #16]	@ (8001c38 <HAL_IncTick+0x24>)
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000024 	.word	0x20000024
 8001c38:	20000a50 	.word	0x20000a50

08001c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b03      	ldr	r3, [pc, #12]	@ (8001c50 <HAL_GetTick+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000a50 	.word	0x20000a50

08001c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff ffee 	bl	8001c3c <HAL_GetTick>
 8001c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6c:	d005      	beq.n	8001c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <HAL_Delay+0x44>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c7a:	bf00      	nop
 8001c7c:	f7ff ffde 	bl	8001c3c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d8f7      	bhi.n	8001c7c <HAL_Delay+0x28>
  {
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000024 	.word	0x20000024

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4907      	ldr	r1, [pc, #28]	@ (8001d38 <__NVIC_EnableIRQ+0x38>)
 8001d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	@ (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	@ (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	@ 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	@ 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ff4c 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1a:	f7ff ff63 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	6978      	ldr	r0, [r7, #20]
 8001e26:	f7ff ffb3 	bl	8001d90 <NVIC_EncodePriority>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ff82 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e38:	bf00      	nop
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff56 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00d      	b.n	8001e8e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <HAL_SYSTICK_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001e7a:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <HAL_SYSTICK_Config+0x40>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_SYSTICK_Config+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <HAL_SYSTICK_Config+0x40>)
 8001e86:	f043 0303 	orr.w	r3, r3, #3
 8001e8a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d844      	bhi.n	8001f38 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001eae:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb4:	08001ed7 	.word	0x08001ed7
 8001eb8:	08001ef5 	.word	0x08001ef5
 8001ebc:	08001f17 	.word	0x08001f17
 8001ec0:	08001f39 	.word	0x08001f39
 8001ec4:	08001ec9 	.word	0x08001ec9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ece:	f043 0304 	orr.w	r3, r3, #4
 8001ed2:	6013      	str	r3, [r2, #0]
      break;
 8001ed4:	e031      	b.n	8001f3a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1b      	ldr	r2, [pc, #108]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ee4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001ee8:	4a18      	ldr	r2, [pc, #96]	@ (8001f4c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001eea:	f023 030c 	bic.w	r3, r3, #12
 8001eee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001ef2:	e022      	b.n	8001f3a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001ef4:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a13      	ldr	r2, [pc, #76]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001efa:	f023 0304 	bic.w	r3, r3, #4
 8001efe:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f06:	f023 030c 	bic.w	r3, r3, #12
 8001f0a:	4a10      	ldr	r2, [pc, #64]	@ (8001f4c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001f14:	e011      	b.n	8001f3a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f16:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f48 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f28:	f023 030c 	bic.w	r3, r3, #12
 8001f2c:	4a07      	ldr	r2, [pc, #28]	@ (8001f4c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001f36:	e000      	b.n	8001f3a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001f38:	bf00      	nop
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e010 	.word	0xe000e010
 8001f4c:	44020c00 	.word	0x44020c00

08001f50 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001f56:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001f62:	2304      	movs	r3, #4
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	e01e      	b.n	8001fa6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001f68:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001f6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d00f      	beq.n	8001f9a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d80f      	bhi.n	8001fa0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d003      	beq.n	8001f94 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001f8c:	e008      	b.n	8001fa0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
        break;
 8001f92:	e008      	b.n	8001fa6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001f94:	2301      	movs	r3, #1
 8001f96:	607b      	str	r3, [r7, #4]
        break;
 8001f98:	e005      	b.n	8001fa6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	607b      	str	r3, [r7, #4]
        break;
 8001f9e:	e002      	b.n	8001fa6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	607b      	str	r3, [r7, #4]
        break;
 8001fa4:	bf00      	nop
    }
  }
  return systick_source;
 8001fa6:	687b      	ldr	r3, [r7, #4]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e010 	.word	0xe000e010
 8001fb8:	44020c00 	.word	0x44020c00

08001fbc <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d011      	beq.n	8001ff8 <HAL_EXTI_RegisterCallback+0x3c>
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	dc13      	bgt.n	8002000 <HAL_EXTI_RegisterCallback+0x44>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <HAL_EXTI_RegisterCallback+0x26>
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d007      	beq.n	8001ff0 <HAL_EXTI_RegisterCallback+0x34>
 8001fe0:	e00e      	b.n	8002000 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	609a      	str	r2, [r3, #8]
      break;
 8001fee:	e00a      	b.n	8002006 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	605a      	str	r2, [r3, #4]
      break;
 8001ff6:	e006      	b.n	8002006 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
      break;
 8001ffe:	e002      	b.n	8002006 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	75fb      	strb	r3, [r7, #23]
      break;
 8002004:	bf00      	nop
  }

  return status;
 8002006:	7dfb      	ldrb	r3, [r7, #23]
}
 8002008:	4618      	mov	r0, r3
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e003      	b.n	8002030 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800202e:	2300      	movs	r3, #0
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 031f 	and.w	r3, r3, #31
 8002058:	2201      	movs	r2, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <HAL_EXTI_IRQHandler+0x88>)
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <HAL_EXTI_IRQHandler+0x8c>)
 8002094:	4413      	add	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d009      	beq.n	80020bc <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	4798      	blx	r3
    }
  }
}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	4402200c 	.word	0x4402200c
 80020c8:	44022010 	.word	0x44022010

080020cc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020da:	e136      	b.n	800234a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	2101      	movs	r1, #1
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8128 	beq.w	8002344 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x38>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b12      	cmp	r3, #18
 8002102:	d125      	bne.n	8002150 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	08da      	lsrs	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3208      	adds	r2, #8
 800210c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002110:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4013      	ands	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	f003 020f 	and.w	r2, r3, #15
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	6979      	ldr	r1, [r7, #20]
 800214c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4013      	ands	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	4313      	orrs	r3, r2
 800217c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d00b      	beq.n	80021a4 <HAL_GPIO_Init+0xd8>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d007      	beq.n	80021a4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002198:	2b11      	cmp	r3, #17
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b12      	cmp	r3, #18
 80021a2:	d130      	bne.n	8002206 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4013      	ands	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021da:	2201      	movs	r2, #1
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	4013      	ands	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f003 0201 	and.w	r2, r3, #1
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d017      	beq.n	800223e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	2203      	movs	r2, #3
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4013      	ands	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d07c      	beq.n	8002344 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800224a:	4a47      	ldr	r2, [pc, #284]	@ (8002368 <HAL_GPIO_Init+0x29c>)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3318      	adds	r3, #24
 8002252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002256:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4013      	ands	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0a9a      	lsrs	r2, r3, #10
 8002272:	4b3e      	ldr	r3, [pc, #248]	@ (800236c <HAL_GPIO_Init+0x2a0>)
 8002274:	4013      	ands	r3, r2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	f002 0203 	and.w	r2, r2, #3
 800227c:	00d2      	lsls	r2, r2, #3
 800227e:	4093      	lsls	r3, r2
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002286:	4938      	ldr	r1, [pc, #224]	@ (8002368 <HAL_GPIO_Init+0x29c>)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3318      	adds	r3, #24
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002294:	4b34      	ldr	r3, [pc, #208]	@ (8002368 <HAL_GPIO_Init+0x29c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	43db      	mvns	r3, r3
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4013      	ands	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80022b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002368 <HAL_GPIO_Init+0x29c>)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80022be:	4b2a      	ldr	r3, [pc, #168]	@ (8002368 <HAL_GPIO_Init+0x29c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4013      	ands	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80022e2:	4a21      	ldr	r2, [pc, #132]	@ (8002368 <HAL_GPIO_Init+0x29c>)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80022e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002368 <HAL_GPIO_Init+0x29c>)
 80022ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ee:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	4013      	ands	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800230e:	4a16      	ldr	r2, [pc, #88]	@ (8002368 <HAL_GPIO_Init+0x29c>)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002316:	4b14      	ldr	r3, [pc, #80]	@ (8002368 <HAL_GPIO_Init+0x29c>)
 8002318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800231c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	43db      	mvns	r3, r3
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800233c:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <HAL_GPIO_Init+0x29c>)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	3301      	adds	r3, #1
 8002348:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f47f aec1 	bne.w	80020dc <HAL_GPIO_Init+0x10>
  }
}
 800235a:	bf00      	nop
 800235c:	bf00      	nop
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	44022000 	.word	0x44022000
 800236c:	002f7f7f 	.word	0x002f7f7f

08002370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
 800237c:	4613      	mov	r3, r2
 800237e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002380:	787b      	ldrb	r3, [r7, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800238c:	e002      	b.n	8002394 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e08d      	b.n	80024ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7fe fd0c 	bl	8000de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2224      	movs	r2, #36	@ 0x24
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002400:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d107      	bne.n	800241a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	e006      	b.n	8002428 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002426:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d108      	bne.n	8002442 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	e007      	b.n	8002452 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002450:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002464:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002474:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69d9      	ldr	r1, [r3, #28]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1a      	ldr	r2, [r3, #32]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d138      	bne.n	800255e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e032      	b.n	8002560 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2224      	movs	r2, #36	@ 0x24
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0201 	bic.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002528:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800255e:	2302      	movs	r3, #2
  }
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b20      	cmp	r3, #32
 8002580:	d139      	bne.n	80025f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800258c:	2302      	movs	r3, #2
 800258e:	e033      	b.n	80025f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2224      	movs	r2, #36	@ 0x24
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
  }
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002610:	230a      	movs	r3, #10
 8002612:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002614:	e002      	b.n	800261c <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3b01      	subs	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f9      	bne.n	8002616 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800262a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	0c1b      	lsrs	r3, r3, #16
 8002632:	b29b      	uxth	r3, r3
 8002634:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002638:	b29b      	uxth	r3, r3
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002652:	230a      	movs	r3, #10
 8002654:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002656:	e002      	b.n	800265e <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3b01      	subs	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f9      	bne.n	8002658 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8002664:	887b      	ldrh	r3, [r7, #2]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800266c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0c1b      	lsrs	r3, r3, #16
 8002674:	b29b      	uxth	r3, r3
 8002676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800267a:	b29b      	uxth	r3, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002694:	230a      	movs	r3, #10
 8002696:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002698:	e002      	b.n	80026a0 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3b01      	subs	r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f9      	bne.n	800269a <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026bc:	b29b      	uxth	r3, r3
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af02      	add	r7, sp, #8
 80026d0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0f3      	b.n	80028c4 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7fe fe9f 	bl	8001434 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2203      	movs	r2, #3
 80026fa:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f008 febb 	bl	800b47e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	7c1a      	ldrb	r2, [r3, #16]
 8002710:	f88d 2000 	strb.w	r2, [sp]
 8002714:	3304      	adds	r3, #4
 8002716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002718:	f008 fe7f 	bl	800b41a <USB_CoreInit>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2202      	movs	r2, #2
 8002726:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0ca      	b.n	80028c4 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f008 feb7 	bl	800b4a8 <USB_SetCurrentMode>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0bb      	b.n	80028c4 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	e03f      	b.n	80027d2 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	3315      	adds	r3, #21
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	3314      	adds	r3, #20
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	3317      	adds	r3, #23
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	3324      	adds	r3, #36	@ 0x24
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	3328      	adds	r3, #40	@ 0x28
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	3304      	adds	r3, #4
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	3301      	adds	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	791b      	ldrb	r3, [r3, #4]
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d3ba      	bcc.n	8002752 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e044      	b.n	800286c <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	440b      	add	r3, r1
 80027f0:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	3301      	adds	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	791b      	ldrb	r3, [r3, #4]
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	429a      	cmp	r2, r3
 8002874:	d3b5      	bcc.n	80027e2 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	7c1a      	ldrb	r2, [r3, #16]
 800287e:	f88d 2000 	strb.w	r2, [sp]
 8002882:	3304      	adds	r3, #4
 8002884:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002886:	f008 fe32 	bl	800b4ee <USB_DevInit>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e013      	b.n	80028c4 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	7b1b      	ldrb	r3, [r3, #12]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d102      	bne.n	80028b8 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f001 fb6b 	bl	8003f8e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f00a fc8b 	bl	800d1d8 <USB_DevDisconnect>

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_PCD_Start+0x16>
 80028de:	2302      	movs	r3, #2
 80028e0:	e012      	b.n	8002908 <HAL_PCD_Start+0x3c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f008 fdb1 	bl	800b456 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f00a fc5c 	bl	800d1b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f00a fc6c 	bl	800d1fa <USB_ReadInterrupts>
 8002922:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 faf2 	bl	8002f18 <PCD_EP_ISR_Handler>

    return;
 8002934:	e0de      	b.n	8002af4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d010      	beq.n	8002962 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 800294e:	400b      	ands	r3, r1
 8002950:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f00b fb65 	bl	800e022 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002958:	2100      	movs	r1, #0
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f8e1 	bl	8002b22 <HAL_PCD_SetAddress>

    return;
 8002960:	e0c8      	b.n	8002af4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d009      	beq.n	8002980 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 800297a:	400b      	ands	r3, r1
 800297c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800297e:	e0b9      	b.n	8002af4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8002998:	400b      	ands	r3, r1
 800299a:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800299c:	e0aa      	b.n	8002af4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d029      	beq.n	80029fc <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0208 	bic.w	r2, r2, #8
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d107      	bne.n	80029e2 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029da:	2100      	movs	r1, #0
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f001 faf8 	bl	8003fd2 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f893 	bl	8002b0e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80029f6:	400b      	ands	r3, r1
 80029f8:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80029fa:	e07b      	b.n	8002af4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01c      	beq.n	8002a40 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0208 	orr.w	r2, r2, #8
 8002a14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8002a24:	400b      	ands	r3, r1
 8002a26:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0204 	orr.w	r2, r2, #4
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f85e 	bl	8002afa <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002a3e:	e059      	b.n	8002af4 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d033      	beq.n	8002ab2 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8002a58:	400b      	ands	r3, r1
 8002a5a:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d121      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0204 	orr.w	r2, r2, #4
 8002a74:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0208 	orr.w	r2, r2, #8
 8002a84:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a94:	089b      	lsrs	r3, r3, #2
 8002a96:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f001 fa95 	bl	8003fd2 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002aa8:	e024      	b.n	8002af4 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f825 	bl	8002afa <HAL_PCD_SuspendCallback>
    return;
 8002ab0:	e020      	b.n	8002af4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00c      	beq.n	8002ad6 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8002aca:	400b      	ands	r3, r1
 8002acc:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f00b fa99 	bl	800e006 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ad4:	e00e      	b.n	8002af4 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8002aee:	400b      	ands	r3, r1
 8002af0:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002af2:	bf00      	nop
  }
}
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_PCD_SetAddress+0x1a>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e012      	b.n	8002b62 <HAL_PCD_SetAddress+0x40>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f00a fb1c 	bl	800d190 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	4608      	mov	r0, r1
 8002b74:	4611      	mov	r1, r2
 8002b76:	461a      	mov	r2, r3
 8002b78:	4603      	mov	r3, r0
 8002b7a:	70fb      	strb	r3, [r7, #3]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	803b      	strh	r3, [r7, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	da0f      	bge.n	8002bb0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	f003 0207 	and.w	r2, r3, #7
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	3310      	adds	r3, #16
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	705a      	strb	r2, [r3, #1]
 8002bae:	e00f      	b.n	8002bd0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	f003 0207 	and.w	r2, r3, #7
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002bdc:	883b      	ldrh	r3, [r7, #0]
 8002bde:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	78ba      	ldrb	r2, [r7, #2]
 8002bea:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bec:	78bb      	ldrb	r3, [r7, #2]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d102      	bne.n	8002bf8 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_PCD_EP_Open+0x9c>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e00e      	b.n	8002c24 <HAL_PCD_EP_Open+0xba>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68f9      	ldr	r1, [r7, #12]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f008 fc8d 	bl	800b534 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8002c22:	7afb      	ldrb	r3, [r7, #11]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	da0f      	bge.n	8002c60 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	f003 0207 	and.w	r2, r3, #7
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	3310      	adds	r3, #16
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	705a      	strb	r2, [r3, #1]
 8002c5e:	e00f      	b.n	8002c80 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	f003 0207 	and.w	r2, r3, #7
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	3304      	adds	r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_PCD_EP_Close+0x6e>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e00e      	b.n	8002cb8 <HAL_PCD_EP_Close+0x8c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68f9      	ldr	r1, [r7, #12]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f008 ffa3 	bl	800bbf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
 8002cd2:	f003 0207 	and.w	r2, r3, #7
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6979      	ldr	r1, [r7, #20]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f009 f8f7 	bl	800bf08 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 0207 	and.w	r2, r3, #7
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	440b      	add	r3, r1
 8002d42:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	460b      	mov	r3, r1
 8002d62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d64:	7afb      	ldrb	r3, [r7, #11]
 8002d66:	f003 0207 	and.w	r2, r3, #7
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	3310      	adds	r3, #16
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4413      	add	r3, r2
 8002d78:	3304      	adds	r3, #4
 8002d7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6979      	ldr	r1, [r7, #20]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f009 f8a7 	bl	800bf08 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	7912      	ldrb	r2, [r2, #4]
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e040      	b.n	8002e64 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da0f      	bge.n	8002e0a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	f003 0207 	and.w	r2, r3, #7
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	3310      	adds	r3, #16
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3304      	adds	r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2201      	movs	r2, #1
 8002e06:	705a      	strb	r2, [r3, #1]
 8002e08:	e00d      	b.n	8002e26 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_PCD_EP_SetStall+0x82>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e00e      	b.n	8002e64 <HAL_PCD_EP_SetStall+0xa0>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68f9      	ldr	r1, [r7, #12]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f00a f8c1 	bl	800cfdc <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	7912      	ldrb	r2, [r2, #4]
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e042      	b.n	8002f10 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	da0f      	bge.n	8002eb2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e92:	78fb      	ldrb	r3, [r7, #3]
 8002e94:	f003 0207 	and.w	r2, r3, #7
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	705a      	strb	r2, [r3, #1]
 8002eb0:	e00f      	b.n	8002ed2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 0207 	and.w	r2, r3, #7
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3304      	adds	r3, #4
 8002eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_PCD_EP_ClrStall+0x86>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e00e      	b.n	8002f10 <HAL_PCD_EP_ClrStall+0xa4>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68f9      	ldr	r1, [r7, #12]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f00a f8b1 	bl	800d068 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08e      	sub	sp, #56	@ 0x38
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f20:	e326      	b.n	8003570 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f28:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8002f2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8002f36:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 8124 	bne.w	8003188 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d13e      	bne.n	8002fc8 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b89      	ldr	r3, [pc, #548]	@ (8003178 <PCD_EP_ISR_Handler+0x260>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f60:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3314      	adds	r3, #20
 8002f66:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f80:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	441a      	add	r2, r3
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002f90:	2100      	movs	r1, #0
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f00b f81d 	bl	800dfd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7c5b      	ldrb	r3, [r3, #17]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 82e6 	beq.w	8003570 <PCD_EP_ISR_Handler+0x658>
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f040 82e1 	bne.w	8003570 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7c5b      	ldrb	r3, [r3, #17]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	745a      	strb	r2, [r3, #17]
 8002fc6:	e2d3      	b.n	8003570 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002fce:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002fd8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d027      	beq.n	8003032 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	4619      	mov	r1, r3
 8002fec:	4610      	mov	r0, r2
 8002fee:	f7ff fb09 	bl	8002604 <PCD_GET_EP_RX_CNT>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8003004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003006:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800300c:	b29b      	uxth	r3, r3
 800300e:	f00a f963 	bl	800d2d8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b58      	ldr	r3, [pc, #352]	@ (800317c <PCD_EP_ISR_Handler+0x264>)
 800301a:	4013      	ands	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003028:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f00a ffa4 	bl	800df78 <HAL_PCD_SetupStageCallback>
 8003030:	e29e      	b.n	8003570 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8003032:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003036:	2b00      	cmp	r3, #0
 8003038:	f280 829a 	bge.w	8003570 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b4e      	ldr	r3, [pc, #312]	@ (800317c <PCD_EP_ISR_Handler+0x264>)
 8003044:	4013      	ands	r3, r2
 8003046:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800304e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003052:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f7ff fad0 	bl	8002604 <PCD_GET_EP_RX_CNT>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800306c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d019      	beq.n	80030a8 <PCD_EP_ISR_Handler+0x190>
 8003074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d015      	beq.n	80030a8 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003082:	6959      	ldr	r1, [r3, #20]
 8003084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003086:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800308a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800308c:	b29b      	uxth	r3, r3
 800308e:	f00a f923 	bl	800d2d8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	441a      	add	r2, r3
 800309c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80030a0:	2100      	movs	r1, #0
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f00a ff7a 	bl	800df9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80030b0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80030b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 825a 	bne.w	8003570 <PCD_EP_ISR_Handler+0x658>
 80030bc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80030be:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80030c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80030c6:	f000 8253 	beq.w	8003570 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80030ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003180 <PCD_EP_ISR_Handler+0x268>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003180 <PCD_EP_ISR_Handler+0x268>)
 80030d0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80030d4:	6053      	str	r3, [r2, #4]
 80030d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <PCD_EP_ISR_Handler+0x1d4>
 80030de:	4b28      	ldr	r3, [pc, #160]	@ (8003180 <PCD_EP_ISR_Handler+0x268>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a27      	ldr	r2, [pc, #156]	@ (8003180 <PCD_EP_ISR_Handler+0x268>)
 80030e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030e8:	6053      	str	r3, [r2, #4]
 80030ea:	e02e      	b.n	800314a <PCD_EP_ISR_Handler+0x232>
 80030ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80030f2:	d814      	bhi.n	800311e <PCD_EP_ISR_Handler+0x206>
 80030f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <PCD_EP_ISR_Handler+0x1f6>
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	3301      	adds	r3, #1
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	4b1c      	ldr	r3, [pc, #112]	@ (8003180 <PCD_EP_ISR_Handler+0x268>)
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	069b      	lsls	r3, r3, #26
 8003116:	491a      	ldr	r1, [pc, #104]	@ (8003180 <PCD_EP_ISR_Handler+0x268>)
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
 800311c:	e015      	b.n	800314a <PCD_EP_ISR_Handler+0x232>
 800311e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <PCD_EP_ISR_Handler+0x220>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	3b01      	subs	r3, #1
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <PCD_EP_ISR_Handler+0x268>)
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	069b      	lsls	r3, r3, #26
 8003140:	4313      	orrs	r3, r2
 8003142:	4a0f      	ldr	r2, [pc, #60]	@ (8003180 <PCD_EP_ISR_Handler+0x268>)
 8003144:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003148:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <PCD_EP_ISR_Handler+0x26c>)
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e1fb      	b.n	8003570 <PCD_EP_ISR_Handler+0x658>
 8003178:	07ff8f0f 	.word	0x07ff8f0f
 800317c:	07ff0f8f 	.word	0x07ff0f8f
 8003180:	40016400 	.word	0x40016400
 8003184:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800319a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f280 80bd 	bge.w	800331e <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b9e      	ldr	r3, [pc, #632]	@ (8003430 <PCD_EP_ISR_Handler+0x518>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031ce:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80031d0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4413      	add	r3, r2
 80031e4:	3304      	adds	r3, #4
 80031e6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80031e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ea:	7b1b      	ldrb	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d116      	bne.n	800321e <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f7ff fa02 	bl	8002604 <PCD_GET_EP_RX_CNT>
 8003200:	4603      	mov	r3, r0
 8003202:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8003204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003206:	2b00      	cmp	r3, #0
 8003208:	d067      	beq.n	80032da <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003210:	6959      	ldr	r1, [r3, #20]
 8003212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003214:	88da      	ldrh	r2, [r3, #6]
 8003216:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003218:	f00a f85e 	bl	800d2d8 <USB_ReadPMA>
 800321c:	e05d      	b.n	80032da <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800321e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003220:	78db      	ldrb	r3, [r3, #3]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d108      	bne.n	8003238 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003226:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003228:	461a      	mov	r2, r3
 800322a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f9ad 	bl	800358c <HAL_PCD_EP_DB_Receive>
 8003232:	4603      	mov	r3, r0
 8003234:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003236:	e050      	b.n	80032da <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b7a      	ldr	r3, [pc, #488]	@ (8003434 <PCD_EP_ISR_Handler+0x51c>)
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	441a      	add	r2, r3
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003262:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003266:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d016      	beq.n	80032ae <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f7ff f9db 	bl	8002646 <PCD_GET_EP_DBUF0_CNT>
 8003290:	4603      	mov	r3, r0
 8003292:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003294:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01f      	beq.n	80032da <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a0:	6959      	ldr	r1, [r3, #20]
 80032a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a4:	891a      	ldrh	r2, [r3, #8]
 80032a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032a8:	f00a f816 	bl	800d2d8 <USB_ReadPMA>
 80032ac:	e015      	b.n	80032da <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	4619      	mov	r1, r3
 80032b8:	4610      	mov	r0, r2
 80032ba:	f7ff f9e5 	bl	8002688 <PCD_GET_EP_DBUF1_CNT>
 80032be:	4603      	mov	r3, r0
 80032c0:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80032c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d008      	beq.n	80032da <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ce:	6959      	ldr	r1, [r3, #20]
 80032d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d2:	895a      	ldrh	r2, [r3, #10]
 80032d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032d6:	f009 ffff 	bl	800d2d8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80032da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032e0:	441a      	add	r2, r3
 80032e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80032e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032ec:	441a      	add	r2, r3
 80032ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80032f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <PCD_EP_ISR_Handler+0x3ec>
 80032fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	429a      	cmp	r2, r3
 8003302:	d206      	bcs.n	8003312 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f00a fe46 	bl	800df9c <HAL_PCD_DataOutStageCallback>
 8003310:	e005      	b.n	800331e <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003318:	4618      	mov	r0, r3
 800331a:	f008 fdf5 	bl	800bf08 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800331e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8123 	beq.w	8003570 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 800332a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	3310      	adds	r3, #16
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	4413      	add	r3, r2
 800333c:	3304      	adds	r3, #4
 800333e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b39      	ldr	r3, [pc, #228]	@ (8003438 <PCD_EP_ISR_Handler+0x520>)
 8003352:	4013      	ands	r3, r2
 8003354:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003366:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800336a:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800336c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336e:	78db      	ldrb	r3, [r3, #3]
 8003370:	2b01      	cmp	r3, #1
 8003372:	f040 80b8 	bne.w	80034e6 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8003376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003378:	2200      	movs	r2, #0
 800337a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800337c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337e:	7b1b      	ldrb	r3, [r3, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 80a9 	beq.w	80034d8 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003386:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d055      	beq.n	800343c <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003392:	785b      	ldrb	r3, [r3, #1]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d124      	bne.n	80033e2 <PCD_EP_ISR_Handler+0x4ca>
 8003398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033b6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033da:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e07a      	b.n	80034d8 <PCD_EP_ISR_Handler+0x5c0>
 80033e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d176      	bne.n	80034d8 <PCD_EP_ISR_Handler+0x5c0>
 80033ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003404:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003408:	b292      	uxth	r2, r2
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003416:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800341a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003424:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003428:	6812      	ldr	r2, [r2, #0]
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e054      	b.n	80034d8 <PCD_EP_ISR_Handler+0x5c0>
 800342e:	bf00      	nop
 8003430:	07ff0f8f 	.word	0x07ff0f8f
 8003434:	07ff8f8f 	.word	0x07ff8f8f
 8003438:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800343c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d124      	bne.n	800348e <PCD_EP_ISR_Handler+0x576>
 8003444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800344e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800345e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003462:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003472:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003482:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003486:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	e024      	b.n	80034d8 <PCD_EP_ISR_Handler+0x5c0>
 800348e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d120      	bne.n	80034d8 <PCD_EP_ISR_Handler+0x5c0>
 8003496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034b4:	b292      	uxth	r2, r2
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80034c2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80034c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034d4:	6852      	ldr	r2, [r2, #4]
 80034d6:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f00a fd77 	bl	800dfd2 <HAL_PCD_DataInStageCallback>
 80034e4:	e044      	b.n	8003570 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80034e6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80034e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d139      	bne.n	8003564 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b29b      	uxth	r3, r3
 8003504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003508:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 800350a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003510:	429a      	cmp	r2, r3
 8003512:	d906      	bls.n	8003522 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8003514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800351a:	1ad2      	subs	r2, r2, r3
 800351c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351e:	619a      	str	r2, [r3, #24]
 8003520:	e002      	b.n	8003528 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8003522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003524:	2200      	movs	r2, #0
 8003526:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d106      	bne.n	800353e <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f00a fd4b 	bl	800dfd2 <HAL_PCD_DataInStageCallback>
 800353c:	e018      	b.n	8003570 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800353e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003544:	441a      	add	r2, r3
 8003546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003548:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800354a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003550:	441a      	add	r2, r3
 8003552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003554:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800355c:	4618      	mov	r0, r3
 800355e:	f008 fcd3 	bl	800bf08 <USB_EPStartXfer>
 8003562:	e005      	b.n	8003570 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003564:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003566:	461a      	mov	r2, r3
 8003568:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f8e8 	bl	8003740 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003576:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800357a:	2b00      	cmp	r3, #0
 800357c:	f47f acd1 	bne.w	8002f22 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3738      	adds	r7, #56	@ 0x38
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop

0800358c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	@ 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d062      	beq.n	800366a <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	4619      	mov	r1, r3
 80035ae:	4610      	mov	r0, r2
 80035b0:	f7ff f849 	bl	8002646 <PCD_GET_EP_DBUF0_CNT>
 80035b4:	4603      	mov	r3, r0
 80035b6:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	699a      	ldr	r2, [r3, #24]
 80035bc:	8bfb      	ldrh	r3, [r7, #30]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d306      	bcc.n	80035d0 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	8bfb      	ldrh	r3, [r7, #30]
 80035c8:	1ad2      	subs	r2, r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	619a      	str	r2, [r3, #24]
 80035ce:	e002      	b.n	80035d6 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2200      	movs	r2, #0
 80035d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11b      	bne.n	8003616 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b52      	ldr	r3, [pc, #328]	@ (8003738 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	441a      	add	r2, r3
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003614:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d017      	beq.n	8003650 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b42      	ldr	r3, [pc, #264]	@ (800373c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003632:	4013      	ands	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	441a      	add	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800364a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800364e:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003650:	8bfb      	ldrh	r3, [r7, #30]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d06b      	beq.n	800372e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6959      	ldr	r1, [r3, #20]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	891a      	ldrh	r2, [r3, #8]
 8003662:	8bfb      	ldrh	r3, [r7, #30]
 8003664:	f009 fe38 	bl	800d2d8 <USB_ReadPMA>
 8003668:	e061      	b.n	800372e <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	4619      	mov	r1, r3
 8003674:	4610      	mov	r0, r2
 8003676:	f7ff f807 	bl	8002688 <PCD_GET_EP_DBUF1_CNT>
 800367a:	4603      	mov	r3, r0
 800367c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	8bfb      	ldrh	r3, [r7, #30]
 8003684:	429a      	cmp	r2, r3
 8003686:	d306      	bcc.n	8003696 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	8bfb      	ldrh	r3, [r7, #30]
 800368e:	1ad2      	subs	r2, r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	619a      	str	r2, [r3, #24]
 8003694:	e002      	b.n	800369c <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2200      	movs	r2, #0
 800369a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d11b      	bne.n	80036dc <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b20      	ldr	r3, [pc, #128]	@ (8003738 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	441a      	add	r2, r3
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036da:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d117      	bne.n	8003716 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4b11      	ldr	r3, [pc, #68]	@ (800373c <HAL_PCD_EP_DB_Receive+0x1b0>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	441a      	add	r2, r3
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003710:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003714:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003716:	8bfb      	ldrh	r3, [r7, #30]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6959      	ldr	r1, [r3, #20]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	895a      	ldrh	r2, [r3, #10]
 8003728:	8bfb      	ldrh	r3, [r7, #30]
 800372a:	f009 fdd5 	bl	800d2d8 <USB_ReadPMA>
    }
  }

  return count;
 800372e:	8bfb      	ldrh	r3, [r7, #30]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3728      	adds	r7, #40	@ 0x28
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	07ffbf8f 	.word	0x07ffbf8f
 800373c:	07ff8f8f 	.word	0x07ff8f8f

08003740 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08e      	sub	sp, #56	@ 0x38
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	4613      	mov	r3, r2
 800374c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 81d5 	beq.w	8003b04 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f7fe ff6e 	bl	8002646 <PCD_GET_EP_DBUF0_CNT>
 800376a:	4603      	mov	r3, r0
 800376c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	8bfb      	ldrh	r3, [r7, #30]
 8003774:	429a      	cmp	r2, r3
 8003776:	d906      	bls.n	8003786 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	8bfb      	ldrh	r3, [r7, #30]
 800377e:	1ad2      	subs	r2, r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	619a      	str	r2, [r3, #24]
 8003784:	e002      	b.n	800378c <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 80c1 	bne.w	8003918 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	785b      	ldrb	r3, [r3, #1]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d124      	bne.n	80037e8 <HAL_PCD_EP_DB_Transmit+0xa8>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037bc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037e0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e024      	b.n	8003832 <HAL_PCD_EP_DB_Transmit+0xf2>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	785b      	ldrb	r3, [r3, #1]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d120      	bne.n	8003832 <HAL_PCD_EP_DB_Transmit+0xf2>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800380a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800380e:	b292      	uxth	r2, r2
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800381c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800382a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	785b      	ldrb	r3, [r3, #1]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d124      	bne.n	8003884 <HAL_PCD_EP_DB_Transmit+0x144>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003844:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003854:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003858:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003868:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003878:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800387c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	e024      	b.n	80038ce <HAL_PCD_EP_DB_Transmit+0x18e>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	785b      	ldrb	r3, [r3, #1]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d120      	bne.n	80038ce <HAL_PCD_EP_DB_Transmit+0x18e>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003896:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038aa:	b292      	uxth	r2, r2
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80038b8:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038ca:	6852      	ldr	r2, [r2, #4]
 80038cc:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	4619      	mov	r1, r3
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f00a fb7c 	bl	800dfd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 82e5 	beq.w	8003eb0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b8e      	ldr	r3, [pc, #568]	@ (8003b30 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e2cb      	b.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d017      	beq.n	8003952 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b7f      	ldr	r3, [pc, #508]	@ (8003b30 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003934:	4013      	ands	r3, r2
 8003936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	441a      	add	r2, r3
 8003946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003948:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800394c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003950:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003958:	2b01      	cmp	r3, #1
 800395a:	f040 82a9 	bne.w	8003eb0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	8bfb      	ldrh	r3, [r7, #30]
 8003964:	441a      	add	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	69da      	ldr	r2, [r3, #28]
 800396e:	8bfb      	ldrh	r3, [r7, #30]
 8003970:	441a      	add	r2, r3
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	6a1a      	ldr	r2, [r3, #32]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	d309      	bcc.n	8003996 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	6a1a      	ldr	r2, [r3, #32]
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	1ad2      	subs	r2, r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	621a      	str	r2, [r3, #32]
 8003994:	e014      	b.n	80039c0 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 800399e:	8bfb      	ldrh	r3, [r7, #30]
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80039aa:	e009      	b.n	80039c0 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2200      	movs	r2, #0
 80039be:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	785b      	ldrb	r3, [r3, #1]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d16a      	bne.n	8003a9e <HAL_PCD_EP_DB_Transmit+0x35e>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039e6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d112      	bne.n	8003a18 <HAL_PCD_EP_DB_Transmit+0x2d8>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a10:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e06a      	b.n	8003aee <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a1c:	d81e      	bhi.n	8003a5c <HAL_PCD_EP_DB_Transmit+0x31c>
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	085b      	lsrs	r3, r3, #1
 8003a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a30:	3301      	adds	r3, #1
 8003a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a46:	069a      	lsls	r2, r3, #26
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e048      	b.n	8003aee <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d102      	bne.n	8003a72 <HAL_PCD_EP_DB_Transmit+0x332>
 8003a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a84:	069b      	lsls	r3, r3, #26
 8003a86:	431a      	orrs	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	00db      	lsls	r3, r3, #3
 8003a8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a96:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e027      	b.n	8003aee <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	785b      	ldrb	r3, [r3, #1]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d123      	bne.n	8003aee <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ab0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ac0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ac4:	b292      	uxth	r2, r2
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ad2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ad6:	6819      	ldr	r1, [r3, #0]
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	041a      	lsls	r2, r3, #16
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ae6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003aea:	430a      	orrs	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6959      	ldr	r1, [r3, #20]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	891a      	ldrh	r2, [r3, #8]
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f009 fb8a 	bl	800d216 <USB_WritePMA>
 8003b02:	e1d5      	b.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f7fe fdba 	bl	8002688 <PCD_GET_EP_DBUF1_CNT>
 8003b14:	4603      	mov	r3, r0
 8003b16:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	8bfb      	ldrh	r3, [r7, #30]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d308      	bcc.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	8bfb      	ldrh	r3, [r7, #30]
 8003b28:	1ad2      	subs	r2, r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	619a      	str	r2, [r3, #24]
 8003b2e:	e004      	b.n	8003b3a <HAL_PCD_EP_DB_Transmit+0x3fa>
 8003b30:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2200      	movs	r2, #0
 8003b38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f040 80c1 	bne.w	8003cc6 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	785b      	ldrb	r3, [r3, #1]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d124      	bne.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x456>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b6a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b8e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e024      	b.n	8003be0 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	785b      	ldrb	r3, [r3, #1]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d120      	bne.n	8003be0 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ba8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bbc:	b292      	uxth	r2, r2
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003bca:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d124      	bne.n	8003c32 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bf2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c06:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c2a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003c2e:	605a      	str	r2, [r3, #4]
 8003c30:	e024      	b.n	8003c7c <HAL_PCD_EP_DB_Transmit+0x53c>
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	785b      	ldrb	r3, [r3, #1]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d120      	bne.n	8003c7c <HAL_PCD_EP_DB_Transmit+0x53c>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c58:	b292      	uxth	r2, r2
 8003c5a:	605a      	str	r2, [r3, #4]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003c66:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c78:	6852      	ldr	r2, [r2, #4]
 8003c7a:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	4619      	mov	r1, r3
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f00a f9a5 	bl	800dfd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c88:	88fb      	ldrh	r3, [r7, #6]
 8003c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f040 810e 	bne.w	8003eb0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b95      	ldr	r3, [pc, #596]	@ (8003efc <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	441a      	add	r2, r3
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	e0f4      	b.n	8003eb0 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d117      	bne.n	8003d00 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b86      	ldr	r3, [pc, #536]	@ (8003efc <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	441a      	add	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cfe:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	f040 80d2 	bne.w	8003eb0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	8bfb      	ldrh	r3, [r7, #30]
 8003d12:	441a      	add	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	8bfb      	ldrh	r3, [r7, #30]
 8003d1e:	441a      	add	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6a1a      	ldr	r2, [r3, #32]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d309      	bcc.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6a1a      	ldr	r2, [r3, #32]
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3c:	1ad2      	subs	r2, r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	621a      	str	r2, [r3, #32]
 8003d42:	e014      	b.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8003d4c:	8bfb      	ldrh	r3, [r7, #30]
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d58:	e009      	b.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2200      	movs	r2, #0
 8003d64:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	785b      	ldrb	r3, [r3, #1]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d16a      	bne.n	8003e4c <HAL_PCD_EP_DB_Transmit+0x70c>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d94:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d112      	bne.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x686>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003daa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dbe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003dc2:	605a      	str	r2, [r3, #4]
 8003dc4:	e06a      	b.n	8003e9c <HAL_PCD_EP_DB_Transmit+0x75c>
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dca:	d81e      	bhi.n	8003e0a <HAL_PCD_EP_DB_Transmit+0x6ca>
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_PCD_EP_DB_Transmit+0x6a2>
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	3301      	adds	r3, #1
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003df0:	6859      	ldr	r1, [r3, #4]
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	069a      	lsls	r2, r3, #26
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e04:	430a      	orrs	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	e048      	b.n	8003e9c <HAL_PCD_EP_DB_Transmit+0x75c>
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <HAL_PCD_EP_DB_Transmit+0x6e0>
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	069b      	lsls	r3, r3, #26
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e44:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	e027      	b.n	8003e9c <HAL_PCD_EP_DB_Transmit+0x75c>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d123      	bne.n	8003e9c <HAL_PCD_EP_DB_Transmit+0x75c>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e72:	b292      	uxth	r2, r2
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	041a      	lsls	r2, r3, #16
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	6959      	ldr	r1, [r3, #20]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	895a      	ldrh	r2, [r3, #10]
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f009 f9b3 	bl	800d216 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f00 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec8:	f083 0310 	eor.w	r3, r3, #16
 8003ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	f083 0320 	eor.w	r3, r3, #32
 8003ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	441a      	add	r2, r3
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3738      	adds	r7, #56	@ 0x38
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	07ff8f8f 	.word	0x07ff8f8f
 8003f00:	07ff8fbf 	.word	0x07ff8fbf

08003f04 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	607b      	str	r3, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	817b      	strh	r3, [r7, #10]
 8003f12:	4613      	mov	r3, r2
 8003f14:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003f16:	897b      	ldrh	r3, [r7, #10]
 8003f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00c      	beq.n	8003f3c <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f22:	897b      	ldrh	r3, [r7, #10]
 8003f24:	f003 0207 	and.w	r2, r3, #7
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	3310      	adds	r3, #16
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	3304      	adds	r3, #4
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e00a      	b.n	8003f52 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f3c:	897a      	ldrh	r2, [r7, #10]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3304      	adds	r3, #4
 8003f50:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f52:	893b      	ldrh	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d107      	bne.n	8003f68 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	80da      	strh	r2, [r3, #6]
 8003f66:	e00b      	b.n	8003f80 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb0:	f043 0201 	orr.w	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	f043 0202 	orr.w	r2, r3, #2
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003ff0:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff4:	4a04      	ldr	r2, [pc, #16]	@ (8004008 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ff6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ffa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003ffc:	bf00      	nop
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	44020800 	.word	0x44020800

0800400c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f000 bc28 	b.w	8004870 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004020:	4b94      	ldr	r3, [pc, #592]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f003 0318 	and.w	r3, r3, #24
 8004028:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800402a:	4b92      	ldr	r3, [pc, #584]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 800402c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05b      	beq.n	80040f8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	2b08      	cmp	r3, #8
 8004044:	d005      	beq.n	8004052 <HAL_RCC_OscConfig+0x46>
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b18      	cmp	r3, #24
 800404a:	d114      	bne.n	8004076 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d111      	bne.n	8004076 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d102      	bne.n	8004060 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	f000 bc08 	b.w	8004870 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004060:	4b84      	ldr	r3, [pc, #528]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	041b      	lsls	r3, r3, #16
 800406e:	4981      	ldr	r1, [pc, #516]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004070:	4313      	orrs	r3, r2
 8004072:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004074:	e040      	b.n	80040f8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d023      	beq.n	80040c6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800407e:	4b7d      	ldr	r3, [pc, #500]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a7c      	ldr	r2, [pc, #496]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fd fdd7 	bl	8001c3c <HAL_GetTick>
 800408e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004092:	f7fd fdd3 	bl	8001c3c <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e3e5      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80040a4:	4b73      	ldr	r3, [pc, #460]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80040b0:	4b70      	ldr	r3, [pc, #448]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	496d      	ldr	r1, [pc, #436]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	618b      	str	r3, [r1, #24]
 80040c4:	e018      	b.n	80040f8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040c6:	4b6b      	ldr	r3, [pc, #428]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a6a      	ldr	r2, [pc, #424]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80040cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fd fdb3 	bl	8001c3c <HAL_GetTick>
 80040d6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80040da:	f7fd fdaf 	bl	8001c3c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e3c1      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80040ec:	4b61      	ldr	r3, [pc, #388]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80a0 	beq.w	8004246 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	2b10      	cmp	r3, #16
 800410a:	d005      	beq.n	8004118 <HAL_RCC_OscConfig+0x10c>
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b18      	cmp	r3, #24
 8004110:	d109      	bne.n	8004126 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d106      	bne.n	8004126 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f040 8092 	bne.w	8004246 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e3a4      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800412e:	d106      	bne.n	800413e <HAL_RCC_OscConfig+0x132>
 8004130:	4b50      	ldr	r3, [pc, #320]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a4f      	ldr	r2, [pc, #316]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	e058      	b.n	80041f0 <HAL_RCC_OscConfig+0x1e4>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d112      	bne.n	800416c <HAL_RCC_OscConfig+0x160>
 8004146:	4b4b      	ldr	r3, [pc, #300]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a4a      	ldr	r2, [pc, #296]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 800414c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b48      	ldr	r3, [pc, #288]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a47      	ldr	r2, [pc, #284]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004158:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4b45      	ldr	r3, [pc, #276]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a44      	ldr	r2, [pc, #272]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004164:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e041      	b.n	80041f0 <HAL_RCC_OscConfig+0x1e4>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004174:	d112      	bne.n	800419c <HAL_RCC_OscConfig+0x190>
 8004176:	4b3f      	ldr	r3, [pc, #252]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a3e      	ldr	r2, [pc, #248]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 800417c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b3c      	ldr	r3, [pc, #240]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a3b      	ldr	r2, [pc, #236]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004188:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4b39      	ldr	r3, [pc, #228]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a38      	ldr	r2, [pc, #224]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	e029      	b.n	80041f0 <HAL_RCC_OscConfig+0x1e4>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80041a4:	d112      	bne.n	80041cc <HAL_RCC_OscConfig+0x1c0>
 80041a6:	4b33      	ldr	r3, [pc, #204]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a32      	ldr	r2, [pc, #200]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80041ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	4b30      	ldr	r3, [pc, #192]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80041b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	4b2d      	ldr	r3, [pc, #180]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	e011      	b.n	80041f0 <HAL_RCC_OscConfig+0x1e4>
 80041cc:	4b29      	ldr	r3, [pc, #164]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a28      	ldr	r2, [pc, #160]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80041d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	4b26      	ldr	r3, [pc, #152]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a25      	ldr	r2, [pc, #148]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80041de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b23      	ldr	r3, [pc, #140]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a22      	ldr	r2, [pc, #136]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 80041ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80041ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fd fd20 	bl	8001c3c <HAL_GetTick>
 80041fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004200:	f7fd fd1c 	bl	8001c3c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	@ 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e32e      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004212:	4b18      	ldr	r3, [pc, #96]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x1f4>
 800421e:	e012      	b.n	8004246 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004220:	f7fd fd0c 	bl	8001c3c <HAL_GetTick>
 8004224:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004228:	f7fd fd08 	bl	8001c3c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	@ 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e31a      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800423a:	4b0e      	ldr	r3, [pc, #56]	@ (8004274 <HAL_RCC_OscConfig+0x268>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 809a 	beq.w	8004388 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_RCC_OscConfig+0x25a>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	2b18      	cmp	r3, #24
 800425e:	d149      	bne.n	80042f4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d146      	bne.n	80042f4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d104      	bne.n	8004278 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e2fe      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
 8004272:	bf00      	nop
 8004274:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d11c      	bne.n	80042b8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800427e:	4b9a      	ldr	r3, [pc, #616]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0218 	and.w	r2, r3, #24
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	429a      	cmp	r2, r3
 800428c:	d014      	beq.n	80042b8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800428e:	4b96      	ldr	r3, [pc, #600]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 0218 	bic.w	r2, r3, #24
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	4993      	ldr	r1, [pc, #588]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80042a0:	f000 fdd0 	bl	8004e44 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80042a4:	4b91      	ldr	r3, [pc, #580]	@ (80044ec <HAL_RCC_OscConfig+0x4e0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fd fc3d 	bl	8001b28 <HAL_InitTick>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e2db      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fd fcc0 	bl	8001c3c <HAL_GetTick>
 80042bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80042c0:	f7fd fcbc 	bl	8001c3c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e2ce      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d2:	4b85      	ldr	r3, [pc, #532]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80042de:	4b82      	ldr	r3, [pc, #520]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	041b      	lsls	r3, r3, #16
 80042ec:	497e      	ldr	r1, [pc, #504]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80042f2:	e049      	b.n	8004388 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d02c      	beq.n	8004356 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80042fc:	4b7a      	ldr	r3, [pc, #488]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f023 0218 	bic.w	r2, r3, #24
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	4977      	ldr	r1, [pc, #476]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800430e:	4b76      	ldr	r3, [pc, #472]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a75      	ldr	r2, [pc, #468]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431a:	f7fd fc8f 	bl	8001c3c <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004322:	f7fd fc8b 	bl	8001c3c <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e29d      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004334:	4b6c      	ldr	r3, [pc, #432]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004340:	4b69      	ldr	r3, [pc, #420]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	4966      	ldr	r1, [pc, #408]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 8004350:	4313      	orrs	r3, r2
 8004352:	610b      	str	r3, [r1, #16]
 8004354:	e018      	b.n	8004388 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004356:	4b64      	ldr	r3, [pc, #400]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a63      	ldr	r2, [pc, #396]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004362:	f7fd fc6b 	bl	8001c3c <HAL_GetTick>
 8004366:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800436a:	f7fd fc67 	bl	8001c3c <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e279      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800437c:	4b5a      	ldr	r3, [pc, #360]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f0      	bne.n	800436a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d03c      	beq.n	800440e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01c      	beq.n	80043d6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439c:	4b52      	ldr	r3, [pc, #328]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 800439e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043a2:	4a51      	ldr	r2, [pc, #324]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80043a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fd fc46 	bl	8001c3c <HAL_GetTick>
 80043b0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80043b4:	f7fd fc42 	bl	8001c3c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e254      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80043c6:	4b48      	ldr	r3, [pc, #288]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80043c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ef      	beq.n	80043b4 <HAL_RCC_OscConfig+0x3a8>
 80043d4:	e01b      	b.n	800440e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d6:	4b44      	ldr	r3, [pc, #272]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80043d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043dc:	4a42      	ldr	r2, [pc, #264]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80043de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80043e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e6:	f7fd fc29 	bl	8001c3c <HAL_GetTick>
 80043ea:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80043ee:	f7fd fc25 	bl	8001c3c <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e237      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004400:	4b39      	ldr	r3, [pc, #228]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 8004402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004406:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1ef      	bne.n	80043ee <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80d2 	beq.w	80045c0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800441c:	4b34      	ldr	r3, [pc, #208]	@ (80044f0 <HAL_RCC_OscConfig+0x4e4>)
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d118      	bne.n	800445a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004428:	4b31      	ldr	r3, [pc, #196]	@ (80044f0 <HAL_RCC_OscConfig+0x4e4>)
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	4a30      	ldr	r2, [pc, #192]	@ (80044f0 <HAL_RCC_OscConfig+0x4e4>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004434:	f7fd fc02 	bl	8001c3c <HAL_GetTick>
 8004438:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443c:	f7fd fbfe 	bl	8001c3c <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e210      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800444e:	4b28      	ldr	r3, [pc, #160]	@ (80044f0 <HAL_RCC_OscConfig+0x4e4>)
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d108      	bne.n	8004474 <HAL_RCC_OscConfig+0x468>
 8004462:	4b21      	ldr	r3, [pc, #132]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 8004464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004468:	4a1f      	ldr	r2, [pc, #124]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004472:	e074      	b.n	800455e <HAL_RCC_OscConfig+0x552>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d118      	bne.n	80044ae <HAL_RCC_OscConfig+0x4a2>
 800447c:	4b1a      	ldr	r3, [pc, #104]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 800447e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004482:	4a19      	ldr	r2, [pc, #100]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800448c:	4b16      	ldr	r3, [pc, #88]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 800448e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004492:	4a15      	ldr	r2, [pc, #84]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 8004494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004498:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800449c:	4b12      	ldr	r3, [pc, #72]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 800449e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044a2:	4a11      	ldr	r2, [pc, #68]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80044a4:	f023 0304 	bic.w	r3, r3, #4
 80044a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044ac:	e057      	b.n	800455e <HAL_RCC_OscConfig+0x552>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d11e      	bne.n	80044f4 <HAL_RCC_OscConfig+0x4e8>
 80044b6:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80044b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044bc:	4a0a      	ldr	r2, [pc, #40]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80044be:	f043 0304 	orr.w	r3, r3, #4
 80044c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044c6:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80044c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044cc:	4a06      	ldr	r2, [pc, #24]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80044ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044d6:	4b04      	ldr	r3, [pc, #16]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80044d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044dc:	4a02      	ldr	r2, [pc, #8]	@ (80044e8 <HAL_RCC_OscConfig+0x4dc>)
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80044e6:	e03a      	b.n	800455e <HAL_RCC_OscConfig+0x552>
 80044e8:	44020c00 	.word	0x44020c00
 80044ec:	20000020 	.word	0x20000020
 80044f0:	44020800 	.word	0x44020800
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b85      	cmp	r3, #133	@ 0x85
 80044fa:	d118      	bne.n	800452e <HAL_RCC_OscConfig+0x522>
 80044fc:	4ba2      	ldr	r3, [pc, #648]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 80044fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004502:	4aa1      	ldr	r2, [pc, #644]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004504:	f043 0304 	orr.w	r3, r3, #4
 8004508:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800450c:	4b9e      	ldr	r3, [pc, #632]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 800450e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004512:	4a9d      	ldr	r2, [pc, #628]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004518:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800451c:	4b9a      	ldr	r3, [pc, #616]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 800451e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004522:	4a99      	ldr	r2, [pc, #612]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800452c:	e017      	b.n	800455e <HAL_RCC_OscConfig+0x552>
 800452e:	4b96      	ldr	r3, [pc, #600]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004534:	4a94      	ldr	r2, [pc, #592]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800453e:	4b92      	ldr	r3, [pc, #584]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004544:	4a90      	ldr	r2, [pc, #576]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004546:	f023 0304 	bic.w	r3, r3, #4
 800454a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800454e:	4b8e      	ldr	r3, [pc, #568]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004554:	4a8c      	ldr	r2, [pc, #560]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800455a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004566:	f7fd fb69 	bl	8001c3c <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800456c:	e00a      	b.n	8004584 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	f7fd fb65 	bl	8001c3c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457c:	4293      	cmp	r3, r2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e175      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004584:	4b80      	ldr	r3, [pc, #512]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0ed      	beq.n	800456e <HAL_RCC_OscConfig+0x562>
 8004592:	e015      	b.n	80045c0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fd fb52 	bl	8001c3c <HAL_GetTick>
 8004598:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459c:	f7fd fb4e 	bl	8001c3c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e15e      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045b2:	4b75      	ldr	r3, [pc, #468]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 80045b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1ed      	bne.n	800459c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d036      	beq.n	800463a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d019      	beq.n	8004608 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 80045da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80045de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fd fb2c 	bl	8001c3c <HAL_GetTick>
 80045e4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80045e8:	f7fd fb28 	bl	8001c3c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e13a      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80045fa:	4b63      	ldr	r3, [pc, #396]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x5dc>
 8004606:	e018      	b.n	800463a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004608:	4b5f      	ldr	r3, [pc, #380]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a5e      	ldr	r2, [pc, #376]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 800460e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004612:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fd fb12 	bl	8001c3c <HAL_GetTick>
 8004618:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800461c:	f7fd fb0e 	bl	8001c3c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e120      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800462e:	4b56      	ldr	r3, [pc, #344]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 8115 	beq.w	800486e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	2b18      	cmp	r3, #24
 8004648:	f000 80af 	beq.w	80047aa <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	2b02      	cmp	r3, #2
 8004652:	f040 8086 	bne.w	8004762 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004656:	4b4c      	ldr	r3, [pc, #304]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a4b      	ldr	r2, [pc, #300]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 800465c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004662:	f7fd faeb 	bl	8001c3c <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800466a:	f7fd fae7 	bl	8001c3c <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e0f9      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800467c:	4b42      	ldr	r3, [pc, #264]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f0      	bne.n	800466a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004688:	4b3f      	ldr	r3, [pc, #252]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 800468a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004690:	f023 0303 	bic.w	r3, r3, #3
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800469c:	0212      	lsls	r2, r2, #8
 800469e:	430a      	orrs	r2, r1
 80046a0:	4939      	ldr	r1, [pc, #228]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	628b      	str	r3, [r1, #40]	@ 0x28
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046aa:	3b01      	subs	r3, #1
 80046ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b4:	3b01      	subs	r3, #1
 80046b6:	025b      	lsls	r3, r3, #9
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c0:	3b01      	subs	r3, #1
 80046c2:	041b      	lsls	r3, r3, #16
 80046c4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	3b01      	subs	r3, #1
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80046d6:	492c      	ldr	r1, [pc, #176]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80046dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 80046de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e0:	4a29      	ldr	r2, [pc, #164]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 80046e2:	f023 0310 	bic.w	r3, r3, #16
 80046e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ec:	4a26      	ldr	r2, [pc, #152]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80046f2:	4b25      	ldr	r3, [pc, #148]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 80046f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f6:	4a24      	ldr	r2, [pc, #144]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 80046f8:	f043 0310 	orr.w	r3, r3, #16
 80046fc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80046fe:	4b22      	ldr	r3, [pc, #136]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004702:	f023 020c 	bic.w	r2, r3, #12
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470a:	491f      	ldr	r1, [pc, #124]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 800470c:	4313      	orrs	r3, r2
 800470e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004710:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004714:	f023 0220 	bic.w	r2, r3, #32
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800471c:	491a      	ldr	r1, [pc, #104]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 800471e:	4313      	orrs	r3, r2
 8004720:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004722:	4b19      	ldr	r3, [pc, #100]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004726:	4a18      	ldr	r2, [pc, #96]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800472c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800472e:	4b16      	ldr	r3, [pc, #88]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a15      	ldr	r2, [pc, #84]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004734:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473a:	f7fd fa7f 	bl	8001c3c <HAL_GetTick>
 800473e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004742:	f7fd fa7b 	bl	8001c3c <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e08d      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004754:	4b0c      	ldr	r3, [pc, #48]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x736>
 8004760:	e085      	b.n	800486e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004762:	4b09      	ldr	r3, [pc, #36]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a08      	ldr	r2, [pc, #32]	@ (8004788 <HAL_RCC_OscConfig+0x77c>)
 8004768:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800476c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fd fa65 	bl	8001c3c <HAL_GetTick>
 8004772:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004774:	e00a      	b.n	800478c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004776:	f7fd fa61 	bl	8001c3c <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d903      	bls.n	800478c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e073      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
 8004788:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800478c:	4b3a      	ldr	r3, [pc, #232]	@ (8004878 <HAL_RCC_OscConfig+0x86c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1ee      	bne.n	8004776 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004798:	4b37      	ldr	r3, [pc, #220]	@ (8004878 <HAL_RCC_OscConfig+0x86c>)
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	4a36      	ldr	r2, [pc, #216]	@ (8004878 <HAL_RCC_OscConfig+0x86c>)
 800479e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80047a2:	f023 0303 	bic.w	r3, r3, #3
 80047a6:	6293      	str	r3, [r2, #40]	@ 0x28
 80047a8:	e061      	b.n	800486e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80047aa:	4b33      	ldr	r3, [pc, #204]	@ (8004878 <HAL_RCC_OscConfig+0x86c>)
 80047ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80047b0:	4b31      	ldr	r3, [pc, #196]	@ (8004878 <HAL_RCC_OscConfig+0x86c>)
 80047b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d031      	beq.n	8004822 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f003 0203 	and.w	r2, r3, #3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d12a      	bne.n	8004822 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	0a1b      	lsrs	r3, r3, #8
 80047d0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d122      	bne.n	8004822 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d11a      	bne.n	8004822 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	0a5b      	lsrs	r3, r3, #9
 80047f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d111      	bne.n	8004822 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d108      	bne.n	8004822 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	0e1b      	lsrs	r3, r3, #24
 8004814:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800481e:	429a      	cmp	r2, r3
 8004820:	d001      	beq.n	8004826 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e024      	b.n	8004870 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004826:	4b14      	ldr	r3, [pc, #80]	@ (8004878 <HAL_RCC_OscConfig+0x86c>)
 8004828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482a:	08db      	lsrs	r3, r3, #3
 800482c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004834:	429a      	cmp	r2, r3
 8004836:	d01a      	beq.n	800486e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004838:	4b0f      	ldr	r3, [pc, #60]	@ (8004878 <HAL_RCC_OscConfig+0x86c>)
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	4a0e      	ldr	r2, [pc, #56]	@ (8004878 <HAL_RCC_OscConfig+0x86c>)
 800483e:	f023 0310 	bic.w	r3, r3, #16
 8004842:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fd f9fa 	bl	8001c3c <HAL_GetTick>
 8004848:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800484a:	bf00      	nop
 800484c:	f7fd f9f6 	bl	8001c3c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	4293      	cmp	r3, r2
 8004856:	d0f9      	beq.n	800484c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485c:	4a06      	ldr	r2, [pc, #24]	@ (8004878 <HAL_RCC_OscConfig+0x86c>)
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004862:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <HAL_RCC_OscConfig+0x86c>)
 8004864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004866:	4a04      	ldr	r2, [pc, #16]	@ (8004878 <HAL_RCC_OscConfig+0x86c>)
 8004868:	f043 0310 	orr.w	r3, r3, #16
 800486c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3720      	adds	r7, #32
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	44020c00 	.word	0x44020c00

0800487c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e19e      	b.n	8004bce <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004890:	4b83      	ldr	r3, [pc, #524]	@ (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 030f 	and.w	r3, r3, #15
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d910      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b80      	ldr	r3, [pc, #512]	@ (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 020f 	bic.w	r2, r3, #15
 80048a6:	497e      	ldr	r1, [pc, #504]	@ (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b7c      	ldr	r3, [pc, #496]	@ (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e186      	b.n	8004bce <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0310 	and.w	r3, r3, #16
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d012      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	4b74      	ldr	r3, [pc, #464]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	0a1b      	lsrs	r3, r3, #8
 80048d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048da:	429a      	cmp	r2, r3
 80048dc:	d909      	bls.n	80048f2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80048de:	4b71      	ldr	r3, [pc, #452]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	496d      	ldr	r1, [pc, #436]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d012      	beq.n	8004924 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	4b68      	ldr	r3, [pc, #416]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	091b      	lsrs	r3, r3, #4
 8004908:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800490c:	429a      	cmp	r2, r3
 800490e:	d909      	bls.n	8004924 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004910:	4b64      	ldr	r3, [pc, #400]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	4961      	ldr	r1, [pc, #388]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 8004920:	4313      	orrs	r3, r2
 8004922:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d010      	beq.n	8004952 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	4b5b      	ldr	r3, [pc, #364]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800493c:	429a      	cmp	r2, r3
 800493e:	d908      	bls.n	8004952 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004940:	4b58      	ldr	r3, [pc, #352]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	4955      	ldr	r1, [pc, #340]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 800494e:	4313      	orrs	r3, r2
 8004950:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d010      	beq.n	8004980 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	4b50      	ldr	r3, [pc, #320]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	429a      	cmp	r2, r3
 800496c:	d908      	bls.n	8004980 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800496e:	4b4d      	ldr	r3, [pc, #308]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 020f 	bic.w	r2, r3, #15
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	494a      	ldr	r1, [pc, #296]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 800497c:	4313      	orrs	r3, r2
 800497e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8093 	beq.w	8004ab4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b03      	cmp	r3, #3
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004996:	4b43      	ldr	r3, [pc, #268]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d121      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e113      	b.n	8004bce <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d107      	bne.n	80049be <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ae:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d115      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e107      	b.n	8004bce <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80049c6:	4b37      	ldr	r3, [pc, #220]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e0fb      	b.n	8004bce <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049d6:	4b33      	ldr	r3, [pc, #204]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e0f3      	b.n	8004bce <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80049e6:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f023 0203 	bic.w	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	492c      	ldr	r1, [pc, #176]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f8:	f7fd f920 	bl	8001c3c <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d112      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a08:	f7fd f918 	bl	8001c3c <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e0d7      	b.n	8004bce <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a1e:	4b21      	ldr	r3, [pc, #132]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f003 0318 	and.w	r3, r3, #24
 8004a26:	2b18      	cmp	r3, #24
 8004a28:	d1ee      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x18c>
 8004a2a:	e043      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d112      	bne.n	8004a5a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a34:	e00a      	b.n	8004a4c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a36:	f7fd f901 	bl	8001c3c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e0c0      	b.n	8004bce <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a4c:	4b15      	ldr	r3, [pc, #84]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f003 0318 	and.w	r3, r3, #24
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d1ee      	bne.n	8004a36 <HAL_RCC_ClockConfig+0x1ba>
 8004a58:	e02c      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d122      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fd f8ea 	bl	8001c3c <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e0a9      	b.n	8004bce <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa4 <HAL_RCC_ClockConfig+0x228>)
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f003 0318 	and.w	r3, r3, #24
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d1ee      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x1e8>
 8004a86:	e015      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004a88:	f7fd f8d8 	bl	8001c3c <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d906      	bls.n	8004aa8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e097      	b.n	8004bce <HAL_RCC_ClockConfig+0x352>
 8004a9e:	bf00      	nop
 8004aa0:	40022000 	.word	0x40022000
 8004aa4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f003 0318 	and.w	r3, r3, #24
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e9      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d010      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	4b44      	ldr	r3, [pc, #272]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d208      	bcs.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004ad0:	4b41      	ldr	r3, [pc, #260]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f023 020f 	bic.w	r2, r3, #15
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	493e      	ldr	r1, [pc, #248]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8004bdc <HAL_RCC_ClockConfig+0x360>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d210      	bcs.n	8004b12 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af0:	4b3a      	ldr	r3, [pc, #232]	@ (8004bdc <HAL_RCC_ClockConfig+0x360>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f023 020f 	bic.w	r2, r3, #15
 8004af8:	4938      	ldr	r1, [pc, #224]	@ (8004bdc <HAL_RCC_ClockConfig+0x360>)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b00:	4b36      	ldr	r3, [pc, #216]	@ (8004bdc <HAL_RCC_ClockConfig+0x360>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d001      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e05d      	b.n	8004bce <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d010      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	4b2d      	ldr	r3, [pc, #180]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d208      	bcs.n	8004b40 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	4927      	ldr	r1, [pc, #156]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d012      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	4b21      	ldr	r3, [pc, #132]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	091b      	lsrs	r3, r3, #4
 8004b56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d209      	bcs.n	8004b72 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	491a      	ldr	r1, [pc, #104]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0310 	and.w	r3, r3, #16
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d012      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	4b15      	ldr	r3, [pc, #84]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d209      	bcs.n	8004ba4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004b90:	4b11      	ldr	r3, [pc, #68]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	490e      	ldr	r1, [pc, #56]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004ba4:	f000 f822 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <HAL_RCC_ClockConfig+0x35c>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	490b      	ldr	r1, [pc, #44]	@ (8004be0 <HAL_RCC_ClockConfig+0x364>)
 8004bb4:	5ccb      	ldrb	r3, [r1, r3]
 8004bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bba:	4a0a      	ldr	r2, [pc, #40]	@ (8004be4 <HAL_RCC_ClockConfig+0x368>)
 8004bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <HAL_RCC_ClockConfig+0x36c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fc ffb0 	bl	8001b28 <HAL_InitTick>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004bcc:	7afb      	ldrb	r3, [r7, #11]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	44020c00 	.word	0x44020c00
 8004bdc:	40022000 	.word	0x40022000
 8004be0:	080103f0 	.word	0x080103f0
 8004be4:	20000000 	.word	0x20000000
 8004be8:	20000020 	.word	0x20000020

08004bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b089      	sub	sp, #36	@ 0x24
 8004bf0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004bf2:	4b8c      	ldr	r3, [pc, #560]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 0318 	and.w	r3, r3, #24
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d102      	bne.n	8004c04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004bfe:	4b8a      	ldr	r3, [pc, #552]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	e107      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c04:	4b87      	ldr	r3, [pc, #540]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	f003 0318 	and.w	r3, r3, #24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d112      	bne.n	8004c36 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004c10:	4b84      	ldr	r3, [pc, #528]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c1c:	4b81      	ldr	r3, [pc, #516]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	08db      	lsrs	r3, r3, #3
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	4a81      	ldr	r2, [pc, #516]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x240>)
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	e0f1      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004c30:	4b7e      	ldr	r3, [pc, #504]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x240>)
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e0ee      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c36:	4b7b      	ldr	r3, [pc, #492]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	f003 0318 	and.w	r3, r3, #24
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d102      	bne.n	8004c48 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c42:	4b7b      	ldr	r3, [pc, #492]	@ (8004e30 <HAL_RCC_GetSysClockFreq+0x244>)
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	e0e5      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c48:	4b76      	ldr	r3, [pc, #472]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f003 0318 	and.w	r3, r3, #24
 8004c50:	2b18      	cmp	r3, #24
 8004c52:	f040 80dd 	bne.w	8004e10 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004c56:	4b73      	ldr	r3, [pc, #460]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004c60:	4b70      	ldr	r3, [pc, #448]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004c6c:	4b6d      	ldr	r3, [pc, #436]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004c78:	4b6a      	ldr	r3, [pc, #424]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004c7c:	08db      	lsrs	r3, r3, #3
 8004c7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	fb02 f303 	mul.w	r3, r2, r3
 8004c88:	ee07 3a90 	vmov	s15, r3
 8004c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c90:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 80b7 	beq.w	8004e0a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d003      	beq.n	8004caa <HAL_RCC_GetSysClockFreq+0xbe>
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d056      	beq.n	8004d56 <HAL_RCC_GetSysClockFreq+0x16a>
 8004ca8:	e077      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004caa:	4b5e      	ldr	r3, [pc, #376]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d02d      	beq.n	8004d12 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cb6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	08db      	lsrs	r3, r3, #3
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	4a5a      	ldr	r2, [pc, #360]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x240>)
 8004cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	ee07 3a90 	vmov	s15, r3
 8004cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce0:	4b50      	ldr	r3, [pc, #320]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004cf0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cf4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004e34 <HAL_RCC_GetSysClockFreq+0x248>
 8004cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004d10:	e065      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	ee07 3a90 	vmov	s15, r3
 8004d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004e38 <HAL_RCC_GetSysClockFreq+0x24c>
 8004d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d24:	4b3f      	ldr	r3, [pc, #252]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d34:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d38:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004e34 <HAL_RCC_GetSysClockFreq+0x248>
 8004d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d50:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004d54:	e043      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d60:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004e3c <HAL_RCC_GetSysClockFreq+0x250>
 8004d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d68:	4b2e      	ldr	r3, [pc, #184]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d70:	ee07 3a90 	vmov	s15, r3
 8004d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d78:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d7c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004e34 <HAL_RCC_GetSysClockFreq+0x248>
 8004d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d94:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004d98:	e021      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	ee07 3a90 	vmov	s15, r3
 8004da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004e40 <HAL_RCC_GetSysClockFreq+0x254>
 8004da8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dac:	4b1d      	ldr	r3, [pc, #116]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db4:	ee07 3a90 	vmov	s15, r3
 8004db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dc0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004e34 <HAL_RCC_GetSysClockFreq+0x248>
 8004dc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004ddc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004dde:	4b11      	ldr	r3, [pc, #68]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x238>)
 8004de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de2:	0a5b      	lsrs	r3, r3, #9
 8004de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de8:	3301      	adds	r3, #1
 8004dea:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004df6:	edd7 6a06 	vldr	s13, [r7, #24]
 8004dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e02:	ee17 3a90 	vmov	r3, s15
 8004e06:	61fb      	str	r3, [r7, #28]
 8004e08:	e004      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	e001      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004e10:	4b06      	ldr	r3, [pc, #24]	@ (8004e2c <HAL_RCC_GetSysClockFreq+0x240>)
 8004e12:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004e14:	69fb      	ldr	r3, [r7, #28]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3724      	adds	r7, #36	@ 0x24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	44020c00 	.word	0x44020c00
 8004e28:	003d0900 	.word	0x003d0900
 8004e2c:	03d09000 	.word	0x03d09000
 8004e30:	007a1200 	.word	0x007a1200
 8004e34:	46000000 	.word	0x46000000
 8004e38:	4c742400 	.word	0x4c742400
 8004e3c:	4af42400 	.word	0x4af42400
 8004e40:	4a742400 	.word	0x4a742400

08004e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004e48:	f7ff fed0 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b08      	ldr	r3, [pc, #32]	@ (8004e70 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004e52:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004e56:	4907      	ldr	r1, [pc, #28]	@ (8004e74 <HAL_RCC_GetHCLKFreq+0x30>)
 8004e58:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004e5a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e62:	4a05      	ldr	r2, [pc, #20]	@ (8004e78 <HAL_RCC_GetHCLKFreq+0x34>)
 8004e64:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004e66:	4b04      	ldr	r3, [pc, #16]	@ (8004e78 <HAL_RCC_GetHCLKFreq+0x34>)
 8004e68:	681b      	ldr	r3, [r3, #0]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	44020c00 	.word	0x44020c00
 8004e74:	080103f0 	.word	0x080103f0
 8004e78:	20000000 	.word	0x20000000

08004e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004e80:	f7ff ffe0 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004e84:	4602      	mov	r2, r0
 8004e86:	4b06      	ldr	r3, [pc, #24]	@ (8004ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	091b      	lsrs	r3, r3, #4
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	4904      	ldr	r1, [pc, #16]	@ (8004ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e92:	5ccb      	ldrb	r3, [r1, r3]
 8004e94:	f003 031f 	and.w	r3, r3, #31
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	44020c00 	.word	0x44020c00
 8004ea4:	08010400 	.word	0x08010400

08004ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004eac:	f7ff ffca 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	4b06      	ldr	r3, [pc, #24]	@ (8004ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	0a1b      	lsrs	r3, r3, #8
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4904      	ldr	r1, [pc, #16]	@ (8004ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ebe:	5ccb      	ldrb	r3, [r1, r3]
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	44020c00 	.word	0x44020c00
 8004ed0:	08010400 	.word	0x08010400

08004ed4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004ed8:	f7ff ffb4 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004edc:	4602      	mov	r2, r0
 8004ede:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	0b1b      	lsrs	r3, r3, #12
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	4904      	ldr	r1, [pc, #16]	@ (8004efc <HAL_RCC_GetPCLK3Freq+0x28>)
 8004eea:	5ccb      	ldrb	r3, [r1, r3]
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	44020c00 	.word	0x44020c00
 8004efc:	08010400 	.word	0x08010400

08004f00 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f04:	b0d8      	sub	sp, #352	@ 0x160
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f12:	2300      	movs	r3, #0
 8004f14:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004f24:	2500      	movs	r5, #0
 8004f26:	ea54 0305 	orrs.w	r3, r4, r5
 8004f2a:	d00b      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004f2c:	4bcd      	ldr	r3, [pc, #820]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f32:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3c:	4ac9      	ldr	r2, [pc, #804]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f002 0801 	and.w	r8, r2, #1
 8004f50:	f04f 0900 	mov.w	r9, #0
 8004f54:	ea58 0309 	orrs.w	r3, r8, r9
 8004f58:	d042      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004f5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f60:	2b05      	cmp	r3, #5
 8004f62:	d823      	bhi.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004f64:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004fb5 	.word	0x08004fb5
 8004f70:	08004f85 	.word	0x08004f85
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	08004fb5 	.word	0x08004fb5
 8004f7c:	08004fb5 	.word	0x08004fb5
 8004f80:	08004fb5 	.word	0x08004fb5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f88:	3308      	adds	r3, #8
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f004 fee0 	bl	8009d50 <RCCEx_PLL2_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004f96:	e00e      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f9c:	3330      	adds	r3, #48	@ 0x30
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f004 ff6e 	bl	8009e80 <RCCEx_PLL3_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004faa:	e004      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004fbe:	4ba9      	ldr	r3, [pc, #676]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fc4:	f023 0107 	bic.w	r1, r3, #7
 8004fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fce:	4aa5      	ldr	r2, [pc, #660]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004fd6:	e003      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f002 0a02 	and.w	sl, r2, #2
 8004fec:	f04f 0b00 	mov.w	fp, #0
 8004ff0:	ea5a 030b 	orrs.w	r3, sl, fp
 8004ff4:	f000 8088 	beq.w	8005108 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ffe:	2b28      	cmp	r3, #40	@ 0x28
 8005000:	d868      	bhi.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005002:	a201      	add	r2, pc, #4	@ (adr r2, 8005008 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	080050dd 	.word	0x080050dd
 800500c:	080050d5 	.word	0x080050d5
 8005010:	080050d5 	.word	0x080050d5
 8005014:	080050d5 	.word	0x080050d5
 8005018:	080050d5 	.word	0x080050d5
 800501c:	080050d5 	.word	0x080050d5
 8005020:	080050d5 	.word	0x080050d5
 8005024:	080050d5 	.word	0x080050d5
 8005028:	080050ad 	.word	0x080050ad
 800502c:	080050d5 	.word	0x080050d5
 8005030:	080050d5 	.word	0x080050d5
 8005034:	080050d5 	.word	0x080050d5
 8005038:	080050d5 	.word	0x080050d5
 800503c:	080050d5 	.word	0x080050d5
 8005040:	080050d5 	.word	0x080050d5
 8005044:	080050d5 	.word	0x080050d5
 8005048:	080050c1 	.word	0x080050c1
 800504c:	080050d5 	.word	0x080050d5
 8005050:	080050d5 	.word	0x080050d5
 8005054:	080050d5 	.word	0x080050d5
 8005058:	080050d5 	.word	0x080050d5
 800505c:	080050d5 	.word	0x080050d5
 8005060:	080050d5 	.word	0x080050d5
 8005064:	080050d5 	.word	0x080050d5
 8005068:	080050dd 	.word	0x080050dd
 800506c:	080050d5 	.word	0x080050d5
 8005070:	080050d5 	.word	0x080050d5
 8005074:	080050d5 	.word	0x080050d5
 8005078:	080050d5 	.word	0x080050d5
 800507c:	080050d5 	.word	0x080050d5
 8005080:	080050d5 	.word	0x080050d5
 8005084:	080050d5 	.word	0x080050d5
 8005088:	080050dd 	.word	0x080050dd
 800508c:	080050d5 	.word	0x080050d5
 8005090:	080050d5 	.word	0x080050d5
 8005094:	080050d5 	.word	0x080050d5
 8005098:	080050d5 	.word	0x080050d5
 800509c:	080050d5 	.word	0x080050d5
 80050a0:	080050d5 	.word	0x080050d5
 80050a4:	080050d5 	.word	0x080050d5
 80050a8:	080050dd 	.word	0x080050dd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80050ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050b0:	3308      	adds	r3, #8
 80050b2:	4618      	mov	r0, r3
 80050b4:	f004 fe4c 	bl	8009d50 <RCCEx_PLL2_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80050be:	e00e      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050c4:	3330      	adds	r3, #48	@ 0x30
 80050c6:	4618      	mov	r0, r3
 80050c8:	f004 feda 	bl	8009e80 <RCCEx_PLL3_Config>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80050d2:	e004      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80050da:	e000      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80050dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10c      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80050e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80050e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80050ec:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80050f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f6:	4a5b      	ldr	r2, [pc, #364]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80050f8:	430b      	orrs	r3, r1
 80050fa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80050fe:	e003      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005100:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005104:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005108:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	f002 0304 	and.w	r3, r2, #4
 8005114:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8005118:	2300      	movs	r3, #0
 800511a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800511e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8005122:	460b      	mov	r3, r1
 8005124:	4313      	orrs	r3, r2
 8005126:	d04e      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005128:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800512c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800512e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005132:	d02c      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005134:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005138:	d825      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800513a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800513e:	d028      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005144:	d81f      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005146:	2bc0      	cmp	r3, #192	@ 0xc0
 8005148:	d025      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800514a:	2bc0      	cmp	r3, #192	@ 0xc0
 800514c:	d81b      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800514e:	2b80      	cmp	r3, #128	@ 0x80
 8005150:	d00f      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005152:	2b80      	cmp	r3, #128	@ 0x80
 8005154:	d817      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01f      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800515a:	2b40      	cmp	r3, #64	@ 0x40
 800515c:	d113      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800515e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005162:	3308      	adds	r3, #8
 8005164:	4618      	mov	r0, r3
 8005166:	f004 fdf3 	bl	8009d50 <RCCEx_PLL2_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005170:	e014      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005172:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005176:	3330      	adds	r3, #48	@ 0x30
 8005178:	4618      	mov	r0, r3
 800517a:	f004 fe81 	bl	8009e80 <RCCEx_PLL3_Config>
 800517e:	4603      	mov	r3, r0
 8005180:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005184:	e00a      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800518c:	e006      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800518e:	bf00      	nop
 8005190:	e004      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005192:	bf00      	nop
 8005194:	e002      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005196:	bf00      	nop
 8005198:	e000      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800519a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800519c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10c      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80051a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80051a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80051aa:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80051ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80051b6:	430b      	orrs	r3, r1
 80051b8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80051bc:	e003      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	f002 0308 	and.w	r3, r2, #8
 80051d2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80051d6:	2300      	movs	r3, #0
 80051d8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80051dc:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80051e0:	460b      	mov	r3, r1
 80051e2:	4313      	orrs	r3, r2
 80051e4:	d056      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80051e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051ec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80051f0:	d031      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80051f2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80051f6:	d82a      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80051f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051fc:	d02d      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80051fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005202:	d824      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005204:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005208:	d029      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800520a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800520e:	d81e      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005214:	d011      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521a:	d818      	bhi.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d023      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005224:	d113      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005226:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800522a:	3308      	adds	r3, #8
 800522c:	4618      	mov	r0, r3
 800522e:	f004 fd8f 	bl	8009d50 <RCCEx_PLL2_Config>
 8005232:	4603      	mov	r3, r0
 8005234:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005238:	e017      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800523a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800523e:	3330      	adds	r3, #48	@ 0x30
 8005240:	4618      	mov	r0, r3
 8005242:	f004 fe1d 	bl	8009e80 <RCCEx_PLL3_Config>
 8005246:	4603      	mov	r3, r0
 8005248:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800524c:	e00d      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005254:	e009      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005256:	bf00      	nop
 8005258:	e007      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800525a:	bf00      	nop
 800525c:	e005      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800525e:	bf00      	nop
 8005260:	e003      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005262:	bf00      	nop
 8005264:	44020c00 	.word	0x44020c00
        break;
 8005268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800526a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10c      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005272:	4bbb      	ldr	r3, [pc, #748]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005274:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005278:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800527c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005280:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005282:	4ab7      	ldr	r2, [pc, #732]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005284:	430b      	orrs	r3, r1
 8005286:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800528a:	e003      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005290:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005294:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	f002 0310 	and.w	r3, r2, #16
 80052a0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80052a4:	2300      	movs	r3, #0
 80052a6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80052aa:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80052ae:	460b      	mov	r3, r1
 80052b0:	4313      	orrs	r3, r2
 80052b2:	d053      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80052b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80052be:	d031      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80052c0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80052c4:	d82a      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80052c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052ca:	d02d      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80052cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052d0:	d824      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80052d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052d6:	d029      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80052d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052dc:	d81e      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80052de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e2:	d011      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80052e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e8:	d818      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d020      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80052ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f2:	d113      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052f8:	3308      	adds	r3, #8
 80052fa:	4618      	mov	r0, r3
 80052fc:	f004 fd28 	bl	8009d50 <RCCEx_PLL2_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005306:	e014      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005308:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800530c:	3330      	adds	r3, #48	@ 0x30
 800530e:	4618      	mov	r0, r3
 8005310:	f004 fdb6 	bl	8009e80 <RCCEx_PLL3_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800531a:	e00a      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005322:	e006      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005324:	bf00      	nop
 8005326:	e004      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005328:	bf00      	nop
 800532a:	e002      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800532c:	bf00      	nop
 800532e:	e000      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005332:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10c      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800533a:	4b89      	ldr	r3, [pc, #548]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800533c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005340:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800534a:	4a85      	ldr	r2, [pc, #532]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800534c:	430b      	orrs	r3, r1
 800534e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005352:	e003      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005358:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800535c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	f002 0320 	and.w	r3, r2, #32
 8005368:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800536c:	2300      	movs	r3, #0
 800536e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005372:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8005376:	460b      	mov	r3, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	d053      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800537c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005382:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005386:	d031      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005388:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800538c:	d82a      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800538e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005392:	d02d      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005398:	d824      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800539a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800539e:	d029      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80053a0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80053a4:	d81e      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80053a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053aa:	d011      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80053ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b0:	d818      	bhi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d020      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80053b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053ba:	d113      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053c0:	3308      	adds	r3, #8
 80053c2:	4618      	mov	r0, r3
 80053c4:	f004 fcc4 	bl	8009d50 <RCCEx_PLL2_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80053ce:	e014      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053d4:	3330      	adds	r3, #48	@ 0x30
 80053d6:	4618      	mov	r0, r3
 80053d8:	f004 fd52 	bl	8009e80 <RCCEx_PLL3_Config>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80053e2:	e00a      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80053ea:	e006      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80053ec:	bf00      	nop
 80053ee:	e004      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80053f0:	bf00      	nop
 80053f2:	e002      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80053f4:	bf00      	nop
 80053f6:	e000      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80053f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10c      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005402:	4b57      	ldr	r3, [pc, #348]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005404:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005408:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800540c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005412:	4a53      	ldr	r2, [pc, #332]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005414:	430b      	orrs	r3, r1
 8005416:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800541a:	e003      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005420:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005424:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005430:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005434:	2300      	movs	r3, #0
 8005436:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800543a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800543e:	460b      	mov	r3, r1
 8005440:	4313      	orrs	r3, r2
 8005442:	d053      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005444:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800544a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800544e:	d031      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005450:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005454:	d82a      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800545a:	d02d      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800545c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005460:	d824      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005462:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005466:	d029      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005468:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800546c:	d81e      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800546e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005472:	d011      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005474:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005478:	d818      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d020      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800547e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005482:	d113      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005488:	3308      	adds	r3, #8
 800548a:	4618      	mov	r0, r3
 800548c:	f004 fc60 	bl	8009d50 <RCCEx_PLL2_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005496:	e014      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005498:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800549c:	3330      	adds	r3, #48	@ 0x30
 800549e:	4618      	mov	r0, r3
 80054a0:	f004 fcee 	bl	8009e80 <RCCEx_PLL3_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80054aa:	e00a      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80054b2:	e006      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80054b4:	bf00      	nop
 80054b6:	e004      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80054c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80054ca:	4b25      	ldr	r3, [pc, #148]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80054cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80054d0:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80054d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054da:	4a21      	ldr	r2, [pc, #132]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80054e2:	e003      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80054fc:	2300      	movs	r3, #0
 80054fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005502:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005506:	460b      	mov	r3, r1
 8005508:	4313      	orrs	r3, r2
 800550a:	d055      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800550c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005512:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005516:	d033      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005518:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800551c:	d82c      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800551e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005522:	d02f      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005524:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005528:	d826      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800552a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800552e:	d02b      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005530:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005534:	d820      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800553a:	d013      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800553c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005540:	d81a      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d022      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005546:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800554a:	d115      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800554c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005550:	3308      	adds	r3, #8
 8005552:	4618      	mov	r0, r3
 8005554:	f004 fbfc 	bl	8009d50 <RCCEx_PLL2_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800555e:	e016      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005560:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005564:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005568:	3330      	adds	r3, #48	@ 0x30
 800556a:	4618      	mov	r0, r3
 800556c:	f004 fc88 	bl	8009e80 <RCCEx_PLL3_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005576:	e00a      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800557e:	e006      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005580:	bf00      	nop
 8005582:	e004      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005584:	bf00      	nop
 8005586:	e002      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005588:	bf00      	nop
 800558a:	e000      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800558c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10c      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005596:	4bbb      	ldr	r3, [pc, #748]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005598:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800559c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80055a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055a6:	4ab7      	ldr	r2, [pc, #732]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80055a8:	430b      	orrs	r3, r1
 80055aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80055ae:	e003      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055b4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80055b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80055c4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80055c8:	2300      	movs	r3, #0
 80055ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80055ce:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80055d2:	460b      	mov	r3, r1
 80055d4:	4313      	orrs	r3, r2
 80055d6:	d053      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80055d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055de:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80055e2:	d031      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80055e4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80055e8:	d82a      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80055ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055ee:	d02d      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80055f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055f4:	d824      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80055f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055fa:	d029      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80055fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005600:	d81e      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005602:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005606:	d011      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005608:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800560c:	d818      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d020      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005612:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005616:	d113      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005618:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800561c:	3308      	adds	r3, #8
 800561e:	4618      	mov	r0, r3
 8005620:	f004 fb96 	bl	8009d50 <RCCEx_PLL2_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800562a:	e014      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800562c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005630:	3330      	adds	r3, #48	@ 0x30
 8005632:	4618      	mov	r0, r3
 8005634:	f004 fc24 	bl	8009e80 <RCCEx_PLL3_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800563e:	e00a      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005646:	e006      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005648:	bf00      	nop
 800564a:	e004      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800564c:	bf00      	nop
 800564e:	e002      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005650:	bf00      	nop
 8005652:	e000      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005656:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10c      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800565e:	4b89      	ldr	r3, [pc, #548]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005664:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800566c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800566e:	4a85      	ldr	r2, [pc, #532]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005670:	430b      	orrs	r3, r1
 8005672:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005676:	e003      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800567c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005680:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800568c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005690:	2300      	movs	r3, #0
 8005692:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005696:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800569a:	460b      	mov	r3, r1
 800569c:	4313      	orrs	r3, r2
 800569e:	d055      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80056a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056a8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80056ac:	d031      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80056ae:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80056b2:	d82a      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80056b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056b8:	d02d      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80056ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056be:	d824      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80056c0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80056c4:	d029      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80056c6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80056ca:	d81e      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80056cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056d0:	d011      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80056d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056d6:	d818      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d020      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80056dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056e0:	d113      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056e6:	3308      	adds	r3, #8
 80056e8:	4618      	mov	r0, r3
 80056ea:	f004 fb31 	bl	8009d50 <RCCEx_PLL2_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80056f4:	e014      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056fa:	3330      	adds	r3, #48	@ 0x30
 80056fc:	4618      	mov	r0, r3
 80056fe:	f004 fbbf 	bl	8009e80 <RCCEx_PLL3_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005708:	e00a      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005710:	e006      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005712:	bf00      	nop
 8005714:	e004      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005716:	bf00      	nop
 8005718:	e002      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800571e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005720:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10d      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005728:	4b56      	ldr	r3, [pc, #344]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800572a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800572e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8005732:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800573a:	4a52      	ldr	r2, [pc, #328]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800573c:	430b      	orrs	r3, r1
 800573e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005742:	e003      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005744:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005748:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800574c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005758:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800575c:	2300      	movs	r3, #0
 800575e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005762:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005766:	460b      	mov	r3, r1
 8005768:	4313      	orrs	r3, r2
 800576a:	d044      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800576c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005770:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005774:	2b05      	cmp	r3, #5
 8005776:	d823      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005778:	a201      	add	r2, pc, #4	@ (adr r2, 8005780 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057c9 	.word	0x080057c9
 8005784:	08005799 	.word	0x08005799
 8005788:	080057ad 	.word	0x080057ad
 800578c:	080057c9 	.word	0x080057c9
 8005790:	080057c9 	.word	0x080057c9
 8005794:	080057c9 	.word	0x080057c9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005798:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800579c:	3308      	adds	r3, #8
 800579e:	4618      	mov	r0, r3
 80057a0:	f004 fad6 	bl	8009d50 <RCCEx_PLL2_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80057aa:	e00e      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057b0:	3330      	adds	r3, #48	@ 0x30
 80057b2:	4618      	mov	r0, r3
 80057b4:	f004 fb64 	bl	8009e80 <RCCEx_PLL3_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80057be:	e004      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057c6:	e000      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80057c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10d      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80057d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80057d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80057d8:	f023 0107 	bic.w	r1, r3, #7
 80057dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057e4:	4a27      	ldr	r2, [pc, #156]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80057e6:	430b      	orrs	r3, r1
 80057e8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80057ec:	e003      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80057f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005802:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005806:	2300      	movs	r3, #0
 8005808:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800580c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005810:	460b      	mov	r3, r1
 8005812:	4313      	orrs	r3, r2
 8005814:	d04f      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005816:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581e:	2b50      	cmp	r3, #80	@ 0x50
 8005820:	d029      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005822:	2b50      	cmp	r3, #80	@ 0x50
 8005824:	d823      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005826:	2b40      	cmp	r3, #64	@ 0x40
 8005828:	d027      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800582a:	2b40      	cmp	r3, #64	@ 0x40
 800582c:	d81f      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800582e:	2b30      	cmp	r3, #48	@ 0x30
 8005830:	d025      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005832:	2b30      	cmp	r3, #48	@ 0x30
 8005834:	d81b      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005836:	2b20      	cmp	r3, #32
 8005838:	d00f      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800583a:	2b20      	cmp	r3, #32
 800583c:	d817      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d022      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005842:	2b10      	cmp	r3, #16
 8005844:	d113      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005846:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800584a:	3308      	adds	r3, #8
 800584c:	4618      	mov	r0, r3
 800584e:	f004 fa7f 	bl	8009d50 <RCCEx_PLL2_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005858:	e017      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800585a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800585e:	3330      	adds	r3, #48	@ 0x30
 8005860:	4618      	mov	r0, r3
 8005862:	f004 fb0d 	bl	8009e80 <RCCEx_PLL3_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800586c:	e00d      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005874:	e009      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005876:	bf00      	nop
 8005878:	e007      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800587a:	bf00      	nop
 800587c:	e005      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800587e:	bf00      	nop
 8005880:	e003      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8005882:	bf00      	nop
 8005884:	44020c00 	.word	0x44020c00
        break;
 8005888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800588a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10d      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8005892:	4baf      	ldr	r3, [pc, #700]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005894:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005898:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800589c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a4:	4aaa      	ldr	r2, [pc, #680]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80058a6:	430b      	orrs	r3, r1
 80058a8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80058ac:	e003      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058c6:	2300      	movs	r3, #0
 80058c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058d0:	460b      	mov	r3, r1
 80058d2:	4313      	orrs	r3, r2
 80058d4:	d055      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80058d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058de:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80058e2:	d031      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80058e4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80058e8:	d82a      	bhi.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80058ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058ee:	d02d      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80058f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058f4:	d824      	bhi.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80058f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058fa:	d029      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80058fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005900:	d81e      	bhi.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005902:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005906:	d011      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005908:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800590c:	d818      	bhi.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d020      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005912:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005916:	d113      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005918:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800591c:	3308      	adds	r3, #8
 800591e:	4618      	mov	r0, r3
 8005920:	f004 fa16 	bl	8009d50 <RCCEx_PLL2_Config>
 8005924:	4603      	mov	r3, r0
 8005926:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800592a:	e014      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800592c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005930:	3330      	adds	r3, #48	@ 0x30
 8005932:	4618      	mov	r0, r3
 8005934:	f004 faa4 	bl	8009e80 <RCCEx_PLL3_Config>
 8005938:	4603      	mov	r3, r0
 800593a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800593e:	e00a      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005946:	e006      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005948:	bf00      	nop
 800594a:	e004      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800594c:	bf00      	nop
 800594e:	e002      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005950:	bf00      	nop
 8005952:	e000      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005956:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10d      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800595e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005964:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005968:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800596c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005970:	4a77      	ldr	r2, [pc, #476]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005972:	430b      	orrs	r3, r1
 8005974:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005978:	e003      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800597e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005982:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800598e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005992:	2300      	movs	r3, #0
 8005994:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005998:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800599c:	460b      	mov	r3, r1
 800599e:	4313      	orrs	r3, r2
 80059a0:	d03d      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80059a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059ae:	d01b      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80059b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059b4:	d814      	bhi.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80059b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ba:	d017      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80059bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059c0:	d80e      	bhi.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d014      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059ca:	d109      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059d0:	3330      	adds	r3, #48	@ 0x30
 80059d2:	4618      	mov	r0, r3
 80059d4:	f004 fa54 	bl	8009e80 <RCCEx_PLL3_Config>
 80059d8:	4603      	mov	r3, r0
 80059da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80059de:	e008      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80059e6:	e004      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80059e8:	bf00      	nop
 80059ea:	e002      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80059ec:	bf00      	nop
 80059ee:	e000      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80059f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10d      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80059fa:	4b55      	ldr	r3, [pc, #340]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80059fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a00:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005a04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0c:	4a50      	ldr	r2, [pc, #320]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a14:	e003      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a1a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a2a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a34:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d03d      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005a3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a46:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a4a:	d01b      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005a4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a50:	d814      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005a52:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a56:	d017      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005a58:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a5c:	d80e      	bhi.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d014      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005a62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a66:	d109      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a6c:	3330      	adds	r3, #48	@ 0x30
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f004 fa06 	bl	8009e80 <RCCEx_PLL3_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005a7a:	e008      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a82:	e004      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005a84:	bf00      	nop
 8005a86:	e002      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005a88:	bf00      	nop
 8005a8a:	e000      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10d      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005a96:	4b2e      	ldr	r3, [pc, #184]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005a98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a9c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aa8:	4a29      	ldr	r2, [pc, #164]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005ab0:	e003      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ab6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005aba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005aca:	2300      	movs	r3, #0
 8005acc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ad0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	d040      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005ada:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ae2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ae6:	d01b      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005ae8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005aec:	d814      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005aee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005af2:	d017      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005af4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005af8:	d80e      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d014      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b02:	d109      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b08:	3330      	adds	r3, #48	@ 0x30
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f004 f9b8 	bl	8009e80 <RCCEx_PLL3_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005b16:	e008      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b1e:	e004      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005b20:	bf00      	nop
 8005b22:	e002      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005b24:	bf00      	nop
 8005b26:	e000      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d110      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005b32:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b38:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b44:	4a02      	ldr	r2, [pc, #8]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b46:	430b      	orrs	r3, r1
 8005b48:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b4c:	e006      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005b4e:	bf00      	nop
 8005b50:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b54:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b58:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	2100      	movs	r1, #0
 8005b66:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8005b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	d03d      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005b88:	d01b      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005b8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005b8e:	d814      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005b90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b94:	d017      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005b96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b9a:	d80e      	bhi.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d014      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005ba0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ba4:	d109      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005baa:	3330      	adds	r3, #48	@ 0x30
 8005bac:	4618      	mov	r0, r3
 8005bae:	f004 f967 	bl	8009e80 <RCCEx_PLL3_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005bb8:	e008      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005bc0:	e004      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005bc2:	bf00      	nop
 8005bc4:	e002      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005bc6:	bf00      	nop
 8005bc8:	e000      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bcc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10d      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005bd4:	4bbe      	ldr	r3, [pc, #760]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005bd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005bda:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005be6:	4aba      	ldr	r2, [pc, #744]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005be8:	430b      	orrs	r3, r1
 8005bea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005bee:	e003      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bf4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005c04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c08:	2300      	movs	r3, #0
 8005c0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c12:	460b      	mov	r3, r1
 8005c14:	4313      	orrs	r3, r2
 8005c16:	d035      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c24:	d015      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005c26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c2a:	d80e      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d012      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005c30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c34:	d109      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c3a:	3330      	adds	r3, #48	@ 0x30
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f004 f91f 	bl	8009e80 <RCCEx_PLL3_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005c48:	e006      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c50:	e002      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005c52:	bf00      	nop
 8005c54:	e000      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10d      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005c60:	4b9b      	ldr	r3, [pc, #620]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005c62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c66:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005c6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c72:	4a97      	ldr	r2, [pc, #604]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005c74:	430b      	orrs	r3, r1
 8005c76:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c7a:	e003      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8005c92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005ca4:	4b8a      	ldr	r3, [pc, #552]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	4a89      	ldr	r2, [pc, #548]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005caa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005cae:	61d3      	str	r3, [r2, #28]
 8005cb0:	4b87      	ldr	r3, [pc, #540]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005cb2:	69d9      	ldr	r1, [r3, #28]
 8005cb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cb8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005cbc:	4a84      	ldr	r2, [pc, #528]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005cbe:	430b      	orrs	r3, r1
 8005cc0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005cce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005cd8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	d055      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ce6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cea:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005cee:	d031      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005cf0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005cf4:	d82a      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cfa:	d02d      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d00:	d824      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005d02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d06:	d029      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005d08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d0c:	d81e      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d12:	d011      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d18:	d818      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d020      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d22:	d113      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d28:	3308      	adds	r3, #8
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f004 f810 	bl	8009d50 <RCCEx_PLL2_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005d36:	e014      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d3c:	3330      	adds	r3, #48	@ 0x30
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f004 f89e 	bl	8009e80 <RCCEx_PLL3_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005d4a:	e00a      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d52:	e006      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005d54:	bf00      	nop
 8005d56:	e004      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005d58:	bf00      	nop
 8005d5a:	e002      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005d5c:	bf00      	nop
 8005d5e:	e000      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10d      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005d6a:	4b59      	ldr	r3, [pc, #356]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d6c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005d70:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005d74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d7c:	4a54      	ldr	r2, [pc, #336]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005d84:	e003      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d8a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005da4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4313      	orrs	r3, r2
 8005dac:	d055      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005db2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005db6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005dba:	d031      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005dbc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005dc0:	d82a      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005dc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dc6:	d02d      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005dc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dcc:	d824      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005dce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dd2:	d029      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005dd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005dd8:	d81e      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005dda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dde:	d011      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005de4:	d818      	bhi.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d020      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dee:	d113      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005df4:	3308      	adds	r3, #8
 8005df6:	4618      	mov	r0, r3
 8005df8:	f003 ffaa 	bl	8009d50 <RCCEx_PLL2_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005e02:	e014      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e08:	3330      	adds	r3, #48	@ 0x30
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f004 f838 	bl	8009e80 <RCCEx_PLL3_Config>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005e16:	e00a      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e1e:	e006      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005e20:	bf00      	nop
 8005e22:	e004      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005e24:	bf00      	nop
 8005e26:	e002      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005e28:	bf00      	nop
 8005e2a:	e000      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10d      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005e36:	4b26      	ldr	r3, [pc, #152]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005e38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005e3c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005e48:	4a21      	ldr	r2, [pc, #132]	@ (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005e4a:	430b      	orrs	r3, r1
 8005e4c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005e50:	e003      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e56:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005e5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	2100      	movs	r1, #0
 8005e64:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e74:	460b      	mov	r3, r1
 8005e76:	4313      	orrs	r3, r2
 8005e78:	d057      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005e82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e86:	d033      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e8c:	d82c      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005e8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e92:	d02f      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005e94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e98:	d826      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005e9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e9e:	d02b      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005ea0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ea4:	d820      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005ea6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eaa:	d013      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005eac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eb0:	d81a      	bhi.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d022      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8005eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eba:	d115      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f003 ff44 	bl	8009d50 <RCCEx_PLL2_Config>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005ece:	e016      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005ed0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ed8:	3330      	adds	r3, #48	@ 0x30
 8005eda:	4618      	mov	r0, r3
 8005edc:	f003 ffd0 	bl	8009e80 <RCCEx_PLL3_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005ee6:	e00a      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005eee:	e006      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005ef0:	bf00      	nop
 8005ef2:	e004      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005ef4:	bf00      	nop
 8005ef6:	e002      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005ef8:	bf00      	nop
 8005efa:	e000      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005efe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10d      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8005f06:	4bbb      	ldr	r3, [pc, #748]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005f08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005f0c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f18:	4ab6      	ldr	r2, [pc, #728]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005f20:	e003      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005f2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	2100      	movs	r1, #0
 8005f34:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8005f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4313      	orrs	r3, r2
 8005f48:	d055      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005f4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f52:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005f56:	d031      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005f58:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005f5c:	d82a      	bhi.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005f5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f62:	d02d      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005f64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f68:	d824      	bhi.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005f6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f6e:	d029      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005f70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005f74:	d81e      	bhi.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005f76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f7a:	d011      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005f7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f80:	d818      	bhi.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d020      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005f86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f8a:	d113      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f90:	3308      	adds	r3, #8
 8005f92:	4618      	mov	r0, r3
 8005f94:	f003 fedc 	bl	8009d50 <RCCEx_PLL2_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005f9e:	e014      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fa4:	3330      	adds	r3, #48	@ 0x30
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f003 ff6a 	bl	8009e80 <RCCEx_PLL3_Config>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005fb2:	e00a      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fba:	e006      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005fbc:	bf00      	nop
 8005fbe:	e004      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005fc0:	bf00      	nop
 8005fc2:	e002      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005fc4:	bf00      	nop
 8005fc6:	e000      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10d      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8005fd2:	4b88      	ldr	r3, [pc, #544]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005fd4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005fd8:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8005fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fe0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fe4:	4a83      	ldr	r2, [pc, #524]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005fec:	e003      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ff2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8005ff6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	2100      	movs	r1, #0
 8006000:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8006004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006008:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800600c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006010:	460b      	mov	r3, r1
 8006012:	4313      	orrs	r3, r2
 8006014:	d055      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8006016:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800601a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800601e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006022:	d031      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8006024:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006028:	d82a      	bhi.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800602a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800602e:	d02d      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8006030:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006034:	d824      	bhi.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006036:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800603a:	d029      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800603c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006040:	d81e      	bhi.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006042:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006046:	d011      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8006048:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800604c:	d818      	bhi.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d020      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8006052:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006056:	d113      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006058:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800605c:	3308      	adds	r3, #8
 800605e:	4618      	mov	r0, r3
 8006060:	f003 fe76 	bl	8009d50 <RCCEx_PLL2_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800606a:	e014      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800606c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006070:	3330      	adds	r3, #48	@ 0x30
 8006072:	4618      	mov	r0, r3
 8006074:	f003 ff04 	bl	8009e80 <RCCEx_PLL3_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800607e:	e00a      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006086:	e006      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006088:	bf00      	nop
 800608a:	e004      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800608c:	bf00      	nop
 800608e:	e002      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006090:	bf00      	nop
 8006092:	e000      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006096:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10d      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800609e:	4b55      	ldr	r3, [pc, #340]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80060a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80060a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80060a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060b0:	4a50      	ldr	r2, [pc, #320]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80060b2:	430b      	orrs	r3, r1
 80060b4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80060b8:	e003      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060be:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80060c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	2100      	movs	r1, #0
 80060cc:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80060d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060d8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80060dc:	460b      	mov	r3, r1
 80060de:	4313      	orrs	r3, r2
 80060e0:	d055      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80060e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80060ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ee:	d031      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80060f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060f4:	d82a      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80060f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fa:	d02d      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006100:	d824      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006102:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006106:	d029      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006108:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800610c:	d81e      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800610e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006112:	d011      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006118:	d818      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d020      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800611e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006122:	d113      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006124:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006128:	3308      	adds	r3, #8
 800612a:	4618      	mov	r0, r3
 800612c:	f003 fe10 	bl	8009d50 <RCCEx_PLL2_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006136:	e014      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006138:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800613c:	3330      	adds	r3, #48	@ 0x30
 800613e:	4618      	mov	r0, r3
 8006140:	f003 fe9e 	bl	8009e80 <RCCEx_PLL3_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800614a:	e00a      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006152:	e006      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006154:	bf00      	nop
 8006156:	e004      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006158:	bf00      	nop
 800615a:	e002      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800615c:	bf00      	nop
 800615e:	e000      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006162:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10d      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800616a:	4b22      	ldr	r3, [pc, #136]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800616c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006170:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006174:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006178:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800617c:	4a1d      	ldr	r2, [pc, #116]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800617e:	430b      	orrs	r3, r1
 8006180:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006184:	e003      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006186:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800618a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800618e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800619a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800619e:	2300      	movs	r3, #0
 80061a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80061a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80061a8:	460b      	mov	r3, r1
 80061aa:	4313      	orrs	r3, r2
 80061ac:	d055      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80061ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80061b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061ba:	d035      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80061bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061c0:	d82e      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80061c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061c6:	d031      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80061c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80061cc:	d828      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80061ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061d2:	d01b      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80061d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061d8:	d822      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80061de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e2:	d009      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80061e4:	e01c      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e6:	4b03      	ldr	r3, [pc, #12]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80061e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ea:	4a02      	ldr	r2, [pc, #8]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80061ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061f0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061f2:	e01c      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80061f4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061fc:	3308      	adds	r3, #8
 80061fe:	4618      	mov	r0, r3
 8006200:	f003 fda6 	bl	8009d50 <RCCEx_PLL2_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800620a:	e010      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800620c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006210:	3330      	adds	r3, #48	@ 0x30
 8006212:	4618      	mov	r0, r3
 8006214:	f003 fe34 	bl	8009e80 <RCCEx_PLL3_Config>
 8006218:	4603      	mov	r3, r0
 800621a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800621e:	e006      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006226:	e002      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006228:	bf00      	nop
 800622a:	e000      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800622c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800622e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10d      	bne.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006236:	4bc3      	ldr	r3, [pc, #780]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800623c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006240:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006244:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006248:	4abe      	ldr	r2, [pc, #760]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800624a:	430b      	orrs	r3, r1
 800624c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006250:	e003      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006252:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006256:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800625a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800625e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006262:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006266:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800626a:	2300      	movs	r3, #0
 800626c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006270:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006274:	460b      	mov	r3, r1
 8006276:	4313      	orrs	r3, r2
 8006278:	d051      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800627a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800627e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006282:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006286:	d033      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006288:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800628c:	d82c      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800628e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006292:	d02d      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006294:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006298:	d826      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800629a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800629e:	d019      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80062a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062a4:	d820      	bhi.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80062aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80062ae:	d007      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80062b0:	e01a      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b2:	4ba4      	ldr	r3, [pc, #656]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	4aa3      	ldr	r2, [pc, #652]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80062b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062bc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062be:	e018      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062c4:	3308      	adds	r3, #8
 80062c6:	4618      	mov	r0, r3
 80062c8:	f003 fd42 	bl	8009d50 <RCCEx_PLL2_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062d2:	e00e      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062d8:	3330      	adds	r3, #48	@ 0x30
 80062da:	4618      	mov	r0, r3
 80062dc:	f003 fdd0 	bl	8009e80 <RCCEx_PLL3_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062e6:	e004      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062ee:	e000      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80062f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10d      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80062fa:	4b92      	ldr	r3, [pc, #584]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80062fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006300:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8006304:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006308:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800630c:	4a8d      	ldr	r2, [pc, #564]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800630e:	430b      	orrs	r3, r1
 8006310:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006314:	e003      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006316:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800631a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800631e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800632a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800632c:	2300      	movs	r3, #0
 800632e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006330:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006334:	460b      	mov	r3, r1
 8006336:	4313      	orrs	r3, r2
 8006338:	d032      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800633a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800633e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006342:	2b05      	cmp	r3, #5
 8006344:	d80f      	bhi.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8006346:	2b03      	cmp	r3, #3
 8006348:	d211      	bcs.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800634a:	2b01      	cmp	r3, #1
 800634c:	d911      	bls.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800634e:	2b02      	cmp	r3, #2
 8006350:	d109      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006352:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006356:	3308      	adds	r3, #8
 8006358:	4618      	mov	r0, r3
 800635a:	f003 fcf9 	bl	8009d50 <RCCEx_PLL2_Config>
 800635e:	4603      	mov	r3, r0
 8006360:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006364:	e006      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800636c:	e002      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800636e:	bf00      	nop
 8006370:	e000      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006374:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006378:	2b00      	cmp	r3, #0
 800637a:	d10d      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800637c:	4b71      	ldr	r3, [pc, #452]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800637e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006382:	f023 0107 	bic.w	r1, r3, #7
 8006386:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800638a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800638e:	4a6d      	ldr	r2, [pc, #436]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006390:	430b      	orrs	r3, r1
 8006392:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006396:	e003      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006398:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800639c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80063a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	2100      	movs	r1, #0
 80063aa:	6739      	str	r1, [r7, #112]	@ 0x70
 80063ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063b0:	677b      	str	r3, [r7, #116]	@ 0x74
 80063b2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80063b6:	460b      	mov	r3, r1
 80063b8:	4313      	orrs	r3, r2
 80063ba:	d024      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80063bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d005      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063d2:	e002      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80063d4:	bf00      	nop
 80063d6:	e000      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80063d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10d      	bne.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80063e2:	4b58      	ldr	r3, [pc, #352]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063e8:	f023 0108 	bic.w	r1, r3, #8
 80063ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80063f4:	4a53      	ldr	r2, [pc, #332]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80063f6:	430b      	orrs	r3, r1
 80063f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80063fc:	e003      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006402:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006406:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006412:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006414:	2300      	movs	r3, #0
 8006416:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006418:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800641c:	460b      	mov	r3, r1
 800641e:	4313      	orrs	r3, r2
 8006420:	f000 80b9 	beq.w	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006424:	4b48      	ldr	r3, [pc, #288]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006428:	4a47      	ldr	r2, [pc, #284]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800642a:	f043 0301 	orr.w	r3, r3, #1
 800642e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006430:	f7fb fc04 	bl	8001c3c <HAL_GetTick>
 8006434:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006438:	e00b      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800643a:	f7fb fbff 	bl	8001c3c <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d903      	bls.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006450:	e005      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006452:	4b3d      	ldr	r3, [pc, #244]	@ (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0ed      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800645e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006462:	2b00      	cmp	r3, #0
 8006464:	f040 8093 	bne.w	800658e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006468:	4b36      	ldr	r3, [pc, #216]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800646a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800646e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006472:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006476:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d023      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800647e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006482:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8006486:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800648a:	4293      	cmp	r3, r2
 800648c:	d01b      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800648e:	4b2d      	ldr	r3, [pc, #180]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006498:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800649c:	4b29      	ldr	r3, [pc, #164]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800649e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064a2:	4a28      	ldr	r2, [pc, #160]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064ac:	4b25      	ldr	r3, [pc, #148]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064b2:	4a24      	ldr	r2, [pc, #144]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064bc:	4a21      	ldr	r2, [pc, #132]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064be:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80064c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d019      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d2:	f7fb fbb3 	bl	8001c3c <HAL_GetTick>
 80064d6:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064da:	e00d      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064dc:	f7fb fbae 	bl	8001c3c <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80064e6:	1ad2      	subs	r2, r2, r3
 80064e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d903      	bls.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80064f6:	e006      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064f8:	4b12      	ldr	r3, [pc, #72]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0ea      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006506:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800650a:	2b00      	cmp	r3, #0
 800650c:	d13a      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800650e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006512:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800651a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800651e:	d115      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006520:	4b08      	ldr	r3, [pc, #32]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800652c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006536:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800653a:	4a02      	ldr	r2, [pc, #8]	@ (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800653c:	430b      	orrs	r3, r1
 800653e:	61d3      	str	r3, [r2, #28]
 8006540:	e00a      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006542:	bf00      	nop
 8006544:	44020c00 	.word	0x44020c00
 8006548:	44020800 	.word	0x44020800
 800654c:	4b9f      	ldr	r3, [pc, #636]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	4a9e      	ldr	r2, [pc, #632]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006552:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006556:	61d3      	str	r3, [r2, #28]
 8006558:	4b9c      	ldr	r3, [pc, #624]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800655a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800655e:	4a9b      	ldr	r2, [pc, #620]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006564:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006568:	4b98      	ldr	r3, [pc, #608]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800656a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800656e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006572:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800657a:	4a94      	ldr	r2, [pc, #592]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800657c:	430b      	orrs	r3, r1
 800657e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006582:	e008      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006584:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006588:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800658c:	e003      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006592:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006596:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80065a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80065a4:	2300      	movs	r3, #0
 80065a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80065a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80065ac:	460b      	mov	r3, r1
 80065ae:	4313      	orrs	r3, r2
 80065b0:	d035      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80065b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80065ba:	2b30      	cmp	r3, #48	@ 0x30
 80065bc:	d014      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80065be:	2b30      	cmp	r3, #48	@ 0x30
 80065c0:	d80e      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d012      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d80a      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d010      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d106      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065d2:	4b7e      	ldr	r3, [pc, #504]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d6:	4a7d      	ldr	r2, [pc, #500]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065dc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80065de:	e008      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065e6:	e004      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80065e8:	bf00      	nop
 80065ea:	e002      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80065ec:	bf00      	nop
 80065ee:	e000      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80065f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10d      	bne.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80065fa:	4b74      	ldr	r3, [pc, #464]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80065fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006600:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006604:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006608:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800660c:	4a6f      	ldr	r2, [pc, #444]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800660e:	430b      	orrs	r3, r1
 8006610:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006614:	e003      	b.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006616:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800661a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800661e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800662a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800662c:	2300      	movs	r3, #0
 800662e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006630:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006634:	460b      	mov	r3, r1
 8006636:	4313      	orrs	r3, r2
 8006638:	d033      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800663a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800663e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006646:	2b40      	cmp	r3, #64	@ 0x40
 8006648:	d007      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800664a:	e010      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800664c:	4b5f      	ldr	r3, [pc, #380]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800664e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006650:	4a5e      	ldr	r2, [pc, #376]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006656:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006658:	e00d      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800665a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800665e:	3308      	adds	r3, #8
 8006660:	4618      	mov	r0, r3
 8006662:	f003 fb75 	bl	8009d50 <RCCEx_PLL2_Config>
 8006666:	4603      	mov	r3, r0
 8006668:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800666c:	e003      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006676:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10d      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800667e:	4b53      	ldr	r3, [pc, #332]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006680:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006684:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800668c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006690:	4a4e      	ldr	r2, [pc, #312]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006692:	430b      	orrs	r3, r1
 8006694:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006698:	e003      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800669e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80066a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066aa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80066b0:	2300      	movs	r3, #0
 80066b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80066b4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80066b8:	460b      	mov	r3, r1
 80066ba:	4313      	orrs	r3, r2
 80066bc:	d033      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80066be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066c2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80066ca:	2b80      	cmp	r3, #128	@ 0x80
 80066cc:	d007      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80066ce:	e010      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d0:	4b3e      	ldr	r3, [pc, #248]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d4:	4a3d      	ldr	r2, [pc, #244]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80066d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066da:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80066dc:	e00d      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066e2:	3308      	adds	r3, #8
 80066e4:	4618      	mov	r0, r3
 80066e6:	f003 fb33 	bl	8009d50 <RCCEx_PLL2_Config>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80066f0:	e003      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10d      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006702:	4b32      	ldr	r3, [pc, #200]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006704:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006708:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800670c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006710:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006714:	4a2d      	ldr	r2, [pc, #180]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006716:	430b      	orrs	r3, r1
 8006718:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800671c:	e003      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006722:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006726:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006732:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006734:	2300      	movs	r3, #0
 8006736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006738:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800673c:	460b      	mov	r3, r1
 800673e:	4313      	orrs	r3, r2
 8006740:	d04a      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006742:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800674a:	2b04      	cmp	r3, #4
 800674c:	d827      	bhi.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800674e:	a201      	add	r2, pc, #4	@ (adr r2, 8006754 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006754:	08006769 	.word	0x08006769
 8006758:	08006777 	.word	0x08006777
 800675c:	0800678b 	.word	0x0800678b
 8006760:	080067a7 	.word	0x080067a7
 8006764:	080067a7 	.word	0x080067a7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006768:	4b18      	ldr	r3, [pc, #96]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676c:	4a17      	ldr	r2, [pc, #92]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800676e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006772:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006774:	e018      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006776:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800677a:	3308      	adds	r3, #8
 800677c:	4618      	mov	r0, r3
 800677e:	f003 fae7 	bl	8009d50 <RCCEx_PLL2_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006788:	e00e      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800678a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800678e:	3330      	adds	r3, #48	@ 0x30
 8006790:	4618      	mov	r0, r3
 8006792:	f003 fb75 	bl	8009e80 <RCCEx_PLL3_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800679c:	e004      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80067a4:	e000      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80067a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10f      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80067b0:	4b06      	ldr	r3, [pc, #24]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067b6:	f023 0107 	bic.w	r1, r3, #7
 80067ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067c2:	4a02      	ldr	r2, [pc, #8]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067c4:	430b      	orrs	r3, r1
 80067c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80067ca:	e005      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80067cc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80067d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80067e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80067e6:	2300      	movs	r3, #0
 80067e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80067ee:	460b      	mov	r3, r1
 80067f0:	4313      	orrs	r3, r2
 80067f2:	f000 8081 	beq.w	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80067f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067fe:	2b20      	cmp	r3, #32
 8006800:	d85f      	bhi.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006802:	a201      	add	r2, pc, #4	@ (adr r2, 8006808 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	0800688d 	.word	0x0800688d
 800680c:	080068c3 	.word	0x080068c3
 8006810:	080068c3 	.word	0x080068c3
 8006814:	080068c3 	.word	0x080068c3
 8006818:	080068c3 	.word	0x080068c3
 800681c:	080068c3 	.word	0x080068c3
 8006820:	080068c3 	.word	0x080068c3
 8006824:	080068c3 	.word	0x080068c3
 8006828:	0800689b 	.word	0x0800689b
 800682c:	080068c3 	.word	0x080068c3
 8006830:	080068c3 	.word	0x080068c3
 8006834:	080068c3 	.word	0x080068c3
 8006838:	080068c3 	.word	0x080068c3
 800683c:	080068c3 	.word	0x080068c3
 8006840:	080068c3 	.word	0x080068c3
 8006844:	080068c3 	.word	0x080068c3
 8006848:	080068af 	.word	0x080068af
 800684c:	080068c3 	.word	0x080068c3
 8006850:	080068c3 	.word	0x080068c3
 8006854:	080068c3 	.word	0x080068c3
 8006858:	080068c3 	.word	0x080068c3
 800685c:	080068c3 	.word	0x080068c3
 8006860:	080068c3 	.word	0x080068c3
 8006864:	080068c3 	.word	0x080068c3
 8006868:	080068cb 	.word	0x080068cb
 800686c:	080068c3 	.word	0x080068c3
 8006870:	080068c3 	.word	0x080068c3
 8006874:	080068c3 	.word	0x080068c3
 8006878:	080068c3 	.word	0x080068c3
 800687c:	080068c3 	.word	0x080068c3
 8006880:	080068c3 	.word	0x080068c3
 8006884:	080068c3 	.word	0x080068c3
 8006888:	080068cb 	.word	0x080068cb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800688c:	4bab      	ldr	r3, [pc, #684]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800688e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006890:	4aaa      	ldr	r2, [pc, #680]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006896:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006898:	e018      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800689a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800689e:	3308      	adds	r3, #8
 80068a0:	4618      	mov	r0, r3
 80068a2:	f003 fa55 	bl	8009d50 <RCCEx_PLL2_Config>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80068ac:	e00e      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068b2:	3330      	adds	r3, #48	@ 0x30
 80068b4:	4618      	mov	r0, r3
 80068b6:	f003 fae3 	bl	8009e80 <RCCEx_PLL3_Config>
 80068ba:	4603      	mov	r3, r0
 80068bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80068c0:	e004      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068c8:	e000      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80068ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10d      	bne.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80068d4:	4b99      	ldr	r3, [pc, #612]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80068d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068da:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80068de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068e6:	4a95      	ldr	r2, [pc, #596]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80068e8:	430b      	orrs	r3, r1
 80068ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80068ee:	e003      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80068f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006900:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006904:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006906:	2300      	movs	r3, #0
 8006908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800690a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800690e:	460b      	mov	r3, r1
 8006910:	4313      	orrs	r3, r2
 8006912:	d04e      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006914:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800691c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006920:	d02e      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006926:	d827      	bhi.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006928:	2bc0      	cmp	r3, #192	@ 0xc0
 800692a:	d02b      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800692c:	2bc0      	cmp	r3, #192	@ 0xc0
 800692e:	d823      	bhi.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006930:	2b80      	cmp	r3, #128	@ 0x80
 8006932:	d017      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006934:	2b80      	cmp	r3, #128	@ 0x80
 8006936:	d81f      	bhi.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006938:	2b00      	cmp	r3, #0
 800693a:	d002      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800693c:	2b40      	cmp	r3, #64	@ 0x40
 800693e:	d007      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006940:	e01a      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006942:	4b7e      	ldr	r3, [pc, #504]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006946:	4a7d      	ldr	r2, [pc, #500]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800694c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800694e:	e01a      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006954:	3308      	adds	r3, #8
 8006956:	4618      	mov	r0, r3
 8006958:	f003 f9fa 	bl	8009d50 <RCCEx_PLL2_Config>
 800695c:	4603      	mov	r3, r0
 800695e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006962:	e010      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006968:	3330      	adds	r3, #48	@ 0x30
 800696a:	4618      	mov	r0, r3
 800696c:	f003 fa88 	bl	8009e80 <RCCEx_PLL3_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006976:	e006      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800697e:	e002      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006980:	bf00      	nop
 8006982:	e000      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006986:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10d      	bne.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800698e:	4b6b      	ldr	r3, [pc, #428]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006994:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800699c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069a0:	4a66      	ldr	r2, [pc, #408]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80069a2:	430b      	orrs	r3, r1
 80069a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80069a8:	e003      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80069b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80069be:	633b      	str	r3, [r7, #48]	@ 0x30
 80069c0:	2300      	movs	r3, #0
 80069c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80069c8:	460b      	mov	r3, r1
 80069ca:	4313      	orrs	r3, r2
 80069cc:	d055      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80069ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80069d6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80069da:	d031      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80069dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80069e0:	d82a      	bhi.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80069e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069e6:	d02d      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80069e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069ec:	d824      	bhi.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80069ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80069f2:	d029      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80069f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80069f8:	d81e      	bhi.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80069fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069fe:	d011      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a04:	d818      	bhi.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d020      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a0e:	d113      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a14:	3308      	adds	r3, #8
 8006a16:	4618      	mov	r0, r3
 8006a18:	f003 f99a 	bl	8009d50 <RCCEx_PLL2_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006a22:	e014      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a28:	3330      	adds	r3, #48	@ 0x30
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f003 fa28 	bl	8009e80 <RCCEx_PLL3_Config>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006a36:	e00a      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a3e:	e006      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006a40:	bf00      	nop
 8006a42:	e004      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006a44:	bf00      	nop
 8006a46:	e002      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006a48:	bf00      	nop
 8006a4a:	e000      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10d      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006a56:	4b39      	ldr	r3, [pc, #228]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a5c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a64:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006a68:	4a34      	ldr	r2, [pc, #208]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006a70:	e003      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a82:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a88:	2300      	movs	r3, #0
 8006a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006a90:	460b      	mov	r3, r1
 8006a92:	4313      	orrs	r3, r2
 8006a94:	d058      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8006a96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a9e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006aa2:	d031      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8006aa4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006aa8:	d82a      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006aaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006aae:	d02d      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006ab0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ab4:	d824      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006ab6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006aba:	d029      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006abc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ac0:	d81e      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ac6:	d011      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006acc:	d818      	bhi.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d020      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8006ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad6:	d113      	bne.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006adc:	3308      	adds	r3, #8
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f003 f936 	bl	8009d50 <RCCEx_PLL2_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006aea:	e014      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006af0:	3330      	adds	r3, #48	@ 0x30
 8006af2:	4618      	mov	r0, r3
 8006af4:	f003 f9c4 	bl	8009e80 <RCCEx_PLL3_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006afe:	e00a      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b06:	e006      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006b08:	bf00      	nop
 8006b0a:	e004      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006b0c:	bf00      	nop
 8006b0e:	e002      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006b10:	bf00      	nop
 8006b12:	e000      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d110      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006b1e:	4b07      	ldr	r3, [pc, #28]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b24:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b30:	4902      	ldr	r1, [pc, #8]	@ (8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006b38:	e006      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006b3a:	bf00      	nop
 8006b3c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b44:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	2100      	movs	r1, #0
 8006b52:	6239      	str	r1, [r7, #32]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b5a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4313      	orrs	r3, r2
 8006b62:	d055      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b6c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006b70:	d031      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8006b72:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006b76:	d82a      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006b78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b7c:	d02d      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006b7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b82:	d824      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006b84:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006b88:	d029      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006b8a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006b8e:	d81e      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b94:	d011      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8006b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b9a:	d818      	bhi.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d020      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ba4:	d113      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ba6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006baa:	3308      	adds	r3, #8
 8006bac:	4618      	mov	r0, r3
 8006bae:	f003 f8cf 	bl	8009d50 <RCCEx_PLL2_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006bb8:	e014      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bbe:	3330      	adds	r3, #48	@ 0x30
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f003 f95d 	bl	8009e80 <RCCEx_PLL3_Config>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006bcc:	e00a      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006bd4:	e006      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006bd6:	bf00      	nop
 8006bd8:	e004      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006bda:	bf00      	nop
 8006bdc:	e002      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006bde:	bf00      	nop
 8006be0:	e000      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006be4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10d      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006bec:	4b88      	ldr	r3, [pc, #544]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bf2:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8006bf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bfe:	4984      	ldr	r1, [pc, #528]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006c06:	e003      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	2100      	movs	r1, #0
 8006c1a:	61b9      	str	r1, [r7, #24]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c26:	460b      	mov	r3, r1
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	d03d      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d81c      	bhi.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006c38:	a201      	add	r2, pc, #4	@ (adr r2, 8006c40 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c7b 	.word	0x08006c7b
 8006c44:	08006c51 	.word	0x08006c51
 8006c48:	08006c5f 	.word	0x08006c5f
 8006c4c:	08006c7b 	.word	0x08006c7b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c50:	4b6f      	ldr	r3, [pc, #444]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	4a6e      	ldr	r2, [pc, #440]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c5a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006c5c:	e00e      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c62:	3308      	adds	r3, #8
 8006c64:	4618      	mov	r0, r3
 8006c66:	f003 f873 	bl	8009d50 <RCCEx_PLL2_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006c70:	e004      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c78:	e000      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10d      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006c84:	4b62      	ldr	r3, [pc, #392]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c8a:	f023 0203 	bic.w	r2, r3, #3
 8006c8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c92:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006c96:	495e      	ldr	r1, [pc, #376]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006c9e:	e003      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ca4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ca8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	6139      	str	r1, [r7, #16]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	d03a      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cc8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd0:	d00e      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006cd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd6:	d815      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d017      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ce0:	d110      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce6:	4a4a      	ldr	r2, [pc, #296]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006cee:	e00e      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f003 f82a 	bl	8009d50 <RCCEx_PLL2_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006d02:	e004      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d0a:	e000      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10d      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006d16:	4b3e      	ldr	r3, [pc, #248]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d28:	4939      	ldr	r1, [pc, #228]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006d30:	e003      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d36:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	2100      	movs	r1, #0
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	f003 0310 	and.w	r3, r3, #16
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d50:	460b      	mov	r3, r1
 8006d52:	4313      	orrs	r3, r2
 8006d54:	d038      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d5a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006d5e:	2b30      	cmp	r3, #48	@ 0x30
 8006d60:	d01b      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8006d62:	2b30      	cmp	r3, #48	@ 0x30
 8006d64:	d815      	bhi.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8006d66:	2b10      	cmp	r3, #16
 8006d68:	d002      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	d007      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006d6e:	e010      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d70:	4b27      	ldr	r3, [pc, #156]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d74:	4a26      	ldr	r2, [pc, #152]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d7a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006d7c:	e00e      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d82:	3330      	adds	r3, #48	@ 0x30
 8006d84:	4618      	mov	r0, r3
 8006d86:	f003 f87b 	bl	8009e80 <RCCEx_PLL3_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006d90:	e004      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d98:	e000      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10d      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006da4:	4b1a      	ldr	r3, [pc, #104]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006da6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006daa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006dae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006db2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006db6:	4916      	ldr	r1, [pc, #88]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006dbe:	e003      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dc4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	6039      	str	r1, [r7, #0]
 8006dd4:	f003 0308 	and.w	r3, r3, #8
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006dde:	460b      	mov	r3, r1
 8006de0:	4313      	orrs	r3, r2
 8006de2:	d00c      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006de4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006df2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006df6:	4906      	ldr	r1, [pc, #24]	@ (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8006dfe:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e0e:	bf00      	nop
 8006e10:	44020c00 	.word	0x44020c00

08006e14 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b08b      	sub	sp, #44	@ 0x2c
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006e1c:	4bae      	ldr	r3, [pc, #696]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e24:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006e26:	4bac      	ldr	r3, [pc, #688]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006e30:	4ba9      	ldr	r3, [pc, #676]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e34:	0a1b      	lsrs	r3, r3, #8
 8006e36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e3a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006e3c:	4ba6      	ldr	r3, [pc, #664]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	091b      	lsrs	r3, r3, #4
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e48:	4ba3      	ldr	r3, [pc, #652]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4c:	08db      	lsrs	r3, r3, #3
 8006e4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	fb02 f303 	mul.w	r3, r2, r3
 8006e58:	ee07 3a90 	vmov	s15, r3
 8006e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e60:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 8126 	beq.w	80070b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d053      	beq.n	8006f1a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d86f      	bhi.n	8006f58 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d003      	beq.n	8006e86 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d02b      	beq.n	8006edc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006e84:	e068      	b.n	8006f58 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e86:	4b94      	ldr	r3, [pc, #592]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	08db      	lsrs	r3, r3, #3
 8006e8c:	f003 0303 	and.w	r3, r3, #3
 8006e90:	4a92      	ldr	r2, [pc, #584]	@ (80070dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006e92:	fa22 f303 	lsr.w	r3, r2, r3
 8006e96:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	ee07 3a90 	vmov	s15, r3
 8006ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eba:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ebe:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80070e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006eda:	e068      	b.n	8006fae <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80070e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	ee07 3a90 	vmov	s15, r3
 8006ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef8:	ed97 6a04 	vldr	s12, [r7, #16]
 8006efc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006f00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f14:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006f18:	e049      	b.n	8006fae <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f24:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80070e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8006f28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f36:	ed97 6a04 	vldr	s12, [r7, #16]
 8006f3a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80070e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f52:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006f56:	e02a      	b.n	8006fae <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f58:	4b5f      	ldr	r3, [pc, #380]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	08db      	lsrs	r3, r3, #3
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	4a5e      	ldr	r2, [pc, #376]	@ (80070dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
 8006f68:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	ee07 3a90 	vmov	s15, r3
 8006f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	ee07 3a90 	vmov	s15, r3
 8006f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f8c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006f90:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80070e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006fac:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fae:	4b4a      	ldr	r3, [pc, #296]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fba:	d121      	bne.n	8007000 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006fbc:	4b46      	ldr	r3, [pc, #280]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d017      	beq.n	8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fc8:	4b43      	ldr	r3, [pc, #268]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fcc:	0a5b      	lsrs	r3, r3, #9
 8006fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006fda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fde:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006fe2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fee:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	e006      	b.n	8007006 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	e002      	b.n	8007006 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007006:	4b34      	ldr	r3, [pc, #208]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800700e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007012:	d121      	bne.n	8007058 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007014:	4b30      	ldr	r3, [pc, #192]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d017      	beq.n	8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007020:	4b2d      	ldr	r3, [pc, #180]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800702a:	ee07 3a90 	vmov	s15, r3
 800702e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007032:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007036:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800703a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800703e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007046:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	605a      	str	r2, [r3, #4]
 800704e:	e006      	b.n	800705e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	605a      	str	r2, [r3, #4]
 8007056:	e002      	b.n	800705e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800705e:	4b1e      	ldr	r3, [pc, #120]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007066:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800706a:	d121      	bne.n	80070b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800706c:	4b1a      	ldr	r3, [pc, #104]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800706e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007070:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d017      	beq.n	80070a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007078:	4b17      	ldr	r3, [pc, #92]	@ (80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800707a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800707c:	0e1b      	lsrs	r3, r3, #24
 800707e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800708a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800708e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007092:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800709a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800709e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80070a6:	e010      	b.n	80070ca <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	609a      	str	r2, [r3, #8]
}
 80070ae:	e00c      	b.n	80070ca <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	609a      	str	r2, [r3, #8]
}
 80070b6:	e008      	b.n	80070ca <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	609a      	str	r2, [r3, #8]
}
 80070ca:	bf00      	nop
 80070cc:	372c      	adds	r7, #44	@ 0x2c
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	44020c00 	.word	0x44020c00
 80070dc:	03d09000 	.word	0x03d09000
 80070e0:	46000000 	.word	0x46000000
 80070e4:	4a742400 	.word	0x4a742400
 80070e8:	4af42400 	.word	0x4af42400

080070ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b08b      	sub	sp, #44	@ 0x2c
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80070f4:	4bae      	ldr	r3, [pc, #696]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80070f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80070fe:	4bac      	ldr	r3, [pc, #688]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007108:	4ba9      	ldr	r3, [pc, #676]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800710a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710c:	0a1b      	lsrs	r3, r3, #8
 800710e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007112:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007114:	4ba6      	ldr	r3, [pc, #664]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007118:	091b      	lsrs	r3, r3, #4
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007120:	4ba3      	ldr	r3, [pc, #652]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007124:	08db      	lsrs	r3, r3, #3
 8007126:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	fb02 f303 	mul.w	r3, r2, r3
 8007130:	ee07 3a90 	vmov	s15, r3
 8007134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007138:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 8126 	beq.w	8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b03      	cmp	r3, #3
 8007148:	d053      	beq.n	80071f2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	2b03      	cmp	r3, #3
 800714e:	d86f      	bhi.n	8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d003      	beq.n	800715e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	2b02      	cmp	r3, #2
 800715a:	d02b      	beq.n	80071b4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800715c:	e068      	b.n	8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800715e:	4b94      	ldr	r3, [pc, #592]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	08db      	lsrs	r3, r3, #3
 8007164:	f003 0303 	and.w	r3, r3, #3
 8007168:	4a92      	ldr	r2, [pc, #584]	@ (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800716a:	fa22 f303 	lsr.w	r3, r2, r3
 800716e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	ee07 3a90 	vmov	s15, r3
 8007176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007192:	ed97 6a04 	vldr	s12, [r7, #16]
 8007196:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800719a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80071b2:	e068      	b.n	8007286 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80073bc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80071c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80071d4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80071d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80071f0:	e049      	b.n	8007286 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	ee07 3a90 	vmov	s15, r3
 80071f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80073c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8007200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007212:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800722e:	e02a      	b.n	8007286 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007230:	4b5f      	ldr	r3, [pc, #380]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	08db      	lsrs	r3, r3, #3
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	4a5e      	ldr	r2, [pc, #376]	@ (80073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800723c:	fa22 f303 	lsr.w	r3, r2, r3
 8007240:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	ee07 3a90 	vmov	s15, r3
 8007248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	ee07 3a90 	vmov	s15, r3
 8007260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007264:	ed97 6a04 	vldr	s12, [r7, #16]
 8007268:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800726c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007274:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007280:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007284:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007286:	4b4a      	ldr	r3, [pc, #296]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800728e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007292:	d121      	bne.n	80072d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007294:	4b46      	ldr	r3, [pc, #280]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d017      	beq.n	80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072a0:	4b43      	ldr	r3, [pc, #268]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80072a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a4:	0a5b      	lsrs	r3, r3, #9
 80072a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80072b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072b6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80072ba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80072be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	e006      	b.n	80072de <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	e002      	b.n	80072de <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072de:	4b34      	ldr	r3, [pc, #208]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072ea:	d121      	bne.n	8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80072ec:	4b30      	ldr	r3, [pc, #192]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80072ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d017      	beq.n	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072f8:	4b2d      	ldr	r3, [pc, #180]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80072fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072fc:	0c1b      	lsrs	r3, r3, #16
 80072fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800730a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800730e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007312:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800731a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800731e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	605a      	str	r2, [r3, #4]
 8007326:	e006      	b.n	8007336 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	605a      	str	r2, [r3, #4]
 800732e:	e002      	b.n	8007336 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007336:	4b1e      	ldr	r3, [pc, #120]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800733e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007342:	d121      	bne.n	8007388 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007344:	4b1a      	ldr	r3, [pc, #104]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007348:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d017      	beq.n	8007380 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007350:	4b17      	ldr	r3, [pc, #92]	@ (80073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007354:	0e1b      	lsrs	r3, r3, #24
 8007356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007362:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007366:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800736a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800736e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007376:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800737e:	e010      	b.n	80073a2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	609a      	str	r2, [r3, #8]
}
 8007386:	e00c      	b.n	80073a2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	609a      	str	r2, [r3, #8]
}
 800738e:	e008      	b.n	80073a2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	609a      	str	r2, [r3, #8]
}
 80073a2:	bf00      	nop
 80073a4:	372c      	adds	r7, #44	@ 0x2c
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	44020c00 	.word	0x44020c00
 80073b4:	03d09000 	.word	0x03d09000
 80073b8:	46000000 	.word	0x46000000
 80073bc:	4a742400 	.word	0x4a742400
 80073c0:	4af42400 	.word	0x4af42400

080073c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b08b      	sub	sp, #44	@ 0x2c
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80073cc:	4bae      	ldr	r3, [pc, #696]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80073ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80073d6:	4bac      	ldr	r3, [pc, #688]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80073d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80073e0:	4ba9      	ldr	r3, [pc, #676]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80073e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e4:	0a1b      	lsrs	r3, r3, #8
 80073e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073ea:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80073ec:	4ba6      	ldr	r3, [pc, #664]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80073ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f0:	091b      	lsrs	r3, r3, #4
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80073f8:	4ba3      	ldr	r3, [pc, #652]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80073fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073fc:	08db      	lsrs	r3, r3, #3
 80073fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	fb02 f303 	mul.w	r3, r2, r3
 8007408:	ee07 3a90 	vmov	s15, r3
 800740c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007410:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 8126 	beq.w	8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	2b03      	cmp	r3, #3
 8007420:	d053      	beq.n	80074ca <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	2b03      	cmp	r3, #3
 8007426:	d86f      	bhi.n	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d003      	beq.n	8007436 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d02b      	beq.n	800748c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007434:	e068      	b.n	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007436:	4b94      	ldr	r3, [pc, #592]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	08db      	lsrs	r3, r3, #3
 800743c:	f003 0303 	and.w	r3, r3, #3
 8007440:	4a92      	ldr	r2, [pc, #584]	@ (800768c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007442:	fa22 f303 	lsr.w	r3, r2, r3
 8007446:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	ee07 3a90 	vmov	s15, r3
 8007458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746a:	ed97 6a04 	vldr	s12, [r7, #16]
 800746e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800747e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007486:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800748a:	e068      	b.n	800755e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007496:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007694 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800749a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	ee07 3a90 	vmov	s15, r3
 80074a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a8:	ed97 6a04 	vldr	s12, [r7, #16]
 80074ac:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80074b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80074c8:	e049      	b.n	800755e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	ee07 3a90 	vmov	s15, r3
 80074d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80074d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e6:	ed97 6a04 	vldr	s12, [r7, #16]
 80074ea:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80074ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007502:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007506:	e02a      	b.n	800755e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007508:	4b5f      	ldr	r3, [pc, #380]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	08db      	lsrs	r3, r3, #3
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	4a5e      	ldr	r2, [pc, #376]	@ (800768c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007514:	fa22 f303 	lsr.w	r3, r2, r3
 8007518:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	ee07 3a90 	vmov	s15, r3
 8007520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	ee07 3a90 	vmov	s15, r3
 8007538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800753c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007540:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007544:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800754c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007558:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800755c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800755e:	4b4a      	ldr	r3, [pc, #296]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800756a:	d121      	bne.n	80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800756c:	4b46      	ldr	r3, [pc, #280]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800756e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d017      	beq.n	80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007578:	4b43      	ldr	r3, [pc, #268]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800757a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800757c:	0a5b      	lsrs	r3, r3, #9
 800757e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800758a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800758e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007592:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800759a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800759e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e006      	b.n	80075b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80075b6:	4b34      	ldr	r3, [pc, #208]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075c2:	d121      	bne.n	8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80075c4:	4b30      	ldr	r3, [pc, #192]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80075c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d017      	beq.n	8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80075d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d4:	0c1b      	lsrs	r3, r3, #16
 80075d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80075e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075e6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80075ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80075ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	605a      	str	r2, [r3, #4]
 80075fe:	e006      	b.n	800760e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	605a      	str	r2, [r3, #4]
 8007606:	e002      	b.n	800760e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800760e:	4b1e      	ldr	r3, [pc, #120]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800761a:	d121      	bne.n	8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800761c:	4b1a      	ldr	r3, [pc, #104]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800761e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007620:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d017      	beq.n	8007658 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007628:	4b17      	ldr	r3, [pc, #92]	@ (8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800762a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762c:	0e1b      	lsrs	r3, r3, #24
 800762e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800763a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800763e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007642:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800764a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007656:	e010      	b.n	800767a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	609a      	str	r2, [r3, #8]
}
 800765e:	e00c      	b.n	800767a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	609a      	str	r2, [r3, #8]
}
 8007666:	e008      	b.n	800767a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	609a      	str	r2, [r3, #8]
}
 800767a:	bf00      	nop
 800767c:	372c      	adds	r7, #44	@ 0x2c
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	44020c00 	.word	0x44020c00
 800768c:	03d09000 	.word	0x03d09000
 8007690:	46000000 	.word	0x46000000
 8007694:	4a742400 	.word	0x4a742400
 8007698:	4af42400 	.word	0x4af42400

0800769c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800769c:	b590      	push	{r4, r7, lr}
 800769e:	b08f      	sub	sp, #60	@ 0x3c
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80076a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076aa:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80076ae:	4321      	orrs	r1, r4
 80076b0:	d150      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80076b2:	4b26      	ldr	r3, [pc, #152]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076bc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80076be:	4b23      	ldr	r3, [pc, #140]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d108      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80076cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076d2:	d104      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80076d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076da:	f002 bb2a 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80076de:	4b1b      	ldr	r3, [pc, #108]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076ec:	d108      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076f4:	d104      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80076f6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80076fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80076fc:	f002 bb19 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007700:	4b12      	ldr	r3, [pc, #72]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007708:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800770c:	d119      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800770e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007710:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007714:	d115      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007716:	4b0d      	ldr	r3, [pc, #52]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800771e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007722:	d30a      	bcc.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007724:	4b09      	ldr	r3, [pc, #36]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	0a1b      	lsrs	r3, r3, #8
 800772a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800772e:	4a08      	ldr	r2, [pc, #32]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007730:	fbb2 f3f3 	udiv	r3, r2, r3
 8007734:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007736:	f002 bafc 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800773e:	f002 baf8 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	637b      	str	r3, [r7, #52]	@ 0x34
 8007746:	f002 baf4 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800774a:	bf00      	nop
 800774c:	44020c00 	.word	0x44020c00
 8007750:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007758:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800775c:	ea50 0104 	orrs.w	r1, r0, r4
 8007760:	f001 8275 	beq.w	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8007764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007768:	2801      	cmp	r0, #1
 800776a:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800776e:	f082 82dd 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007776:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800777a:	ea50 0104 	orrs.w	r1, r0, r4
 800777e:	f001 816c 	beq.w	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8007782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007786:	2801      	cmp	r0, #1
 8007788:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800778c:	f082 82ce 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007794:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8007798:	ea50 0104 	orrs.w	r1, r0, r4
 800779c:	f001 8602 	beq.w	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80077a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077a4:	2801      	cmp	r0, #1
 80077a6:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80077aa:	f082 82bf 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077b2:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80077b6:	ea50 0104 	orrs.w	r1, r0, r4
 80077ba:	f001 854c 	beq.w	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80077be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077c2:	2801      	cmp	r0, #1
 80077c4:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80077c8:	f082 82b0 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077d0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80077d4:	ea50 0104 	orrs.w	r1, r0, r4
 80077d8:	f001 849e 	beq.w	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80077dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077e0:	2801      	cmp	r0, #1
 80077e2:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80077e6:	f082 82a1 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077ee:	f1a1 0420 	sub.w	r4, r1, #32
 80077f2:	ea50 0104 	orrs.w	r1, r0, r4
 80077f6:	f001 83e8 	beq.w	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80077fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077fe:	2801      	cmp	r0, #1
 8007800:	f171 0120 	sbcs.w	r1, r1, #32
 8007804:	f082 8292 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800780c:	f1a1 0410 	sub.w	r4, r1, #16
 8007810:	ea50 0104 	orrs.w	r1, r0, r4
 8007814:	f002 8256 	beq.w	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800781c:	2801      	cmp	r0, #1
 800781e:	f171 0110 	sbcs.w	r1, r1, #16
 8007822:	f082 8283 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800782a:	f1a1 0408 	sub.w	r4, r1, #8
 800782e:	ea50 0104 	orrs.w	r1, r0, r4
 8007832:	f002 81cc 	beq.w	8009bce <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8007836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800783a:	2801      	cmp	r0, #1
 800783c:	f171 0108 	sbcs.w	r1, r1, #8
 8007840:	f082 8274 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007844:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007848:	1f0c      	subs	r4, r1, #4
 800784a:	ea50 0104 	orrs.w	r1, r0, r4
 800784e:	f001 8648 	beq.w	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007856:	2801      	cmp	r0, #1
 8007858:	f171 0104 	sbcs.w	r1, r1, #4
 800785c:	f082 8266 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007860:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007864:	1e8c      	subs	r4, r1, #2
 8007866:	ea50 0104 	orrs.w	r1, r0, r4
 800786a:	f002 8143 	beq.w	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800786e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007872:	2801      	cmp	r0, #1
 8007874:	f171 0102 	sbcs.w	r1, r1, #2
 8007878:	f082 8258 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800787c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007880:	1e4c      	subs	r4, r1, #1
 8007882:	ea50 0104 	orrs.w	r1, r0, r4
 8007886:	f002 80ce 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800788a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800788e:	2801      	cmp	r0, #1
 8007890:	f171 0101 	sbcs.w	r1, r1, #1
 8007894:	f082 824a 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800789c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80078a0:	4321      	orrs	r1, r4
 80078a2:	f002 8059 	beq.w	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80078a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078aa:	4cd9      	ldr	r4, [pc, #868]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80078ac:	42a0      	cmp	r0, r4
 80078ae:	f171 0100 	sbcs.w	r1, r1, #0
 80078b2:	f082 823b 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078ba:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80078be:	4321      	orrs	r1, r4
 80078c0:	f001 87d9 	beq.w	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80078c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078c8:	4cd2      	ldr	r4, [pc, #840]	@ (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80078ca:	42a0      	cmp	r0, r4
 80078cc:	f171 0100 	sbcs.w	r1, r1, #0
 80078d0:	f082 822c 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078d8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80078dc:	4321      	orrs	r1, r4
 80078de:	f001 8751 	beq.w	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80078e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078e6:	4ccc      	ldr	r4, [pc, #816]	@ (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80078e8:	42a0      	cmp	r0, r4
 80078ea:	f171 0100 	sbcs.w	r1, r1, #0
 80078ee:	f082 821d 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078f6:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80078fa:	4321      	orrs	r1, r4
 80078fc:	f001 869a 	beq.w	8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007900:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007904:	4cc5      	ldr	r4, [pc, #788]	@ (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007906:	42a0      	cmp	r0, r4
 8007908:	f171 0100 	sbcs.w	r1, r1, #0
 800790c:	f082 820e 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007914:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007918:	4321      	orrs	r1, r4
 800791a:	f001 8612 	beq.w	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800791e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007922:	4cbf      	ldr	r4, [pc, #764]	@ (8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007924:	42a0      	cmp	r0, r4
 8007926:	f171 0100 	sbcs.w	r1, r1, #0
 800792a:	f082 81ff 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800792e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007932:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007936:	4321      	orrs	r1, r4
 8007938:	f002 817e 	beq.w	8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800793c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007940:	4cb8      	ldr	r4, [pc, #736]	@ (8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007942:	42a0      	cmp	r0, r4
 8007944:	f171 0100 	sbcs.w	r1, r1, #0
 8007948:	f082 81f0 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800794c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007950:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007954:	4321      	orrs	r1, r4
 8007956:	f000 829e 	beq.w	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800795a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800795e:	4cb2      	ldr	r4, [pc, #712]	@ (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007960:	42a0      	cmp	r0, r4
 8007962:	f171 0100 	sbcs.w	r1, r1, #0
 8007966:	f082 81e1 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800796a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800796e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007972:	4321      	orrs	r1, r4
 8007974:	f000 826d 	beq.w	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800797c:	4cab      	ldr	r4, [pc, #684]	@ (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800797e:	42a0      	cmp	r0, r4
 8007980:	f171 0100 	sbcs.w	r1, r1, #0
 8007984:	f082 81d2 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800798c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007990:	4321      	orrs	r1, r4
 8007992:	f001 800d 	beq.w	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8007996:	e9d7 0100 	ldrd	r0, r1, [r7]
 800799a:	4ca5      	ldr	r4, [pc, #660]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800799c:	42a0      	cmp	r0, r4
 800799e:	f171 0100 	sbcs.w	r1, r1, #0
 80079a2:	f082 81c3 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079aa:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80079ae:	4321      	orrs	r1, r4
 80079b0:	f000 81d0 	beq.w	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80079b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079b8:	4c9e      	ldr	r4, [pc, #632]	@ (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80079ba:	42a0      	cmp	r0, r4
 80079bc:	f171 0100 	sbcs.w	r1, r1, #0
 80079c0:	f082 81b4 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079c8:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80079cc:	4321      	orrs	r1, r4
 80079ce:	f000 8142 	beq.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80079d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079d6:	4c98      	ldr	r4, [pc, #608]	@ (8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80079d8:	42a0      	cmp	r0, r4
 80079da:	f171 0100 	sbcs.w	r1, r1, #0
 80079de:	f082 81a5 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079e6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80079ea:	4321      	orrs	r1, r4
 80079ec:	f001 824e 	beq.w	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80079f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079f4:	4c91      	ldr	r4, [pc, #580]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80079f6:	42a0      	cmp	r0, r4
 80079f8:	f171 0100 	sbcs.w	r1, r1, #0
 80079fc:	f082 8196 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a04:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007a08:	4321      	orrs	r1, r4
 8007a0a:	f001 8197 	beq.w	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007a0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a12:	4c8b      	ldr	r4, [pc, #556]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007a14:	42a0      	cmp	r0, r4
 8007a16:	f171 0100 	sbcs.w	r1, r1, #0
 8007a1a:	f082 8187 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a22:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8007a26:	4321      	orrs	r1, r4
 8007a28:	f001 8154 	beq.w	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007a2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a30:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007a34:	f171 0100 	sbcs.w	r1, r1, #0
 8007a38:	f082 8178 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a40:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007a44:	4321      	orrs	r1, r4
 8007a46:	f001 80b7 	beq.w	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a4e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007a52:	42a0      	cmp	r0, r4
 8007a54:	f171 0100 	sbcs.w	r1, r1, #0
 8007a58:	f082 8168 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a60:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007a64:	4321      	orrs	r1, r4
 8007a66:	f001 8064 	beq.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a6e:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007a72:	42a0      	cmp	r0, r4
 8007a74:	f171 0100 	sbcs.w	r1, r1, #0
 8007a78:	f082 8158 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a80:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8007a84:	4321      	orrs	r1, r4
 8007a86:	f001 8011 	beq.w	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007a8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a8e:	f242 0401 	movw	r4, #8193	@ 0x2001
 8007a92:	42a0      	cmp	r0, r4
 8007a94:	f171 0100 	sbcs.w	r1, r1, #0
 8007a98:	f082 8148 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aa0:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8007aa4:	4321      	orrs	r1, r4
 8007aa6:	f000 871e 	beq.w	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007aaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aae:	f241 0401 	movw	r4, #4097	@ 0x1001
 8007ab2:	42a0      	cmp	r0, r4
 8007ab4:	f171 0100 	sbcs.w	r1, r1, #0
 8007ab8:	f082 8138 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007abc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ac0:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8007ac4:	4321      	orrs	r1, r4
 8007ac6:	f000 86a8 	beq.w	800881a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007aca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ace:	f640 0401 	movw	r4, #2049	@ 0x801
 8007ad2:	42a0      	cmp	r0, r4
 8007ad4:	f171 0100 	sbcs.w	r1, r1, #0
 8007ad8:	f082 8128 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007adc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ae0:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8007ae4:	4321      	orrs	r1, r4
 8007ae6:	f000 8632 	beq.w	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007aea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aee:	f240 4401 	movw	r4, #1025	@ 0x401
 8007af2:	42a0      	cmp	r0, r4
 8007af4:	f171 0100 	sbcs.w	r1, r1, #0
 8007af8:	f082 8118 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b00:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8007b04:	4321      	orrs	r1, r4
 8007b06:	f000 85b0 	beq.w	800866a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007b0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b0e:	f240 2401 	movw	r4, #513	@ 0x201
 8007b12:	42a0      	cmp	r0, r4
 8007b14:	f171 0100 	sbcs.w	r1, r1, #0
 8007b18:	f082 8108 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b20:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8007b24:	4321      	orrs	r1, r4
 8007b26:	f000 8535 	beq.w	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007b2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b2e:	f240 1401 	movw	r4, #257	@ 0x101
 8007b32:	42a0      	cmp	r0, r4
 8007b34:	f171 0100 	sbcs.w	r1, r1, #0
 8007b38:	f082 80f8 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b40:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8007b44:	4321      	orrs	r1, r4
 8007b46:	f000 84ba 	beq.w	80084be <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b4e:	2881      	cmp	r0, #129	@ 0x81
 8007b50:	f171 0100 	sbcs.w	r1, r1, #0
 8007b54:	f082 80ea 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b5c:	2821      	cmp	r0, #33	@ 0x21
 8007b5e:	f171 0100 	sbcs.w	r1, r1, #0
 8007b62:	d26f      	bcs.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007b64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b68:	4301      	orrs	r1, r0
 8007b6a:	f002 80df 	beq.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b72:	1e42      	subs	r2, r0, #1
 8007b74:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007b78:	2a20      	cmp	r2, #32
 8007b7a:	f173 0100 	sbcs.w	r1, r3, #0
 8007b7e:	f082 80d5 	bcs.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b82:	2a1f      	cmp	r2, #31
 8007b84:	f202 80d2 	bhi.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b88:	a101      	add	r1, pc, #4	@ (adr r1, 8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007b8a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007ef1 	.word	0x08007ef1
 8007b94:	08007fbd 	.word	0x08007fbd
 8007b98:	08009d2d 	.word	0x08009d2d
 8007b9c:	0800807d 	.word	0x0800807d
 8007ba0:	08009d2d 	.word	0x08009d2d
 8007ba4:	08009d2d 	.word	0x08009d2d
 8007ba8:	08009d2d 	.word	0x08009d2d
 8007bac:	0800814d 	.word	0x0800814d
 8007bb0:	08009d2d 	.word	0x08009d2d
 8007bb4:	08009d2d 	.word	0x08009d2d
 8007bb8:	08009d2d 	.word	0x08009d2d
 8007bbc:	08009d2d 	.word	0x08009d2d
 8007bc0:	08009d2d 	.word	0x08009d2d
 8007bc4:	08009d2d 	.word	0x08009d2d
 8007bc8:	08009d2d 	.word	0x08009d2d
 8007bcc:	0800822f 	.word	0x0800822f
 8007bd0:	08009d2d 	.word	0x08009d2d
 8007bd4:	08009d2d 	.word	0x08009d2d
 8007bd8:	08009d2d 	.word	0x08009d2d
 8007bdc:	08009d2d 	.word	0x08009d2d
 8007be0:	08009d2d 	.word	0x08009d2d
 8007be4:	08009d2d 	.word	0x08009d2d
 8007be8:	08009d2d 	.word	0x08009d2d
 8007bec:	08009d2d 	.word	0x08009d2d
 8007bf0:	08009d2d 	.word	0x08009d2d
 8007bf4:	08009d2d 	.word	0x08009d2d
 8007bf8:	08009d2d 	.word	0x08009d2d
 8007bfc:	08009d2d 	.word	0x08009d2d
 8007c00:	08009d2d 	.word	0x08009d2d
 8007c04:	08009d2d 	.word	0x08009d2d
 8007c08:	08009d2d 	.word	0x08009d2d
 8007c0c:	08008305 	.word	0x08008305
 8007c10:	80000001 	.word	0x80000001
 8007c14:	40000001 	.word	0x40000001
 8007c18:	20000001 	.word	0x20000001
 8007c1c:	10000001 	.word	0x10000001
 8007c20:	08000001 	.word	0x08000001
 8007c24:	04000001 	.word	0x04000001
 8007c28:	00800001 	.word	0x00800001
 8007c2c:	00400001 	.word	0x00400001
 8007c30:	00200001 	.word	0x00200001
 8007c34:	00100001 	.word	0x00100001
 8007c38:	00080001 	.word	0x00080001
 8007c3c:	00040001 	.word	0x00040001
 8007c40:	00020001 	.word	0x00020001
 8007c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c48:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	f000 83c4 	beq.w	80083da <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007c52:	f002 b86b 	b.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007c56:	4ba1      	ldr	r3, [pc, #644]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c5c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007c60:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c68:	d036      	beq.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c70:	d86b      	bhi.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c78:	d02b      	beq.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c80:	d863      	bhi.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c88:	d01b      	beq.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c90:	d85b      	bhi.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d004      	beq.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c9e:	d008      	beq.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007ca0:	e053      	b.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ca2:	f107 0320 	add.w	r3, r7, #32
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff f8b4 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cb0:	e04e      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cb2:	f107 0314 	add.w	r3, r7, #20
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff fa18 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cc0:	e046      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cc2:	f107 0308 	add.w	r3, r7, #8
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff fb7c 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cd0:	e03e      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007cd2:	4b83      	ldr	r3, [pc, #524]	@ (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007cd4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007cd6:	e03b      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007cd8:	4b80      	ldr	r3, [pc, #512]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007cda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007cde:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ce4:	4b7d      	ldr	r3, [pc, #500]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d10c      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d109      	bne.n	8007d0a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cf6:	4b79      	ldr	r3, [pc, #484]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	08db      	lsrs	r3, r3, #3
 8007cfc:	f003 0303 	and.w	r3, r3, #3
 8007d00:	4a78      	ldr	r2, [pc, #480]	@ (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007d02:	fa22 f303 	lsr.w	r3, r2, r3
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d08:	e01e      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d0a:	4b74      	ldr	r3, [pc, #464]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d16:	d106      	bne.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d1e:	d102      	bne.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007d20:	4b71      	ldr	r3, [pc, #452]	@ (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d24:	e010      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d26:	4b6d      	ldr	r3, [pc, #436]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d32:	d106      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d3a:	d102      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007d3c:	4b6b      	ldr	r3, [pc, #428]	@ (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d40:	e002      	b.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007d46:	e003      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007d48:	e002      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007d4e:	bf00      	nop
          }
        }
        break;
 8007d50:	f001 bfef 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007d54:	4b61      	ldr	r3, [pc, #388]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d5a:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8007d5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d66:	d036      	beq.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d6e:	d86b      	bhi.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007d76:	d02b      	beq.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007d7e:	d863      	bhi.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d86:	d01b      	beq.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d8e:	d85b      	bhi.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d004      	beq.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007d9c:	d008      	beq.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007d9e:	e053      	b.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007da0:	f107 0320 	add.w	r3, r7, #32
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7ff f835 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007dae:	e04e      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007db0:	f107 0314 	add.w	r3, r7, #20
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7ff f999 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007dbe:	e046      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dc0:	f107 0308 	add.w	r3, r7, #8
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff fafd 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007dce:	e03e      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007dd0:	4b43      	ldr	r3, [pc, #268]	@ (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007dd2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007dd4:	e03b      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007dd6:	4b41      	ldr	r3, [pc, #260]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ddc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007de0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007de2:	4b3e      	ldr	r3, [pc, #248]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d10c      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d109      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007df4:	4b39      	ldr	r3, [pc, #228]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	08db      	lsrs	r3, r3, #3
 8007dfa:	f003 0303 	and.w	r3, r3, #3
 8007dfe:	4a39      	ldr	r2, [pc, #228]	@ (8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007e00:	fa22 f303 	lsr.w	r3, r2, r3
 8007e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e06:	e01e      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e08:	4b34      	ldr	r3, [pc, #208]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e14:	d106      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e1c:	d102      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e1e:	4b32      	ldr	r3, [pc, #200]	@ (8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e22:	e010      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e24:	4b2d      	ldr	r3, [pc, #180]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e30:	d106      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e38:	d102      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e3e:	e002      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007e44:	e003      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007e46:	e002      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e4c:	bf00      	nop
          }
        }
        break;
 8007e4e:	f001 bf70 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007e52:	4b22      	ldr	r3, [pc, #136]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d108      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e64:	f107 0320 	add.w	r3, r7, #32
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe ffd3 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e70:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e72:	f001 bf5e 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	2b40      	cmp	r3, #64	@ 0x40
 8007e7a:	d108      	bne.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e7c:	f107 0314 	add.w	r3, r7, #20
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7ff f933 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e8a:	f001 bf52 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e92:	f001 bf4e 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007e96:	4b11      	ldr	r3, [pc, #68]	@ (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ea0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d108      	bne.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ea8:	f107 0320 	add.w	r3, r7, #32
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe ffb1 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007eb6:	f001 bf3c 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebc:	2b80      	cmp	r3, #128	@ 0x80
 8007ebe:	d108      	bne.n	8007ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ec0:	f107 0314 	add.w	r3, r7, #20
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff f911 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ece:	f001 bf30 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ed6:	f001 bf2c 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007eda:	bf00      	nop
 8007edc:	44020c00 	.word	0x44020c00
 8007ee0:	00bb8000 	.word	0x00bb8000
 8007ee4:	03d09000 	.word	0x03d09000
 8007ee8:	003d0900 	.word	0x003d0900
 8007eec:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007ef0:	4b9d      	ldr	r3, [pc, #628]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007ef2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d104      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007f02:	f7fc ffd1 	bl	8004ea8 <HAL_RCC_GetPCLK2Freq>
 8007f06:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f08:	f001 bf13 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007f0c:	4b96      	ldr	r3, [pc, #600]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f18:	d10a      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d107      	bne.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f20:	f107 0314 	add.w	r3, r7, #20
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff f8e1 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f2e:	e043      	b.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007f30:	4b8d      	ldr	r3, [pc, #564]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f3c:	d10a      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d107      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f44:	f107 0308 	add.w	r3, r7, #8
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fa3b 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f52:	e031      	b.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007f54:	4b84      	ldr	r3, [pc, #528]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d10c      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d109      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f66:	4b80      	ldr	r3, [pc, #512]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	08db      	lsrs	r3, r3, #3
 8007f6c:	f003 0303 	and.w	r3, r3, #3
 8007f70:	4a7e      	ldr	r2, [pc, #504]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007f72:	fa22 f303 	lsr.w	r3, r2, r3
 8007f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f78:	e01e      	b.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007f7a:	4b7b      	ldr	r3, [pc, #492]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f86:	d105      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d102      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007f8e:	4b78      	ldr	r3, [pc, #480]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f92:	e011      	b.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007f94:	4b74      	ldr	r3, [pc, #464]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007f96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d106      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa4:	2b05      	cmp	r3, #5
 8007fa6:	d103      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007fa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fae:	e003      	b.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fb4:	f001 bebd 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007fb8:	f001 bebb 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007fbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007fc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fc6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d104      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007fce:	f7fc ff55 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8007fd2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007fd4:	f001 bead 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007fd8:	4b63      	ldr	r3, [pc, #396]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fe0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fe4:	d10a      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d107      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fec:	f107 0314 	add.w	r3, r7, #20
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7ff f87b 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ffa:	e03d      	b.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffe:	2b10      	cmp	r3, #16
 8008000:	d108      	bne.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008002:	f107 0308 	add.w	r3, r7, #8
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff f9dc 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008010:	f001 be8f 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008014:	4b54      	ldr	r3, [pc, #336]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b02      	cmp	r3, #2
 800801e:	d10c      	bne.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008022:	2b18      	cmp	r3, #24
 8008024:	d109      	bne.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008026:	4b50      	ldr	r3, [pc, #320]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	08db      	lsrs	r3, r3, #3
 800802c:	f003 0303 	and.w	r3, r3, #3
 8008030:	4a4e      	ldr	r2, [pc, #312]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008032:	fa22 f303 	lsr.w	r3, r2, r3
 8008036:	637b      	str	r3, [r7, #52]	@ 0x34
 8008038:	e01e      	b.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800803a:	4b4b      	ldr	r3, [pc, #300]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008046:	d105      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804a:	2b20      	cmp	r3, #32
 800804c:	d102      	bne.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800804e:	4b48      	ldr	r3, [pc, #288]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008050:	637b      	str	r3, [r7, #52]	@ 0x34
 8008052:	e011      	b.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008054:	4b44      	ldr	r3, [pc, #272]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b02      	cmp	r3, #2
 8008060:	d106      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	2b28      	cmp	r3, #40	@ 0x28
 8008066:	d103      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8008068:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800806c:	637b      	str	r3, [r7, #52]	@ 0x34
 800806e:	e003      	b.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008074:	f001 be5d 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008078:	f001 be5b 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800807c:	4b3a      	ldr	r3, [pc, #232]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800807e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008082:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008086:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808a:	2b00      	cmp	r3, #0
 800808c:	d104      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800808e:	f7fc fef5 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8008092:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008094:	f001 be4d 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008098:	4b33      	ldr	r3, [pc, #204]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080a4:	d10a      	bne.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	2b40      	cmp	r3, #64	@ 0x40
 80080aa:	d107      	bne.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ac:	f107 0314 	add.w	r3, r7, #20
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff f81b 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ba:	e045      	b.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80080bc:	4b2a      	ldr	r3, [pc, #168]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080c8:	d10a      	bne.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	2b80      	cmp	r3, #128	@ 0x80
 80080ce:	d107      	bne.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080d0:	f107 0308 	add.w	r3, r7, #8
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7ff f975 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80080de:	e033      	b.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80080e0:	4b21      	ldr	r3, [pc, #132]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0302 	and.w	r3, r3, #2
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d10c      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80080ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80080f0:	d109      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	08db      	lsrs	r3, r3, #3
 80080f8:	f003 0303 	and.w	r3, r3, #3
 80080fc:	4a1b      	ldr	r2, [pc, #108]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80080fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008102:	637b      	str	r3, [r7, #52]	@ 0x34
 8008104:	e020      	b.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008106:	4b18      	ldr	r3, [pc, #96]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800810e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008112:	d106      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800811a:	d102      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800811c:	4b14      	ldr	r3, [pc, #80]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800811e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008120:	e012      	b.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008122:	4b11      	ldr	r3, [pc, #68]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b02      	cmp	r3, #2
 800812e:	d107      	bne.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008132:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008136:	d103      	bne.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008138:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800813c:	637b      	str	r3, [r7, #52]	@ 0x34
 800813e:	e003      	b.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008140:	2300      	movs	r3, #0
 8008142:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008144:	f001 bdf5 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008148:	f001 bdf3 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800814c:	4b06      	ldr	r3, [pc, #24]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800814e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008152:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008156:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10a      	bne.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800815e:	f7fc fe8d 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8008162:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008164:	f001 bde5 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008168:	44020c00 	.word	0x44020c00
 800816c:	03d09000 	.word	0x03d09000
 8008170:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008174:	4ba0      	ldr	r3, [pc, #640]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800817c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008180:	d10b      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8008182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008188:	d107      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800818a:	f107 0314 	add.w	r3, r7, #20
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe ffac 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	637b      	str	r3, [r7, #52]	@ 0x34
 8008198:	e047      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800819a:	4b97      	ldr	r3, [pc, #604]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081a6:	d10b      	bne.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80081a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ae:	d107      	bne.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081b0:	f107 0308 	add.w	r3, r7, #8
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7ff f905 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081be:	e034      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80081c0:	4b8d      	ldr	r3, [pc, #564]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d10d      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80081cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ce:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80081d2:	d109      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081d4:	4b88      	ldr	r3, [pc, #544]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	08db      	lsrs	r3, r3, #3
 80081da:	f003 0303 	and.w	r3, r3, #3
 80081de:	4a87      	ldr	r2, [pc, #540]	@ (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80081e0:	fa22 f303 	lsr.w	r3, r2, r3
 80081e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081e6:	e020      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80081e8:	4b83      	ldr	r3, [pc, #524]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081f4:	d106      	bne.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081fc:	d102      	bne.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 80081fe:	4b80      	ldr	r3, [pc, #512]	@ (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008200:	637b      	str	r3, [r7, #52]	@ 0x34
 8008202:	e012      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008204:	4b7c      	ldr	r3, [pc, #496]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b02      	cmp	r3, #2
 8008210:	d107      	bne.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008214:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008218:	d103      	bne.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800821a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800821e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008220:	e003      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8008222:	2300      	movs	r3, #0
 8008224:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008226:	f001 bd84 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800822a:	f001 bd82 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800822e:	4b72      	ldr	r3, [pc, #456]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008230:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008234:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008238:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823c:	2b00      	cmp	r3, #0
 800823e:	d104      	bne.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008240:	f7fc fe1c 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8008244:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008246:	f001 bd74 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800824a:	4b6b      	ldr	r3, [pc, #428]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008252:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008256:	d10b      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800825e:	d107      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008260:	f107 0314 	add.w	r3, r7, #20
 8008264:	4618      	mov	r0, r3
 8008266:	f7fe ff41 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	637b      	str	r3, [r7, #52]	@ 0x34
 800826e:	e047      	b.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008270:	4b61      	ldr	r3, [pc, #388]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008278:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800827c:	d10b      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008284:	d107      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008286:	f107 0308 	add.w	r3, r7, #8
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff f89a 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	637b      	str	r3, [r7, #52]	@ 0x34
 8008294:	e034      	b.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008296:	4b58      	ldr	r3, [pc, #352]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d10d      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80082a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082a8:	d109      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082aa:	4b53      	ldr	r3, [pc, #332]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	08db      	lsrs	r3, r3, #3
 80082b0:	f003 0303 	and.w	r3, r3, #3
 80082b4:	4a51      	ldr	r2, [pc, #324]	@ (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80082b6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80082bc:	e020      	b.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80082be:	4b4e      	ldr	r3, [pc, #312]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082ca:	d106      	bne.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80082cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082d2:	d102      	bne.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80082d4:	4b4a      	ldr	r3, [pc, #296]	@ (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80082d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d8:	e012      	b.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80082da:	4b47      	ldr	r3, [pc, #284]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80082dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082e0:	f003 0302 	and.w	r3, r3, #2
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d107      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80082e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80082ee:	d103      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80082f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f6:	e003      	b.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082fc:	f001 bd19 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008300:	f001 bd17 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008304:	4b3c      	ldr	r3, [pc, #240]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008306:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800830a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800830e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008312:	2b00      	cmp	r3, #0
 8008314:	d104      	bne.n	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008316:	f7fc fdb1 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 800831a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800831c:	f001 bd09 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008320:	4b35      	ldr	r3, [pc, #212]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008328:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800832c:	d10b      	bne.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800832e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008330:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008334:	d107      	bne.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008336:	f107 0314 	add.w	r3, r7, #20
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe fed6 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	637b      	str	r3, [r7, #52]	@ 0x34
 8008344:	e047      	b.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008346:	4b2c      	ldr	r3, [pc, #176]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800834e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008352:	d10b      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800835a:	d107      	bne.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800835c:	f107 0308 	add.w	r3, r7, #8
 8008360:	4618      	mov	r0, r3
 8008362:	f7ff f82f 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	637b      	str	r3, [r7, #52]	@ 0x34
 800836a:	e034      	b.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800836c:	4b22      	ldr	r3, [pc, #136]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	2b02      	cmp	r3, #2
 8008376:	d10d      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800837e:	d109      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008380:	4b1d      	ldr	r3, [pc, #116]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	08db      	lsrs	r3, r3, #3
 8008386:	f003 0303 	and.w	r3, r3, #3
 800838a:	4a1c      	ldr	r2, [pc, #112]	@ (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800838c:	fa22 f303 	lsr.w	r3, r2, r3
 8008390:	637b      	str	r3, [r7, #52]	@ 0x34
 8008392:	e020      	b.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008394:	4b18      	ldr	r3, [pc, #96]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800839c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083a0:	d106      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083a8:	d102      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80083aa:	4b15      	ldr	r3, [pc, #84]	@ (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80083ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ae:	e012      	b.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80083b0:	4b11      	ldr	r3, [pc, #68]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d107      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80083c4:	d103      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80083c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80083cc:	e003      	b.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083d2:	f001 bcae 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083d6:	f001 bcac 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80083da:	4b07      	ldr	r3, [pc, #28]	@ (80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80083e0:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 80083e4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10b      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80083ec:	f7fc fd46 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 80083f0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80083f2:	f001 bc9e 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083f6:	bf00      	nop
 80083f8:	44020c00 	.word	0x44020c00
 80083fc:	03d09000 	.word	0x03d09000
 8008400:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008404:	4ba0      	ldr	r3, [pc, #640]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800840c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008410:	d10b      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008414:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008418:	d107      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800841a:	f107 0314 	add.w	r3, r7, #20
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe fe64 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	637b      	str	r3, [r7, #52]	@ 0x34
 8008428:	e047      	b.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800842a:	4b97      	ldr	r3, [pc, #604]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008436:	d10b      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800843e:	d107      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008440:	f107 0308 	add.w	r3, r7, #8
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe ffbd 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	637b      	str	r3, [r7, #52]	@ 0x34
 800844e:	e034      	b.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008450:	4b8d      	ldr	r3, [pc, #564]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b02      	cmp	r3, #2
 800845a:	d10d      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008462:	d109      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008464:	4b88      	ldr	r3, [pc, #544]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	08db      	lsrs	r3, r3, #3
 800846a:	f003 0303 	and.w	r3, r3, #3
 800846e:	4a87      	ldr	r2, [pc, #540]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008470:	fa22 f303 	lsr.w	r3, r2, r3
 8008474:	637b      	str	r3, [r7, #52]	@ 0x34
 8008476:	e020      	b.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008478:	4b83      	ldr	r3, [pc, #524]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008484:	d106      	bne.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800848c:	d102      	bne.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800848e:	4b80      	ldr	r3, [pc, #512]	@ (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008490:	637b      	str	r3, [r7, #52]	@ 0x34
 8008492:	e012      	b.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008494:	4b7c      	ldr	r3, [pc, #496]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d107      	bne.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80084a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80084a8:	d103      	bne.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80084aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80084b0:	e003      	b.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084b6:	f001 bc3c 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80084ba:	f001 bc3a 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80084be:	4b72      	ldr	r3, [pc, #456]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80084c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80084c4:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80084c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d104      	bne.n	80084da <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80084d0:	f7fc fcd4 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 80084d4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80084d6:	f001 bc2c 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80084da:	4b6b      	ldr	r3, [pc, #428]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084e6:	d10b      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80084e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084ee:	d107      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084f0:	f107 0314 	add.w	r3, r7, #20
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fdf9 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80084fe:	e047      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008500:	4b61      	ldr	r3, [pc, #388]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800850c:	d10b      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800850e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008514:	d107      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008516:	f107 0308 	add.w	r3, r7, #8
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe ff52 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	637b      	str	r3, [r7, #52]	@ 0x34
 8008524:	e034      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008526:	4b58      	ldr	r3, [pc, #352]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b02      	cmp	r3, #2
 8008530:	d10d      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008534:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008538:	d109      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800853a:	4b53      	ldr	r3, [pc, #332]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	08db      	lsrs	r3, r3, #3
 8008540:	f003 0303 	and.w	r3, r3, #3
 8008544:	4a51      	ldr	r2, [pc, #324]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008546:	fa22 f303 	lsr.w	r3, r2, r3
 800854a:	637b      	str	r3, [r7, #52]	@ 0x34
 800854c:	e020      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800854e:	4b4e      	ldr	r3, [pc, #312]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800855a:	d106      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800855c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008562:	d102      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008564:	4b4a      	ldr	r3, [pc, #296]	@ (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008566:	637b      	str	r3, [r7, #52]	@ 0x34
 8008568:	e012      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800856a:	4b47      	ldr	r3, [pc, #284]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800856c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b02      	cmp	r3, #2
 8008576:	d107      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800857e:	d103      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008580:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008584:	637b      	str	r3, [r7, #52]	@ 0x34
 8008586:	e003      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800858c:	f001 bbd1 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008590:	f001 bbcf 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008594:	4b3c      	ldr	r3, [pc, #240]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008596:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800859a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800859e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80085a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d104      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80085a6:	f7fc fc69 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 80085aa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80085ac:	f001 bbc1 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80085b0:	4b35      	ldr	r3, [pc, #212]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085bc:	d10b      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80085be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085c4:	d107      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085c6:	f107 0314 	add.w	r3, r7, #20
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fd8e 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d4:	e047      	b.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80085d6:	4b2c      	ldr	r3, [pc, #176]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085e2:	d10b      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80085e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085ea:	d107      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ec:	f107 0308 	add.w	r3, r7, #8
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe fee7 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085fa:	e034      	b.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80085fc:	4b22      	ldr	r3, [pc, #136]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b02      	cmp	r3, #2
 8008606:	d10d      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800860e:	d109      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008610:	4b1d      	ldr	r3, [pc, #116]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	08db      	lsrs	r3, r3, #3
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	4a1c      	ldr	r2, [pc, #112]	@ (800868c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800861c:	fa22 f303 	lsr.w	r3, r2, r3
 8008620:	637b      	str	r3, [r7, #52]	@ 0x34
 8008622:	e020      	b.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008624:	4b18      	ldr	r3, [pc, #96]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800862c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008630:	d106      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008634:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008638:	d102      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800863a:	4b15      	ldr	r3, [pc, #84]	@ (8008690 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800863c:	637b      	str	r3, [r7, #52]	@ 0x34
 800863e:	e012      	b.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008640:	4b11      	ldr	r3, [pc, #68]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b02      	cmp	r3, #2
 800864c:	d107      	bne.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008654:	d103      	bne.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800865a:	637b      	str	r3, [r7, #52]	@ 0x34
 800865c:	e003      	b.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008662:	f001 bb66 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008666:	f001 bb64 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800866a:	4b07      	ldr	r3, [pc, #28]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800866c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008670:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8008674:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10b      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800867c:	f7fc fbfe 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8008680:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8008682:	f001 bb56 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008686:	bf00      	nop
 8008688:	44020c00 	.word	0x44020c00
 800868c:	03d09000 	.word	0x03d09000
 8008690:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8008694:	4ba1      	ldr	r3, [pc, #644]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800869c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086a0:	d10b      	bne.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086a8:	d107      	bne.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086aa:	f107 0314 	add.w	r3, r7, #20
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe fd1c 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b8:	e047      	b.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80086ba:	4b98      	ldr	r3, [pc, #608]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086c6:	d10b      	bne.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80086c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086ce:	d107      	bne.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086d0:	f107 0308 	add.w	r3, r7, #8
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fe fe75 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80086de:	e034      	b.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80086e0:	4b8e      	ldr	r3, [pc, #568]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d10d      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80086ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ee:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80086f2:	d109      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086f4:	4b89      	ldr	r3, [pc, #548]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	08db      	lsrs	r3, r3, #3
 80086fa:	f003 0303 	and.w	r3, r3, #3
 80086fe:	4a88      	ldr	r2, [pc, #544]	@ (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008700:	fa22 f303 	lsr.w	r3, r2, r3
 8008704:	637b      	str	r3, [r7, #52]	@ 0x34
 8008706:	e020      	b.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008708:	4b84      	ldr	r3, [pc, #528]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008714:	d106      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800871c:	d102      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800871e:	4b81      	ldr	r3, [pc, #516]	@ (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008720:	637b      	str	r3, [r7, #52]	@ 0x34
 8008722:	e012      	b.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008724:	4b7d      	ldr	r3, [pc, #500]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b02      	cmp	r3, #2
 8008730:	d107      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008738:	d103      	bne.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800873a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800873e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008740:	e003      	b.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008746:	f001 baf4 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800874a:	f001 baf2 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800874e:	4b73      	ldr	r3, [pc, #460]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008750:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008754:	f003 0307 	and.w	r3, r3, #7
 8008758:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800875a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875c:	2b00      	cmp	r3, #0
 800875e:	d104      	bne.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008760:	f7fc fb8c 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8008764:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8008766:	f001 bae4 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800876a:	4b6c      	ldr	r3, [pc, #432]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008776:	d10a      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8008778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877a:	2b01      	cmp	r3, #1
 800877c:	d107      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800877e:	f107 0314 	add.w	r3, r7, #20
 8008782:	4618      	mov	r0, r3
 8008784:	f7fe fcb2 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	637b      	str	r3, [r7, #52]	@ 0x34
 800878c:	e043      	b.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800878e:	4b63      	ldr	r3, [pc, #396]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008796:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800879a:	d10a      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800879c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d107      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087a2:	f107 0308 	add.w	r3, r7, #8
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fe fe0c 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80087b0:	e031      	b.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80087b2:	4b5a      	ldr	r3, [pc, #360]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0302 	and.w	r3, r3, #2
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d10c      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80087be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d109      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087c4:	4b55      	ldr	r3, [pc, #340]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	08db      	lsrs	r3, r3, #3
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	4a54      	ldr	r2, [pc, #336]	@ (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80087d0:	fa22 f303 	lsr.w	r3, r2, r3
 80087d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d6:	e01e      	b.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80087d8:	4b50      	ldr	r3, [pc, #320]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087e4:	d105      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80087e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d102      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80087ec:	4b4d      	ldr	r3, [pc, #308]	@ (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80087ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f0:	e011      	b.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80087f2:	4b4a      	ldr	r3, [pc, #296]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80087f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d106      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008802:	2b05      	cmp	r3, #5
 8008804:	d103      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8008806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800880a:	637b      	str	r3, [r7, #52]	@ 0x34
 800880c:	e003      	b.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800880e:	2300      	movs	r3, #0
 8008810:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008812:	f001 ba8e 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008816:	f001 ba8c 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800881a:	4b40      	ldr	r3, [pc, #256]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800881c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008820:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008824:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800882c:	f7fc fb26 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8008830:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008832:	f001 ba7e 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008836:	4b39      	ldr	r3, [pc, #228]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800883e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008842:	d10a      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008846:	2b10      	cmp	r3, #16
 8008848:	d107      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800884a:	f107 0314 	add.w	r3, r7, #20
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fc4c 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	637b      	str	r3, [r7, #52]	@ 0x34
 8008858:	e043      	b.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800885a:	4b30      	ldr	r3, [pc, #192]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008866:	d10a      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886a:	2b20      	cmp	r3, #32
 800886c:	d107      	bne.n	800887e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800886e:	f107 0308 	add.w	r3, r7, #8
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe fda6 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	637b      	str	r3, [r7, #52]	@ 0x34
 800887c:	e031      	b.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800887e:	4b27      	ldr	r3, [pc, #156]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b02      	cmp	r3, #2
 8008888:	d10c      	bne.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888c:	2b30      	cmp	r3, #48	@ 0x30
 800888e:	d109      	bne.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008890:	4b22      	ldr	r3, [pc, #136]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	08db      	lsrs	r3, r3, #3
 8008896:	f003 0303 	and.w	r3, r3, #3
 800889a:	4a21      	ldr	r2, [pc, #132]	@ (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800889c:	fa22 f303 	lsr.w	r3, r2, r3
 80088a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80088a2:	e01e      	b.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80088a4:	4b1d      	ldr	r3, [pc, #116]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088b0:	d105      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	2b40      	cmp	r3, #64	@ 0x40
 80088b6:	d102      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80088b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80088ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80088bc:	e011      	b.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80088be:	4b17      	ldr	r3, [pc, #92]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d106      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	2b50      	cmp	r3, #80	@ 0x50
 80088d0:	d103      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80088d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088d8:	e003      	b.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088de:	f001 ba28 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088e2:	f001 ba26 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80088e6:	4b0d      	ldr	r3, [pc, #52]	@ (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088ec:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80088f0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d104      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80088f8:	f7fc faec 	bl	8004ed4 <HAL_RCC_GetPCLK3Freq>
 80088fc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80088fe:	f001 ba18 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008908:	d10e      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800890a:	f107 0314 	add.w	r3, r7, #20
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fbec 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008918:	f001 ba0b 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800891c:	44020c00 	.word	0x44020c00
 8008920:	03d09000 	.word	0x03d09000
 8008924:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800892e:	d108      	bne.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008930:	f107 0308 	add.w	r3, r7, #8
 8008934:	4618      	mov	r0, r3
 8008936:	f7fe fd45 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800893e:	f001 b9f8 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008942:	4ba4      	ldr	r3, [pc, #656]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b02      	cmp	r3, #2
 800894c:	d10d      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800894e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008950:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008954:	d109      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008956:	4b9f      	ldr	r3, [pc, #636]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	08db      	lsrs	r3, r3, #3
 800895c:	f003 0303 	and.w	r3, r3, #3
 8008960:	4a9d      	ldr	r2, [pc, #628]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008962:	fa22 f303 	lsr.w	r3, r2, r3
 8008966:	637b      	str	r3, [r7, #52]	@ 0x34
 8008968:	e020      	b.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800896a:	4b9a      	ldr	r3, [pc, #616]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008976:	d106      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800897e:	d102      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008980:	4b96      	ldr	r3, [pc, #600]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008982:	637b      	str	r3, [r7, #52]	@ 0x34
 8008984:	e012      	b.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008986:	4b93      	ldr	r3, [pc, #588]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b02      	cmp	r3, #2
 8008992:	d107      	bne.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800899a:	d103      	bne.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800899c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089a2:	e003      	b.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089a8:	f001 b9c3 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089ac:	f001 b9c1 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80089b0:	4b88      	ldr	r3, [pc, #544]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80089b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80089bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80089c2:	f7fc fa3f 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 80089c6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80089c8:	f001 b9b3 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80089cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d104      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80089d2:	f7fc f90b 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 80089d6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80089d8:	f001 b9ab 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80089dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d108      	bne.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e2:	f107 0314 	add.w	r3, r7, #20
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fb80 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089f0:	f001 b99f 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80089f4:	4b77      	ldr	r3, [pc, #476]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a00:	d105      	bne.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d102      	bne.n	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008a08:	4b75      	ldr	r3, [pc, #468]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a0c:	e023      	b.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008a0e:	4b71      	ldr	r3, [pc, #452]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d10c      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1c:	2b04      	cmp	r3, #4
 8008a1e:	d109      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a20:	4b6c      	ldr	r3, [pc, #432]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	08db      	lsrs	r3, r3, #3
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	4a6b      	ldr	r2, [pc, #428]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a32:	e010      	b.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008a34:	4b67      	ldr	r3, [pc, #412]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a40:	d105      	bne.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	2b05      	cmp	r3, #5
 8008a46:	d102      	bne.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008a48:	4b64      	ldr	r3, [pc, #400]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a4c:	e003      	b.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a52:	f001 b96e 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a56:	f001 b96c 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008a5a:	4b5e      	ldr	r3, [pc, #376]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a60:	f003 0308 	and.w	r3, r3, #8
 8008a64:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008a66:	4b5b      	ldr	r3, [pc, #364]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a6c:	f003 0302 	and.w	r3, r3, #2
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d106      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d103      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a80:	e012      	b.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008a82:	4b54      	ldr	r3, [pc, #336]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008a84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a90:	d106      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8008a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a94:	2b08      	cmp	r3, #8
 8008a96:	d103      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008a98:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9e:	e003      	b.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008aa4:	f001 b945 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008aa8:	f001 b943 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008aac:	4b49      	ldr	r3, [pc, #292]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008aae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ab2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008ab6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d104      	bne.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008abe:	f7fc f9dd 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8008ac2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ac4:	f001 b935 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ace:	d108      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ad0:	f107 0308 	add.w	r3, r7, #8
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fe fc75 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ade:	f001 b928 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d10d      	bne.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008af4:	d109      	bne.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008af6:	4b37      	ldr	r3, [pc, #220]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	08db      	lsrs	r3, r3, #3
 8008afc:	f003 0303 	and.w	r3, r3, #3
 8008b00:	4a35      	ldr	r2, [pc, #212]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008b02:	fa22 f303 	lsr.w	r3, r2, r3
 8008b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b08:	e011      	b.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008b0a:	4b32      	ldr	r3, [pc, #200]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b16:	d106      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b1e:	d102      	bne.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008b20:	4b2e      	ldr	r3, [pc, #184]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b24:	e003      	b.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b2a:	f001 b902 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b2e:	f001 b900 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008b32:	4b28      	ldr	r3, [pc, #160]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008b38:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008b3c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d104      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b44:	f7fc f99a 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8008b48:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b4a:	f001 b8f2 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b54:	d108      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b56:	f107 0308 	add.w	r3, r7, #8
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fc32 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b64:	f001 b8e5 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008b68:	4b1a      	ldr	r3, [pc, #104]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0302 	and.w	r3, r3, #2
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d10d      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b76:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008b7a:	d109      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b7c:	4b15      	ldr	r3, [pc, #84]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	08db      	lsrs	r3, r3, #3
 8008b82:	f003 0303 	and.w	r3, r3, #3
 8008b86:	4a14      	ldr	r2, [pc, #80]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008b88:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b8e:	e011      	b.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008b90:	4b10      	ldr	r3, [pc, #64]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b9c:	d106      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008ba4:	d102      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008baa:	e003      	b.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bb0:	f001 b8bf 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bb4:	f001 b8bd 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008bb8:	4b06      	ldr	r3, [pc, #24]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008bbe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008bc2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10c      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008bca:	f7fc f983 	bl	8004ed4 <HAL_RCC_GetPCLK3Freq>
 8008bce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008bd0:	f001 b8af 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bd4:	44020c00 	.word	0x44020c00
 8008bd8:	03d09000 	.word	0x03d09000
 8008bdc:	003d0900 	.word	0x003d0900
 8008be0:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bea:	d108      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bec:	f107 0308 	add.w	r3, r7, #8
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fe fbe7 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bfa:	f001 b89a 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008bfe:	4b9f      	ldr	r3, [pc, #636]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0302 	and.w	r3, r3, #2
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d10d      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c10:	d109      	bne.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c12:	4b9a      	ldr	r3, [pc, #616]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	08db      	lsrs	r3, r3, #3
 8008c18:	f003 0303 	and.w	r3, r3, #3
 8008c1c:	4a98      	ldr	r2, [pc, #608]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c24:	e011      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008c26:	4b95      	ldr	r3, [pc, #596]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c32:	d106      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008c3a:	d102      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008c3c:	4b91      	ldr	r3, [pc, #580]	@ (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c40:	e003      	b.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c46:	f001 b874 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c4a:	f001 b872 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008c4e:	4b8b      	ldr	r3, [pc, #556]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008c50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c54:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008c58:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d104      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008c60:	f7fc f938 	bl	8004ed4 <HAL_RCC_GetPCLK3Freq>
 8008c64:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c66:	f001 b864 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c70:	d108      	bne.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c72:	f107 0308 	add.w	r3, r7, #8
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe fba4 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c80:	f001 b857 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008c84:	4b7d      	ldr	r3, [pc, #500]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0302 	and.w	r3, r3, #2
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d10d      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c96:	d109      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c98:	4b78      	ldr	r3, [pc, #480]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	08db      	lsrs	r3, r3, #3
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	4a77      	ldr	r2, [pc, #476]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008caa:	e011      	b.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008cac:	4b73      	ldr	r3, [pc, #460]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cb8:	d106      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008cc0:	d102      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008cc2:	4b70      	ldr	r3, [pc, #448]	@ (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cc6:	e003      	b.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ccc:	f001 b831 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cd0:	f001 b82f 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008cd4:	4b69      	ldr	r3, [pc, #420]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008cd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008cda:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008cde:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d104      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ce6:	f7fc f8c9 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8008cea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008cec:	f001 b821 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cf6:	d108      	bne.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cf8:	f107 0308 	add.w	r3, r7, #8
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fe fb61 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d06:	f001 b814 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008d0a:	4b5c      	ldr	r3, [pc, #368]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0302 	and.w	r3, r3, #2
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d10e      	bne.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8008d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d1c:	d10a      	bne.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d1e:	4b57      	ldr	r3, [pc, #348]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	08db      	lsrs	r3, r3, #3
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	4a55      	ldr	r2, [pc, #340]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d30:	f000 bfff 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d38:	f000 bffb 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008d3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d42:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d46:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008d4e:	d056      	beq.n	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d52:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008d56:	f200 808b 	bhi.w	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d60:	d03e      	beq.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d68:	f200 8082 	bhi.w	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d72:	d027      	beq.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d7a:	d879      	bhi.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d82:	d017      	beq.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d8a:	d871      	bhi.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d004      	beq.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d98:	d004      	beq.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008d9a:	e069      	b.n	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008d9c:	f7fc f89a 	bl	8004ed4 <HAL_RCC_GetPCLK3Freq>
 8008da0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008da2:	e068      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008da4:	f107 0314 	add.w	r3, r7, #20
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fe f99f 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008db2:	e060      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008db4:	f107 0308 	add.w	r3, r7, #8
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fe fb03 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dc2:	e058      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dca:	f003 0302 	and.w	r3, r3, #2
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d103      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8008dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dd6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008dd8:	e04d      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dde:	e04a      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008de0:	4b26      	ldr	r3, [pc, #152]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008de6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dee:	d103      	bne.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8008df0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008df4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008df6:	e03e      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dfc:	e03b      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e04:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008e08:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0302 	and.w	r3, r3, #2
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d10c      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8008e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d109      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e1c:	4b17      	ldr	r3, [pc, #92]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	08db      	lsrs	r3, r3, #3
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	4a16      	ldr	r2, [pc, #88]	@ (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008e28:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e2e:	e01e      	b.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e30:	4b12      	ldr	r3, [pc, #72]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e3c:	d106      	bne.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e44:	d102      	bne.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e46:	4b0f      	ldr	r3, [pc, #60]	@ (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4a:	e010      	b.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e58:	d106      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e60:	d102      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e62:	4b09      	ldr	r3, [pc, #36]	@ (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e66:	e002      	b.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008e6c:	e003      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008e6e:	e002      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e74:	bf00      	nop
          }
        }
        break;
 8008e76:	f000 bf5c 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e7a:	bf00      	nop
 8008e7c:	44020c00 	.word	0x44020c00
 8008e80:	03d09000 	.word	0x03d09000
 8008e84:	003d0900 	.word	0x003d0900
 8008e88:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008e8c:	4b9e      	ldr	r3, [pc, #632]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008e8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008e92:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008e96:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008e9e:	d056      	beq.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008ea6:	f200 808b 	bhi.w	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008eb0:	d03e      	beq.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008eb8:	f200 8082 	bhi.w	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ec2:	d027      	beq.n	8008f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008eca:	d879      	bhi.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ed2:	d017      	beq.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eda:	d871      	bhi.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d004      	beq.n	8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ee8:	d004      	beq.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008eea:	e069      	b.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008eec:	f7fb ffc6 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8008ef0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008ef2:	e068      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ef4:	f107 0314 	add.w	r3, r7, #20
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fe f8f7 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f02:	e060      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f04:	f107 0308 	add.w	r3, r7, #8
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fe fa5b 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f12:	e058      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008f14:	4b7c      	ldr	r3, [pc, #496]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d103      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8008f22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f26:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f28:	e04d      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f2e:	e04a      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008f30:	4b75      	ldr	r3, [pc, #468]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f3e:	d103      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008f40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008f44:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f46:	e03e      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f4c:	e03b      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f4e:	4b6e      	ldr	r3, [pc, #440]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f54:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f58:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f5a:	4b6b      	ldr	r3, [pc, #428]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d10c      	bne.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d109      	bne.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f6c:	4b66      	ldr	r3, [pc, #408]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	08db      	lsrs	r3, r3, #3
 8008f72:	f003 0303 	and.w	r3, r3, #3
 8008f76:	4a65      	ldr	r2, [pc, #404]	@ (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008f78:	fa22 f303 	lsr.w	r3, r2, r3
 8008f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7e:	e01e      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f80:	4b61      	ldr	r3, [pc, #388]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8c:	d106      	bne.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f94:	d102      	bne.n	8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f96:	4b5e      	ldr	r3, [pc, #376]	@ (8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f9a:	e010      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f9c:	4b5a      	ldr	r3, [pc, #360]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fa8:	d106      	bne.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fb0:	d102      	bne.n	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008fb2:	4b58      	ldr	r3, [pc, #352]	@ (8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fb6:	e002      	b.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008fbc:	e003      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8008fbe:	e002      	b.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fc4:	bf00      	nop
          }
        }
        break;
 8008fc6:	f000 beb4 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008fca:	4b4f      	ldr	r3, [pc, #316]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008fcc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008fd0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008fd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008fdc:	d056      	beq.n	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8008fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008fe4:	f200 808b 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008fee:	d03e      	beq.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ff6:	f200 8082 	bhi.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009000:	d027      	beq.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8009002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009004:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009008:	d879      	bhi.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800900a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009010:	d017      	beq.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8009012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009018:	d871      	bhi.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800901a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901c:	2b00      	cmp	r3, #0
 800901e:	d004      	beq.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8009020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009026:	d004      	beq.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8009028:	e069      	b.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800902a:	f7fb ff53 	bl	8004ed4 <HAL_RCC_GetPCLK3Freq>
 800902e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009030:	e068      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009032:	f107 0314 	add.w	r3, r7, #20
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe f858 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009040:	e060      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009042:	f107 0308 	add.w	r3, r7, #8
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe f9bc 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009050:	e058      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009052:	4b2d      	ldr	r3, [pc, #180]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009058:	f003 0302 	and.w	r3, r3, #2
 800905c:	2b02      	cmp	r3, #2
 800905e:	d103      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8009060:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009064:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009066:	e04d      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009068:	2300      	movs	r3, #0
 800906a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800906c:	e04a      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800906e:	4b26      	ldr	r3, [pc, #152]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009074:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009078:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800907c:	d103      	bne.n	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800907e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009082:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009084:	e03e      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800908a:	e03b      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800908c:	4b1e      	ldr	r3, [pc, #120]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800908e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009092:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009096:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009098:	4b1b      	ldr	r3, [pc, #108]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d10c      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80090a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d109      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090aa:	4b17      	ldr	r3, [pc, #92]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	08db      	lsrs	r3, r3, #3
 80090b0:	f003 0303 	and.w	r3, r3, #3
 80090b4:	4a15      	ldr	r2, [pc, #84]	@ (800910c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80090b6:	fa22 f303 	lsr.w	r3, r2, r3
 80090ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80090bc:	e01e      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090be:	4b12      	ldr	r3, [pc, #72]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090ca:	d106      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80090cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090d2:	d102      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80090d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80090d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d8:	e010      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090da:	4b0b      	ldr	r3, [pc, #44]	@ (8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090e6:	d106      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80090e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090ee:	d102      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80090f0:	4b08      	ldr	r3, [pc, #32]	@ (8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80090f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f4:	e002      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80090fa:	e003      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80090fc:	e002      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009102:	bf00      	nop
          }
        }
        break;
 8009104:	f000 be15 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009108:	44020c00 	.word	0x44020c00
 800910c:	03d09000 	.word	0x03d09000
 8009110:	003d0900 	.word	0x003d0900
 8009114:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009118:	4b9e      	ldr	r3, [pc, #632]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800911a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800911e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8009122:	633b      	str	r3, [r7, #48]	@ 0x30
 8009124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009126:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800912a:	d056      	beq.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800912c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009132:	f200 808b 	bhi.w	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009138:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800913c:	d03e      	beq.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800913e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009140:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009144:	f200 8082 	bhi.w	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800914e:	d027      	beq.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009156:	d879      	bhi.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800915e:	d017      	beq.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8009160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009162:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009166:	d871      	bhi.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	2b00      	cmp	r3, #0
 800916c:	d004      	beq.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800916e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009170:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009174:	d004      	beq.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8009176:	e069      	b.n	800924c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009178:	f7fb feac 	bl	8004ed4 <HAL_RCC_GetPCLK3Freq>
 800917c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800917e:	e068      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009180:	f107 0314 	add.w	r3, r7, #20
 8009184:	4618      	mov	r0, r3
 8009186:	f7fd ffb1 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800918e:	e060      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009190:	f107 0308 	add.w	r3, r7, #8
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe f915 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800919e:	e058      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80091a0:	4b7c      	ldr	r3, [pc, #496]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80091a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091a6:	f003 0302 	and.w	r3, r3, #2
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d103      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80091ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80091b4:	e04d      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091ba:	e04a      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80091bc:	4b75      	ldr	r3, [pc, #468]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80091be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091ca:	d103      	bne.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80091cc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80091d0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80091d2:	e03e      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091d8:	e03b      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091da:	4b6e      	ldr	r3, [pc, #440]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80091dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091e0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80091e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091e6:	4b6b      	ldr	r3, [pc, #428]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0302 	and.w	r3, r3, #2
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d10c      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80091f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d109      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091f8:	4b66      	ldr	r3, [pc, #408]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	08db      	lsrs	r3, r3, #3
 80091fe:	f003 0303 	and.w	r3, r3, #3
 8009202:	4a65      	ldr	r2, [pc, #404]	@ (8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009204:	fa22 f303 	lsr.w	r3, r2, r3
 8009208:	637b      	str	r3, [r7, #52]	@ 0x34
 800920a:	e01e      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800920c:	4b61      	ldr	r3, [pc, #388]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009218:	d106      	bne.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800921a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009220:	d102      	bne.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009222:	4b5e      	ldr	r3, [pc, #376]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009224:	637b      	str	r3, [r7, #52]	@ 0x34
 8009226:	e010      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009228:	4b5a      	ldr	r3, [pc, #360]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009230:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009234:	d106      	bne.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800923c:	d102      	bne.n	8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800923e:	4b58      	ldr	r3, [pc, #352]	@ (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009240:	637b      	str	r3, [r7, #52]	@ 0x34
 8009242:	e002      	b.n	800924a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009248:	e003      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800924a:	e002      	b.n	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800924c:	2300      	movs	r3, #0
 800924e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009250:	bf00      	nop
          }
        }
        break;
 8009252:	f000 bd6e 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009256:	4b4f      	ldr	r3, [pc, #316]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009258:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800925c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009260:	633b      	str	r3, [r7, #48]	@ 0x30
 8009262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009264:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009268:	d056      	beq.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800926a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009270:	f200 808b 	bhi.w	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009276:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800927a:	d03e      	beq.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800927c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009282:	f200 8082 	bhi.w	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009288:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800928c:	d027      	beq.n	80092de <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800928e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009290:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009294:	d879      	bhi.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800929c:	d017      	beq.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800929e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092a4:	d871      	bhi.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80092a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d004      	beq.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80092ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092b2:	d004      	beq.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80092b4:	e069      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80092b6:	f7fb fe0d 	bl	8004ed4 <HAL_RCC_GetPCLK3Freq>
 80092ba:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80092bc:	e068      	b.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092be:	f107 0314 	add.w	r3, r7, #20
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fd ff12 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092cc:	e060      	b.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ce:	f107 0308 	add.w	r3, r7, #8
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe f876 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092dc:	e058      	b.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80092de:	4b2d      	ldr	r3, [pc, #180]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80092e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d103      	bne.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80092ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80092f2:	e04d      	b.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80092f4:	2300      	movs	r3, #0
 80092f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092f8:	e04a      	b.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80092fa:	4b26      	ldr	r3, [pc, #152]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80092fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009308:	d103      	bne.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800930a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800930e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009310:	e03e      	b.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009316:	e03b      	b.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009318:	4b1e      	ldr	r3, [pc, #120]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800931a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800931e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009322:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009324:	4b1b      	ldr	r3, [pc, #108]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b02      	cmp	r3, #2
 800932e:	d10c      	bne.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d109      	bne.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009336:	4b17      	ldr	r3, [pc, #92]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	08db      	lsrs	r3, r3, #3
 800933c:	f003 0303 	and.w	r3, r3, #3
 8009340:	4a15      	ldr	r2, [pc, #84]	@ (8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009342:	fa22 f303 	lsr.w	r3, r2, r3
 8009346:	637b      	str	r3, [r7, #52]	@ 0x34
 8009348:	e01e      	b.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800934a:	4b12      	ldr	r3, [pc, #72]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009356:	d106      	bne.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800935e:	d102      	bne.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009360:	4b0e      	ldr	r3, [pc, #56]	@ (800939c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009362:	637b      	str	r3, [r7, #52]	@ 0x34
 8009364:	e010      	b.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009366:	4b0b      	ldr	r3, [pc, #44]	@ (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800936e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009372:	d106      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8009374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009376:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800937a:	d102      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800937c:	4b08      	ldr	r3, [pc, #32]	@ (80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800937e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009380:	e002      	b.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009386:	e003      	b.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8009388:	e002      	b.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800938e:	bf00      	nop
          }
        }
        break;
 8009390:	f000 bccf 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009394:	44020c00 	.word	0x44020c00
 8009398:	03d09000 	.word	0x03d09000
 800939c:	003d0900 	.word	0x003d0900
 80093a0:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80093a4:	4b9e      	ldr	r3, [pc, #632]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80093a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80093aa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80093ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80093b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093b6:	d056      	beq.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093be:	f200 808b 	bhi.w	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80093c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c8:	d03e      	beq.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093d0:	f200 8082 	bhi.w	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093da:	d027      	beq.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80093dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093e2:	d879      	bhi.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80093e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093ea:	d017      	beq.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80093ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093f2:	d871      	bhi.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d004      	beq.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 80093fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009400:	d004      	beq.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009402:	e069      	b.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009404:	f7fb fd66 	bl	8004ed4 <HAL_RCC_GetPCLK3Freq>
 8009408:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800940a:	e068      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800940c:	f107 0314 	add.w	r3, r7, #20
 8009410:	4618      	mov	r0, r3
 8009412:	f7fd fe6b 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800941a:	e060      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800941c:	f107 0308 	add.w	r3, r7, #8
 8009420:	4618      	mov	r0, r3
 8009422:	f7fd ffcf 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800942a:	e058      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800942c:	4b7c      	ldr	r3, [pc, #496]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800942e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009432:	f003 0302 	and.w	r3, r3, #2
 8009436:	2b02      	cmp	r3, #2
 8009438:	d103      	bne.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800943a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800943e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009440:	e04d      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009446:	e04a      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009448:	4b75      	ldr	r3, [pc, #468]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800944a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800944e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009456:	d103      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009458:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800945c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800945e:	e03e      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009464:	e03b      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009466:	4b6e      	ldr	r3, [pc, #440]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800946c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009470:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009472:	4b6b      	ldr	r3, [pc, #428]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0302 	and.w	r3, r3, #2
 800947a:	2b02      	cmp	r3, #2
 800947c:	d10c      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800947e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009480:	2b00      	cmp	r3, #0
 8009482:	d109      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009484:	4b66      	ldr	r3, [pc, #408]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	08db      	lsrs	r3, r3, #3
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	4a65      	ldr	r2, [pc, #404]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009490:	fa22 f303 	lsr.w	r3, r2, r3
 8009494:	637b      	str	r3, [r7, #52]	@ 0x34
 8009496:	e01e      	b.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009498:	4b61      	ldr	r3, [pc, #388]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094a4:	d106      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80094a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094ac:	d102      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80094ae:	4b5e      	ldr	r3, [pc, #376]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80094b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b2:	e010      	b.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094b4:	4b5a      	ldr	r3, [pc, #360]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094c0:	d106      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80094c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094c8:	d102      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80094ca:	4b58      	ldr	r3, [pc, #352]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80094cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ce:	e002      	b.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80094d4:	e003      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80094d6:	e002      	b.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094dc:	bf00      	nop
          }
        }
        break;
 80094de:	f000 bc28 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80094e2:	4b4f      	ldr	r3, [pc, #316]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80094e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80094ee:	4b4c      	ldr	r3, [pc, #304]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094fa:	d106      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80094fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d103      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009502:	4b4a      	ldr	r3, [pc, #296]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009504:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009506:	f000 bc14 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009510:	d108      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009512:	f107 0320 	add.w	r3, r7, #32
 8009516:	4618      	mov	r0, r3
 8009518:	f7fd fc7c 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800951c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009520:	f000 bc07 	b.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800952a:	d107      	bne.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800952c:	f107 0314 	add.w	r3, r7, #20
 8009530:	4618      	mov	r0, r3
 8009532:	f7fd fddb 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800953a:	e3fa      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009540:	e3f7      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009542:	4b37      	ldr	r3, [pc, #220]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009548:	f003 0307 	and.w	r3, r3, #7
 800954c:	633b      	str	r3, [r7, #48]	@ 0x30
 800954e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009550:	2b04      	cmp	r3, #4
 8009552:	d861      	bhi.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009554:	a201      	add	r2, pc, #4	@ (adr r2, 800955c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955a:	bf00      	nop
 800955c:	08009571 	.word	0x08009571
 8009560:	08009581 	.word	0x08009581
 8009564:	08009591 	.word	0x08009591
 8009568:	080095a1 	.word	0x080095a1
 800956c:	080095a7 	.word	0x080095a7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009570:	f107 0320 	add.w	r3, r7, #32
 8009574:	4618      	mov	r0, r3
 8009576:	f7fd fc4d 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800957e:	e04e      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009580:	f107 0314 	add.w	r3, r7, #20
 8009584:	4618      	mov	r0, r3
 8009586:	f7fd fdb1 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800958e:	e046      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009590:	f107 0308 	add.w	r3, r7, #8
 8009594:	4618      	mov	r0, r3
 8009596:	f7fd ff15 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800959e:	e03e      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80095a0:	4b23      	ldr	r3, [pc, #140]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80095a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095a4:	e03b      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095a6:	4b1e      	ldr	r3, [pc, #120]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80095ac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80095b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0302 	and.w	r3, r3, #2
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d10c      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80095be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d109      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095c4:	4b16      	ldr	r3, [pc, #88]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	08db      	lsrs	r3, r3, #3
 80095ca:	f003 0303 	and.w	r3, r3, #3
 80095ce:	4a15      	ldr	r2, [pc, #84]	@ (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80095d0:	fa22 f303 	lsr.w	r3, r2, r3
 80095d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095d6:	e01e      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095d8:	4b11      	ldr	r3, [pc, #68]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095e4:	d106      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80095e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095ec:	d102      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80095ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80095f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f2:	e010      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009600:	d106      	bne.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009604:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009608:	d102      	bne.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800960a:	4b08      	ldr	r3, [pc, #32]	@ (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800960c:	637b      	str	r3, [r7, #52]	@ 0x34
 800960e:	e002      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009614:	e003      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009616:	e002      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800961c:	bf00      	nop
          }
        }
        break;
 800961e:	e388      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009620:	44020c00 	.word	0x44020c00
 8009624:	03d09000 	.word	0x03d09000
 8009628:	003d0900 	.word	0x003d0900
 800962c:	007a1200 	.word	0x007a1200
 8009630:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009634:	4ba9      	ldr	r3, [pc, #676]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800963a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800963e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009642:	2b20      	cmp	r3, #32
 8009644:	f200 809a 	bhi.w	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009648:	a201      	add	r2, pc, #4	@ (adr r2, 8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800964a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800964e:	bf00      	nop
 8009650:	080096d5 	.word	0x080096d5
 8009654:	0800977d 	.word	0x0800977d
 8009658:	0800977d 	.word	0x0800977d
 800965c:	0800977d 	.word	0x0800977d
 8009660:	0800977d 	.word	0x0800977d
 8009664:	0800977d 	.word	0x0800977d
 8009668:	0800977d 	.word	0x0800977d
 800966c:	0800977d 	.word	0x0800977d
 8009670:	080096e5 	.word	0x080096e5
 8009674:	0800977d 	.word	0x0800977d
 8009678:	0800977d 	.word	0x0800977d
 800967c:	0800977d 	.word	0x0800977d
 8009680:	0800977d 	.word	0x0800977d
 8009684:	0800977d 	.word	0x0800977d
 8009688:	0800977d 	.word	0x0800977d
 800968c:	0800977d 	.word	0x0800977d
 8009690:	080096f5 	.word	0x080096f5
 8009694:	0800977d 	.word	0x0800977d
 8009698:	0800977d 	.word	0x0800977d
 800969c:	0800977d 	.word	0x0800977d
 80096a0:	0800977d 	.word	0x0800977d
 80096a4:	0800977d 	.word	0x0800977d
 80096a8:	0800977d 	.word	0x0800977d
 80096ac:	0800977d 	.word	0x0800977d
 80096b0:	08009705 	.word	0x08009705
 80096b4:	0800977d 	.word	0x0800977d
 80096b8:	0800977d 	.word	0x0800977d
 80096bc:	0800977d 	.word	0x0800977d
 80096c0:	0800977d 	.word	0x0800977d
 80096c4:	0800977d 	.word	0x0800977d
 80096c8:	0800977d 	.word	0x0800977d
 80096cc:	0800977d 	.word	0x0800977d
 80096d0:	0800970b 	.word	0x0800970b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096d4:	f107 0320 	add.w	r3, r7, #32
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fd fb9b 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80096de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096e2:	e04e      	b.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096e4:	f107 0314 	add.w	r3, r7, #20
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fd fcff 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096f2:	e046      	b.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096f4:	f107 0308 	add.w	r3, r7, #8
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fd fe63 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009702:	e03e      	b.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009704:	4b76      	ldr	r3, [pc, #472]	@ (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009706:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009708:	e03b      	b.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800970a:	4b74      	ldr	r3, [pc, #464]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800970c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009710:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009714:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009716:	4b71      	ldr	r3, [pc, #452]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b02      	cmp	r3, #2
 8009720:	d10c      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8009722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009724:	2b00      	cmp	r3, #0
 8009726:	d109      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009728:	4b6c      	ldr	r3, [pc, #432]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	08db      	lsrs	r3, r3, #3
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	4a6c      	ldr	r2, [pc, #432]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009734:	fa22 f303 	lsr.w	r3, r2, r3
 8009738:	637b      	str	r3, [r7, #52]	@ 0x34
 800973a:	e01e      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800973c:	4b67      	ldr	r3, [pc, #412]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009748:	d106      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800974a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009750:	d102      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009752:	4b65      	ldr	r3, [pc, #404]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009754:	637b      	str	r3, [r7, #52]	@ 0x34
 8009756:	e010      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009758:	4b60      	ldr	r3, [pc, #384]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009764:	d106      	bne.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8009766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009768:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800976c:	d102      	bne.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800976e:	4b5f      	ldr	r3, [pc, #380]	@ (80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009770:	637b      	str	r3, [r7, #52]	@ 0x34
 8009772:	e002      	b.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009778:	e003      	b.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800977a:	e002      	b.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009780:	bf00      	nop
          }
        }
        break;
 8009782:	e2d6      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009784:	4b55      	ldr	r3, [pc, #340]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800978a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800978e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009796:	d031      	beq.n	80097fc <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8009798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800979e:	d866      	bhi.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80097a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80097a4:	d027      	beq.n	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80097aa:	d860      	bhi.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80097ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ae:	2b80      	cmp	r3, #128	@ 0x80
 80097b0:	d019      	beq.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80097b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b4:	2b80      	cmp	r3, #128	@ 0x80
 80097b6:	d85a      	bhi.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80097b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80097be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c0:	2b40      	cmp	r3, #64	@ 0x40
 80097c2:	d008      	beq.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80097c4:	e053      	b.n	800986e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097c6:	f107 0320 	add.w	r3, r7, #32
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7fd fb22 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097d4:	e04e      	b.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097d6:	f107 0314 	add.w	r3, r7, #20
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fd fc86 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097e4:	e046      	b.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097e6:	f107 0308 	add.w	r3, r7, #8
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7fd fdea 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097f4:	e03e      	b.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80097f6:	4b3a      	ldr	r3, [pc, #232]	@ (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80097f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097fa:	e03b      	b.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097fc:	4b37      	ldr	r3, [pc, #220]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80097fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009802:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009806:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009808:	4b34      	ldr	r3, [pc, #208]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0302 	and.w	r3, r3, #2
 8009810:	2b02      	cmp	r3, #2
 8009812:	d10c      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8009814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d109      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800981a:	4b30      	ldr	r3, [pc, #192]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	08db      	lsrs	r3, r3, #3
 8009820:	f003 0303 	and.w	r3, r3, #3
 8009824:	4a2f      	ldr	r2, [pc, #188]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009826:	fa22 f303 	lsr.w	r3, r2, r3
 800982a:	637b      	str	r3, [r7, #52]	@ 0x34
 800982c:	e01e      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800982e:	4b2b      	ldr	r3, [pc, #172]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009836:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800983a:	d106      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800983c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009842:	d102      	bne.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009844:	4b28      	ldr	r3, [pc, #160]	@ (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009846:	637b      	str	r3, [r7, #52]	@ 0x34
 8009848:	e010      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800984a:	4b24      	ldr	r3, [pc, #144]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009856:	d106      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800985a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800985e:	d102      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009860:	4b22      	ldr	r3, [pc, #136]	@ (80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009862:	637b      	str	r3, [r7, #52]	@ 0x34
 8009864:	e002      	b.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800986a:	e003      	b.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800986c:	e002      	b.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009872:	bf00      	nop
          }
        }
        break;
 8009874:	e25d      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009876:	4b19      	ldr	r3, [pc, #100]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800987c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009880:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009884:	2b00      	cmp	r3, #0
 8009886:	d103      	bne.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009888:	f7fb fb0e 	bl	8004ea8 <HAL_RCC_GetPCLK2Freq>
 800988c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800988e:	e250      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009890:	4b12      	ldr	r3, [pc, #72]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800989c:	d10b      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098a4:	d107      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098a6:	f107 0314 	add.w	r3, r7, #20
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fd fc1e 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b4:	e04f      	b.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80098b6:	4b09      	ldr	r3, [pc, #36]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098c2:	d115      	bne.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80098c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098ca:	d111      	bne.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098cc:	f107 0308 	add.w	r3, r7, #8
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fd fd77 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098da:	e03c      	b.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80098dc:	44020c00 	.word	0x44020c00
 80098e0:	00bb8000 	.word	0x00bb8000
 80098e4:	03d09000 	.word	0x03d09000
 80098e8:	003d0900 	.word	0x003d0900
 80098ec:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80098f0:	4b94      	ldr	r3, [pc, #592]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0302 	and.w	r3, r3, #2
 80098f8:	2b02      	cmp	r3, #2
 80098fa:	d10d      	bne.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80098fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009902:	d109      	bne.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009904:	4b8f      	ldr	r3, [pc, #572]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	08db      	lsrs	r3, r3, #3
 800990a:	f003 0303 	and.w	r3, r3, #3
 800990e:	4a8e      	ldr	r2, [pc, #568]	@ (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009910:	fa22 f303 	lsr.w	r3, r2, r3
 8009914:	637b      	str	r3, [r7, #52]	@ 0x34
 8009916:	e01e      	b.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009918:	4b8a      	ldr	r3, [pc, #552]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009924:	d106      	bne.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800992c:	d102      	bne.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800992e:	4b87      	ldr	r3, [pc, #540]	@ (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009930:	637b      	str	r3, [r7, #52]	@ 0x34
 8009932:	e010      	b.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009934:	4b83      	ldr	r3, [pc, #524]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800993c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009940:	d106      	bne.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009944:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009948:	d102      	bne.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800994a:	4b81      	ldr	r3, [pc, #516]	@ (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800994c:	637b      	str	r3, [r7, #52]	@ 0x34
 800994e:	e002      	b.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009950:	2300      	movs	r3, #0
 8009952:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009954:	e1ed      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009956:	e1ec      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009958:	4b7a      	ldr	r3, [pc, #488]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800995a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800995e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009962:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	2b00      	cmp	r3, #0
 8009968:	d103      	bne.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800996a:	f7fb fab3 	bl	8004ed4 <HAL_RCC_GetPCLK3Freq>
 800996e:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009970:	e1df      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009972:	4b74      	ldr	r3, [pc, #464]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800997a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800997e:	d10b      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009986:	d107      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009988:	f107 0314 	add.w	r3, r7, #20
 800998c:	4618      	mov	r0, r3
 800998e:	f7fd fbad 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	637b      	str	r3, [r7, #52]	@ 0x34
 8009996:	e045      	b.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009998:	4b6a      	ldr	r3, [pc, #424]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099a4:	d10b      	bne.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80099a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099ac:	d107      	bne.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099ae:	f107 0308 	add.w	r3, r7, #8
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fd fd06 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80099bc:	e032      	b.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80099be:	4b61      	ldr	r3, [pc, #388]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0302 	and.w	r3, r3, #2
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d10d      	bne.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80099ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099d0:	d109      	bne.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80099d2:	4b5c      	ldr	r3, [pc, #368]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	08db      	lsrs	r3, r3, #3
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	4a5a      	ldr	r2, [pc, #360]	@ (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80099de:	fa22 f303 	lsr.w	r3, r2, r3
 80099e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80099e4:	e01e      	b.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80099e6:	4b57      	ldr	r3, [pc, #348]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099f2:	d106      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80099f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80099fa:	d102      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80099fc:	4b53      	ldr	r3, [pc, #332]	@ (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80099fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a00:	e010      	b.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009a02:	4b50      	ldr	r3, [pc, #320]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a0e:	d106      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a12:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009a16:	d102      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009a18:	4b4d      	ldr	r3, [pc, #308]	@ (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a1c:	e002      	b.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a22:	e186      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a24:	e185      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009a26:	4b47      	ldr	r3, [pc, #284]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a2c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009a30:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d103      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009a38:	f7fb fa36 	bl	8004ea8 <HAL_RCC_GetPCLK2Freq>
 8009a3c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009a3e:	e178      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009a40:	4b40      	ldr	r3, [pc, #256]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a4c:	d10b      	bne.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a54:	d107      	bne.n	8009a66 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a56:	f107 0314 	add.w	r3, r7, #20
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fd fb46 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a64:	e045      	b.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009a66:	4b37      	ldr	r3, [pc, #220]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a72:	d10b      	bne.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a7a:	d107      	bne.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a7c:	f107 0308 	add.w	r3, r7, #8
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7fd fc9f 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a8a:	e032      	b.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 0302 	and.w	r3, r3, #2
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d10d      	bne.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009a9e:	d109      	bne.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009aa0:	4b28      	ldr	r3, [pc, #160]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	08db      	lsrs	r3, r3, #3
 8009aa6:	f003 0303 	and.w	r3, r3, #3
 8009aaa:	4a27      	ldr	r2, [pc, #156]	@ (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009aac:	fa22 f303 	lsr.w	r3, r2, r3
 8009ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab2:	e01e      	b.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009ab4:	4b23      	ldr	r3, [pc, #140]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ac0:	d106      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ac8:	d102      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8009aca:	4b20      	ldr	r3, [pc, #128]	@ (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ace:	e010      	b.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009adc:	d106      	bne.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009ae4:	d102      	bne.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aea:	e002      	b.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009aec:	2300      	movs	r3, #0
 8009aee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009af0:	e11f      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009af2:	e11e      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009af4:	4b13      	ldr	r3, [pc, #76]	@ (8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009af6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009afa:	f003 0303 	and.w	r3, r3, #3
 8009afe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	d85f      	bhi.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8009b06:	a201      	add	r2, pc, #4	@ (adr r2, 8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0c:	08009b1d 	.word	0x08009b1d
 8009b10:	08009b25 	.word	0x08009b25
 8009b14:	08009b35 	.word	0x08009b35
 8009b18:	08009b55 	.word	0x08009b55

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009b1c:	f7fb f992 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8009b20:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009b22:	e053      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b24:	f107 0320 	add.w	r3, r7, #32
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fd f973 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b32:	e04b      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b34:	f107 0314 	add.w	r3, r7, #20
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fd fad7 	bl	80070ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b42:	e043      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009b44:	44020c00 	.word	0x44020c00
 8009b48:	03d09000 	.word	0x03d09000
 8009b4c:	003d0900 	.word	0x003d0900
 8009b50:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b54:	4b79      	ldr	r3, [pc, #484]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b5a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b60:	4b76      	ldr	r3, [pc, #472]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0302 	and.w	r3, r3, #2
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d10c      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d109      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b72:	4b72      	ldr	r3, [pc, #456]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	08db      	lsrs	r3, r3, #3
 8009b78:	f003 0303 	and.w	r3, r3, #3
 8009b7c:	4a70      	ldr	r2, [pc, #448]	@ (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8009b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b84:	e01e      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b86:	4b6d      	ldr	r3, [pc, #436]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b92:	d106      	bne.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b9a:	d102      	bne.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b9c:	4b69      	ldr	r3, [pc, #420]	@ (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8009b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ba0:	e010      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ba2:	4b66      	ldr	r3, [pc, #408]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009baa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bae:	d106      	bne.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bb6:	d102      	bne.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009bb8:	4b63      	ldr	r3, [pc, #396]	@ (8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bbc:	e002      	b.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009bc2:	e003      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009bc4:	e002      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bca:	bf00      	nop
          }
        }
        break;
 8009bcc:	e0b1      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009bce:	4b5b      	ldr	r3, [pc, #364]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009bd4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009bd8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009bda:	4b58      	ldr	r3, [pc, #352]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d106      	bne.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d103      	bne.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8009bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bf4:	e01f      	b.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009bf6:	4b51      	ldr	r3, [pc, #324]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c04:	d106      	bne.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c08:	2b40      	cmp	r3, #64	@ 0x40
 8009c0a:	d103      	bne.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009c0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c12:	e010      	b.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009c14:	4b49      	ldr	r3, [pc, #292]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c20:	d106      	bne.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c24:	2b80      	cmp	r3, #128	@ 0x80
 8009c26:	d103      	bne.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009c28:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c2e:	e002      	b.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009c30:	2300      	movs	r3, #0
 8009c32:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009c34:	e07d      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c36:	e07c      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009c38:	4b40      	ldr	r3, [pc, #256]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c3e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009c42:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009c44:	4b3d      	ldr	r3, [pc, #244]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c50:	d105      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d102      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009c58:	4b3c      	ldr	r3, [pc, #240]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c5c:	e031      	b.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009c5e:	4b37      	ldr	r3, [pc, #220]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c6a:	d10a      	bne.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	2b10      	cmp	r3, #16
 8009c70:	d107      	bne.n	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c72:	f107 0320 	add.w	r3, r7, #32
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fd f8cc 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c80:	e01f      	b.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009c82:	4b2e      	ldr	r3, [pc, #184]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c88:	f003 0302 	and.w	r3, r3, #2
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d106      	bne.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c92:	2b20      	cmp	r3, #32
 8009c94:	d103      	bne.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c9c:	e011      	b.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009c9e:	4b27      	ldr	r3, [pc, #156]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cac:	d106      	bne.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb0:	2b30      	cmp	r3, #48	@ 0x30
 8009cb2:	d103      	bne.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009cb4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cba:	e002      	b.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009cc0:	e037      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009cc2:	e036      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009cc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009cca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009cce:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd2:	2b10      	cmp	r3, #16
 8009cd4:	d107      	bne.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cd6:	f107 0320 	add.w	r3, r7, #32
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fd f89a 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009ce4:	e025      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009ce6:	4b15      	ldr	r3, [pc, #84]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cf2:	d10a      	bne.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf6:	2b20      	cmp	r3, #32
 8009cf8:	d107      	bne.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cfa:	f107 0308 	add.w	r3, r7, #8
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fd fb60 	bl	80073c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d08:	e00f      	b.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d16:	d105      	bne.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1a:	2b30      	cmp	r3, #48	@ 0x30
 8009d1c:	d102      	bne.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d22:	e002      	b.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009d28:	e003      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d2a:	e002      	b.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d30:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8009d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	373c      	adds	r7, #60	@ 0x3c
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd90      	pop	{r4, r7, pc}
 8009d3c:	44020c00 	.word	0x44020c00
 8009d40:	03d09000 	.word	0x03d09000
 8009d44:	003d0900 	.word	0x003d0900
 8009d48:	007a1200 	.word	0x007a1200
 8009d4c:	02dc6c00 	.word	0x02dc6c00

08009d50 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009d58:	4b48      	ldr	r3, [pc, #288]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a47      	ldr	r2, [pc, #284]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009d5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009d64:	f7f7 ff6a 	bl	8001c3c <HAL_GetTick>
 8009d68:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d6a:	e008      	b.n	8009d7e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d6c:	f7f7 ff66 	bl	8001c3c <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d901      	bls.n	8009d7e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e07a      	b.n	8009e74 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1f0      	bne.n	8009d6c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d8e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009d92:	f023 0303 	bic.w	r3, r3, #3
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	6811      	ldr	r1, [r2, #0]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	6852      	ldr	r2, [r2, #4]
 8009d9e:	0212      	lsls	r2, r2, #8
 8009da0:	430a      	orrs	r2, r1
 8009da2:	4936      	ldr	r1, [pc, #216]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009da4:	4313      	orrs	r3, r2
 8009da6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	025b      	lsls	r3, r3, #9
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	431a      	orrs	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	041b      	lsls	r3, r3, #16
 8009dc6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009dca:	431a      	orrs	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	061b      	lsls	r3, r3, #24
 8009dd4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009dd8:	4928      	ldr	r1, [pc, #160]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009dde:	4b27      	ldr	r3, [pc, #156]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de2:	f023 020c 	bic.w	r2, r3, #12
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	699b      	ldr	r3, [r3, #24]
 8009dea:	4924      	ldr	r1, [pc, #144]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009df0:	4b22      	ldr	r3, [pc, #136]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df4:	f023 0220 	bic.w	r2, r3, #32
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	491f      	ldr	r1, [pc, #124]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009e02:	4b1e      	ldr	r3, [pc, #120]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e0a:	491c      	ldr	r1, [pc, #112]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009e10:	4b1a      	ldr	r3, [pc, #104]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e14:	4a19      	ldr	r2, [pc, #100]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009e16:	f023 0310 	bic.w	r3, r3, #16
 8009e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009e1c:	4b17      	ldr	r3, [pc, #92]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e24:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6a12      	ldr	r2, [r2, #32]
 8009e2c:	00d2      	lsls	r2, r2, #3
 8009e2e:	4913      	ldr	r1, [pc, #76]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009e30:	4313      	orrs	r3, r2
 8009e32:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009e34:	4b11      	ldr	r3, [pc, #68]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e38:	4a10      	ldr	r2, [pc, #64]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009e3a:	f043 0310 	orr.w	r3, r3, #16
 8009e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009e40:	4b0e      	ldr	r3, [pc, #56]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a0d      	ldr	r2, [pc, #52]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009e46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009e4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009e4c:	f7f7 fef6 	bl	8001c3c <HAL_GetTick>
 8009e50:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e52:	e008      	b.n	8009e66 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e54:	f7f7 fef2 	bl	8001c3c <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d901      	bls.n	8009e66 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e006      	b.n	8009e74 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e66:	4b05      	ldr	r3, [pc, #20]	@ (8009e7c <RCCEx_PLL2_Config+0x12c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0f0      	beq.n	8009e54 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009e72:	2300      	movs	r3, #0

}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	44020c00 	.word	0x44020c00

08009e80 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009e88:	4b48      	ldr	r3, [pc, #288]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a47      	ldr	r2, [pc, #284]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e92:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009e94:	f7f7 fed2 	bl	8001c3c <HAL_GetTick>
 8009e98:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e9a:	e008      	b.n	8009eae <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009e9c:	f7f7 fece 	bl	8001c3c <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d901      	bls.n	8009eae <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e07a      	b.n	8009fa4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009eae:	4b3f      	ldr	r3, [pc, #252]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1f0      	bne.n	8009e9c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009eba:	4b3c      	ldr	r3, [pc, #240]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ebe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009ec2:	f023 0303 	bic.w	r3, r3, #3
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	6811      	ldr	r1, [r2, #0]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	6852      	ldr	r2, [r2, #4]
 8009ece:	0212      	lsls	r2, r2, #8
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	4936      	ldr	r1, [pc, #216]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	630b      	str	r3, [r1, #48]	@ 0x30
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	025b      	lsls	r3, r3, #9
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	431a      	orrs	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	041b      	lsls	r3, r3, #16
 8009ef6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009efa:	431a      	orrs	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	3b01      	subs	r3, #1
 8009f02:	061b      	lsls	r3, r3, #24
 8009f04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009f08:	4928      	ldr	r1, [pc, #160]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f0e:	4b27      	ldr	r3, [pc, #156]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f12:	f023 020c 	bic.w	r2, r3, #12
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	4924      	ldr	r1, [pc, #144]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009f20:	4b22      	ldr	r3, [pc, #136]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f24:	f023 0220 	bic.w	r2, r3, #32
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	69db      	ldr	r3, [r3, #28]
 8009f2c:	491f      	ldr	r1, [pc, #124]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009f32:	4b1e      	ldr	r3, [pc, #120]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f3a:	491c      	ldr	r1, [pc, #112]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009f40:	4b1a      	ldr	r3, [pc, #104]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f44:	4a19      	ldr	r2, [pc, #100]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f46:	f023 0310 	bic.w	r3, r3, #16
 8009f4a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009f4c:	4b17      	ldr	r3, [pc, #92]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f54:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	6a12      	ldr	r2, [r2, #32]
 8009f5c:	00d2      	lsls	r2, r2, #3
 8009f5e:	4913      	ldr	r1, [pc, #76]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009f64:	4b11      	ldr	r3, [pc, #68]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f68:	4a10      	ldr	r2, [pc, #64]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f6a:	f043 0310 	orr.w	r3, r3, #16
 8009f6e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009f70:	4b0e      	ldr	r3, [pc, #56]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a0d      	ldr	r2, [pc, #52]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f7c:	f7f7 fe5e 	bl	8001c3c <HAL_GetTick>
 8009f80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f82:	e008      	b.n	8009f96 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f84:	f7f7 fe5a 	bl	8001c3c <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d901      	bls.n	8009f96 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e006      	b.n	8009fa4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009f96:	4b05      	ldr	r3, [pc, #20]	@ (8009fac <RCCEx_PLL3_Config+0x12c>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d0f0      	beq.n	8009f84 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	44020c00 	.word	0x44020c00

08009fb0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e08c      	b.n	800a0dc <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	7a5b      	ldrb	r3, [r3, #9]
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d105      	bne.n	8009fd8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7f6 ff94 	bl	8000f00 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f022 0204 	bic.w	r2, r2, #4
 8009fec:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6859      	ldr	r1, [r3, #4]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	4b3b      	ldr	r3, [pc, #236]	@ (800a0e4 <HAL_RNG_Init+0x134>)
 8009ff8:	430b      	orrs	r3, r1
 8009ffa:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800a004:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a37      	ldr	r2, [pc, #220]	@ (800a0e8 <HAL_RNG_Init+0x138>)
 800a00c:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a01c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a01e:	f7f7 fe0d 	bl	8001c3c <HAL_GetTick>
 800a022:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a024:	e016      	b.n	800a054 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a026:	f7f7 fe09 	bl	8001c3c <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	2b04      	cmp	r3, #4
 800a032:	d90f      	bls.n	800a054 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a03e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a042:	d107      	bne.n	800a054 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2202      	movs	r2, #2
 800a04e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e043      	b.n	800a0dc <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a05e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a062:	d0e0      	beq.n	800a026 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f042 0204 	orr.w	r2, r2, #4
 800a072:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a07e:	2b40      	cmp	r3, #64	@ 0x40
 800a080:	d104      	bne.n	800a08c <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2204      	movs	r2, #4
 800a086:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e027      	b.n	800a0dc <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a08c:	f7f7 fdd6 	bl	8001c3c <HAL_GetTick>
 800a090:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a092:	e015      	b.n	800a0c0 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a094:	f7f7 fdd2 	bl	8001c3c <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d90e      	bls.n	800a0c0 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	f003 0301 	and.w	r3, r3, #1
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d007      	beq.n	800a0c0 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2204      	movs	r2, #4
 800a0b4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e00d      	b.n	800a0dc <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d1e2      	bne.n	800a094 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	40f00e00 	.word	0x40f00e00
 800a0e8:	0003af66 	.word	0x0003af66

0800a0ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d071      	beq.n	800a1e2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b00      	cmp	r3, #0
 800a108:	d106      	bne.n	800a118 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7f6 ff4c 	bl	8000fb0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a120:	4b32      	ldr	r3, [pc, #200]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	f003 0310 	and.w	r3, r3, #16
 800a128:	2b10      	cmp	r3, #16
 800a12a:	d051      	beq.n	800a1d0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a12c:	4b2f      	ldr	r3, [pc, #188]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a12e:	22ca      	movs	r2, #202	@ 0xca
 800a130:	625a      	str	r2, [r3, #36]	@ 0x24
 800a132:	4b2e      	ldr	r3, [pc, #184]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a134:	2253      	movs	r2, #83	@ 0x53
 800a136:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f9a3 	bl	800a484 <RTC_EnterInitMode>
 800a13e:	4603      	mov	r3, r0
 800a140:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d13f      	bne.n	800a1c8 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a148:	4b28      	ldr	r3, [pc, #160]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	4a27      	ldr	r2, [pc, #156]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a14e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a152:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a156:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a158:	4b24      	ldr	r3, [pc, #144]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a15a:	699a      	ldr	r2, [r3, #24]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6859      	ldr	r1, [r3, #4]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	4319      	orrs	r1, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	430b      	orrs	r3, r1
 800a16c:	491f      	ldr	r1, [pc, #124]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68da      	ldr	r2, [r3, #12]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	041b      	lsls	r3, r3, #16
 800a17c:	491b      	ldr	r1, [pc, #108]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a17e:	4313      	orrs	r3, r2
 800a180:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a182:	4b1a      	ldr	r3, [pc, #104]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a192:	430b      	orrs	r3, r1
 800a194:	4915      	ldr	r1, [pc, #84]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a196:	4313      	orrs	r3, r2
 800a198:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f9ae 	bl	800a4fc <RTC_ExitInitMode>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800a1a4:	7bfb      	ldrb	r3, [r7, #15]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10e      	bne.n	800a1c8 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800a1aa:	4b10      	ldr	r3, [pc, #64]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a19      	ldr	r1, [r3, #32]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	69db      	ldr	r3, [r3, #28]
 800a1ba:	4319      	orrs	r1, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	430b      	orrs	r3, r1
 800a1c2:	490a      	ldr	r1, [pc, #40]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1c8:	4b08      	ldr	r3, [pc, #32]	@ (800a1ec <HAL_RTC_Init+0x100>)
 800a1ca:	22ff      	movs	r2, #255	@ 0xff
 800a1cc:	625a      	str	r2, [r3, #36]	@ 0x24
 800a1ce:	e001      	b.n	800a1d4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d103      	bne.n	800a1e2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800a1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	44007800 	.word	0x44007800

0800a1f0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a1f0:	b590      	push	{r4, r7, lr}
 800a1f2:	b087      	sub	sp, #28
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a202:	2b01      	cmp	r3, #1
 800a204:	d101      	bne.n	800a20a <HAL_RTC_SetTime+0x1a>
 800a206:	2302      	movs	r3, #2
 800a208:	e07e      	b.n	800a308 <HAL_RTC_SetTime+0x118>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2202      	movs	r2, #2
 800a216:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a21a:	4b3d      	ldr	r3, [pc, #244]	@ (800a310 <HAL_RTC_SetTime+0x120>)
 800a21c:	22ca      	movs	r2, #202	@ 0xca
 800a21e:	625a      	str	r2, [r3, #36]	@ 0x24
 800a220:	4b3b      	ldr	r3, [pc, #236]	@ (800a310 <HAL_RTC_SetTime+0x120>)
 800a222:	2253      	movs	r2, #83	@ 0x53
 800a224:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f000 f92c 	bl	800a484 <RTC_EnterInitMode>
 800a22c:	4603      	mov	r3, r0
 800a22e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a230:	7cfb      	ldrb	r3, [r7, #19]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d159      	bne.n	800a2ea <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a236:	4b36      	ldr	r3, [pc, #216]	@ (800a310 <HAL_RTC_SetTime+0x120>)
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a23e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a242:	d04d      	beq.n	800a2e0 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d125      	bne.n	800a296 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a24a:	4b31      	ldr	r3, [pc, #196]	@ (800a310 <HAL_RTC_SetTime+0x120>)
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a252:	2b00      	cmp	r3, #0
 800a254:	d102      	bne.n	800a25c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	2200      	movs	r2, #0
 800a25a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	4618      	mov	r0, r3
 800a262:	f000 f989 	bl	800a578 <RTC_ByteToBcd2>
 800a266:	4603      	mov	r3, r0
 800a268:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	785b      	ldrb	r3, [r3, #1]
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 f982 	bl	800a578 <RTC_ByteToBcd2>
 800a274:	4603      	mov	r3, r0
 800a276:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a278:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	789b      	ldrb	r3, [r3, #2]
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 f97a 	bl	800a578 <RTC_ByteToBcd2>
 800a284:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a286:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	78db      	ldrb	r3, [r3, #3]
 800a28e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a290:	4313      	orrs	r3, r2
 800a292:	617b      	str	r3, [r7, #20]
 800a294:	e017      	b.n	800a2c6 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a296:	4b1e      	ldr	r3, [pc, #120]	@ (800a310 <HAL_RTC_SetTime+0x120>)
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d102      	bne.n	800a2a8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a2b4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a2ba:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	78db      	ldrb	r3, [r3, #3]
 800a2c0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a2c6:	4a12      	ldr	r2, [pc, #72]	@ (800a310 <HAL_RTC_SetTime+0x120>)
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a2ce:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a2d2:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a2d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a310 <HAL_RTC_SetTime+0x120>)
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	4a0d      	ldr	r2, [pc, #52]	@ (800a310 <HAL_RTC_SetTime+0x120>)
 800a2da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a2de:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f000 f90b 	bl	800a4fc <RTC_ExitInitMode>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2ea:	4b09      	ldr	r3, [pc, #36]	@ (800a310 <HAL_RTC_SetTime+0x120>)
 800a2ec:	22ff      	movs	r2, #255	@ 0xff
 800a2ee:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a2f0:	7cfb      	ldrb	r3, [r7, #19]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d103      	bne.n	800a2fe <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a306:	7cfb      	ldrb	r3, [r7, #19]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	371c      	adds	r7, #28
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd90      	pop	{r4, r7, pc}
 800a310:	44007800 	.word	0x44007800

0800a314 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a314:	b590      	push	{r4, r7, lr}
 800a316:	b087      	sub	sp, #28
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a326:	2b01      	cmp	r3, #1
 800a328:	d101      	bne.n	800a32e <HAL_RTC_SetDate+0x1a>
 800a32a:	2302      	movs	r3, #2
 800a32c:	e071      	b.n	800a412 <HAL_RTC_SetDate+0xfe>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2202      	movs	r2, #2
 800a33a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10e      	bne.n	800a362 <HAL_RTC_SetDate+0x4e>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	785b      	ldrb	r3, [r3, #1]
 800a348:	f003 0310 	and.w	r3, r3, #16
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d008      	beq.n	800a362 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	f023 0310 	bic.w	r3, r3, #16
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	330a      	adds	r3, #10
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d11c      	bne.n	800a3a2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	78db      	ldrb	r3, [r3, #3]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 f903 	bl	800a578 <RTC_ByteToBcd2>
 800a372:	4603      	mov	r3, r0
 800a374:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	785b      	ldrb	r3, [r3, #1]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 f8fc 	bl	800a578 <RTC_ByteToBcd2>
 800a380:	4603      	mov	r3, r0
 800a382:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a384:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	789b      	ldrb	r3, [r3, #2]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 f8f4 	bl	800a578 <RTC_ByteToBcd2>
 800a390:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a392:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a39c:	4313      	orrs	r3, r2
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	e00e      	b.n	800a3c0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	78db      	ldrb	r3, [r3, #3]
 800a3a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	785b      	ldrb	r3, [r3, #1]
 800a3ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a3ae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a3b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a3c0:	4b16      	ldr	r3, [pc, #88]	@ (800a41c <HAL_RTC_SetDate+0x108>)
 800a3c2:	22ca      	movs	r2, #202	@ 0xca
 800a3c4:	625a      	str	r2, [r3, #36]	@ 0x24
 800a3c6:	4b15      	ldr	r3, [pc, #84]	@ (800a41c <HAL_RTC_SetDate+0x108>)
 800a3c8:	2253      	movs	r2, #83	@ 0x53
 800a3ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f000 f859 	bl	800a484 <RTC_EnterInitMode>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a3d6:	7cfb      	ldrb	r3, [r7, #19]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10b      	bne.n	800a3f4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a3dc:	4a0f      	ldr	r2, [pc, #60]	@ (800a41c <HAL_RTC_SetDate+0x108>)
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a3e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a3e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f000 f886 	bl	800a4fc <RTC_ExitInitMode>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3f4:	4b09      	ldr	r3, [pc, #36]	@ (800a41c <HAL_RTC_SetDate+0x108>)
 800a3f6:	22ff      	movs	r2, #255	@ 0xff
 800a3f8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a3fa:	7cfb      	ldrb	r3, [r7, #19]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d103      	bne.n	800a408 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a410:	7cfb      	ldrb	r3, [r7, #19]
}
 800a412:	4618      	mov	r0, r3
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	bd90      	pop	{r4, r7, pc}
 800a41a:	bf00      	nop
 800a41c:	44007800 	.word	0x44007800

0800a420 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a428:	4b15      	ldr	r3, [pc, #84]	@ (800a480 <HAL_RTC_WaitForSynchro+0x60>)
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	4a14      	ldr	r2, [pc, #80]	@ (800a480 <HAL_RTC_WaitForSynchro+0x60>)
 800a42e:	f023 0320 	bic.w	r3, r3, #32
 800a432:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a434:	f7f7 fc02 	bl	8001c3c <HAL_GetTick>
 800a438:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a43a:	e013      	b.n	800a464 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a43c:	f7f7 fbfe 	bl	8001c3c <HAL_GetTick>
 800a440:	4602      	mov	r2, r0
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	1ad3      	subs	r3, r2, r3
 800a446:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a44a:	d90b      	bls.n	800a464 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a44c:	4b0c      	ldr	r3, [pc, #48]	@ (800a480 <HAL_RTC_WaitForSynchro+0x60>)
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	f003 0320 	and.w	r3, r3, #32
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10c      	bne.n	800a472 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2203      	movs	r2, #3
 800a45c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800a460:	2303      	movs	r3, #3
 800a462:	e008      	b.n	800a476 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a464:	4b06      	ldr	r3, [pc, #24]	@ (800a480 <HAL_RTC_WaitForSynchro+0x60>)
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	f003 0320 	and.w	r3, r3, #32
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0e5      	beq.n	800a43c <HAL_RTC_WaitForSynchro+0x1c>
 800a470:	e000      	b.n	800a474 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a472:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	44007800 	.word	0x44007800

0800a484 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a490:	4b19      	ldr	r3, [pc, #100]	@ (800a4f8 <RTC_EnterInitMode+0x74>)
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d128      	bne.n	800a4ee <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a49c:	4b16      	ldr	r3, [pc, #88]	@ (800a4f8 <RTC_EnterInitMode+0x74>)
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	4a15      	ldr	r2, [pc, #84]	@ (800a4f8 <RTC_EnterInitMode+0x74>)
 800a4a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4a6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a4a8:	f7f7 fbc8 	bl	8001c3c <HAL_GetTick>
 800a4ac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a4ae:	e013      	b.n	800a4d8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a4b0:	f7f7 fbc4 	bl	8001c3c <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a4be:	d90b      	bls.n	800a4d8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a4c0:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f8 <RTC_EnterInitMode+0x74>)
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10f      	bne.n	800a4ec <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a4d8:	4b07      	ldr	r3, [pc, #28]	@ (800a4f8 <RTC_EnterInitMode+0x74>)
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d104      	bne.n	800a4ee <RTC_EnterInitMode+0x6a>
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	d1e2      	bne.n	800a4b0 <RTC_EnterInitMode+0x2c>
 800a4ea:	e000      	b.n	800a4ee <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800a4ec:	bf00      	nop
        }
      }
    }
  }

  return status;
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	44007800 	.word	0x44007800

0800a4fc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a508:	4b1a      	ldr	r3, [pc, #104]	@ (800a574 <RTC_ExitInitMode+0x78>)
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	4a19      	ldr	r2, [pc, #100]	@ (800a574 <RTC_ExitInitMode+0x78>)
 800a50e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a512:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a514:	4b17      	ldr	r3, [pc, #92]	@ (800a574 <RTC_ExitInitMode+0x78>)
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	f003 0320 	and.w	r3, r3, #32
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10c      	bne.n	800a53a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7ff ff7d 	bl	800a420 <HAL_RTC_WaitForSynchro>
 800a526:	4603      	mov	r3, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d01e      	beq.n	800a56a <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2203      	movs	r2, #3
 800a530:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	73fb      	strb	r3, [r7, #15]
 800a538:	e017      	b.n	800a56a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a53a:	4b0e      	ldr	r3, [pc, #56]	@ (800a574 <RTC_ExitInitMode+0x78>)
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	4a0d      	ldr	r2, [pc, #52]	@ (800a574 <RTC_ExitInitMode+0x78>)
 800a540:	f023 0320 	bic.w	r3, r3, #32
 800a544:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7ff ff6a 	bl	800a420 <HAL_RTC_WaitForSynchro>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d005      	beq.n	800a55e <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2203      	movs	r2, #3
 800a556:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a55a:	2303      	movs	r3, #3
 800a55c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a55e:	4b05      	ldr	r3, [pc, #20]	@ (800a574 <RTC_ExitInitMode+0x78>)
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	4a04      	ldr	r2, [pc, #16]	@ (800a574 <RTC_ExitInitMode+0x78>)
 800a564:	f043 0320 	orr.w	r3, r3, #32
 800a568:	6193      	str	r3, [r2, #24]
  }
  return status;
 800a56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	44007800 	.word	0x44007800

0800a578 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	4603      	mov	r3, r0
 800a580:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800a582:	2300      	movs	r3, #0
 800a584:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800a586:	79fb      	ldrb	r3, [r7, #7]
 800a588:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800a58a:	e005      	b.n	800a598 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800a592:	7afb      	ldrb	r3, [r7, #11]
 800a594:	3b0a      	subs	r3, #10
 800a596:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	2b09      	cmp	r3, #9
 800a59c:	d8f6      	bhi.n	800a58c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	011b      	lsls	r3, r3, #4
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	7afb      	ldrb	r3, [r7, #11]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	b2db      	uxtb	r3, r3
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3714      	adds	r7, #20
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	4910      	ldr	r1, [pc, #64]	@ (800a60c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	689a      	ldr	r2, [r3, #8]
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	431a      	orrs	r2, r3
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	490c      	ldr	r1, [pc, #48]	@ (800a610 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800a5e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a610 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a5e6:	6a1b      	ldr	r3, [r3, #32]
 800a5e8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	6919      	ldr	r1, [r3, #16]
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	695b      	ldr	r3, [r3, #20]
 800a5f4:	041b      	lsls	r3, r3, #16
 800a5f6:	430b      	orrs	r3, r1
 800a5f8:	4905      	ldr	r1, [pc, #20]	@ (800a610 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	44007800 	.word	0x44007800
 800a610:	44007c00 	.word	0x44007c00

0800a614 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e162      	b.n	800a8ec <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a70      	ldr	r2, [pc, #448]	@ (800a7ec <HAL_SPI_Init+0x1d8>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d018      	beq.n	800a662 <HAL_SPI_Init+0x4e>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a6e      	ldr	r2, [pc, #440]	@ (800a7f0 <HAL_SPI_Init+0x1dc>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d013      	beq.n	800a662 <HAL_SPI_Init+0x4e>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a6d      	ldr	r2, [pc, #436]	@ (800a7f4 <HAL_SPI_Init+0x1e0>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d00e      	beq.n	800a662 <HAL_SPI_Init+0x4e>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a6b      	ldr	r2, [pc, #428]	@ (800a7f8 <HAL_SPI_Init+0x1e4>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d009      	beq.n	800a662 <HAL_SPI_Init+0x4e>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a6a      	ldr	r2, [pc, #424]	@ (800a7fc <HAL_SPI_Init+0x1e8>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d004      	beq.n	800a662 <HAL_SPI_Init+0x4e>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a68      	ldr	r2, [pc, #416]	@ (800a800 <HAL_SPI_Init+0x1ec>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	e000      	b.n	800a664 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a662:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a5f      	ldr	r2, [pc, #380]	@ (800a7ec <HAL_SPI_Init+0x1d8>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d018      	beq.n	800a6a6 <HAL_SPI_Init+0x92>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a5d      	ldr	r2, [pc, #372]	@ (800a7f0 <HAL_SPI_Init+0x1dc>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d013      	beq.n	800a6a6 <HAL_SPI_Init+0x92>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a5c      	ldr	r2, [pc, #368]	@ (800a7f4 <HAL_SPI_Init+0x1e0>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d00e      	beq.n	800a6a6 <HAL_SPI_Init+0x92>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a5a      	ldr	r2, [pc, #360]	@ (800a7f8 <HAL_SPI_Init+0x1e4>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d009      	beq.n	800a6a6 <HAL_SPI_Init+0x92>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a59      	ldr	r2, [pc, #356]	@ (800a7fc <HAL_SPI_Init+0x1e8>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d004      	beq.n	800a6a6 <HAL_SPI_Init+0x92>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a57      	ldr	r2, [pc, #348]	@ (800a800 <HAL_SPI_Init+0x1ec>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d105      	bne.n	800a6b2 <HAL_SPI_Init+0x9e>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	2b0f      	cmp	r3, #15
 800a6ac:	d901      	bls.n	800a6b2 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e11c      	b.n	800a8ec <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f91e 	bl	800a8f4 <SPI_GetPacketSize>
 800a6b8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a4b      	ldr	r2, [pc, #300]	@ (800a7ec <HAL_SPI_Init+0x1d8>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d018      	beq.n	800a6f6 <HAL_SPI_Init+0xe2>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a49      	ldr	r2, [pc, #292]	@ (800a7f0 <HAL_SPI_Init+0x1dc>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d013      	beq.n	800a6f6 <HAL_SPI_Init+0xe2>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a48      	ldr	r2, [pc, #288]	@ (800a7f4 <HAL_SPI_Init+0x1e0>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d00e      	beq.n	800a6f6 <HAL_SPI_Init+0xe2>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a46      	ldr	r2, [pc, #280]	@ (800a7f8 <HAL_SPI_Init+0x1e4>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d009      	beq.n	800a6f6 <HAL_SPI_Init+0xe2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a45      	ldr	r2, [pc, #276]	@ (800a7fc <HAL_SPI_Init+0x1e8>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d004      	beq.n	800a6f6 <HAL_SPI_Init+0xe2>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a43      	ldr	r2, [pc, #268]	@ (800a800 <HAL_SPI_Init+0x1ec>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d102      	bne.n	800a6fc <HAL_SPI_Init+0xe8>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d820      	bhi.n	800a73e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a700:	4a40      	ldr	r2, [pc, #256]	@ (800a804 <HAL_SPI_Init+0x1f0>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d018      	beq.n	800a738 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a3f      	ldr	r2, [pc, #252]	@ (800a808 <HAL_SPI_Init+0x1f4>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d013      	beq.n	800a738 <HAL_SPI_Init+0x124>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a3d      	ldr	r2, [pc, #244]	@ (800a80c <HAL_SPI_Init+0x1f8>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00e      	beq.n	800a738 <HAL_SPI_Init+0x124>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a3c      	ldr	r2, [pc, #240]	@ (800a810 <HAL_SPI_Init+0x1fc>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d009      	beq.n	800a738 <HAL_SPI_Init+0x124>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a3a      	ldr	r2, [pc, #232]	@ (800a814 <HAL_SPI_Init+0x200>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d004      	beq.n	800a738 <HAL_SPI_Init+0x124>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a39      	ldr	r2, [pc, #228]	@ (800a818 <HAL_SPI_Init+0x204>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d104      	bne.n	800a742 <HAL_SPI_Init+0x12e>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2b10      	cmp	r3, #16
 800a73c:	d901      	bls.n	800a742 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e0d4      	b.n	800a8ec <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d106      	bne.n	800a75c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f7f6 fc8a 	bl	8001070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2202      	movs	r2, #2
 800a760:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f022 0201 	bic.w	r2, r2, #1
 800a772:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a77e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a788:	d119      	bne.n	800a7be <HAL_SPI_Init+0x1aa>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a792:	d103      	bne.n	800a79c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d008      	beq.n	800a7ae <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10c      	bne.n	800a7be <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a7a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7ac:	d107      	bne.n	800a7be <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a7bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d028      	beq.n	800a81c <HAL_SPI_Init+0x208>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	2b06      	cmp	r3, #6
 800a7d0:	d924      	bls.n	800a81c <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	430a      	orrs	r2, r1
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	e020      	b.n	800a82c <HAL_SPI_Init+0x218>
 800a7ea:	bf00      	nop
 800a7ec:	40014c00 	.word	0x40014c00
 800a7f0:	50014c00 	.word	0x50014c00
 800a7f4:	44002000 	.word	0x44002000
 800a7f8:	54002000 	.word	0x54002000
 800a7fc:	40015000 	.word	0x40015000
 800a800:	50015000 	.word	0x50015000
 800a804:	40013000 	.word	0x40013000
 800a808:	50013000 	.word	0x50013000
 800a80c:	40003800 	.word	0x40003800
 800a810:	50003800 	.word	0x50003800
 800a814:	40003c00 	.word	0x40003c00
 800a818:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a82a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	69da      	ldr	r2, [r3, #28]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a834:	431a      	orrs	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	431a      	orrs	r2, r3
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a83e:	ea42 0103 	orr.w	r1, r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68da      	ldr	r2, [r3, #12]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	430a      	orrs	r2, r1
 800a84c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a856:	431a      	orrs	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a85c:	431a      	orrs	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	431a      	orrs	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	431a      	orrs	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	431a      	orrs	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a1b      	ldr	r3, [r3, #32]
 800a874:	431a      	orrs	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	431a      	orrs	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a880:	431a      	orrs	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	431a      	orrs	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a88c:	431a      	orrs	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a892:	431a      	orrs	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a898:	ea42 0103 	orr.w	r1, r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f022 0201 	bic.w	r2, r2, #1
 800a8b6:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00a      	beq.n	800a8da <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a900:	095b      	lsrs	r3, r3, #5
 800a902:	3301      	adds	r3, #1
 800a904:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	3301      	adds	r3, #1
 800a90c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	3307      	adds	r3, #7
 800a912:	08db      	lsrs	r3, r3, #3
 800a914:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d101      	bne.n	800a93c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	e042      	b.n	800a9c2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a942:	2b00      	cmp	r3, #0
 800a944:	d106      	bne.n	800a954 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7f6 fc4a 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2224      	movs	r2, #36	@ 0x24
 800a958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f022 0201 	bic.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fa17 	bl	800ada8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f826 	bl	800a9cc <UART_SetConfig>
 800a980:	4603      	mov	r3, r0
 800a982:	2b01      	cmp	r3, #1
 800a984:	d101      	bne.n	800a98a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e01b      	b.n	800a9c2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	685a      	ldr	r2, [r3, #4]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a998:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689a      	ldr	r2, [r3, #8]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a9a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f042 0201 	orr.w	r2, r2, #1
 800a9b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 fa96 	bl	800aeec <UART_CheckIdleState>
 800a9c0:	4603      	mov	r3, r0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
	...

0800a9cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9d0:	b094      	sub	sp, #80	@ 0x50
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	4b78      	ldr	r3, [pc, #480]	@ (800abc4 <UART_SetConfig+0x1f8>)
 800a9e2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e6:	689a      	ldr	r2, [r3, #8]
 800a9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	431a      	orrs	r2, r3
 800a9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f0:	695b      	ldr	r3, [r3, #20]
 800a9f2:	431a      	orrs	r2, r3
 800a9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4971      	ldr	r1, [pc, #452]	@ (800abc8 <UART_SetConfig+0x1fc>)
 800aa04:	4019      	ands	r1, r3
 800aa06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa0c:	430b      	orrs	r3, r1
 800aa0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aa1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa1c:	68d9      	ldr	r1, [r3, #12]
 800aa1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	ea40 0301 	orr.w	r3, r0, r1
 800aa26:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	4b64      	ldr	r3, [pc, #400]	@ (800abc4 <UART_SetConfig+0x1f8>)
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d009      	beq.n	800aa4c <UART_SetConfig+0x80>
 800aa38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	4b63      	ldr	r3, [pc, #396]	@ (800abcc <UART_SetConfig+0x200>)
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d004      	beq.n	800aa4c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa44:	6a1a      	ldr	r2, [r3, #32]
 800aa46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800aa56:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800aa5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa60:	430b      	orrs	r3, r1
 800aa62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa6a:	f023 000f 	bic.w	r0, r3, #15
 800aa6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa70:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800aa72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	ea40 0301 	orr.w	r3, r0, r1
 800aa7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	4b53      	ldr	r3, [pc, #332]	@ (800abd0 <UART_SetConfig+0x204>)
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d102      	bne.n	800aa8c <UART_SetConfig+0xc0>
 800aa86:	2301      	movs	r3, #1
 800aa88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa8a:	e066      	b.n	800ab5a <UART_SetConfig+0x18e>
 800aa8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	4b50      	ldr	r3, [pc, #320]	@ (800abd4 <UART_SetConfig+0x208>)
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d102      	bne.n	800aa9c <UART_SetConfig+0xd0>
 800aa96:	2302      	movs	r3, #2
 800aa98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa9a:	e05e      	b.n	800ab5a <UART_SetConfig+0x18e>
 800aa9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	4b4d      	ldr	r3, [pc, #308]	@ (800abd8 <UART_SetConfig+0x20c>)
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d102      	bne.n	800aaac <UART_SetConfig+0xe0>
 800aaa6:	2304      	movs	r3, #4
 800aaa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaaa:	e056      	b.n	800ab5a <UART_SetConfig+0x18e>
 800aaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	4b4a      	ldr	r3, [pc, #296]	@ (800abdc <UART_SetConfig+0x210>)
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d102      	bne.n	800aabc <UART_SetConfig+0xf0>
 800aab6:	2308      	movs	r3, #8
 800aab8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaba:	e04e      	b.n	800ab5a <UART_SetConfig+0x18e>
 800aabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	4b47      	ldr	r3, [pc, #284]	@ (800abe0 <UART_SetConfig+0x214>)
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d102      	bne.n	800aacc <UART_SetConfig+0x100>
 800aac6:	2310      	movs	r3, #16
 800aac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaca:	e046      	b.n	800ab5a <UART_SetConfig+0x18e>
 800aacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	4b44      	ldr	r3, [pc, #272]	@ (800abe4 <UART_SetConfig+0x218>)
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d102      	bne.n	800aadc <UART_SetConfig+0x110>
 800aad6:	2320      	movs	r3, #32
 800aad8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aada:	e03e      	b.n	800ab5a <UART_SetConfig+0x18e>
 800aadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	4b41      	ldr	r3, [pc, #260]	@ (800abe8 <UART_SetConfig+0x21c>)
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d102      	bne.n	800aaec <UART_SetConfig+0x120>
 800aae6:	2340      	movs	r3, #64	@ 0x40
 800aae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aaea:	e036      	b.n	800ab5a <UART_SetConfig+0x18e>
 800aaec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	4b3e      	ldr	r3, [pc, #248]	@ (800abec <UART_SetConfig+0x220>)
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d102      	bne.n	800aafc <UART_SetConfig+0x130>
 800aaf6:	2380      	movs	r3, #128	@ 0x80
 800aaf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aafa:	e02e      	b.n	800ab5a <UART_SetConfig+0x18e>
 800aafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	4b3b      	ldr	r3, [pc, #236]	@ (800abf0 <UART_SetConfig+0x224>)
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d103      	bne.n	800ab0e <UART_SetConfig+0x142>
 800ab06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab0c:	e025      	b.n	800ab5a <UART_SetConfig+0x18e>
 800ab0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	4b38      	ldr	r3, [pc, #224]	@ (800abf4 <UART_SetConfig+0x228>)
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d103      	bne.n	800ab20 <UART_SetConfig+0x154>
 800ab18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab1e:	e01c      	b.n	800ab5a <UART_SetConfig+0x18e>
 800ab20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	4b34      	ldr	r3, [pc, #208]	@ (800abf8 <UART_SetConfig+0x22c>)
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d103      	bne.n	800ab32 <UART_SetConfig+0x166>
 800ab2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab30:	e013      	b.n	800ab5a <UART_SetConfig+0x18e>
 800ab32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	4b31      	ldr	r3, [pc, #196]	@ (800abfc <UART_SetConfig+0x230>)
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d103      	bne.n	800ab44 <UART_SetConfig+0x178>
 800ab3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab42:	e00a      	b.n	800ab5a <UART_SetConfig+0x18e>
 800ab44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	4b1e      	ldr	r3, [pc, #120]	@ (800abc4 <UART_SetConfig+0x1f8>)
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d103      	bne.n	800ab56 <UART_SetConfig+0x18a>
 800ab4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab52:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab54:	e001      	b.n	800ab5a <UART_SetConfig+0x18e>
 800ab56:	2300      	movs	r3, #0
 800ab58:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	4b19      	ldr	r3, [pc, #100]	@ (800abc4 <UART_SetConfig+0x1f8>)
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d005      	beq.n	800ab70 <UART_SetConfig+0x1a4>
 800ab64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	4b18      	ldr	r3, [pc, #96]	@ (800abcc <UART_SetConfig+0x200>)
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	f040 8094 	bne.w	800ac98 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ab70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab72:	2200      	movs	r2, #0
 800ab74:	623b      	str	r3, [r7, #32]
 800ab76:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ab7c:	f7fc fd8e 	bl	800769c <HAL_RCCEx_GetPeriphCLKFreq>
 800ab80:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 80f7 	beq.w	800ad78 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab8e:	4a1c      	ldr	r2, [pc, #112]	@ (800ac00 <UART_SetConfig+0x234>)
 800ab90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab94:	461a      	mov	r2, r3
 800ab96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab98:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab9c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aba0:	685a      	ldr	r2, [r3, #4]
 800aba2:	4613      	mov	r3, r2
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	4413      	add	r3, r2
 800aba8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abaa:	429a      	cmp	r2, r3
 800abac:	d305      	bcc.n	800abba <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800abae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d924      	bls.n	800ac04 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800abc0:	e069      	b.n	800ac96 <UART_SetConfig+0x2ca>
 800abc2:	bf00      	nop
 800abc4:	44002400 	.word	0x44002400
 800abc8:	cfff69f3 	.word	0xcfff69f3
 800abcc:	54002400 	.word	0x54002400
 800abd0:	40013800 	.word	0x40013800
 800abd4:	40004400 	.word	0x40004400
 800abd8:	40004800 	.word	0x40004800
 800abdc:	40004c00 	.word	0x40004c00
 800abe0:	40005000 	.word	0x40005000
 800abe4:	40006400 	.word	0x40006400
 800abe8:	40007800 	.word	0x40007800
 800abec:	40007c00 	.word	0x40007c00
 800abf0:	40008000 	.word	0x40008000
 800abf4:	40006800 	.word	0x40006800
 800abf8:	40006c00 	.word	0x40006c00
 800abfc:	40008400 	.word	0x40008400
 800ac00:	08010414 	.word	0x08010414
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac06:	2200      	movs	r2, #0
 800ac08:	61bb      	str	r3, [r7, #24]
 800ac0a:	61fa      	str	r2, [r7, #28]
 800ac0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac10:	4a64      	ldr	r2, [pc, #400]	@ (800ada4 <UART_SetConfig+0x3d8>)
 800ac12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	2200      	movs	r2, #0
 800ac1a:	613b      	str	r3, [r7, #16]
 800ac1c:	617a      	str	r2, [r7, #20]
 800ac1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ac22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ac26:	f7f5 fb39 	bl	800029c <__aeabi_uldivmod>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4610      	mov	r0, r2
 800ac30:	4619      	mov	r1, r3
 800ac32:	f04f 0200 	mov.w	r2, #0
 800ac36:	f04f 0300 	mov.w	r3, #0
 800ac3a:	020b      	lsls	r3, r1, #8
 800ac3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac40:	0202      	lsls	r2, r0, #8
 800ac42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ac44:	6849      	ldr	r1, [r1, #4]
 800ac46:	0849      	lsrs	r1, r1, #1
 800ac48:	2000      	movs	r0, #0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	eb12 0804 	adds.w	r8, r2, r4
 800ac52:	eb43 0905 	adc.w	r9, r3, r5
 800ac56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	60bb      	str	r3, [r7, #8]
 800ac5e:	60fa      	str	r2, [r7, #12]
 800ac60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac64:	4640      	mov	r0, r8
 800ac66:	4649      	mov	r1, r9
 800ac68:	f7f5 fb18 	bl	800029c <__aeabi_uldivmod>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4613      	mov	r3, r2
 800ac72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac7a:	d308      	bcc.n	800ac8e <UART_SetConfig+0x2c2>
 800ac7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac82:	d204      	bcs.n	800ac8e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800ac84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ac8a:	60da      	str	r2, [r3, #12]
 800ac8c:	e003      	b.n	800ac96 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800ac94:	e070      	b.n	800ad78 <UART_SetConfig+0x3ac>
 800ac96:	e06f      	b.n	800ad78 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aca0:	d13c      	bne.n	800ad1c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aca4:	2200      	movs	r2, #0
 800aca6:	603b      	str	r3, [r7, #0]
 800aca8:	607a      	str	r2, [r7, #4]
 800acaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acae:	f7fc fcf5 	bl	800769c <HAL_RCCEx_GetPeriphCLKFreq>
 800acb2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800acb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d05e      	beq.n	800ad78 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acbe:	4a39      	ldr	r2, [pc, #228]	@ (800ada4 <UART_SetConfig+0x3d8>)
 800acc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acc4:	461a      	mov	r2, r3
 800acc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800accc:	005a      	lsls	r2, r3, #1
 800acce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	085b      	lsrs	r3, r3, #1
 800acd4:	441a      	add	r2, r3
 800acd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	fbb2 f3f3 	udiv	r3, r2, r3
 800acde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ace0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ace2:	2b0f      	cmp	r3, #15
 800ace4:	d916      	bls.n	800ad14 <UART_SetConfig+0x348>
 800ace6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ace8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acec:	d212      	bcs.n	800ad14 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	f023 030f 	bic.w	r3, r3, #15
 800acf6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800acf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acfa:	085b      	lsrs	r3, r3, #1
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	f003 0307 	and.w	r3, r3, #7
 800ad02:	b29a      	uxth	r2, r3
 800ad04:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ad06:	4313      	orrs	r3, r2
 800ad08:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800ad0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ad10:	60da      	str	r2, [r3, #12]
 800ad12:	e031      	b.n	800ad78 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ad1a:	e02d      	b.n	800ad78 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ad1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad1e:	2200      	movs	r2, #0
 800ad20:	469a      	mov	sl, r3
 800ad22:	4693      	mov	fp, r2
 800ad24:	4650      	mov	r0, sl
 800ad26:	4659      	mov	r1, fp
 800ad28:	f7fc fcb8 	bl	800769c <HAL_RCCEx_GetPeriphCLKFreq>
 800ad2c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800ad2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d021      	beq.n	800ad78 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad38:	4a1a      	ldr	r2, [pc, #104]	@ (800ada4 <UART_SetConfig+0x3d8>)
 800ad3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad42:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	085b      	lsrs	r3, r3, #1
 800ad4c:	441a      	add	r2, r3
 800ad4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad5a:	2b0f      	cmp	r3, #15
 800ad5c:	d909      	bls.n	800ad72 <UART_SetConfig+0x3a6>
 800ad5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad64:	d205      	bcs.n	800ad72 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	60da      	str	r2, [r3, #12]
 800ad70:	e002      	b.n	800ad78 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ad80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad82:	2201      	movs	r2, #1
 800ad84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ad8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad90:	2200      	movs	r2, #0
 800ad92:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ad94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3750      	adds	r7, #80	@ 0x50
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ada2:	bf00      	nop
 800ada4:	08010414 	.word	0x08010414

0800ada8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b083      	sub	sp, #12
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb4:	f003 0308 	and.w	r3, r3, #8
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00a      	beq.n	800add2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00a      	beq.n	800adf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf8:	f003 0302 	and.w	r3, r3, #2
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00a      	beq.n	800ae16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	430a      	orrs	r2, r1
 800ae14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1a:	f003 0304 	and.w	r3, r3, #4
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00a      	beq.n	800ae38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	430a      	orrs	r2, r1
 800ae36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae3c:	f003 0310 	and.w	r3, r3, #16
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00a      	beq.n	800ae5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	430a      	orrs	r2, r1
 800ae58:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5e:	f003 0320 	and.w	r3, r3, #32
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00a      	beq.n	800ae7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	430a      	orrs	r2, r1
 800ae7a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d01a      	beq.n	800aebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aea2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aea6:	d10a      	bne.n	800aebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	430a      	orrs	r2, r1
 800aebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00a      	beq.n	800aee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	430a      	orrs	r2, r1
 800aede:	605a      	str	r2, [r3, #4]
  }
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b098      	sub	sp, #96	@ 0x60
 800aef0:	af02      	add	r7, sp, #8
 800aef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aefc:	f7f6 fe9e 	bl	8001c3c <HAL_GetTick>
 800af00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 0308 	and.w	r3, r3, #8
 800af0c:	2b08      	cmp	r3, #8
 800af0e:	d12f      	bne.n	800af70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af18:	2200      	movs	r2, #0
 800af1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f88e 	bl	800b040 <UART_WaitOnFlagUntilTimeout>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d022      	beq.n	800af70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af32:	e853 3f00 	ldrex	r3, [r3]
 800af36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af3e:	653b      	str	r3, [r7, #80]	@ 0x50
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	461a      	mov	r2, r3
 800af46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af48:	647b      	str	r3, [r7, #68]	@ 0x44
 800af4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af50:	e841 2300 	strex	r3, r2, [r1]
 800af54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1e6      	bne.n	800af2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2220      	movs	r2, #32
 800af60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af6c:	2303      	movs	r3, #3
 800af6e:	e063      	b.n	800b038 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0304 	and.w	r3, r3, #4
 800af7a:	2b04      	cmp	r3, #4
 800af7c:	d149      	bne.n	800b012 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af86:	2200      	movs	r2, #0
 800af88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f857 	bl	800b040 <UART_WaitOnFlagUntilTimeout>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d03c      	beq.n	800b012 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	623b      	str	r3, [r7, #32]
   return(result);
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800afb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e6      	bne.n	800af98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3308      	adds	r3, #8
 800afd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	e853 3f00 	ldrex	r3, [r3]
 800afd8:	60fb      	str	r3, [r7, #12]
   return(result);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f023 0301 	bic.w	r3, r3, #1
 800afe0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3308      	adds	r3, #8
 800afe8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afea:	61fa      	str	r2, [r7, #28]
 800afec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	69b9      	ldr	r1, [r7, #24]
 800aff0:	69fa      	ldr	r2, [r7, #28]
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	617b      	str	r3, [r7, #20]
   return(result);
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1e5      	bne.n	800afca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2220      	movs	r2, #32
 800b002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b00e:	2303      	movs	r3, #3
 800b010:	e012      	b.n	800b038 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2220      	movs	r2, #32
 800b016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2220      	movs	r2, #32
 800b01e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3758      	adds	r7, #88	@ 0x58
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	603b      	str	r3, [r7, #0]
 800b04c:	4613      	mov	r3, r2
 800b04e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b050:	e04f      	b.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b058:	d04b      	beq.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b05a:	f7f6 fdef 	bl	8001c3c <HAL_GetTick>
 800b05e:	4602      	mov	r2, r0
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	429a      	cmp	r2, r3
 800b068:	d302      	bcc.n	800b070 <UART_WaitOnFlagUntilTimeout+0x30>
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b070:	2303      	movs	r3, #3
 800b072:	e04e      	b.n	800b112 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f003 0304 	and.w	r3, r3, #4
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d037      	beq.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2b80      	cmp	r3, #128	@ 0x80
 800b086:	d034      	beq.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	2b40      	cmp	r3, #64	@ 0x40
 800b08c:	d031      	beq.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	69db      	ldr	r3, [r3, #28]
 800b094:	f003 0308 	and.w	r3, r3, #8
 800b098:	2b08      	cmp	r3, #8
 800b09a:	d110      	bne.n	800b0be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2208      	movs	r2, #8
 800b0a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f000 f838 	bl	800b11a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2208      	movs	r2, #8
 800b0ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e029      	b.n	800b112 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	69db      	ldr	r3, [r3, #28]
 800b0c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0cc:	d111      	bne.n	800b0f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f000 f81e 	bl	800b11a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2220      	movs	r2, #32
 800b0e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e00f      	b.n	800b112 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	69da      	ldr	r2, [r3, #28]
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	bf0c      	ite	eq
 800b102:	2301      	moveq	r3, #1
 800b104:	2300      	movne	r3, #0
 800b106:	b2db      	uxtb	r3, r3
 800b108:	461a      	mov	r2, r3
 800b10a:	79fb      	ldrb	r3, [r7, #7]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d0a0      	beq.n	800b052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b095      	sub	sp, #84	@ 0x54
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b12a:	e853 3f00 	ldrex	r3, [r3]
 800b12e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b132:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	461a      	mov	r2, r3
 800b13e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b140:	643b      	str	r3, [r7, #64]	@ 0x40
 800b142:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b144:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b146:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b148:	e841 2300 	strex	r3, r2, [r1]
 800b14c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1e6      	bne.n	800b122 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3308      	adds	r3, #8
 800b15a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15c:	6a3b      	ldr	r3, [r7, #32]
 800b15e:	e853 3f00 	ldrex	r3, [r3]
 800b162:	61fb      	str	r3, [r7, #28]
   return(result);
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b16a:	f023 0301 	bic.w	r3, r3, #1
 800b16e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	3308      	adds	r3, #8
 800b176:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b178:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b17a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b17e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b180:	e841 2300 	strex	r3, r2, [r1]
 800b184:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1e3      	bne.n	800b154 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b190:	2b01      	cmp	r3, #1
 800b192:	d118      	bne.n	800b1c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	e853 3f00 	ldrex	r3, [r3]
 800b1a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	f023 0310 	bic.w	r3, r3, #16
 800b1a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1b2:	61bb      	str	r3, [r7, #24]
 800b1b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b6:	6979      	ldr	r1, [r7, #20]
 800b1b8:	69ba      	ldr	r2, [r7, #24]
 800b1ba:	e841 2300 	strex	r3, r2, [r1]
 800b1be:	613b      	str	r3, [r7, #16]
   return(result);
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d1e6      	bne.n	800b194 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2220      	movs	r2, #32
 800b1ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b1da:	bf00      	nop
 800b1dc:	3754      	adds	r7, #84	@ 0x54
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b085      	sub	sp, #20
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d101      	bne.n	800b1fc <HAL_UARTEx_DisableFifoMode+0x16>
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	e027      	b.n	800b24c <HAL_UARTEx_DisableFifoMode+0x66>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2224      	movs	r2, #36	@ 0x24
 800b208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f022 0201 	bic.w	r2, r2, #1
 800b222:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b22a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2220      	movs	r2, #32
 800b23e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3714      	adds	r7, #20
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d101      	bne.n	800b270 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b26c:	2302      	movs	r3, #2
 800b26e:	e02d      	b.n	800b2cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2224      	movs	r2, #36	@ 0x24
 800b27c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f022 0201 	bic.w	r2, r2, #1
 800b296:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f84f 	bl	800b350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d101      	bne.n	800b2ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	e02d      	b.n	800b348 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2224      	movs	r2, #36	@ 0x24
 800b2f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f022 0201 	bic.w	r2, r2, #1
 800b312:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	430a      	orrs	r2, r1
 800b326:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 f811 	bl	800b350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2220      	movs	r2, #32
 800b33a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d108      	bne.n	800b372 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b370:	e031      	b.n	800b3d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b372:	2308      	movs	r3, #8
 800b374:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b376:	2308      	movs	r3, #8
 800b378:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	0e5b      	lsrs	r3, r3, #25
 800b382:	b2db      	uxtb	r3, r3
 800b384:	f003 0307 	and.w	r3, r3, #7
 800b388:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	0f5b      	lsrs	r3, r3, #29
 800b392:	b2db      	uxtb	r3, r3
 800b394:	f003 0307 	and.w	r3, r3, #7
 800b398:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b39a:	7bbb      	ldrb	r3, [r7, #14]
 800b39c:	7b3a      	ldrb	r2, [r7, #12]
 800b39e:	4911      	ldr	r1, [pc, #68]	@ (800b3e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b3a0:	5c8a      	ldrb	r2, [r1, r2]
 800b3a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3a6:	7b3a      	ldrb	r2, [r7, #12]
 800b3a8:	490f      	ldr	r1, [pc, #60]	@ (800b3e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b3aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ba:	7b7a      	ldrb	r2, [r7, #13]
 800b3bc:	4909      	ldr	r1, [pc, #36]	@ (800b3e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b3be:	5c8a      	ldrb	r2, [r1, r2]
 800b3c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3c4:	7b7a      	ldrb	r2, [r7, #13]
 800b3c6:	4908      	ldr	r1, [pc, #32]	@ (800b3e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b3c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b3d6:	bf00      	nop
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	0801042c 	.word	0x0801042c
 800b3e8:	08010434 	.word	0x08010434

0800b3ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b404:	f043 0201 	orr.w	r2, r3, #1
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	370c      	adds	r7, #12
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b41a:	b084      	sub	sp, #16
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	f107 001c 	add.w	r0, r7, #28
 800b428:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	e008      	b.n	800b448 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f7ff ffd8 	bl	800b3ec <USB_CoreReset>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b446:	7bfb      	ldrb	r3, [r7, #15]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b452:	b004      	add	sp, #16
 800b454:	4770      	bx	lr

0800b456 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b456:	b480      	push	{r7}
 800b458:	b085      	sub	sp, #20
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b464:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b468:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b47e:	b480      	push	{r7}
 800b480:	b085      	sub	sp, #20
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b486:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b48a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	43db      	mvns	r3, r3
 800b494:	401a      	ands	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800b4b4:	78fb      	ldrb	r3, [r7, #3]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d106      	bne.n	800b4c8 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	641a      	str	r2, [r3, #64]	@ 0x40
 800b4c6:	e00b      	b.n	800b4e0 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800b4c8:	78fb      	ldrb	r3, [r7, #3]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d106      	bne.n	800b4dc <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	641a      	str	r2, [r3, #64]	@ 0x40
 800b4da:	e001      	b.n	800b4e0 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e000      	b.n	800b4e2 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	f107 001c 	add.w	r0, r7, #28
 800b4fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b50a:	f023 0201 	bic.w	r2, r3, #1
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800b512:	2100      	movs	r1, #0
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff ffc7 	bl	800b4a8 <USB_SetCurrentMode>
 800b51a:	4603      	mov	r3, r0
 800b51c:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b524:	7bfb      	ldrb	r3, [r7, #15]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b530:	b004      	add	sp, #16
 800b532:	4770      	bx	lr

0800b534 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b534:	b480      	push	{r7}
 800b536:	b09f      	sub	sp, #124	@ 0x7c
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4413      	add	r3, r2
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	4ba0      	ldr	r3, [pc, #640]	@ (800b7d4 <USB_ActivateEndpoint+0x2a0>)
 800b552:	4013      	ands	r3, r2
 800b554:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	78db      	ldrb	r3, [r3, #3]
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	d819      	bhi.n	800b592 <USB_ActivateEndpoint+0x5e>
 800b55e:	a201      	add	r2, pc, #4	@ (adr r2, 800b564 <USB_ActivateEndpoint+0x30>)
 800b560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b564:	0800b575 	.word	0x0800b575
 800b568:	0800b589 	.word	0x0800b589
 800b56c:	0800b59b 	.word	0x0800b59b
 800b570:	0800b57f 	.word	0x0800b57f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b574:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b57a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b57c:	e00e      	b.n	800b59c <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b57e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b580:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b584:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b586:	e009      	b.n	800b59c <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b588:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b58a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b58e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b590:	e004      	b.n	800b59c <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800b598:	e000      	b.n	800b59c <USB_ActivateEndpoint+0x68>
      break;
 800b59a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	441a      	add	r2, r3
 800b5a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5b0:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b5b2:	687a      	ldr	r2, [r7, #4]
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	4b86      	ldr	r3, [pc, #536]	@ (800b7d8 <USB_ActivateEndpoint+0x2a4>)
 800b5c0:	4013      	ands	r3, r2
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	7812      	ldrb	r2, [r2, #0]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	441a      	add	r2, r3
 800b5d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b5d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5de:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	7b1b      	ldrb	r3, [r3, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f040 8177 	bne.w	800b8d8 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	785b      	ldrb	r3, [r3, #1]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d079      	beq.n	800b6e6 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	00db      	lsls	r3, r3, #3
 800b5f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	00db      	lsls	r3, r3, #3
 800b608:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b60c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b610:	0c12      	lsrs	r2, r2, #16
 800b612:	0412      	lsls	r2, r2, #16
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	00db      	lsls	r3, r3, #3
 800b61c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b620:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b624:	6819      	ldr	r1, [r3, #0]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	88db      	ldrh	r3, [r3, #6]
 800b62a:	089b      	lsrs	r3, r3, #2
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	009a      	lsls	r2, r3, #2
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b63a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b63e:	430a      	orrs	r2, r1
 800b640:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4413      	add	r3, r2
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	61bb      	str	r3, [r7, #24]
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b656:	2b00      	cmp	r3, #0
 800b658:	d013      	beq.n	800b682 <USB_ActivateEndpoint+0x14e>
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4413      	add	r3, r2
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	4b5c      	ldr	r3, [pc, #368]	@ (800b7d8 <USB_ActivateEndpoint+0x2a4>)
 800b668:	4013      	ands	r3, r2
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	441a      	add	r2, r3
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b67c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b680:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	78db      	ldrb	r3, [r3, #3]
 800b686:	2b01      	cmp	r3, #1
 800b688:	d018      	beq.n	800b6bc <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	4b51      	ldr	r3, [pc, #324]	@ (800b7dc <USB_ActivateEndpoint+0x2a8>)
 800b698:	4013      	ands	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f083 0320 	eor.w	r3, r3, #32
 800b6a2:	60fb      	str	r3, [r7, #12]
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	441a      	add	r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6b8:	6013      	str	r3, [r2, #0]
 800b6ba:	e28c      	b.n	800bbd6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	4413      	add	r3, r2
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	4b44      	ldr	r3, [pc, #272]	@ (800b7dc <USB_ActivateEndpoint+0x2a8>)
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	613b      	str	r3, [r7, #16]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	441a      	add	r2, r3
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	e277      	b.n	800bbd6 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	00db      	lsls	r3, r3, #3
 800b6ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b6f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	00db      	lsls	r3, r3, #3
 800b6fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b700:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b704:	0c12      	lsrs	r2, r2, #16
 800b706:	0412      	lsls	r2, r2, #16
 800b708:	605a      	str	r2, [r3, #4]
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b714:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b718:	6859      	ldr	r1, [r3, #4]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	88db      	ldrh	r3, [r3, #6]
 800b71e:	089b      	lsrs	r3, r3, #2
 800b720:	b29b      	uxth	r3, r3
 800b722:	009a      	lsls	r2, r3, #2
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	00db      	lsls	r3, r3, #3
 800b72a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b72e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b732:	430a      	orrs	r2, r1
 800b734:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	00db      	lsls	r3, r3, #3
 800b73c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b740:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	00db      	lsls	r3, r3, #3
 800b74c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b750:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b754:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b758:	605a      	str	r2, [r3, #4]
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d112      	bne.n	800b788 <USB_ActivateEndpoint+0x254>
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b76c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	00db      	lsls	r3, r3, #3
 800b778:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b77c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b780:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b784:	605a      	str	r2, [r3, #4]
 800b786:	e04d      	b.n	800b824 <USB_ActivateEndpoint+0x2f0>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b78e:	d827      	bhi.n	800b7e0 <USB_ActivateEndpoint+0x2ac>
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	085b      	lsrs	r3, r3, #1
 800b796:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	691b      	ldr	r3, [r3, #16]
 800b79c:	f003 0301 	and.w	r3, r3, #1
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <USB_ActivateEndpoint+0x276>
 800b7a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7b8:	6859      	ldr	r1, [r3, #4]
 800b7ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7bc:	069a      	lsls	r2, r3, #26
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	00db      	lsls	r3, r3, #3
 800b7c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7cc:	430a      	orrs	r2, r1
 800b7ce:	605a      	str	r2, [r3, #4]
 800b7d0:	e028      	b.n	800b824 <USB_ActivateEndpoint+0x2f0>
 800b7d2:	bf00      	nop
 800b7d4:	07ff898f 	.word	0x07ff898f
 800b7d8:	07ff8f8f 	.word	0x07ff8f8f
 800b7dc:	07ff8fbf 	.word	0x07ff8fbf
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	095b      	lsrs	r3, r3, #5
 800b7e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	f003 031f 	and.w	r3, r3, #31
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d102      	bne.n	800b7fa <USB_ActivateEndpoint+0x2c6>
 800b7f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	00db      	lsls	r3, r3, #3
 800b800:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b804:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b808:	685a      	ldr	r2, [r3, #4]
 800b80a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b80c:	069b      	lsls	r3, r3, #26
 800b80e:	431a      	orrs	r2, r3
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	00db      	lsls	r3, r3, #3
 800b816:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b81a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b81e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b822:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d013      	beq.n	800b864 <USB_ActivateEndpoint+0x330>
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	4413      	add	r3, r2
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	4b9c      	ldr	r3, [pc, #624]	@ (800babc <USB_ActivateEndpoint+0x588>)
 800b84a:	4013      	ands	r3, r2
 800b84c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	441a      	add	r2, r3
 800b858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b85e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b862:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d11c      	bne.n	800b8a6 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4413      	add	r3, r2
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	4b91      	ldr	r3, [pc, #580]	@ (800bac0 <USB_ActivateEndpoint+0x58c>)
 800b87a:	4013      	ands	r3, r2
 800b87c:	61fb      	str	r3, [r7, #28]
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b884:	61fb      	str	r3, [r7, #28]
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b88c:	61fb      	str	r3, [r7, #28]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	441a      	add	r2, r3
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b89e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8a2:	6013      	str	r3, [r2, #0]
 800b8a4:	e197      	b.n	800bbd6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	4413      	add	r3, r2
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	4b83      	ldr	r3, [pc, #524]	@ (800bac0 <USB_ActivateEndpoint+0x58c>)
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	623b      	str	r3, [r7, #32]
 800b8b8:	6a3b      	ldr	r3, [r7, #32]
 800b8ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b8be:	623b      	str	r3, [r7, #32]
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	441a      	add	r2, r3
 800b8ca:	6a3b      	ldr	r3, [r7, #32]
 800b8cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	e17e      	b.n	800bbd6 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	78db      	ldrb	r3, [r3, #3]
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d114      	bne.n	800b90a <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4413      	add	r3, r2
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	4b73      	ldr	r3, [pc, #460]	@ (800babc <USB_ActivateEndpoint+0x588>)
 800b8ee:	4013      	ands	r3, r2
 800b8f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	441a      	add	r2, r3
 800b8fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8fe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	e013      	b.n	800b932 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4413      	add	r3, r2
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	4b6b      	ldr	r3, [pc, #428]	@ (800bac4 <USB_ActivateEndpoint+0x590>)
 800b918:	4013      	ands	r3, r2
 800b91a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	441a      	add	r2, r3
 800b926:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b928:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b92c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b930:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b93c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	00db      	lsls	r3, r3, #3
 800b948:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b94c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b950:	0c12      	lsrs	r2, r2, #16
 800b952:	0412      	lsls	r2, r2, #16
 800b954:	601a      	str	r2, [r3, #0]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	00db      	lsls	r3, r3, #3
 800b95c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b960:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b964:	6819      	ldr	r1, [r3, #0]
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	891b      	ldrh	r3, [r3, #8]
 800b96a:	089b      	lsrs	r3, r3, #2
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	009a      	lsls	r2, r3, #2
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	00db      	lsls	r3, r3, #3
 800b976:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b97a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b97e:	430a      	orrs	r2, r1
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	00db      	lsls	r3, r3, #3
 800b988:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b98c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b990:	685a      	ldr	r2, [r3, #4]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	00db      	lsls	r3, r3, #3
 800b998:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b99c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b9a0:	0c12      	lsrs	r2, r2, #16
 800b9a2:	0412      	lsls	r2, r2, #16
 800b9a4:	605a      	str	r2, [r3, #4]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	00db      	lsls	r3, r3, #3
 800b9ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b9b4:	6859      	ldr	r1, [r3, #4]
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	895b      	ldrh	r3, [r3, #10]
 800b9ba:	089b      	lsrs	r3, r3, #2
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	009a      	lsls	r2, r3, #2
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	00db      	lsls	r3, r3, #3
 800b9c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	785b      	ldrb	r3, [r3, #1]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d178      	bne.n	800bacc <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	4413      	add	r3, r2
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d013      	beq.n	800ba1a <USB_ActivateEndpoint+0x4e6>
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4413      	add	r3, r2
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	4b2f      	ldr	r3, [pc, #188]	@ (800babc <USB_ActivateEndpoint+0x588>)
 800ba00:	4013      	ands	r3, r2
 800ba02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	441a      	add	r2, r3
 800ba0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ba14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba18:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d013      	beq.n	800ba5a <USB_ActivateEndpoint+0x526>
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4413      	add	r3, r2
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	4b1f      	ldr	r3, [pc, #124]	@ (800babc <USB_ActivateEndpoint+0x588>)
 800ba40:	4013      	ands	r3, r2
 800ba42:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	441a      	add	r2, r3
 800ba4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ba58:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	4b16      	ldr	r3, [pc, #88]	@ (800bac0 <USB_ActivateEndpoint+0x58c>)
 800ba68:	4013      	ands	r3, r2
 800ba6a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba6e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ba72:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba76:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ba7a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	441a      	add	r2, r3
 800ba86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba90:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	4b0a      	ldr	r3, [pc, #40]	@ (800bac8 <USB_ActivateEndpoint+0x594>)
 800baa0:	4013      	ands	r3, r2
 800baa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	441a      	add	r2, r3
 800baae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bab0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bab8:	6013      	str	r3, [r2, #0]
 800baba:	e08c      	b.n	800bbd6 <USB_ActivateEndpoint+0x6a2>
 800babc:	07ff8f8f 	.word	0x07ff8f8f
 800bac0:	07ffbf8f 	.word	0x07ffbf8f
 800bac4:	07ff8e8f 	.word	0x07ff8e8f
 800bac8:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	4413      	add	r3, r2
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800badc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d013      	beq.n	800bb0c <USB_ActivateEndpoint+0x5d8>
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4413      	add	r3, r2
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	4b3d      	ldr	r3, [pc, #244]	@ (800bbe8 <USB_ActivateEndpoint+0x6b4>)
 800baf2:	4013      	ands	r3, r2
 800baf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	441a      	add	r2, r3
 800bb00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bb06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb0a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	4413      	add	r3, r2
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	657b      	str	r3, [r7, #84]	@ 0x54
 800bb1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d013      	beq.n	800bb4c <USB_ActivateEndpoint+0x618>
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4413      	add	r3, r2
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	4b2d      	ldr	r3, [pc, #180]	@ (800bbe8 <USB_ActivateEndpoint+0x6b4>)
 800bb32:	4013      	ands	r3, r2
 800bb34:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	441a      	add	r2, r3
 800bb40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb4a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	78db      	ldrb	r3, [r3, #3]
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d018      	beq.n	800bb86 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	4413      	add	r3, r2
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	4b22      	ldr	r3, [pc, #136]	@ (800bbec <USB_ActivateEndpoint+0x6b8>)
 800bb62:	4013      	ands	r3, r2
 800bb64:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb68:	f083 0320 	eor.w	r3, r3, #32
 800bb6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	441a      	add	r2, r3
 800bb78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb82:	6013      	str	r3, [r2, #0]
 800bb84:	e013      	b.n	800bbae <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4413      	add	r3, r2
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	4b16      	ldr	r3, [pc, #88]	@ (800bbec <USB_ActivateEndpoint+0x6b8>)
 800bb94:	4013      	ands	r3, r2
 800bb96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	441a      	add	r2, r3
 800bba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbac:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4413      	add	r3, r2
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf0 <USB_ActivateEndpoint+0x6bc>)
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	441a      	add	r2, r3
 800bbca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbd4:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800bbd6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	377c      	adds	r7, #124	@ 0x7c
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop
 800bbe8:	07ff8f8f 	.word	0x07ff8f8f
 800bbec:	07ff8fbf 	.word	0x07ff8fbf
 800bbf0:	07ffbf8f 	.word	0x07ffbf8f

0800bbf4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b097      	sub	sp, #92	@ 0x5c
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	7b1b      	ldrb	r3, [r3, #12]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d16d      	bne.n	800bce2 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	785b      	ldrb	r3, [r3, #1]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d034      	beq.n	800bc78 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	613b      	str	r3, [r7, #16]
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d013      	beq.n	800bc4e <USB_DeactivateEndpoint+0x5a>
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	4413      	add	r3, r2
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	4b6d      	ldr	r3, [pc, #436]	@ (800bde8 <USB_DeactivateEndpoint+0x1f4>)
 800bc34:	4013      	ands	r3, r2
 800bc36:	60fb      	str	r3, [r7, #12]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	441a      	add	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bc4c:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	4413      	add	r3, r2
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	4b64      	ldr	r3, [pc, #400]	@ (800bdec <USB_DeactivateEndpoint+0x1f8>)
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	60bb      	str	r3, [r7, #8]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	441a      	add	r2, r3
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc74:	6013      	str	r3, [r2, #0]
 800bc76:	e139      	b.n	800beec <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4413      	add	r3, r2
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	61fb      	str	r3, [r7, #28]
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d013      	beq.n	800bcb8 <USB_DeactivateEndpoint+0xc4>
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	4b52      	ldr	r3, [pc, #328]	@ (800bde8 <USB_DeactivateEndpoint+0x1f4>)
 800bc9e:	4013      	ands	r3, r2
 800bca0:	61bb      	str	r3, [r7, #24]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	441a      	add	r2, r3
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bcb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcb6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	4413      	add	r3, r2
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	4b4a      	ldr	r3, [pc, #296]	@ (800bdf0 <USB_DeactivateEndpoint+0x1fc>)
 800bcc6:	4013      	ands	r3, r2
 800bcc8:	617b      	str	r3, [r7, #20]
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	441a      	add	r2, r3
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcde:	6013      	str	r3, [r2, #0]
 800bce0:	e104      	b.n	800beec <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	785b      	ldrb	r3, [r3, #1]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f040 8084 	bne.w	800bdf4 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4413      	add	r3, r2
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d013      	beq.n	800bd2c <USB_DeactivateEndpoint+0x138>
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	4b35      	ldr	r3, [pc, #212]	@ (800bde8 <USB_DeactivateEndpoint+0x1f4>)
 800bd12:	4013      	ands	r3, r2
 800bd14:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	441a      	add	r2, r3
 800bd20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd2a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4413      	add	r3, r2
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d013      	beq.n	800bd6c <USB_DeactivateEndpoint+0x178>
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	4b25      	ldr	r3, [pc, #148]	@ (800bde8 <USB_DeactivateEndpoint+0x1f4>)
 800bd52:	4013      	ands	r3, r2
 800bd54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	441a      	add	r2, r3
 800bd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd6a:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	4b1b      	ldr	r3, [pc, #108]	@ (800bde8 <USB_DeactivateEndpoint+0x1f4>)
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	441a      	add	r2, r3
 800bd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd92:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	4b13      	ldr	r3, [pc, #76]	@ (800bdf0 <USB_DeactivateEndpoint+0x1fc>)
 800bda2:	4013      	ands	r3, r2
 800bda4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	441a      	add	r2, r3
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdba:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	4413      	add	r3, r2
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	4b08      	ldr	r3, [pc, #32]	@ (800bdec <USB_DeactivateEndpoint+0x1f8>)
 800bdca:	4013      	ands	r3, r2
 800bdcc:	623b      	str	r3, [r7, #32]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	441a      	add	r2, r3
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	e082      	b.n	800beec <USB_DeactivateEndpoint+0x2f8>
 800bde6:	bf00      	nop
 800bde8:	07ff8f8f 	.word	0x07ff8f8f
 800bdec:	07ff8fbf 	.word	0x07ff8fbf
 800bdf0:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	657b      	str	r3, [r7, #84]	@ 0x54
 800be02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d013      	beq.n	800be34 <USB_DeactivateEndpoint+0x240>
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	4b38      	ldr	r3, [pc, #224]	@ (800befc <USB_DeactivateEndpoint+0x308>)
 800be1a:	4013      	ands	r3, r2
 800be1c:	653b      	str	r3, [r7, #80]	@ 0x50
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	441a      	add	r2, r3
 800be28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800be2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be32:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d013      	beq.n	800be74 <USB_DeactivateEndpoint+0x280>
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	4b28      	ldr	r3, [pc, #160]	@ (800befc <USB_DeactivateEndpoint+0x308>)
 800be5a:	4013      	ands	r3, r2
 800be5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	441a      	add	r2, r3
 800be68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be72:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4413      	add	r3, r2
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	4b1e      	ldr	r3, [pc, #120]	@ (800befc <USB_DeactivateEndpoint+0x308>)
 800be82:	4013      	ands	r3, r2
 800be84:	647b      	str	r3, [r7, #68]	@ 0x44
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	441a      	add	r2, r3
 800be90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800be96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be9a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4413      	add	r3, r2
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	4b15      	ldr	r3, [pc, #84]	@ (800bf00 <USB_DeactivateEndpoint+0x30c>)
 800beaa:	4013      	ands	r3, r2
 800beac:	643b      	str	r3, [r7, #64]	@ 0x40
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	441a      	add	r2, r3
 800beb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800beba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bec2:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	4b0c      	ldr	r3, [pc, #48]	@ (800bf04 <USB_DeactivateEndpoint+0x310>)
 800bed2:	4013      	ands	r3, r2
 800bed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	441a      	add	r2, r3
 800bee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beea:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	375c      	adds	r7, #92	@ 0x5c
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	07ff8f8f 	.word	0x07ff8f8f
 800bf00:	07ff8fbf 	.word	0x07ff8fbf
 800bf04:	07ffbf8f 	.word	0x07ffbf8f

0800bf08 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b096      	sub	sp, #88	@ 0x58
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	785b      	ldrb	r3, [r3, #1]
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	f040 84ed 	bne.w	800c8f6 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	699a      	ldr	r2, [r3, #24]
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d903      	bls.n	800bf30 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	657b      	str	r3, [r7, #84]	@ 0x54
 800bf2e:	e002      	b.n	800bf36 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	7b1b      	ldrb	r3, [r3, #12]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d12e      	bne.n	800bf9c <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	6959      	ldr	r1, [r3, #20]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	88da      	ldrh	r2, [r3, #6]
 800bf46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf48:	b29b      	uxth	r3, r3
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f001 f963 	bl	800d216 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	00db      	lsls	r3, r3, #3
 800bf56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	00db      	lsls	r3, r3, #3
 800bf66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf6e:	b292      	uxth	r2, r2
 800bf70:	601a      	str	r2, [r3, #0]
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	00db      	lsls	r3, r3, #3
 800bf78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf80:	6819      	ldr	r1, [r3, #0]
 800bf82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf84:	041a      	lsls	r2, r3, #16
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	00db      	lsls	r3, r3, #3
 800bf8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf94:	430a      	orrs	r2, r1
 800bf96:	601a      	str	r2, [r3, #0]
 800bf98:	f000 bc90 	b.w	800c8bc <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	78db      	ldrb	r3, [r3, #3]
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	f040 8332 	bne.w	800c60a <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	6a1a      	ldr	r2, [r3, #32]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	f240 82e4 	bls.w	800c57c <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	4ba4      	ldr	r3, [pc, #656]	@ (800c254 <USB_EPStartXfer+0x34c>)
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	613b      	str	r3, [r7, #16]
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	441a      	add	r2, r3
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfda:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	6a1a      	ldr	r2, [r3, #32]
 800bfe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfe2:	1ad2      	subs	r2, r2, r3
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f000 8161 	beq.w	800c2c0 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	785b      	ldrb	r3, [r3, #1]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d16a      	bne.n	800c0dc <USB_EPStartXfer+0x1d4>
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c010:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c014:	685a      	ldr	r2, [r3, #4]
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	00db      	lsls	r3, r3, #3
 800c01c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c020:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c024:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c028:	605a      	str	r2, [r3, #4]
 800c02a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d112      	bne.n	800c056 <USB_EPStartXfer+0x14e>
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	00db      	lsls	r3, r3, #3
 800c036:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c03a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c03e:	685a      	ldr	r2, [r3, #4]
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c04a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c04e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c052:	605a      	str	r2, [r3, #4]
 800c054:	e06a      	b.n	800c12c <USB_EPStartXfer+0x224>
 800c056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c058:	2b3e      	cmp	r3, #62	@ 0x3e
 800c05a:	d81e      	bhi.n	800c09a <USB_EPStartXfer+0x192>
 800c05c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c05e:	085b      	lsrs	r3, r3, #1
 800c060:	653b      	str	r3, [r7, #80]	@ 0x50
 800c062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c064:	f003 0301 	and.w	r3, r3, #1
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d002      	beq.n	800c072 <USB_EPStartXfer+0x16a>
 800c06c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c06e:	3301      	adds	r3, #1
 800c070:	653b      	str	r3, [r7, #80]	@ 0x50
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	00db      	lsls	r3, r3, #3
 800c078:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c07c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c080:	6859      	ldr	r1, [r3, #4]
 800c082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c084:	069a      	lsls	r2, r3, #26
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	00db      	lsls	r3, r3, #3
 800c08c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c090:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c094:	430a      	orrs	r2, r1
 800c096:	605a      	str	r2, [r3, #4]
 800c098:	e048      	b.n	800c12c <USB_EPStartXfer+0x224>
 800c09a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c09c:	095b      	lsrs	r3, r3, #5
 800c09e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c0a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0a2:	f003 031f 	and.w	r3, r3, #31
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d102      	bne.n	800c0b0 <USB_EPStartXfer+0x1a8>
 800c0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	00db      	lsls	r3, r3, #3
 800c0b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0be:	685a      	ldr	r2, [r3, #4]
 800c0c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0c2:	069b      	lsls	r3, r3, #26
 800c0c4:	431a      	orrs	r2, r3
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c0d8:	605a      	str	r2, [r3, #4]
 800c0da:	e027      	b.n	800c12c <USB_EPStartXfer+0x224>
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	785b      	ldrb	r3, [r3, #1]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d123      	bne.n	800c12c <USB_EPStartXfer+0x224>
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	00db      	lsls	r3, r3, #3
 800c0ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	00db      	lsls	r3, r3, #3
 800c0fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c102:	b292      	uxth	r2, r2
 800c104:	605a      	str	r2, [r3, #4]
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	00db      	lsls	r3, r3, #3
 800c10c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c110:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c114:	6859      	ldr	r1, [r3, #4]
 800c116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c118:	041a      	lsls	r2, r3, #16
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	00db      	lsls	r3, r3, #3
 800c120:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c124:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c128:	430a      	orrs	r2, r1
 800c12a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	895b      	ldrh	r3, [r3, #10]
 800c130:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	6959      	ldr	r1, [r3, #20]
 800c136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c138:	b29b      	uxth	r3, r3
 800c13a:	8b7a      	ldrh	r2, [r7, #26]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f001 f86a 	bl	800d216 <USB_WritePMA>
            ep->xfer_buff += len;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	695a      	ldr	r2, [r3, #20]
 800c146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c148:	441a      	add	r2, r3
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	6a1a      	ldr	r2, [r3, #32]
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	691b      	ldr	r3, [r3, #16]
 800c156:	429a      	cmp	r2, r3
 800c158:	d906      	bls.n	800c168 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	6a1a      	ldr	r2, [r3, #32]
 800c15e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c160:	1ad2      	subs	r2, r2, r3
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	621a      	str	r2, [r3, #32]
 800c166:	e005      	b.n	800c174 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	6a1b      	ldr	r3, [r3, #32]
 800c16c:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	2200      	movs	r2, #0
 800c172:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	785b      	ldrb	r3, [r3, #1]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d16d      	bne.n	800c258 <USB_EPStartXfer+0x350>
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	00db      	lsls	r3, r3, #3
 800c182:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c186:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	00db      	lsls	r3, r3, #3
 800c192:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c196:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c19a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c19e:	601a      	str	r2, [r3, #0]
 800c1a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d112      	bne.n	800c1cc <USB_EPStartXfer+0x2c4>
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	00db      	lsls	r3, r3, #3
 800c1ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	00db      	lsls	r3, r3, #3
 800c1bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	e06d      	b.n	800c2a8 <USB_EPStartXfer+0x3a0>
 800c1cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800c1d0:	d81e      	bhi.n	800c210 <USB_EPStartXfer+0x308>
 800c1d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1d4:	085b      	lsrs	r3, r3, #1
 800c1d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1da:	f003 0301 	and.w	r3, r3, #1
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d002      	beq.n	800c1e8 <USB_EPStartXfer+0x2e0>
 800c1e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	00db      	lsls	r3, r3, #3
 800c1ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1f6:	6819      	ldr	r1, [r3, #0]
 800c1f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1fa:	069a      	lsls	r2, r3, #26
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	00db      	lsls	r3, r3, #3
 800c202:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c206:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c20a:	430a      	orrs	r2, r1
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	e04b      	b.n	800c2a8 <USB_EPStartXfer+0x3a0>
 800c210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c212:	095b      	lsrs	r3, r3, #5
 800c214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c218:	f003 031f 	and.w	r3, r3, #31
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d102      	bne.n	800c226 <USB_EPStartXfer+0x31e>
 800c220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c222:	3b01      	subs	r3, #1
 800c224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	00db      	lsls	r3, r3, #3
 800c22c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c230:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c238:	069b      	lsls	r3, r3, #26
 800c23a:	431a      	orrs	r2, r3
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	00db      	lsls	r3, r3, #3
 800c242:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c246:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c24a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c24e:	601a      	str	r2, [r3, #0]
 800c250:	e02a      	b.n	800c2a8 <USB_EPStartXfer+0x3a0>
 800c252:	bf00      	nop
 800c254:	07ff8f8f 	.word	0x07ff8f8f
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	785b      	ldrb	r3, [r3, #1]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d123      	bne.n	800c2a8 <USB_EPStartXfer+0x3a0>
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	00db      	lsls	r3, r3, #3
 800c266:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c26a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	00db      	lsls	r3, r3, #3
 800c276:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c27a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c27e:	b292      	uxth	r2, r2
 800c280:	601a      	str	r2, [r3, #0]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	00db      	lsls	r3, r3, #3
 800c288:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c28c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c290:	6819      	ldr	r1, [r3, #0]
 800c292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c294:	041a      	lsls	r2, r3, #16
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	00db      	lsls	r3, r3, #3
 800c29c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	891b      	ldrh	r3, [r3, #8]
 800c2ac:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	6959      	ldr	r1, [r3, #20]
 800c2b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	8b7a      	ldrh	r2, [r7, #26]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 ffac 	bl	800d216 <USB_WritePMA>
 800c2be:	e2fd      	b.n	800c8bc <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	785b      	ldrb	r3, [r3, #1]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d16a      	bne.n	800c39e <USB_EPStartXfer+0x496>
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	781b      	ldrb	r3, [r3, #0]
 800c2cc:	00db      	lsls	r3, r3, #3
 800c2ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	00db      	lsls	r3, r3, #3
 800c2de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2e6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c2ea:	601a      	str	r2, [r3, #0]
 800c2ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d112      	bne.n	800c318 <USB_EPStartXfer+0x410>
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c30c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c310:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c314:	601a      	str	r2, [r3, #0]
 800c316:	e06a      	b.n	800c3ee <USB_EPStartXfer+0x4e6>
 800c318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c31a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c31c:	d81e      	bhi.n	800c35c <USB_EPStartXfer+0x454>
 800c31e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c320:	085b      	lsrs	r3, r3, #1
 800c322:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d002      	beq.n	800c334 <USB_EPStartXfer+0x42c>
 800c32e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c330:	3301      	adds	r3, #1
 800c332:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	00db      	lsls	r3, r3, #3
 800c33a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c33e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c342:	6819      	ldr	r1, [r3, #0]
 800c344:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c346:	069a      	lsls	r2, r3, #26
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	00db      	lsls	r3, r3, #3
 800c34e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c352:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c356:	430a      	orrs	r2, r1
 800c358:	601a      	str	r2, [r3, #0]
 800c35a:	e048      	b.n	800c3ee <USB_EPStartXfer+0x4e6>
 800c35c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c35e:	095b      	lsrs	r3, r3, #5
 800c360:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c364:	f003 031f 	and.w	r3, r3, #31
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d102      	bne.n	800c372 <USB_EPStartXfer+0x46a>
 800c36c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c36e:	3b01      	subs	r3, #1
 800c370:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	00db      	lsls	r3, r3, #3
 800c378:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c37c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c384:	069b      	lsls	r3, r3, #26
 800c386:	431a      	orrs	r2, r3
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c392:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c396:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c39a:	601a      	str	r2, [r3, #0]
 800c39c:	e027      	b.n	800c3ee <USB_EPStartXfer+0x4e6>
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	785b      	ldrb	r3, [r3, #1]
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d123      	bne.n	800c3ee <USB_EPStartXfer+0x4e6>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	00db      	lsls	r3, r3, #3
 800c3bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3c4:	b292      	uxth	r2, r2
 800c3c6:	601a      	str	r2, [r3, #0]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	00db      	lsls	r3, r3, #3
 800c3ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3d6:	6819      	ldr	r1, [r3, #0]
 800c3d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3da:	041a      	lsls	r2, r3, #16
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3ea:	430a      	orrs	r2, r1
 800c3ec:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	891b      	ldrh	r3, [r3, #8]
 800c3f2:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	6959      	ldr	r1, [r3, #20]
 800c3f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	8b7a      	ldrh	r2, [r7, #26]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 ff09 	bl	800d216 <USB_WritePMA>
            ep->xfer_buff += len;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	695a      	ldr	r2, [r3, #20]
 800c408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c40a:	441a      	add	r2, r3
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	6a1a      	ldr	r2, [r3, #32]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d906      	bls.n	800c42a <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	6a1a      	ldr	r2, [r3, #32]
 800c420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c422:	1ad2      	subs	r2, r2, r3
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	621a      	str	r2, [r3, #32]
 800c428:	e005      	b.n	800c436 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	2200      	movs	r2, #0
 800c434:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	785b      	ldrb	r3, [r3, #1]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d16a      	bne.n	800c514 <USB_EPStartXfer+0x60c>
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	00db      	lsls	r3, r3, #3
 800c444:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c448:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c44c:	685a      	ldr	r2, [r3, #4]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	00db      	lsls	r3, r3, #3
 800c454:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c458:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c45c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c460:	605a      	str	r2, [r3, #4]
 800c462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c464:	2b00      	cmp	r3, #0
 800c466:	d112      	bne.n	800c48e <USB_EPStartXfer+0x586>
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	00db      	lsls	r3, r3, #3
 800c46e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c472:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c476:	685a      	ldr	r2, [r3, #4]
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	00db      	lsls	r3, r3, #3
 800c47e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c482:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c486:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c48a:	605a      	str	r2, [r3, #4]
 800c48c:	e06a      	b.n	800c564 <USB_EPStartXfer+0x65c>
 800c48e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c490:	2b3e      	cmp	r3, #62	@ 0x3e
 800c492:	d81e      	bhi.n	800c4d2 <USB_EPStartXfer+0x5ca>
 800c494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c496:	085b      	lsrs	r3, r3, #1
 800c498:	647b      	str	r3, [r7, #68]	@ 0x44
 800c49a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c49c:	f003 0301 	and.w	r3, r3, #1
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <USB_EPStartXfer+0x5a2>
 800c4a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	00db      	lsls	r3, r3, #3
 800c4b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4b8:	6859      	ldr	r1, [r3, #4]
 800c4ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4bc:	069a      	lsls	r2, r3, #26
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4cc:	430a      	orrs	r2, r1
 800c4ce:	605a      	str	r2, [r3, #4]
 800c4d0:	e048      	b.n	800c564 <USB_EPStartXfer+0x65c>
 800c4d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4d4:	095b      	lsrs	r3, r3, #5
 800c4d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4da:	f003 031f 	and.w	r3, r3, #31
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d102      	bne.n	800c4e8 <USB_EPStartXfer+0x5e0>
 800c4e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	00db      	lsls	r3, r3, #3
 800c4ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4fa:	069b      	lsls	r3, r3, #26
 800c4fc:	431a      	orrs	r2, r3
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c508:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c50c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c510:	605a      	str	r2, [r3, #4]
 800c512:	e027      	b.n	800c564 <USB_EPStartXfer+0x65c>
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	785b      	ldrb	r3, [r3, #1]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d123      	bne.n	800c564 <USB_EPStartXfer+0x65c>
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	00db      	lsls	r3, r3, #3
 800c522:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c526:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	00db      	lsls	r3, r3, #3
 800c532:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c536:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c53a:	b292      	uxth	r2, r2
 800c53c:	605a      	str	r2, [r3, #4]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c548:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c54c:	6859      	ldr	r1, [r3, #4]
 800c54e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c550:	041a      	lsls	r2, r3, #16
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	00db      	lsls	r3, r3, #3
 800c558:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c55c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c560:	430a      	orrs	r2, r1
 800c562:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	895b      	ldrh	r3, [r3, #10]
 800c568:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	6959      	ldr	r1, [r3, #20]
 800c56e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c570:	b29b      	uxth	r3, r3
 800c572:	8b7a      	ldrh	r2, [r7, #26]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fe4e 	bl	800d216 <USB_WritePMA>
 800c57a:	e19f      	b.n	800c8bc <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	6a1b      	ldr	r3, [r3, #32]
 800c580:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	4ba0      	ldr	r3, [pc, #640]	@ (800c810 <USB_EPStartXfer+0x908>)
 800c590:	4013      	ands	r3, r2
 800c592:	617b      	str	r3, [r7, #20]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	441a      	add	r2, r3
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5a8:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	00db      	lsls	r3, r3, #3
 800c5b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5c8:	b292      	uxth	r2, r2
 800c5ca:	601a      	str	r2, [r3, #0]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	00db      	lsls	r3, r3, #3
 800c5d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5da:	6819      	ldr	r1, [r3, #0]
 800c5dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5de:	041a      	lsls	r2, r3, #16
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	00db      	lsls	r3, r3, #3
 800c5e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5ee:	430a      	orrs	r2, r1
 800c5f0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	891b      	ldrh	r3, [r3, #8]
 800c5f6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	6959      	ldr	r1, [r3, #20]
 800c5fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	8b7a      	ldrh	r2, [r7, #26]
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fe07 	bl	800d216 <USB_WritePMA>
 800c608:	e158      	b.n	800c8bc <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	6a1a      	ldr	r2, [r3, #32]
 800c60e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c610:	1ad2      	subs	r2, r2, r3
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	4413      	add	r3, r2
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 80a3 	beq.w	800c772 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	785b      	ldrb	r3, [r3, #1]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d16a      	bne.n	800c70a <USB_EPStartXfer+0x802>
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	00db      	lsls	r3, r3, #3
 800c63a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c63e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c642:	685a      	ldr	r2, [r3, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	00db      	lsls	r3, r3, #3
 800c64a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c64e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c652:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c656:	605a      	str	r2, [r3, #4]
 800c658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d112      	bne.n	800c684 <USB_EPStartXfer+0x77c>
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	00db      	lsls	r3, r3, #3
 800c664:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c668:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c66c:	685a      	ldr	r2, [r3, #4]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c678:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c67c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c680:	605a      	str	r2, [r3, #4]
 800c682:	e06a      	b.n	800c75a <USB_EPStartXfer+0x852>
 800c684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c686:	2b3e      	cmp	r3, #62	@ 0x3e
 800c688:	d81e      	bhi.n	800c6c8 <USB_EPStartXfer+0x7c0>
 800c68a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c68c:	085b      	lsrs	r3, r3, #1
 800c68e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c692:	f003 0301 	and.w	r3, r3, #1
 800c696:	2b00      	cmp	r3, #0
 800c698:	d002      	beq.n	800c6a0 <USB_EPStartXfer+0x798>
 800c69a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c69c:	3301      	adds	r3, #1
 800c69e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	00db      	lsls	r3, r3, #3
 800c6a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6ae:	6859      	ldr	r1, [r3, #4]
 800c6b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6b2:	069a      	lsls	r2, r3, #26
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	00db      	lsls	r3, r3, #3
 800c6ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	605a      	str	r2, [r3, #4]
 800c6c6:	e048      	b.n	800c75a <USB_EPStartXfer+0x852>
 800c6c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6ca:	095b      	lsrs	r3, r3, #5
 800c6cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6d0:	f003 031f 	and.w	r3, r3, #31
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d102      	bne.n	800c6de <USB_EPStartXfer+0x7d6>
 800c6d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	00db      	lsls	r3, r3, #3
 800c6e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6ec:	685a      	ldr	r2, [r3, #4]
 800c6ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6f0:	069b      	lsls	r3, r3, #26
 800c6f2:	431a      	orrs	r2, r3
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	00db      	lsls	r3, r3, #3
 800c6fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c702:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c706:	605a      	str	r2, [r3, #4]
 800c708:	e027      	b.n	800c75a <USB_EPStartXfer+0x852>
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	785b      	ldrb	r3, [r3, #1]
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d123      	bne.n	800c75a <USB_EPStartXfer+0x852>
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	00db      	lsls	r3, r3, #3
 800c718:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c71c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c720:	685a      	ldr	r2, [r3, #4]
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	00db      	lsls	r3, r3, #3
 800c728:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c72c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c730:	b292      	uxth	r2, r2
 800c732:	605a      	str	r2, [r3, #4]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	00db      	lsls	r3, r3, #3
 800c73a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c73e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c742:	6859      	ldr	r1, [r3, #4]
 800c744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c746:	041a      	lsls	r2, r3, #16
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	00db      	lsls	r3, r3, #3
 800c74e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c752:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c756:	430a      	orrs	r2, r1
 800c758:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	895b      	ldrh	r3, [r3, #10]
 800c75e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	6959      	ldr	r1, [r3, #20]
 800c764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c766:	b29b      	uxth	r3, r3
 800c768:	8b7a      	ldrh	r2, [r7, #26]
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 fd53 	bl	800d216 <USB_WritePMA>
 800c770:	e0a4      	b.n	800c8bc <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	785b      	ldrb	r3, [r3, #1]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d16d      	bne.n	800c856 <USB_EPStartXfer+0x94e>
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c784:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	00db      	lsls	r3, r3, #3
 800c790:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c794:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c798:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c79c:	601a      	str	r2, [r3, #0]
 800c79e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d112      	bne.n	800c7ca <USB_EPStartXfer+0x8c2>
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	00db      	lsls	r3, r3, #3
 800c7aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	00db      	lsls	r3, r3, #3
 800c7ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7c2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	e06d      	b.n	800c8a6 <USB_EPStartXfer+0x99e>
 800c7ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7cc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7ce:	d821      	bhi.n	800c814 <USB_EPStartXfer+0x90c>
 800c7d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7d2:	085b      	lsrs	r3, r3, #1
 800c7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d002      	beq.n	800c7e6 <USB_EPStartXfer+0x8de>
 800c7e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	00db      	lsls	r3, r3, #3
 800c7ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7f4:	6819      	ldr	r1, [r3, #0]
 800c7f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7f8:	069a      	lsls	r2, r3, #26
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	00db      	lsls	r3, r3, #3
 800c800:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c804:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c808:	430a      	orrs	r2, r1
 800c80a:	601a      	str	r2, [r3, #0]
 800c80c:	e04b      	b.n	800c8a6 <USB_EPStartXfer+0x99e>
 800c80e:	bf00      	nop
 800c810:	07ff8e8f 	.word	0x07ff8e8f
 800c814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c816:	095b      	lsrs	r3, r3, #5
 800c818:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c81a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c81c:	f003 031f 	and.w	r3, r3, #31
 800c820:	2b00      	cmp	r3, #0
 800c822:	d102      	bne.n	800c82a <USB_EPStartXfer+0x922>
 800c824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c826:	3b01      	subs	r3, #1
 800c828:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c834:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c83c:	069b      	lsls	r3, r3, #26
 800c83e:	431a      	orrs	r2, r3
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	00db      	lsls	r3, r3, #3
 800c846:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c84a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c84e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	e027      	b.n	800c8a6 <USB_EPStartXfer+0x99e>
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	785b      	ldrb	r3, [r3, #1]
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d123      	bne.n	800c8a6 <USB_EPStartXfer+0x99e>
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	00db      	lsls	r3, r3, #3
 800c864:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c868:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c878:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c87c:	b292      	uxth	r2, r2
 800c87e:	601a      	str	r2, [r3, #0]
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	00db      	lsls	r3, r3, #3
 800c886:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c88a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c88e:	6819      	ldr	r1, [r3, #0]
 800c890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c892:	041a      	lsls	r2, r3, #16
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	00db      	lsls	r3, r3, #3
 800c89a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c89e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8a2:	430a      	orrs	r2, r1
 800c8a4:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	891b      	ldrh	r3, [r3, #8]
 800c8aa:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	6959      	ldr	r1, [r3, #20]
 800c8b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	8b7a      	ldrh	r2, [r7, #26]
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fcad 	bl	800d216 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	4b8b      	ldr	r3, [pc, #556]	@ (800caf8 <USB_EPStartXfer+0xbf0>)
 800c8ca:	4013      	ands	r3, r2
 800c8cc:	60fb      	str	r3, [r7, #12]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f083 0310 	eor.w	r3, r3, #16
 800c8d4:	60fb      	str	r3, [r7, #12]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f083 0320 	eor.w	r3, r3, #32
 800c8dc:	60fb      	str	r3, [r7, #12]
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	441a      	add	r2, r3
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8f2:	6013      	str	r3, [r2, #0]
 800c8f4:	e36b      	b.n	800cfce <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	7b1b      	ldrb	r3, [r3, #12]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f040 8081 	bne.w	800ca02 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	699a      	ldr	r2, [r3, #24]
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d909      	bls.n	800c920 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	699a      	ldr	r2, [r3, #24]
 800c916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c918:	1ad2      	subs	r2, r2, r3
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	619a      	str	r2, [r3, #24]
 800c91e:	e005      	b.n	800c92c <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	699b      	ldr	r3, [r3, #24]
 800c924:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	2200      	movs	r2, #0
 800c92a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	00db      	lsls	r3, r3, #3
 800c932:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c936:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	00db      	lsls	r3, r3, #3
 800c942:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c946:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c94a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c94e:	605a      	str	r2, [r3, #4]
 800c950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c952:	2b00      	cmp	r3, #0
 800c954:	d112      	bne.n	800c97c <USB_EPStartXfer+0xa74>
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c960:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c964:	685a      	ldr	r2, [r3, #4]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c970:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c974:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c978:	605a      	str	r2, [r3, #4]
 800c97a:	e30c      	b.n	800cf96 <USB_EPStartXfer+0x108e>
 800c97c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c97e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c980:	d81e      	bhi.n	800c9c0 <USB_EPStartXfer+0xab8>
 800c982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c984:	085b      	lsrs	r3, r3, #1
 800c986:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c98a:	f003 0301 	and.w	r3, r3, #1
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d002      	beq.n	800c998 <USB_EPStartXfer+0xa90>
 800c992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c994:	3301      	adds	r3, #1
 800c996:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	00db      	lsls	r3, r3, #3
 800c99e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9a6:	6859      	ldr	r1, [r3, #4]
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9aa:	069a      	lsls	r2, r3, #26
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	00db      	lsls	r3, r3, #3
 800c9b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9ba:	430a      	orrs	r2, r1
 800c9bc:	605a      	str	r2, [r3, #4]
 800c9be:	e2ea      	b.n	800cf96 <USB_EPStartXfer+0x108e>
 800c9c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9c2:	095b      	lsrs	r3, r3, #5
 800c9c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9c8:	f003 031f 	and.w	r3, r3, #31
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d102      	bne.n	800c9d6 <USB_EPStartXfer+0xace>
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	00db      	lsls	r3, r3, #3
 800c9dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9e4:	685a      	ldr	r2, [r3, #4]
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e8:	069b      	lsls	r3, r3, #26
 800c9ea:	431a      	orrs	r2, r3
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	00db      	lsls	r3, r3, #3
 800c9f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c9fe:	605a      	str	r2, [r3, #4]
 800ca00:	e2c9      	b.n	800cf96 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	78db      	ldrb	r3, [r3, #3]
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	f040 8176 	bne.w	800ccf8 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	785b      	ldrb	r3, [r3, #1]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d173      	bne.n	800cafc <USB_EPStartXfer+0xbf4>
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	00db      	lsls	r3, r3, #3
 800ca1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca32:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ca36:	601a      	str	r2, [r3, #0]
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	691b      	ldr	r3, [r3, #16]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d112      	bne.n	800ca66 <USB_EPStartXfer+0xb5e>
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	00db      	lsls	r3, r3, #3
 800ca46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca5e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ca62:	601a      	str	r2, [r3, #0]
 800ca64:	e073      	b.n	800cb4e <USB_EPStartXfer+0xc46>
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca6c:	d820      	bhi.n	800cab0 <USB_EPStartXfer+0xba8>
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	085b      	lsrs	r3, r3, #1
 800ca74:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	f003 0301 	and.w	r3, r3, #1
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d002      	beq.n	800ca88 <USB_EPStartXfer+0xb80>
 800ca82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca84:	3301      	adds	r3, #1
 800ca86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	00db      	lsls	r3, r3, #3
 800ca8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca96:	6819      	ldr	r1, [r3, #0]
 800ca98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca9a:	069a      	lsls	r2, r3, #26
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	00db      	lsls	r3, r3, #3
 800caa2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caa6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caaa:	430a      	orrs	r2, r1
 800caac:	601a      	str	r2, [r3, #0]
 800caae:	e04e      	b.n	800cb4e <USB_EPStartXfer+0xc46>
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	691b      	ldr	r3, [r3, #16]
 800cab4:	095b      	lsrs	r3, r3, #5
 800cab6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	691b      	ldr	r3, [r3, #16]
 800cabc:	f003 031f 	and.w	r3, r3, #31
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d102      	bne.n	800caca <USB_EPStartXfer+0xbc2>
 800cac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac6:	3b01      	subs	r3, #1
 800cac8:	637b      	str	r3, [r7, #52]	@ 0x34
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	00db      	lsls	r3, r3, #3
 800cad0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cad4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cadc:	069b      	lsls	r3, r3, #26
 800cade:	431a      	orrs	r2, r3
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	00db      	lsls	r3, r3, #3
 800cae6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800caf2:	601a      	str	r2, [r3, #0]
 800caf4:	e02b      	b.n	800cb4e <USB_EPStartXfer+0xc46>
 800caf6:	bf00      	nop
 800caf8:	07ff8fbf 	.word	0x07ff8fbf
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	785b      	ldrb	r3, [r3, #1]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d124      	bne.n	800cb4e <USB_EPStartXfer+0xc46>
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	00db      	lsls	r3, r3, #3
 800cb0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb22:	b292      	uxth	r2, r2
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	00db      	lsls	r3, r3, #3
 800cb2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb34:	6819      	ldr	r1, [r3, #0]
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	691b      	ldr	r3, [r3, #16]
 800cb3a:	041a      	lsls	r2, r3, #16
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	00db      	lsls	r3, r3, #3
 800cb42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb4a:	430a      	orrs	r2, r1
 800cb4c:	601a      	str	r2, [r3, #0]
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	785b      	ldrb	r3, [r3, #1]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d170      	bne.n	800cc38 <USB_EPStartXfer+0xd30>
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	00db      	lsls	r3, r3, #3
 800cb5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb64:	685a      	ldr	r2, [r3, #4]
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	00db      	lsls	r3, r3, #3
 800cb6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb74:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cb78:	605a      	str	r2, [r3, #4]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d112      	bne.n	800cba8 <USB_EPStartXfer+0xca0>
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	00db      	lsls	r3, r3, #3
 800cb88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb90:	685a      	ldr	r2, [r3, #4]
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cba0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cba4:	605a      	str	r2, [r3, #4]
 800cba6:	e070      	b.n	800cc8a <USB_EPStartXfer+0xd82>
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	2b3e      	cmp	r3, #62	@ 0x3e
 800cbae:	d820      	bhi.n	800cbf2 <USB_EPStartXfer+0xcea>
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	691b      	ldr	r3, [r3, #16]
 800cbb4:	085b      	lsrs	r3, r3, #1
 800cbb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	691b      	ldr	r3, [r3, #16]
 800cbbc:	f003 0301 	and.w	r3, r3, #1
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <USB_EPStartXfer+0xcc2>
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	00db      	lsls	r3, r3, #3
 800cbd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbd8:	6859      	ldr	r1, [r3, #4]
 800cbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbdc:	069a      	lsls	r2, r3, #26
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	00db      	lsls	r3, r3, #3
 800cbe4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbe8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbec:	430a      	orrs	r2, r1
 800cbee:	605a      	str	r2, [r3, #4]
 800cbf0:	e04b      	b.n	800cc8a <USB_EPStartXfer+0xd82>
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	691b      	ldr	r3, [r3, #16]
 800cbf6:	095b      	lsrs	r3, r3, #5
 800cbf8:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	691b      	ldr	r3, [r3, #16]
 800cbfe:	f003 031f 	and.w	r3, r3, #31
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d102      	bne.n	800cc0c <USB_EPStartXfer+0xd04>
 800cc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	00db      	lsls	r3, r3, #3
 800cc12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc1a:	685a      	ldr	r2, [r3, #4]
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1e:	069b      	lsls	r3, r3, #26
 800cc20:	431a      	orrs	r2, r3
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	00db      	lsls	r3, r3, #3
 800cc28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc30:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cc34:	605a      	str	r2, [r3, #4]
 800cc36:	e028      	b.n	800cc8a <USB_EPStartXfer+0xd82>
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	785b      	ldrb	r3, [r3, #1]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d124      	bne.n	800cc8a <USB_EPStartXfer+0xd82>
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	00db      	lsls	r3, r3, #3
 800cc46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	00db      	lsls	r3, r3, #3
 800cc56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc5e:	b292      	uxth	r2, r2
 800cc60:	605a      	str	r2, [r3, #4]
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	00db      	lsls	r3, r3, #3
 800cc68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc70:	6859      	ldr	r1, [r3, #4]
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	041a      	lsls	r2, r3, #16
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc86:	430a      	orrs	r2, r1
 800cc88:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	69db      	ldr	r3, [r3, #28]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f000 8181 	beq.w	800cf96 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4413      	add	r3, r2
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cca2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d004      	beq.n	800ccb6 <USB_EPStartXfer+0xdae>
 800ccac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ccae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10b      	bne.n	800ccce <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ccb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ccb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f040 816a 	bne.w	800cf96 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ccc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ccc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f040 8164 	bne.w	800cf96 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	4413      	add	r3, r2
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	4b98      	ldr	r3, [pc, #608]	@ (800cf3c <USB_EPStartXfer+0x1034>)
 800ccdc:	4013      	ands	r3, r2
 800ccde:	623b      	str	r3, [r7, #32]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	441a      	add	r2, r3
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccf0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ccf4:	6013      	str	r3, [r2, #0]
 800ccf6:	e14e      	b.n	800cf96 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	78db      	ldrb	r3, [r3, #3]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	f040 8148 	bne.w	800cf92 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	699a      	ldr	r2, [r3, #24]
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d909      	bls.n	800cd22 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	691b      	ldr	r3, [r3, #16]
 800cd12:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	699a      	ldr	r2, [r3, #24]
 800cd18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd1a:	1ad2      	subs	r2, r2, r3
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	619a      	str	r2, [r3, #24]
 800cd20:	e005      	b.n	800cd2e <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	699b      	ldr	r3, [r3, #24]
 800cd26:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	785b      	ldrb	r3, [r3, #1]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d16a      	bne.n	800ce0c <USB_EPStartXfer+0xf04>
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	00db      	lsls	r3, r3, #3
 800cd3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd54:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cd58:	601a      	str	r2, [r3, #0]
 800cd5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d112      	bne.n	800cd86 <USB_EPStartXfer+0xe7e>
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	00db      	lsls	r3, r3, #3
 800cd66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd7e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd82:	601a      	str	r2, [r3, #0]
 800cd84:	e06a      	b.n	800ce5c <USB_EPStartXfer+0xf54>
 800cd86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd88:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd8a:	d81e      	bhi.n	800cdca <USB_EPStartXfer+0xec2>
 800cd8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd8e:	085b      	lsrs	r3, r3, #1
 800cd90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d002      	beq.n	800cda2 <USB_EPStartXfer+0xe9a>
 800cd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd9e:	3301      	adds	r3, #1
 800cda0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	00db      	lsls	r3, r3, #3
 800cda8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdb0:	6819      	ldr	r1, [r3, #0]
 800cdb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb4:	069a      	lsls	r2, r3, #26
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	00db      	lsls	r3, r3, #3
 800cdbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdc4:	430a      	orrs	r2, r1
 800cdc6:	601a      	str	r2, [r3, #0]
 800cdc8:	e048      	b.n	800ce5c <USB_EPStartXfer+0xf54>
 800cdca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdcc:	095b      	lsrs	r3, r3, #5
 800cdce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdd2:	f003 031f 	and.w	r3, r3, #31
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d102      	bne.n	800cde0 <USB_EPStartXfer+0xed8>
 800cdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cddc:	3b01      	subs	r3, #1
 800cdde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	00db      	lsls	r3, r3, #3
 800cde6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf2:	069b      	lsls	r3, r3, #26
 800cdf4:	431a      	orrs	r2, r3
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce04:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce08:	601a      	str	r2, [r3, #0]
 800ce0a:	e027      	b.n	800ce5c <USB_EPStartXfer+0xf54>
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	785b      	ldrb	r3, [r3, #1]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d123      	bne.n	800ce5c <USB_EPStartXfer+0xf54>
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	781b      	ldrb	r3, [r3, #0]
 800ce18:	00db      	lsls	r3, r3, #3
 800ce1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	00db      	lsls	r3, r3, #3
 800ce2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce32:	b292      	uxth	r2, r2
 800ce34:	601a      	str	r2, [r3, #0]
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	00db      	lsls	r3, r3, #3
 800ce3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce44:	6819      	ldr	r1, [r3, #0]
 800ce46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce48:	041a      	lsls	r2, r3, #16
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	00db      	lsls	r3, r3, #3
 800ce50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce58:	430a      	orrs	r2, r1
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	785b      	ldrb	r3, [r3, #1]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d16d      	bne.n	800cf40 <USB_EPStartXfer+0x1038>
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	00db      	lsls	r3, r3, #3
 800ce6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce72:	685a      	ldr	r2, [r3, #4]
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	00db      	lsls	r3, r3, #3
 800ce7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce82:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ce86:	605a      	str	r2, [r3, #4]
 800ce88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d112      	bne.n	800ceb4 <USB_EPStartXfer+0xfac>
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	00db      	lsls	r3, r3, #3
 800ce94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce9c:	685a      	ldr	r2, [r3, #4]
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	00db      	lsls	r3, r3, #3
 800cea4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cea8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ceac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ceb0:	605a      	str	r2, [r3, #4]
 800ceb2:	e070      	b.n	800cf96 <USB_EPStartXfer+0x108e>
 800ceb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ceb6:	2b3e      	cmp	r3, #62	@ 0x3e
 800ceb8:	d81e      	bhi.n	800cef8 <USB_EPStartXfer+0xff0>
 800ceba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cebc:	085b      	lsrs	r3, r3, #1
 800cebe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cec2:	f003 0301 	and.w	r3, r3, #1
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d002      	beq.n	800ced0 <USB_EPStartXfer+0xfc8>
 800ceca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cecc:	3301      	adds	r3, #1
 800cece:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	00db      	lsls	r3, r3, #3
 800ced6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cede:	6859      	ldr	r1, [r3, #4]
 800cee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee2:	069a      	lsls	r2, r3, #26
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cef2:	430a      	orrs	r2, r1
 800cef4:	605a      	str	r2, [r3, #4]
 800cef6:	e04e      	b.n	800cf96 <USB_EPStartXfer+0x108e>
 800cef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cefa:	095b      	lsrs	r3, r3, #5
 800cefc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cefe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf00:	f003 031f 	and.w	r3, r3, #31
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d102      	bne.n	800cf0e <USB_EPStartXfer+0x1006>
 800cf08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf0a:	3b01      	subs	r3, #1
 800cf0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	00db      	lsls	r3, r3, #3
 800cf14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf1c:	685a      	ldr	r2, [r3, #4]
 800cf1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf20:	069b      	lsls	r3, r3, #26
 800cf22:	431a      	orrs	r2, r3
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	00db      	lsls	r3, r3, #3
 800cf2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf32:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cf36:	605a      	str	r2, [r3, #4]
 800cf38:	e02d      	b.n	800cf96 <USB_EPStartXfer+0x108e>
 800cf3a:	bf00      	nop
 800cf3c:	07ff8f8f 	.word	0x07ff8f8f
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	785b      	ldrb	r3, [r3, #1]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d126      	bne.n	800cf96 <USB_EPStartXfer+0x108e>
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	00db      	lsls	r3, r3, #3
 800cf4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf56:	685a      	ldr	r2, [r3, #4]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	00db      	lsls	r3, r3, #3
 800cf5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf66:	b292      	uxth	r2, r2
 800cf68:	605a      	str	r2, [r3, #4]
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	00db      	lsls	r3, r3, #3
 800cf70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf78:	6859      	ldr	r1, [r3, #4]
 800cf7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf7c:	041a      	lsls	r2, r3, #16
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	00db      	lsls	r3, r3, #3
 800cf84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf8c:	430a      	orrs	r2, r1
 800cf8e:	605a      	str	r2, [r3, #4]
 800cf90:	e001      	b.n	800cf96 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	e01c      	b.n	800cfd0 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	4413      	add	r3, r2
 800cfa0:	681a      	ldr	r2, [r3, #0]
 800cfa2:	4b0d      	ldr	r3, [pc, #52]	@ (800cfd8 <USB_EPStartXfer+0x10d0>)
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	61fb      	str	r3, [r7, #28]
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cfae:	61fb      	str	r3, [r7, #28]
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cfb6:	61fb      	str	r3, [r7, #28]
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	441a      	add	r2, r3
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cfce:	2300      	movs	r3, #0
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3758      	adds	r7, #88	@ 0x58
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	07ffbf8f 	.word	0x07ffbf8f

0800cfdc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b085      	sub	sp, #20
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	785b      	ldrb	r3, [r3, #1]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d018      	beq.n	800d020 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	4413      	add	r3, r2
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	4b19      	ldr	r3, [pc, #100]	@ (800d060 <USB_EPSetStall+0x84>)
 800cffc:	4013      	ands	r3, r2
 800cffe:	60bb      	str	r3, [r7, #8]
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	f083 0310 	eor.w	r3, r3, #16
 800d006:	60bb      	str	r3, [r7, #8]
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	441a      	add	r2, r3
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d01c:	6013      	str	r3, [r2, #0]
 800d01e:	e017      	b.n	800d050 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4413      	add	r3, r2
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	4b0d      	ldr	r3, [pc, #52]	@ (800d064 <USB_EPSetStall+0x88>)
 800d02e:	4013      	ands	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d038:	60fb      	str	r3, [r7, #12]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	009b      	lsls	r3, r3, #2
 800d042:	441a      	add	r2, r3
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d04a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d04e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	3714      	adds	r7, #20
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr
 800d05e:	bf00      	nop
 800d060:	07ff8fbf 	.word	0x07ff8fbf
 800d064:	07ffbf8f 	.word	0x07ffbf8f

0800d068 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d068:	b480      	push	{r7}
 800d06a:	b089      	sub	sp, #36	@ 0x24
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	7b1b      	ldrb	r3, [r3, #12]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d17c      	bne.n	800d174 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	785b      	ldrb	r3, [r3, #1]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d03c      	beq.n	800d0fc <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	4413      	add	r3, r2
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	613b      	str	r3, [r7, #16]
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d096:	2b00      	cmp	r3, #0
 800d098:	d013      	beq.n	800d0c2 <USB_EPClearStall+0x5a>
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4413      	add	r3, r2
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	4b37      	ldr	r3, [pc, #220]	@ (800d184 <USB_EPClearStall+0x11c>)
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	60fb      	str	r3, [r7, #12]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	441a      	add	r2, r3
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d0c0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	78db      	ldrb	r3, [r3, #3]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d054      	beq.n	800d174 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	4413      	add	r3, r2
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	4b2c      	ldr	r3, [pc, #176]	@ (800d188 <USB_EPClearStall+0x120>)
 800d0d8:	4013      	ands	r3, r2
 800d0da:	60bb      	str	r3, [r7, #8]
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	f083 0320 	eor.w	r3, r3, #32
 800d0e2:	60bb      	str	r3, [r7, #8]
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	441a      	add	r2, r3
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0f8:	6013      	str	r3, [r2, #0]
 800d0fa:	e03b      	b.n	800d174 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4413      	add	r3, r2
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	61fb      	str	r3, [r7, #28]
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d110:	2b00      	cmp	r3, #0
 800d112:	d013      	beq.n	800d13c <USB_EPClearStall+0xd4>
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	4413      	add	r3, r2
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	4b18      	ldr	r3, [pc, #96]	@ (800d184 <USB_EPClearStall+0x11c>)
 800d122:	4013      	ands	r3, r2
 800d124:	61bb      	str	r3, [r7, #24]
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	441a      	add	r2, r3
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d13a:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	4413      	add	r3, r2
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	4b10      	ldr	r3, [pc, #64]	@ (800d18c <USB_EPClearStall+0x124>)
 800d14a:	4013      	ands	r3, r2
 800d14c:	617b      	str	r3, [r7, #20]
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d154:	617b      	str	r3, [r7, #20]
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d15c:	617b      	str	r3, [r7, #20]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	441a      	add	r2, r3
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d172:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3724      	adds	r7, #36	@ 0x24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	07ff8f8f 	.word	0x07ff8f8f
 800d188:	07ff8fbf 	.word	0x07ff8fbf
 800d18c:	07ffbf8f 	.word	0x07ffbf8f

0800d190 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d19c:	78fb      	ldrb	r3, [r7, #3]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d102      	bne.n	800d1a8 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2280      	movs	r2, #128	@ 0x80
 800d1a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	370c      	adds	r7, #12
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr

0800d1b6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800d1b6:	b480      	push	{r7}
 800d1b8:	b083      	sub	sp, #12
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1c2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1e4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d1ec:	2300      	movs	r3, #0
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	370c      	adds	r7, #12
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr

0800d1fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800d1fa:	b480      	push	{r7}
 800d1fc:	b085      	sub	sp, #20
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d206:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d208:	68fb      	ldr	r3, [r7, #12]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3714      	adds	r7, #20
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr

0800d216 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d216:	b480      	push	{r7}
 800d218:	b08b      	sub	sp, #44	@ 0x2c
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	60f8      	str	r0, [r7, #12]
 800d21e:	60b9      	str	r1, [r7, #8]
 800d220:	4611      	mov	r1, r2
 800d222:	461a      	mov	r2, r3
 800d224:	460b      	mov	r3, r1
 800d226:	80fb      	strh	r3, [r7, #6]
 800d228:	4613      	mov	r3, r2
 800d22a:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d22c:	88bb      	ldrh	r3, [r7, #4]
 800d22e:	3303      	adds	r3, #3
 800d230:	089b      	lsrs	r3, r3, #2
 800d232:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d234:	88bb      	ldrh	r3, [r7, #4]
 800d236:	f003 0303 	and.w	r3, r3, #3
 800d23a:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800d240:	8afb      	ldrh	r3, [r7, #22]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d002      	beq.n	800d24c <USB_WritePMA+0x36>
  {
    NbWords--;
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	3b01      	subs	r3, #1
 800d24a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d24c:	88fb      	ldrh	r3, [r7, #6]
 800d24e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d252:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d256:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	623b      	str	r3, [r7, #32]
 800d25c:	e015      	b.n	800d28a <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	3304      	adds	r3, #4
 800d26a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	3301      	adds	r3, #1
 800d270:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	3301      	adds	r3, #1
 800d276:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	3301      	adds	r3, #1
 800d27c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	3301      	adds	r3, #1
 800d282:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800d284:	6a3b      	ldr	r3, [r7, #32]
 800d286:	3b01      	subs	r3, #1
 800d288:	623b      	str	r3, [r7, #32]
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1e6      	bne.n	800d25e <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800d290:	8afb      	ldrh	r3, [r7, #22]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d01a      	beq.n	800d2cc <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800d296:	2300      	movs	r3, #0
 800d298:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	6a3b      	ldr	r3, [r7, #32]
 800d2a2:	00db      	lsls	r3, r3, #3
 800d2a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	623b      	str	r3, [r7, #32]
      pBuf++;
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800d2ba:	8afb      	ldrh	r3, [r7, #22]
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800d2c0:	8afb      	ldrh	r3, [r7, #22]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1e9      	bne.n	800d29a <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2ca:	601a      	str	r2, [r3, #0]
  }
}
 800d2cc:	bf00      	nop
 800d2ce:	372c      	adds	r7, #44	@ 0x2c
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b08b      	sub	sp, #44	@ 0x2c
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	80fb      	strh	r3, [r7, #6]
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d2ee:	88bb      	ldrh	r3, [r7, #4]
 800d2f0:	3303      	adds	r3, #3
 800d2f2:	089b      	lsrs	r3, r3, #2
 800d2f4:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d2f6:	88bb      	ldrh	r3, [r7, #4]
 800d2f8:	f003 0303 	and.w	r3, r3, #3
 800d2fc:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d302:	88fb      	ldrh	r3, [r7, #6]
 800d304:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d308:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d30c:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800d30e:	8b7b      	ldrh	r3, [r7, #26]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <USB_ReadPMA+0x42>
  {
    NbWords--;
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	3b01      	subs	r3, #1
 800d318:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800d31a:	69fb      	ldr	r3, [r7, #28]
 800d31c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d31e:	e015      	b.n	800d34c <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800d320:	6a3b      	ldr	r3, [r7, #32]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800d328:	6a3b      	ldr	r3, [r7, #32]
 800d32a:	3304      	adds	r3, #4
 800d32c:	623b      	str	r3, [r7, #32]
    pBuf++;
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	3301      	adds	r3, #1
 800d332:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	3301      	adds	r3, #1
 800d338:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	3301      	adds	r3, #1
 800d33e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	3301      	adds	r3, #1
 800d344:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800d346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d348:	3b01      	subs	r3, #1
 800d34a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d1e6      	bne.n	800d320 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800d352:	8b7b      	ldrh	r3, [r7, #26]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d017      	beq.n	800d388 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800d358:	6a3b      	ldr	r3, [r7, #32]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800d35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d360:	b2db      	uxtb	r3, r3
 800d362:	00db      	lsls	r3, r3, #3
 800d364:	693a      	ldr	r2, [r7, #16]
 800d366:	fa22 f303 	lsr.w	r3, r2, r3
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	701a      	strb	r2, [r3, #0]
      count++;
 800d370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d372:	3301      	adds	r3, #1
 800d374:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	3301      	adds	r3, #1
 800d37a:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800d37c:	8b7b      	ldrh	r3, [r7, #26]
 800d37e:	3b01      	subs	r3, #1
 800d380:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800d382:	8b7b      	ldrh	r3, [r7, #26]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d1ea      	bne.n	800d35e <USB_ReadPMA+0x86>
  }
}
 800d388:	bf00      	nop
 800d38a:	372c      	adds	r7, #44	@ 0x2c
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	460b      	mov	r3, r1
 800d39e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d3a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d3a4:	f000 ffa4 	bl	800e2f0 <USBD_static_malloc>
 800d3a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d109      	bne.n	800d3c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	32b0      	adds	r2, #176	@ 0xb0
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d3c0:	2302      	movs	r3, #2
 800d3c2:	e0d4      	b.n	800d56e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d3c4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f002 fb46 	bl	800fa5c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	32b0      	adds	r2, #176	@ 0xb0
 800d3da:	68f9      	ldr	r1, [r7, #12]
 800d3dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	32b0      	adds	r2, #176	@ 0xb0
 800d3ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7c1b      	ldrb	r3, [r3, #16]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d138      	bne.n	800d46e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d3fc:	4b5e      	ldr	r3, [pc, #376]	@ (800d578 <USBD_CDC_Init+0x1e4>)
 800d3fe:	7819      	ldrb	r1, [r3, #0]
 800d400:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d404:	2202      	movs	r2, #2
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 fe79 	bl	800e0fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d40c:	4b5a      	ldr	r3, [pc, #360]	@ (800d578 <USBD_CDC_Init+0x1e4>)
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	f003 020f 	and.w	r2, r3, #15
 800d414:	6879      	ldr	r1, [r7, #4]
 800d416:	4613      	mov	r3, r2
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	440b      	add	r3, r1
 800d420:	3324      	adds	r3, #36	@ 0x24
 800d422:	2201      	movs	r2, #1
 800d424:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d426:	4b55      	ldr	r3, [pc, #340]	@ (800d57c <USBD_CDC_Init+0x1e8>)
 800d428:	7819      	ldrb	r1, [r3, #0]
 800d42a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d42e:	2202      	movs	r2, #2
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f000 fe64 	bl	800e0fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d436:	4b51      	ldr	r3, [pc, #324]	@ (800d57c <USBD_CDC_Init+0x1e8>)
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	f003 020f 	and.w	r2, r3, #15
 800d43e:	6879      	ldr	r1, [r7, #4]
 800d440:	4613      	mov	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	440b      	add	r3, r1
 800d44a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d44e:	2201      	movs	r2, #1
 800d450:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d452:	4b4b      	ldr	r3, [pc, #300]	@ (800d580 <USBD_CDC_Init+0x1ec>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	f003 020f 	and.w	r2, r3, #15
 800d45a:	6879      	ldr	r1, [r7, #4]
 800d45c:	4613      	mov	r3, r2
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	4413      	add	r3, r2
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	440b      	add	r3, r1
 800d466:	3326      	adds	r3, #38	@ 0x26
 800d468:	2210      	movs	r2, #16
 800d46a:	801a      	strh	r2, [r3, #0]
 800d46c:	e035      	b.n	800d4da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d46e:	4b42      	ldr	r3, [pc, #264]	@ (800d578 <USBD_CDC_Init+0x1e4>)
 800d470:	7819      	ldrb	r1, [r3, #0]
 800d472:	2340      	movs	r3, #64	@ 0x40
 800d474:	2202      	movs	r2, #2
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 fe41 	bl	800e0fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d47c:	4b3e      	ldr	r3, [pc, #248]	@ (800d578 <USBD_CDC_Init+0x1e4>)
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	f003 020f 	and.w	r2, r3, #15
 800d484:	6879      	ldr	r1, [r7, #4]
 800d486:	4613      	mov	r3, r2
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	4413      	add	r3, r2
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	440b      	add	r3, r1
 800d490:	3324      	adds	r3, #36	@ 0x24
 800d492:	2201      	movs	r2, #1
 800d494:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d496:	4b39      	ldr	r3, [pc, #228]	@ (800d57c <USBD_CDC_Init+0x1e8>)
 800d498:	7819      	ldrb	r1, [r3, #0]
 800d49a:	2340      	movs	r3, #64	@ 0x40
 800d49c:	2202      	movs	r2, #2
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 fe2d 	bl	800e0fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d4a4:	4b35      	ldr	r3, [pc, #212]	@ (800d57c <USBD_CDC_Init+0x1e8>)
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	f003 020f 	and.w	r2, r3, #15
 800d4ac:	6879      	ldr	r1, [r7, #4]
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	4413      	add	r3, r2
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	440b      	add	r3, r1
 800d4b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d4bc:	2201      	movs	r2, #1
 800d4be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d4c0:	4b2f      	ldr	r3, [pc, #188]	@ (800d580 <USBD_CDC_Init+0x1ec>)
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	f003 020f 	and.w	r2, r3, #15
 800d4c8:	6879      	ldr	r1, [r7, #4]
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4413      	add	r3, r2
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	440b      	add	r3, r1
 800d4d4:	3326      	adds	r3, #38	@ 0x26
 800d4d6:	2210      	movs	r2, #16
 800d4d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d4da:	4b29      	ldr	r3, [pc, #164]	@ (800d580 <USBD_CDC_Init+0x1ec>)
 800d4dc:	7819      	ldrb	r1, [r3, #0]
 800d4de:	2308      	movs	r3, #8
 800d4e0:	2203      	movs	r2, #3
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 fe0b 	bl	800e0fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d4e8:	4b25      	ldr	r3, [pc, #148]	@ (800d580 <USBD_CDC_Init+0x1ec>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	f003 020f 	and.w	r2, r3, #15
 800d4f0:	6879      	ldr	r1, [r7, #4]
 800d4f2:	4613      	mov	r3, r2
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	4413      	add	r3, r2
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	440b      	add	r3, r1
 800d4fc:	3324      	adds	r3, #36	@ 0x24
 800d4fe:	2201      	movs	r2, #1
 800d500:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2200      	movs	r2, #0
 800d506:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	33b0      	adds	r3, #176	@ 0xb0
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	4413      	add	r3, r2
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2200      	movs	r2, #0
 800d52a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d534:	2b00      	cmp	r3, #0
 800d536:	d101      	bne.n	800d53c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d538:	2302      	movs	r3, #2
 800d53a:	e018      	b.n	800d56e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	7c1b      	ldrb	r3, [r3, #16]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d10a      	bne.n	800d55a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d544:	4b0d      	ldr	r3, [pc, #52]	@ (800d57c <USBD_CDC_Init+0x1e8>)
 800d546:	7819      	ldrb	r1, [r3, #0]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d54e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 fe9e 	bl	800e294 <USBD_LL_PrepareReceive>
 800d558:	e008      	b.n	800d56c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d55a:	4b08      	ldr	r3, [pc, #32]	@ (800d57c <USBD_CDC_Init+0x1e8>)
 800d55c:	7819      	ldrb	r1, [r3, #0]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d564:	2340      	movs	r3, #64	@ 0x40
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 fe94 	bl	800e294 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	200000af 	.word	0x200000af
 800d57c:	200000b0 	.word	0x200000b0
 800d580:	200000b1 	.word	0x200000b1

0800d584 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	460b      	mov	r3, r1
 800d58e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d590:	4b3a      	ldr	r3, [pc, #232]	@ (800d67c <USBD_CDC_DeInit+0xf8>)
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	4619      	mov	r1, r3
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fdd1 	bl	800e13e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d59c:	4b37      	ldr	r3, [pc, #220]	@ (800d67c <USBD_CDC_DeInit+0xf8>)
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	f003 020f 	and.w	r2, r3, #15
 800d5a4:	6879      	ldr	r1, [r7, #4]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	4413      	add	r3, r2
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	440b      	add	r3, r1
 800d5b0:	3324      	adds	r3, #36	@ 0x24
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d5b6:	4b32      	ldr	r3, [pc, #200]	@ (800d680 <USBD_CDC_DeInit+0xfc>)
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f000 fdbe 	bl	800e13e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d5c2:	4b2f      	ldr	r3, [pc, #188]	@ (800d680 <USBD_CDC_DeInit+0xfc>)
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	f003 020f 	and.w	r2, r3, #15
 800d5ca:	6879      	ldr	r1, [r7, #4]
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	4413      	add	r3, r2
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	440b      	add	r3, r1
 800d5d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d5da:	2200      	movs	r2, #0
 800d5dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d5de:	4b29      	ldr	r3, [pc, #164]	@ (800d684 <USBD_CDC_DeInit+0x100>)
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 fdaa 	bl	800e13e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d5ea:	4b26      	ldr	r3, [pc, #152]	@ (800d684 <USBD_CDC_DeInit+0x100>)
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	f003 020f 	and.w	r2, r3, #15
 800d5f2:	6879      	ldr	r1, [r7, #4]
 800d5f4:	4613      	mov	r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	4413      	add	r3, r2
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	440b      	add	r3, r1
 800d5fe:	3324      	adds	r3, #36	@ 0x24
 800d600:	2200      	movs	r2, #0
 800d602:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d604:	4b1f      	ldr	r3, [pc, #124]	@ (800d684 <USBD_CDC_DeInit+0x100>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	f003 020f 	and.w	r2, r3, #15
 800d60c:	6879      	ldr	r1, [r7, #4]
 800d60e:	4613      	mov	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	4413      	add	r3, r2
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	440b      	add	r3, r1
 800d618:	3326      	adds	r3, #38	@ 0x26
 800d61a:	2200      	movs	r2, #0
 800d61c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	32b0      	adds	r2, #176	@ 0xb0
 800d628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d01f      	beq.n	800d670 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	33b0      	adds	r3, #176	@ 0xb0
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	4413      	add	r3, r2
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	685b      	ldr	r3, [r3, #4]
 800d642:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	32b0      	adds	r2, #176	@ 0xb0
 800d64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d652:	4618      	mov	r0, r3
 800d654:	f000 fe5a 	bl	800e30c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	32b0      	adds	r2, #176	@ 0xb0
 800d662:	2100      	movs	r1, #0
 800d664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	200000af 	.word	0x200000af
 800d680:	200000b0 	.word	0x200000b0
 800d684:	200000b1 	.word	0x200000b1

0800d688 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	32b0      	adds	r2, #176	@ 0xb0
 800d69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d101      	bne.n	800d6b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d6b4:	2303      	movs	r3, #3
 800d6b6:	e0bf      	b.n	800d838 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d050      	beq.n	800d766 <USBD_CDC_Setup+0xde>
 800d6c4:	2b20      	cmp	r3, #32
 800d6c6:	f040 80af 	bne.w	800d828 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	88db      	ldrh	r3, [r3, #6]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d03a      	beq.n	800d748 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	b25b      	sxtb	r3, r3
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	da1b      	bge.n	800d714 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	33b0      	adds	r3, #176	@ 0xb0
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	4413      	add	r3, r2
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	689b      	ldr	r3, [r3, #8]
 800d6ee:	683a      	ldr	r2, [r7, #0]
 800d6f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d6f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d6f4:	683a      	ldr	r2, [r7, #0]
 800d6f6:	88d2      	ldrh	r2, [r2, #6]
 800d6f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	88db      	ldrh	r3, [r3, #6]
 800d6fe:	2b07      	cmp	r3, #7
 800d700:	bf28      	it	cs
 800d702:	2307      	movcs	r3, #7
 800d704:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	89fa      	ldrh	r2, [r7, #14]
 800d70a:	4619      	mov	r1, r3
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f002 f8f0 	bl	800f8f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d712:	e090      	b.n	800d836 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	785a      	ldrb	r2, [r3, #1]
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	88db      	ldrh	r3, [r3, #6]
 800d722:	2b3f      	cmp	r3, #63	@ 0x3f
 800d724:	d803      	bhi.n	800d72e <USBD_CDC_Setup+0xa6>
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	88db      	ldrh	r3, [r3, #6]
 800d72a:	b2da      	uxtb	r2, r3
 800d72c:	e000      	b.n	800d730 <USBD_CDC_Setup+0xa8>
 800d72e:	2240      	movs	r2, #64	@ 0x40
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d736:	6939      	ldr	r1, [r7, #16]
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d73e:	461a      	mov	r2, r3
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f002 f902 	bl	800f94a <USBD_CtlPrepareRx>
      break;
 800d746:	e076      	b.n	800d836 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	33b0      	adds	r3, #176	@ 0xb0
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	4413      	add	r3, r2
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	683a      	ldr	r2, [r7, #0]
 800d75c:	7850      	ldrb	r0, [r2, #1]
 800d75e:	2200      	movs	r2, #0
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	4798      	blx	r3
      break;
 800d764:	e067      	b.n	800d836 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	785b      	ldrb	r3, [r3, #1]
 800d76a:	2b0b      	cmp	r3, #11
 800d76c:	d851      	bhi.n	800d812 <USBD_CDC_Setup+0x18a>
 800d76e:	a201      	add	r2, pc, #4	@ (adr r2, 800d774 <USBD_CDC_Setup+0xec>)
 800d770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d774:	0800d7a5 	.word	0x0800d7a5
 800d778:	0800d821 	.word	0x0800d821
 800d77c:	0800d813 	.word	0x0800d813
 800d780:	0800d813 	.word	0x0800d813
 800d784:	0800d813 	.word	0x0800d813
 800d788:	0800d813 	.word	0x0800d813
 800d78c:	0800d813 	.word	0x0800d813
 800d790:	0800d813 	.word	0x0800d813
 800d794:	0800d813 	.word	0x0800d813
 800d798:	0800d813 	.word	0x0800d813
 800d79c:	0800d7cf 	.word	0x0800d7cf
 800d7a0:	0800d7f9 	.word	0x0800d7f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	2b03      	cmp	r3, #3
 800d7ae:	d107      	bne.n	800d7c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d7b0:	f107 030a 	add.w	r3, r7, #10
 800d7b4:	2202      	movs	r2, #2
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f002 f89a 	bl	800f8f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d7be:	e032      	b.n	800d826 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d7c0:	6839      	ldr	r1, [r7, #0]
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f001 ff17 	bl	800f5f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	75fb      	strb	r3, [r7, #23]
          break;
 800d7cc:	e02b      	b.n	800d826 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	2b03      	cmp	r3, #3
 800d7d8:	d107      	bne.n	800d7ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d7da:	f107 030d 	add.w	r3, r7, #13
 800d7de:	2201      	movs	r2, #1
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f002 f885 	bl	800f8f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d7e8:	e01d      	b.n	800d826 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d7ea:	6839      	ldr	r1, [r7, #0]
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f001 ff02 	bl	800f5f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d7f2:	2303      	movs	r3, #3
 800d7f4:	75fb      	strb	r3, [r7, #23]
          break;
 800d7f6:	e016      	b.n	800d826 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	2b03      	cmp	r3, #3
 800d802:	d00f      	beq.n	800d824 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d804:	6839      	ldr	r1, [r7, #0]
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f001 fef5 	bl	800f5f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d80c:	2303      	movs	r3, #3
 800d80e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d810:	e008      	b.n	800d824 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d812:	6839      	ldr	r1, [r7, #0]
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f001 feee 	bl	800f5f6 <USBD_CtlError>
          ret = USBD_FAIL;
 800d81a:	2303      	movs	r3, #3
 800d81c:	75fb      	strb	r3, [r7, #23]
          break;
 800d81e:	e002      	b.n	800d826 <USBD_CDC_Setup+0x19e>
          break;
 800d820:	bf00      	nop
 800d822:	e008      	b.n	800d836 <USBD_CDC_Setup+0x1ae>
          break;
 800d824:	bf00      	nop
      }
      break;
 800d826:	e006      	b.n	800d836 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d828:	6839      	ldr	r1, [r7, #0]
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f001 fee3 	bl	800f5f6 <USBD_CtlError>
      ret = USBD_FAIL;
 800d830:	2303      	movs	r3, #3
 800d832:	75fb      	strb	r3, [r7, #23]
      break;
 800d834:	bf00      	nop
  }

  return (uint8_t)ret;
 800d836:	7dfb      	ldrb	r3, [r7, #23]
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3718      	adds	r7, #24
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	460b      	mov	r3, r1
 800d84a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d852:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	32b0      	adds	r2, #176	@ 0xb0
 800d85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d101      	bne.n	800d86a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d866:	2303      	movs	r3, #3
 800d868:	e065      	b.n	800d936 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	32b0      	adds	r2, #176	@ 0xb0
 800d874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d878:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d87a:	78fb      	ldrb	r3, [r7, #3]
 800d87c:	f003 020f 	and.w	r2, r3, #15
 800d880:	6879      	ldr	r1, [r7, #4]
 800d882:	4613      	mov	r3, r2
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	4413      	add	r3, r2
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	440b      	add	r3, r1
 800d88c:	3318      	adds	r3, #24
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d02f      	beq.n	800d8f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d894:	78fb      	ldrb	r3, [r7, #3]
 800d896:	f003 020f 	and.w	r2, r3, #15
 800d89a:	6879      	ldr	r1, [r7, #4]
 800d89c:	4613      	mov	r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	4413      	add	r3, r2
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	440b      	add	r3, r1
 800d8a6:	3318      	adds	r3, #24
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	78fb      	ldrb	r3, [r7, #3]
 800d8ac:	f003 010f 	and.w	r1, r3, #15
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	440b      	add	r3, r1
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	4403      	add	r3, r0
 800d8bc:	3324      	adds	r3, #36	@ 0x24
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800d8c4:	fb01 f303 	mul.w	r3, r1, r3
 800d8c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d112      	bne.n	800d8f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d8ce:	78fb      	ldrb	r3, [r7, #3]
 800d8d0:	f003 020f 	and.w	r2, r3, #15
 800d8d4:	6879      	ldr	r1, [r7, #4]
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	4413      	add	r3, r2
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	440b      	add	r3, r1
 800d8e0:	3318      	adds	r3, #24
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d8e6:	78f9      	ldrb	r1, [r7, #3]
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 fcb6 	bl	800e25e <USBD_LL_Transmit>
 800d8f2:	e01f      	b.n	800d934 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	33b0      	adds	r3, #176	@ 0xb0
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	4413      	add	r3, r2
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d010      	beq.n	800d934 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	33b0      	adds	r3, #176	@ 0xb0
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	4413      	add	r3, r2
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	68ba      	ldr	r2, [r7, #8]
 800d926:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d930:	78fa      	ldrb	r2, [r7, #3]
 800d932:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d934:	2300      	movs	r3, #0
}
 800d936:	4618      	mov	r0, r3
 800d938:	3710      	adds	r7, #16
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}

0800d93e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d93e:	b580      	push	{r7, lr}
 800d940:	b084      	sub	sp, #16
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
 800d946:	460b      	mov	r3, r1
 800d948:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	32b0      	adds	r2, #176	@ 0xb0
 800d954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d958:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	32b0      	adds	r2, #176	@ 0xb0
 800d964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d101      	bne.n	800d970 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d96c:	2303      	movs	r3, #3
 800d96e:	e01a      	b.n	800d9a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d970:	78fb      	ldrb	r3, [r7, #3]
 800d972:	4619      	mov	r1, r3
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 fca8 	bl	800e2ca <USBD_LL_GetRxDataSize>
 800d97a:	4602      	mov	r2, r0
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d988:	687a      	ldr	r2, [r7, #4]
 800d98a:	33b0      	adds	r3, #176	@ 0xb0
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	4413      	add	r3, r2
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3710      	adds	r7, #16
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b084      	sub	sp, #16
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	32b0      	adds	r2, #176	@ 0xb0
 800d9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d101      	bne.n	800d9d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d9cc:	2303      	movs	r3, #3
 800d9ce:	e024      	b.n	800da1a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	33b0      	adds	r3, #176	@ 0xb0
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4413      	add	r3, r2
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d019      	beq.n	800da18 <USBD_CDC_EP0_RxReady+0x6a>
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d9ea:	2bff      	cmp	r3, #255	@ 0xff
 800d9ec:	d014      	beq.n	800da18 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	33b0      	adds	r3, #176	@ 0xb0
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	4413      	add	r3, r2
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	689b      	ldr	r3, [r3, #8]
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800da06:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800da0e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	22ff      	movs	r2, #255	@ 0xff
 800da14:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800da18:	2300      	movs	r3, #0
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
	...

0800da24 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800da2c:	2182      	movs	r1, #130	@ 0x82
 800da2e:	4818      	ldr	r0, [pc, #96]	@ (800da90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800da30:	f000 ffab 	bl	800e98a <USBD_GetEpDesc>
 800da34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800da36:	2101      	movs	r1, #1
 800da38:	4815      	ldr	r0, [pc, #84]	@ (800da90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800da3a:	f000 ffa6 	bl	800e98a <USBD_GetEpDesc>
 800da3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800da40:	2181      	movs	r1, #129	@ 0x81
 800da42:	4813      	ldr	r0, [pc, #76]	@ (800da90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800da44:	f000 ffa1 	bl	800e98a <USBD_GetEpDesc>
 800da48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	2210      	movs	r2, #16
 800da54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d006      	beq.n	800da6a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	2200      	movs	r2, #0
 800da60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800da64:	711a      	strb	r2, [r3, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d006      	beq.n	800da7e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2200      	movs	r2, #0
 800da74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800da78:	711a      	strb	r2, [r3, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2243      	movs	r2, #67	@ 0x43
 800da82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800da84:	4b02      	ldr	r3, [pc, #8]	@ (800da90 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800da86:	4618      	mov	r0, r3
 800da88:	3718      	adds	r7, #24
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	2000006c 	.word	0x2000006c

0800da94 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b086      	sub	sp, #24
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800da9c:	2182      	movs	r1, #130	@ 0x82
 800da9e:	4818      	ldr	r0, [pc, #96]	@ (800db00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800daa0:	f000 ff73 	bl	800e98a <USBD_GetEpDesc>
 800daa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800daa6:	2101      	movs	r1, #1
 800daa8:	4815      	ldr	r0, [pc, #84]	@ (800db00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800daaa:	f000 ff6e 	bl	800e98a <USBD_GetEpDesc>
 800daae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dab0:	2181      	movs	r1, #129	@ 0x81
 800dab2:	4813      	ldr	r0, [pc, #76]	@ (800db00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dab4:	f000 ff69 	bl	800e98a <USBD_GetEpDesc>
 800dab8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d002      	beq.n	800dac6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	2210      	movs	r2, #16
 800dac4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d006      	beq.n	800dada <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	2200      	movs	r2, #0
 800dad0:	711a      	strb	r2, [r3, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f042 0202 	orr.w	r2, r2, #2
 800dad8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d006      	beq.n	800daee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2200      	movs	r2, #0
 800dae4:	711a      	strb	r2, [r3, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	f042 0202 	orr.w	r2, r2, #2
 800daec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2243      	movs	r2, #67	@ 0x43
 800daf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800daf4:	4b02      	ldr	r3, [pc, #8]	@ (800db00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3718      	adds	r7, #24
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	2000006c 	.word	0x2000006c

0800db04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800db0c:	2182      	movs	r1, #130	@ 0x82
 800db0e:	4818      	ldr	r0, [pc, #96]	@ (800db70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800db10:	f000 ff3b 	bl	800e98a <USBD_GetEpDesc>
 800db14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800db16:	2101      	movs	r1, #1
 800db18:	4815      	ldr	r0, [pc, #84]	@ (800db70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800db1a:	f000 ff36 	bl	800e98a <USBD_GetEpDesc>
 800db1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800db20:	2181      	movs	r1, #129	@ 0x81
 800db22:	4813      	ldr	r0, [pc, #76]	@ (800db70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800db24:	f000 ff31 	bl	800e98a <USBD_GetEpDesc>
 800db28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d002      	beq.n	800db36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	2210      	movs	r2, #16
 800db34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d006      	beq.n	800db4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	2200      	movs	r2, #0
 800db40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db44:	711a      	strb	r2, [r3, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d006      	beq.n	800db5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2200      	movs	r2, #0
 800db54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db58:	711a      	strb	r2, [r3, #4]
 800db5a:	2200      	movs	r2, #0
 800db5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2243      	movs	r2, #67	@ 0x43
 800db62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800db64:	4b02      	ldr	r3, [pc, #8]	@ (800db70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800db66:	4618      	mov	r0, r3
 800db68:	3718      	adds	r7, #24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	2000006c 	.word	0x2000006c

0800db74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	220a      	movs	r2, #10
 800db80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800db82:	4b03      	ldr	r3, [pc, #12]	@ (800db90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800db84:	4618      	mov	r0, r3
 800db86:	370c      	adds	r7, #12
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr
 800db90:	20000028 	.word	0x20000028

0800db94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d101      	bne.n	800dba8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dba4:	2303      	movs	r3, #3
 800dba6:	e009      	b.n	800dbbc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	33b0      	adds	r3, #176	@ 0xb0
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	4413      	add	r3, r2
 800dbb6:	683a      	ldr	r2, [r7, #0]
 800dbb8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800dbba:	2300      	movs	r3, #0
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	370c      	adds	r7, #12
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr

0800dbc8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b087      	sub	sp, #28
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	32b0      	adds	r2, #176	@ 0xb0
 800dbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbe2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d101      	bne.n	800dbee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dbea:	2303      	movs	r3, #3
 800dbec:	e008      	b.n	800dc00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	68ba      	ldr	r2, [r7, #8]
 800dbf2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	687a      	ldr	r2, [r7, #4]
 800dbfa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	371c      	adds	r7, #28
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	32b0      	adds	r2, #176	@ 0xb0
 800dc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d101      	bne.n	800dc30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	e004      	b.n	800dc3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	683a      	ldr	r2, [r7, #0]
 800dc34:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3714      	adds	r7, #20
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr
	...

0800dc48 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	32b0      	adds	r2, #176	@ 0xb0
 800dc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc5e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800dc60:	2301      	movs	r3, #1
 800dc62:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d101      	bne.n	800dc6e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dc6a:	2303      	movs	r3, #3
 800dc6c:	e025      	b.n	800dcba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d11f      	bne.n	800dcb8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800dc80:	4b10      	ldr	r3, [pc, #64]	@ (800dcc4 <USBD_CDC_TransmitPacket+0x7c>)
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	f003 020f 	and.w	r2, r3, #15
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	4613      	mov	r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	4413      	add	r3, r2
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4403      	add	r3, r0
 800dc9a:	3318      	adds	r3, #24
 800dc9c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800dc9e:	4b09      	ldr	r3, [pc, #36]	@ (800dcc4 <USBD_CDC_TransmitPacket+0x7c>)
 800dca0:	7819      	ldrb	r1, [r3, #0]
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 fad5 	bl	800e25e <USBD_LL_Transmit>

    ret = USBD_OK;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dcb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	200000af 	.word	0x200000af

0800dcc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	32b0      	adds	r2, #176	@ 0xb0
 800dcda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcde:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	32b0      	adds	r2, #176	@ 0xb0
 800dcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d101      	bne.n	800dcf6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	e018      	b.n	800dd28 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	7c1b      	ldrb	r3, [r3, #16]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10a      	bne.n	800dd14 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dcfe:	4b0c      	ldr	r3, [pc, #48]	@ (800dd30 <USBD_CDC_ReceivePacket+0x68>)
 800dd00:	7819      	ldrb	r1, [r3, #0]
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dd08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 fac1 	bl	800e294 <USBD_LL_PrepareReceive>
 800dd12:	e008      	b.n	800dd26 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dd14:	4b06      	ldr	r3, [pc, #24]	@ (800dd30 <USBD_CDC_ReceivePacket+0x68>)
 800dd16:	7819      	ldrb	r1, [r3, #0]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dd1e:	2340      	movs	r3, #64	@ 0x40
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 fab7 	bl	800e294 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3710      	adds	r7, #16
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	200000b0 	.word	0x200000b0

0800dd34 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dd38:	2200      	movs	r2, #0
 800dd3a:	4905      	ldr	r1, [pc, #20]	@ (800dd50 <TEMPLATE_Init+0x1c>)
 800dd3c:	4805      	ldr	r0, [pc, #20]	@ (800dd54 <TEMPLATE_Init+0x20>)
 800dd3e:	f7ff ff43 	bl	800dbc8 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dd42:	4905      	ldr	r1, [pc, #20]	@ (800dd58 <TEMPLATE_Init+0x24>)
 800dd44:	4803      	ldr	r0, [pc, #12]	@ (800dd54 <TEMPLATE_Init+0x20>)
 800dd46:	f7ff ff61 	bl	800dc0c <USBD_CDC_SetRxBuffer>
      return (0);
 800dd4a:	2300      	movs	r3, #0
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	20000c54 	.word	0x20000c54
 800dd54:	200006d0 	.word	0x200006d0
 800dd58:	20000a54 	.word	0x20000a54

0800dd5c <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800dd60:	2300      	movs	r3, #0
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <TEMPLATE_Transmit>:

uint8_t TEMPLATE_Transmit(uint8_t* Buf, uint16_t Len)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	460b      	mov	r3, r1
 800dd76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dd7c:	4b0d      	ldr	r3, [pc, #52]	@ (800ddb4 <TEMPLATE_Transmit+0x48>)
 800dd7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d001      	beq.n	800dd92 <TEMPLATE_Transmit+0x26>
    return
             USBD_BUSY;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	e00b      	b.n	800ddaa <TEMPLATE_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dd92:	887b      	ldrh	r3, [r7, #2]
 800dd94:	461a      	mov	r2, r3
 800dd96:	6879      	ldr	r1, [r7, #4]
 800dd98:	4806      	ldr	r0, [pc, #24]	@ (800ddb4 <TEMPLATE_Transmit+0x48>)
 800dd9a:	f7ff ff15 	bl	800dbc8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dd9e:	4805      	ldr	r0, [pc, #20]	@ (800ddb4 <TEMPLATE_Transmit+0x48>)
 800dda0:	f7ff ff52 	bl	800dc48 <USBD_CDC_TransmitPacket>
 800dda4:	4603      	mov	r3, r0
 800dda6:	73fb      	strb	r3, [r7, #15]
  return result;
 800dda8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3710      	adds	r7, #16
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	200006d0 	.word	0x200006d0

0800ddb8 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	6039      	str	r1, [r7, #0]
 800ddc2:	71fb      	strb	r3, [r7, #7]
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800ddc8:	79fb      	ldrb	r3, [r7, #7]
 800ddca:	2b23      	cmp	r3, #35	@ 0x23
 800ddcc:	f200 8098 	bhi.w	800df00 <TEMPLATE_Control+0x148>
 800ddd0:	a201      	add	r2, pc, #4	@ (adr r2, 800ddd8 <TEMPLATE_Control+0x20>)
 800ddd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd6:	bf00      	nop
 800ddd8:	0800df01 	.word	0x0800df01
 800dddc:	0800df01 	.word	0x0800df01
 800dde0:	0800df01 	.word	0x0800df01
 800dde4:	0800df01 	.word	0x0800df01
 800dde8:	0800df01 	.word	0x0800df01
 800ddec:	0800df01 	.word	0x0800df01
 800ddf0:	0800df01 	.word	0x0800df01
 800ddf4:	0800df01 	.word	0x0800df01
 800ddf8:	0800df01 	.word	0x0800df01
 800ddfc:	0800df01 	.word	0x0800df01
 800de00:	0800df01 	.word	0x0800df01
 800de04:	0800df01 	.word	0x0800df01
 800de08:	0800df01 	.word	0x0800df01
 800de0c:	0800df01 	.word	0x0800df01
 800de10:	0800df01 	.word	0x0800df01
 800de14:	0800df01 	.word	0x0800df01
 800de18:	0800df01 	.word	0x0800df01
 800de1c:	0800df01 	.word	0x0800df01
 800de20:	0800df01 	.word	0x0800df01
 800de24:	0800df01 	.word	0x0800df01
 800de28:	0800df01 	.word	0x0800df01
 800de2c:	0800df01 	.word	0x0800df01
 800de30:	0800df01 	.word	0x0800df01
 800de34:	0800df01 	.word	0x0800df01
 800de38:	0800df01 	.word	0x0800df01
 800de3c:	0800df01 	.word	0x0800df01
 800de40:	0800df01 	.word	0x0800df01
 800de44:	0800df01 	.word	0x0800df01
 800de48:	0800df01 	.word	0x0800df01
 800de4c:	0800df01 	.word	0x0800df01
 800de50:	0800df01 	.word	0x0800df01
 800de54:	0800df01 	.word	0x0800df01
 800de58:	0800de69 	.word	0x0800de69
 800de5c:	0800dead 	.word	0x0800dead
 800de60:	0800df01 	.word	0x0800df01
 800de64:	0800df01 	.word	0x0800df01
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	461a      	mov	r2, r3
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	3301      	adds	r3, #1
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	021b      	lsls	r3, r3, #8
 800de76:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	3302      	adds	r3, #2
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800de80:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	3303      	adds	r3, #3
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	061b      	lsls	r3, r3, #24
 800de8a:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800de8c:	461a      	mov	r2, r3
 800de8e:	4b20      	ldr	r3, [pc, #128]	@ (800df10 <TEMPLATE_Control+0x158>)
 800de90:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	791a      	ldrb	r2, [r3, #4]
 800de96:	4b1e      	ldr	r3, [pc, #120]	@ (800df10 <TEMPLATE_Control+0x158>)
 800de98:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	795a      	ldrb	r2, [r3, #5]
 800de9e:	4b1c      	ldr	r3, [pc, #112]	@ (800df10 <TEMPLATE_Control+0x158>)
 800dea0:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	799a      	ldrb	r2, [r3, #6]
 800dea6:	4b1a      	ldr	r3, [pc, #104]	@ (800df10 <TEMPLATE_Control+0x158>)
 800dea8:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800deaa:	e02a      	b.n	800df02 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800deac:	4b18      	ldr	r3, [pc, #96]	@ (800df10 <TEMPLATE_Control+0x158>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800deb6:	4b16      	ldr	r3, [pc, #88]	@ (800df10 <TEMPLATE_Control+0x158>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	0a1a      	lsrs	r2, r3, #8
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	3301      	adds	r3, #1
 800dec0:	b2d2      	uxtb	r2, r2
 800dec2:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800dec4:	4b12      	ldr	r3, [pc, #72]	@ (800df10 <TEMPLATE_Control+0x158>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	0c1a      	lsrs	r2, r3, #16
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	3302      	adds	r3, #2
 800dece:	b2d2      	uxtb	r2, r2
 800ded0:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800ded2:	4b0f      	ldr	r3, [pc, #60]	@ (800df10 <TEMPLATE_Control+0x158>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	0e1a      	lsrs	r2, r3, #24
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	3303      	adds	r3, #3
 800dedc:	b2d2      	uxtb	r2, r2
 800dede:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	3304      	adds	r3, #4
 800dee4:	4a0a      	ldr	r2, [pc, #40]	@ (800df10 <TEMPLATE_Control+0x158>)
 800dee6:	7912      	ldrb	r2, [r2, #4]
 800dee8:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	3305      	adds	r3, #5
 800deee:	4a08      	ldr	r2, [pc, #32]	@ (800df10 <TEMPLATE_Control+0x158>)
 800def0:	7952      	ldrb	r2, [r2, #5]
 800def2:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	3306      	adds	r3, #6
 800def8:	4a05      	ldr	r2, [pc, #20]	@ (800df10 <TEMPLATE_Control+0x158>)
 800defa:	7992      	ldrb	r2, [r2, #6]
 800defc:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800defe:	e000      	b.n	800df02 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800df00:	bf00      	nop
  }

  return (0);
 800df02:	2300      	movs	r3, #0
}
 800df04:	4618      	mov	r0, r3
 800df06:	370c      	adds	r7, #12
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr
 800df10:	200000c8 	.word	0x200000c8

0800df14 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
      if(Buf[0] == '1')
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	2b31      	cmp	r3, #49	@ 0x31
 800df24:	d105      	bne.n	800df32 <TEMPLATE_Receive+0x1e>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800df26:	2201      	movs	r2, #1
 800df28:	2120      	movs	r1, #32
 800df2a:	480a      	ldr	r0, [pc, #40]	@ (800df54 <TEMPLATE_Receive+0x40>)
 800df2c:	f7f4 fa20 	bl	8002370 <HAL_GPIO_WritePin>
 800df30:	e008      	b.n	800df44 <TEMPLATE_Receive+0x30>
      else if(Buf[0] == '0')
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	2b30      	cmp	r3, #48	@ 0x30
 800df38:	d104      	bne.n	800df44 <TEMPLATE_Receive+0x30>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800df3a:	2200      	movs	r2, #0
 800df3c:	2120      	movs	r1, #32
 800df3e:	4805      	ldr	r0, [pc, #20]	@ (800df54 <TEMPLATE_Receive+0x40>)
 800df40:	f7f4 fa16 	bl	8002370 <HAL_GPIO_WritePin>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800df44:	4804      	ldr	r0, [pc, #16]	@ (800df58 <TEMPLATE_Receive+0x44>)
 800df46:	f7ff febf 	bl	800dcc8 <USBD_CDC_ReceivePacket>
      return (USBD_OK);
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	42020000 	.word	0x42020000
 800df58:	200006d0 	.word	0x200006d0

0800df5c <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b085      	sub	sp, #20
 800df60:	af00      	add	r7, sp, #0
 800df62:	60f8      	str	r0, [r7, #12]
 800df64:	60b9      	str	r1, [r7, #8]
 800df66:	4613      	mov	r3, r2
 800df68:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3714      	adds	r7, #20
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr

0800df78 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800df8c:	4619      	mov	r1, r3
 800df8e:	4610      	mov	r0, r2
 800df90:	f000 faa5 	bl	800e4de <USBD_LL_SetupStage>
}
 800df94:	bf00      	nop
 800df96:	3708      	adds	r7, #8
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800dfae:	78fa      	ldrb	r2, [r7, #3]
 800dfb0:	6879      	ldr	r1, [r7, #4]
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	4413      	add	r3, r2
 800dfb8:	00db      	lsls	r3, r3, #3
 800dfba:	440b      	add	r3, r1
 800dfbc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800dfc0:	681a      	ldr	r2, [r3, #0]
 800dfc2:	78fb      	ldrb	r3, [r7, #3]
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	f000 fadf 	bl	800e588 <USBD_LL_DataOutStage>
}
 800dfca:	bf00      	nop
 800dfcc:	3708      	adds	r7, #8
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b082      	sub	sp, #8
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	460b      	mov	r3, r1
 800dfdc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800dfe4:	78fa      	ldrb	r2, [r7, #3]
 800dfe6:	6879      	ldr	r1, [r7, #4]
 800dfe8:	4613      	mov	r3, r2
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	4413      	add	r3, r2
 800dfee:	00db      	lsls	r3, r3, #3
 800dff0:	440b      	add	r3, r1
 800dff2:	3328      	adds	r3, #40	@ 0x28
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	78fb      	ldrb	r3, [r7, #3]
 800dff8:	4619      	mov	r1, r3
 800dffa:	f000 fb78 	bl	800e6ee <USBD_LL_DataInStage>
}
 800dffe:	bf00      	nop
 800e000:	3708      	adds	r7, #8
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b082      	sub	sp, #8
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e014:	4618      	mov	r0, r3
 800e016:	f000 fc7e 	bl	800e916 <USBD_LL_SOF>
}
 800e01a:	bf00      	nop
 800e01c:	3708      	adds	r7, #8
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800e022:	b580      	push	{r7, lr}
 800e024:	b084      	sub	sp, #16
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e02a:	2301      	movs	r3, #1
 800e02c:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	79db      	ldrb	r3, [r3, #7]
 800e032:	2b02      	cmp	r3, #2
 800e034:	d001      	beq.n	800e03a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e036:	f7f2 fec7 	bl	8000dc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e040:	7bfa      	ldrb	r2, [r7, #15]
 800e042:	4611      	mov	r1, r2
 800e044:	4618      	mov	r0, r3
 800e046:	f000 fc56 	bl	800e8f6 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e050:	4618      	mov	r0, r3
 800e052:	f000 fbfe 	bl	800e852 <USBD_LL_Reset>
}
 800e056:	bf00      	nop
 800e058:	3710      	adds	r7, #16
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
	...

0800e060 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4a19      	ldr	r2, [pc, #100]	@ (800e0d0 <USBD_LL_Init+0x70>)
 800e06c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e076:	2340      	movs	r3, #64	@ 0x40
 800e078:	2200      	movs	r2, #0
 800e07a:	2100      	movs	r1, #0
 800e07c:	f7f5 ff42 	bl	8003f04 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e086:	2380      	movs	r3, #128	@ 0x80
 800e088:	2200      	movs	r2, #0
 800e08a:	2180      	movs	r1, #128	@ 0x80
 800e08c:	f7f5 ff3a 	bl	8003f04 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e096:	23c0      	movs	r3, #192	@ 0xc0
 800e098:	2200      	movs	r2, #0
 800e09a:	2181      	movs	r1, #129	@ 0x81
 800e09c:	f7f5 ff32 	bl	8003f04 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e0a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	f7f5 ff29 	bl	8003f04 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e0b8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800e0bc:	2200      	movs	r2, #0
 800e0be:	2182      	movs	r1, #130	@ 0x82
 800e0c0:	f7f5 ff20 	bl	8003f04 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3708      	adds	r7, #8
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	200003ec 	.word	0x200003ec

0800e0d4 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7f4 fbf2 	bl	80028cc <HAL_PCD_Start>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800e0ec:	7bfb      	ldrb	r3, [r7, #15]
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f000 f916 	bl	800e320 <USBD_Get_USB_Status>
 800e0f4:	4603      	mov	r3, r0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b084      	sub	sp, #16
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	4608      	mov	r0, r1
 800e108:	4611      	mov	r1, r2
 800e10a:	461a      	mov	r2, r3
 800e10c:	4603      	mov	r3, r0
 800e10e:	70fb      	strb	r3, [r7, #3]
 800e110:	460b      	mov	r3, r1
 800e112:	70bb      	strb	r3, [r7, #2]
 800e114:	4613      	mov	r3, r2
 800e116:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e11e:	78bb      	ldrb	r3, [r7, #2]
 800e120:	883a      	ldrh	r2, [r7, #0]
 800e122:	78f9      	ldrb	r1, [r7, #3]
 800e124:	f7f4 fd21 	bl	8002b6a <HAL_PCD_EP_Open>
 800e128:	4603      	mov	r3, r0
 800e12a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e12c:	7bfb      	ldrb	r3, [r7, #15]
 800e12e:	4618      	mov	r0, r3
 800e130:	f000 f8f6 	bl	800e320 <USBD_Get_USB_Status>
 800e134:	4603      	mov	r3, r0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3710      	adds	r7, #16
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b084      	sub	sp, #16
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
 800e146:	460b      	mov	r3, r1
 800e148:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e150:	78fa      	ldrb	r2, [r7, #3]
 800e152:	4611      	mov	r1, r2
 800e154:	4618      	mov	r0, r3
 800e156:	f7f4 fd69 	bl	8002c2c <HAL_PCD_EP_Close>
 800e15a:	4603      	mov	r3, r0
 800e15c:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e15e:	7bfb      	ldrb	r3, [r7, #15]
 800e160:	4618      	mov	r0, r3
 800e162:	f000 f8dd 	bl	800e320 <USBD_Get_USB_Status>
 800e166:	4603      	mov	r3, r0
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3710      	adds	r7, #16
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	460b      	mov	r3, r1
 800e17a:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e182:	78fa      	ldrb	r2, [r7, #3]
 800e184:	4611      	mov	r1, r2
 800e186:	4618      	mov	r0, r3
 800e188:	f7f4 fe1c 	bl	8002dc4 <HAL_PCD_EP_SetStall>
 800e18c:	4603      	mov	r3, r0
 800e18e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e190:	7bfb      	ldrb	r3, [r7, #15]
 800e192:	4618      	mov	r0, r3
 800e194:	f000 f8c4 	bl	800e320 <USBD_Get_USB_Status>
 800e198:	4603      	mov	r3, r0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b084      	sub	sp, #16
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1b4:	78fa      	ldrb	r2, [r7, #3]
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7f4 fe57 	bl	8002e6c <HAL_PCD_EP_ClrStall>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e1c2:	7bfb      	ldrb	r3, [r7, #15]
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f000 f8ab 	bl	800e320 <USBD_Get_USB_Status>
 800e1ca:	4603      	mov	r3, r0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3710      	adds	r7, #16
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	460b      	mov	r3, r1
 800e1de:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1e6:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800e1e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	da0b      	bge.n	800e208 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e1f0:	78fb      	ldrb	r3, [r7, #3]
 800e1f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e1f6:	68f9      	ldr	r1, [r7, #12]
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	4413      	add	r3, r2
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	440b      	add	r3, r1
 800e202:	3316      	adds	r3, #22
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	e00b      	b.n	800e220 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e208:	78fb      	ldrb	r3, [r7, #3]
 800e20a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e20e:	68f9      	ldr	r1, [r7, #12]
 800e210:	4613      	mov	r3, r2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	4413      	add	r3, r2
 800e216:	00db      	lsls	r3, r3, #3
 800e218:	440b      	add	r3, r1
 800e21a:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800e21e:	781b      	ldrb	r3, [r3, #0]
      }
}
 800e220:	4618      	mov	r0, r3
 800e222:	3714      	adds	r7, #20
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	460b      	mov	r3, r1
 800e236:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e23e:	78fa      	ldrb	r2, [r7, #3]
 800e240:	4611      	mov	r1, r2
 800e242:	4618      	mov	r0, r3
 800e244:	f7f4 fc6d 	bl	8002b22 <HAL_PCD_SetAddress>
 800e248:	4603      	mov	r3, r0
 800e24a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e24c:	7bfb      	ldrb	r3, [r7, #15]
 800e24e:	4618      	mov	r0, r3
 800e250:	f000 f866 	bl	800e320 <USBD_Get_USB_Status>
 800e254:	4603      	mov	r3, r0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b086      	sub	sp, #24
 800e262:	af00      	add	r7, sp, #0
 800e264:	60f8      	str	r0, [r7, #12]
 800e266:	607a      	str	r2, [r7, #4]
 800e268:	603b      	str	r3, [r7, #0]
 800e26a:	460b      	mov	r3, r1
 800e26c:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e274:	7af9      	ldrb	r1, [r7, #11]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	f7f4 fd6b 	bl	8002d54 <HAL_PCD_EP_Transmit>
 800e27e:	4603      	mov	r3, r0
 800e280:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e282:	7dfb      	ldrb	r3, [r7, #23]
 800e284:	4618      	mov	r0, r3
 800e286:	f000 f84b 	bl	800e320 <USBD_Get_USB_Status>
 800e28a:	4603      	mov	r3, r0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3718      	adds	r7, #24
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b086      	sub	sp, #24
 800e298:	af00      	add	r7, sp, #0
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	607a      	str	r2, [r7, #4]
 800e29e:	603b      	str	r3, [r7, #0]
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e2aa:	7af9      	ldrb	r1, [r7, #11]
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	f7f4 fd06 	bl	8002cc0 <HAL_PCD_EP_Receive>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e2b8:	7dfb      	ldrb	r3, [r7, #23]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f000 f830 	bl	800e320 <USBD_Get_USB_Status>
 800e2c0:	4603      	mov	r3, r0
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3718      	adds	r7, #24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b082      	sub	sp, #8
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2dc:	78fa      	ldrb	r2, [r7, #3]
 800e2de:	4611      	mov	r1, r2
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7f4 fd1f 	bl	8002d24 <HAL_PCD_EP_GetRxCount>
 800e2e6:	4603      	mov	r3, r0
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800e2f8:	4b03      	ldr	r3, [pc, #12]	@ (800e308 <USBD_static_malloc+0x18>)
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	370c      	adds	r7, #12
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop
 800e308:	20000e54 	.word	0x20000e54

0800e30c <USBD_static_free>:

void USBD_static_free(void *p)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800e314:	bf00      	nop
 800e316:	370c      	adds	r7, #12
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e320:	b480      	push	{r7}
 800e322:	b085      	sub	sp, #20
 800e324:	af00      	add	r7, sp, #0
 800e326:	4603      	mov	r3, r0
 800e328:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800e32a:	2300      	movs	r3, #0
 800e32c:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800e32e:	79fb      	ldrb	r3, [r7, #7]
 800e330:	2b03      	cmp	r3, #3
 800e332:	d817      	bhi.n	800e364 <USBD_Get_USB_Status+0x44>
 800e334:	a201      	add	r2, pc, #4	@ (adr r2, 800e33c <USBD_Get_USB_Status+0x1c>)
 800e336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e33a:	bf00      	nop
 800e33c:	0800e34d 	.word	0x0800e34d
 800e340:	0800e353 	.word	0x0800e353
 800e344:	0800e359 	.word	0x0800e359
 800e348:	0800e35f 	.word	0x0800e35f
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800e34c:	2300      	movs	r3, #0
 800e34e:	73fb      	strb	r3, [r7, #15]
             break;
 800e350:	e00b      	b.n	800e36a <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800e352:	2303      	movs	r3, #3
 800e354:	73fb      	strb	r3, [r7, #15]
             break;
 800e356:	e008      	b.n	800e36a <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800e358:	2301      	movs	r3, #1
 800e35a:	73fb      	strb	r3, [r7, #15]
             break;
 800e35c:	e005      	b.n	800e36a <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800e35e:	2303      	movs	r3, #3
 800e360:	73fb      	strb	r3, [r7, #15]
             break;
 800e362:	e002      	b.n	800e36a <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800e364:	2303      	movs	r3, #3
 800e366:	73fb      	strb	r3, [r7, #15]
             break;
 800e368:	bf00      	nop
      }
      return usb_status;
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3714      	adds	r7, #20
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b086      	sub	sp, #24
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	4613      	mov	r3, r2
 800e384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d101      	bne.n	800e390 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e38c:	2303      	movs	r3, #3
 800e38e:	e01f      	b.n	800e3d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2200      	movs	r2, #0
 800e394:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2200      	movs	r2, #0
 800e39c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d003      	beq.n	800e3b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	68ba      	ldr	r2, [r7, #8]
 800e3b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	79fa      	ldrb	r2, [r7, #7]
 800e3c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e3c4:	68f8      	ldr	r0, [r7, #12]
 800e3c6:	f7ff fe4b 	bl	800e060 <USBD_LL_Init>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3718      	adds	r7, #24
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d101      	bne.n	800e3f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e3ec:	2303      	movs	r3, #3
 800e3ee:	e025      	b.n	800e43c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	683a      	ldr	r2, [r7, #0]
 800e3f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	32ae      	adds	r2, #174	@ 0xae
 800e402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00f      	beq.n	800e42c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	32ae      	adds	r2, #174	@ 0xae
 800e416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e41c:	f107 020e 	add.w	r2, r7, #14
 800e420:	4610      	mov	r0, r2
 800e422:	4798      	blx	r3
 800e424:	4602      	mov	r2, r0
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e432:	1c5a      	adds	r2, r3, #1
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e43a:	2300      	movs	r3, #0
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f7ff fe41 	bl	800e0d4 <USBD_LL_Start>
 800e452:	4603      	mov	r3, r0
}
 800e454:	4618      	mov	r0, r3
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e464:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e466:	4618      	mov	r0, r3
 800e468:	370c      	adds	r7, #12
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr

0800e472 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e472:	b580      	push	{r7, lr}
 800e474:	b084      	sub	sp, #16
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
 800e47a:	460b      	mov	r3, r1
 800e47c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e47e:	2300      	movs	r3, #0
 800e480:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d009      	beq.n	800e4a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	78fa      	ldrb	r2, [r7, #3]
 800e496:	4611      	mov	r1, r2
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	4798      	blx	r3
 800e49c:	4603      	mov	r3, r0
 800e49e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3710      	adds	r7, #16
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b084      	sub	sp, #16
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	78fa      	ldrb	r2, [r7, #3]
 800e4c4:	4611      	mov	r1, r2
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	4798      	blx	r3
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e4d0:	2303      	movs	r3, #3
 800e4d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}

0800e4de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e4de:	b580      	push	{r7, lr}
 800e4e0:	b084      	sub	sp, #16
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
 800e4e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e4ee:	6839      	ldr	r1, [r7, #0]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f001 f846 	bl	800f582 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e504:	461a      	mov	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e512:	f003 031f 	and.w	r3, r3, #31
 800e516:	2b02      	cmp	r3, #2
 800e518:	d01a      	beq.n	800e550 <USBD_LL_SetupStage+0x72>
 800e51a:	2b02      	cmp	r3, #2
 800e51c:	d822      	bhi.n	800e564 <USBD_LL_SetupStage+0x86>
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d002      	beq.n	800e528 <USBD_LL_SetupStage+0x4a>
 800e522:	2b01      	cmp	r3, #1
 800e524:	d00a      	beq.n	800e53c <USBD_LL_SetupStage+0x5e>
 800e526:	e01d      	b.n	800e564 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e52e:	4619      	mov	r1, r3
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 fa9d 	bl	800ea70 <USBD_StdDevReq>
 800e536:	4603      	mov	r3, r0
 800e538:	73fb      	strb	r3, [r7, #15]
      break;
 800e53a:	e020      	b.n	800e57e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e542:	4619      	mov	r1, r3
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f000 fb05 	bl	800eb54 <USBD_StdItfReq>
 800e54a:	4603      	mov	r3, r0
 800e54c:	73fb      	strb	r3, [r7, #15]
      break;
 800e54e:	e016      	b.n	800e57e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e556:	4619      	mov	r1, r3
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 fb67 	bl	800ec2c <USBD_StdEPReq>
 800e55e:	4603      	mov	r3, r0
 800e560:	73fb      	strb	r3, [r7, #15]
      break;
 800e562:	e00c      	b.n	800e57e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e56a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	4619      	mov	r1, r3
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f7ff fdfc 	bl	800e170 <USBD_LL_StallEP>
 800e578:	4603      	mov	r3, r0
 800e57a:	73fb      	strb	r3, [r7, #15]
      break;
 800e57c:	bf00      	nop
  }

  return ret;
 800e57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	460b      	mov	r3, r1
 800e592:	607a      	str	r2, [r7, #4]
 800e594:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e596:	2300      	movs	r3, #0
 800e598:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e59a:	7afb      	ldrb	r3, [r7, #11]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d16e      	bne.n	800e67e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e5a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e5ae:	2b03      	cmp	r3, #3
 800e5b0:	f040 8098 	bne.w	800e6e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	689a      	ldr	r2, [r3, #8]
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d913      	bls.n	800e5e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	689a      	ldr	r2, [r3, #8]
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	1ad2      	subs	r2, r2, r3
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	68da      	ldr	r2, [r3, #12]
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	689b      	ldr	r3, [r3, #8]
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	bf28      	it	cs
 800e5da:	4613      	movcs	r3, r2
 800e5dc:	461a      	mov	r2, r3
 800e5de:	6879      	ldr	r1, [r7, #4]
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	f001 f9cf 	bl	800f984 <USBD_CtlContinueRx>
 800e5e6:	e07d      	b.n	800e6e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e5ee:	f003 031f 	and.w	r3, r3, #31
 800e5f2:	2b02      	cmp	r3, #2
 800e5f4:	d014      	beq.n	800e620 <USBD_LL_DataOutStage+0x98>
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	d81d      	bhi.n	800e636 <USBD_LL_DataOutStage+0xae>
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d002      	beq.n	800e604 <USBD_LL_DataOutStage+0x7c>
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d003      	beq.n	800e60a <USBD_LL_DataOutStage+0x82>
 800e602:	e018      	b.n	800e636 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e604:	2300      	movs	r3, #0
 800e606:	75bb      	strb	r3, [r7, #22]
            break;
 800e608:	e018      	b.n	800e63c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e610:	b2db      	uxtb	r3, r3
 800e612:	4619      	mov	r1, r3
 800e614:	68f8      	ldr	r0, [r7, #12]
 800e616:	f000 f99e 	bl	800e956 <USBD_CoreFindIF>
 800e61a:	4603      	mov	r3, r0
 800e61c:	75bb      	strb	r3, [r7, #22]
            break;
 800e61e:	e00d      	b.n	800e63c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e626:	b2db      	uxtb	r3, r3
 800e628:	4619      	mov	r1, r3
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	f000 f9a0 	bl	800e970 <USBD_CoreFindEP>
 800e630:	4603      	mov	r3, r0
 800e632:	75bb      	strb	r3, [r7, #22]
            break;
 800e634:	e002      	b.n	800e63c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e636:	2300      	movs	r3, #0
 800e638:	75bb      	strb	r3, [r7, #22]
            break;
 800e63a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e63c:	7dbb      	ldrb	r3, [r7, #22]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d119      	bne.n	800e676 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	2b03      	cmp	r3, #3
 800e64c:	d113      	bne.n	800e676 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e64e:	7dba      	ldrb	r2, [r7, #22]
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	32ae      	adds	r2, #174	@ 0xae
 800e654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e658:	691b      	ldr	r3, [r3, #16]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00b      	beq.n	800e676 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e65e:	7dba      	ldrb	r2, [r7, #22]
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e666:	7dba      	ldrb	r2, [r7, #22]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	32ae      	adds	r2, #174	@ 0xae
 800e66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e670:	691b      	ldr	r3, [r3, #16]
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e676:	68f8      	ldr	r0, [r7, #12]
 800e678:	f001 f995 	bl	800f9a6 <USBD_CtlSendStatus>
 800e67c:	e032      	b.n	800e6e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e67e:	7afb      	ldrb	r3, [r7, #11]
 800e680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e684:	b2db      	uxtb	r3, r3
 800e686:	4619      	mov	r1, r3
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f000 f971 	bl	800e970 <USBD_CoreFindEP>
 800e68e:	4603      	mov	r3, r0
 800e690:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e692:	7dbb      	ldrb	r3, [r7, #22]
 800e694:	2bff      	cmp	r3, #255	@ 0xff
 800e696:	d025      	beq.n	800e6e4 <USBD_LL_DataOutStage+0x15c>
 800e698:	7dbb      	ldrb	r3, [r7, #22]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d122      	bne.n	800e6e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	d117      	bne.n	800e6da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e6aa:	7dba      	ldrb	r2, [r7, #22]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	32ae      	adds	r2, #174	@ 0xae
 800e6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b4:	699b      	ldr	r3, [r3, #24]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d00f      	beq.n	800e6da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e6ba:	7dba      	ldrb	r2, [r7, #22]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e6c2:	7dba      	ldrb	r2, [r7, #22]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	32ae      	adds	r2, #174	@ 0xae
 800e6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	7afa      	ldrb	r2, [r7, #11]
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	4798      	blx	r3
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e6da:	7dfb      	ldrb	r3, [r7, #23]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d001      	beq.n	800e6e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e6e0:	7dfb      	ldrb	r3, [r7, #23]
 800e6e2:	e000      	b.n	800e6e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3718      	adds	r7, #24
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e6ee:	b580      	push	{r7, lr}
 800e6f0:	b086      	sub	sp, #24
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	60f8      	str	r0, [r7, #12]
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	607a      	str	r2, [r7, #4]
 800e6fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e6fc:	7afb      	ldrb	r3, [r7, #11]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d16f      	bne.n	800e7e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	3314      	adds	r3, #20
 800e706:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e70e:	2b02      	cmp	r3, #2
 800e710:	d15a      	bne.n	800e7c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	689a      	ldr	r2, [r3, #8]
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d914      	bls.n	800e748 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	689a      	ldr	r2, [r3, #8]
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	68db      	ldr	r3, [r3, #12]
 800e726:	1ad2      	subs	r2, r2, r3
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	689b      	ldr	r3, [r3, #8]
 800e730:	461a      	mov	r2, r3
 800e732:	6879      	ldr	r1, [r7, #4]
 800e734:	68f8      	ldr	r0, [r7, #12]
 800e736:	f001 f8f7 	bl	800f928 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e73a:	2300      	movs	r3, #0
 800e73c:	2200      	movs	r2, #0
 800e73e:	2100      	movs	r1, #0
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	f7ff fda7 	bl	800e294 <USBD_LL_PrepareReceive>
 800e746:	e03f      	b.n	800e7c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	68da      	ldr	r2, [r3, #12]
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	689b      	ldr	r3, [r3, #8]
 800e750:	429a      	cmp	r2, r3
 800e752:	d11c      	bne.n	800e78e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	685a      	ldr	r2, [r3, #4]
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d316      	bcc.n	800e78e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	685a      	ldr	r2, [r3, #4]
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d20f      	bcs.n	800e78e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e76e:	2200      	movs	r2, #0
 800e770:	2100      	movs	r1, #0
 800e772:	68f8      	ldr	r0, [r7, #12]
 800e774:	f001 f8d8 	bl	800f928 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e780:	2300      	movs	r3, #0
 800e782:	2200      	movs	r2, #0
 800e784:	2100      	movs	r1, #0
 800e786:	68f8      	ldr	r0, [r7, #12]
 800e788:	f7ff fd84 	bl	800e294 <USBD_LL_PrepareReceive>
 800e78c:	e01c      	b.n	800e7c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e794:	b2db      	uxtb	r3, r3
 800e796:	2b03      	cmp	r3, #3
 800e798:	d10f      	bne.n	800e7ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d009      	beq.n	800e7ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	68f8      	ldr	r0, [r7, #12]
 800e7b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7ba:	2180      	movs	r1, #128	@ 0x80
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f7ff fcd7 	bl	800e170 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	f001 f902 	bl	800f9cc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d03a      	beq.n	800e848 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f7ff fe42 	bl	800e45c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e7e0:	e032      	b.n	800e848 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e7e2:	7afb      	ldrb	r3, [r7, #11]
 800e7e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f000 f8bf 	bl	800e970 <USBD_CoreFindEP>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e7f6:	7dfb      	ldrb	r3, [r7, #23]
 800e7f8:	2bff      	cmp	r3, #255	@ 0xff
 800e7fa:	d025      	beq.n	800e848 <USBD_LL_DataInStage+0x15a>
 800e7fc:	7dfb      	ldrb	r3, [r7, #23]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d122      	bne.n	800e848 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	2b03      	cmp	r3, #3
 800e80c:	d11c      	bne.n	800e848 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e80e:	7dfa      	ldrb	r2, [r7, #23]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	32ae      	adds	r2, #174	@ 0xae
 800e814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e818:	695b      	ldr	r3, [r3, #20]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d014      	beq.n	800e848 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e81e:	7dfa      	ldrb	r2, [r7, #23]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e826:	7dfa      	ldrb	r2, [r7, #23]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	32ae      	adds	r2, #174	@ 0xae
 800e82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e830:	695b      	ldr	r3, [r3, #20]
 800e832:	7afa      	ldrb	r2, [r7, #11]
 800e834:	4611      	mov	r1, r2
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	4798      	blx	r3
 800e83a:	4603      	mov	r3, r0
 800e83c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e83e:	7dbb      	ldrb	r3, [r7, #22]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d001      	beq.n	800e848 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e844:	7dbb      	ldrb	r3, [r7, #22]
 800e846:	e000      	b.n	800e84a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e848:	2300      	movs	r3, #0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3718      	adds	r7, #24
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e852:	b580      	push	{r7, lr}
 800e854:	b084      	sub	sp, #16
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e85a:	2300      	movs	r3, #0
 800e85c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2201      	movs	r2, #1
 800e862:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2200      	movs	r2, #0
 800e872:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2200      	movs	r2, #0
 800e880:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d014      	beq.n	800e8b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00e      	beq.n	800e8b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	6852      	ldr	r2, [r2, #4]
 800e8a6:	b2d2      	uxtb	r2, r2
 800e8a8:	4611      	mov	r1, r2
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	4798      	blx	r3
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d001      	beq.n	800e8b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e8b8:	2340      	movs	r3, #64	@ 0x40
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	2100      	movs	r1, #0
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f7ff fc1d 	bl	800e0fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2240      	movs	r2, #64	@ 0x40
 800e8d0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e8d4:	2340      	movs	r3, #64	@ 0x40
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	2180      	movs	r1, #128	@ 0x80
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f7ff fc0f 	bl	800e0fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2240      	movs	r2, #64	@ 0x40
 800e8ea:	621a      	str	r2, [r3, #32]

  return ret;
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}

0800e8f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e8f6:	b480      	push	{r7}
 800e8f8:	b083      	sub	sp, #12
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
 800e8fe:	460b      	mov	r3, r1
 800e900:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	78fa      	ldrb	r2, [r7, #3]
 800e906:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e908:	2300      	movs	r3, #0
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	370c      	adds	r7, #12
 800e90e:	46bd      	mov	sp, r7
 800e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e914:	4770      	bx	lr

0800e916 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e916:	b580      	push	{r7, lr}
 800e918:	b082      	sub	sp, #8
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e924:	b2db      	uxtb	r3, r3
 800e926:	2b03      	cmp	r3, #3
 800e928:	d110      	bne.n	800e94c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00b      	beq.n	800e94c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e93a:	69db      	ldr	r3, [r3, #28]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d005      	beq.n	800e94c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e946:	69db      	ldr	r3, [r3, #28]
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e94c:	2300      	movs	r3, #0
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3708      	adds	r7, #8
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}

0800e956 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e956:	b480      	push	{r7}
 800e958:	b083      	sub	sp, #12
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
 800e95e:	460b      	mov	r3, r1
 800e960:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e962:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e964:	4618      	mov	r0, r3
 800e966:	370c      	adds	r7, #12
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr

0800e970 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e970:	b480      	push	{r7}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	460b      	mov	r3, r1
 800e97a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e97c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e97e:	4618      	mov	r0, r3
 800e980:	370c      	adds	r7, #12
 800e982:	46bd      	mov	sp, r7
 800e984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e988:	4770      	bx	lr

0800e98a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b086      	sub	sp, #24
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	460b      	mov	r3, r1
 800e994:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	885b      	ldrh	r3, [r3, #2]
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	68fa      	ldr	r2, [r7, #12]
 800e9aa:	7812      	ldrb	r2, [r2, #0]
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d91f      	bls.n	800e9f0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e9b6:	e013      	b.n	800e9e0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e9b8:	f107 030a 	add.w	r3, r7, #10
 800e9bc:	4619      	mov	r1, r3
 800e9be:	6978      	ldr	r0, [r7, #20]
 800e9c0:	f000 f81b 	bl	800e9fa <USBD_GetNextDesc>
 800e9c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	785b      	ldrb	r3, [r3, #1]
 800e9ca:	2b05      	cmp	r3, #5
 800e9cc:	d108      	bne.n	800e9e0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	789b      	ldrb	r3, [r3, #2]
 800e9d6:	78fa      	ldrb	r2, [r7, #3]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d008      	beq.n	800e9ee <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	885b      	ldrh	r3, [r3, #2]
 800e9e4:	b29a      	uxth	r2, r3
 800e9e6:	897b      	ldrh	r3, [r7, #10]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d8e5      	bhi.n	800e9b8 <USBD_GetEpDesc+0x2e>
 800e9ec:	e000      	b.n	800e9f0 <USBD_GetEpDesc+0x66>
          break;
 800e9ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e9f0:	693b      	ldr	r3, [r7, #16]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3718      	adds	r7, #24
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e9fa:	b480      	push	{r7}
 800e9fc:	b085      	sub	sp, #20
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
 800ea02:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	881b      	ldrh	r3, [r3, #0]
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	7812      	ldrb	r2, [r2, #0]
 800ea10:	4413      	add	r3, r2
 800ea12:	b29a      	uxth	r2, r3
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	4413      	add	r3, r2
 800ea22:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ea24:	68fb      	ldr	r3, [r7, #12]
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3714      	adds	r7, #20
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr

0800ea32 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ea32:	b480      	push	{r7}
 800ea34:	b087      	sub	sp, #28
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	3301      	adds	r3, #1
 800ea48:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ea50:	8a3b      	ldrh	r3, [r7, #16]
 800ea52:	021b      	lsls	r3, r3, #8
 800ea54:	b21a      	sxth	r2, r3
 800ea56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	b21b      	sxth	r3, r3
 800ea5e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ea60:	89fb      	ldrh	r3, [r7, #14]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	371c      	adds	r7, #28
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr
	...

0800ea70 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ea86:	2b40      	cmp	r3, #64	@ 0x40
 800ea88:	d005      	beq.n	800ea96 <USBD_StdDevReq+0x26>
 800ea8a:	2b40      	cmp	r3, #64	@ 0x40
 800ea8c:	d857      	bhi.n	800eb3e <USBD_StdDevReq+0xce>
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d00f      	beq.n	800eab2 <USBD_StdDevReq+0x42>
 800ea92:	2b20      	cmp	r3, #32
 800ea94:	d153      	bne.n	800eb3e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	32ae      	adds	r2, #174	@ 0xae
 800eaa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	6839      	ldr	r1, [r7, #0]
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	4798      	blx	r3
 800eaac:	4603      	mov	r3, r0
 800eaae:	73fb      	strb	r3, [r7, #15]
      break;
 800eab0:	e04a      	b.n	800eb48 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	785b      	ldrb	r3, [r3, #1]
 800eab6:	2b09      	cmp	r3, #9
 800eab8:	d83b      	bhi.n	800eb32 <USBD_StdDevReq+0xc2>
 800eaba:	a201      	add	r2, pc, #4	@ (adr r2, 800eac0 <USBD_StdDevReq+0x50>)
 800eabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac0:	0800eb15 	.word	0x0800eb15
 800eac4:	0800eb29 	.word	0x0800eb29
 800eac8:	0800eb33 	.word	0x0800eb33
 800eacc:	0800eb1f 	.word	0x0800eb1f
 800ead0:	0800eb33 	.word	0x0800eb33
 800ead4:	0800eaf3 	.word	0x0800eaf3
 800ead8:	0800eae9 	.word	0x0800eae9
 800eadc:	0800eb33 	.word	0x0800eb33
 800eae0:	0800eb0b 	.word	0x0800eb0b
 800eae4:	0800eafd 	.word	0x0800eafd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800eae8:	6839      	ldr	r1, [r7, #0]
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 fa3c 	bl	800ef68 <USBD_GetDescriptor>
          break;
 800eaf0:	e024      	b.n	800eb3c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800eaf2:	6839      	ldr	r1, [r7, #0]
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 fba1 	bl	800f23c <USBD_SetAddress>
          break;
 800eafa:	e01f      	b.n	800eb3c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eafc:	6839      	ldr	r1, [r7, #0]
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f000 fbe0 	bl	800f2c4 <USBD_SetConfig>
 800eb04:	4603      	mov	r3, r0
 800eb06:	73fb      	strb	r3, [r7, #15]
          break;
 800eb08:	e018      	b.n	800eb3c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800eb0a:	6839      	ldr	r1, [r7, #0]
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 fc83 	bl	800f418 <USBD_GetConfig>
          break;
 800eb12:	e013      	b.n	800eb3c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800eb14:	6839      	ldr	r1, [r7, #0]
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f000 fcb4 	bl	800f484 <USBD_GetStatus>
          break;
 800eb1c:	e00e      	b.n	800eb3c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800eb1e:	6839      	ldr	r1, [r7, #0]
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 fce3 	bl	800f4ec <USBD_SetFeature>
          break;
 800eb26:	e009      	b.n	800eb3c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800eb28:	6839      	ldr	r1, [r7, #0]
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f000 fd07 	bl	800f53e <USBD_ClrFeature>
          break;
 800eb30:	e004      	b.n	800eb3c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800eb32:	6839      	ldr	r1, [r7, #0]
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 fd5e 	bl	800f5f6 <USBD_CtlError>
          break;
 800eb3a:	bf00      	nop
      }
      break;
 800eb3c:	e004      	b.n	800eb48 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800eb3e:	6839      	ldr	r1, [r7, #0]
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 fd58 	bl	800f5f6 <USBD_CtlError>
      break;
 800eb46:	bf00      	nop
  }

  return ret;
 800eb48:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop

0800eb54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eb6a:	2b40      	cmp	r3, #64	@ 0x40
 800eb6c:	d005      	beq.n	800eb7a <USBD_StdItfReq+0x26>
 800eb6e:	2b40      	cmp	r3, #64	@ 0x40
 800eb70:	d852      	bhi.n	800ec18 <USBD_StdItfReq+0xc4>
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d001      	beq.n	800eb7a <USBD_StdItfReq+0x26>
 800eb76:	2b20      	cmp	r3, #32
 800eb78:	d14e      	bne.n	800ec18 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb80:	b2db      	uxtb	r3, r3
 800eb82:	3b01      	subs	r3, #1
 800eb84:	2b02      	cmp	r3, #2
 800eb86:	d840      	bhi.n	800ec0a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	889b      	ldrh	r3, [r3, #4]
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d836      	bhi.n	800ec00 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	889b      	ldrh	r3, [r3, #4]
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	4619      	mov	r1, r3
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7ff fedb 	bl	800e956 <USBD_CoreFindIF>
 800eba0:	4603      	mov	r3, r0
 800eba2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eba4:	7bbb      	ldrb	r3, [r7, #14]
 800eba6:	2bff      	cmp	r3, #255	@ 0xff
 800eba8:	d01d      	beq.n	800ebe6 <USBD_StdItfReq+0x92>
 800ebaa:	7bbb      	ldrb	r3, [r7, #14]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d11a      	bne.n	800ebe6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ebb0:	7bba      	ldrb	r2, [r7, #14]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	32ae      	adds	r2, #174	@ 0xae
 800ebb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebba:	689b      	ldr	r3, [r3, #8]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00f      	beq.n	800ebe0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ebc0:	7bba      	ldrb	r2, [r7, #14]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ebc8:	7bba      	ldrb	r2, [r7, #14]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	32ae      	adds	r2, #174	@ 0xae
 800ebce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	6839      	ldr	r1, [r7, #0]
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	4798      	blx	r3
 800ebda:	4603      	mov	r3, r0
 800ebdc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ebde:	e004      	b.n	800ebea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ebe0:	2303      	movs	r3, #3
 800ebe2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ebe4:	e001      	b.n	800ebea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ebe6:	2303      	movs	r3, #3
 800ebe8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	88db      	ldrh	r3, [r3, #6]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d110      	bne.n	800ec14 <USBD_StdItfReq+0xc0>
 800ebf2:	7bfb      	ldrb	r3, [r7, #15]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d10d      	bne.n	800ec14 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 fed4 	bl	800f9a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ebfe:	e009      	b.n	800ec14 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ec00:	6839      	ldr	r1, [r7, #0]
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 fcf7 	bl	800f5f6 <USBD_CtlError>
          break;
 800ec08:	e004      	b.n	800ec14 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ec0a:	6839      	ldr	r1, [r7, #0]
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 fcf2 	bl	800f5f6 <USBD_CtlError>
          break;
 800ec12:	e000      	b.n	800ec16 <USBD_StdItfReq+0xc2>
          break;
 800ec14:	bf00      	nop
      }
      break;
 800ec16:	e004      	b.n	800ec22 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ec18:	6839      	ldr	r1, [r7, #0]
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f000 fceb 	bl	800f5f6 <USBD_CtlError>
      break;
 800ec20:	bf00      	nop
  }

  return ret;
 800ec22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ec36:	2300      	movs	r3, #0
 800ec38:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	889b      	ldrh	r3, [r3, #4]
 800ec3e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec48:	2b40      	cmp	r3, #64	@ 0x40
 800ec4a:	d007      	beq.n	800ec5c <USBD_StdEPReq+0x30>
 800ec4c:	2b40      	cmp	r3, #64	@ 0x40
 800ec4e:	f200 817f 	bhi.w	800ef50 <USBD_StdEPReq+0x324>
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d02a      	beq.n	800ecac <USBD_StdEPReq+0x80>
 800ec56:	2b20      	cmp	r3, #32
 800ec58:	f040 817a 	bne.w	800ef50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ec5c:	7bbb      	ldrb	r3, [r7, #14]
 800ec5e:	4619      	mov	r1, r3
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f7ff fe85 	bl	800e970 <USBD_CoreFindEP>
 800ec66:	4603      	mov	r3, r0
 800ec68:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ec6a:	7b7b      	ldrb	r3, [r7, #13]
 800ec6c:	2bff      	cmp	r3, #255	@ 0xff
 800ec6e:	f000 8174 	beq.w	800ef5a <USBD_StdEPReq+0x32e>
 800ec72:	7b7b      	ldrb	r3, [r7, #13]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f040 8170 	bne.w	800ef5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ec7a:	7b7a      	ldrb	r2, [r7, #13]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ec82:	7b7a      	ldrb	r2, [r7, #13]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	32ae      	adds	r2, #174	@ 0xae
 800ec88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec8c:	689b      	ldr	r3, [r3, #8]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	f000 8163 	beq.w	800ef5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ec94:	7b7a      	ldrb	r2, [r7, #13]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	32ae      	adds	r2, #174	@ 0xae
 800ec9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	6839      	ldr	r1, [r7, #0]
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	4798      	blx	r3
 800eca6:	4603      	mov	r3, r0
 800eca8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ecaa:	e156      	b.n	800ef5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	785b      	ldrb	r3, [r3, #1]
 800ecb0:	2b03      	cmp	r3, #3
 800ecb2:	d008      	beq.n	800ecc6 <USBD_StdEPReq+0x9a>
 800ecb4:	2b03      	cmp	r3, #3
 800ecb6:	f300 8145 	bgt.w	800ef44 <USBD_StdEPReq+0x318>
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	f000 809b 	beq.w	800edf6 <USBD_StdEPReq+0x1ca>
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d03c      	beq.n	800ed3e <USBD_StdEPReq+0x112>
 800ecc4:	e13e      	b.n	800ef44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	2b02      	cmp	r3, #2
 800ecd0:	d002      	beq.n	800ecd8 <USBD_StdEPReq+0xac>
 800ecd2:	2b03      	cmp	r3, #3
 800ecd4:	d016      	beq.n	800ed04 <USBD_StdEPReq+0xd8>
 800ecd6:	e02c      	b.n	800ed32 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ecd8:	7bbb      	ldrb	r3, [r7, #14]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d00d      	beq.n	800ecfa <USBD_StdEPReq+0xce>
 800ecde:	7bbb      	ldrb	r3, [r7, #14]
 800ece0:	2b80      	cmp	r3, #128	@ 0x80
 800ece2:	d00a      	beq.n	800ecfa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ece4:	7bbb      	ldrb	r3, [r7, #14]
 800ece6:	4619      	mov	r1, r3
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f7ff fa41 	bl	800e170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ecee:	2180      	movs	r1, #128	@ 0x80
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f7ff fa3d 	bl	800e170 <USBD_LL_StallEP>
 800ecf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ecf8:	e020      	b.n	800ed3c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ecfa:	6839      	ldr	r1, [r7, #0]
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f000 fc7a 	bl	800f5f6 <USBD_CtlError>
              break;
 800ed02:	e01b      	b.n	800ed3c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	885b      	ldrh	r3, [r3, #2]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d10e      	bne.n	800ed2a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ed0c:	7bbb      	ldrb	r3, [r7, #14]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d00b      	beq.n	800ed2a <USBD_StdEPReq+0xfe>
 800ed12:	7bbb      	ldrb	r3, [r7, #14]
 800ed14:	2b80      	cmp	r3, #128	@ 0x80
 800ed16:	d008      	beq.n	800ed2a <USBD_StdEPReq+0xfe>
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	88db      	ldrh	r3, [r3, #6]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d104      	bne.n	800ed2a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed20:	7bbb      	ldrb	r3, [r7, #14]
 800ed22:	4619      	mov	r1, r3
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f7ff fa23 	bl	800e170 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 fe3b 	bl	800f9a6 <USBD_CtlSendStatus>

              break;
 800ed30:	e004      	b.n	800ed3c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ed32:	6839      	ldr	r1, [r7, #0]
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 fc5e 	bl	800f5f6 <USBD_CtlError>
              break;
 800ed3a:	bf00      	nop
          }
          break;
 800ed3c:	e107      	b.n	800ef4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	2b02      	cmp	r3, #2
 800ed48:	d002      	beq.n	800ed50 <USBD_StdEPReq+0x124>
 800ed4a:	2b03      	cmp	r3, #3
 800ed4c:	d016      	beq.n	800ed7c <USBD_StdEPReq+0x150>
 800ed4e:	e04b      	b.n	800ede8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed50:	7bbb      	ldrb	r3, [r7, #14]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d00d      	beq.n	800ed72 <USBD_StdEPReq+0x146>
 800ed56:	7bbb      	ldrb	r3, [r7, #14]
 800ed58:	2b80      	cmp	r3, #128	@ 0x80
 800ed5a:	d00a      	beq.n	800ed72 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed5c:	7bbb      	ldrb	r3, [r7, #14]
 800ed5e:	4619      	mov	r1, r3
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f7ff fa05 	bl	800e170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed66:	2180      	movs	r1, #128	@ 0x80
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f7ff fa01 	bl	800e170 <USBD_LL_StallEP>
 800ed6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ed70:	e040      	b.n	800edf4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ed72:	6839      	ldr	r1, [r7, #0]
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f000 fc3e 	bl	800f5f6 <USBD_CtlError>
              break;
 800ed7a:	e03b      	b.n	800edf4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	885b      	ldrh	r3, [r3, #2]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d136      	bne.n	800edf2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ed84:	7bbb      	ldrb	r3, [r7, #14]
 800ed86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d004      	beq.n	800ed98 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ed8e:	7bbb      	ldrb	r3, [r7, #14]
 800ed90:	4619      	mov	r1, r3
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f7ff fa05 	bl	800e1a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 fe04 	bl	800f9a6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ed9e:	7bbb      	ldrb	r3, [r7, #14]
 800eda0:	4619      	mov	r1, r3
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f7ff fde4 	bl	800e970 <USBD_CoreFindEP>
 800eda8:	4603      	mov	r3, r0
 800edaa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800edac:	7b7b      	ldrb	r3, [r7, #13]
 800edae:	2bff      	cmp	r3, #255	@ 0xff
 800edb0:	d01f      	beq.n	800edf2 <USBD_StdEPReq+0x1c6>
 800edb2:	7b7b      	ldrb	r3, [r7, #13]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d11c      	bne.n	800edf2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800edb8:	7b7a      	ldrb	r2, [r7, #13]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800edc0:	7b7a      	ldrb	r2, [r7, #13]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	32ae      	adds	r2, #174	@ 0xae
 800edc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d010      	beq.n	800edf2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800edd0:	7b7a      	ldrb	r2, [r7, #13]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	32ae      	adds	r2, #174	@ 0xae
 800edd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	6839      	ldr	r1, [r7, #0]
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	4798      	blx	r3
 800ede2:	4603      	mov	r3, r0
 800ede4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ede6:	e004      	b.n	800edf2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ede8:	6839      	ldr	r1, [r7, #0]
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 fc03 	bl	800f5f6 <USBD_CtlError>
              break;
 800edf0:	e000      	b.n	800edf4 <USBD_StdEPReq+0x1c8>
              break;
 800edf2:	bf00      	nop
          }
          break;
 800edf4:	e0ab      	b.n	800ef4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	2b02      	cmp	r3, #2
 800ee00:	d002      	beq.n	800ee08 <USBD_StdEPReq+0x1dc>
 800ee02:	2b03      	cmp	r3, #3
 800ee04:	d032      	beq.n	800ee6c <USBD_StdEPReq+0x240>
 800ee06:	e097      	b.n	800ef38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee08:	7bbb      	ldrb	r3, [r7, #14]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d007      	beq.n	800ee1e <USBD_StdEPReq+0x1f2>
 800ee0e:	7bbb      	ldrb	r3, [r7, #14]
 800ee10:	2b80      	cmp	r3, #128	@ 0x80
 800ee12:	d004      	beq.n	800ee1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ee14:	6839      	ldr	r1, [r7, #0]
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 fbed 	bl	800f5f6 <USBD_CtlError>
                break;
 800ee1c:	e091      	b.n	800ef42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	da0b      	bge.n	800ee3e <USBD_StdEPReq+0x212>
 800ee26:	7bbb      	ldrb	r3, [r7, #14]
 800ee28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	009b      	lsls	r3, r3, #2
 800ee30:	4413      	add	r3, r2
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	3310      	adds	r3, #16
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	4413      	add	r3, r2
 800ee3a:	3304      	adds	r3, #4
 800ee3c:	e00b      	b.n	800ee56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ee3e:	7bbb      	ldrb	r3, [r7, #14]
 800ee40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee44:	4613      	mov	r3, r2
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	4413      	add	r3, r2
 800ee4a:	009b      	lsls	r3, r3, #2
 800ee4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	4413      	add	r3, r2
 800ee54:	3304      	adds	r3, #4
 800ee56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	2202      	movs	r2, #2
 800ee62:	4619      	mov	r1, r3
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 fd44 	bl	800f8f2 <USBD_CtlSendData>
              break;
 800ee6a:	e06a      	b.n	800ef42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ee6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	da11      	bge.n	800ee98 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ee74:	7bbb      	ldrb	r3, [r7, #14]
 800ee76:	f003 020f 	and.w	r2, r3, #15
 800ee7a:	6879      	ldr	r1, [r7, #4]
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	009b      	lsls	r3, r3, #2
 800ee80:	4413      	add	r3, r2
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	440b      	add	r3, r1
 800ee86:	3324      	adds	r3, #36	@ 0x24
 800ee88:	881b      	ldrh	r3, [r3, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d117      	bne.n	800eebe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ee8e:	6839      	ldr	r1, [r7, #0]
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 fbb0 	bl	800f5f6 <USBD_CtlError>
                  break;
 800ee96:	e054      	b.n	800ef42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ee98:	7bbb      	ldrb	r3, [r7, #14]
 800ee9a:	f003 020f 	and.w	r2, r3, #15
 800ee9e:	6879      	ldr	r1, [r7, #4]
 800eea0:	4613      	mov	r3, r2
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	4413      	add	r3, r2
 800eea6:	009b      	lsls	r3, r3, #2
 800eea8:	440b      	add	r3, r1
 800eeaa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800eeae:	881b      	ldrh	r3, [r3, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d104      	bne.n	800eebe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800eeb4:	6839      	ldr	r1, [r7, #0]
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 fb9d 	bl	800f5f6 <USBD_CtlError>
                  break;
 800eebc:	e041      	b.n	800ef42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eebe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	da0b      	bge.n	800eede <USBD_StdEPReq+0x2b2>
 800eec6:	7bbb      	ldrb	r3, [r7, #14]
 800eec8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eecc:	4613      	mov	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	4413      	add	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	3310      	adds	r3, #16
 800eed6:	687a      	ldr	r2, [r7, #4]
 800eed8:	4413      	add	r3, r2
 800eeda:	3304      	adds	r3, #4
 800eedc:	e00b      	b.n	800eef6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eede:	7bbb      	ldrb	r3, [r7, #14]
 800eee0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eee4:	4613      	mov	r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	4413      	add	r3, r2
 800eeea:	009b      	lsls	r3, r3, #2
 800eeec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	4413      	add	r3, r2
 800eef4:	3304      	adds	r3, #4
 800eef6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800eef8:	7bbb      	ldrb	r3, [r7, #14]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d002      	beq.n	800ef04 <USBD_StdEPReq+0x2d8>
 800eefe:	7bbb      	ldrb	r3, [r7, #14]
 800ef00:	2b80      	cmp	r3, #128	@ 0x80
 800ef02:	d103      	bne.n	800ef0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	2200      	movs	r2, #0
 800ef08:	601a      	str	r2, [r3, #0]
 800ef0a:	e00e      	b.n	800ef2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ef0c:	7bbb      	ldrb	r3, [r7, #14]
 800ef0e:	4619      	mov	r1, r3
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f7ff f95f 	bl	800e1d4 <USBD_LL_IsStallEP>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d003      	beq.n	800ef24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	2201      	movs	r2, #1
 800ef20:	601a      	str	r2, [r3, #0]
 800ef22:	e002      	b.n	800ef2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	2200      	movs	r2, #0
 800ef28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	2202      	movs	r2, #2
 800ef2e:	4619      	mov	r1, r3
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 fcde 	bl	800f8f2 <USBD_CtlSendData>
              break;
 800ef36:	e004      	b.n	800ef42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ef38:	6839      	ldr	r1, [r7, #0]
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f000 fb5b 	bl	800f5f6 <USBD_CtlError>
              break;
 800ef40:	bf00      	nop
          }
          break;
 800ef42:	e004      	b.n	800ef4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ef44:	6839      	ldr	r1, [r7, #0]
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f000 fb55 	bl	800f5f6 <USBD_CtlError>
          break;
 800ef4c:	bf00      	nop
      }
      break;
 800ef4e:	e005      	b.n	800ef5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ef50:	6839      	ldr	r1, [r7, #0]
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fb4f 	bl	800f5f6 <USBD_CtlError>
      break;
 800ef58:	e000      	b.n	800ef5c <USBD_StdEPReq+0x330>
      break;
 800ef5a:	bf00      	nop
  }

  return ret;
 800ef5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3710      	adds	r7, #16
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
	...

0800ef68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ef72:	2300      	movs	r3, #0
 800ef74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ef76:	2300      	movs	r3, #0
 800ef78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	885b      	ldrh	r3, [r3, #2]
 800ef82:	0a1b      	lsrs	r3, r3, #8
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	3b01      	subs	r3, #1
 800ef88:	2b06      	cmp	r3, #6
 800ef8a:	f200 8128 	bhi.w	800f1de <USBD_GetDescriptor+0x276>
 800ef8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef94 <USBD_GetDescriptor+0x2c>)
 800ef90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef94:	0800efb1 	.word	0x0800efb1
 800ef98:	0800efc9 	.word	0x0800efc9
 800ef9c:	0800f009 	.word	0x0800f009
 800efa0:	0800f1df 	.word	0x0800f1df
 800efa4:	0800f1df 	.word	0x0800f1df
 800efa8:	0800f17f 	.word	0x0800f17f
 800efac:	0800f1ab 	.word	0x0800f1ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	7c12      	ldrb	r2, [r2, #16]
 800efbc:	f107 0108 	add.w	r1, r7, #8
 800efc0:	4610      	mov	r0, r2
 800efc2:	4798      	blx	r3
 800efc4:	60f8      	str	r0, [r7, #12]
      break;
 800efc6:	e112      	b.n	800f1ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	7c1b      	ldrb	r3, [r3, #16]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d10d      	bne.n	800efec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800efd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efd8:	f107 0208 	add.w	r2, r7, #8
 800efdc:	4610      	mov	r0, r2
 800efde:	4798      	blx	r3
 800efe0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	3301      	adds	r3, #1
 800efe6:	2202      	movs	r2, #2
 800efe8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800efea:	e100      	b.n	800f1ee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff4:	f107 0208 	add.w	r2, r7, #8
 800eff8:	4610      	mov	r0, r2
 800effa:	4798      	blx	r3
 800effc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	3301      	adds	r3, #1
 800f002:	2202      	movs	r2, #2
 800f004:	701a      	strb	r2, [r3, #0]
      break;
 800f006:	e0f2      	b.n	800f1ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	885b      	ldrh	r3, [r3, #2]
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	2b05      	cmp	r3, #5
 800f010:	f200 80ac 	bhi.w	800f16c <USBD_GetDescriptor+0x204>
 800f014:	a201      	add	r2, pc, #4	@ (adr r2, 800f01c <USBD_GetDescriptor+0xb4>)
 800f016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f01a:	bf00      	nop
 800f01c:	0800f035 	.word	0x0800f035
 800f020:	0800f069 	.word	0x0800f069
 800f024:	0800f09d 	.word	0x0800f09d
 800f028:	0800f0d1 	.word	0x0800f0d1
 800f02c:	0800f105 	.word	0x0800f105
 800f030:	0800f139 	.word	0x0800f139
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00b      	beq.n	800f058 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	687a      	ldr	r2, [r7, #4]
 800f04a:	7c12      	ldrb	r2, [r2, #16]
 800f04c:	f107 0108 	add.w	r1, r7, #8
 800f050:	4610      	mov	r0, r2
 800f052:	4798      	blx	r3
 800f054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f056:	e091      	b.n	800f17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f058:	6839      	ldr	r1, [r7, #0]
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f000 facb 	bl	800f5f6 <USBD_CtlError>
            err++;
 800f060:	7afb      	ldrb	r3, [r7, #11]
 800f062:	3301      	adds	r3, #1
 800f064:	72fb      	strb	r3, [r7, #11]
          break;
 800f066:	e089      	b.n	800f17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d00b      	beq.n	800f08c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f07a:	689b      	ldr	r3, [r3, #8]
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	7c12      	ldrb	r2, [r2, #16]
 800f080:	f107 0108 	add.w	r1, r7, #8
 800f084:	4610      	mov	r0, r2
 800f086:	4798      	blx	r3
 800f088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f08a:	e077      	b.n	800f17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f08c:	6839      	ldr	r1, [r7, #0]
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 fab1 	bl	800f5f6 <USBD_CtlError>
            err++;
 800f094:	7afb      	ldrb	r3, [r7, #11]
 800f096:	3301      	adds	r3, #1
 800f098:	72fb      	strb	r3, [r7, #11]
          break;
 800f09a:	e06f      	b.n	800f17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d00b      	beq.n	800f0c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	687a      	ldr	r2, [r7, #4]
 800f0b2:	7c12      	ldrb	r2, [r2, #16]
 800f0b4:	f107 0108 	add.w	r1, r7, #8
 800f0b8:	4610      	mov	r0, r2
 800f0ba:	4798      	blx	r3
 800f0bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0be:	e05d      	b.n	800f17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f0c0:	6839      	ldr	r1, [r7, #0]
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f000 fa97 	bl	800f5f6 <USBD_CtlError>
            err++;
 800f0c8:	7afb      	ldrb	r3, [r7, #11]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	72fb      	strb	r3, [r7, #11]
          break;
 800f0ce:	e055      	b.n	800f17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0d6:	691b      	ldr	r3, [r3, #16]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d00b      	beq.n	800f0f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0e2:	691b      	ldr	r3, [r3, #16]
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	7c12      	ldrb	r2, [r2, #16]
 800f0e8:	f107 0108 	add.w	r1, r7, #8
 800f0ec:	4610      	mov	r0, r2
 800f0ee:	4798      	blx	r3
 800f0f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f0f2:	e043      	b.n	800f17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f0f4:	6839      	ldr	r1, [r7, #0]
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 fa7d 	bl	800f5f6 <USBD_CtlError>
            err++;
 800f0fc:	7afb      	ldrb	r3, [r7, #11]
 800f0fe:	3301      	adds	r3, #1
 800f100:	72fb      	strb	r3, [r7, #11]
          break;
 800f102:	e03b      	b.n	800f17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f10a:	695b      	ldr	r3, [r3, #20]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00b      	beq.n	800f128 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f116:	695b      	ldr	r3, [r3, #20]
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	7c12      	ldrb	r2, [r2, #16]
 800f11c:	f107 0108 	add.w	r1, r7, #8
 800f120:	4610      	mov	r0, r2
 800f122:	4798      	blx	r3
 800f124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f126:	e029      	b.n	800f17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f128:	6839      	ldr	r1, [r7, #0]
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 fa63 	bl	800f5f6 <USBD_CtlError>
            err++;
 800f130:	7afb      	ldrb	r3, [r7, #11]
 800f132:	3301      	adds	r3, #1
 800f134:	72fb      	strb	r3, [r7, #11]
          break;
 800f136:	e021      	b.n	800f17c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f13e:	699b      	ldr	r3, [r3, #24]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d00b      	beq.n	800f15c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f14a:	699b      	ldr	r3, [r3, #24]
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	7c12      	ldrb	r2, [r2, #16]
 800f150:	f107 0108 	add.w	r1, r7, #8
 800f154:	4610      	mov	r0, r2
 800f156:	4798      	blx	r3
 800f158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f15a:	e00f      	b.n	800f17c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f15c:	6839      	ldr	r1, [r7, #0]
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 fa49 	bl	800f5f6 <USBD_CtlError>
            err++;
 800f164:	7afb      	ldrb	r3, [r7, #11]
 800f166:	3301      	adds	r3, #1
 800f168:	72fb      	strb	r3, [r7, #11]
          break;
 800f16a:	e007      	b.n	800f17c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f16c:	6839      	ldr	r1, [r7, #0]
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 fa41 	bl	800f5f6 <USBD_CtlError>
          err++;
 800f174:	7afb      	ldrb	r3, [r7, #11]
 800f176:	3301      	adds	r3, #1
 800f178:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f17a:	bf00      	nop
      }
      break;
 800f17c:	e037      	b.n	800f1ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	7c1b      	ldrb	r3, [r3, #16]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d109      	bne.n	800f19a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f18c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f18e:	f107 0208 	add.w	r2, r7, #8
 800f192:	4610      	mov	r0, r2
 800f194:	4798      	blx	r3
 800f196:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f198:	e029      	b.n	800f1ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f19a:	6839      	ldr	r1, [r7, #0]
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 fa2a 	bl	800f5f6 <USBD_CtlError>
        err++;
 800f1a2:	7afb      	ldrb	r3, [r7, #11]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	72fb      	strb	r3, [r7, #11]
      break;
 800f1a8:	e021      	b.n	800f1ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	7c1b      	ldrb	r3, [r3, #16]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d10d      	bne.n	800f1ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1ba:	f107 0208 	add.w	r2, r7, #8
 800f1be:	4610      	mov	r0, r2
 800f1c0:	4798      	blx	r3
 800f1c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	2207      	movs	r2, #7
 800f1ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1cc:	e00f      	b.n	800f1ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f1ce:	6839      	ldr	r1, [r7, #0]
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 fa10 	bl	800f5f6 <USBD_CtlError>
        err++;
 800f1d6:	7afb      	ldrb	r3, [r7, #11]
 800f1d8:	3301      	adds	r3, #1
 800f1da:	72fb      	strb	r3, [r7, #11]
      break;
 800f1dc:	e007      	b.n	800f1ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f1de:	6839      	ldr	r1, [r7, #0]
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 fa08 	bl	800f5f6 <USBD_CtlError>
      err++;
 800f1e6:	7afb      	ldrb	r3, [r7, #11]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	72fb      	strb	r3, [r7, #11]
      break;
 800f1ec:	bf00      	nop
  }

  if (err != 0U)
 800f1ee:	7afb      	ldrb	r3, [r7, #11]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d11e      	bne.n	800f232 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	88db      	ldrh	r3, [r3, #6]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d016      	beq.n	800f22a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f1fc:	893b      	ldrh	r3, [r7, #8]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d00e      	beq.n	800f220 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	88da      	ldrh	r2, [r3, #6]
 800f206:	893b      	ldrh	r3, [r7, #8]
 800f208:	4293      	cmp	r3, r2
 800f20a:	bf28      	it	cs
 800f20c:	4613      	movcs	r3, r2
 800f20e:	b29b      	uxth	r3, r3
 800f210:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f212:	893b      	ldrh	r3, [r7, #8]
 800f214:	461a      	mov	r2, r3
 800f216:	68f9      	ldr	r1, [r7, #12]
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f000 fb6a 	bl	800f8f2 <USBD_CtlSendData>
 800f21e:	e009      	b.n	800f234 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f220:	6839      	ldr	r1, [r7, #0]
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 f9e7 	bl	800f5f6 <USBD_CtlError>
 800f228:	e004      	b.n	800f234 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 fbbb 	bl	800f9a6 <USBD_CtlSendStatus>
 800f230:	e000      	b.n	800f234 <USBD_GetDescriptor+0x2cc>
    return;
 800f232:	bf00      	nop
  }
}
 800f234:	3710      	adds	r7, #16
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop

0800f23c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	889b      	ldrh	r3, [r3, #4]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d131      	bne.n	800f2b2 <USBD_SetAddress+0x76>
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	88db      	ldrh	r3, [r3, #6]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d12d      	bne.n	800f2b2 <USBD_SetAddress+0x76>
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	885b      	ldrh	r3, [r3, #2]
 800f25a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f25c:	d829      	bhi.n	800f2b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	885b      	ldrh	r3, [r3, #2]
 800f262:	b2db      	uxtb	r3, r3
 800f264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f268:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f270:	b2db      	uxtb	r3, r3
 800f272:	2b03      	cmp	r3, #3
 800f274:	d104      	bne.n	800f280 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f276:	6839      	ldr	r1, [r7, #0]
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 f9bc 	bl	800f5f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f27e:	e01d      	b.n	800f2bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	7bfa      	ldrb	r2, [r7, #15]
 800f284:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f288:	7bfb      	ldrb	r3, [r7, #15]
 800f28a:	4619      	mov	r1, r3
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7fe ffcd 	bl	800e22c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 fb87 	bl	800f9a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f298:	7bfb      	ldrb	r3, [r7, #15]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d004      	beq.n	800f2a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2202      	movs	r2, #2
 800f2a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2a6:	e009      	b.n	800f2bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2b0:	e004      	b.n	800f2bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f2b2:	6839      	ldr	r1, [r7, #0]
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 f99e 	bl	800f5f6 <USBD_CtlError>
  }
}
 800f2ba:	bf00      	nop
 800f2bc:	bf00      	nop
 800f2be:	3710      	adds	r7, #16
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	885b      	ldrh	r3, [r3, #2]
 800f2d6:	b2da      	uxtb	r2, r3
 800f2d8:	4b4e      	ldr	r3, [pc, #312]	@ (800f414 <USBD_SetConfig+0x150>)
 800f2da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f2dc:	4b4d      	ldr	r3, [pc, #308]	@ (800f414 <USBD_SetConfig+0x150>)
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d905      	bls.n	800f2f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f2e4:	6839      	ldr	r1, [r7, #0]
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f000 f985 	bl	800f5f6 <USBD_CtlError>
    return USBD_FAIL;
 800f2ec:	2303      	movs	r3, #3
 800f2ee:	e08c      	b.n	800f40a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	2b02      	cmp	r3, #2
 800f2fa:	d002      	beq.n	800f302 <USBD_SetConfig+0x3e>
 800f2fc:	2b03      	cmp	r3, #3
 800f2fe:	d029      	beq.n	800f354 <USBD_SetConfig+0x90>
 800f300:	e075      	b.n	800f3ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f302:	4b44      	ldr	r3, [pc, #272]	@ (800f414 <USBD_SetConfig+0x150>)
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d020      	beq.n	800f34c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f30a:	4b42      	ldr	r3, [pc, #264]	@ (800f414 <USBD_SetConfig+0x150>)
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	461a      	mov	r2, r3
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f314:	4b3f      	ldr	r3, [pc, #252]	@ (800f414 <USBD_SetConfig+0x150>)
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	4619      	mov	r1, r3
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f7ff f8a9 	bl	800e472 <USBD_SetClassConfig>
 800f320:	4603      	mov	r3, r0
 800f322:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f324:	7bfb      	ldrb	r3, [r7, #15]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d008      	beq.n	800f33c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f32a:	6839      	ldr	r1, [r7, #0]
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 f962 	bl	800f5f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2202      	movs	r2, #2
 800f336:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f33a:	e065      	b.n	800f408 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f000 fb32 	bl	800f9a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2203      	movs	r2, #3
 800f346:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f34a:	e05d      	b.n	800f408 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f000 fb2a 	bl	800f9a6 <USBD_CtlSendStatus>
      break;
 800f352:	e059      	b.n	800f408 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f354:	4b2f      	ldr	r3, [pc, #188]	@ (800f414 <USBD_SetConfig+0x150>)
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d112      	bne.n	800f382 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2202      	movs	r2, #2
 800f360:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f364:	4b2b      	ldr	r3, [pc, #172]	@ (800f414 <USBD_SetConfig+0x150>)
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	461a      	mov	r2, r3
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f36e:	4b29      	ldr	r3, [pc, #164]	@ (800f414 <USBD_SetConfig+0x150>)
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	4619      	mov	r1, r3
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f7ff f898 	bl	800e4aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 fb13 	bl	800f9a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f380:	e042      	b.n	800f408 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f382:	4b24      	ldr	r3, [pc, #144]	@ (800f414 <USBD_SetConfig+0x150>)
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	461a      	mov	r2, r3
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d02a      	beq.n	800f3e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	b2db      	uxtb	r3, r3
 800f396:	4619      	mov	r1, r3
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f7ff f886 	bl	800e4aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f39e:	4b1d      	ldr	r3, [pc, #116]	@ (800f414 <USBD_SetConfig+0x150>)
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f3a8:	4b1a      	ldr	r3, [pc, #104]	@ (800f414 <USBD_SetConfig+0x150>)
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f7ff f85f 	bl	800e472 <USBD_SetClassConfig>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f3b8:	7bfb      	ldrb	r3, [r7, #15]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d00f      	beq.n	800f3de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f3be:	6839      	ldr	r1, [r7, #0]
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 f918 	bl	800f5f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7ff f86b 	bl	800e4aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2202      	movs	r2, #2
 800f3d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f3dc:	e014      	b.n	800f408 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 fae1 	bl	800f9a6 <USBD_CtlSendStatus>
      break;
 800f3e4:	e010      	b.n	800f408 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f000 fadd 	bl	800f9a6 <USBD_CtlSendStatus>
      break;
 800f3ec:	e00c      	b.n	800f408 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f3ee:	6839      	ldr	r1, [r7, #0]
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 f900 	bl	800f5f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f3f6:	4b07      	ldr	r3, [pc, #28]	@ (800f414 <USBD_SetConfig+0x150>)
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7ff f854 	bl	800e4aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f402:	2303      	movs	r3, #3
 800f404:	73fb      	strb	r3, [r7, #15]
      break;
 800f406:	bf00      	nop
  }

  return ret;
 800f408:	7bfb      	ldrb	r3, [r7, #15]
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3710      	adds	r7, #16
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop
 800f414:	20001074 	.word	0x20001074

0800f418 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	88db      	ldrh	r3, [r3, #6]
 800f426:	2b01      	cmp	r3, #1
 800f428:	d004      	beq.n	800f434 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f42a:	6839      	ldr	r1, [r7, #0]
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f000 f8e2 	bl	800f5f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f432:	e023      	b.n	800f47c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	2b02      	cmp	r3, #2
 800f43e:	dc02      	bgt.n	800f446 <USBD_GetConfig+0x2e>
 800f440:	2b00      	cmp	r3, #0
 800f442:	dc03      	bgt.n	800f44c <USBD_GetConfig+0x34>
 800f444:	e015      	b.n	800f472 <USBD_GetConfig+0x5a>
 800f446:	2b03      	cmp	r3, #3
 800f448:	d00b      	beq.n	800f462 <USBD_GetConfig+0x4a>
 800f44a:	e012      	b.n	800f472 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2200      	movs	r2, #0
 800f450:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	3308      	adds	r3, #8
 800f456:	2201      	movs	r2, #1
 800f458:	4619      	mov	r1, r3
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f000 fa49 	bl	800f8f2 <USBD_CtlSendData>
        break;
 800f460:	e00c      	b.n	800f47c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	3304      	adds	r3, #4
 800f466:	2201      	movs	r2, #1
 800f468:	4619      	mov	r1, r3
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f000 fa41 	bl	800f8f2 <USBD_CtlSendData>
        break;
 800f470:	e004      	b.n	800f47c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f472:	6839      	ldr	r1, [r7, #0]
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f000 f8be 	bl	800f5f6 <USBD_CtlError>
        break;
 800f47a:	bf00      	nop
}
 800f47c:	bf00      	nop
 800f47e:	3708      	adds	r7, #8
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}

0800f484 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f494:	b2db      	uxtb	r3, r3
 800f496:	3b01      	subs	r3, #1
 800f498:	2b02      	cmp	r3, #2
 800f49a:	d81e      	bhi.n	800f4da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	88db      	ldrh	r3, [r3, #6]
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	d004      	beq.n	800f4ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f4a4:	6839      	ldr	r1, [r7, #0]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 f8a5 	bl	800f5f6 <USBD_CtlError>
        break;
 800f4ac:	e01a      	b.n	800f4e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d005      	beq.n	800f4ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	f043 0202 	orr.w	r2, r3, #2
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	330c      	adds	r3, #12
 800f4ce:	2202      	movs	r2, #2
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 fa0d 	bl	800f8f2 <USBD_CtlSendData>
      break;
 800f4d8:	e004      	b.n	800f4e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f4da:	6839      	ldr	r1, [r7, #0]
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f000 f88a 	bl	800f5f6 <USBD_CtlError>
      break;
 800f4e2:	bf00      	nop
  }
}
 800f4e4:	bf00      	nop
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	885b      	ldrh	r3, [r3, #2]
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d107      	bne.n	800f50e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2201      	movs	r2, #1
 800f502:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 fa4d 	bl	800f9a6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f50c:	e013      	b.n	800f536 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	885b      	ldrh	r3, [r3, #2]
 800f512:	2b02      	cmp	r3, #2
 800f514:	d10b      	bne.n	800f52e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	889b      	ldrh	r3, [r3, #4]
 800f51a:	0a1b      	lsrs	r3, r3, #8
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	b2da      	uxtb	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fa3d 	bl	800f9a6 <USBD_CtlSendStatus>
}
 800f52c:	e003      	b.n	800f536 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f52e:	6839      	ldr	r1, [r7, #0]
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 f860 	bl	800f5f6 <USBD_CtlError>
}
 800f536:	bf00      	nop
 800f538:	3708      	adds	r7, #8
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}

0800f53e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f53e:	b580      	push	{r7, lr}
 800f540:	b082      	sub	sp, #8
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
 800f546:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f54e:	b2db      	uxtb	r3, r3
 800f550:	3b01      	subs	r3, #1
 800f552:	2b02      	cmp	r3, #2
 800f554:	d80b      	bhi.n	800f56e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	885b      	ldrh	r3, [r3, #2]
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d10c      	bne.n	800f578 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f000 fa1d 	bl	800f9a6 <USBD_CtlSendStatus>
      }
      break;
 800f56c:	e004      	b.n	800f578 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f56e:	6839      	ldr	r1, [r7, #0]
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 f840 	bl	800f5f6 <USBD_CtlError>
      break;
 800f576:	e000      	b.n	800f57a <USBD_ClrFeature+0x3c>
      break;
 800f578:	bf00      	nop
  }
}
 800f57a:	bf00      	nop
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b084      	sub	sp, #16
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
 800f58a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	781a      	ldrb	r2, [r3, #0]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	3301      	adds	r3, #1
 800f59c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	781a      	ldrb	r2, [r3, #0]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f5ac:	68f8      	ldr	r0, [r7, #12]
 800f5ae:	f7ff fa40 	bl	800ea32 <SWAPBYTE>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	3301      	adds	r3, #1
 800f5be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f5c6:	68f8      	ldr	r0, [r7, #12]
 800f5c8:	f7ff fa33 	bl	800ea32 <SWAPBYTE>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f5e0:	68f8      	ldr	r0, [r7, #12]
 800f5e2:	f7ff fa26 	bl	800ea32 <SWAPBYTE>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	80da      	strh	r2, [r3, #6]
}
 800f5ee:	bf00      	nop
 800f5f0:	3710      	adds	r7, #16
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b082      	sub	sp, #8
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
 800f5fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f600:	2180      	movs	r1, #128	@ 0x80
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f7fe fdb4 	bl	800e170 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f608:	2100      	movs	r1, #0
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f7fe fdb0 	bl	800e170 <USBD_LL_StallEP>
}
 800f610:	bf00      	nop
 800f612:	3708      	adds	r7, #8
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b086      	sub	sp, #24
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f624:	2300      	movs	r3, #0
 800f626:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d036      	beq.n	800f69c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f632:	6938      	ldr	r0, [r7, #16]
 800f634:	f000 f836 	bl	800f6a4 <USBD_GetLen>
 800f638:	4603      	mov	r3, r0
 800f63a:	3301      	adds	r3, #1
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	005b      	lsls	r3, r3, #1
 800f640:	b29a      	uxth	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f646:	7dfb      	ldrb	r3, [r7, #23]
 800f648:	68ba      	ldr	r2, [r7, #8]
 800f64a:	4413      	add	r3, r2
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	7812      	ldrb	r2, [r2, #0]
 800f650:	701a      	strb	r2, [r3, #0]
  idx++;
 800f652:	7dfb      	ldrb	r3, [r7, #23]
 800f654:	3301      	adds	r3, #1
 800f656:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f658:	7dfb      	ldrb	r3, [r7, #23]
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	4413      	add	r3, r2
 800f65e:	2203      	movs	r2, #3
 800f660:	701a      	strb	r2, [r3, #0]
  idx++;
 800f662:	7dfb      	ldrb	r3, [r7, #23]
 800f664:	3301      	adds	r3, #1
 800f666:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f668:	e013      	b.n	800f692 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f66a:	7dfb      	ldrb	r3, [r7, #23]
 800f66c:	68ba      	ldr	r2, [r7, #8]
 800f66e:	4413      	add	r3, r2
 800f670:	693a      	ldr	r2, [r7, #16]
 800f672:	7812      	ldrb	r2, [r2, #0]
 800f674:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	3301      	adds	r3, #1
 800f67a:	613b      	str	r3, [r7, #16]
    idx++;
 800f67c:	7dfb      	ldrb	r3, [r7, #23]
 800f67e:	3301      	adds	r3, #1
 800f680:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f682:	7dfb      	ldrb	r3, [r7, #23]
 800f684:	68ba      	ldr	r2, [r7, #8]
 800f686:	4413      	add	r3, r2
 800f688:	2200      	movs	r2, #0
 800f68a:	701a      	strb	r2, [r3, #0]
    idx++;
 800f68c:	7dfb      	ldrb	r3, [r7, #23]
 800f68e:	3301      	adds	r3, #1
 800f690:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d1e7      	bne.n	800f66a <USBD_GetString+0x52>
 800f69a:	e000      	b.n	800f69e <USBD_GetString+0x86>
    return;
 800f69c:	bf00      	nop
  }
}
 800f69e:	3718      	adds	r7, #24
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b085      	sub	sp, #20
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f6b4:	e005      	b.n	800f6c2 <USBD_GetLen+0x1e>
  {
    len++;
 800f6b6:	7bfb      	ldrb	r3, [r7, #15]
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d1f5      	bne.n	800f6b6 <USBD_GetLen+0x12>
  }

  return len;
 800f6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3714      	adds	r7, #20
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	4603      	mov	r3, r0
 800f6e0:	6039      	str	r1, [r7, #0]
 800f6e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	2212      	movs	r2, #18
 800f6e8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800f6ea:	4b03      	ldr	r3, [pc, #12]	@ (800f6f8 <USBD_Class_DeviceDescriptor+0x20>)
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	370c      	adds	r7, #12
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr
 800f6f8:	200000ec 	.word	0x200000ec

0800f6fc <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b083      	sub	sp, #12
 800f700:	af00      	add	r7, sp, #0
 800f702:	4603      	mov	r3, r0
 800f704:	6039      	str	r1, [r7, #0]
 800f706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	2204      	movs	r2, #4
 800f70c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800f70e:	4b03      	ldr	r3, [pc, #12]	@ (800f71c <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800f710:	4618      	mov	r0, r3
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr
 800f71c:	20000100 	.word	0x20000100

0800f720 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	4603      	mov	r3, r0
 800f728:	6039      	str	r1, [r7, #0]
 800f72a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f72c:	79fb      	ldrb	r3, [r7, #7]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d105      	bne.n	800f73e <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800f732:	683a      	ldr	r2, [r7, #0]
 800f734:	4907      	ldr	r1, [pc, #28]	@ (800f754 <USBD_Class_ProductStrDescriptor+0x34>)
 800f736:	4808      	ldr	r0, [pc, #32]	@ (800f758 <USBD_Class_ProductStrDescriptor+0x38>)
 800f738:	f7ff ff6e 	bl	800f618 <USBD_GetString>
 800f73c:	e004      	b.n	800f748 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800f73e:	683a      	ldr	r2, [r7, #0]
 800f740:	4904      	ldr	r1, [pc, #16]	@ (800f754 <USBD_Class_ProductStrDescriptor+0x34>)
 800f742:	4805      	ldr	r0, [pc, #20]	@ (800f758 <USBD_Class_ProductStrDescriptor+0x38>)
 800f744:	f7ff ff68 	bl	800f618 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f748:	4b02      	ldr	r3, [pc, #8]	@ (800f754 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3708      	adds	r7, #8
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	20001078 	.word	0x20001078
 800f758:	080103a8 	.word	0x080103a8

0800f75c <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	4603      	mov	r3, r0
 800f764:	6039      	str	r1, [r7, #0]
 800f766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f768:	683a      	ldr	r2, [r7, #0]
 800f76a:	4904      	ldr	r1, [pc, #16]	@ (800f77c <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800f76c:	4804      	ldr	r0, [pc, #16]	@ (800f780 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800f76e:	f7ff ff53 	bl	800f618 <USBD_GetString>
  return USBD_StrDesc;
 800f772:	4b02      	ldr	r3, [pc, #8]	@ (800f77c <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800f774:	4618      	mov	r0, r3
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}
 800f77c:	20001078 	.word	0x20001078
 800f780:	080103c0 	.word	0x080103c0

0800f784 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	4603      	mov	r3, r0
 800f78c:	6039      	str	r1, [r7, #0]
 800f78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	221a      	movs	r2, #26
 800f794:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800f796:	f000 f843 	bl	800f820 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800f79a:	4b02      	ldr	r3, [pc, #8]	@ (800f7a4 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3708      	adds	r7, #8
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	20000104 	.word	0x20000104

0800f7a8 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	6039      	str	r1, [r7, #0]
 800f7b2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f7b4:	79fb      	ldrb	r3, [r7, #7]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d105      	bne.n	800f7c6 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800f7ba:	683a      	ldr	r2, [r7, #0]
 800f7bc:	4907      	ldr	r1, [pc, #28]	@ (800f7dc <USBD_Class_ConfigStrDescriptor+0x34>)
 800f7be:	4808      	ldr	r0, [pc, #32]	@ (800f7e0 <USBD_Class_ConfigStrDescriptor+0x38>)
 800f7c0:	f7ff ff2a 	bl	800f618 <USBD_GetString>
 800f7c4:	e004      	b.n	800f7d0 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800f7c6:	683a      	ldr	r2, [r7, #0]
 800f7c8:	4904      	ldr	r1, [pc, #16]	@ (800f7dc <USBD_Class_ConfigStrDescriptor+0x34>)
 800f7ca:	4805      	ldr	r0, [pc, #20]	@ (800f7e0 <USBD_Class_ConfigStrDescriptor+0x38>)
 800f7cc:	f7ff ff24 	bl	800f618 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f7d0:	4b02      	ldr	r3, [pc, #8]	@ (800f7dc <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3708      	adds	r7, #8
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	20001078 	.word	0x20001078
 800f7e0:	080103d4 	.word	0x080103d4

0800f7e4 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b082      	sub	sp, #8
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	6039      	str	r1, [r7, #0]
 800f7ee:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f7f0:	79fb      	ldrb	r3, [r7, #7]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d105      	bne.n	800f802 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800f7f6:	683a      	ldr	r2, [r7, #0]
 800f7f8:	4907      	ldr	r1, [pc, #28]	@ (800f818 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800f7fa:	4808      	ldr	r0, [pc, #32]	@ (800f81c <USBD_Class_InterfaceStrDescriptor+0x38>)
 800f7fc:	f7ff ff0c 	bl	800f618 <USBD_GetString>
 800f800:	e004      	b.n	800f80c <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800f802:	683a      	ldr	r2, [r7, #0]
 800f804:	4904      	ldr	r1, [pc, #16]	@ (800f818 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800f806:	4805      	ldr	r0, [pc, #20]	@ (800f81c <USBD_Class_InterfaceStrDescriptor+0x38>)
 800f808:	f7ff ff06 	bl	800f618 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f80c:	4b02      	ldr	r3, [pc, #8]	@ (800f818 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3708      	adds	r7, #8
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
 800f816:	bf00      	nop
 800f818:	20001078 	.word	0x20001078
 800f81c:	080103e0 	.word	0x080103e0

0800f820 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b084      	sub	sp, #16
 800f824:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800f826:	4b0f      	ldr	r3, [pc, #60]	@ (800f864 <Get_SerialNum+0x44>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800f82c:	4b0e      	ldr	r3, [pc, #56]	@ (800f868 <Get_SerialNum+0x48>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800f832:	4b0e      	ldr	r3, [pc, #56]	@ (800f86c <Get_SerialNum+0x4c>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f838:	68fa      	ldr	r2, [r7, #12]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4413      	add	r3, r2
 800f83e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d009      	beq.n	800f85a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800f846:	2208      	movs	r2, #8
 800f848:	4909      	ldr	r1, [pc, #36]	@ (800f870 <Get_SerialNum+0x50>)
 800f84a:	68f8      	ldr	r0, [r7, #12]
 800f84c:	f000 f814 	bl	800f878 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800f850:	2204      	movs	r2, #4
 800f852:	4908      	ldr	r1, [pc, #32]	@ (800f874 <Get_SerialNum+0x54>)
 800f854:	68b8      	ldr	r0, [r7, #8]
 800f856:	f000 f80f 	bl	800f878 <IntToUnicode>
  }
}
 800f85a:	bf00      	nop
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	08fff800 	.word	0x08fff800
 800f868:	08fff804 	.word	0x08fff804
 800f86c:	08fff808 	.word	0x08fff808
 800f870:	20000106 	.word	0x20000106
 800f874:	20000116 	.word	0x20000116

0800f878 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800f878:	b480      	push	{r7}
 800f87a:	b087      	sub	sp, #28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	60f8      	str	r0, [r7, #12]
 800f880:	60b9      	str	r1, [r7, #8]
 800f882:	4613      	mov	r3, r2
 800f884:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800f886:	2300      	movs	r3, #0
 800f888:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800f88a:	2300      	movs	r3, #0
 800f88c:	75fb      	strb	r3, [r7, #23]
 800f88e:	e025      	b.n	800f8dc <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	0f1b      	lsrs	r3, r3, #28
 800f894:	2b09      	cmp	r3, #9
 800f896:	d80a      	bhi.n	800f8ae <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	0f1b      	lsrs	r3, r3, #28
 800f89c:	b2da      	uxtb	r2, r3
 800f89e:	7dfb      	ldrb	r3, [r7, #23]
 800f8a0:	005b      	lsls	r3, r3, #1
 800f8a2:	68b9      	ldr	r1, [r7, #8]
 800f8a4:	440b      	add	r3, r1
 800f8a6:	3230      	adds	r2, #48	@ 0x30
 800f8a8:	b2d2      	uxtb	r2, r2
 800f8aa:	701a      	strb	r2, [r3, #0]
 800f8ac:	e009      	b.n	800f8c2 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	0f1b      	lsrs	r3, r3, #28
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	7dfb      	ldrb	r3, [r7, #23]
 800f8b6:	005b      	lsls	r3, r3, #1
 800f8b8:	68b9      	ldr	r1, [r7, #8]
 800f8ba:	440b      	add	r3, r1
 800f8bc:	3237      	adds	r2, #55	@ 0x37
 800f8be:	b2d2      	uxtb	r2, r2
 800f8c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	011b      	lsls	r3, r3, #4
 800f8c6:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800f8c8:	7dfb      	ldrb	r3, [r7, #23]
 800f8ca:	005b      	lsls	r3, r3, #1
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	68ba      	ldr	r2, [r7, #8]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800f8d6:	7dfb      	ldrb	r3, [r7, #23]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	75fb      	strb	r3, [r7, #23]
 800f8dc:	7dfa      	ldrb	r2, [r7, #23]
 800f8de:	79fb      	ldrb	r3, [r7, #7]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d3d5      	bcc.n	800f890 <IntToUnicode+0x18>
  }
}
 800f8e4:	bf00      	nop
 800f8e6:	bf00      	nop
 800f8e8:	371c      	adds	r7, #28
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr

0800f8f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f8f2:	b580      	push	{r7, lr}
 800f8f4:	b084      	sub	sp, #16
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	60f8      	str	r0, [r7, #12]
 800f8fa:	60b9      	str	r1, [r7, #8]
 800f8fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2202      	movs	r2, #2
 800f902:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	68ba      	ldr	r2, [r7, #8]
 800f916:	2100      	movs	r1, #0
 800f918:	68f8      	ldr	r0, [r7, #12]
 800f91a:	f7fe fca0 	bl	800e25e <USBD_LL_Transmit>

  return USBD_OK;
 800f91e:	2300      	movs	r3, #0
}
 800f920:	4618      	mov	r0, r3
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	2100      	movs	r1, #0
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f7fe fc8f 	bl	800e25e <USBD_LL_Transmit>

  return USBD_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3710      	adds	r7, #16
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b084      	sub	sp, #16
 800f94e:	af00      	add	r7, sp, #0
 800f950:	60f8      	str	r0, [r7, #12]
 800f952:	60b9      	str	r1, [r7, #8]
 800f954:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2203      	movs	r2, #3
 800f95a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	687a      	ldr	r2, [r7, #4]
 800f962:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	68ba      	ldr	r2, [r7, #8]
 800f972:	2100      	movs	r1, #0
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	f7fe fc8d 	bl	800e294 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f97a:	2300      	movs	r3, #0
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	68ba      	ldr	r2, [r7, #8]
 800f994:	2100      	movs	r1, #0
 800f996:	68f8      	ldr	r0, [r7, #12]
 800f998:	f7fe fc7c 	bl	800e294 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f99c:	2300      	movs	r3, #0
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b082      	sub	sp, #8
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2204      	movs	r2, #4
 800f9b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	2100      	movs	r1, #0
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f7fe fc4e 	bl	800e25e <USBD_LL_Transmit>

  return USBD_OK;
 800f9c2:	2300      	movs	r3, #0
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3708      	adds	r7, #8
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}

0800f9cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2205      	movs	r2, #5
 800f9d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f9dc:	2300      	movs	r3, #0
 800f9de:	2200      	movs	r2, #0
 800f9e0:	2100      	movs	r1, #0
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f7fe fc56 	bl	800e294 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f9e8:	2300      	movs	r3, #0
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3708      	adds	r7, #8
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
	...

0800f9f4 <sniprintf>:
 800f9f4:	b40c      	push	{r2, r3}
 800f9f6:	4b18      	ldr	r3, [pc, #96]	@ (800fa58 <sniprintf+0x64>)
 800f9f8:	b530      	push	{r4, r5, lr}
 800f9fa:	1e0c      	subs	r4, r1, #0
 800f9fc:	b09d      	sub	sp, #116	@ 0x74
 800f9fe:	681d      	ldr	r5, [r3, #0]
 800fa00:	da08      	bge.n	800fa14 <sniprintf+0x20>
 800fa02:	238b      	movs	r3, #139	@ 0x8b
 800fa04:	f04f 30ff 	mov.w	r0, #4294967295
 800fa08:	602b      	str	r3, [r5, #0]
 800fa0a:	b01d      	add	sp, #116	@ 0x74
 800fa0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa10:	b002      	add	sp, #8
 800fa12:	4770      	bx	lr
 800fa14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fa18:	9002      	str	r0, [sp, #8]
 800fa1a:	9006      	str	r0, [sp, #24]
 800fa1c:	a902      	add	r1, sp, #8
 800fa1e:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fa22:	bf14      	ite	ne
 800fa24:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fa28:	4623      	moveq	r3, r4
 800fa2a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	9304      	str	r3, [sp, #16]
 800fa30:	9307      	str	r3, [sp, #28]
 800fa32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fa36:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fa3a:	ab21      	add	r3, sp, #132	@ 0x84
 800fa3c:	9301      	str	r3, [sp, #4]
 800fa3e:	f000 f9a3 	bl	800fd88 <_svfiprintf_r>
 800fa42:	1c43      	adds	r3, r0, #1
 800fa44:	bfbc      	itt	lt
 800fa46:	238b      	movlt	r3, #139	@ 0x8b
 800fa48:	602b      	strlt	r3, [r5, #0]
 800fa4a:	2c00      	cmp	r4, #0
 800fa4c:	d0dd      	beq.n	800fa0a <sniprintf+0x16>
 800fa4e:	9b02      	ldr	r3, [sp, #8]
 800fa50:	2200      	movs	r2, #0
 800fa52:	701a      	strb	r2, [r3, #0]
 800fa54:	e7d9      	b.n	800fa0a <sniprintf+0x16>
 800fa56:	bf00      	nop
 800fa58:	20000120 	.word	0x20000120

0800fa5c <memset>:
 800fa5c:	4402      	add	r2, r0
 800fa5e:	4603      	mov	r3, r0
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d100      	bne.n	800fa66 <memset+0xa>
 800fa64:	4770      	bx	lr
 800fa66:	f803 1b01 	strb.w	r1, [r3], #1
 800fa6a:	e7f9      	b.n	800fa60 <memset+0x4>

0800fa6c <__errno>:
 800fa6c:	4b01      	ldr	r3, [pc, #4]	@ (800fa74 <__errno+0x8>)
 800fa6e:	6818      	ldr	r0, [r3, #0]
 800fa70:	4770      	bx	lr
 800fa72:	bf00      	nop
 800fa74:	20000120 	.word	0x20000120

0800fa78 <__libc_init_array>:
 800fa78:	b570      	push	{r4, r5, r6, lr}
 800fa7a:	4d0d      	ldr	r5, [pc, #52]	@ (800fab0 <__libc_init_array+0x38>)
 800fa7c:	2600      	movs	r6, #0
 800fa7e:	4c0d      	ldr	r4, [pc, #52]	@ (800fab4 <__libc_init_array+0x3c>)
 800fa80:	1b64      	subs	r4, r4, r5
 800fa82:	10a4      	asrs	r4, r4, #2
 800fa84:	42a6      	cmp	r6, r4
 800fa86:	d109      	bne.n	800fa9c <__libc_init_array+0x24>
 800fa88:	4d0b      	ldr	r5, [pc, #44]	@ (800fab8 <__libc_init_array+0x40>)
 800fa8a:	2600      	movs	r6, #0
 800fa8c:	4c0b      	ldr	r4, [pc, #44]	@ (800fabc <__libc_init_array+0x44>)
 800fa8e:	f000 fc77 	bl	8010380 <_init>
 800fa92:	1b64      	subs	r4, r4, r5
 800fa94:	10a4      	asrs	r4, r4, #2
 800fa96:	42a6      	cmp	r6, r4
 800fa98:	d105      	bne.n	800faa6 <__libc_init_array+0x2e>
 800fa9a:	bd70      	pop	{r4, r5, r6, pc}
 800fa9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800faa0:	3601      	adds	r6, #1
 800faa2:	4798      	blx	r3
 800faa4:	e7ee      	b.n	800fa84 <__libc_init_array+0xc>
 800faa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800faaa:	3601      	adds	r6, #1
 800faac:	4798      	blx	r3
 800faae:	e7f2      	b.n	800fa96 <__libc_init_array+0x1e>
 800fab0:	08010478 	.word	0x08010478
 800fab4:	08010478 	.word	0x08010478
 800fab8:	08010478 	.word	0x08010478
 800fabc:	0801047c 	.word	0x0801047c

0800fac0 <__retarget_lock_acquire_recursive>:
 800fac0:	4770      	bx	lr

0800fac2 <__retarget_lock_release_recursive>:
 800fac2:	4770      	bx	lr

0800fac4 <memcpy>:
 800fac4:	440a      	add	r2, r1
 800fac6:	1e43      	subs	r3, r0, #1
 800fac8:	4291      	cmp	r1, r2
 800faca:	d100      	bne.n	800face <memcpy+0xa>
 800facc:	4770      	bx	lr
 800face:	b510      	push	{r4, lr}
 800fad0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fad4:	4291      	cmp	r1, r2
 800fad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fada:	d1f9      	bne.n	800fad0 <memcpy+0xc>
 800fadc:	bd10      	pop	{r4, pc}
	...

0800fae0 <_free_r>:
 800fae0:	b538      	push	{r3, r4, r5, lr}
 800fae2:	4605      	mov	r5, r0
 800fae4:	2900      	cmp	r1, #0
 800fae6:	d041      	beq.n	800fb6c <_free_r+0x8c>
 800fae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faec:	1f0c      	subs	r4, r1, #4
 800faee:	2b00      	cmp	r3, #0
 800faf0:	bfb8      	it	lt
 800faf2:	18e4      	addlt	r4, r4, r3
 800faf4:	f000 f8e0 	bl	800fcb8 <__malloc_lock>
 800faf8:	4a1d      	ldr	r2, [pc, #116]	@ (800fb70 <_free_r+0x90>)
 800fafa:	6813      	ldr	r3, [r2, #0]
 800fafc:	b933      	cbnz	r3, 800fb0c <_free_r+0x2c>
 800fafe:	6063      	str	r3, [r4, #4]
 800fb00:	6014      	str	r4, [r2, #0]
 800fb02:	4628      	mov	r0, r5
 800fb04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb08:	f000 b8dc 	b.w	800fcc4 <__malloc_unlock>
 800fb0c:	42a3      	cmp	r3, r4
 800fb0e:	d908      	bls.n	800fb22 <_free_r+0x42>
 800fb10:	6820      	ldr	r0, [r4, #0]
 800fb12:	1821      	adds	r1, r4, r0
 800fb14:	428b      	cmp	r3, r1
 800fb16:	bf01      	itttt	eq
 800fb18:	6819      	ldreq	r1, [r3, #0]
 800fb1a:	685b      	ldreq	r3, [r3, #4]
 800fb1c:	1809      	addeq	r1, r1, r0
 800fb1e:	6021      	streq	r1, [r4, #0]
 800fb20:	e7ed      	b.n	800fafe <_free_r+0x1e>
 800fb22:	461a      	mov	r2, r3
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	b10b      	cbz	r3, 800fb2c <_free_r+0x4c>
 800fb28:	42a3      	cmp	r3, r4
 800fb2a:	d9fa      	bls.n	800fb22 <_free_r+0x42>
 800fb2c:	6811      	ldr	r1, [r2, #0]
 800fb2e:	1850      	adds	r0, r2, r1
 800fb30:	42a0      	cmp	r0, r4
 800fb32:	d10b      	bne.n	800fb4c <_free_r+0x6c>
 800fb34:	6820      	ldr	r0, [r4, #0]
 800fb36:	4401      	add	r1, r0
 800fb38:	1850      	adds	r0, r2, r1
 800fb3a:	6011      	str	r1, [r2, #0]
 800fb3c:	4283      	cmp	r3, r0
 800fb3e:	d1e0      	bne.n	800fb02 <_free_r+0x22>
 800fb40:	6818      	ldr	r0, [r3, #0]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	4408      	add	r0, r1
 800fb46:	6053      	str	r3, [r2, #4]
 800fb48:	6010      	str	r0, [r2, #0]
 800fb4a:	e7da      	b.n	800fb02 <_free_r+0x22>
 800fb4c:	d902      	bls.n	800fb54 <_free_r+0x74>
 800fb4e:	230c      	movs	r3, #12
 800fb50:	602b      	str	r3, [r5, #0]
 800fb52:	e7d6      	b.n	800fb02 <_free_r+0x22>
 800fb54:	6820      	ldr	r0, [r4, #0]
 800fb56:	1821      	adds	r1, r4, r0
 800fb58:	428b      	cmp	r3, r1
 800fb5a:	bf02      	ittt	eq
 800fb5c:	6819      	ldreq	r1, [r3, #0]
 800fb5e:	685b      	ldreq	r3, [r3, #4]
 800fb60:	1809      	addeq	r1, r1, r0
 800fb62:	6063      	str	r3, [r4, #4]
 800fb64:	bf08      	it	eq
 800fb66:	6021      	streq	r1, [r4, #0]
 800fb68:	6054      	str	r4, [r2, #4]
 800fb6a:	e7ca      	b.n	800fb02 <_free_r+0x22>
 800fb6c:	bd38      	pop	{r3, r4, r5, pc}
 800fb6e:	bf00      	nop
 800fb70:	200012bc 	.word	0x200012bc

0800fb74 <sbrk_aligned>:
 800fb74:	b570      	push	{r4, r5, r6, lr}
 800fb76:	4e0f      	ldr	r6, [pc, #60]	@ (800fbb4 <sbrk_aligned+0x40>)
 800fb78:	460c      	mov	r4, r1
 800fb7a:	4605      	mov	r5, r0
 800fb7c:	6831      	ldr	r1, [r6, #0]
 800fb7e:	b911      	cbnz	r1, 800fb86 <sbrk_aligned+0x12>
 800fb80:	f000 fbaa 	bl	80102d8 <_sbrk_r>
 800fb84:	6030      	str	r0, [r6, #0]
 800fb86:	4621      	mov	r1, r4
 800fb88:	4628      	mov	r0, r5
 800fb8a:	f000 fba5 	bl	80102d8 <_sbrk_r>
 800fb8e:	1c43      	adds	r3, r0, #1
 800fb90:	d103      	bne.n	800fb9a <sbrk_aligned+0x26>
 800fb92:	f04f 34ff 	mov.w	r4, #4294967295
 800fb96:	4620      	mov	r0, r4
 800fb98:	bd70      	pop	{r4, r5, r6, pc}
 800fb9a:	1cc4      	adds	r4, r0, #3
 800fb9c:	f024 0403 	bic.w	r4, r4, #3
 800fba0:	42a0      	cmp	r0, r4
 800fba2:	d0f8      	beq.n	800fb96 <sbrk_aligned+0x22>
 800fba4:	1a21      	subs	r1, r4, r0
 800fba6:	4628      	mov	r0, r5
 800fba8:	f000 fb96 	bl	80102d8 <_sbrk_r>
 800fbac:	3001      	adds	r0, #1
 800fbae:	d1f2      	bne.n	800fb96 <sbrk_aligned+0x22>
 800fbb0:	e7ef      	b.n	800fb92 <sbrk_aligned+0x1e>
 800fbb2:	bf00      	nop
 800fbb4:	200012b8 	.word	0x200012b8

0800fbb8 <_malloc_r>:
 800fbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbbc:	1ccd      	adds	r5, r1, #3
 800fbbe:	4606      	mov	r6, r0
 800fbc0:	f025 0503 	bic.w	r5, r5, #3
 800fbc4:	3508      	adds	r5, #8
 800fbc6:	2d0c      	cmp	r5, #12
 800fbc8:	bf38      	it	cc
 800fbca:	250c      	movcc	r5, #12
 800fbcc:	2d00      	cmp	r5, #0
 800fbce:	db01      	blt.n	800fbd4 <_malloc_r+0x1c>
 800fbd0:	42a9      	cmp	r1, r5
 800fbd2:	d904      	bls.n	800fbde <_malloc_r+0x26>
 800fbd4:	230c      	movs	r3, #12
 800fbd6:	6033      	str	r3, [r6, #0]
 800fbd8:	2000      	movs	r0, #0
 800fbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fcb4 <_malloc_r+0xfc>
 800fbe2:	f000 f869 	bl	800fcb8 <__malloc_lock>
 800fbe6:	f8d8 3000 	ldr.w	r3, [r8]
 800fbea:	461c      	mov	r4, r3
 800fbec:	bb44      	cbnz	r4, 800fc40 <_malloc_r+0x88>
 800fbee:	4629      	mov	r1, r5
 800fbf0:	4630      	mov	r0, r6
 800fbf2:	f7ff ffbf 	bl	800fb74 <sbrk_aligned>
 800fbf6:	1c43      	adds	r3, r0, #1
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	d158      	bne.n	800fcae <_malloc_r+0xf6>
 800fbfc:	f8d8 4000 	ldr.w	r4, [r8]
 800fc00:	4627      	mov	r7, r4
 800fc02:	2f00      	cmp	r7, #0
 800fc04:	d143      	bne.n	800fc8e <_malloc_r+0xd6>
 800fc06:	2c00      	cmp	r4, #0
 800fc08:	d04b      	beq.n	800fca2 <_malloc_r+0xea>
 800fc0a:	6823      	ldr	r3, [r4, #0]
 800fc0c:	4639      	mov	r1, r7
 800fc0e:	4630      	mov	r0, r6
 800fc10:	eb04 0903 	add.w	r9, r4, r3
 800fc14:	f000 fb60 	bl	80102d8 <_sbrk_r>
 800fc18:	4581      	cmp	r9, r0
 800fc1a:	d142      	bne.n	800fca2 <_malloc_r+0xea>
 800fc1c:	6821      	ldr	r1, [r4, #0]
 800fc1e:	4630      	mov	r0, r6
 800fc20:	1a6d      	subs	r5, r5, r1
 800fc22:	4629      	mov	r1, r5
 800fc24:	f7ff ffa6 	bl	800fb74 <sbrk_aligned>
 800fc28:	3001      	adds	r0, #1
 800fc2a:	d03a      	beq.n	800fca2 <_malloc_r+0xea>
 800fc2c:	6823      	ldr	r3, [r4, #0]
 800fc2e:	442b      	add	r3, r5
 800fc30:	6023      	str	r3, [r4, #0]
 800fc32:	f8d8 3000 	ldr.w	r3, [r8]
 800fc36:	685a      	ldr	r2, [r3, #4]
 800fc38:	bb62      	cbnz	r2, 800fc94 <_malloc_r+0xdc>
 800fc3a:	f8c8 7000 	str.w	r7, [r8]
 800fc3e:	e00f      	b.n	800fc60 <_malloc_r+0xa8>
 800fc40:	6822      	ldr	r2, [r4, #0]
 800fc42:	1b52      	subs	r2, r2, r5
 800fc44:	d420      	bmi.n	800fc88 <_malloc_r+0xd0>
 800fc46:	2a0b      	cmp	r2, #11
 800fc48:	d917      	bls.n	800fc7a <_malloc_r+0xc2>
 800fc4a:	1961      	adds	r1, r4, r5
 800fc4c:	42a3      	cmp	r3, r4
 800fc4e:	6025      	str	r5, [r4, #0]
 800fc50:	bf18      	it	ne
 800fc52:	6059      	strne	r1, [r3, #4]
 800fc54:	6863      	ldr	r3, [r4, #4]
 800fc56:	bf08      	it	eq
 800fc58:	f8c8 1000 	streq.w	r1, [r8]
 800fc5c:	5162      	str	r2, [r4, r5]
 800fc5e:	604b      	str	r3, [r1, #4]
 800fc60:	4630      	mov	r0, r6
 800fc62:	f000 f82f 	bl	800fcc4 <__malloc_unlock>
 800fc66:	f104 000b 	add.w	r0, r4, #11
 800fc6a:	1d23      	adds	r3, r4, #4
 800fc6c:	f020 0007 	bic.w	r0, r0, #7
 800fc70:	1ac2      	subs	r2, r0, r3
 800fc72:	bf1c      	itt	ne
 800fc74:	1a1b      	subne	r3, r3, r0
 800fc76:	50a3      	strne	r3, [r4, r2]
 800fc78:	e7af      	b.n	800fbda <_malloc_r+0x22>
 800fc7a:	6862      	ldr	r2, [r4, #4]
 800fc7c:	42a3      	cmp	r3, r4
 800fc7e:	bf0c      	ite	eq
 800fc80:	f8c8 2000 	streq.w	r2, [r8]
 800fc84:	605a      	strne	r2, [r3, #4]
 800fc86:	e7eb      	b.n	800fc60 <_malloc_r+0xa8>
 800fc88:	4623      	mov	r3, r4
 800fc8a:	6864      	ldr	r4, [r4, #4]
 800fc8c:	e7ae      	b.n	800fbec <_malloc_r+0x34>
 800fc8e:	463c      	mov	r4, r7
 800fc90:	687f      	ldr	r7, [r7, #4]
 800fc92:	e7b6      	b.n	800fc02 <_malloc_r+0x4a>
 800fc94:	461a      	mov	r2, r3
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	42a3      	cmp	r3, r4
 800fc9a:	d1fb      	bne.n	800fc94 <_malloc_r+0xdc>
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	6053      	str	r3, [r2, #4]
 800fca0:	e7de      	b.n	800fc60 <_malloc_r+0xa8>
 800fca2:	230c      	movs	r3, #12
 800fca4:	4630      	mov	r0, r6
 800fca6:	6033      	str	r3, [r6, #0]
 800fca8:	f000 f80c 	bl	800fcc4 <__malloc_unlock>
 800fcac:	e794      	b.n	800fbd8 <_malloc_r+0x20>
 800fcae:	6005      	str	r5, [r0, #0]
 800fcb0:	e7d6      	b.n	800fc60 <_malloc_r+0xa8>
 800fcb2:	bf00      	nop
 800fcb4:	200012bc 	.word	0x200012bc

0800fcb8 <__malloc_lock>:
 800fcb8:	4801      	ldr	r0, [pc, #4]	@ (800fcc0 <__malloc_lock+0x8>)
 800fcba:	f7ff bf01 	b.w	800fac0 <__retarget_lock_acquire_recursive>
 800fcbe:	bf00      	nop
 800fcc0:	200012b4 	.word	0x200012b4

0800fcc4 <__malloc_unlock>:
 800fcc4:	4801      	ldr	r0, [pc, #4]	@ (800fccc <__malloc_unlock+0x8>)
 800fcc6:	f7ff befc 	b.w	800fac2 <__retarget_lock_release_recursive>
 800fcca:	bf00      	nop
 800fccc:	200012b4 	.word	0x200012b4

0800fcd0 <__ssputs_r>:
 800fcd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcd4:	461f      	mov	r7, r3
 800fcd6:	688e      	ldr	r6, [r1, #8]
 800fcd8:	4682      	mov	sl, r0
 800fcda:	460c      	mov	r4, r1
 800fcdc:	42be      	cmp	r6, r7
 800fcde:	4690      	mov	r8, r2
 800fce0:	680b      	ldr	r3, [r1, #0]
 800fce2:	d82d      	bhi.n	800fd40 <__ssputs_r+0x70>
 800fce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fce8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fcec:	d026      	beq.n	800fd3c <__ssputs_r+0x6c>
 800fcee:	6965      	ldr	r5, [r4, #20]
 800fcf0:	6909      	ldr	r1, [r1, #16]
 800fcf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fcf6:	eba3 0901 	sub.w	r9, r3, r1
 800fcfa:	1c7b      	adds	r3, r7, #1
 800fcfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd00:	444b      	add	r3, r9
 800fd02:	106d      	asrs	r5, r5, #1
 800fd04:	429d      	cmp	r5, r3
 800fd06:	bf38      	it	cc
 800fd08:	461d      	movcc	r5, r3
 800fd0a:	0553      	lsls	r3, r2, #21
 800fd0c:	d527      	bpl.n	800fd5e <__ssputs_r+0x8e>
 800fd0e:	4629      	mov	r1, r5
 800fd10:	f7ff ff52 	bl	800fbb8 <_malloc_r>
 800fd14:	4606      	mov	r6, r0
 800fd16:	b360      	cbz	r0, 800fd72 <__ssputs_r+0xa2>
 800fd18:	464a      	mov	r2, r9
 800fd1a:	6921      	ldr	r1, [r4, #16]
 800fd1c:	f7ff fed2 	bl	800fac4 <memcpy>
 800fd20:	89a3      	ldrh	r3, [r4, #12]
 800fd22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fd26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd2a:	81a3      	strh	r3, [r4, #12]
 800fd2c:	6126      	str	r6, [r4, #16]
 800fd2e:	444e      	add	r6, r9
 800fd30:	6165      	str	r5, [r4, #20]
 800fd32:	eba5 0509 	sub.w	r5, r5, r9
 800fd36:	6026      	str	r6, [r4, #0]
 800fd38:	463e      	mov	r6, r7
 800fd3a:	60a5      	str	r5, [r4, #8]
 800fd3c:	42be      	cmp	r6, r7
 800fd3e:	d900      	bls.n	800fd42 <__ssputs_r+0x72>
 800fd40:	463e      	mov	r6, r7
 800fd42:	4632      	mov	r2, r6
 800fd44:	4641      	mov	r1, r8
 800fd46:	6820      	ldr	r0, [r4, #0]
 800fd48:	f000 faac 	bl	80102a4 <memmove>
 800fd4c:	68a3      	ldr	r3, [r4, #8]
 800fd4e:	2000      	movs	r0, #0
 800fd50:	1b9b      	subs	r3, r3, r6
 800fd52:	60a3      	str	r3, [r4, #8]
 800fd54:	6823      	ldr	r3, [r4, #0]
 800fd56:	4433      	add	r3, r6
 800fd58:	6023      	str	r3, [r4, #0]
 800fd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd5e:	462a      	mov	r2, r5
 800fd60:	f000 fad8 	bl	8010314 <_realloc_r>
 800fd64:	4606      	mov	r6, r0
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d1e0      	bne.n	800fd2c <__ssputs_r+0x5c>
 800fd6a:	6921      	ldr	r1, [r4, #16]
 800fd6c:	4650      	mov	r0, sl
 800fd6e:	f7ff feb7 	bl	800fae0 <_free_r>
 800fd72:	230c      	movs	r3, #12
 800fd74:	f04f 30ff 	mov.w	r0, #4294967295
 800fd78:	f8ca 3000 	str.w	r3, [sl]
 800fd7c:	89a3      	ldrh	r3, [r4, #12]
 800fd7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd82:	81a3      	strh	r3, [r4, #12]
 800fd84:	e7e9      	b.n	800fd5a <__ssputs_r+0x8a>
	...

0800fd88 <_svfiprintf_r>:
 800fd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd8c:	4698      	mov	r8, r3
 800fd8e:	898b      	ldrh	r3, [r1, #12]
 800fd90:	b09d      	sub	sp, #116	@ 0x74
 800fd92:	4607      	mov	r7, r0
 800fd94:	061b      	lsls	r3, r3, #24
 800fd96:	460d      	mov	r5, r1
 800fd98:	4614      	mov	r4, r2
 800fd9a:	d510      	bpl.n	800fdbe <_svfiprintf_r+0x36>
 800fd9c:	690b      	ldr	r3, [r1, #16]
 800fd9e:	b973      	cbnz	r3, 800fdbe <_svfiprintf_r+0x36>
 800fda0:	2140      	movs	r1, #64	@ 0x40
 800fda2:	f7ff ff09 	bl	800fbb8 <_malloc_r>
 800fda6:	6028      	str	r0, [r5, #0]
 800fda8:	6128      	str	r0, [r5, #16]
 800fdaa:	b930      	cbnz	r0, 800fdba <_svfiprintf_r+0x32>
 800fdac:	230c      	movs	r3, #12
 800fdae:	603b      	str	r3, [r7, #0]
 800fdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb4:	b01d      	add	sp, #116	@ 0x74
 800fdb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdba:	2340      	movs	r3, #64	@ 0x40
 800fdbc:	616b      	str	r3, [r5, #20]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdc4:	f04f 0901 	mov.w	r9, #1
 800fdc8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ff6c <_svfiprintf_r+0x1e4>
 800fdcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdce:	2320      	movs	r3, #32
 800fdd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fdd4:	2330      	movs	r3, #48	@ 0x30
 800fdd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fdda:	4623      	mov	r3, r4
 800fddc:	469a      	mov	sl, r3
 800fdde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fde2:	b10a      	cbz	r2, 800fde8 <_svfiprintf_r+0x60>
 800fde4:	2a25      	cmp	r2, #37	@ 0x25
 800fde6:	d1f9      	bne.n	800fddc <_svfiprintf_r+0x54>
 800fde8:	ebba 0b04 	subs.w	fp, sl, r4
 800fdec:	d00b      	beq.n	800fe06 <_svfiprintf_r+0x7e>
 800fdee:	465b      	mov	r3, fp
 800fdf0:	4622      	mov	r2, r4
 800fdf2:	4629      	mov	r1, r5
 800fdf4:	4638      	mov	r0, r7
 800fdf6:	f7ff ff6b 	bl	800fcd0 <__ssputs_r>
 800fdfa:	3001      	adds	r0, #1
 800fdfc:	f000 80a7 	beq.w	800ff4e <_svfiprintf_r+0x1c6>
 800fe00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe02:	445a      	add	r2, fp
 800fe04:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe06:	f89a 3000 	ldrb.w	r3, [sl]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	f000 809f 	beq.w	800ff4e <_svfiprintf_r+0x1c6>
 800fe10:	2300      	movs	r3, #0
 800fe12:	f04f 32ff 	mov.w	r2, #4294967295
 800fe16:	f10a 0a01 	add.w	sl, sl, #1
 800fe1a:	9304      	str	r3, [sp, #16]
 800fe1c:	9307      	str	r3, [sp, #28]
 800fe1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fe22:	931a      	str	r3, [sp, #104]	@ 0x68
 800fe24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe28:	4654      	mov	r4, sl
 800fe2a:	2205      	movs	r2, #5
 800fe2c:	484f      	ldr	r0, [pc, #316]	@ (800ff6c <_svfiprintf_r+0x1e4>)
 800fe2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe32:	f000 fa61 	bl	80102f8 <memchr>
 800fe36:	9a04      	ldr	r2, [sp, #16]
 800fe38:	b9d8      	cbnz	r0, 800fe72 <_svfiprintf_r+0xea>
 800fe3a:	06d0      	lsls	r0, r2, #27
 800fe3c:	bf44      	itt	mi
 800fe3e:	2320      	movmi	r3, #32
 800fe40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe44:	0711      	lsls	r1, r2, #28
 800fe46:	bf44      	itt	mi
 800fe48:	232b      	movmi	r3, #43	@ 0x2b
 800fe4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe4e:	f89a 3000 	ldrb.w	r3, [sl]
 800fe52:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe54:	d015      	beq.n	800fe82 <_svfiprintf_r+0xfa>
 800fe56:	9a07      	ldr	r2, [sp, #28]
 800fe58:	4654      	mov	r4, sl
 800fe5a:	2000      	movs	r0, #0
 800fe5c:	f04f 0c0a 	mov.w	ip, #10
 800fe60:	4621      	mov	r1, r4
 800fe62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe66:	3b30      	subs	r3, #48	@ 0x30
 800fe68:	2b09      	cmp	r3, #9
 800fe6a:	d94b      	bls.n	800ff04 <_svfiprintf_r+0x17c>
 800fe6c:	b1b0      	cbz	r0, 800fe9c <_svfiprintf_r+0x114>
 800fe6e:	9207      	str	r2, [sp, #28]
 800fe70:	e014      	b.n	800fe9c <_svfiprintf_r+0x114>
 800fe72:	eba0 0308 	sub.w	r3, r0, r8
 800fe76:	46a2      	mov	sl, r4
 800fe78:	fa09 f303 	lsl.w	r3, r9, r3
 800fe7c:	4313      	orrs	r3, r2
 800fe7e:	9304      	str	r3, [sp, #16]
 800fe80:	e7d2      	b.n	800fe28 <_svfiprintf_r+0xa0>
 800fe82:	9b03      	ldr	r3, [sp, #12]
 800fe84:	1d19      	adds	r1, r3, #4
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	9103      	str	r1, [sp, #12]
 800fe8c:	bfbb      	ittet	lt
 800fe8e:	425b      	neglt	r3, r3
 800fe90:	f042 0202 	orrlt.w	r2, r2, #2
 800fe94:	9307      	strge	r3, [sp, #28]
 800fe96:	9307      	strlt	r3, [sp, #28]
 800fe98:	bfb8      	it	lt
 800fe9a:	9204      	strlt	r2, [sp, #16]
 800fe9c:	7823      	ldrb	r3, [r4, #0]
 800fe9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800fea0:	d10a      	bne.n	800feb8 <_svfiprintf_r+0x130>
 800fea2:	7863      	ldrb	r3, [r4, #1]
 800fea4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fea6:	d132      	bne.n	800ff0e <_svfiprintf_r+0x186>
 800fea8:	9b03      	ldr	r3, [sp, #12]
 800feaa:	3402      	adds	r4, #2
 800feac:	1d1a      	adds	r2, r3, #4
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800feb4:	9203      	str	r2, [sp, #12]
 800feb6:	9305      	str	r3, [sp, #20]
 800feb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ff7c <_svfiprintf_r+0x1f4>
 800febc:	2203      	movs	r2, #3
 800febe:	7821      	ldrb	r1, [r4, #0]
 800fec0:	4650      	mov	r0, sl
 800fec2:	f000 fa19 	bl	80102f8 <memchr>
 800fec6:	b138      	cbz	r0, 800fed8 <_svfiprintf_r+0x150>
 800fec8:	eba0 000a 	sub.w	r0, r0, sl
 800fecc:	2240      	movs	r2, #64	@ 0x40
 800fece:	9b04      	ldr	r3, [sp, #16]
 800fed0:	3401      	adds	r4, #1
 800fed2:	4082      	lsls	r2, r0
 800fed4:	4313      	orrs	r3, r2
 800fed6:	9304      	str	r3, [sp, #16]
 800fed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fedc:	2206      	movs	r2, #6
 800fede:	4824      	ldr	r0, [pc, #144]	@ (800ff70 <_svfiprintf_r+0x1e8>)
 800fee0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fee4:	f000 fa08 	bl	80102f8 <memchr>
 800fee8:	2800      	cmp	r0, #0
 800feea:	d036      	beq.n	800ff5a <_svfiprintf_r+0x1d2>
 800feec:	4b21      	ldr	r3, [pc, #132]	@ (800ff74 <_svfiprintf_r+0x1ec>)
 800feee:	bb1b      	cbnz	r3, 800ff38 <_svfiprintf_r+0x1b0>
 800fef0:	9b03      	ldr	r3, [sp, #12]
 800fef2:	3307      	adds	r3, #7
 800fef4:	f023 0307 	bic.w	r3, r3, #7
 800fef8:	3308      	adds	r3, #8
 800fefa:	9303      	str	r3, [sp, #12]
 800fefc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fefe:	4433      	add	r3, r6
 800ff00:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff02:	e76a      	b.n	800fdda <_svfiprintf_r+0x52>
 800ff04:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff08:	460c      	mov	r4, r1
 800ff0a:	2001      	movs	r0, #1
 800ff0c:	e7a8      	b.n	800fe60 <_svfiprintf_r+0xd8>
 800ff0e:	2300      	movs	r3, #0
 800ff10:	3401      	adds	r4, #1
 800ff12:	f04f 0c0a 	mov.w	ip, #10
 800ff16:	4619      	mov	r1, r3
 800ff18:	9305      	str	r3, [sp, #20]
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff20:	3a30      	subs	r2, #48	@ 0x30
 800ff22:	2a09      	cmp	r2, #9
 800ff24:	d903      	bls.n	800ff2e <_svfiprintf_r+0x1a6>
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d0c6      	beq.n	800feb8 <_svfiprintf_r+0x130>
 800ff2a:	9105      	str	r1, [sp, #20]
 800ff2c:	e7c4      	b.n	800feb8 <_svfiprintf_r+0x130>
 800ff2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff32:	4604      	mov	r4, r0
 800ff34:	2301      	movs	r3, #1
 800ff36:	e7f0      	b.n	800ff1a <_svfiprintf_r+0x192>
 800ff38:	ab03      	add	r3, sp, #12
 800ff3a:	462a      	mov	r2, r5
 800ff3c:	a904      	add	r1, sp, #16
 800ff3e:	4638      	mov	r0, r7
 800ff40:	9300      	str	r3, [sp, #0]
 800ff42:	4b0d      	ldr	r3, [pc, #52]	@ (800ff78 <_svfiprintf_r+0x1f0>)
 800ff44:	f3af 8000 	nop.w
 800ff48:	1c42      	adds	r2, r0, #1
 800ff4a:	4606      	mov	r6, r0
 800ff4c:	d1d6      	bne.n	800fefc <_svfiprintf_r+0x174>
 800ff4e:	89ab      	ldrh	r3, [r5, #12]
 800ff50:	065b      	lsls	r3, r3, #25
 800ff52:	f53f af2d 	bmi.w	800fdb0 <_svfiprintf_r+0x28>
 800ff56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff58:	e72c      	b.n	800fdb4 <_svfiprintf_r+0x2c>
 800ff5a:	ab03      	add	r3, sp, #12
 800ff5c:	462a      	mov	r2, r5
 800ff5e:	a904      	add	r1, sp, #16
 800ff60:	4638      	mov	r0, r7
 800ff62:	9300      	str	r3, [sp, #0]
 800ff64:	4b04      	ldr	r3, [pc, #16]	@ (800ff78 <_svfiprintf_r+0x1f0>)
 800ff66:	f000 f87d 	bl	8010064 <_printf_i>
 800ff6a:	e7ed      	b.n	800ff48 <_svfiprintf_r+0x1c0>
 800ff6c:	0801043c 	.word	0x0801043c
 800ff70:	08010446 	.word	0x08010446
 800ff74:	00000000 	.word	0x00000000
 800ff78:	0800fcd1 	.word	0x0800fcd1
 800ff7c:	08010442 	.word	0x08010442

0800ff80 <_printf_common>:
 800ff80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff84:	4616      	mov	r6, r2
 800ff86:	4698      	mov	r8, r3
 800ff88:	688a      	ldr	r2, [r1, #8]
 800ff8a:	4607      	mov	r7, r0
 800ff8c:	690b      	ldr	r3, [r1, #16]
 800ff8e:	460c      	mov	r4, r1
 800ff90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ff94:	4293      	cmp	r3, r2
 800ff96:	bfb8      	it	lt
 800ff98:	4613      	movlt	r3, r2
 800ff9a:	6033      	str	r3, [r6, #0]
 800ff9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ffa0:	b10a      	cbz	r2, 800ffa6 <_printf_common+0x26>
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	6033      	str	r3, [r6, #0]
 800ffa6:	6823      	ldr	r3, [r4, #0]
 800ffa8:	0699      	lsls	r1, r3, #26
 800ffaa:	bf42      	ittt	mi
 800ffac:	6833      	ldrmi	r3, [r6, #0]
 800ffae:	3302      	addmi	r3, #2
 800ffb0:	6033      	strmi	r3, [r6, #0]
 800ffb2:	6825      	ldr	r5, [r4, #0]
 800ffb4:	f015 0506 	ands.w	r5, r5, #6
 800ffb8:	d106      	bne.n	800ffc8 <_printf_common+0x48>
 800ffba:	f104 0a19 	add.w	sl, r4, #25
 800ffbe:	68e3      	ldr	r3, [r4, #12]
 800ffc0:	6832      	ldr	r2, [r6, #0]
 800ffc2:	1a9b      	subs	r3, r3, r2
 800ffc4:	42ab      	cmp	r3, r5
 800ffc6:	dc2b      	bgt.n	8010020 <_printf_common+0xa0>
 800ffc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ffcc:	6822      	ldr	r2, [r4, #0]
 800ffce:	3b00      	subs	r3, #0
 800ffd0:	bf18      	it	ne
 800ffd2:	2301      	movne	r3, #1
 800ffd4:	0692      	lsls	r2, r2, #26
 800ffd6:	d430      	bmi.n	801003a <_printf_common+0xba>
 800ffd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ffdc:	4641      	mov	r1, r8
 800ffde:	4638      	mov	r0, r7
 800ffe0:	47c8      	blx	r9
 800ffe2:	3001      	adds	r0, #1
 800ffe4:	d023      	beq.n	801002e <_printf_common+0xae>
 800ffe6:	6823      	ldr	r3, [r4, #0]
 800ffe8:	341a      	adds	r4, #26
 800ffea:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ffee:	f003 0306 	and.w	r3, r3, #6
 800fff2:	2b04      	cmp	r3, #4
 800fff4:	bf0a      	itet	eq
 800fff6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800fffa:	2500      	movne	r5, #0
 800fffc:	6833      	ldreq	r3, [r6, #0]
 800fffe:	f04f 0600 	mov.w	r6, #0
 8010002:	bf08      	it	eq
 8010004:	1aed      	subeq	r5, r5, r3
 8010006:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801000a:	bf08      	it	eq
 801000c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010010:	4293      	cmp	r3, r2
 8010012:	bfc4      	itt	gt
 8010014:	1a9b      	subgt	r3, r3, r2
 8010016:	18ed      	addgt	r5, r5, r3
 8010018:	42b5      	cmp	r5, r6
 801001a:	d11a      	bne.n	8010052 <_printf_common+0xd2>
 801001c:	2000      	movs	r0, #0
 801001e:	e008      	b.n	8010032 <_printf_common+0xb2>
 8010020:	2301      	movs	r3, #1
 8010022:	4652      	mov	r2, sl
 8010024:	4641      	mov	r1, r8
 8010026:	4638      	mov	r0, r7
 8010028:	47c8      	blx	r9
 801002a:	3001      	adds	r0, #1
 801002c:	d103      	bne.n	8010036 <_printf_common+0xb6>
 801002e:	f04f 30ff 	mov.w	r0, #4294967295
 8010032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010036:	3501      	adds	r5, #1
 8010038:	e7c1      	b.n	800ffbe <_printf_common+0x3e>
 801003a:	18e1      	adds	r1, r4, r3
 801003c:	1c5a      	adds	r2, r3, #1
 801003e:	2030      	movs	r0, #48	@ 0x30
 8010040:	3302      	adds	r3, #2
 8010042:	4422      	add	r2, r4
 8010044:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010048:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801004c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010050:	e7c2      	b.n	800ffd8 <_printf_common+0x58>
 8010052:	2301      	movs	r3, #1
 8010054:	4622      	mov	r2, r4
 8010056:	4641      	mov	r1, r8
 8010058:	4638      	mov	r0, r7
 801005a:	47c8      	blx	r9
 801005c:	3001      	adds	r0, #1
 801005e:	d0e6      	beq.n	801002e <_printf_common+0xae>
 8010060:	3601      	adds	r6, #1
 8010062:	e7d9      	b.n	8010018 <_printf_common+0x98>

08010064 <_printf_i>:
 8010064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010068:	7e0f      	ldrb	r7, [r1, #24]
 801006a:	4691      	mov	r9, r2
 801006c:	4680      	mov	r8, r0
 801006e:	460c      	mov	r4, r1
 8010070:	2f78      	cmp	r7, #120	@ 0x78
 8010072:	469a      	mov	sl, r3
 8010074:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010076:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801007a:	d807      	bhi.n	801008c <_printf_i+0x28>
 801007c:	2f62      	cmp	r7, #98	@ 0x62
 801007e:	d80a      	bhi.n	8010096 <_printf_i+0x32>
 8010080:	2f00      	cmp	r7, #0
 8010082:	f000 80d2 	beq.w	801022a <_printf_i+0x1c6>
 8010086:	2f58      	cmp	r7, #88	@ 0x58
 8010088:	f000 80b9 	beq.w	80101fe <_printf_i+0x19a>
 801008c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010090:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010094:	e03a      	b.n	801010c <_printf_i+0xa8>
 8010096:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801009a:	2b15      	cmp	r3, #21
 801009c:	d8f6      	bhi.n	801008c <_printf_i+0x28>
 801009e:	a101      	add	r1, pc, #4	@ (adr r1, 80100a4 <_printf_i+0x40>)
 80100a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80100a4:	080100fd 	.word	0x080100fd
 80100a8:	08010111 	.word	0x08010111
 80100ac:	0801008d 	.word	0x0801008d
 80100b0:	0801008d 	.word	0x0801008d
 80100b4:	0801008d 	.word	0x0801008d
 80100b8:	0801008d 	.word	0x0801008d
 80100bc:	08010111 	.word	0x08010111
 80100c0:	0801008d 	.word	0x0801008d
 80100c4:	0801008d 	.word	0x0801008d
 80100c8:	0801008d 	.word	0x0801008d
 80100cc:	0801008d 	.word	0x0801008d
 80100d0:	08010211 	.word	0x08010211
 80100d4:	0801013b 	.word	0x0801013b
 80100d8:	080101cb 	.word	0x080101cb
 80100dc:	0801008d 	.word	0x0801008d
 80100e0:	0801008d 	.word	0x0801008d
 80100e4:	08010233 	.word	0x08010233
 80100e8:	0801008d 	.word	0x0801008d
 80100ec:	0801013b 	.word	0x0801013b
 80100f0:	0801008d 	.word	0x0801008d
 80100f4:	0801008d 	.word	0x0801008d
 80100f8:	080101d3 	.word	0x080101d3
 80100fc:	6833      	ldr	r3, [r6, #0]
 80100fe:	1d1a      	adds	r2, r3, #4
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	6032      	str	r2, [r6, #0]
 8010104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010108:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801010c:	2301      	movs	r3, #1
 801010e:	e09d      	b.n	801024c <_printf_i+0x1e8>
 8010110:	6833      	ldr	r3, [r6, #0]
 8010112:	6820      	ldr	r0, [r4, #0]
 8010114:	1d19      	adds	r1, r3, #4
 8010116:	6031      	str	r1, [r6, #0]
 8010118:	0606      	lsls	r6, r0, #24
 801011a:	d501      	bpl.n	8010120 <_printf_i+0xbc>
 801011c:	681d      	ldr	r5, [r3, #0]
 801011e:	e003      	b.n	8010128 <_printf_i+0xc4>
 8010120:	0645      	lsls	r5, r0, #25
 8010122:	d5fb      	bpl.n	801011c <_printf_i+0xb8>
 8010124:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010128:	2d00      	cmp	r5, #0
 801012a:	da03      	bge.n	8010134 <_printf_i+0xd0>
 801012c:	232d      	movs	r3, #45	@ 0x2d
 801012e:	426d      	negs	r5, r5
 8010130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010134:	4859      	ldr	r0, [pc, #356]	@ (801029c <_printf_i+0x238>)
 8010136:	230a      	movs	r3, #10
 8010138:	e011      	b.n	801015e <_printf_i+0xfa>
 801013a:	6821      	ldr	r1, [r4, #0]
 801013c:	6833      	ldr	r3, [r6, #0]
 801013e:	0608      	lsls	r0, r1, #24
 8010140:	f853 5b04 	ldr.w	r5, [r3], #4
 8010144:	d402      	bmi.n	801014c <_printf_i+0xe8>
 8010146:	0649      	lsls	r1, r1, #25
 8010148:	bf48      	it	mi
 801014a:	b2ad      	uxthmi	r5, r5
 801014c:	2f6f      	cmp	r7, #111	@ 0x6f
 801014e:	6033      	str	r3, [r6, #0]
 8010150:	4852      	ldr	r0, [pc, #328]	@ (801029c <_printf_i+0x238>)
 8010152:	bf14      	ite	ne
 8010154:	230a      	movne	r3, #10
 8010156:	2308      	moveq	r3, #8
 8010158:	2100      	movs	r1, #0
 801015a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801015e:	6866      	ldr	r6, [r4, #4]
 8010160:	2e00      	cmp	r6, #0
 8010162:	60a6      	str	r6, [r4, #8]
 8010164:	bfa2      	ittt	ge
 8010166:	6821      	ldrge	r1, [r4, #0]
 8010168:	f021 0104 	bicge.w	r1, r1, #4
 801016c:	6021      	strge	r1, [r4, #0]
 801016e:	b90d      	cbnz	r5, 8010174 <_printf_i+0x110>
 8010170:	2e00      	cmp	r6, #0
 8010172:	d04b      	beq.n	801020c <_printf_i+0x1a8>
 8010174:	4616      	mov	r6, r2
 8010176:	fbb5 f1f3 	udiv	r1, r5, r3
 801017a:	fb03 5711 	mls	r7, r3, r1, r5
 801017e:	5dc7      	ldrb	r7, [r0, r7]
 8010180:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010184:	462f      	mov	r7, r5
 8010186:	460d      	mov	r5, r1
 8010188:	42bb      	cmp	r3, r7
 801018a:	d9f4      	bls.n	8010176 <_printf_i+0x112>
 801018c:	2b08      	cmp	r3, #8
 801018e:	d10b      	bne.n	80101a8 <_printf_i+0x144>
 8010190:	6823      	ldr	r3, [r4, #0]
 8010192:	07df      	lsls	r7, r3, #31
 8010194:	d508      	bpl.n	80101a8 <_printf_i+0x144>
 8010196:	6923      	ldr	r3, [r4, #16]
 8010198:	6861      	ldr	r1, [r4, #4]
 801019a:	4299      	cmp	r1, r3
 801019c:	bfde      	ittt	le
 801019e:	2330      	movle	r3, #48	@ 0x30
 80101a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80101a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80101a8:	1b92      	subs	r2, r2, r6
 80101aa:	6122      	str	r2, [r4, #16]
 80101ac:	464b      	mov	r3, r9
 80101ae:	aa03      	add	r2, sp, #12
 80101b0:	4621      	mov	r1, r4
 80101b2:	4640      	mov	r0, r8
 80101b4:	f8cd a000 	str.w	sl, [sp]
 80101b8:	f7ff fee2 	bl	800ff80 <_printf_common>
 80101bc:	3001      	adds	r0, #1
 80101be:	d14a      	bne.n	8010256 <_printf_i+0x1f2>
 80101c0:	f04f 30ff 	mov.w	r0, #4294967295
 80101c4:	b004      	add	sp, #16
 80101c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ca:	6823      	ldr	r3, [r4, #0]
 80101cc:	f043 0320 	orr.w	r3, r3, #32
 80101d0:	6023      	str	r3, [r4, #0]
 80101d2:	2778      	movs	r7, #120	@ 0x78
 80101d4:	4832      	ldr	r0, [pc, #200]	@ (80102a0 <_printf_i+0x23c>)
 80101d6:	6823      	ldr	r3, [r4, #0]
 80101d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80101dc:	061f      	lsls	r7, r3, #24
 80101de:	6831      	ldr	r1, [r6, #0]
 80101e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80101e4:	d402      	bmi.n	80101ec <_printf_i+0x188>
 80101e6:	065f      	lsls	r7, r3, #25
 80101e8:	bf48      	it	mi
 80101ea:	b2ad      	uxthmi	r5, r5
 80101ec:	6031      	str	r1, [r6, #0]
 80101ee:	07d9      	lsls	r1, r3, #31
 80101f0:	bf44      	itt	mi
 80101f2:	f043 0320 	orrmi.w	r3, r3, #32
 80101f6:	6023      	strmi	r3, [r4, #0]
 80101f8:	b11d      	cbz	r5, 8010202 <_printf_i+0x19e>
 80101fa:	2310      	movs	r3, #16
 80101fc:	e7ac      	b.n	8010158 <_printf_i+0xf4>
 80101fe:	4827      	ldr	r0, [pc, #156]	@ (801029c <_printf_i+0x238>)
 8010200:	e7e9      	b.n	80101d6 <_printf_i+0x172>
 8010202:	6823      	ldr	r3, [r4, #0]
 8010204:	f023 0320 	bic.w	r3, r3, #32
 8010208:	6023      	str	r3, [r4, #0]
 801020a:	e7f6      	b.n	80101fa <_printf_i+0x196>
 801020c:	4616      	mov	r6, r2
 801020e:	e7bd      	b.n	801018c <_printf_i+0x128>
 8010210:	6833      	ldr	r3, [r6, #0]
 8010212:	6825      	ldr	r5, [r4, #0]
 8010214:	1d18      	adds	r0, r3, #4
 8010216:	6961      	ldr	r1, [r4, #20]
 8010218:	6030      	str	r0, [r6, #0]
 801021a:	062e      	lsls	r6, r5, #24
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	d501      	bpl.n	8010224 <_printf_i+0x1c0>
 8010220:	6019      	str	r1, [r3, #0]
 8010222:	e002      	b.n	801022a <_printf_i+0x1c6>
 8010224:	0668      	lsls	r0, r5, #25
 8010226:	d5fb      	bpl.n	8010220 <_printf_i+0x1bc>
 8010228:	8019      	strh	r1, [r3, #0]
 801022a:	2300      	movs	r3, #0
 801022c:	4616      	mov	r6, r2
 801022e:	6123      	str	r3, [r4, #16]
 8010230:	e7bc      	b.n	80101ac <_printf_i+0x148>
 8010232:	6833      	ldr	r3, [r6, #0]
 8010234:	2100      	movs	r1, #0
 8010236:	1d1a      	adds	r2, r3, #4
 8010238:	6032      	str	r2, [r6, #0]
 801023a:	681e      	ldr	r6, [r3, #0]
 801023c:	6862      	ldr	r2, [r4, #4]
 801023e:	4630      	mov	r0, r6
 8010240:	f000 f85a 	bl	80102f8 <memchr>
 8010244:	b108      	cbz	r0, 801024a <_printf_i+0x1e6>
 8010246:	1b80      	subs	r0, r0, r6
 8010248:	6060      	str	r0, [r4, #4]
 801024a:	6863      	ldr	r3, [r4, #4]
 801024c:	6123      	str	r3, [r4, #16]
 801024e:	2300      	movs	r3, #0
 8010250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010254:	e7aa      	b.n	80101ac <_printf_i+0x148>
 8010256:	6923      	ldr	r3, [r4, #16]
 8010258:	4632      	mov	r2, r6
 801025a:	4649      	mov	r1, r9
 801025c:	4640      	mov	r0, r8
 801025e:	47d0      	blx	sl
 8010260:	3001      	adds	r0, #1
 8010262:	d0ad      	beq.n	80101c0 <_printf_i+0x15c>
 8010264:	6823      	ldr	r3, [r4, #0]
 8010266:	079b      	lsls	r3, r3, #30
 8010268:	d413      	bmi.n	8010292 <_printf_i+0x22e>
 801026a:	68e0      	ldr	r0, [r4, #12]
 801026c:	9b03      	ldr	r3, [sp, #12]
 801026e:	4298      	cmp	r0, r3
 8010270:	bfb8      	it	lt
 8010272:	4618      	movlt	r0, r3
 8010274:	e7a6      	b.n	80101c4 <_printf_i+0x160>
 8010276:	2301      	movs	r3, #1
 8010278:	4632      	mov	r2, r6
 801027a:	4649      	mov	r1, r9
 801027c:	4640      	mov	r0, r8
 801027e:	47d0      	blx	sl
 8010280:	3001      	adds	r0, #1
 8010282:	d09d      	beq.n	80101c0 <_printf_i+0x15c>
 8010284:	3501      	adds	r5, #1
 8010286:	68e3      	ldr	r3, [r4, #12]
 8010288:	9903      	ldr	r1, [sp, #12]
 801028a:	1a5b      	subs	r3, r3, r1
 801028c:	42ab      	cmp	r3, r5
 801028e:	dcf2      	bgt.n	8010276 <_printf_i+0x212>
 8010290:	e7eb      	b.n	801026a <_printf_i+0x206>
 8010292:	2500      	movs	r5, #0
 8010294:	f104 0619 	add.w	r6, r4, #25
 8010298:	e7f5      	b.n	8010286 <_printf_i+0x222>
 801029a:	bf00      	nop
 801029c:	0801044d 	.word	0x0801044d
 80102a0:	0801045e 	.word	0x0801045e

080102a4 <memmove>:
 80102a4:	4288      	cmp	r0, r1
 80102a6:	b510      	push	{r4, lr}
 80102a8:	eb01 0402 	add.w	r4, r1, r2
 80102ac:	d902      	bls.n	80102b4 <memmove+0x10>
 80102ae:	4284      	cmp	r4, r0
 80102b0:	4623      	mov	r3, r4
 80102b2:	d807      	bhi.n	80102c4 <memmove+0x20>
 80102b4:	1e43      	subs	r3, r0, #1
 80102b6:	42a1      	cmp	r1, r4
 80102b8:	d008      	beq.n	80102cc <memmove+0x28>
 80102ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80102c2:	e7f8      	b.n	80102b6 <memmove+0x12>
 80102c4:	4402      	add	r2, r0
 80102c6:	4601      	mov	r1, r0
 80102c8:	428a      	cmp	r2, r1
 80102ca:	d100      	bne.n	80102ce <memmove+0x2a>
 80102cc:	bd10      	pop	{r4, pc}
 80102ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80102d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80102d6:	e7f7      	b.n	80102c8 <memmove+0x24>

080102d8 <_sbrk_r>:
 80102d8:	b538      	push	{r3, r4, r5, lr}
 80102da:	2300      	movs	r3, #0
 80102dc:	4d05      	ldr	r5, [pc, #20]	@ (80102f4 <_sbrk_r+0x1c>)
 80102de:	4604      	mov	r4, r0
 80102e0:	4608      	mov	r0, r1
 80102e2:	602b      	str	r3, [r5, #0]
 80102e4:	f7f1 f948 	bl	8001578 <_sbrk>
 80102e8:	1c43      	adds	r3, r0, #1
 80102ea:	d102      	bne.n	80102f2 <_sbrk_r+0x1a>
 80102ec:	682b      	ldr	r3, [r5, #0]
 80102ee:	b103      	cbz	r3, 80102f2 <_sbrk_r+0x1a>
 80102f0:	6023      	str	r3, [r4, #0]
 80102f2:	bd38      	pop	{r3, r4, r5, pc}
 80102f4:	200012b0 	.word	0x200012b0

080102f8 <memchr>:
 80102f8:	b2c9      	uxtb	r1, r1
 80102fa:	4603      	mov	r3, r0
 80102fc:	4402      	add	r2, r0
 80102fe:	b510      	push	{r4, lr}
 8010300:	4293      	cmp	r3, r2
 8010302:	4618      	mov	r0, r3
 8010304:	d101      	bne.n	801030a <memchr+0x12>
 8010306:	2000      	movs	r0, #0
 8010308:	e003      	b.n	8010312 <memchr+0x1a>
 801030a:	7804      	ldrb	r4, [r0, #0]
 801030c:	3301      	adds	r3, #1
 801030e:	428c      	cmp	r4, r1
 8010310:	d1f6      	bne.n	8010300 <memchr+0x8>
 8010312:	bd10      	pop	{r4, pc}

08010314 <_realloc_r>:
 8010314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010318:	4680      	mov	r8, r0
 801031a:	4615      	mov	r5, r2
 801031c:	460c      	mov	r4, r1
 801031e:	b921      	cbnz	r1, 801032a <_realloc_r+0x16>
 8010320:	4611      	mov	r1, r2
 8010322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010326:	f7ff bc47 	b.w	800fbb8 <_malloc_r>
 801032a:	b92a      	cbnz	r2, 8010338 <_realloc_r+0x24>
 801032c:	f7ff fbd8 	bl	800fae0 <_free_r>
 8010330:	2400      	movs	r4, #0
 8010332:	4620      	mov	r0, r4
 8010334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010338:	f000 f81a 	bl	8010370 <_malloc_usable_size_r>
 801033c:	4285      	cmp	r5, r0
 801033e:	4606      	mov	r6, r0
 8010340:	d802      	bhi.n	8010348 <_realloc_r+0x34>
 8010342:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010346:	d8f4      	bhi.n	8010332 <_realloc_r+0x1e>
 8010348:	4629      	mov	r1, r5
 801034a:	4640      	mov	r0, r8
 801034c:	f7ff fc34 	bl	800fbb8 <_malloc_r>
 8010350:	4607      	mov	r7, r0
 8010352:	2800      	cmp	r0, #0
 8010354:	d0ec      	beq.n	8010330 <_realloc_r+0x1c>
 8010356:	42b5      	cmp	r5, r6
 8010358:	462a      	mov	r2, r5
 801035a:	4621      	mov	r1, r4
 801035c:	bf28      	it	cs
 801035e:	4632      	movcs	r2, r6
 8010360:	f7ff fbb0 	bl	800fac4 <memcpy>
 8010364:	4621      	mov	r1, r4
 8010366:	4640      	mov	r0, r8
 8010368:	463c      	mov	r4, r7
 801036a:	f7ff fbb9 	bl	800fae0 <_free_r>
 801036e:	e7e0      	b.n	8010332 <_realloc_r+0x1e>

08010370 <_malloc_usable_size_r>:
 8010370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010374:	1f18      	subs	r0, r3, #4
 8010376:	2b00      	cmp	r3, #0
 8010378:	bfbc      	itt	lt
 801037a:	580b      	ldrlt	r3, [r1, r0]
 801037c:	18c0      	addlt	r0, r0, r3
 801037e:	4770      	bx	lr

08010380 <_init>:
 8010380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010382:	bf00      	nop
 8010384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010386:	bc08      	pop	{r3}
 8010388:	469e      	mov	lr, r3
 801038a:	4770      	bx	lr

0801038c <_fini>:
 801038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801038e:	bf00      	nop
 8010390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010392:	bc08      	pop	{r3}
 8010394:	469e      	mov	lr, r3
 8010396:	4770      	bx	lr
