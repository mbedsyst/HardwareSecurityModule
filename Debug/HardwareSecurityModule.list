
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011064  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080112b0  080112b0  000122b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801140c  0801140c  00013180  2**0
                  CONTENTS
  4 .ARM          00000008  0801140c  0801140c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011414  08011414  00013180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011414  08011414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011418  08011418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  0801141c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011230  20000180  0801159c  00013180  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  200113b0  0801159c  000133b0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00013180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000262c2  00000000  00000000  000131b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dec  00000000  00000000  00039478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  0003e268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016ea  00000000  00000000  00040050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000082be  00000000  00000000  0004173a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a206  00000000  00000000  000499f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014b7f6  00000000  00000000  00073bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bf3f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008858  00000000  00000000  001bf438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001c7c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	08011298 	.word	0x08011298

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	08011298 	.word	0x08011298

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <log_generic>:
{
    current_level = level;
}

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b0c7      	sub	sp, #284	@ 0x11c
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	4604      	mov	r4, r0
 80005ac:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80005b0:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 80005b4:	6001      	str	r1, [r0, #0]
 80005b6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80005ba:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80005be:	600a      	str	r2, [r1, #0]
 80005c0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005c4:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005ce:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80005d2:	4622      	mov	r2, r4
 80005d4:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 80005d6:	4b16      	ldr	r3, [pc, #88]	@ (8000630 <log_generic+0x8c>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80005de:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 80005e2:	7812      	ldrb	r2, [r2, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d31e      	bcc.n	8000626 <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005ec:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80005f0:	f107 0010 	add.w	r0, r7, #16
 80005f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005fe:	f00f fe5f 	bl	80102c0 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800060a:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800060e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000612:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000616:	4807      	ldr	r0, [pc, #28]	@ (8000634 <log_generic+0x90>)
 8000618:	9000      	str	r0, [sp, #0]
 800061a:	6812      	ldr	r2, [r2, #0]
 800061c:	6809      	ldr	r1, [r1, #0]
 800061e:	4806      	ldr	r0, [pc, #24]	@ (8000638 <log_generic+0x94>)
 8000620:	f00f fdce 	bl	80101c0 <iprintf>
 8000624:	e000      	b.n	8000628 <log_generic+0x84>
        return;
 8000626:	bf00      	nop
}
 8000628:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800062c:	46bd      	mov	sp, r7
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	20000000 	.word	0x20000000
 8000634:	080112c0 	.word	0x080112c0
 8000638:	080112b0 	.word	0x080112b0

0800063c <log_info>:
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
    va_end(args);
}

void log_info(const char *fmt, ...)
{
 800063c:	b40f      	push	{r0, r1, r2, r3}
 800063e:	b580      	push	{r7, lr}
 8000640:	b084      	sub	sp, #16
 8000642:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <log_info+0x2c>)
 8000652:	4906      	ldr	r1, [pc, #24]	@ (800066c <log_info+0x30>)
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ffa5 	bl	80005a4 <log_generic>
    va_end(args);
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr
 8000668:	080112d8 	.word	0x080112d8
 800066c:	080112e0 	.word	0x080112e0

08000670 <log_error>:
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
    va_end(args);
}

void log_error(const char *fmt, ...)
{
 8000670:	b40f      	push	{r0, r1, r2, r3}
 8000672:	b580      	push	{r7, lr}
 8000674:	b084      	sub	sp, #16
 8000676:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	4a05      	ldr	r2, [pc, #20]	@ (800069c <log_error+0x2c>)
 8000686:	4906      	ldr	r1, [pc, #24]	@ (80006a0 <log_error+0x30>)
 8000688:	2003      	movs	r0, #3
 800068a:	f7ff ff8b 	bl	80005a4 <log_generic>
    va_end(args);
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000698:	b004      	add	sp, #16
 800069a:	4770      	bx	lr
 800069c:	080112f8 	.word	0x080112f8
 80006a0:	08011300 	.word	0x08011300

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f001 fc8e 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f89a 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f000 fb9c 	bl	8000dec <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80006b4:	f000 fb38 	bl	8000d28 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80006b8:	f000 fa52 	bl	8000b60 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006bc:	f000 f922 	bl	8000904 <MX_I2C1_Init>
  MX_SPI1_Init();
 80006c0:	f000 f9f8 	bl	8000ab4 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80006c4:	f000 fae4 	bl	8000c90 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80006c8:	f000 f972 	bl	80009b0 <MX_RTC_Init>
  MX_RNG_Init();
 80006cc:	f000 f95a 	bl	8000984 <MX_RNG_Init>
  MX_HASH_Init();
 80006d0:	f000 f8fe 	bl	80008d0 <MX_HASH_Init>
  MX_USART3_UART_Init();
 80006d4:	f000 fa90 	bl	8000bf8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80006d8:	bf00      	nop
 80006da:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <main+0x138>)
 80006dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d0fa      	beq.n	80006da <main+0x36>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f001 fa55 	bl	8001b94 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f001 fa52 	bl	8001b94 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006f0:	2002      	movs	r0, #2
 80006f2:	f001 fa4f 	bl	8001b94 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006f6:	2101      	movs	r1, #1
 80006f8:	2000      	movs	r0, #0
 80006fa:	f001 faeb 	bl	8001cd4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80006fe:	4b38      	ldr	r3, [pc, #224]	@ (80007e0 <main+0x13c>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000704:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000706:	4b36      	ldr	r3, [pc, #216]	@ (80007e0 <main+0x13c>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800070c:	4b34      	ldr	r3, [pc, #208]	@ (80007e0 <main+0x13c>)
 800070e:	2200      	movs	r2, #0
 8000710:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000712:	4b33      	ldr	r3, [pc, #204]	@ (80007e0 <main+0x13c>)
 8000714:	2200      	movs	r2, #0
 8000716:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000718:	4b31      	ldr	r3, [pc, #196]	@ (80007e0 <main+0x13c>)
 800071a:	2200      	movs	r2, #0
 800071c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800071e:	4930      	ldr	r1, [pc, #192]	@ (80007e0 <main+0x13c>)
 8000720:	2000      	movs	r0, #0
 8000722:	f001 fb71 	bl	8001e08 <BSP_COM_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <main+0x8c>
  {
    Error_Handler();
 800072c:	f000 fc5a 	bl	8000fe4 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000730:	2000      	movs	r0, #0
 8000732:	f001 faa5 	bl	8001c80 <BSP_LED_Toggle>
 8000736:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800073a:	f001 fd03 	bl	8002144 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 800073e:	2002      	movs	r0, #2
 8000740:	f001 fa9e 	bl	8001c80 <BSP_LED_Toggle>
 8000744:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000748:	f001 fcfc 	bl	8002144 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 800074c:	2001      	movs	r0, #1
 800074e:	f001 fa97 	bl	8001c80 <BSP_LED_Toggle>
 8000752:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000756:	f001 fcf5 	bl	8002144 <HAL_Delay>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 800075a:	2000      	movs	r0, #0
 800075c:	f001 fa90 	bl	8001c80 <BSP_LED_Toggle>
 8000760:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000764:	f001 fcee 	bl	8002144 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000768:	2002      	movs	r0, #2
 800076a:	f001 fa89 	bl	8001c80 <BSP_LED_Toggle>
 800076e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000772:	f001 fce7 	bl	8002144 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000776:	2001      	movs	r0, #1
 8000778:	f001 fa82 	bl	8001c80 <BSP_LED_Toggle>
 800077c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000780:	f001 fce0 	bl	8002144 <HAL_Delay>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000784:	2000      	movs	r0, #0
 8000786:	f001 fa7b 	bl	8001c80 <BSP_LED_Toggle>
 800078a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800078e:	f001 fcd9 	bl	8002144 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000792:	2002      	movs	r0, #2
 8000794:	f001 fa74 	bl	8001c80 <BSP_LED_Toggle>
 8000798:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800079c:	f001 fcd2 	bl	8002144 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f001 fa6d 	bl	8001c80 <BSP_LED_Toggle>
 80007a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007aa:	f001 fccb 	bl	8002144 <HAL_Delay>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f001 fa66 	bl	8001c80 <BSP_LED_Toggle>
 80007b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b8:	f001 fcc4 	bl	8002144 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 80007bc:	2002      	movs	r0, #2
 80007be:	f001 fa5f 	bl	8001c80 <BSP_LED_Toggle>
 80007c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c6:	f001 fcbd 	bl	8002144 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f001 fa58 	bl	8001c80 <BSP_LED_Toggle>
 80007d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d4:	f001 fcb6 	bl	8002144 <HAL_Delay>

  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <main+0x134>
 80007dc:	200007b4 	.word	0x200007b4
 80007e0:	2000019c 	.word	0x2000019c

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	@ 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	2250      	movs	r2, #80	@ 0x50
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00f fd72 	bl	80102dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
 8000808:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800080a:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <SystemClock_Config+0xe4>)
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	4a2e      	ldr	r2, [pc, #184]	@ (80008c8 <SystemClock_Config+0xe4>)
 8000810:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000814:	6113      	str	r3, [r2, #16]
 8000816:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <SystemClock_Config+0xe4>)
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000822:	bf00      	nop
 8000824:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <SystemClock_Config+0xe4>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	f003 0308 	and.w	r3, r3, #8
 800082c:	2b08      	cmp	r3, #8
 800082e:	d1f9      	bne.n	8000824 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000830:	2329      	movs	r3, #41	@ 0x29
 8000832:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000834:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800083a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800083e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000840:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000844:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800084a:	2303      	movs	r3, #3
 800084c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800084e:	2304      	movs	r3, #4
 8000850:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000852:	23fa      	movs	r3, #250	@ 0xfa
 8000854:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000862:	2304      	movs	r3, #4
 8000864:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000866:	2300      	movs	r3, #0
 8000868:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	4618      	mov	r0, r3
 8000874:	f003 fe94 	bl	80045a0 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800087e:	f000 fbb1 	bl	8000fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	231f      	movs	r3, #31
 8000884:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2303      	movs	r3, #3
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	2105      	movs	r1, #5
 80008a0:	4618      	mov	r0, r3
 80008a2:	f004 fab5 	bl	8004e10 <HAL_RCC_ClockConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008ac:	f000 fb9a 	bl	8000fe4 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <SystemClock_Config+0xe8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80008b8:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <SystemClock_Config+0xe8>)
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	bf00      	nop
 80008c2:	3770      	adds	r7, #112	@ 0x70
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	44020800 	.word	0x44020800
 80008cc:	40022000 	.word	0x40022000

080008d0 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_HASH_Init+0x2c>)
 80008d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000900 <MX_HASH_Init+0x30>)
 80008d8:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_HASH_Init+0x2c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_HASH_Init+0x2c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_HASH_Init+0x2c>)
 80008e8:	f001 ffec 	bl	80028c4 <HAL_HASH_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_HASH_Init+0x26>
  {
    Error_Handler();
 80008f2:	f000 fb77 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200001ac 	.word	0x200001ac
 8000900:	420c0400 	.word	0x420c0400

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_I2C1_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <MX_I2C1_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000910:	4a1b      	ldr	r2, [pc, #108]	@ (8000980 <MX_I2C1_Init+0x7c>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_I2C1_Init+0x74>)
 800091c:	2201      	movs	r2, #1
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093e:	480e      	ldr	r0, [pc, #56]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000940:	f001 fff8 	bl	8002934 <HAL_I2C_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800094a:	f000 fb4b 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000952:	f002 f88a 	bl	8002a6a <HAL_I2CEx_ConfigAnalogFilter>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800095c:	f000 fb42 	bl	8000fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000964:	f002 f8cc 	bl	8002b00 <HAL_I2CEx_ConfigDigitalFilter>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 fb39 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200001ec 	.word	0x200001ec
 800097c:	40005400 	.word	0x40005400
 8000980:	10c043e5 	.word	0x10c043e5

08000984 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <MX_RNG_Init+0x24>)
 800098a:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <MX_RNG_Init+0x28>)
 800098c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_RNG_Init+0x24>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	@ (80009a8 <MX_RNG_Init+0x24>)
 8000996:	f009 fdd5 	bl	800a544 <HAL_RNG_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80009a0:	f000 fb20 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000240 	.word	0x20000240
 80009ac:	420c0800 	.word	0x420c0800

080009b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	@ 0x38
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009de:	4b33      	ldr	r3, [pc, #204]	@ (8000aac <MX_RTC_Init+0xfc>)
 80009e0:	4a33      	ldr	r2, [pc, #204]	@ (8000ab0 <MX_RTC_Init+0x100>)
 80009e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009e4:	4b31      	ldr	r3, [pc, #196]	@ (8000aac <MX_RTC_Init+0xfc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009ea:	4b30      	ldr	r3, [pc, #192]	@ (8000aac <MX_RTC_Init+0xfc>)
 80009ec:	227f      	movs	r2, #127	@ 0x7f
 80009ee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009f0:	4b2e      	ldr	r3, [pc, #184]	@ (8000aac <MX_RTC_Init+0xfc>)
 80009f2:	22ff      	movs	r2, #255	@ 0xff
 80009f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009f6:	4b2d      	ldr	r3, [pc, #180]	@ (8000aac <MX_RTC_Init+0xfc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009fc:	4b2b      	ldr	r3, [pc, #172]	@ (8000aac <MX_RTC_Init+0xfc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a02:	4b2a      	ldr	r3, [pc, #168]	@ (8000aac <MX_RTC_Init+0xfc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a08:	4b28      	ldr	r3, [pc, #160]	@ (8000aac <MX_RTC_Init+0xfc>)
 8000a0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a0e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a10:	4b26      	ldr	r3, [pc, #152]	@ (8000aac <MX_RTC_Init+0xfc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000a16:	4b25      	ldr	r3, [pc, #148]	@ (8000aac <MX_RTC_Init+0xfc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a1c:	4823      	ldr	r0, [pc, #140]	@ (8000aac <MX_RTC_Init+0xfc>)
 8000a1e:	f009 fe2f 	bl	800a680 <HAL_RTC_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a28:	f000 fadc 	bl	8000fe4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	481a      	ldr	r0, [pc, #104]	@ (8000aac <MX_RTC_Init+0xfc>)
 8000a44:	f00a f882 	bl	800ab4c <HAL_RTCEx_PrivilegeModeSet>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a4e:	f000 fac9 	bl	8000fe4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480f      	ldr	r0, [pc, #60]	@ (8000aac <MX_RTC_Init+0xfc>)
 8000a70:	f009 fe88 	bl	800a784 <HAL_RTC_SetTime>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000a7a:	f000 fab3 	bl	8000fe4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a82:	2301      	movs	r3, #1
 8000a84:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2201      	movs	r2, #1
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_RTC_Init+0xfc>)
 8000a96:	f009 ff07 	bl	800a8a8 <HAL_RTC_SetDate>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000aa0:	f000 faa0 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	3738      	adds	r7, #56	@ 0x38
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000254 	.word	0x20000254
 8000ab0:	44007800 	.word	0x44007800

08000ab4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ab8:	4b27      	ldr	r3, [pc, #156]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000aba:	4a28      	ldr	r2, [pc, #160]	@ (8000b5c <MX_SPI1_Init+0xa8>)
 8000abc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000abe:	4b26      	ldr	r3, [pc, #152]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000ac0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ac4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac6:	4b24      	ldr	r3, [pc, #144]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000acc:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000ace:	2207      	movs	r2, #7
 8000ad0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad2:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ade:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000ae0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ae4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000ae8:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000aec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af4:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000b02:	2207      	movs	r2, #7
 8000b04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000b08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b14:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b38:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_SPI1_Init+0xa4>)
 8000b46:	f00a f82f 	bl	800aba8 <HAL_SPI_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000b50:	f000 fa48 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000284 	.word	0x20000284
 8000b5c:	40013000 	.word	0x40013000

08000b60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b64:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b66:	4a23      	ldr	r2, [pc, #140]	@ (8000bf4 <MX_USART2_UART_Init+0x94>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b96:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba8:	4811      	ldr	r0, [pc, #68]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000baa:	f00a f988 	bl	800aebe <HAL_UART_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bb4:	f000 fa16 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000bbc:	f00a feb4 	bl	800b928 <HAL_UARTEx_SetTxFifoThreshold>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc6:	f000 fa0d 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4808      	ldr	r0, [pc, #32]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000bce:	f00a fee9 	bl	800b9a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd8:	f000 fa04 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <MX_USART2_UART_Init+0x90>)
 8000bde:	f00a fe6a 	bl	800b8b6 <HAL_UARTEx_DisableFifoMode>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000be8:	f000 f9fc 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000314 	.word	0x20000314
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000bfe:	4a23      	ldr	r2, [pc, #140]	@ (8000c8c <MX_USART3_UART_Init+0x94>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c02:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c34:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c40:	4811      	ldr	r0, [pc, #68]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c42:	f00a f93c 	bl	800aebe <HAL_UART_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c4c:	f000 f9ca 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c50:	2100      	movs	r1, #0
 8000c52:	480d      	ldr	r0, [pc, #52]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c54:	f00a fe68 	bl	800b928 <HAL_UARTEx_SetTxFifoThreshold>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c5e:	f000 f9c1 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4808      	ldr	r0, [pc, #32]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c66:	f00a fe9d 	bl	800b9a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c70:	f000 f9b8 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <MX_USART3_UART_Init+0x90>)
 8000c76:	f00a fe1e 	bl	800b8b6 <HAL_UARTEx_DisableFifoMode>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c80:	f000 f9b0 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200003a8 	.word	0x200003a8
 8000c8c:	40004800 	.word	0x40004800

08000c90 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000c96:	4a23      	ldr	r2, [pc, #140]	@ (8000d24 <MX_USART6_UART_Init+0x94>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000cd8:	4811      	ldr	r0, [pc, #68]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000cda:	f00a f8f0 	bl	800aebe <HAL_UART_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000ce4:	f000 f97e 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000cec:	f00a fe1c 	bl	800b928 <HAL_UARTEx_SetTxFifoThreshold>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000cf6:	f000 f975 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000cfe:	f00a fe51 	bl	800b9a4 <HAL_UARTEx_SetRxFifoThreshold>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000d08:	f000 f96c 	bl	8000fe4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_USART6_UART_Init+0x90>)
 8000d0e:	f00a fdd2 	bl	800b8b6 <HAL_UARTEx_DisableFifoMode>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000d18:	f000 f964 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000043c 	.word	0x2000043c
 8000d24:	40006400 	.word	0x40006400

08000d28 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8000d2c:	4b29      	ldr	r3, [pc, #164]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd8 <MX_USB_PCD_Init+0xb0>)
 8000d30:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000d34:	4b27      	ldr	r3, [pc, #156]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d36:	4a29      	ldr	r2, [pc, #164]	@ (8000ddc <MX_USB_PCD_Init+0xb4>)
 8000d38:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000d3a:	4b26      	ldr	r3, [pc, #152]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d3c:	2208      	movs	r2, #8
 8000d3e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000d40:	4b24      	ldr	r3, [pc, #144]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d42:	2202      	movs	r2, #2
 8000d44:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d46:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d48:	2202      	movs	r2, #2
 8000d4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000d4c:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000d70:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000d76:	4817      	ldr	r0, [pc, #92]	@ (8000dd4 <MX_USB_PCD_Init+0xac>)
 8000d78:	f001 ff71 	bl	8002c5e <HAL_PCD_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8000d82:	f000 f92f 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8000d86:	2200      	movs	r2, #0
 8000d88:	4915      	ldr	r1, [pc, #84]	@ (8000de0 <MX_USB_PCD_Init+0xb8>)
 8000d8a:	4813      	ldr	r0, [pc, #76]	@ (8000dd8 <MX_USB_PCD_Init+0xb0>)
 8000d8c:	f00d fe18 	bl	800e9c0 <USBD_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8000d96:	f000 f925 	bl	8000fe4 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000d9a:	4912      	ldr	r1, [pc, #72]	@ (8000de4 <MX_USB_PCD_Init+0xbc>)
 8000d9c:	480e      	ldr	r0, [pc, #56]	@ (8000dd8 <MX_USB_PCD_Init+0xb0>)
 8000d9e:	f00d fe3f 	bl	800ea20 <USBD_RegisterClass>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8000da8:	f000 f91c 	bl	8000fe4 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8000dac:	490e      	ldr	r1, [pc, #56]	@ (8000de8 <MX_USB_PCD_Init+0xc0>)
 8000dae:	480a      	ldr	r0, [pc, #40]	@ (8000dd8 <MX_USB_PCD_Init+0xb0>)
 8000db0:	f00d fa58 	bl	800e264 <USBD_CDC_RegisterInterface>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8000dba:	f000 f913 	bl	8000fe4 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000dbe:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <MX_USB_PCD_Init+0xb0>)
 8000dc0:	f00d fe64 	bl	800ea8c <USBD_Start>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8000dca:	f000 f90b 	bl	8000fe4 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	200004d0 	.word	0x200004d0
 8000dd8:	200007b4 	.word	0x200007b4
 8000ddc:	40016000 	.word	0x40016000
 8000de0:	200000d4 	.word	0x200000d4
 8000de4:	20000038 	.word	0x20000038
 8000de8:	200000b8 	.word	0x200000b8

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	@ 0x30
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e02:	4b72      	ldr	r3, [pc, #456]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e08:	4a70      	ldr	r2, [pc, #448]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e12:	4b6e      	ldr	r3, [pc, #440]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	4b6a      	ldr	r3, [pc, #424]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e26:	4a69      	ldr	r2, [pc, #420]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e30:	4b66      	ldr	r3, [pc, #408]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3e:	4b63      	ldr	r3, [pc, #396]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e44:	4a61      	ldr	r2, [pc, #388]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b5b      	ldr	r3, [pc, #364]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e62:	4a5a      	ldr	r2, [pc, #360]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e6c:	4b57      	ldr	r3, [pc, #348]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b54      	ldr	r3, [pc, #336]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e80:	4a52      	ldr	r2, [pc, #328]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e82:	f043 0302 	orr.w	r3, r3, #2
 8000e86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e8a:	4b50      	ldr	r3, [pc, #320]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e98:	4b4c      	ldr	r3, [pc, #304]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e9e:	4a4b      	ldr	r2, [pc, #300]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ea8:	4b48      	ldr	r3, [pc, #288]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb6:	4b45      	ldr	r3, [pc, #276]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ebc:	4a43      	ldr	r2, [pc, #268]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ec2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ec6:	4b41      	ldr	r3, [pc, #260]	@ (8000fcc <MX_GPIO_Init+0x1e0>)
 8000ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ed4:	2332      	movs	r3, #50	@ 0x32
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee4:	230b      	movs	r3, #11
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	4838      	ldr	r0, [pc, #224]	@ (8000fd0 <MX_GPIO_Init+0x1e4>)
 8000ef0:	f001 fb64 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ef4:	2384      	movs	r3, #132	@ 0x84
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f00:	2302      	movs	r3, #2
 8000f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f04:	230b      	movs	r3, #11
 8000f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 031c 	add.w	r3, r7, #28
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4831      	ldr	r0, [pc, #196]	@ (8000fd4 <MX_GPIO_Init+0x1e8>)
 8000f10:	f001 fb54 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000f14:	2310      	movs	r3, #16
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	482b      	ldr	r0, [pc, #172]	@ (8000fd4 <MX_GPIO_Init+0x1e8>)
 8000f28:	f001 fb48 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000f2c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f32:	2303      	movs	r3, #3
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4825      	ldr	r0, [pc, #148]	@ (8000fd8 <MX_GPIO_Init+0x1ec>)
 8000f42:	f001 fb3b 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f54:	2302      	movs	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f58:	230b      	movs	r3, #11
 8000f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	481d      	ldr	r0, [pc, #116]	@ (8000fd8 <MX_GPIO_Init+0x1ec>)
 8000f64:	f001 fb2a 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <MX_GPIO_Init+0x1f0>)
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4819      	ldr	r0, [pc, #100]	@ (8000fe0 <MX_GPIO_Init+0x1f4>)
 8000f7c:	f001 fb1e 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000f80:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f92:	230b      	movs	r3, #11
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4810      	ldr	r0, [pc, #64]	@ (8000fe0 <MX_GPIO_Init+0x1f4>)
 8000f9e:	f001 fb0d 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000fa2:	23c0      	movs	r3, #192	@ 0xc0
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000fb2:	2308      	movs	r3, #8
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <MX_GPIO_Init+0x1ec>)
 8000fbe:	f001 fafd 	bl	80025bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3730      	adds	r7, #48	@ 0x30
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	44020c00 	.word	0x44020c00
 8000fd0:	42020800 	.word	0x42020800
 8000fd4:	42020000 	.word	0x42020000
 8000fd8:	42020400 	.word	0x42020400
 8000fdc:	10110000 	.word	0x10110000
 8000fe0:	42021800 	.word	0x42021800

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <Error_Handler+0x8>

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8001008:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <HAL_HASH_MspInit+0x34>)
 800100a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800100e:	4a09      	ldr	r2, [pc, #36]	@ (8001034 <HAL_HASH_MspInit+0x34>)
 8001010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001014:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_HASH_MspInit+0x34>)
 800101a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800101e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	44020c00 	.word	0x44020c00

08001038 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0cc      	sub	sp, #304	@ 0x130
 800103c:	af00      	add	r7, sp, #0
 800103e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001042:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001046:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001058:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800105c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001060:	4618      	mov	r0, r3
 8001062:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001066:	461a      	mov	r2, r3
 8001068:	2100      	movs	r1, #0
 800106a:	f00f f937 	bl	80102dc <memset>
  if(hi2c->Instance==I2C1)
 800106e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001072:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a33      	ldr	r2, [pc, #204]	@ (8001148 <HAL_I2C_MspInit+0x110>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d15e      	bne.n	800113e <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001080:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001084:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001088:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001094:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001098:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800109c:	2200      	movs	r2, #0
 800109e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 f9f4 	bl	8005494 <HAL_RCCEx_PeriphCLKConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 80010b2:	f7ff ff97 	bl	8000fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b25      	ldr	r3, [pc, #148]	@ (800114c <HAL_I2C_MspInit+0x114>)
 80010b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010bc:	4a23      	ldr	r2, [pc, #140]	@ (800114c <HAL_I2C_MspInit+0x114>)
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <HAL_I2C_MspInit+0x114>)
 80010c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010cc:	f003 0202 	and.w	r2, r3, #2
 80010d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80010de:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80010e2:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ec:	2312      	movs	r3, #18
 80010ee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010fe:	2304      	movs	r3, #4
 8001100:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001108:	4619      	mov	r1, r3
 800110a:	4811      	ldr	r0, [pc, #68]	@ (8001150 <HAL_I2C_MspInit+0x118>)
 800110c:	f001 fa56 	bl	80025bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001110:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_I2C_MspInit+0x114>)
 8001112:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001116:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <HAL_I2C_MspInit+0x114>)
 8001118:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800111c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001120:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_I2C_MspInit+0x114>)
 8001122:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001126:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800112a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800112e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001138:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800113c:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800113e:	bf00      	nop
 8001140:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40005400 	.word	0x40005400
 800114c:	44020c00 	.word	0x44020c00
 8001150:	42020400 	.word	0x42020400

08001154 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0c6      	sub	sp, #280	@ 0x118
 8001158:	af00      	add	r7, sp, #0
 800115a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800115e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001162:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001164:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800116c:	4618      	mov	r0, r3
 800116e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001172:	461a      	mov	r2, r3
 8001174:	2100      	movs	r1, #0
 8001176:	f00f f8b1 	bl	80102dc <memset>
  if(hrng->Instance==RNG)
 800117a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800117e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <HAL_RNG_MspInit+0xa8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d131      	bne.n	80011f0 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800118c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001190:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001194:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80011a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 f96e 	bl	8005494 <HAL_RCCEx_PeriphCLKConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 80011be:	f7ff ff11 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <HAL_RNG_MspInit+0xac>)
 80011c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <HAL_RNG_MspInit+0xac>)
 80011ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <HAL_RNG_MspInit+0xac>)
 80011d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011d8:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80011dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011ee:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80011f0:	bf00      	nop
 80011f2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	420c0800 	.word	0x420c0800
 8001200:	44020c00 	.word	0x44020c00

08001204 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0c6      	sub	sp, #280	@ 0x118
 8001208:	af00      	add	r7, sp, #0
 800120a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800120e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001212:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001214:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800121c:	4618      	mov	r0, r3
 800121e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001222:	461a      	mov	r2, r3
 8001224:	2100      	movs	r1, #0
 8001226:	f00f f859 	bl	80102dc <memset>
  if(hrtc->Instance==RTC)
 800122a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800122e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a21      	ldr	r2, [pc, #132]	@ (80012bc <HAL_RTC_MspInit+0xb8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d13a      	bne.n	80012b2 <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800123c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001240:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001244:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001250:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001258:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800125c:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001260:	f107 0310 	add.w	r3, r7, #16
 8001264:	4618      	mov	r0, r3
 8001266:	f004 f915 	bl	8005494 <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8001270:	f7ff feb8 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_RTC_MspInit+0xbc>)
 8001276:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800127a:	4a11      	ldr	r2, [pc, #68]	@ (80012c0 <HAL_RTC_MspInit+0xbc>)
 800127c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001280:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001284:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <HAL_RTC_MspInit+0xbc>)
 8001286:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800128a:	4a0d      	ldr	r2, [pc, #52]	@ (80012c0 <HAL_RTC_MspInit+0xbc>)
 800128c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001290:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <HAL_RTC_MspInit+0xbc>)
 8001296:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800129a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800129e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80012ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012b0:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80012b2:	bf00      	nop
 80012b4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	44007800 	.word	0x44007800
 80012c0:	44020c00 	.word	0x44020c00

080012c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0ce      	sub	sp, #312	@ 0x138
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012ce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80012d2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80012ec:	4618      	mov	r0, r3
 80012ee:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80012f2:	461a      	mov	r2, r3
 80012f4:	2100      	movs	r1, #0
 80012f6:	f00e fff1 	bl	80102dc <memset>
  if(hspi->Instance==SPI1)
 80012fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a49      	ldr	r2, [pc, #292]	@ (800142c <HAL_SPI_MspInit+0x168>)
 8001308:	4293      	cmp	r3, r2
 800130a:	f040 808a 	bne.w	8001422 <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800130e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001312:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001316:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001322:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001326:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800132a:	2200      	movs	r2, #0
 800132c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001330:	f107 0318 	add.w	r3, r7, #24
 8001334:	4618      	mov	r0, r3
 8001336:	f004 f8ad 	bl	8005494 <HAL_RCCEx_PeriphCLKConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001340:	f7ff fe50 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001344:	4b3a      	ldr	r3, [pc, #232]	@ (8001430 <HAL_SPI_MspInit+0x16c>)
 8001346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800134a:	4a39      	ldr	r2, [pc, #228]	@ (8001430 <HAL_SPI_MspInit+0x16c>)
 800134c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001350:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001354:	4b36      	ldr	r3, [pc, #216]	@ (8001430 <HAL_SPI_MspInit+0x16c>)
 8001356:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800135a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800135e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001362:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800136c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001370:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b2f      	ldr	r3, [pc, #188]	@ (8001430 <HAL_SPI_MspInit+0x16c>)
 8001374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001378:	4a2d      	ldr	r2, [pc, #180]	@ (8001430 <HAL_SPI_MspInit+0x16c>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001382:	4b2b      	ldr	r3, [pc, #172]	@ (8001430 <HAL_SPI_MspInit+0x16c>)
 8001384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001388:	f003 0201 	and.w	r2, r3, #1
 800138c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001390:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800139a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800139e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a0:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <HAL_SPI_MspInit+0x16c>)
 80013a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013a6:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <HAL_SPI_MspInit+0x16c>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <HAL_SPI_MspInit+0x16c>)
 80013b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b6:	f003 0208 	and.w	r2, r3, #8
 80013ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013cc:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013ce:	2360      	movs	r3, #96	@ 0x60
 80013d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013e6:	2305      	movs	r3, #5
 80013e8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80013f0:	4619      	mov	r1, r3
 80013f2:	4810      	ldr	r0, [pc, #64]	@ (8001434 <HAL_SPI_MspInit+0x170>)
 80013f4:	f001 f8e2 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013f8:	2380      	movs	r3, #128	@ 0x80
 80013fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001410:	2305      	movs	r3, #5
 8001412:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001416:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800141a:	4619      	mov	r1, r3
 800141c:	4806      	ldr	r0, [pc, #24]	@ (8001438 <HAL_SPI_MspInit+0x174>)
 800141e:	f001 f8cd 	bl	80025bc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001422:	bf00      	nop
 8001424:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40013000 	.word	0x40013000
 8001430:	44020c00 	.word	0x44020c00
 8001434:	42020000 	.word	0x42020000
 8001438:	42020c00 	.word	0x42020c00

0800143c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0d2      	sub	sp, #328	@ 0x148
 8001440:	af00      	add	r7, sp, #0
 8001442:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001446:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800144a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800145c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001460:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001464:	4618      	mov	r0, r3
 8001466:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800146a:	461a      	mov	r2, r3
 800146c:	2100      	movs	r1, #0
 800146e:	f00e ff35 	bl	80102dc <memset>
  if(huart->Instance==USART2)
 8001472:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001476:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4ac7      	ldr	r2, [pc, #796]	@ (800179c <HAL_UART_MspInit+0x360>)
 8001480:	4293      	cmp	r3, r2
 8001482:	f040 808a 	bne.w	800159a <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001486:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800148a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800148e:	f04f 0202 	mov.w	r2, #2
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800149a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800149e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014a2:	2200      	movs	r2, #0
 80014a4:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 fff2 	bl	8005494 <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 80014b6:	f7ff fd95 	bl	8000fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ba:	4bb9      	ldr	r3, [pc, #740]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 80014bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014c0:	4ab7      	ldr	r2, [pc, #732]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 80014c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80014ca:	4bb5      	ldr	r3, [pc, #724]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 80014cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014d0:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 80014d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80014e2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014e6:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e8:	4bad      	ldr	r3, [pc, #692]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 80014ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ee:	4aac      	ldr	r2, [pc, #688]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014f8:	4ba9      	ldr	r3, [pc, #676]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 80014fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014fe:	f003 0201 	and.w	r2, r3, #1
 8001502:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001506:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001510:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001514:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	4ba2      	ldr	r3, [pc, #648]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 8001518:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800151c:	4aa0      	ldr	r2, [pc, #640]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 800151e:	f043 0308 	orr.w	r3, r3, #8
 8001522:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001526:	4b9e      	ldr	r3, [pc, #632]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 8001528:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800152c:	f003 0208 	and.w	r2, r3, #8
 8001530:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001534:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800153e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001542:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001544:	2308      	movs	r3, #8
 8001546:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155c:	2307      	movs	r3, #7
 800155e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001566:	4619      	mov	r1, r3
 8001568:	488e      	ldr	r0, [pc, #568]	@ (80017a4 <HAL_UART_MspInit+0x368>)
 800156a:	f001 f827 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800156e:	2320      	movs	r3, #32
 8001570:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001586:	2307      	movs	r3, #7
 8001588:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001590:	4619      	mov	r1, r3
 8001592:	4885      	ldr	r0, [pc, #532]	@ (80017a8 <HAL_UART_MspInit+0x36c>)
 8001594:	f001 f812 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001598:	e0fb      	b.n	8001792 <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART3)
 800159a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800159e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a81      	ldr	r2, [pc, #516]	@ (80017ac <HAL_UART_MspInit+0x370>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	f040 808c 	bne.w	80016c6 <HAL_UART_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80015b2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80015b6:	f04f 0204 	mov.w	r2, #4
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80015c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015ca:	2200      	movs	r2, #0
 80015cc:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 ff5e 	bl	8005494 <HAL_RCCEx_PeriphCLKConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 80015de:	f7ff fd01 	bl	8000fe4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e2:	4b6f      	ldr	r3, [pc, #444]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 80015e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015e8:	4a6d      	ldr	r2, [pc, #436]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 80015ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ee:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80015f2:	4b6b      	ldr	r3, [pc, #428]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 80015f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015f8:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80015fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001600:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800160a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800160e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	4b63      	ldr	r3, [pc, #396]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 8001612:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001616:	4a62      	ldr	r2, [pc, #392]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001620:	4b5f      	ldr	r3, [pc, #380]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 8001622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001626:	f003 0202 	and.w	r2, r3, #2
 800162a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800162e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001638:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800163c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163e:	4b58      	ldr	r3, [pc, #352]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 8001640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001644:	4a56      	ldr	r2, [pc, #344]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800164e:	4b54      	ldr	r3, [pc, #336]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 8001650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001654:	f003 0208 	and.w	r2, r3, #8
 8001658:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800165c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001666:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800166a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800166c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001670:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001686:	2307      	movs	r3, #7
 8001688:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001690:	4619      	mov	r1, r3
 8001692:	4847      	ldr	r0, [pc, #284]	@ (80017b0 <HAL_UART_MspInit+0x374>)
 8001694:	f000 ff92 	bl	80025bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001698:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800169c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016b2:	2307      	movs	r3, #7
 80016b4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80016bc:	4619      	mov	r1, r3
 80016be:	483a      	ldr	r0, [pc, #232]	@ (80017a8 <HAL_UART_MspInit+0x36c>)
 80016c0:	f000 ff7c 	bl	80025bc <HAL_GPIO_Init>
}
 80016c4:	e065      	b.n	8001792 <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART6)
 80016c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80016ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a38      	ldr	r2, [pc, #224]	@ (80017b4 <HAL_UART_MspInit+0x378>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d15c      	bne.n	8001792 <HAL_UART_MspInit+0x356>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80016d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80016dc:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80016e0:	f04f 0220 	mov.w	r2, #32
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 80016ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80016f0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016f4:	2200      	movs	r2, #0
 80016f6:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fec9 	bl	8005494 <HAL_RCCEx_PeriphCLKConfig>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 8001708:	f7ff fc6c 	bl	8000fe4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800170c:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 800170e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001712:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 8001714:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001718:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800171c:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 800171e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001722:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8001726:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800172a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001734:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001738:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 800173c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001740:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <HAL_UART_MspInit+0x364>)
 800174c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001750:	f003 0204 	and.w	r2, r3, #4
 8001754:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001758:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001762:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001766:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001768:	23c0      	movs	r3, #192	@ 0xc0
 800176a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001780:	2307      	movs	r3, #7
 8001782:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001786:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800178a:	4619      	mov	r1, r3
 800178c:	480a      	ldr	r0, [pc, #40]	@ (80017b8 <HAL_UART_MspInit+0x37c>)
 800178e:	f000 ff15 	bl	80025bc <HAL_GPIO_Init>
}
 8001792:	bf00      	nop
 8001794:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40004400 	.word	0x40004400
 80017a0:	44020c00 	.word	0x44020c00
 80017a4:	42020000 	.word	0x42020000
 80017a8:	42020c00 	.word	0x42020c00
 80017ac:	40004800 	.word	0x40004800
 80017b0:	42020400 	.word	0x42020400
 80017b4:	40006400 	.word	0x40006400
 80017b8:	42020800 	.word	0x42020800

080017bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0c6      	sub	sp, #280	@ 0x118
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017c6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017ca:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80017d4:	4618      	mov	r0, r3
 80017d6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80017da:	461a      	mov	r2, r3
 80017dc:	2100      	movs	r1, #0
 80017de:	f00e fd7d 	bl	80102dc <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80017e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a22      	ldr	r2, [pc, #136]	@ (8001878 <HAL_PCD_MspInit+0xbc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d13b      	bne.n	800186c <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80017f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017f8:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0310 	mov.w	r3, #16
 8001804:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001808:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800180c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001810:	2230      	movs	r2, #48	@ 0x30
 8001812:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4618      	mov	r0, r3
 800181c:	f003 fe3a 	bl	8005494 <HAL_RCCEx_PeriphCLKConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8001826:	f7ff fbdd 	bl	8000fe4 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 800182a:	f002 fea9 	bl	8004580 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800182e:	4b13      	ldr	r3, [pc, #76]	@ (800187c <HAL_PCD_MspInit+0xc0>)
 8001830:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001834:	4a11      	ldr	r2, [pc, #68]	@ (800187c <HAL_PCD_MspInit+0xc0>)
 8001836:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800183a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <HAL_PCD_MspInit+0xc0>)
 8001840:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001844:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001848:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800184c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001856:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800185a:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	204a      	movs	r0, #74	@ 0x4a
 8001862:	f000 fd4b 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8001866:	204a      	movs	r0, #74	@ 0x4a
 8001868:	f000 fd62 	bl	8002330 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 800186c:	bf00      	nop
 800186e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40016000 	.word	0x40016000
 800187c:	44020c00 	.word	0x44020c00

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <NMI_Handler+0x4>

08001888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <HardFault_Handler+0x4>

08001890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <MemManage_Handler+0x4>

08001898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d6:	f000 fc15 	bl	8002104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}

080018de <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 fa6e 	bl	8001dc4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <USB_DRD_FS_IRQHandler+0x10>)
 80018f2:	f001 fad7 	bl	8002ea4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200004d0 	.word	0x200004d0

08001900 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e00a      	b.n	8001928 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001912:	f3af 8000 	nop.w
 8001916:	4601      	mov	r1, r0
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	1c5a      	adds	r2, r3, #1
 800191c:	60ba      	str	r2, [r7, #8]
 800191e:	b2ca      	uxtb	r2, r1
 8001920:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	dbf0      	blt.n	8001912 <_read+0x12>
  }

  return len;
 8001930:	687b      	ldr	r3, [r7, #4]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e009      	b.n	8001960 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	60ba      	str	r2, [r7, #8]
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fabb 	bl	8001ed0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	dbf1      	blt.n	800194c <_write+0x12>
  }
  return len;
 8001968:	687b      	ldr	r3, [r7, #4]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_close>:

int _close(int file)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800199a:	605a      	str	r2, [r3, #4]
  return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <_isatty>:

int _isatty(int file)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f00e fcb4 	bl	8010378 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	200a0000 	.word	0x200a0000
 8001a3c:	00000500 	.word	0x00000500
 8001a40:	20000a90 	.word	0x20000a90
 8001a44:	200113b0 	.word	0x200113b0

08001a48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a4e:	4b35      	ldr	r3, [pc, #212]	@ (8001b24 <SystemInit+0xdc>)
 8001a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a54:	4a33      	ldr	r2, [pc, #204]	@ (8001b24 <SystemInit+0xdc>)
 8001a56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a5a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001a5e:	4b32      	ldr	r3, [pc, #200]	@ (8001b28 <SystemInit+0xe0>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a64:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <SystemInit+0xe0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <SystemInit+0xe0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001a70:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <SystemInit+0xe0>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	492c      	ldr	r1, [pc, #176]	@ (8001b28 <SystemInit+0xe0>)
 8001a76:	4b2d      	ldr	r3, [pc, #180]	@ (8001b2c <SystemInit+0xe4>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <SystemInit+0xe0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001a82:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <SystemInit+0xe0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001a88:	4b27      	ldr	r3, [pc, #156]	@ (8001b28 <SystemInit+0xe0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001a8e:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <SystemInit+0xe0>)
 8001a90:	4a27      	ldr	r2, [pc, #156]	@ (8001b30 <SystemInit+0xe8>)
 8001a92:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001a94:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <SystemInit+0xe0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001a9a:	4b23      	ldr	r3, [pc, #140]	@ (8001b28 <SystemInit+0xe0>)
 8001a9c:	4a24      	ldr	r2, [pc, #144]	@ (8001b30 <SystemInit+0xe8>)
 8001a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001aa0:	4b21      	ldr	r3, [pc, #132]	@ (8001b28 <SystemInit+0xe0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <SystemInit+0xe0>)
 8001aa8:	4a21      	ldr	r2, [pc, #132]	@ (8001b30 <SystemInit+0xe8>)
 8001aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001aac:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <SystemInit+0xe0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <SystemInit+0xe0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b28 <SystemInit+0xe0>)
 8001ab8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001abc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <SystemInit+0xe0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ac4:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <SystemInit+0xdc>)
 8001ac6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001aca:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001acc:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <SystemInit+0xec>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001ad4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001adc:	d003      	beq.n	8001ae6 <SystemInit+0x9e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001ae4:	d117      	bne.n	8001b16 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001ae6:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <SystemInit+0xec>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <SystemInit+0xec>)
 8001af4:	4a10      	ldr	r2, [pc, #64]	@ (8001b38 <SystemInit+0xf0>)
 8001af6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <SystemInit+0xec>)
 8001afa:	4a10      	ldr	r2, [pc, #64]	@ (8001b3c <SystemInit+0xf4>)
 8001afc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <SystemInit+0xec>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a0c      	ldr	r2, [pc, #48]	@ (8001b34 <SystemInit+0xec>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <SystemInit+0xec>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4a09      	ldr	r2, [pc, #36]	@ (8001b34 <SystemInit+0xec>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	61d3      	str	r3, [r2, #28]
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00
 8001b28:	44020c00 	.word	0x44020c00
 8001b2c:	eae2eae3 	.word	0xeae2eae3
 8001b30:	01010280 	.word	0x01010280
 8001b34:	40022000 	.word	0x40022000
 8001b38:	08192a3b 	.word	0x08192a3b
 8001b3c:	4c5d6e7f 	.word	0x4c5d6e7f

08001b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b40:	480d      	ldr	r0, [pc, #52]	@ (8001b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b42:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b44:	f7ff ff80 	bl	8001a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	@ (8001b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <LoopForever+0xe>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	@ (8001b8c <LoopForever+0x16>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b6e:	f00e fc09 	bl	8010384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b72:	f7fe fd97 	bl	80006a4 <main>

08001b76 <LoopForever>:

LoopForever:
    b LoopForever
 8001b76:	e7fe      	b.n	8001b76 <LoopForever>
  ldr   r0, =_estack
 8001b78:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001b84:	0801141c 	.word	0x0801141c
  ldr r2, =_sbss
 8001b88:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001b8c:	200113b0 	.word	0x200113b0

08001b90 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC1_IRQHandler>
	...

08001b94 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	@ 0x30
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d009      	beq.n	8001bbc <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <BSP_LED_Init+0x28>
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d003      	beq.n	8001bbc <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001bb4:	f06f 0301 	mvn.w	r3, #1
 8001bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bba:	e055      	b.n	8001c68 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d10f      	bne.n	8001be2 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <BSP_LED_Init+0xe0>)
 8001bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c74 <BSP_LED_Init+0xe0>)
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bd2:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <BSP_LED_Init+0xe0>)
 8001bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	e021      	b.n	8001c26 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10f      	bne.n	8001c08 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8001be8:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <BSP_LED_Init+0xe0>)
 8001bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bee:	4a21      	ldr	r2, [pc, #132]	@ (8001c74 <BSP_LED_Init+0xe0>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <BSP_LED_Init+0xe0>)
 8001bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	e00e      	b.n	8001c26 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <BSP_LED_Init+0xe0>)
 8001c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c0e:	4a19      	ldr	r2, [pc, #100]	@ (8001c74 <BSP_LED_Init+0xe0>)
 8001c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c18:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <BSP_LED_Init+0xe0>)
 8001c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	4a13      	ldr	r2, [pc, #76]	@ (8001c78 <BSP_LED_Init+0xe4>)
 8001c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c2e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c7c <BSP_LED_Init+0xe8>)
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	f107 0218 	add.w	r2, r7, #24
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fcb6 	bl	80025bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <BSP_LED_Init+0xe8>)
 8001c54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	4a07      	ldr	r2, [pc, #28]	@ (8001c78 <BSP_LED_Init+0xe4>)
 8001c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c60:	2200      	movs	r2, #0
 8001c62:	4619      	mov	r1, r3
 8001c64:	f000 fdfc 	bl	8002860 <HAL_GPIO_WritePin>
  }

  return ret;
 8001c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3730      	adds	r7, #48	@ 0x30
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	44020c00 	.word	0x44020c00
 8001c78:	080113a4 	.word	0x080113a4
 8001c7c:	2000000c 	.word	0x2000000c

08001c80 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d009      	beq.n	8001ca8 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <BSP_LED_Toggle+0x28>
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d003      	beq.n	8001ca8 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ca0:	f06f 0301 	mvn.w	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e00b      	b.n	8001cc0 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4a08      	ldr	r2, [pc, #32]	@ (8001ccc <BSP_LED_Toggle+0x4c>)
 8001cac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4907      	ldr	r1, [pc, #28]	@ (8001cd0 <BSP_LED_Toggle+0x50>)
 8001cb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f000 fde8 	bl	8002890 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	2000000c 	.word	0x2000000c
 8001cd0:	080113a4 	.word	0x080113a4

08001cd4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460a      	mov	r2, r1
 8001cde:	71fb      	strb	r3, [r7, #7]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001ce4:	4b30      	ldr	r3, [pc, #192]	@ (8001da8 <BSP_PB_Init+0xd4>)
 8001ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cea:	4a2f      	ldr	r2, [pc, #188]	@ (8001da8 <BSP_PB_Init+0xd4>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8001da8 <BSP_PB_Init+0xd4>)
 8001cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001d02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d06:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	4a23      	ldr	r2, [pc, #140]	@ (8001dac <BSP_PB_Init+0xd8>)
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	f107 020c 	add.w	r2, r7, #12
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fc47 	bl	80025bc <HAL_GPIO_Init>
 8001d2e:	e036      	b.n	8001d9e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001d30:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <BSP_PB_Init+0xdc>)
 8001d32:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	4a1d      	ldr	r2, [pc, #116]	@ (8001dac <BSP_PB_Init+0xd8>)
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	f107 020c 	add.w	r2, r7, #12
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 fc3a 	bl	80025bc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001d48:	79fa      	ldrb	r2, [r7, #7]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4a18      	ldr	r2, [pc, #96]	@ (8001db4 <BSP_PB_Init+0xe0>)
 8001d54:	441a      	add	r2, r3
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	4917      	ldr	r1, [pc, #92]	@ (8001db8 <BSP_PB_Init+0xe4>)
 8001d5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4610      	mov	r0, r2
 8001d62:	f000 fbcf 	bl	8002504 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001d66:	79fa      	ldrb	r2, [r7, #7]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4a10      	ldr	r2, [pc, #64]	@ (8001db4 <BSP_PB_Init+0xe0>)
 8001d72:	1898      	adds	r0, r3, r2
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4a11      	ldr	r2, [pc, #68]	@ (8001dbc <BSP_PB_Init+0xe8>)
 8001d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2100      	movs	r1, #0
 8001d80:	f000 fb94 	bl	80024ac <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001d84:	2018      	movs	r0, #24
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc0 <BSP_PB_Init+0xec>)
 8001d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4619      	mov	r1, r3
 8001d92:	f000 fab3 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001d96:	2318      	movs	r3, #24
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fac9 	bl	8002330 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	44020c00 	.word	0x44020c00
 8001dac:	20000018 	.word	0x20000018
 8001db0:	10110000 	.word	0x10110000
 8001db4:	20000a94 	.word	0x20000a94
 8001db8:	080113ac 	.word	0x080113ac
 8001dbc:	2000001c 	.word	0x2000001c
 8001dc0:	20000020 	.word	0x20000020

08001dc4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001dce:	79fa      	ldrb	r2, [r7, #7]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <BSP_PB_IRQHandler+0x28>)
 8001dda:	4413      	add	r3, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 fba5 	bl	800252c <HAL_EXTI_IRQHandler>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000a94 	.word	0x20000a94

08001df0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e1e:	f06f 0301 	mvn.w	r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e018      	b.n	8001e58 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2294      	movs	r2, #148	@ 0x94
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001e64 <BSP_COM_Init+0x5c>)
 8001e30:	4413      	add	r3, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f870 	bl	8001f18 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	2294      	movs	r2, #148	@ 0x94
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	4a08      	ldr	r2, [pc, #32]	@ (8001e64 <BSP_COM_Init+0x5c>)
 8001e42:	4413      	add	r3, r2
 8001e44:	6839      	ldr	r1, [r7, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f80e 	bl	8001e68 <MX_USART_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001e52:	f06f 0303 	mvn.w	r3, #3
 8001e56:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001e58:	68fb      	ldr	r3, [r7, #12]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000aa0 	.word	0x20000aa0

08001e68 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001e72:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <MX_USART_Init+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	220c      	movs	r2, #12
 8001e86:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	895b      	ldrh	r3, [r3, #10]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	891b      	ldrh	r3, [r3, #8]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	899b      	ldrh	r3, [r3, #12]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001eb4:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f008 fffe 	bl	800aebe <HAL_UART_Init>
 8001ec2:	4603      	mov	r3, r0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001ed8:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <__io_putchar+0x30>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	2394      	movs	r3, #148	@ 0x94
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <__io_putchar+0x34>)
 8001ee6:	1898      	adds	r0, r3, r2
 8001ee8:	1d39      	adds	r1, r7, #4
 8001eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f009 f835 	bl	800af5e <HAL_UART_Transmit>
  return ch;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000b34 	.word	0x20000b34
 8001f04:	20000aa0 	.word	0x20000aa0

08001f08 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f7ff ff6f 	bl	8001df0 <BSP_PB_Callback>
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001f20:	4b27      	ldr	r3, [pc, #156]	@ (8001fc0 <COM1_MspInit+0xa8>)
 8001f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f26:	4a26      	ldr	r2, [pc, #152]	@ (8001fc0 <COM1_MspInit+0xa8>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f30:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <COM1_MspInit+0xa8>)
 8001f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001f3e:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <COM1_MspInit+0xa8>)
 8001f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f44:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc0 <COM1_MspInit+0xa8>)
 8001f46:	f043 0308 	orr.w	r3, r3, #8
 8001f4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <COM1_MspInit+0xa8>)
 8001f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001f5c:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <COM1_MspInit+0xa8>)
 8001f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f62:	4a17      	ldr	r2, [pc, #92]	@ (8001fc0 <COM1_MspInit+0xa8>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f68:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f6c:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <COM1_MspInit+0xa8>)
 8001f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001f7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f7e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001f84:	2302      	movs	r3, #2
 8001f86:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001f8c:	2307      	movs	r3, #7
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	480b      	ldr	r0, [pc, #44]	@ (8001fc4 <COM1_MspInit+0xac>)
 8001f98:	f000 fb10 	bl	80025bc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001f9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fa0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4804      	ldr	r0, [pc, #16]	@ (8001fc4 <COM1_MspInit+0xac>)
 8001fb2:	f000 fb03 	bl	80025bc <HAL_GPIO_Init>
}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	@ 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	44020c00 	.word	0x44020c00
 8001fc4:	42020c00 	.word	0x42020c00

08001fc8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 f98a 	bl	80022e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001fd2:	f003 f8d5 	bl	8005180 <HAL_RCC_GetSysClockFreq>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <HAL_Init+0x44>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	490b      	ldr	r1, [pc, #44]	@ (8002010 <HAL_Init+0x48>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <HAL_Init+0x4c>)
 8001fea:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001fec:	2004      	movs	r0, #4
 8001fee:	f000 f9cf 	bl	8002390 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff2:	200f      	movs	r0, #15
 8001ff4:	f000 f810 	bl	8002018 <HAL_InitTick>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e002      	b.n	8002008 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002002:	f7fe fff5 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	44020c00 	.word	0x44020c00
 8002010:	0801138c 	.word	0x0801138c
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002024:	4b33      	ldr	r3, [pc, #204]	@ (80020f4 <HAL_InitTick+0xdc>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e05c      	b.n	80020ea <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002030:	4b31      	ldr	r3, [pc, #196]	@ (80020f8 <HAL_InitTick+0xe0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b04      	cmp	r3, #4
 800203a:	d10c      	bne.n	8002056 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800203c:	4b2f      	ldr	r3, [pc, #188]	@ (80020fc <HAL_InitTick+0xe4>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b2c      	ldr	r3, [pc, #176]	@ (80020f4 <HAL_InitTick+0xdc>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800204a:	fbb3 f3f1 	udiv	r3, r3, r1
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	e037      	b.n	80020c6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002056:	f000 f9f3 	bl	8002440 <HAL_SYSTICK_GetCLKSourceConfig>
 800205a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d023      	beq.n	80020aa <HAL_InitTick+0x92>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d82d      	bhi.n	80020c4 <HAL_InitTick+0xac>
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_InitTick+0x5e>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d00d      	beq.n	8002090 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002074:	e026      	b.n	80020c4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002076:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <HAL_InitTick+0xe4>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <HAL_InitTick+0xdc>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4619      	mov	r1, r3
 8002080:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002084:	fbb3 f3f1 	udiv	r3, r3, r1
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	60fb      	str	r3, [r7, #12]
        break;
 800208e:	e01a      	b.n	80020c6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002090:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <HAL_InitTick+0xdc>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209a:	fbb3 f3f2 	udiv	r3, r3, r2
 800209e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	60fb      	str	r3, [r7, #12]
        break;
 80020a8:	e00d      	b.n	80020c6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80020aa:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_InitTick+0xdc>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80020b8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	60fb      	str	r3, [r7, #12]
        break;
 80020c2:	e000      	b.n	80020c6 <HAL_InitTick+0xae>
        break;
 80020c4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f940 	bl	800234c <HAL_SYSTICK_Config>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e009      	b.n	80020ea <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d6:	2200      	movs	r2, #0
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	f04f 30ff 	mov.w	r0, #4294967295
 80020de:	f000 f90d 	bl	80022fc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80020e2:	4a07      	ldr	r2, [pc, #28]	@ (8002100 <HAL_InitTick+0xe8>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000028 	.word	0x20000028
 80020f8:	e000e010 	.word	0xe000e010
 80020fc:	20000004 	.word	0x20000004
 8002100:	20000024 	.word	0x20000024

08002104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002108:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_IncTick+0x20>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <HAL_IncTick+0x24>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4413      	add	r3, r2
 8002114:	4a04      	ldr	r2, [pc, #16]	@ (8002128 <HAL_IncTick+0x24>)
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000028 	.word	0x20000028
 8002128:	20000b38 	.word	0x20000b38

0800212c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return uwTick;
 8002130:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <HAL_GetTick+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000b38 	.word	0x20000b38

08002144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff ffee 	bl	800212c <HAL_GetTick>
 8002150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d005      	beq.n	800216a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215e:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <HAL_Delay+0x44>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800216a:	bf00      	nop
 800216c:	f7ff ffde 	bl	800212c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	429a      	cmp	r2, r3
 800217a:	d8f7      	bhi.n	800216c <HAL_Delay+0x28>
  {
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000028 	.word	0x20000028

0800218c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a8:	4013      	ands	r3, r2
 80021aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021be:	4a04      	ldr	r2, [pc, #16]	@ (80021d0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	60d3      	str	r3, [r2, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <__NVIC_GetPriorityGrouping+0x18>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	f003 0307 	and.w	r3, r3, #7
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	db0b      	blt.n	800221a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	f003 021f 	and.w	r2, r3, #31
 8002208:	4907      	ldr	r1, [pc, #28]	@ (8002228 <__NVIC_EnableIRQ+0x38>)
 800220a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2001      	movs	r0, #1
 8002212:	fa00 f202 	lsl.w	r2, r0, r2
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000e100 	.word	0xe000e100

0800222c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800223c:	2b00      	cmp	r3, #0
 800223e:	db0a      	blt.n	8002256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	490c      	ldr	r1, [pc, #48]	@ (8002278 <__NVIC_SetPriority+0x4c>)
 8002246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	440b      	add	r3, r1
 8002250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002254:	e00a      	b.n	800226c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4908      	ldr	r1, [pc, #32]	@ (800227c <__NVIC_SetPriority+0x50>)
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	3b04      	subs	r3, #4
 8002264:	0112      	lsls	r2, r2, #4
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	440b      	add	r3, r1
 800226a:	761a      	strb	r2, [r3, #24]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000e100 	.word	0xe000e100
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	@ 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f1c3 0307 	rsb	r3, r3, #7
 800229a:	2b04      	cmp	r3, #4
 800229c:	bf28      	it	cs
 800229e:	2304      	movcs	r3, #4
 80022a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d902      	bls.n	80022b0 <NVIC_EncodePriority+0x30>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3b03      	subs	r3, #3
 80022ae:	e000      	b.n	80022b2 <NVIC_EncodePriority+0x32>
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	401a      	ands	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	4313      	orrs	r3, r2
         );
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3724      	adds	r7, #36	@ 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff4c 	bl	800218c <__NVIC_SetPriorityGrouping>
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800230a:	f7ff ff63 	bl	80021d4 <__NVIC_GetPriorityGrouping>
 800230e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	6978      	ldr	r0, [r7, #20]
 8002316:	f7ff ffb3 	bl	8002280 <NVIC_EncodePriority>
 800231a:	4602      	mov	r2, r0
 800231c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff82 	bl	800222c <__NVIC_SetPriority>
}
 8002328:	bf00      	nop
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff56 	bl	80021f0 <__NVIC_EnableIRQ>
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800235c:	d301      	bcc.n	8002362 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800235e:	2301      	movs	r3, #1
 8002360:	e00d      	b.n	800237e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <HAL_SYSTICK_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800236a:	4b08      	ldr	r3, [pc, #32]	@ (800238c <HAL_SYSTICK_Config+0x40>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_SYSTICK_Config+0x40>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a05      	ldr	r2, [pc, #20]	@ (800238c <HAL_SYSTICK_Config+0x40>)
 8002376:	f043 0303 	orr.w	r3, r3, #3
 800237a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b04      	cmp	r3, #4
 800239c:	d844      	bhi.n	8002428 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800239e:	a201      	add	r2, pc, #4	@ (adr r2, 80023a4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023c7 	.word	0x080023c7
 80023a8:	080023e5 	.word	0x080023e5
 80023ac:	08002407 	.word	0x08002407
 80023b0:	08002429 	.word	0x08002429
 80023b4:	080023b9 	.word	0x080023b9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80023b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002438 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6013      	str	r3, [r2, #0]
      break;
 80023c4:	e031      	b.n	800242a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002438 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80023d2:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80023d8:	4a18      	ldr	r2, [pc, #96]	@ (800243c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023da:	f023 030c 	bic.w	r3, r3, #12
 80023de:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80023e2:	e022      	b.n	800242a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80023e4:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a13      	ldr	r2, [pc, #76]	@ (8002438 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023ea:	f023 0304 	bic.w	r3, r3, #4
 80023ee:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80023f0:	4b12      	ldr	r3, [pc, #72]	@ (800243c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80023f6:	f023 030c 	bic.w	r3, r3, #12
 80023fa:	4a10      	ldr	r2, [pc, #64]	@ (800243c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002404:	e011      	b.n	800242a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002406:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a0b      	ldr	r2, [pc, #44]	@ (8002438 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002412:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002414:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002418:	f023 030c 	bic.w	r3, r3, #12
 800241c:	4a07      	ldr	r2, [pc, #28]	@ (800243c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800241e:	f043 0308 	orr.w	r3, r3, #8
 8002422:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002426:	e000      	b.n	800242a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002428:	bf00      	nop
  }
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000e010 	.word	0xe000e010
 800243c:	44020c00 	.word	0x44020c00

08002440 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002446:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002452:	2304      	movs	r3, #4
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	e01e      	b.n	8002496 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002458:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800245a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b08      	cmp	r3, #8
 8002468:	d00f      	beq.n	800248a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d80f      	bhi.n	8002490 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b04      	cmp	r3, #4
 800247a:	d003      	beq.n	8002484 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800247c:	e008      	b.n	8002490 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
        break;
 8002482:	e008      	b.n	8002496 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002484:	2301      	movs	r3, #1
 8002486:	607b      	str	r3, [r7, #4]
        break;
 8002488:	e005      	b.n	8002496 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800248a:	2302      	movs	r3, #2
 800248c:	607b      	str	r3, [r7, #4]
        break;
 800248e:	e002      	b.n	8002496 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002490:	2300      	movs	r3, #0
 8002492:	607b      	str	r3, [r7, #4]
        break;
 8002494:	bf00      	nop
    }
  }
  return systick_source;
 8002496:	687b      	ldr	r3, [r7, #4]
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e010 	.word	0xe000e010
 80024a8:	44020c00 	.word	0x44020c00

080024ac <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	460b      	mov	r3, r1
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80024be:	7afb      	ldrb	r3, [r7, #11]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d011      	beq.n	80024e8 <HAL_EXTI_RegisterCallback+0x3c>
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	dc13      	bgt.n	80024f0 <HAL_EXTI_RegisterCallback+0x44>
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <HAL_EXTI_RegisterCallback+0x26>
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d007      	beq.n	80024e0 <HAL_EXTI_RegisterCallback+0x34>
 80024d0:	e00e      	b.n	80024f0 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	609a      	str	r2, [r3, #8]
      break;
 80024de:	e00a      	b.n	80024f6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	605a      	str	r2, [r3, #4]
      break;
 80024e6:	e006      	b.n	80024f6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	609a      	str	r2, [r3, #8]
      break;
 80024ee:	e002      	b.n	80024f6 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	75fb      	strb	r3, [r7, #23]
      break;
 80024f4:	bf00      	nop
  }

  return status;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	371c      	adds	r7, #28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e003      	b.n	8002520 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800251e:	2300      	movs	r3, #0
  }
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	2201      	movs	r2, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	4b17      	ldr	r3, [pc, #92]	@ (80025b4 <HAL_EXTI_IRQHandler+0x88>)
 8002556:	4413      	add	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	4b0d      	ldr	r3, [pc, #52]	@ (80025b8 <HAL_EXTI_IRQHandler+0x8c>)
 8002584:	4413      	add	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d009      	beq.n	80025ac <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4798      	blx	r3
    }
  }
}
 80025ac:	bf00      	nop
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	4402200c 	.word	0x4402200c
 80025b8:	44022010 	.word	0x44022010

080025bc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80025ca:	e136      	b.n	800283a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2101      	movs	r1, #1
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	4013      	ands	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8128 	beq.w	8002834 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x38>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b12      	cmp	r3, #18
 80025f2:	d125      	bne.n	8002640 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002600:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4013      	ands	r3, r2
 8002616:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f003 020f 	and.w	r2, r3, #15
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	08da      	lsrs	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3208      	adds	r2, #8
 800263a:	6979      	ldr	r1, [r7, #20]
 800263c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4013      	ands	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 0203 	and.w	r2, r3, #3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	4313      	orrs	r3, r2
 800266c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d00b      	beq.n	8002694 <HAL_GPIO_Init+0xd8>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d007      	beq.n	8002694 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002688:	2b11      	cmp	r3, #17
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b12      	cmp	r3, #18
 8002692:	d130      	bne.n	80026f6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4013      	ands	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ca:	2201      	movs	r2, #1
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4013      	ands	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	f003 0201 	and.w	r2, r3, #1
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d017      	beq.n	800272e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4013      	ands	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d07c      	beq.n	8002834 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800273a:	4a47      	ldr	r2, [pc, #284]	@ (8002858 <HAL_GPIO_Init+0x29c>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	3318      	adds	r3, #24
 8002742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002746:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	220f      	movs	r2, #15
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4013      	ands	r3, r2
 800275c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	0a9a      	lsrs	r2, r3, #10
 8002762:	4b3e      	ldr	r3, [pc, #248]	@ (800285c <HAL_GPIO_Init+0x2a0>)
 8002764:	4013      	ands	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	f002 0203 	and.w	r2, r2, #3
 800276c:	00d2      	lsls	r2, r2, #3
 800276e:	4093      	lsls	r3, r2
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002776:	4938      	ldr	r1, [pc, #224]	@ (8002858 <HAL_GPIO_Init+0x29c>)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	3318      	adds	r3, #24
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002784:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <HAL_GPIO_Init+0x29c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43db      	mvns	r3, r3
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4013      	ands	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80027a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002858 <HAL_GPIO_Init+0x29c>)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80027ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002858 <HAL_GPIO_Init+0x29c>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4013      	ands	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80027d2:	4a21      	ldr	r2, [pc, #132]	@ (8002858 <HAL_GPIO_Init+0x29c>)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80027d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002858 <HAL_GPIO_Init+0x29c>)
 80027da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027de:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43db      	mvns	r3, r3
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	4013      	ands	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80027fe:	4a16      	ldr	r2, [pc, #88]	@ (8002858 <HAL_GPIO_Init+0x29c>)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002806:	4b14      	ldr	r3, [pc, #80]	@ (8002858 <HAL_GPIO_Init+0x29c>)
 8002808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800280c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	43db      	mvns	r3, r3
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4013      	ands	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800282c:	4a0a      	ldr	r2, [pc, #40]	@ (8002858 <HAL_GPIO_Init+0x29c>)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	3301      	adds	r3, #1
 8002838:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	f47f aec1 	bne.w	80025cc <HAL_GPIO_Init+0x10>
  }
}
 800284a:	bf00      	nop
 800284c:	bf00      	nop
 800284e:	371c      	adds	r7, #28
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	44022000 	.word	0x44022000
 800285c:	002f7f7f 	.word	0x002f7f7f

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800287c:	e002      	b.n	8002884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4013      	ands	r3, r2
 80028a8:	041a      	lsls	r2, r3, #16
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43d9      	mvns	r1, r3
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	400b      	ands	r3, r1
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	619a      	str	r2, [r3, #24]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e02a      	b.n	800292c <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe fb88 	bl	8001000 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 8002906:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	68f9      	ldr	r1, [r7, #12]
 8002910:	430b      	orrs	r3, r1
 8002912:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e08d      	b.n	8002a62 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe fb6c 	bl	8001038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2224      	movs	r2, #36	@ 0x24
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002984:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002994:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d107      	bne.n	80029ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	e006      	b.n	80029bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d108      	bne.n	80029d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	e007      	b.n	80029e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69d9      	ldr	r1, [r3, #28]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1a      	ldr	r2, [r3, #32]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d138      	bne.n	8002af2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e032      	b.n	8002af4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2224      	movs	r2, #36	@ 0x24
 8002a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002abc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d139      	bne.n	8002b8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e033      	b.n	8002b8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2224      	movs	r2, #36	@ 0x24
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0201 	orr.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e000      	b.n	8002b8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b8a:	2302      	movs	r3, #2
  }
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002ba4:	230a      	movs	r3, #10
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002ba8:	e002      	b.n	8002bb0 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f9      	bne.n	8002baa <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	0c1b      	lsrs	r3, r3, #16
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bcc:	b29b      	uxth	r3, r3
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002be6:	230a      	movs	r3, #10
 8002be8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002bea:	e002      	b.n	8002bf2 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f9      	bne.n	8002bec <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0c1b      	lsrs	r3, r3, #16
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0e:	b29b      	uxth	r3, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002c28:	230a      	movs	r3, #10
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002c2c:	e002      	b.n	8002c34 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f9      	bne.n	8002c2e <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8002c3a:	887b      	ldrh	r3, [r7, #2]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c50:	b29b      	uxth	r3, r3
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af02      	add	r7, sp, #8
 8002c64:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0f3      	b.n	8002e58 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7fe fd99 	bl	80017bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f008 ff59 	bl	800bb4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7c1a      	ldrb	r2, [r3, #16]
 8002ca4:	f88d 2000 	strb.w	r2, [sp]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cac:	f008 ff1d 	bl	800baea <USB_CoreInit>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0ca      	b.n	8002e58 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f008 ff55 	bl	800bb78 <USB_SetCurrentMode>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0bb      	b.n	8002e58 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	e03f      	b.n	8002d66 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3315      	adds	r3, #21
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	3314      	adds	r3, #20
 8002d0a:	7bfa      	ldrb	r2, [r7, #15]
 8002d0c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3317      	adds	r3, #23
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	3324      	adds	r3, #36	@ 0x24
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	440b      	add	r3, r1
 8002d44:	3328      	adds	r3, #40	@ 0x28
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	3301      	adds	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	791b      	ldrb	r3, [r3, #4]
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d3ba      	bcc.n	8002ce6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
 8002d74:	e044      	b.n	8002e00 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	440b      	add	r3, r1
 8002d84:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	440b      	add	r3, r1
 8002db0:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	791b      	ldrb	r3, [r3, #4]
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d3b5      	bcc.n	8002d76 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	7c1a      	ldrb	r2, [r3, #16]
 8002e12:	f88d 2000 	strb.w	r2, [sp]
 8002e16:	3304      	adds	r3, #4
 8002e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e1a:	f008 fed0 	bl	800bbbe <USB_DevInit>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e013      	b.n	8002e58 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7b1b      	ldrb	r3, [r3, #12]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d102      	bne.n	8002e4c <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f001 fb6b 	bl	8004522 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f00a fd29 	bl	800d8a8 <USB_DevDisconnect>

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_PCD_Start+0x16>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e012      	b.n	8002e9c <HAL_PCD_Start+0x3c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f008 fe4f 	bl	800bb26 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f00a fcfa 	bl	800d886 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f00a fd0a 	bl	800d8ca <USB_ReadInterrupts>
 8002eb6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 faf2 	bl	80034ac <PCD_EP_ISR_Handler>

    return;
 8002ec8:	e0de      	b.n	8003088 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d010      	beq.n	8002ef6 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8002ee2:	400b      	ands	r3, r1
 8002ee4:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f00b fbbf 	bl	800e66a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002eec:	2100      	movs	r1, #0
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f8e1 	bl	80030b6 <HAL_PCD_SetAddress>

    return;
 8002ef4:	e0c8      	b.n	8003088 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d009      	beq.n	8002f14 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8002f0e:	400b      	ands	r3, r1
 8002f10:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002f12:	e0b9      	b.n	8003088 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002f30:	e0aa      	b.n	8003088 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d029      	beq.n	8002f90 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0204 	bic.w	r2, r2, #4
 8002f4a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0208 	bic.w	r2, r2, #8
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f6e:	2100      	movs	r1, #0
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f001 faf8 	bl	8004566 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f893 	bl	80030a2 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002f8a:	400b      	ands	r3, r1
 8002f8c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002f8e:	e07b      	b.n	8003088 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d01c      	beq.n	8002fd4 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0208 	orr.w	r2, r2, #8
 8002fa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8002fb8:	400b      	ands	r3, r1
 8002fba:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0204 	orr.w	r2, r2, #4
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f85e 	bl	800308e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fd2:	e059      	b.n	8003088 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d033      	beq.n	8003046 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8002fec:	400b      	ands	r3, r1
 8002fee:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d121      	bne.n	800303e <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0204 	orr.w	r2, r2, #4
 8003008:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0208 	orr.w	r2, r2, #8
 8003018:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003034:	2101      	movs	r1, #1
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f001 fa95 	bl	8004566 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800303c:	e024      	b.n	8003088 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f825 	bl	800308e <HAL_PCD_SuspendCallback>
    return;
 8003044:	e020      	b.n	8003088 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00c      	beq.n	800306a <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 800305e:	400b      	ands	r3, r1
 8003060:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f00b faf3 	bl	800e64e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003068:	e00e      	b.n	8003088 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d009      	beq.n	8003088 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8003082:	400b      	ands	r3, r1
 8003084:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003086:	bf00      	nop
  }
}
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_PCD_SetAddress+0x1a>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e012      	b.n	80030f6 <HAL_PCD_SetAddress+0x40>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f00a fbba 	bl	800d860 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	4608      	mov	r0, r1
 8003108:	4611      	mov	r1, r2
 800310a:	461a      	mov	r2, r3
 800310c:	4603      	mov	r3, r0
 800310e:	70fb      	strb	r3, [r7, #3]
 8003110:	460b      	mov	r3, r1
 8003112:	803b      	strh	r3, [r7, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800311c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003120:	2b00      	cmp	r3, #0
 8003122:	da0f      	bge.n	8003144 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 0207 	and.w	r2, r3, #7
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	3310      	adds	r3, #16
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	3304      	adds	r3, #4
 800313a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	705a      	strb	r2, [r3, #1]
 8003142:	e00f      	b.n	8003164 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	f003 0207 	and.w	r2, r3, #7
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	3304      	adds	r3, #4
 800315c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	b2da      	uxtb	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003170:	883b      	ldrh	r3, [r7, #0]
 8003172:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	78ba      	ldrb	r2, [r7, #2]
 800317e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003180:	78bb      	ldrb	r3, [r7, #2]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d102      	bne.n	800318c <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_PCD_EP_Open+0x9c>
 8003196:	2302      	movs	r3, #2
 8003198:	e00e      	b.n	80031b8 <HAL_PCD_EP_Open+0xba>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68f9      	ldr	r1, [r7, #12]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f008 fd2b 	bl	800bc04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 80031b6:	7afb      	ldrb	r3, [r7, #11]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da0f      	bge.n	80031f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 0207 	and.w	r2, r3, #7
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	3310      	adds	r3, #16
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	3304      	adds	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	705a      	strb	r2, [r3, #1]
 80031f2:	e00f      	b.n	8003214 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 0207 	and.w	r2, r3, #7
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	b2da      	uxtb	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_PCD_EP_Close+0x6e>
 800322a:	2302      	movs	r3, #2
 800322c:	e00e      	b.n	800324c <HAL_PCD_EP_Close+0x8c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68f9      	ldr	r1, [r7, #12]
 800323c:	4618      	mov	r0, r3
 800323e:	f009 f841 	bl	800c2c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	460b      	mov	r3, r1
 8003262:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003264:	7afb      	ldrb	r3, [r7, #11]
 8003266:	f003 0207 	and.w	r2, r3, #7
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	3304      	adds	r3, #4
 800327c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2200      	movs	r2, #0
 800328e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2200      	movs	r2, #0
 8003294:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003296:	7afb      	ldrb	r3, [r7, #11]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	b2da      	uxtb	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f009 f995 	bl	800c5d8 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	f003 0207 	and.w	r2, r3, #7
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	440b      	add	r3, r1
 80032d6:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	460b      	mov	r3, r1
 80032f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032f8:	7afb      	ldrb	r3, [r7, #11]
 80032fa:	f003 0207 	and.w	r2, r3, #7
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	3310      	adds	r3, #16
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	3304      	adds	r3, #4
 800330e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2200      	movs	r2, #0
 800332e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2201      	movs	r2, #1
 8003334:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003336:	7afb      	ldrb	r3, [r7, #11]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	b2da      	uxtb	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6979      	ldr	r1, [r7, #20]
 8003348:	4618      	mov	r0, r3
 800334a:	f009 f945 	bl	800c5d8 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	7912      	ldrb	r2, [r2, #4]
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e040      	b.n	80033f8 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800337a:	2b00      	cmp	r3, #0
 800337c:	da0f      	bge.n	800339e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	f003 0207 	and.w	r2, r3, #7
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	3310      	adds	r3, #16
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	3304      	adds	r3, #4
 8003394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	705a      	strb	r2, [r3, #1]
 800339c:	e00d      	b.n	80033ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	3304      	adds	r3, #4
 80033b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_PCD_EP_SetStall+0x82>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e00e      	b.n	80033f8 <HAL_PCD_EP_SetStall+0xa0>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68f9      	ldr	r1, [r7, #12]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f00a f95f 	bl	800d6ac <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	7912      	ldrb	r2, [r2, #4]
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e042      	b.n	80034a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800341e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003422:	2b00      	cmp	r3, #0
 8003424:	da0f      	bge.n	8003446 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 0207 	and.w	r2, r3, #7
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	3310      	adds	r3, #16
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	3304      	adds	r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	705a      	strb	r2, [r3, #1]
 8003444:	e00f      	b.n	8003466 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 0207 	and.w	r2, r3, #7
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4413      	add	r3, r2
 800345c:	3304      	adds	r3, #4
 800345e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	b2da      	uxtb	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_PCD_EP_ClrStall+0x86>
 8003482:	2302      	movs	r3, #2
 8003484:	e00e      	b.n	80034a4 <HAL_PCD_EP_ClrStall+0xa4>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68f9      	ldr	r1, [r7, #12]
 8003494:	4618      	mov	r0, r3
 8003496:	f00a f94f 	bl	800d738 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08e      	sub	sp, #56	@ 0x38
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034b4:	e326      	b.n	8003b04 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034bc:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80034be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 80034ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 8124 	bne.w	800371c <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80034d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d13e      	bne.n	800355c <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4b89      	ldr	r3, [pc, #548]	@ (800370c <PCD_EP_ISR_Handler+0x260>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034f4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3314      	adds	r3, #20
 80034fa:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003506:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0c1b      	lsrs	r3, r3, #16
 800350e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003514:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	441a      	add	r2, r3
 8003520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003522:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003524:	2100      	movs	r1, #0
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f00b f877 	bl	800e61a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7c5b      	ldrb	r3, [r3, #17]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 82e6 	beq.w	8003b04 <PCD_EP_ISR_Handler+0x658>
 8003538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f040 82e1 	bne.w	8003b04 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7c5b      	ldrb	r3, [r3, #17]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800354c:	b2da      	uxtb	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	745a      	strb	r2, [r3, #17]
 800355a:	e2d3      	b.n	8003b04 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003562:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800356c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800356e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003572:	2b00      	cmp	r3, #0
 8003574:	d027      	beq.n	80035c6 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	4619      	mov	r1, r3
 8003580:	4610      	mov	r0, r2
 8003582:	f7ff fb09 	bl	8002b98 <PCD_GET_EP_RX_CNT>
 8003586:	4603      	mov	r3, r0
 8003588:	461a      	mov	r2, r3
 800358a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8003598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800359c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f00a fa01 	bl	800d9a8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b58      	ldr	r3, [pc, #352]	@ (8003710 <PCD_EP_ISR_Handler+0x264>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035bc:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f00a fffe 	bl	800e5c0 <HAL_PCD_SetupStageCallback>
 80035c4:	e29e      	b.n	8003b04 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80035c6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f280 829a 	bge.w	8003b04 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003710 <PCD_EP_ISR_Handler+0x264>)
 80035d8:	4013      	ands	r3, r2
 80035da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035e6:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f7ff fad0 	bl	8002b98 <PCD_GET_EP_RX_CNT>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d019      	beq.n	800363c <PCD_EP_ISR_Handler+0x190>
 8003608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d015      	beq.n	800363c <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003616:	6959      	ldr	r1, [r3, #20]
 8003618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800361c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003620:	b29b      	uxth	r3, r3
 8003622:	f00a f9c1 	bl	800d9a8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	441a      	add	r2, r3
 8003630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003632:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003634:	2100      	movs	r1, #0
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f00a ffd4 	bl	800e5e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003644:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003646:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 825a 	bne.w	8003b04 <PCD_EP_ISR_Handler+0x658>
 8003650:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003652:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003656:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800365a:	f000 8253 	beq.w	8003b04 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800365e:	4b2d      	ldr	r3, [pc, #180]	@ (8003714 <PCD_EP_ISR_Handler+0x268>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4a2c      	ldr	r2, [pc, #176]	@ (8003714 <PCD_EP_ISR_Handler+0x268>)
 8003664:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003668:	6053      	str	r3, [r2, #4]
 800366a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <PCD_EP_ISR_Handler+0x1d4>
 8003672:	4b28      	ldr	r3, [pc, #160]	@ (8003714 <PCD_EP_ISR_Handler+0x268>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4a27      	ldr	r2, [pc, #156]	@ (8003714 <PCD_EP_ISR_Handler+0x268>)
 8003678:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800367c:	6053      	str	r3, [r2, #4]
 800367e:	e02e      	b.n	80036de <PCD_EP_ISR_Handler+0x232>
 8003680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	2b3e      	cmp	r3, #62	@ 0x3e
 8003686:	d814      	bhi.n	80036b2 <PCD_EP_ISR_Handler+0x206>
 8003688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <PCD_EP_ISR_Handler+0x1f6>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	3301      	adds	r3, #1
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003714 <PCD_EP_ISR_Handler+0x268>)
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	069b      	lsls	r3, r3, #26
 80036aa:	491a      	ldr	r1, [pc, #104]	@ (8003714 <PCD_EP_ISR_Handler+0x268>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
 80036b0:	e015      	b.n	80036de <PCD_EP_ISR_Handler+0x232>
 80036b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d102      	bne.n	80036cc <PCD_EP_ISR_Handler+0x220>
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	4b11      	ldr	r3, [pc, #68]	@ (8003714 <PCD_EP_ISR_Handler+0x268>)
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	069b      	lsls	r3, r3, #26
 80036d4:	4313      	orrs	r3, r2
 80036d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003714 <PCD_EP_ISR_Handler+0x268>)
 80036d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036dc:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <PCD_EP_ISR_Handler+0x26c>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003704:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e1fb      	b.n	8003b04 <PCD_EP_ISR_Handler+0x658>
 800370c:	07ff8f0f 	.word	0x07ff8f0f
 8003710:	07ff0f8f 	.word	0x07ff0f8f
 8003714:	40016400 	.word	0x40016400
 8003718:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800372e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003732:	2b00      	cmp	r3, #0
 8003734:	f280 80bd 	bge.w	80038b2 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b9e      	ldr	r3, [pc, #632]	@ (80039c4 <PCD_EP_ISR_Handler+0x518>)
 800374a:	4013      	ands	r3, r2
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003762:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003764:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	3304      	adds	r3, #4
 800377a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800377c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800377e:	7b1b      	ldrb	r3, [r3, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d116      	bne.n	80037b2 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	4619      	mov	r1, r3
 800378e:	4610      	mov	r0, r2
 8003790:	f7ff fa02 	bl	8002b98 <PCD_GET_EP_RX_CNT>
 8003794:	4603      	mov	r3, r0
 8003796:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8003798:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800379a:	2b00      	cmp	r3, #0
 800379c:	d067      	beq.n	800386e <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a4:	6959      	ldr	r1, [r3, #20]
 80037a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a8:	88da      	ldrh	r2, [r3, #6]
 80037aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037ac:	f00a f8fc 	bl	800d9a8 <USB_ReadPMA>
 80037b0:	e05d      	b.n	800386e <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b4:	78db      	ldrb	r3, [r3, #3]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d108      	bne.n	80037cc <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037ba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80037bc:	461a      	mov	r2, r3
 80037be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f9ad 	bl	8003b20 <HAL_PCD_EP_DB_Receive>
 80037c6:	4603      	mov	r3, r0
 80037c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80037ca:	e050      	b.n	800386e <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b7a      	ldr	r3, [pc, #488]	@ (80039c8 <PCD_EP_ISR_Handler+0x51c>)
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	441a      	add	r2, r3
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037fa:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d016      	beq.n	8003842 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f7ff f9db 	bl	8002bda <PCD_GET_EP_DBUF0_CNT>
 8003824:	4603      	mov	r3, r0
 8003826:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003828:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800382a:	2b00      	cmp	r3, #0
 800382c:	d01f      	beq.n	800386e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003834:	6959      	ldr	r1, [r3, #20]
 8003836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003838:	891a      	ldrh	r2, [r3, #8]
 800383a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800383c:	f00a f8b4 	bl	800d9a8 <USB_ReadPMA>
 8003840:	e015      	b.n	800386e <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f7ff f9e5 	bl	8002c1c <PCD_GET_EP_DBUF1_CNT>
 8003852:	4603      	mov	r3, r0
 8003854:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003856:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003862:	6959      	ldr	r1, [r3, #20]
 8003864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003866:	895a      	ldrh	r2, [r3, #10]
 8003868:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800386a:	f00a f89d 	bl	800d9a8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800386e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003874:	441a      	add	r2, r3
 8003876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003878:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800387a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003880:	441a      	add	r2, r3
 8003882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003884:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <PCD_EP_ISR_Handler+0x3ec>
 800388e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	429a      	cmp	r2, r3
 8003896:	d206      	bcs.n	80038a6 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f00a fea0 	bl	800e5e4 <HAL_PCD_DataOutStageCallback>
 80038a4:	e005      	b.n	80038b2 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80038ac:	4618      	mov	r0, r3
 80038ae:	f008 fe93 	bl	800c5d8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80038b2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80038b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8123 	beq.w	8003b04 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 80038be:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	3310      	adds	r3, #16
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	4413      	add	r3, r2
 80038d0:	3304      	adds	r3, #4
 80038d2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4b39      	ldr	r3, [pc, #228]	@ (80039cc <PCD_EP_ISR_Handler+0x520>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038fe:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003902:	78db      	ldrb	r3, [r3, #3]
 8003904:	2b01      	cmp	r3, #1
 8003906:	f040 80b8 	bne.w	8003a7a <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 800390a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003912:	7b1b      	ldrb	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80a9 	beq.w	8003a6c <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800391a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800391c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d055      	beq.n	80039d0 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003926:	785b      	ldrb	r3, [r3, #1]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d124      	bne.n	8003976 <PCD_EP_ISR_Handler+0x4ca>
 800392c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003936:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003946:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800394a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800395a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800396a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800396e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e07a      	b.n	8003a6c <PCD_EP_ISR_Handler+0x5c0>
 8003976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d176      	bne.n	8003a6c <PCD_EP_ISR_Handler+0x5c0>
 800397e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003988:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003998:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800399c:	b292      	uxth	r2, r2
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80039aa:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80039ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	e054      	b.n	8003a6c <PCD_EP_ISR_Handler+0x5c0>
 80039c2:	bf00      	nop
 80039c4:	07ff0f8f 	.word	0x07ff0f8f
 80039c8:	07ff8f8f 	.word	0x07ff8f8f
 80039cc:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d124      	bne.n	8003a22 <PCD_EP_ISR_Handler+0x576>
 80039d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039f6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a1a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	e024      	b.n	8003a6c <PCD_EP_ISR_Handler+0x5c0>
 8003a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a24:	785b      	ldrb	r3, [r3, #1]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d120      	bne.n	8003a6c <PCD_EP_ISR_Handler+0x5c0>
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a48:	b292      	uxth	r2, r2
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003a56:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a68:	6852      	ldr	r2, [r2, #4]
 8003a6a:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f00a fdd1 	bl	800e61a <HAL_PCD_DataInStageCallback>
 8003a78:	e044      	b.n	8003b04 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003a7a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d139      	bne.n	8003af8 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a9c:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8003a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d906      	bls.n	8003ab6 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aaa:	699a      	ldr	r2, [r3, #24]
 8003aac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003aae:	1ad2      	subs	r2, r2, r3
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab2:	619a      	str	r2, [r3, #24]
 8003ab4:	e002      	b.n	8003abc <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab8:	2200      	movs	r2, #0
 8003aba:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d106      	bne.n	8003ad2 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f00a fda5 	bl	800e61a <HAL_PCD_DataInStageCallback>
 8003ad0:	e018      	b.n	8003b04 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003ad8:	441a      	add	r2, r3
 8003ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003adc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003ae4:	441a      	add	r2, r3
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003af0:	4618      	mov	r0, r3
 8003af2:	f008 fd71 	bl	800c5d8 <USB_EPStartXfer>
 8003af6:	e005      	b.n	8003b04 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003af8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003afa:	461a      	mov	r2, r3
 8003afc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f8e8 	bl	8003cd4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f47f acd1 	bne.w	80034b6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3738      	adds	r7, #56	@ 0x38
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop

08003b20 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	@ 0x28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d062      	beq.n	8003bfe <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f7ff f849 	bl	8002bda <PCD_GET_EP_DBUF0_CNT>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	8bfb      	ldrh	r3, [r7, #30]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d306      	bcc.n	8003b64 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	8bfb      	ldrh	r3, [r7, #30]
 8003b5c:	1ad2      	subs	r2, r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	619a      	str	r2, [r3, #24]
 8003b62:	e002      	b.n	8003b6a <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2200      	movs	r2, #0
 8003b68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11b      	bne.n	8003baa <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4b52      	ldr	r3, [pc, #328]	@ (8003ccc <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	441a      	add	r2, r3
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba8:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d017      	beq.n	8003be4 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4b42      	ldr	r3, [pc, #264]	@ (8003cd0 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bde:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003be2:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003be4:	8bfb      	ldrh	r3, [r7, #30]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d06b      	beq.n	8003cc2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	6959      	ldr	r1, [r3, #20]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	891a      	ldrh	r2, [r3, #8]
 8003bf6:	8bfb      	ldrh	r3, [r7, #30]
 8003bf8:	f009 fed6 	bl	800d9a8 <USB_ReadPMA>
 8003bfc:	e061      	b.n	8003cc2 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f7ff f807 	bl	8002c1c <PCD_GET_EP_DBUF1_CNT>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	8bfb      	ldrh	r3, [r7, #30]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d306      	bcc.n	8003c2a <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	8bfb      	ldrh	r3, [r7, #30]
 8003c22:	1ad2      	subs	r2, r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	619a      	str	r2, [r3, #24]
 8003c28:	e002      	b.n	8003c30 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d11b      	bne.n	8003c70 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b20      	ldr	r3, [pc, #128]	@ (8003ccc <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	441a      	add	r2, r3
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c6e:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d117      	bne.n	8003caa <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	623b      	str	r3, [r7, #32]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	441a      	add	r2, r3
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ca4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ca8:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003caa:	8bfb      	ldrh	r3, [r7, #30]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	6959      	ldr	r1, [r3, #20]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	895a      	ldrh	r2, [r3, #10]
 8003cbc:	8bfb      	ldrh	r3, [r7, #30]
 8003cbe:	f009 fe73 	bl	800d9a8 <USB_ReadPMA>
    }
  }

  return count;
 8003cc2:	8bfb      	ldrh	r3, [r7, #30]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3728      	adds	r7, #40	@ 0x28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	07ffbf8f 	.word	0x07ffbf8f
 8003cd0:	07ff8f8f 	.word	0x07ff8f8f

08003cd4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08e      	sub	sp, #56	@ 0x38
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 81d5 	beq.w	8004098 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	f7fe ff6e 	bl	8002bda <PCD_GET_EP_DBUF0_CNT>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	8bfb      	ldrh	r3, [r7, #30]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d906      	bls.n	8003d1a <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	699a      	ldr	r2, [r3, #24]
 8003d10:	8bfb      	ldrh	r3, [r7, #30]
 8003d12:	1ad2      	subs	r2, r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	619a      	str	r2, [r3, #24]
 8003d18:	e002      	b.n	8003d20 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f040 80c1 	bne.w	8003eac <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	785b      	ldrb	r3, [r3, #1]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d124      	bne.n	8003d7c <HAL_PCD_EP_DB_Transmit+0xa8>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d50:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d74:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e024      	b.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0xf2>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d120      	bne.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0xf2>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003da2:	b292      	uxth	r2, r2
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003db0:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d124      	bne.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x144>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003de8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dec:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e10:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	e024      	b.n	8003e62 <HAL_PCD_EP_DB_Transmit+0x18e>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	785b      	ldrb	r3, [r3, #1]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d120      	bne.n	8003e62 <HAL_PCD_EP_DB_Transmit+0x18e>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e3e:	b292      	uxth	r2, r2
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003e4c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e5e:	6852      	ldr	r2, [r2, #4]
 8003e60:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	4619      	mov	r1, r3
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f00a fbd6 	bl	800e61a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 82e5 	beq.w	8004444 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b8e      	ldr	r3, [pc, #568]	@ (80040c4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	441a      	add	r2, r3
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e2cb      	b.n	8004444 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d017      	beq.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80040c4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	441a      	add	r2, r3
 8003eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003edc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ee4:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	f040 82a9 	bne.w	8004444 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	8bfb      	ldrh	r3, [r7, #30]
 8003ef8:	441a      	add	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	8bfb      	ldrh	r3, [r7, #30]
 8003f04:	441a      	add	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	6a1a      	ldr	r2, [r3, #32]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d309      	bcc.n	8003f2a <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6a1a      	ldr	r2, [r3, #32]
 8003f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f22:	1ad2      	subs	r2, r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	621a      	str	r2, [r3, #32]
 8003f28:	e014      	b.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8003f32:	8bfb      	ldrh	r3, [r7, #30]
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f3e:	e009      	b.n	8003f54 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2200      	movs	r2, #0
 8003f52:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	785b      	ldrb	r3, [r3, #1]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d16a      	bne.n	8004032 <HAL_PCD_EP_DB_Transmit+0x35e>
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f7a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d112      	bne.n	8003fac <HAL_PCD_EP_DB_Transmit+0x2d8>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fa0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fa4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e06a      	b.n	8004082 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	2b3e      	cmp	r3, #62	@ 0x3e
 8003fb0:	d81e      	bhi.n	8003ff0 <HAL_PCD_EP_DB_Transmit+0x31c>
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	085b      	lsrs	r3, r3, #1
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fd6:	6819      	ldr	r1, [r3, #0]
 8003fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fda:	069a      	lsls	r2, r3, #26
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fe6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fea:	430a      	orrs	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e048      	b.n	8004082 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <HAL_PCD_EP_DB_Transmit+0x332>
 8004000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004002:	3b01      	subs	r3, #1
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004010:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004018:	069b      	lsls	r3, r3, #26
 800401a:	431a      	orrs	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004026:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800402a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e027      	b.n	8004082 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	785b      	ldrb	r3, [r3, #1]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d123      	bne.n	8004082 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004044:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004054:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004058:	b292      	uxth	r2, r2
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004066:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800406a:	6819      	ldr	r1, [r3, #0]
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	041a      	lsls	r2, r3, #16
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800407a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800407e:	430a      	orrs	r2, r1
 8004080:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6959      	ldr	r1, [r3, #20]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	891a      	ldrh	r2, [r3, #8]
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	b29b      	uxth	r3, r3
 8004092:	f009 fc28 	bl	800d8e6 <USB_WritePMA>
 8004096:	e1d5      	b.n	8004444 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f7fe fdba 	bl	8002c1c <PCD_GET_EP_DBUF1_CNT>
 80040a8:	4603      	mov	r3, r0
 80040aa:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	8bfb      	ldrh	r3, [r7, #30]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d308      	bcc.n	80040c8 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	8bfb      	ldrh	r3, [r7, #30]
 80040bc:	1ad2      	subs	r2, r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	619a      	str	r2, [r3, #24]
 80040c2:	e004      	b.n	80040ce <HAL_PCD_EP_DB_Transmit+0x3fa>
 80040c4:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2200      	movs	r2, #0
 80040cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f040 80c1 	bne.w	800425a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d124      	bne.n	800412a <HAL_PCD_EP_DB_Transmit+0x456>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040fe:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800410e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800411e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004122:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e024      	b.n	8004174 <HAL_PCD_EP_DB_Transmit+0x4a0>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d120      	bne.n	8004174 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800413c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800414c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004150:	b292      	uxth	r2, r2
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800415e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800416c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	785b      	ldrb	r3, [r3, #1]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d124      	bne.n	80041c6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004186:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004196:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800419a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041be:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	e024      	b.n	8004210 <HAL_PCD_EP_DB_Transmit+0x53c>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	785b      	ldrb	r3, [r3, #1]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d120      	bne.n	8004210 <HAL_PCD_EP_DB_Transmit+0x53c>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041ec:	b292      	uxth	r2, r2
 80041ee:	605a      	str	r2, [r3, #4]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80041fa:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004208:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800420c:	6852      	ldr	r2, [r2, #4]
 800420e:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	4619      	mov	r1, r3
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f00a f9ff 	bl	800e61a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 810e 	bne.w	8004444 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b95      	ldr	r3, [pc, #596]	@ (8004490 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800423a:	4013      	ands	r3, r2
 800423c:	623b      	str	r3, [r7, #32]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	441a      	add	r2, r3
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	e0f4      	b.n	8004444 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d117      	bne.n	8004294 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b86      	ldr	r3, [pc, #536]	@ (8004490 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8004276:	4013      	ands	r3, r2
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	441a      	add	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800428e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004292:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800429a:	2b01      	cmp	r3, #1
 800429c:	f040 80d2 	bne.w	8004444 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	695a      	ldr	r2, [r3, #20]
 80042a4:	8bfb      	ldrh	r3, [r7, #30]
 80042a6:	441a      	add	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	8bfb      	ldrh	r3, [r7, #30]
 80042b2:	441a      	add	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6a1a      	ldr	r2, [r3, #32]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d309      	bcc.n	80042d8 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	1ad2      	subs	r2, r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	621a      	str	r2, [r3, #32]
 80042d6:	e014      	b.n	8004302 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d106      	bne.n	80042ee <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 80042e0:	8bfb      	ldrh	r3, [r7, #30]
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042ec:	e009      	b.n	8004302 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2200      	movs	r2, #0
 80042f8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d16a      	bne.n	80043e0 <HAL_PCD_EP_DB_Transmit+0x70c>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004314:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004324:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004328:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	d112      	bne.n	800435a <HAL_PCD_EP_DB_Transmit+0x686>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800433e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800434e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004352:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004356:	605a      	str	r2, [r3, #4]
 8004358:	e06a      	b.n	8004430 <HAL_PCD_EP_DB_Transmit+0x75c>
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	2b3e      	cmp	r3, #62	@ 0x3e
 800435e:	d81e      	bhi.n	800439e <HAL_PCD_EP_DB_Transmit+0x6ca>
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_PCD_EP_DB_Transmit+0x6a2>
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	3301      	adds	r3, #1
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004380:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004384:	6859      	ldr	r1, [r3, #4]
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	069a      	lsls	r2, r3, #26
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004394:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
 800439c:	e048      	b.n	8004430 <HAL_PCD_EP_DB_Transmit+0x75c>
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <HAL_PCD_EP_DB_Transmit+0x6e0>
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	069b      	lsls	r3, r3, #26
 80043c8:	431a      	orrs	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	e027      	b.n	8004430 <HAL_PCD_EP_DB_Transmit+0x75c>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	785b      	ldrb	r3, [r3, #1]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d123      	bne.n	8004430 <HAL_PCD_EP_DB_Transmit+0x75c>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004402:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004406:	b292      	uxth	r2, r2
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004414:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004418:	6859      	ldr	r1, [r3, #4]
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	041a      	lsls	r2, r3, #16
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004428:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6959      	ldr	r1, [r3, #20]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	895a      	ldrh	r2, [r3, #10]
 800443c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443e:	b29b      	uxth	r3, r3
 8004440:	f009 fa51 	bl	800d8e6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b0f      	ldr	r3, [pc, #60]	@ (8004494 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8004456:	4013      	ands	r3, r2
 8004458:	633b      	str	r3, [r7, #48]	@ 0x30
 800445a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445c:	f083 0310 	eor.w	r3, r3, #16
 8004460:	633b      	str	r3, [r7, #48]	@ 0x30
 8004462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004464:	f083 0320 	eor.w	r3, r3, #32
 8004468:	633b      	str	r3, [r7, #48]	@ 0x30
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	441a      	add	r2, r3
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800447e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004482:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3738      	adds	r7, #56	@ 0x38
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	07ff8f8f 	.word	0x07ff8f8f
 8004494:	07ff8fbf 	.word	0x07ff8fbf

08004498 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	817b      	strh	r3, [r7, #10]
 80044a6:	4613      	mov	r3, r2
 80044a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80044aa:	897b      	ldrh	r3, [r7, #10]
 80044ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00c      	beq.n	80044d0 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b6:	897b      	ldrh	r3, [r7, #10]
 80044b8:	f003 0207 	and.w	r2, r3, #7
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	3310      	adds	r3, #16
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	3304      	adds	r3, #4
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e00a      	b.n	80044e6 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044d0:	897a      	ldrh	r2, [r7, #10]
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4413      	add	r3, r2
 80044e2:	3304      	adds	r3, #4
 80044e4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044e6:	893b      	ldrh	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d107      	bne.n	80044fc <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2200      	movs	r2, #0
 80044f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	80da      	strh	r2, [r3, #6]
 80044fa:	e00b      	b.n	8004514 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2201      	movs	r2, #1
 8004500:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	b29a      	uxth	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	b29a      	uxth	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004544:	f043 0201 	orr.w	r2, r3, #1
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004550:	f043 0202 	orr.w	r2, r3, #2
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	460b      	mov	r3, r1
 8004570:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8004584:	4b05      	ldr	r3, [pc, #20]	@ (800459c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004588:	4a04      	ldr	r2, [pc, #16]	@ (800459c <HAL_PWREx_EnableVddUSB+0x1c>)
 800458a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800458e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004590:	bf00      	nop
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	44020800 	.word	0x44020800

080045a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	f000 bc28 	b.w	8004e04 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045b4:	4b94      	ldr	r3, [pc, #592]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f003 0318 	and.w	r3, r3, #24
 80045bc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80045be:	4b92      	ldr	r3, [pc, #584]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80045c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d05b      	beq.n	800468c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d005      	beq.n	80045e6 <HAL_RCC_OscConfig+0x46>
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	2b18      	cmp	r3, #24
 80045de:	d114      	bne.n	800460a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d111      	bne.n	800460a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f000 bc08 	b.w	8004e04 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80045f4:	4b84      	ldr	r3, [pc, #528]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	4981      	ldr	r1, [pc, #516]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004604:	4313      	orrs	r3, r2
 8004606:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004608:	e040      	b.n	800468c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d023      	beq.n	800465a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004612:	4b7d      	ldr	r3, [pc, #500]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a7c      	ldr	r2, [pc, #496]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fd fd85 	bl	800212c <HAL_GetTick>
 8004622:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004626:	f7fd fd81 	bl	800212c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e3e5      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004638:	4b73      	ldr	r3, [pc, #460]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004644:	4b70      	ldr	r3, [pc, #448]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	496d      	ldr	r1, [pc, #436]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004654:	4313      	orrs	r3, r2
 8004656:	618b      	str	r3, [r1, #24]
 8004658:	e018      	b.n	800468c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800465a:	4b6b      	ldr	r3, [pc, #428]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a6a      	ldr	r2, [pc, #424]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fd fd61 	bl	800212c <HAL_GetTick>
 800466a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800466e:	f7fd fd5d 	bl	800212c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e3c1      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004680:	4b61      	ldr	r3, [pc, #388]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80a0 	beq.w	80047da <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	2b10      	cmp	r3, #16
 800469e:	d005      	beq.n	80046ac <HAL_RCC_OscConfig+0x10c>
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	2b18      	cmp	r3, #24
 80046a4:	d109      	bne.n	80046ba <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d106      	bne.n	80046ba <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f040 8092 	bne.w	80047da <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e3a4      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c2:	d106      	bne.n	80046d2 <HAL_RCC_OscConfig+0x132>
 80046c4:	4b50      	ldr	r3, [pc, #320]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a4f      	ldr	r2, [pc, #316]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80046ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	e058      	b.n	8004784 <HAL_RCC_OscConfig+0x1e4>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d112      	bne.n	8004700 <HAL_RCC_OscConfig+0x160>
 80046da:	4b4b      	ldr	r3, [pc, #300]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a4a      	ldr	r2, [pc, #296]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	4b48      	ldr	r3, [pc, #288]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a47      	ldr	r2, [pc, #284]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80046ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	4b45      	ldr	r3, [pc, #276]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a44      	ldr	r2, [pc, #272]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80046f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	e041      	b.n	8004784 <HAL_RCC_OscConfig+0x1e4>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004708:	d112      	bne.n	8004730 <HAL_RCC_OscConfig+0x190>
 800470a:	4b3f      	ldr	r3, [pc, #252]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a3e      	ldr	r2, [pc, #248]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	4b3c      	ldr	r3, [pc, #240]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a3b      	ldr	r2, [pc, #236]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 800471c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b39      	ldr	r3, [pc, #228]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a38      	ldr	r2, [pc, #224]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e029      	b.n	8004784 <HAL_RCC_OscConfig+0x1e4>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004738:	d112      	bne.n	8004760 <HAL_RCC_OscConfig+0x1c0>
 800473a:	4b33      	ldr	r3, [pc, #204]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a32      	ldr	r2, [pc, #200]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	4b30      	ldr	r3, [pc, #192]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a2f      	ldr	r2, [pc, #188]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 800474c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	4b2d      	ldr	r3, [pc, #180]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2c      	ldr	r2, [pc, #176]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	e011      	b.n	8004784 <HAL_RCC_OscConfig+0x1e4>
 8004760:	4b29      	ldr	r3, [pc, #164]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a28      	ldr	r2, [pc, #160]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b26      	ldr	r3, [pc, #152]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a25      	ldr	r2, [pc, #148]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 8004772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b23      	ldr	r3, [pc, #140]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a22      	ldr	r2, [pc, #136]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 800477e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fd fcce 	bl	800212c <HAL_GetTick>
 8004790:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004794:	f7fd fcca 	bl	800212c <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	@ 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e32e      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047a6:	4b18      	ldr	r3, [pc, #96]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0x1f4>
 80047b2:	e012      	b.n	80047da <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7fd fcba 	bl	800212c <HAL_GetTick>
 80047b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80047bc:	f7fd fcb6 	bl	800212c <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b64      	cmp	r3, #100	@ 0x64
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e31a      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004808 <HAL_RCC_OscConfig+0x268>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 809a 	beq.w	800491c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_RCC_OscConfig+0x25a>
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2b18      	cmp	r3, #24
 80047f2:	d149      	bne.n	8004888 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d146      	bne.n	8004888 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d104      	bne.n	800480c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e2fe      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
 8004806:	bf00      	nop
 8004808:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d11c      	bne.n	800484c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004812:	4b9a      	ldr	r3, [pc, #616]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0218 	and.w	r2, r3, #24
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	429a      	cmp	r2, r3
 8004820:	d014      	beq.n	800484c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004822:	4b96      	ldr	r3, [pc, #600]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 0218 	bic.w	r2, r3, #24
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	4993      	ldr	r1, [pc, #588]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004830:	4313      	orrs	r3, r2
 8004832:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004834:	f000 fdd0 	bl	80053d8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004838:	4b91      	ldr	r3, [pc, #580]	@ (8004a80 <HAL_RCC_OscConfig+0x4e0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f7fd fbeb 	bl	8002018 <HAL_InitTick>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e2db      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fd fc6e 	bl	800212c <HAL_GetTick>
 8004850:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004854:	f7fd fc6a 	bl	800212c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e2ce      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004866:	4b85      	ldr	r3, [pc, #532]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004872:	4b82      	ldr	r3, [pc, #520]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	497e      	ldr	r1, [pc, #504]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004886:	e049      	b.n	800491c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d02c      	beq.n	80048ea <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004890:	4b7a      	ldr	r3, [pc, #488]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 0218 	bic.w	r2, r3, #24
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	4977      	ldr	r1, [pc, #476]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80048a2:	4b76      	ldr	r3, [pc, #472]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a75      	ldr	r2, [pc, #468]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ae:	f7fd fc3d 	bl	800212c <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80048b6:	f7fd fc39 	bl	800212c <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e29d      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048c8:	4b6c      	ldr	r3, [pc, #432]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80048d4:	4b69      	ldr	r3, [pc, #420]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	4966      	ldr	r1, [pc, #408]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	610b      	str	r3, [r1, #16]
 80048e8:	e018      	b.n	800491c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ea:	4b64      	ldr	r3, [pc, #400]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a63      	ldr	r2, [pc, #396]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f6:	f7fd fc19 	bl	800212c <HAL_GetTick>
 80048fa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80048fe:	f7fd fc15 	bl	800212c <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e279      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004910:	4b5a      	ldr	r3, [pc, #360]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f0      	bne.n	80048fe <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d03c      	beq.n	80049a2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01c      	beq.n	800496a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004930:	4b52      	ldr	r3, [pc, #328]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004936:	4a51      	ldr	r2, [pc, #324]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004938:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800493c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004940:	f7fd fbf4 	bl	800212c <HAL_GetTick>
 8004944:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004948:	f7fd fbf0 	bl	800212c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e254      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800495a:	4b48      	ldr	r3, [pc, #288]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 800495c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004960:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ef      	beq.n	8004948 <HAL_RCC_OscConfig+0x3a8>
 8004968:	e01b      	b.n	80049a2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800496a:	4b44      	ldr	r3, [pc, #272]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 800496c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004970:	4a42      	ldr	r2, [pc, #264]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004972:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004976:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497a:	f7fd fbd7 	bl	800212c <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004982:	f7fd fbd3 	bl	800212c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e237      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004994:	4b39      	ldr	r3, [pc, #228]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800499a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1ef      	bne.n	8004982 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 80d2 	beq.w	8004b54 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80049b0:	4b34      	ldr	r3, [pc, #208]	@ (8004a84 <HAL_RCC_OscConfig+0x4e4>)
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d118      	bne.n	80049ee <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80049bc:	4b31      	ldr	r3, [pc, #196]	@ (8004a84 <HAL_RCC_OscConfig+0x4e4>)
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	4a30      	ldr	r2, [pc, #192]	@ (8004a84 <HAL_RCC_OscConfig+0x4e4>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c8:	f7fd fbb0 	bl	800212c <HAL_GetTick>
 80049cc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d0:	f7fd fbac 	bl	800212c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e210      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80049e2:	4b28      	ldr	r3, [pc, #160]	@ (8004a84 <HAL_RCC_OscConfig+0x4e4>)
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d108      	bne.n	8004a08 <HAL_RCC_OscConfig+0x468>
 80049f6:	4b21      	ldr	r3, [pc, #132]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 80049f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049fc:	4a1f      	ldr	r2, [pc, #124]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a06:	e074      	b.n	8004af2 <HAL_RCC_OscConfig+0x552>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d118      	bne.n	8004a42 <HAL_RCC_OscConfig+0x4a2>
 8004a10:	4b1a      	ldr	r3, [pc, #104]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a16:	4a19      	ldr	r2, [pc, #100]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004a18:	f023 0301 	bic.w	r3, r3, #1
 8004a1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a20:	4b16      	ldr	r3, [pc, #88]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a26:	4a15      	ldr	r2, [pc, #84]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004a28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a30:	4b12      	ldr	r3, [pc, #72]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a36:	4a11      	ldr	r2, [pc, #68]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004a38:	f023 0304 	bic.w	r3, r3, #4
 8004a3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a40:	e057      	b.n	8004af2 <HAL_RCC_OscConfig+0x552>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b05      	cmp	r3, #5
 8004a48:	d11e      	bne.n	8004a88 <HAL_RCC_OscConfig+0x4e8>
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a50:	4a0a      	ldr	r2, [pc, #40]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004a52:	f043 0304 	orr.w	r3, r3, #4
 8004a56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a5a:	4b08      	ldr	r3, [pc, #32]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a60:	4a06      	ldr	r2, [pc, #24]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004a62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a6a:	4b04      	ldr	r3, [pc, #16]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a70:	4a02      	ldr	r2, [pc, #8]	@ (8004a7c <HAL_RCC_OscConfig+0x4dc>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a7a:	e03a      	b.n	8004af2 <HAL_RCC_OscConfig+0x552>
 8004a7c:	44020c00 	.word	0x44020c00
 8004a80:	20000024 	.word	0x20000024
 8004a84:	44020800 	.word	0x44020800
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b85      	cmp	r3, #133	@ 0x85
 8004a8e:	d118      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x522>
 8004a90:	4ba2      	ldr	r3, [pc, #648]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a96:	4aa1      	ldr	r2, [pc, #644]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004a98:	f043 0304 	orr.w	r3, r3, #4
 8004a9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004aa0:	4b9e      	ldr	r3, [pc, #632]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004aa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004aa6:	4a9d      	ldr	r2, [pc, #628]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ab0:	4b9a      	ldr	r3, [pc, #616]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ab6:	4a99      	ldr	r2, [pc, #612]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ac0:	e017      	b.n	8004af2 <HAL_RCC_OscConfig+0x552>
 8004ac2:	4b96      	ldr	r3, [pc, #600]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ac8:	4a94      	ldr	r2, [pc, #592]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ad2:	4b92      	ldr	r3, [pc, #584]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ad8:	4a90      	ldr	r2, [pc, #576]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004ada:	f023 0304 	bic.w	r3, r3, #4
 8004ade:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ae2:	4b8e      	ldr	r3, [pc, #568]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ae8:	4a8c      	ldr	r2, [pc, #560]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fd fb17 	bl	800212c <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b02:	f7fd fb13 	bl	800212c <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e175      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b18:	4b80      	ldr	r3, [pc, #512]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0ed      	beq.n	8004b02 <HAL_RCC_OscConfig+0x562>
 8004b26:	e015      	b.n	8004b54 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b28:	f7fd fb00 	bl	800212c <HAL_GetTick>
 8004b2c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b2e:	e00a      	b.n	8004b46 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b30:	f7fd fafc 	bl	800212c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e15e      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b46:	4b75      	ldr	r3, [pc, #468]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ed      	bne.n	8004b30 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d036      	beq.n	8004bce <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d019      	beq.n	8004b9c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b68:	4b6c      	ldr	r3, [pc, #432]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6b      	ldr	r2, [pc, #428]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004b6e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b74:	f7fd fada 	bl	800212c <HAL_GetTick>
 8004b78:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004b7c:	f7fd fad6 	bl	800212c <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e13a      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004b8e:	4b63      	ldr	r3, [pc, #396]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x5dc>
 8004b9a:	e018      	b.n	8004bce <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a5e      	ldr	r2, [pc, #376]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004ba2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ba6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba8:	f7fd fac0 	bl	800212c <HAL_GetTick>
 8004bac:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004bb0:	f7fd fabc 	bl	800212c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e120      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004bc2:	4b56      	ldr	r3, [pc, #344]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8115 	beq.w	8004e02 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b18      	cmp	r3, #24
 8004bdc:	f000 80af 	beq.w	8004d3e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	f040 8086 	bne.w	8004cf6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004bea:	4b4c      	ldr	r3, [pc, #304]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a4b      	ldr	r2, [pc, #300]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004bf0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf6:	f7fd fa99 	bl	800212c <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004bfe:	f7fd fa95 	bl	800212c <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e0f9      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c10:	4b42      	ldr	r3, [pc, #264]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f0      	bne.n	8004bfe <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c24:	f023 0303 	bic.w	r3, r3, #3
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c30:	0212      	lsls	r2, r2, #8
 8004c32:	430a      	orrs	r2, r1
 8004c34:	4939      	ldr	r1, [pc, #228]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	025b      	lsls	r3, r3, #9
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c54:	3b01      	subs	r3, #1
 8004c56:	041b      	lsls	r3, r3, #16
 8004c58:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	3b01      	subs	r3, #1
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c6a:	492c      	ldr	r1, [pc, #176]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004c70:	4b2a      	ldr	r3, [pc, #168]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c74:	4a29      	ldr	r2, [pc, #164]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c76:	f023 0310 	bic.w	r3, r3, #16
 8004c7a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c80:	4a26      	ldr	r2, [pc, #152]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004c86:	4b25      	ldr	r3, [pc, #148]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	4a24      	ldr	r2, [pc, #144]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c8c:	f043 0310 	orr.w	r3, r3, #16
 8004c90:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004c92:	4b22      	ldr	r3, [pc, #136]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c96:	f023 020c 	bic.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9e:	491f      	ldr	r1, [pc, #124]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	f023 0220 	bic.w	r2, r3, #32
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb0:	491a      	ldr	r1, [pc, #104]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004cb6:	4b19      	ldr	r3, [pc, #100]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cba:	4a18      	ldr	r2, [pc, #96]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004cc2:	4b16      	ldr	r3, [pc, #88]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a15      	ldr	r2, [pc, #84]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004cc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cce:	f7fd fa2d 	bl	800212c <HAL_GetTick>
 8004cd2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004cd6:	f7fd fa29 	bl	800212c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e08d      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x736>
 8004cf4:	e085      	b.n	8004e02 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004cf6:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a08      	ldr	r2, [pc, #32]	@ (8004d1c <HAL_RCC_OscConfig+0x77c>)
 8004cfc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fd fa13 	bl	800212c <HAL_GetTick>
 8004d06:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004d0a:	f7fd fa0f 	bl	800212c <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d903      	bls.n	8004d20 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e073      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
 8004d1c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d20:	4b3a      	ldr	r3, [pc, #232]	@ (8004e0c <HAL_RCC_OscConfig+0x86c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1ee      	bne.n	8004d0a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004d2c:	4b37      	ldr	r3, [pc, #220]	@ (8004e0c <HAL_RCC_OscConfig+0x86c>)
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	4a36      	ldr	r2, [pc, #216]	@ (8004e0c <HAL_RCC_OscConfig+0x86c>)
 8004d32:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004d36:	f023 0303 	bic.w	r3, r3, #3
 8004d3a:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d3c:	e061      	b.n	8004e02 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004d3e:	4b33      	ldr	r3, [pc, #204]	@ (8004e0c <HAL_RCC_OscConfig+0x86c>)
 8004d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d42:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d44:	4b31      	ldr	r3, [pc, #196]	@ (8004e0c <HAL_RCC_OscConfig+0x86c>)
 8004d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d48:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d031      	beq.n	8004db6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f003 0203 	and.w	r2, r3, #3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d12a      	bne.n	8004db6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	0a1b      	lsrs	r3, r3, #8
 8004d64:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d122      	bne.n	8004db6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d11a      	bne.n	8004db6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	0a5b      	lsrs	r3, r3, #9
 8004d84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d111      	bne.n	8004db6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	0c1b      	lsrs	r3, r3, #16
 8004d96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d9e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d108      	bne.n	8004db6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	0e1b      	lsrs	r3, r3, #24
 8004da8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d001      	beq.n	8004dba <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e024      	b.n	8004e04 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004dba:	4b14      	ldr	r3, [pc, #80]	@ (8004e0c <HAL_RCC_OscConfig+0x86c>)
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	08db      	lsrs	r3, r3, #3
 8004dc0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d01a      	beq.n	8004e02 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8004e0c <HAL_RCC_OscConfig+0x86c>)
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	4a0e      	ldr	r2, [pc, #56]	@ (8004e0c <HAL_RCC_OscConfig+0x86c>)
 8004dd2:	f023 0310 	bic.w	r3, r3, #16
 8004dd6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fd f9a8 	bl	800212c <HAL_GetTick>
 8004ddc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004dde:	bf00      	nop
 8004de0:	f7fd f9a4 	bl	800212c <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d0f9      	beq.n	8004de0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004df0:	4a06      	ldr	r2, [pc, #24]	@ (8004e0c <HAL_RCC_OscConfig+0x86c>)
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004df6:	4b05      	ldr	r3, [pc, #20]	@ (8004e0c <HAL_RCC_OscConfig+0x86c>)
 8004df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfa:	4a04      	ldr	r2, [pc, #16]	@ (8004e0c <HAL_RCC_OscConfig+0x86c>)
 8004dfc:	f043 0310 	orr.w	r3, r3, #16
 8004e00:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	44020c00 	.word	0x44020c00

08004e10 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e19e      	b.n	8005162 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e24:	4b83      	ldr	r3, [pc, #524]	@ (8005034 <HAL_RCC_ClockConfig+0x224>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d910      	bls.n	8004e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e32:	4b80      	ldr	r3, [pc, #512]	@ (8005034 <HAL_RCC_ClockConfig+0x224>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 020f 	bic.w	r2, r3, #15
 8004e3a:	497e      	ldr	r1, [pc, #504]	@ (8005034 <HAL_RCC_ClockConfig+0x224>)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	4b7c      	ldr	r3, [pc, #496]	@ (8005034 <HAL_RCC_ClockConfig+0x224>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e186      	b.n	8005162 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d012      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695a      	ldr	r2, [r3, #20]
 8004e64:	4b74      	ldr	r3, [pc, #464]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	0a1b      	lsrs	r3, r3, #8
 8004e6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d909      	bls.n	8004e86 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004e72:	4b71      	ldr	r3, [pc, #452]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	496d      	ldr	r1, [pc, #436]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d012      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	4b68      	ldr	r3, [pc, #416]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d909      	bls.n	8004eb8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004ea4:	4b64      	ldr	r3, [pc, #400]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	4961      	ldr	r1, [pc, #388]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d010      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	4b5b      	ldr	r3, [pc, #364]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d908      	bls.n	8004ee6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004ed4:	4b58      	ldr	r3, [pc, #352]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4955      	ldr	r1, [pc, #340]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d010      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	4b50      	ldr	r3, [pc, #320]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d908      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004f02:	4b4d      	ldr	r3, [pc, #308]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f023 020f 	bic.w	r2, r3, #15
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	494a      	ldr	r1, [pc, #296]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8093 	beq.w	8005048 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2b03      	cmp	r3, #3
 8004f28:	d107      	bne.n	8004f3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004f2a:	4b43      	ldr	r3, [pc, #268]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d121      	bne.n	8004f7a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e113      	b.n	8005162 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d107      	bne.n	8004f52 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f42:	4b3d      	ldr	r3, [pc, #244]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d115      	bne.n	8004f7a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e107      	b.n	8005162 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d107      	bne.n	8004f6a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004f5a:	4b37      	ldr	r3, [pc, #220]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e0fb      	b.n	8005162 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f6a:	4b33      	ldr	r3, [pc, #204]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e0f3      	b.n	8005162 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f023 0203 	bic.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	492c      	ldr	r1, [pc, #176]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8c:	f7fd f8ce 	bl	800212c <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d112      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fd f8c6 	bl	800212c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e0d7      	b.n	8005162 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fb2:	4b21      	ldr	r3, [pc, #132]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 0318 	and.w	r3, r3, #24
 8004fba:	2b18      	cmp	r3, #24
 8004fbc:	d1ee      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x18c>
 8004fbe:	e043      	b.n	8005048 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d112      	bne.n	8004fee <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fc8:	e00a      	b.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004fca:	f7fd f8af 	bl	800212c <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e0c0      	b.n	8005162 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fe0:	4b15      	ldr	r3, [pc, #84]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	f003 0318 	and.w	r3, r3, #24
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d1ee      	bne.n	8004fca <HAL_RCC_ClockConfig+0x1ba>
 8004fec:	e02c      	b.n	8005048 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d122      	bne.n	800503c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fd f898 	bl	800212c <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e0a9      	b.n	8005162 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800500e:	4b0a      	ldr	r3, [pc, #40]	@ (8005038 <HAL_RCC_ClockConfig+0x228>)
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f003 0318 	and.w	r3, r3, #24
 8005016:	2b08      	cmp	r3, #8
 8005018:	d1ee      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x1e8>
 800501a:	e015      	b.n	8005048 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800501c:	f7fd f886 	bl	800212c <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800502a:	4293      	cmp	r3, r2
 800502c:	d906      	bls.n	800503c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e097      	b.n	8005162 <HAL_RCC_ClockConfig+0x352>
 8005032:	bf00      	nop
 8005034:	40022000 	.word	0x40022000
 8005038:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800503c:	4b4b      	ldr	r3, [pc, #300]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f003 0318 	and.w	r3, r3, #24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e9      	bne.n	800501c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d010      	beq.n	8005076 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	4b44      	ldr	r3, [pc, #272]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	429a      	cmp	r2, r3
 8005062:	d208      	bcs.n	8005076 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005064:	4b41      	ldr	r3, [pc, #260]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f023 020f 	bic.w	r2, r3, #15
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	493e      	ldr	r1, [pc, #248]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005076:	4b3e      	ldr	r3, [pc, #248]	@ (8005170 <HAL_RCC_ClockConfig+0x360>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d210      	bcs.n	80050a6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005084:	4b3a      	ldr	r3, [pc, #232]	@ (8005170 <HAL_RCC_ClockConfig+0x360>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f023 020f 	bic.w	r2, r3, #15
 800508c:	4938      	ldr	r1, [pc, #224]	@ (8005170 <HAL_RCC_ClockConfig+0x360>)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	4313      	orrs	r3, r2
 8005092:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005094:	4b36      	ldr	r3, [pc, #216]	@ (8005170 <HAL_RCC_ClockConfig+0x360>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d001      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e05d      	b.n	8005162 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d010      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	4b2d      	ldr	r3, [pc, #180]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050be:	429a      	cmp	r2, r3
 80050c0:	d208      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80050c2:	4b2a      	ldr	r3, [pc, #168]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	4927      	ldr	r1, [pc, #156]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d012      	beq.n	8005106 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	4b21      	ldr	r3, [pc, #132]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d209      	bcs.n	8005106 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80050f2:	4b1e      	ldr	r3, [pc, #120]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	491a      	ldr	r1, [pc, #104]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 8005102:	4313      	orrs	r3, r2
 8005104:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b00      	cmp	r3, #0
 8005110:	d012      	beq.n	8005138 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695a      	ldr	r2, [r3, #20]
 8005116:	4b15      	ldr	r3, [pc, #84]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	0a1b      	lsrs	r3, r3, #8
 800511c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005120:	429a      	cmp	r2, r3
 8005122:	d209      	bcs.n	8005138 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005124:	4b11      	ldr	r3, [pc, #68]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	490e      	ldr	r1, [pc, #56]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 8005134:	4313      	orrs	r3, r2
 8005136:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005138:	f000 f822 	bl	8005180 <HAL_RCC_GetSysClockFreq>
 800513c:	4602      	mov	r2, r0
 800513e:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <HAL_RCC_ClockConfig+0x35c>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	490b      	ldr	r1, [pc, #44]	@ (8005174 <HAL_RCC_ClockConfig+0x364>)
 8005148:	5ccb      	ldrb	r3, [r1, r3]
 800514a:	fa22 f303 	lsr.w	r3, r2, r3
 800514e:	4a0a      	ldr	r2, [pc, #40]	@ (8005178 <HAL_RCC_ClockConfig+0x368>)
 8005150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005152:	4b0a      	ldr	r3, [pc, #40]	@ (800517c <HAL_RCC_ClockConfig+0x36c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f7fc ff5e 	bl	8002018 <HAL_InitTick>
 800515c:	4603      	mov	r3, r0
 800515e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005160:	7afb      	ldrb	r3, [r7, #11]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	44020c00 	.word	0x44020c00
 8005170:	40022000 	.word	0x40022000
 8005174:	0801138c 	.word	0x0801138c
 8005178:	20000004 	.word	0x20000004
 800517c:	20000024 	.word	0x20000024

08005180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005180:	b480      	push	{r7}
 8005182:	b089      	sub	sp, #36	@ 0x24
 8005184:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005186:	4b8c      	ldr	r3, [pc, #560]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f003 0318 	and.w	r3, r3, #24
 800518e:	2b08      	cmp	r3, #8
 8005190:	d102      	bne.n	8005198 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005192:	4b8a      	ldr	r3, [pc, #552]	@ (80053bc <HAL_RCC_GetSysClockFreq+0x23c>)
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	e107      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005198:	4b87      	ldr	r3, [pc, #540]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f003 0318 	and.w	r3, r3, #24
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d112      	bne.n	80051ca <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80051a4:	4b84      	ldr	r3, [pc, #528]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051b0:	4b81      	ldr	r3, [pc, #516]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	08db      	lsrs	r3, r3, #3
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	4a81      	ldr	r2, [pc, #516]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0x240>)
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	e0f1      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80051c4:	4b7e      	ldr	r3, [pc, #504]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0x240>)
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	e0ee      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051ca:	4b7b      	ldr	r3, [pc, #492]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f003 0318 	and.w	r3, r3, #24
 80051d2:	2b10      	cmp	r3, #16
 80051d4:	d102      	bne.n	80051dc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051d6:	4b7b      	ldr	r3, [pc, #492]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x244>)
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	e0e5      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051dc:	4b76      	ldr	r3, [pc, #472]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f003 0318 	and.w	r3, r3, #24
 80051e4:	2b18      	cmp	r3, #24
 80051e6:	f040 80dd 	bne.w	80053a4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80051ea:	4b73      	ldr	r3, [pc, #460]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 80051ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80051f4:	4b70      	ldr	r3, [pc, #448]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005200:	4b6d      	ldr	r3, [pc, #436]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800520c:	4b6a      	ldr	r3, [pc, #424]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 800520e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005210:	08db      	lsrs	r3, r3, #3
 8005212:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	fb02 f303 	mul.w	r3, r2, r3
 800521c:	ee07 3a90 	vmov	s15, r3
 8005220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005224:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 80b7 	beq.w	800539e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d003      	beq.n	800523e <HAL_RCC_GetSysClockFreq+0xbe>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d056      	beq.n	80052ea <HAL_RCC_GetSysClockFreq+0x16a>
 800523c:	e077      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800523e:	4b5e      	ldr	r3, [pc, #376]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d02d      	beq.n	80052a6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800524a:	4b5b      	ldr	r3, [pc, #364]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	08db      	lsrs	r3, r3, #3
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	4a5a      	ldr	r2, [pc, #360]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0x240>)
 8005256:	fa22 f303 	lsr.w	r3, r2, r3
 800525a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	ee07 3a90 	vmov	s15, r3
 8005262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	ee07 3a90 	vmov	s15, r3
 800526c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005270:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005274:	4b50      	ldr	r3, [pc, #320]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527c:	ee07 3a90 	vmov	s15, r3
 8005280:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005284:	ed97 6a02 	vldr	s12, [r7, #8]
 8005288:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80053c8 <HAL_RCC_GetSysClockFreq+0x248>
 800528c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005290:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005294:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005298:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800529c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80052a4:	e065      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	ee07 3a90 	vmov	s15, r3
 80052ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80053cc <HAL_RCC_GetSysClockFreq+0x24c>
 80052b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b8:	4b3f      	ldr	r3, [pc, #252]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 80052ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c0:	ee07 3a90 	vmov	s15, r3
 80052c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80052c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80052cc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80053c8 <HAL_RCC_GetSysClockFreq+0x248>
 80052d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80052d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80052e8:	e043      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80053d0 <HAL_RCC_GetSysClockFreq+0x250>
 80052f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fc:	4b2e      	ldr	r3, [pc, #184]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 80052fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005304:	ee07 3a90 	vmov	s15, r3
 8005308:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800530c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005310:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80053c8 <HAL_RCC_GetSysClockFreq+0x248>
 8005314:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005318:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800531c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005320:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005328:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800532c:	e021      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	ee07 3a90 	vmov	s15, r3
 8005334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005338:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80053d4 <HAL_RCC_GetSysClockFreq+0x254>
 800533c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005340:	4b1d      	ldr	r3, [pc, #116]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005348:	ee07 3a90 	vmov	s15, r3
 800534c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005350:	ed97 6a02 	vldr	s12, [r7, #8]
 8005354:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80053c8 <HAL_RCC_GetSysClockFreq+0x248>
 8005358:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800535c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005360:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005364:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005370:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8005372:	4b11      	ldr	r3, [pc, #68]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0x238>)
 8005374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005376:	0a5b      	lsrs	r3, r3, #9
 8005378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800537c:	3301      	adds	r3, #1
 800537e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	ee07 3a90 	vmov	s15, r3
 8005386:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800538a:	edd7 6a06 	vldr	s13, [r7, #24]
 800538e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005396:	ee17 3a90 	vmov	r3, s15
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e004      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800539e:	2300      	movs	r3, #0
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	e001      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80053a4:	4b06      	ldr	r3, [pc, #24]	@ (80053c0 <HAL_RCC_GetSysClockFreq+0x240>)
 80053a6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80053a8:	69fb      	ldr	r3, [r7, #28]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3724      	adds	r7, #36	@ 0x24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	44020c00 	.word	0x44020c00
 80053bc:	003d0900 	.word	0x003d0900
 80053c0:	03d09000 	.word	0x03d09000
 80053c4:	007a1200 	.word	0x007a1200
 80053c8:	46000000 	.word	0x46000000
 80053cc:	4c742400 	.word	0x4c742400
 80053d0:	4af42400 	.word	0x4af42400
 80053d4:	4a742400 	.word	0x4a742400

080053d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80053dc:	f7ff fed0 	bl	8005180 <HAL_RCC_GetSysClockFreq>
 80053e0:	4602      	mov	r2, r0
 80053e2:	4b08      	ldr	r3, [pc, #32]	@ (8005404 <HAL_RCC_GetHCLKFreq+0x2c>)
 80053e4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80053e6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80053ea:	4907      	ldr	r1, [pc, #28]	@ (8005408 <HAL_RCC_GetHCLKFreq+0x30>)
 80053ec:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80053ee:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80053f2:	fa22 f303 	lsr.w	r3, r2, r3
 80053f6:	4a05      	ldr	r2, [pc, #20]	@ (800540c <HAL_RCC_GetHCLKFreq+0x34>)
 80053f8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80053fa:	4b04      	ldr	r3, [pc, #16]	@ (800540c <HAL_RCC_GetHCLKFreq+0x34>)
 80053fc:	681b      	ldr	r3, [r3, #0]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	44020c00 	.word	0x44020c00
 8005408:	0801138c 	.word	0x0801138c
 800540c:	20000004 	.word	0x20000004

08005410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8005414:	f7ff ffe0 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 8005418:	4602      	mov	r2, r0
 800541a:	4b06      	ldr	r3, [pc, #24]	@ (8005434 <HAL_RCC_GetPCLK1Freq+0x24>)
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	091b      	lsrs	r3, r3, #4
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	4904      	ldr	r1, [pc, #16]	@ (8005438 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005426:	5ccb      	ldrb	r3, [r1, r3]
 8005428:	f003 031f 	and.w	r3, r3, #31
 800542c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	bd80      	pop	{r7, pc}
 8005434:	44020c00 	.word	0x44020c00
 8005438:	0801139c 	.word	0x0801139c

0800543c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8005440:	f7ff ffca 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 8005444:	4602      	mov	r2, r0
 8005446:	4b06      	ldr	r3, [pc, #24]	@ (8005460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	4904      	ldr	r1, [pc, #16]	@ (8005464 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005452:	5ccb      	ldrb	r3, [r1, r3]
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	44020c00 	.word	0x44020c00
 8005464:	0801139c 	.word	0x0801139c

08005468 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800546c:	f7ff ffb4 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b06      	ldr	r3, [pc, #24]	@ (800548c <HAL_RCC_GetPCLK3Freq+0x24>)
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	0b1b      	lsrs	r3, r3, #12
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4904      	ldr	r1, [pc, #16]	@ (8005490 <HAL_RCC_GetPCLK3Freq+0x28>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	44020c00 	.word	0x44020c00
 8005490:	0801139c 	.word	0x0801139c

08005494 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005498:	b0d8      	sub	sp, #352	@ 0x160
 800549a:	af00      	add	r7, sp, #0
 800549c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054a0:	2300      	movs	r3, #0
 80054a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054a6:	2300      	movs	r3, #0
 80054a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80054ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80054b8:	2500      	movs	r5, #0
 80054ba:	ea54 0305 	orrs.w	r3, r4, r5
 80054be:	d00b      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80054c0:	4bcd      	ldr	r3, [pc, #820]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80054c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054c6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80054ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d0:	4ac9      	ldr	r2, [pc, #804]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80054d2:	430b      	orrs	r3, r1
 80054d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f002 0801 	and.w	r8, r2, #1
 80054e4:	f04f 0900 	mov.w	r9, #0
 80054e8:	ea58 0309 	orrs.w	r3, r8, r9
 80054ec:	d042      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80054ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f4:	2b05      	cmp	r3, #5
 80054f6:	d823      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80054f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005500 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005549 	.word	0x08005549
 8005504:	08005519 	.word	0x08005519
 8005508:	0800552d 	.word	0x0800552d
 800550c:	08005549 	.word	0x08005549
 8005510:	08005549 	.word	0x08005549
 8005514:	08005549 	.word	0x08005549
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005518:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800551c:	3308      	adds	r3, #8
 800551e:	4618      	mov	r0, r3
 8005520:	f004 fee0 	bl	800a2e4 <RCCEx_PLL2_Config>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800552a:	e00e      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800552c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005530:	3330      	adds	r3, #48	@ 0x30
 8005532:	4618      	mov	r0, r3
 8005534:	f004 ff6e 	bl	800a414 <RCCEx_PLL3_Config>
 8005538:	4603      	mov	r3, r0
 800553a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800553e:	e004      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005546:	e000      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8005548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800554a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10c      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005552:	4ba9      	ldr	r3, [pc, #676]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005554:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005558:	f023 0107 	bic.w	r1, r3, #7
 800555c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005562:	4aa5      	ldr	r2, [pc, #660]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005564:	430b      	orrs	r3, r1
 8005566:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800556a:	e003      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005570:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005574:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	f002 0a02 	and.w	sl, r2, #2
 8005580:	f04f 0b00 	mov.w	fp, #0
 8005584:	ea5a 030b 	orrs.w	r3, sl, fp
 8005588:	f000 8088 	beq.w	800569c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800558c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005592:	2b28      	cmp	r3, #40	@ 0x28
 8005594:	d868      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005596:	a201      	add	r2, pc, #4	@ (adr r2, 800559c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559c:	08005671 	.word	0x08005671
 80055a0:	08005669 	.word	0x08005669
 80055a4:	08005669 	.word	0x08005669
 80055a8:	08005669 	.word	0x08005669
 80055ac:	08005669 	.word	0x08005669
 80055b0:	08005669 	.word	0x08005669
 80055b4:	08005669 	.word	0x08005669
 80055b8:	08005669 	.word	0x08005669
 80055bc:	08005641 	.word	0x08005641
 80055c0:	08005669 	.word	0x08005669
 80055c4:	08005669 	.word	0x08005669
 80055c8:	08005669 	.word	0x08005669
 80055cc:	08005669 	.word	0x08005669
 80055d0:	08005669 	.word	0x08005669
 80055d4:	08005669 	.word	0x08005669
 80055d8:	08005669 	.word	0x08005669
 80055dc:	08005655 	.word	0x08005655
 80055e0:	08005669 	.word	0x08005669
 80055e4:	08005669 	.word	0x08005669
 80055e8:	08005669 	.word	0x08005669
 80055ec:	08005669 	.word	0x08005669
 80055f0:	08005669 	.word	0x08005669
 80055f4:	08005669 	.word	0x08005669
 80055f8:	08005669 	.word	0x08005669
 80055fc:	08005671 	.word	0x08005671
 8005600:	08005669 	.word	0x08005669
 8005604:	08005669 	.word	0x08005669
 8005608:	08005669 	.word	0x08005669
 800560c:	08005669 	.word	0x08005669
 8005610:	08005669 	.word	0x08005669
 8005614:	08005669 	.word	0x08005669
 8005618:	08005669 	.word	0x08005669
 800561c:	08005671 	.word	0x08005671
 8005620:	08005669 	.word	0x08005669
 8005624:	08005669 	.word	0x08005669
 8005628:	08005669 	.word	0x08005669
 800562c:	08005669 	.word	0x08005669
 8005630:	08005669 	.word	0x08005669
 8005634:	08005669 	.word	0x08005669
 8005638:	08005669 	.word	0x08005669
 800563c:	08005671 	.word	0x08005671
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005640:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005644:	3308      	adds	r3, #8
 8005646:	4618      	mov	r0, r3
 8005648:	f004 fe4c 	bl	800a2e4 <RCCEx_PLL2_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005652:	e00e      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005654:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005658:	3330      	adds	r3, #48	@ 0x30
 800565a:	4618      	mov	r0, r3
 800565c:	f004 feda 	bl	800a414 <RCCEx_PLL3_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005666:	e004      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800566e:	e000      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005672:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10c      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800567a:	4b5f      	ldr	r3, [pc, #380]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800567c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005680:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005684:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568a:	4a5b      	ldr	r2, [pc, #364]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800568c:	430b      	orrs	r3, r1
 800568e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005692:	e003      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005694:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005698:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800569c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f002 0304 	and.w	r3, r2, #4
 80056a8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80056ac:	2300      	movs	r3, #0
 80056ae:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80056b2:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80056b6:	460b      	mov	r3, r1
 80056b8:	4313      	orrs	r3, r2
 80056ba:	d04e      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80056bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056c2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80056c6:	d02c      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80056c8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80056cc:	d825      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80056ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056d2:	d028      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80056d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056d8:	d81f      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80056da:	2bc0      	cmp	r3, #192	@ 0xc0
 80056dc:	d025      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80056de:	2bc0      	cmp	r3, #192	@ 0xc0
 80056e0:	d81b      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80056e2:	2b80      	cmp	r3, #128	@ 0x80
 80056e4:	d00f      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80056e6:	2b80      	cmp	r3, #128	@ 0x80
 80056e8:	d817      	bhi.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01f      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80056ee:	2b40      	cmp	r3, #64	@ 0x40
 80056f0:	d113      	bne.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056f6:	3308      	adds	r3, #8
 80056f8:	4618      	mov	r0, r3
 80056fa:	f004 fdf3 	bl	800a2e4 <RCCEx_PLL2_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005704:	e014      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005706:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800570a:	3330      	adds	r3, #48	@ 0x30
 800570c:	4618      	mov	r0, r3
 800570e:	f004 fe81 	bl	800a414 <RCCEx_PLL3_Config>
 8005712:	4603      	mov	r3, r0
 8005714:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005718:	e00a      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005720:	e006      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005722:	bf00      	nop
 8005724:	e004      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005726:	bf00      	nop
 8005728:	e002      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800572a:	bf00      	nop
 800572c:	e000      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800572e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005730:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10c      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005738:	4b2f      	ldr	r3, [pc, #188]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800573a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800573e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005742:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005748:	4a2b      	ldr	r2, [pc, #172]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800574a:	430b      	orrs	r3, r1
 800574c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005750:	e003      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005752:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005756:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800575a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	f002 0308 	and.w	r3, r2, #8
 8005766:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800576a:	2300      	movs	r3, #0
 800576c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8005770:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8005774:	460b      	mov	r3, r1
 8005776:	4313      	orrs	r3, r2
 8005778:	d056      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800577a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800577e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005780:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005784:	d031      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005786:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800578a:	d82a      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800578c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005790:	d02d      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005792:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005796:	d824      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005798:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800579c:	d029      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800579e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80057a2:	d81e      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80057a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a8:	d011      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80057aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057ae:	d818      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d023      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80057b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057b8:	d113      	bne.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057be:	3308      	adds	r3, #8
 80057c0:	4618      	mov	r0, r3
 80057c2:	f004 fd8f 	bl	800a2e4 <RCCEx_PLL2_Config>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80057cc:	e017      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057d2:	3330      	adds	r3, #48	@ 0x30
 80057d4:	4618      	mov	r0, r3
 80057d6:	f004 fe1d 	bl	800a414 <RCCEx_PLL3_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80057e0:	e00d      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057e8:	e009      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80057ea:	bf00      	nop
 80057ec:	e007      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80057ee:	bf00      	nop
 80057f0:	e005      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80057f2:	bf00      	nop
 80057f4:	e003      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80057f6:	bf00      	nop
 80057f8:	44020c00 	.word	0x44020c00
        break;
 80057fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10c      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005806:	4bbb      	ldr	r3, [pc, #748]	@ (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800580c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005810:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005816:	4ab7      	ldr	r2, [pc, #732]	@ (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005818:	430b      	orrs	r3, r1
 800581a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800581e:	e003      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005820:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005824:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005828:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f002 0310 	and.w	r3, r2, #16
 8005834:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005838:	2300      	movs	r3, #0
 800583a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800583e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8005842:	460b      	mov	r3, r1
 8005844:	4313      	orrs	r3, r2
 8005846:	d053      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005848:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800584c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800584e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005852:	d031      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005854:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005858:	d82a      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800585a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800585e:	d02d      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005860:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005864:	d824      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005866:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800586a:	d029      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800586c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005870:	d81e      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005876:	d011      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800587c:	d818      	bhi.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d020      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005886:	d113      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005888:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800588c:	3308      	adds	r3, #8
 800588e:	4618      	mov	r0, r3
 8005890:	f004 fd28 	bl	800a2e4 <RCCEx_PLL2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800589a:	e014      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800589c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058a0:	3330      	adds	r3, #48	@ 0x30
 80058a2:	4618      	mov	r0, r3
 80058a4:	f004 fdb6 	bl	800a414 <RCCEx_PLL3_Config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80058ae:	e00a      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80058b6:	e006      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80058b8:	bf00      	nop
 80058ba:	e004      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80058bc:	bf00      	nop
 80058be:	e002      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80058c0:	bf00      	nop
 80058c2:	e000      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80058c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10c      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80058ce:	4b89      	ldr	r3, [pc, #548]	@ (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80058d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80058d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80058d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058de:	4a85      	ldr	r2, [pc, #532]	@ (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80058e6:	e003      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f002 0320 	and.w	r3, r2, #32
 80058fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005900:	2300      	movs	r3, #0
 8005902:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005906:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800590a:	460b      	mov	r3, r1
 800590c:	4313      	orrs	r3, r2
 800590e:	d053      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005916:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800591a:	d031      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800591c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005920:	d82a      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005922:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005926:	d02d      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005928:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800592c:	d824      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800592e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005932:	d029      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005934:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005938:	d81e      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800593a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800593e:	d011      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005944:	d818      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d020      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800594a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800594e:	d113      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005954:	3308      	adds	r3, #8
 8005956:	4618      	mov	r0, r3
 8005958:	f004 fcc4 	bl	800a2e4 <RCCEx_PLL2_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005962:	e014      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005968:	3330      	adds	r3, #48	@ 0x30
 800596a:	4618      	mov	r0, r3
 800596c:	f004 fd52 	bl	800a414 <RCCEx_PLL3_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005976:	e00a      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800597e:	e006      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005980:	bf00      	nop
 8005982:	e004      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005984:	bf00      	nop
 8005986:	e002      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005988:	bf00      	nop
 800598a:	e000      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800598c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10c      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005996:	4b57      	ldr	r3, [pc, #348]	@ (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005998:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800599c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80059a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a6:	4a53      	ldr	r2, [pc, #332]	@ (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80059a8:	430b      	orrs	r3, r1
 80059aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80059ae:	e003      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059b4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80059b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80059c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80059c8:	2300      	movs	r3, #0
 80059ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80059ce:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80059d2:	460b      	mov	r3, r1
 80059d4:	4313      	orrs	r3, r2
 80059d6:	d053      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80059d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059de:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80059e2:	d031      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80059e4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80059e8:	d82a      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80059ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ee:	d02d      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80059f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059f4:	d824      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80059f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80059fa:	d029      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80059fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a00:	d81e      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005a02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a06:	d011      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005a08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a0c:	d818      	bhi.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d020      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005a12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a16:	d113      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f004 fc60 	bl	800a2e4 <RCCEx_PLL2_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005a2a:	e014      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a30:	3330      	adds	r3, #48	@ 0x30
 8005a32:	4618      	mov	r0, r3
 8005a34:	f004 fcee 	bl	800a414 <RCCEx_PLL3_Config>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005a3e:	e00a      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a46:	e006      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005a48:	bf00      	nop
 8005a4a:	e004      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005a4c:	bf00      	nop
 8005a4e:	e002      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005a50:	bf00      	nop
 8005a52:	e000      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10c      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005a5e:	4b25      	ldr	r3, [pc, #148]	@ (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005a60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a64:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a6e:	4a21      	ldr	r2, [pc, #132]	@ (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005a70:	430b      	orrs	r3, r1
 8005a72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005a76:	e003      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a78:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a7c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005a8c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005a90:	2300      	movs	r3, #0
 8005a92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005a96:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	d055      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aa6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005aaa:	d033      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005aac:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005ab0:	d82c      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005ab2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ab6:	d02f      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005ab8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005abc:	d826      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005abe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ac2:	d02b      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005ac4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ac8:	d820      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005aca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ace:	d013      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ad4:	d81a      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d022      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005ada:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ade:	d115      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f004 fbfc 	bl	800a2e4 <RCCEx_PLL2_Config>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005af2:	e016      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005af4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005afc:	3330      	adds	r3, #48	@ 0x30
 8005afe:	4618      	mov	r0, r3
 8005b00:	f004 fc88 	bl	800a414 <RCCEx_PLL3_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005b0a:	e00a      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b12:	e006      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005b14:	bf00      	nop
 8005b16:	e004      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005b18:	bf00      	nop
 8005b1a:	e002      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005b1c:	bf00      	nop
 8005b1e:	e000      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10c      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005b2a:	4bbb      	ldr	r3, [pc, #748]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b30:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b3a:	4ab7      	ldr	r2, [pc, #732]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005b42:	e003      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005b58:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005b62:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005b66:	460b      	mov	r3, r1
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	d053      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005b6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b72:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b76:	d031      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005b78:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b7c:	d82a      	bhi.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005b7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b82:	d02d      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005b84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b88:	d824      	bhi.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005b8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b8e:	d029      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005b90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b94:	d81e      	bhi.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005b96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b9a:	d011      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005b9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ba0:	d818      	bhi.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d020      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005ba6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005baa:	d113      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f004 fb96 	bl	800a2e4 <RCCEx_PLL2_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005bbe:	e014      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bc4:	3330      	adds	r3, #48	@ 0x30
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f004 fc24 	bl	800a414 <RCCEx_PLL3_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005bd2:	e00a      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005bda:	e006      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005bdc:	bf00      	nop
 8005bde:	e004      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005be0:	bf00      	nop
 8005be2:	e002      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005be4:	bf00      	nop
 8005be6:	e000      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005bf2:	4b89      	ldr	r3, [pc, #548]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005bf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005bf8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c02:	4a85      	ldr	r2, [pc, #532]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005c04:	430b      	orrs	r3, r1
 8005c06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005c0a:	e003      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c10:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005c14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005c20:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005c24:	2300      	movs	r3, #0
 8005c26:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c2a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4313      	orrs	r3, r2
 8005c32:	d055      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8005c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c3c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005c40:	d031      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005c42:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005c46:	d82a      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c4c:	d02d      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c52:	d824      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005c54:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005c58:	d029      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005c5a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005c5e:	d81e      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005c60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c64:	d011      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8005c66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c6a:	d818      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d020      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005c70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c74:	d113      	bne.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f004 fb31 	bl	800a2e4 <RCCEx_PLL2_Config>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005c88:	e014      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c8e:	3330      	adds	r3, #48	@ 0x30
 8005c90:	4618      	mov	r0, r3
 8005c92:	f004 fbbf 	bl	800a414 <RCCEx_PLL3_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005c9c:	e00a      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ca4:	e006      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005ca6:	bf00      	nop
 8005ca8:	e004      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005caa:	bf00      	nop
 8005cac:	e002      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10d      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005cbc:	4b56      	ldr	r3, [pc, #344]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005cc2:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8005cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cce:	4a52      	ldr	r2, [pc, #328]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005cd6:	e003      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005cec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005cf6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	d044      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8005d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d08:	2b05      	cmp	r3, #5
 8005d0a:	d823      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d14 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d5d 	.word	0x08005d5d
 8005d18:	08005d2d 	.word	0x08005d2d
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d5d 	.word	0x08005d5d
 8005d24:	08005d5d 	.word	0x08005d5d
 8005d28:	08005d5d 	.word	0x08005d5d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d30:	3308      	adds	r3, #8
 8005d32:	4618      	mov	r0, r3
 8005d34:	f004 fad6 	bl	800a2e4 <RCCEx_PLL2_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005d3e:	e00e      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d44:	3330      	adds	r3, #48	@ 0x30
 8005d46:	4618      	mov	r0, r3
 8005d48:	f004 fb64 	bl	800a414 <RCCEx_PLL3_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005d52:	e004      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d5a:	e000      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10d      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8005d66:	4b2c      	ldr	r3, [pc, #176]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005d68:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005d6c:	f023 0107 	bic.w	r1, r3, #7
 8005d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d78:	4a27      	ldr	r2, [pc, #156]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005d80:	e003      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8005d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005da0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005da4:	460b      	mov	r3, r1
 8005da6:	4313      	orrs	r3, r2
 8005da8:	d04f      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db2:	2b50      	cmp	r3, #80	@ 0x50
 8005db4:	d029      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005db6:	2b50      	cmp	r3, #80	@ 0x50
 8005db8:	d823      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005dba:	2b40      	cmp	r3, #64	@ 0x40
 8005dbc:	d027      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005dbe:	2b40      	cmp	r3, #64	@ 0x40
 8005dc0:	d81f      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005dc2:	2b30      	cmp	r3, #48	@ 0x30
 8005dc4:	d025      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005dc6:	2b30      	cmp	r3, #48	@ 0x30
 8005dc8:	d81b      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d00f      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	d817      	bhi.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d022      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005dd6:	2b10      	cmp	r3, #16
 8005dd8:	d113      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dde:	3308      	adds	r3, #8
 8005de0:	4618      	mov	r0, r3
 8005de2:	f004 fa7f 	bl	800a2e4 <RCCEx_PLL2_Config>
 8005de6:	4603      	mov	r3, r0
 8005de8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005dec:	e017      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005df2:	3330      	adds	r3, #48	@ 0x30
 8005df4:	4618      	mov	r0, r3
 8005df6:	f004 fb0d 	bl	800a414 <RCCEx_PLL3_Config>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005e00:	e00d      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e08:	e009      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005e0a:	bf00      	nop
 8005e0c:	e007      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005e0e:	bf00      	nop
 8005e10:	e005      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005e12:	bf00      	nop
 8005e14:	e003      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8005e16:	bf00      	nop
 8005e18:	44020c00 	.word	0x44020c00
        break;
 8005e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10d      	bne.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8005e26:	4baf      	ldr	r3, [pc, #700]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005e28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005e2c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e38:	4aaa      	ldr	r2, [pc, #680]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005e3a:	430b      	orrs	r3, r1
 8005e3c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005e40:	e003      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e46:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4313      	orrs	r3, r2
 8005e68:	d055      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005e6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e72:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e76:	d031      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005e78:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e7c:	d82a      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005e7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e82:	d02d      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e88:	d824      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005e8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e8e:	d029      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005e90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e94:	d81e      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005e96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e9a:	d011      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005e9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ea0:	d818      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d020      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005ea6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005eaa:	d113      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f004 fa16 	bl	800a2e4 <RCCEx_PLL2_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005ebe:	e014      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ec4:	3330      	adds	r3, #48	@ 0x30
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f004 faa4 	bl	800a414 <RCCEx_PLL3_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005ed2:	e00a      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005eda:	e006      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005edc:	bf00      	nop
 8005ede:	e004      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005ee0:	bf00      	nop
 8005ee2:	e002      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005ee4:	bf00      	nop
 8005ee6:	e000      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10d      	bne.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005ef2:	4b7c      	ldr	r3, [pc, #496]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ef8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f04:	4a77      	ldr	r2, [pc, #476]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005f06:	430b      	orrs	r3, r1
 8005f08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f0c:	e003      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f26:	2300      	movs	r3, #0
 8005f28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f30:	460b      	mov	r3, r1
 8005f32:	4313      	orrs	r3, r2
 8005f34:	d03d      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f42:	d01b      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005f44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f48:	d814      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005f4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f4e:	d017      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f54:	d80e      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d014      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f5e:	d109      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f64:	3330      	adds	r3, #48	@ 0x30
 8005f66:	4618      	mov	r0, r3
 8005f68:	f004 fa54 	bl	800a414 <RCCEx_PLL3_Config>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005f72:	e008      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f7a:	e004      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005f7c:	bf00      	nop
 8005f7e:	e002      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005f80:	bf00      	nop
 8005f82:	e000      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10d      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005f8e:	4b55      	ldr	r3, [pc, #340]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005f90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f94:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fa0:	4a50      	ldr	r2, [pc, #320]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005fa8:	e003      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005fbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fc8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	d03d      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005fde:	d01b      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005fe0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005fe4:	d814      	bhi.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005fe6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005fea:	d017      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005fec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ff0:	d80e      	bhi.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d014      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005ff6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ffa:	d109      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006000:	3330      	adds	r3, #48	@ 0x30
 8006002:	4618      	mov	r0, r3
 8006004:	f004 fa06 	bl	800a414 <RCCEx_PLL3_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800600e:	e008      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006016:	e004      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006018:	bf00      	nop
 800601a:	e002      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800601c:	bf00      	nop
 800601e:	e000      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006022:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10d      	bne.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800602a:	4b2e      	ldr	r3, [pc, #184]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800602c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006030:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006034:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800603c:	4a29      	ldr	r2, [pc, #164]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800603e:	430b      	orrs	r3, r1
 8006040:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006044:	e003      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006046:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800604a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800604e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800605a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800605e:	2300      	movs	r3, #0
 8006060:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006064:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006068:	460b      	mov	r3, r1
 800606a:	4313      	orrs	r3, r2
 800606c:	d040      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800606e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006072:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006076:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800607a:	d01b      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800607c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006080:	d814      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006082:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006086:	d017      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006088:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800608c:	d80e      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d014      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006092:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006096:	d109      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006098:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800609c:	3330      	adds	r3, #48	@ 0x30
 800609e:	4618      	mov	r0, r3
 80060a0:	f004 f9b8 	bl	800a414 <RCCEx_PLL3_Config>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80060aa:	e008      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060b2:	e004      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80060b4:	bf00      	nop
 80060b6:	e002      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80060b8:	bf00      	nop
 80060ba:	e000      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80060bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d110      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80060c6:	4b07      	ldr	r3, [pc, #28]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80060c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060cc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80060d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060d8:	4a02      	ldr	r2, [pc, #8]	@ (80060e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80060da:	430b      	orrs	r3, r1
 80060dc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80060e0:	e006      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80060e2:	bf00      	nop
 80060e4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	2100      	movs	r1, #0
 80060fa:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80060fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006106:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800610a:	460b      	mov	r3, r1
 800610c:	4313      	orrs	r3, r2
 800610e:	d03d      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8006110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006114:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006118:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800611c:	d01b      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800611e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006122:	d814      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006124:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006128:	d017      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800612a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800612e:	d80e      	bhi.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d014      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8006134:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006138:	d109      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800613a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800613e:	3330      	adds	r3, #48	@ 0x30
 8006140:	4618      	mov	r0, r3
 8006142:	f004 f967 	bl	800a414 <RCCEx_PLL3_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800614c:	e008      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006154:	e004      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006156:	bf00      	nop
 8006158:	e002      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800615a:	bf00      	nop
 800615c:	e000      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800615e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006160:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10d      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006168:	4bbe      	ldr	r3, [pc, #760]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800616a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800616e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006172:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006176:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800617a:	4aba      	ldr	r2, [pc, #744]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800617c:	430b      	orrs	r3, r1
 800617e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006182:	e003      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006184:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006188:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800618c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006198:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800619c:	2300      	movs	r3, #0
 800619e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80061a6:	460b      	mov	r3, r1
 80061a8:	4313      	orrs	r3, r2
 80061aa:	d035      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80061ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061b8:	d015      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80061ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061be:	d80e      	bhi.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d012      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80061c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061c8:	d109      	bne.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061ce:	3330      	adds	r3, #48	@ 0x30
 80061d0:	4618      	mov	r0, r3
 80061d2:	f004 f91f 	bl	800a414 <RCCEx_PLL3_Config>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80061dc:	e006      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80061e4:	e002      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80061e6:	bf00      	nop
 80061e8:	e000      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80061ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10d      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80061f4:	4b9b      	ldr	r3, [pc, #620]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80061f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061fa:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80061fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006202:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006206:	4a97      	ldr	r2, [pc, #604]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006208:	430b      	orrs	r3, r1
 800620a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800620e:	e003      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006210:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006214:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006218:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	2100      	movs	r1, #0
 8006222:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8006226:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800622a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800622e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006232:	460b      	mov	r3, r1
 8006234:	4313      	orrs	r3, r2
 8006236:	d00e      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8006238:	4b8a      	ldr	r3, [pc, #552]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	4a89      	ldr	r2, [pc, #548]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800623e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006242:	61d3      	str	r3, [r2, #28]
 8006244:	4b87      	ldr	r3, [pc, #540]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006246:	69d9      	ldr	r1, [r3, #28]
 8006248:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800624c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006250:	4a84      	ldr	r2, [pc, #528]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006252:	430b      	orrs	r3, r1
 8006254:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006256:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006262:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006266:	2300      	movs	r3, #0
 8006268:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800626c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006270:	460b      	mov	r3, r1
 8006272:	4313      	orrs	r3, r2
 8006274:	d055      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800627a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800627e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006282:	d031      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8006284:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006288:	d82a      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800628a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800628e:	d02d      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006294:	d824      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800629a:	d029      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800629c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062a0:	d81e      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80062a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062a6:	d011      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80062a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ac:	d818      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d020      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80062b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062b6:	d113      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062bc:	3308      	adds	r3, #8
 80062be:	4618      	mov	r0, r3
 80062c0:	f004 f810 	bl	800a2e4 <RCCEx_PLL2_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80062ca:	e014      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062d0:	3330      	adds	r3, #48	@ 0x30
 80062d2:	4618      	mov	r0, r3
 80062d4:	f004 f89e 	bl	800a414 <RCCEx_PLL3_Config>
 80062d8:	4603      	mov	r3, r0
 80062da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80062de:	e00a      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062e6:	e006      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80062e8:	bf00      	nop
 80062ea:	e004      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80062ec:	bf00      	nop
 80062ee:	e002      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80062f0:	bf00      	nop
 80062f2:	e000      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80062f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10d      	bne.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80062fe:	4b59      	ldr	r3, [pc, #356]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006300:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006304:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006308:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800630c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006310:	4a54      	ldr	r2, [pc, #336]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006312:	430b      	orrs	r3, r1
 8006314:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006318:	e003      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800631e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006322:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800632e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006332:	2300      	movs	r3, #0
 8006334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006338:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800633c:	460b      	mov	r3, r1
 800633e:	4313      	orrs	r3, r2
 8006340:	d055      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006342:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006346:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800634a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800634e:	d031      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8006350:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006354:	d82a      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800635a:	d02d      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800635c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006360:	d824      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006362:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006366:	d029      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8006368:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800636c:	d81e      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800636e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006372:	d011      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8006374:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006378:	d818      	bhi.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d020      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800637e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006382:	d113      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006384:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006388:	3308      	adds	r3, #8
 800638a:	4618      	mov	r0, r3
 800638c:	f003 ffaa 	bl	800a2e4 <RCCEx_PLL2_Config>
 8006390:	4603      	mov	r3, r0
 8006392:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006396:	e014      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006398:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800639c:	3330      	adds	r3, #48	@ 0x30
 800639e:	4618      	mov	r0, r3
 80063a0:	f004 f838 	bl	800a414 <RCCEx_PLL3_Config>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80063aa:	e00a      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063b2:	e006      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80063b4:	bf00      	nop
 80063b6:	e004      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80063b8:	bf00      	nop
 80063ba:	e002      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80063bc:	bf00      	nop
 80063be:	e000      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80063c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10d      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80063ca:	4b26      	ldr	r3, [pc, #152]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80063cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80063d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80063d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80063dc:	4a21      	ldr	r2, [pc, #132]	@ (8006464 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80063de:	430b      	orrs	r3, r1
 80063e0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80063e4:	e003      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80063ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	2100      	movs	r1, #0
 80063f8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006408:	460b      	mov	r3, r1
 800640a:	4313      	orrs	r3, r2
 800640c:	d057      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800640e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006412:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006416:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800641a:	d033      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800641c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006420:	d82c      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006422:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006426:	d02f      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8006428:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800642c:	d826      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800642e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006432:	d02b      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8006434:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006438:	d820      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800643a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800643e:	d013      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006444:	d81a      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d022      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800644a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800644e:	d115      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006450:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006454:	3308      	adds	r3, #8
 8006456:	4618      	mov	r0, r3
 8006458:	f003 ff44 	bl	800a2e4 <RCCEx_PLL2_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006462:	e016      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8006464:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800646c:	3330      	adds	r3, #48	@ 0x30
 800646e:	4618      	mov	r0, r3
 8006470:	f003 ffd0 	bl	800a414 <RCCEx_PLL3_Config>
 8006474:	4603      	mov	r3, r0
 8006476:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800647a:	e00a      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006482:	e006      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006484:	bf00      	nop
 8006486:	e004      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006488:	bf00      	nop
 800648a:	e002      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800648c:	bf00      	nop
 800648e:	e000      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006492:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10d      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800649a:	4bbb      	ldr	r3, [pc, #748]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800649c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80064a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80064a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80064ac:	4ab6      	ldr	r2, [pc, #728]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80064ae:	430b      	orrs	r3, r1
 80064b0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80064b4:	e003      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80064be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	2100      	movs	r1, #0
 80064c8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80064cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80064d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80064d8:	460b      	mov	r3, r1
 80064da:	4313      	orrs	r3, r2
 80064dc:	d055      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80064de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80064e6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80064ea:	d031      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80064ec:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80064f0:	d82a      	bhi.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80064f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064f6:	d02d      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80064f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064fc:	d824      	bhi.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80064fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006502:	d029      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8006504:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006508:	d81e      	bhi.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800650a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800650e:	d011      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8006510:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006514:	d818      	bhi.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d020      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800651a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800651e:	d113      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006524:	3308      	adds	r3, #8
 8006526:	4618      	mov	r0, r3
 8006528:	f003 fedc 	bl	800a2e4 <RCCEx_PLL2_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006532:	e014      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006534:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006538:	3330      	adds	r3, #48	@ 0x30
 800653a:	4618      	mov	r0, r3
 800653c:	f003 ff6a 	bl	800a414 <RCCEx_PLL3_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006546:	e00a      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800654e:	e006      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006550:	bf00      	nop
 8006552:	e004      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006554:	bf00      	nop
 8006556:	e002      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006558:	bf00      	nop
 800655a:	e000      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800655c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800655e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10d      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8006566:	4b88      	ldr	r3, [pc, #544]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006568:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800656c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8006570:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006574:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006578:	4a83      	ldr	r2, [pc, #524]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800657a:	430b      	orrs	r3, r1
 800657c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006580:	e003      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006582:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006586:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800658a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	2100      	movs	r1, #0
 8006594:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8006598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800659c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065a0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80065a4:	460b      	mov	r3, r1
 80065a6:	4313      	orrs	r3, r2
 80065a8:	d055      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80065aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065b2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80065b6:	d031      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80065b8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80065bc:	d82a      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80065be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065c2:	d02d      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80065c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065c8:	d824      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80065ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065ce:	d029      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80065d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065d4:	d81e      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80065d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065da:	d011      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80065dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065e0:	d818      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d020      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80065e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065ea:	d113      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065f0:	3308      	adds	r3, #8
 80065f2:	4618      	mov	r0, r3
 80065f4:	f003 fe76 	bl	800a2e4 <RCCEx_PLL2_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80065fe:	e014      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006600:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006604:	3330      	adds	r3, #48	@ 0x30
 8006606:	4618      	mov	r0, r3
 8006608:	f003 ff04 	bl	800a414 <RCCEx_PLL3_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006612:	e00a      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800661a:	e006      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800661c:	bf00      	nop
 800661e:	e004      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006620:	bf00      	nop
 8006622:	e002      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006624:	bf00      	nop
 8006626:	e000      	b.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800662a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10d      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8006632:	4b55      	ldr	r3, [pc, #340]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006634:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006638:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800663c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006640:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006644:	4a50      	ldr	r2, [pc, #320]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006646:	430b      	orrs	r3, r1
 8006648:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800664c:	e003      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006652:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006656:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	2100      	movs	r1, #0
 8006660:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8006664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006668:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800666c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006670:	460b      	mov	r3, r1
 8006672:	4313      	orrs	r3, r2
 8006674:	d055      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006676:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800667a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800667e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006682:	d031      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006684:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006688:	d82a      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800668a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800668e:	d02d      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006694:	d824      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006696:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800669a:	d029      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800669c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80066a0:	d81e      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80066a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a6:	d011      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80066a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ac:	d818      	bhi.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d020      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80066b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066b6:	d113      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066bc:	3308      	adds	r3, #8
 80066be:	4618      	mov	r0, r3
 80066c0:	f003 fe10 	bl	800a2e4 <RCCEx_PLL2_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80066ca:	e014      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066d0:	3330      	adds	r3, #48	@ 0x30
 80066d2:	4618      	mov	r0, r3
 80066d4:	f003 fe9e 	bl	800a414 <RCCEx_PLL3_Config>
 80066d8:	4603      	mov	r3, r0
 80066da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80066de:	e00a      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066e6:	e006      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80066e8:	bf00      	nop
 80066ea:	e004      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80066ec:	bf00      	nop
 80066ee:	e002      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80066f0:	bf00      	nop
 80066f2:	e000      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80066f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10d      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80066fe:	4b22      	ldr	r3, [pc, #136]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006700:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006704:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006708:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800670c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006710:	4a1d      	ldr	r2, [pc, #116]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006712:	430b      	orrs	r3, r1
 8006714:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006718:	e003      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800671e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006722:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800672e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006732:	2300      	movs	r3, #0
 8006734:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006738:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800673c:	460b      	mov	r3, r1
 800673e:	4313      	orrs	r3, r2
 8006740:	d055      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006742:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006746:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800674a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800674e:	d035      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006750:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006754:	d82e      	bhi.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006756:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800675a:	d031      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800675c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006760:	d828      	bhi.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006766:	d01b      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800676c:	d822      	bhi.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8006772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006776:	d009      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006778:	e01c      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800677a:	4b03      	ldr	r3, [pc, #12]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800677c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677e:	4a02      	ldr	r2, [pc, #8]	@ (8006788 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006784:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006786:	e01c      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006788:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800678c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006790:	3308      	adds	r3, #8
 8006792:	4618      	mov	r0, r3
 8006794:	f003 fda6 	bl	800a2e4 <RCCEx_PLL2_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800679e:	e010      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067a4:	3330      	adds	r3, #48	@ 0x30
 80067a6:	4618      	mov	r0, r3
 80067a8:	f003 fe34 	bl	800a414 <RCCEx_PLL3_Config>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067b2:	e006      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80067ba:	e002      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80067bc:	bf00      	nop
 80067be:	e000      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80067c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10d      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80067ca:	4bc3      	ldr	r3, [pc, #780]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80067cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80067d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80067dc:	4abe      	ldr	r2, [pc, #760]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80067de:	430b      	orrs	r3, r1
 80067e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80067e4:	e003      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80067ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80067fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067fe:	2300      	movs	r3, #0
 8006800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006804:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006808:	460b      	mov	r3, r1
 800680a:	4313      	orrs	r3, r2
 800680c:	d051      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800680e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006812:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800681a:	d033      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800681c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006820:	d82c      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006822:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006826:	d02d      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006828:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800682c:	d826      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800682e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006832:	d019      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8006834:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006838:	d820      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800683e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006842:	d007      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006844:	e01a      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006846:	4ba4      	ldr	r3, [pc, #656]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684a:	4aa3      	ldr	r2, [pc, #652]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800684c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006850:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006852:	e018      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006854:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006858:	3308      	adds	r3, #8
 800685a:	4618      	mov	r0, r3
 800685c:	f003 fd42 	bl	800a2e4 <RCCEx_PLL2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006866:	e00e      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800686c:	3330      	adds	r3, #48	@ 0x30
 800686e:	4618      	mov	r0, r3
 8006870:	f003 fdd0 	bl	800a414 <RCCEx_PLL3_Config>
 8006874:	4603      	mov	r3, r0
 8006876:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800687a:	e004      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006882:	e000      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006886:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10d      	bne.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800688e:	4b92      	ldr	r3, [pc, #584]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006894:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8006898:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800689c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80068a0:	4a8d      	ldr	r2, [pc, #564]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80068a2:	430b      	orrs	r3, r1
 80068a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80068a8:	e003      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80068b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80068be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068c0:	2300      	movs	r3, #0
 80068c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068c8:	460b      	mov	r3, r1
 80068ca:	4313      	orrs	r3, r2
 80068cc:	d032      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80068ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80068d6:	2b05      	cmp	r3, #5
 80068d8:	d80f      	bhi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d211      	bcs.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d911      	bls.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d109      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068ea:	3308      	adds	r3, #8
 80068ec:	4618      	mov	r0, r3
 80068ee:	f003 fcf9 	bl	800a2e4 <RCCEx_PLL2_Config>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068f8:	e006      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006900:	e002      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006902:	bf00      	nop
 8006904:	e000      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006908:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10d      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006910:	4b71      	ldr	r3, [pc, #452]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006916:	f023 0107 	bic.w	r1, r3, #7
 800691a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800691e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006922:	4a6d      	ldr	r2, [pc, #436]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006924:	430b      	orrs	r3, r1
 8006926:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800692a:	e003      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006930:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006934:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	2100      	movs	r1, #0
 800693e:	6739      	str	r1, [r7, #112]	@ 0x70
 8006940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006944:	677b      	str	r3, [r7, #116]	@ 0x74
 8006946:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800694a:	460b      	mov	r3, r1
 800694c:	4313      	orrs	r3, r2
 800694e:	d024      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800695c:	2b08      	cmp	r3, #8
 800695e:	d005      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006966:	e002      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006968:	bf00      	nop
 800696a:	e000      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800696c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800696e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10d      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006976:	4b58      	ldr	r3, [pc, #352]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800697c:	f023 0108 	bic.w	r1, r3, #8
 8006980:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006988:	4a53      	ldr	r2, [pc, #332]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800698a:	430b      	orrs	r3, r1
 800698c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006990:	e003      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006992:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006996:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800699a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80069a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069a8:	2300      	movs	r3, #0
 80069aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069ac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80069b0:	460b      	mov	r3, r1
 80069b2:	4313      	orrs	r3, r2
 80069b4:	f000 80b9 	beq.w	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80069b8:	4b48      	ldr	r3, [pc, #288]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80069ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069bc:	4a47      	ldr	r2, [pc, #284]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069c4:	f7fb fbb2 	bl	800212c <HAL_GetTick>
 80069c8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80069cc:	e00b      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069ce:	f7fb fbad 	bl	800212c <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d903      	bls.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069e4:	e005      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80069e6:	4b3d      	ldr	r3, [pc, #244]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0ed      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80069f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f040 8093 	bne.w	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069fc:	4b36      	ldr	r3, [pc, #216]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80069fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a06:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006a0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d023      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8006a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a16:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8006a1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d01b      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a22:	4b2d      	ldr	r3, [pc, #180]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a2c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a30:	4b29      	ldr	r3, [pc, #164]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a36:	4a28      	ldr	r2, [pc, #160]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a40:	4b25      	ldr	r3, [pc, #148]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a46:	4a24      	ldr	r2, [pc, #144]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a50:	4a21      	ldr	r2, [pc, #132]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a52:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006a56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d019      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a66:	f7fb fb61 	bl	800212c <HAL_GetTick>
 8006a6a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a6e:	e00d      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a70:	f7fb fb5c 	bl	800212c <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006a7a:	1ad2      	subs	r2, r2, r3
 8006a7c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d903      	bls.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8006a8a:	e006      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a8c:	4b12      	ldr	r3, [pc, #72]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0ea      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006a9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d13a      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aa6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ab2:	d115      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006ab4:	4b08      	ldr	r3, [pc, #32]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006abc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ac0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006ac4:	091b      	lsrs	r3, r3, #4
 8006ac6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006aca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006ace:	4a02      	ldr	r2, [pc, #8]	@ (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ad0:	430b      	orrs	r3, r1
 8006ad2:	61d3      	str	r3, [r2, #28]
 8006ad4:	e00a      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006ad6:	bf00      	nop
 8006ad8:	44020c00 	.word	0x44020c00
 8006adc:	44020800 	.word	0x44020800
 8006ae0:	4b9f      	ldr	r3, [pc, #636]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	4a9e      	ldr	r2, [pc, #632]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ae6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006aea:	61d3      	str	r3, [r2, #28]
 8006aec:	4b9c      	ldr	r3, [pc, #624]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006af2:	4a9b      	ldr	r2, [pc, #620]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006af8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006afc:	4b98      	ldr	r3, [pc, #608]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006afe:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006b02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b06:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b0e:	4a94      	ldr	r2, [pc, #592]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b10:	430b      	orrs	r3, r1
 8006b12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b16:	e008      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b1c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8006b20:	e003      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006b36:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b38:	2300      	movs	r3, #0
 8006b3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006b40:	460b      	mov	r3, r1
 8006b42:	4313      	orrs	r3, r2
 8006b44:	d035      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006b46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006b4e:	2b30      	cmp	r3, #48	@ 0x30
 8006b50:	d014      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006b52:	2b30      	cmp	r3, #48	@ 0x30
 8006b54:	d80e      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d012      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d80a      	bhi.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d010      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006b62:	2b10      	cmp	r3, #16
 8006b64:	d106      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b66:	4b7e      	ldr	r3, [pc, #504]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6a:	4a7d      	ldr	r2, [pc, #500]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b70:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b72:	e008      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b7a:	e004      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006b7c:	bf00      	nop
 8006b7e:	e002      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006b80:	bf00      	nop
 8006b82:	e000      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10d      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006b8e:	4b74      	ldr	r3, [pc, #464]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006b98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b9c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006ba0:	4a6f      	ldr	r2, [pc, #444]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006ba8:	e003      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006baa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006bb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006bbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bc4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	d033      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bd2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006bda:	2b40      	cmp	r3, #64	@ 0x40
 8006bdc:	d007      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006bde:	e010      	b.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be0:	4b5f      	ldr	r3, [pc, #380]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be4:	4a5e      	ldr	r2, [pc, #376]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bea:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006bec:	e00d      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006bee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f003 fb75 	bl	800a2e4 <RCCEx_PLL2_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006c00:	e003      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10d      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006c12:	4b53      	ldr	r3, [pc, #332]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c18:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c20:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006c24:	4a4e      	ldr	r2, [pc, #312]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c26:	430b      	orrs	r3, r1
 8006c28:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006c2c:	e003      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c32:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006c36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c44:	2300      	movs	r3, #0
 8006c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c48:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	d033      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006c52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c56:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d002      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8006c5e:	2b80      	cmp	r3, #128	@ 0x80
 8006c60:	d007      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8006c62:	e010      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c64:	4b3e      	ldr	r3, [pc, #248]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c68:	4a3d      	ldr	r2, [pc, #244]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c6e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006c70:	e00d      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c76:	3308      	adds	r3, #8
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f003 fb33 	bl	800a2e4 <RCCEx_PLL2_Config>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006c84:	e003      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10d      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006c96:	4b32      	ldr	r3, [pc, #200]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c9c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ca4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006caa:	430b      	orrs	r3, r1
 8006cac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006cb0:	e003      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cb6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006cba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cc8:	2300      	movs	r3, #0
 8006cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ccc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	d04a      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006cd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d827      	bhi.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8006ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006cfd 	.word	0x08006cfd
 8006cec:	08006d0b 	.word	0x08006d0b
 8006cf0:	08006d1f 	.word	0x08006d1f
 8006cf4:	08006d3b 	.word	0x08006d3b
 8006cf8:	08006d3b 	.word	0x08006d3b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cfc:	4b18      	ldr	r3, [pc, #96]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d00:	4a17      	ldr	r2, [pc, #92]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d06:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006d08:	e018      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d0e:	3308      	adds	r3, #8
 8006d10:	4618      	mov	r0, r3
 8006d12:	f003 fae7 	bl	800a2e4 <RCCEx_PLL2_Config>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006d1c:	e00e      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d22:	3330      	adds	r3, #48	@ 0x30
 8006d24:	4618      	mov	r0, r3
 8006d26:	f003 fb75 	bl	800a414 <RCCEx_PLL3_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006d30:	e004      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d38:	e000      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8006d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10f      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006d44:	4b06      	ldr	r3, [pc, #24]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d4a:	f023 0107 	bic.w	r1, r3, #7
 8006d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d56:	4a02      	ldr	r2, [pc, #8]	@ (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006d5e:	e005      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006d60:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d68:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006d82:	460b      	mov	r3, r1
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f000 8081 	beq.w	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8006d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	d85f      	bhi.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006d96:	a201      	add	r2, pc, #4	@ (adr r2, 8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006e21 	.word	0x08006e21
 8006da0:	08006e57 	.word	0x08006e57
 8006da4:	08006e57 	.word	0x08006e57
 8006da8:	08006e57 	.word	0x08006e57
 8006dac:	08006e57 	.word	0x08006e57
 8006db0:	08006e57 	.word	0x08006e57
 8006db4:	08006e57 	.word	0x08006e57
 8006db8:	08006e57 	.word	0x08006e57
 8006dbc:	08006e2f 	.word	0x08006e2f
 8006dc0:	08006e57 	.word	0x08006e57
 8006dc4:	08006e57 	.word	0x08006e57
 8006dc8:	08006e57 	.word	0x08006e57
 8006dcc:	08006e57 	.word	0x08006e57
 8006dd0:	08006e57 	.word	0x08006e57
 8006dd4:	08006e57 	.word	0x08006e57
 8006dd8:	08006e57 	.word	0x08006e57
 8006ddc:	08006e43 	.word	0x08006e43
 8006de0:	08006e57 	.word	0x08006e57
 8006de4:	08006e57 	.word	0x08006e57
 8006de8:	08006e57 	.word	0x08006e57
 8006dec:	08006e57 	.word	0x08006e57
 8006df0:	08006e57 	.word	0x08006e57
 8006df4:	08006e57 	.word	0x08006e57
 8006df8:	08006e57 	.word	0x08006e57
 8006dfc:	08006e5f 	.word	0x08006e5f
 8006e00:	08006e57 	.word	0x08006e57
 8006e04:	08006e57 	.word	0x08006e57
 8006e08:	08006e57 	.word	0x08006e57
 8006e0c:	08006e57 	.word	0x08006e57
 8006e10:	08006e57 	.word	0x08006e57
 8006e14:	08006e57 	.word	0x08006e57
 8006e18:	08006e57 	.word	0x08006e57
 8006e1c:	08006e5f 	.word	0x08006e5f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e20:	4bab      	ldr	r3, [pc, #684]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e24:	4aaa      	ldr	r2, [pc, #680]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e2a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006e2c:	e018      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e32:	3308      	adds	r3, #8
 8006e34:	4618      	mov	r0, r3
 8006e36:	f003 fa55 	bl	800a2e4 <RCCEx_PLL2_Config>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006e40:	e00e      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e46:	3330      	adds	r3, #48	@ 0x30
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f003 fae3 	bl	800a414 <RCCEx_PLL3_Config>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006e54:	e004      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e5c:	e000      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8006e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e60:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10d      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006e68:	4b99      	ldr	r3, [pc, #612]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006e72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e7a:	4a95      	ldr	r2, [pc, #596]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e82:	e003      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e84:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e88:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006e98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e9e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	d04e      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006ea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006eb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eb4:	d02e      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eba:	d827      	bhi.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006ebc:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ebe:	d02b      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006ec0:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ec2:	d823      	bhi.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006ec4:	2b80      	cmp	r3, #128	@ 0x80
 8006ec6:	d017      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006ec8:	2b80      	cmp	r3, #128	@ 0x80
 8006eca:	d81f      	bhi.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006ed0:	2b40      	cmp	r3, #64	@ 0x40
 8006ed2:	d007      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006ed4:	e01a      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed6:	4b7e      	ldr	r3, [pc, #504]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eda:	4a7d      	ldr	r2, [pc, #500]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ee0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006ee2:	e01a      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ee8:	3308      	adds	r3, #8
 8006eea:	4618      	mov	r0, r3
 8006eec:	f003 f9fa 	bl	800a2e4 <RCCEx_PLL2_Config>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006ef6:	e010      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006efc:	3330      	adds	r3, #48	@ 0x30
 8006efe:	4618      	mov	r0, r3
 8006f00:	f003 fa88 	bl	800a414 <RCCEx_PLL3_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006f0a:	e006      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f12:	e002      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006f14:	bf00      	nop
 8006f16:	e000      	b.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d10d      	bne.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006f22:	4b6b      	ldr	r3, [pc, #428]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f28:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f34:	4a66      	ldr	r2, [pc, #408]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006f36:	430b      	orrs	r3, r1
 8006f38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006f3c:	e003      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006f46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006f52:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f54:	2300      	movs	r3, #0
 8006f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	d055      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006f62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006f6a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006f6e:	d031      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006f70:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006f74:	d82a      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f7a:	d02d      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006f7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f80:	d824      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006f82:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f86:	d029      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006f88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f8c:	d81e      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f92:	d011      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f98:	d818      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d020      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa2:	d113      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fa8:	3308      	adds	r3, #8
 8006faa:	4618      	mov	r0, r3
 8006fac:	f003 f99a 	bl	800a2e4 <RCCEx_PLL2_Config>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006fb6:	e014      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fbc:	3330      	adds	r3, #48	@ 0x30
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f003 fa28 	bl	800a414 <RCCEx_PLL3_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006fca:	e00a      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fd2:	e006      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006fd4:	bf00      	nop
 8006fd6:	e004      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006fd8:	bf00      	nop
 8006fda:	e002      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006fdc:	bf00      	nop
 8006fde:	e000      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fe2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10d      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006fea:	4b39      	ldr	r3, [pc, #228]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ff0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ff8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006ffc:	4a34      	ldr	r2, [pc, #208]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ffe:	430b      	orrs	r3, r1
 8007000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007004:	e003      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007006:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800700a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800700e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800701a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800701c:	2300      	movs	r3, #0
 800701e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007020:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007024:	460b      	mov	r3, r1
 8007026:	4313      	orrs	r3, r2
 8007028:	d058      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800702a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800702e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007032:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007036:	d031      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8007038:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800703c:	d82a      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800703e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007042:	d02d      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8007044:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007048:	d824      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800704a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800704e:	d029      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8007050:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007054:	d81e      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800705a:	d011      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800705c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007060:	d818      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007062:	2b00      	cmp	r3, #0
 8007064:	d020      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8007066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800706a:	d113      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800706c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007070:	3308      	adds	r3, #8
 8007072:	4618      	mov	r0, r3
 8007074:	f003 f936 	bl	800a2e4 <RCCEx_PLL2_Config>
 8007078:	4603      	mov	r3, r0
 800707a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800707e:	e014      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007080:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007084:	3330      	adds	r3, #48	@ 0x30
 8007086:	4618      	mov	r0, r3
 8007088:	f003 f9c4 	bl	800a414 <RCCEx_PLL3_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007092:	e00a      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800709a:	e006      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800709c:	bf00      	nop
 800709e:	e004      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80070a0:	bf00      	nop
 80070a2:	e002      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80070a4:	bf00      	nop
 80070a6:	e000      	b.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80070a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d110      	bne.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80070b2:	4b07      	ldr	r3, [pc, #28]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80070b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070b8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80070bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070c4:	4902      	ldr	r1, [pc, #8]	@ (80070d0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80070cc:	e006      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80070ce:	bf00      	nop
 80070d0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80070dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	2100      	movs	r1, #0
 80070e6:	6239      	str	r1, [r7, #32]
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80070f2:	460b      	mov	r3, r1
 80070f4:	4313      	orrs	r3, r2
 80070f6:	d055      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80070f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007100:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007104:	d031      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8007106:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800710a:	d82a      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800710c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007110:	d02d      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8007112:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007116:	d824      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007118:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800711c:	d029      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800711e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007122:	d81e      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007128:	d011      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800712a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800712e:	d818      	bhi.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007130:	2b00      	cmp	r3, #0
 8007132:	d020      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8007134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007138:	d113      	bne.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800713a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800713e:	3308      	adds	r3, #8
 8007140:	4618      	mov	r0, r3
 8007142:	f003 f8cf 	bl	800a2e4 <RCCEx_PLL2_Config>
 8007146:	4603      	mov	r3, r0
 8007148:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800714c:	e014      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800714e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007152:	3330      	adds	r3, #48	@ 0x30
 8007154:	4618      	mov	r0, r3
 8007156:	f003 f95d 	bl	800a414 <RCCEx_PLL3_Config>
 800715a:	4603      	mov	r3, r0
 800715c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007160:	e00a      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007168:	e006      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800716a:	bf00      	nop
 800716c:	e004      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800716e:	bf00      	nop
 8007170:	e002      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007178:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10d      	bne.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8007180:	4b88      	ldr	r3, [pc, #544]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007186:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800718a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800718e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007192:	4984      	ldr	r1, [pc, #528]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007194:	4313      	orrs	r3, r2
 8007196:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800719a:	e003      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80071a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	2100      	movs	r1, #0
 80071ae:	61b9      	str	r1, [r7, #24]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	61fb      	str	r3, [r7, #28]
 80071b6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80071ba:	460b      	mov	r3, r1
 80071bc:	4313      	orrs	r3, r2
 80071be:	d03d      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80071c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d81c      	bhi.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80071cc:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80071ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d2:	bf00      	nop
 80071d4:	0800720f 	.word	0x0800720f
 80071d8:	080071e5 	.word	0x080071e5
 80071dc:	080071f3 	.word	0x080071f3
 80071e0:	0800720f 	.word	0x0800720f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e4:	4b6f      	ldr	r3, [pc, #444]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80071e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e8:	4a6e      	ldr	r2, [pc, #440]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80071ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ee:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80071f0:	e00e      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071f6:	3308      	adds	r3, #8
 80071f8:	4618      	mov	r0, r3
 80071fa:	f003 f873 	bl	800a2e4 <RCCEx_PLL2_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007204:	e004      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800720c:	e000      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800720e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007210:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10d      	bne.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007218:	4b62      	ldr	r3, [pc, #392]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800721a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800721e:	f023 0203 	bic.w	r2, r3, #3
 8007222:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007226:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800722a:	495e      	ldr	r1, [pc, #376]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800722c:	4313      	orrs	r3, r2
 800722e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007232:	e003      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007234:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007238:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800723c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	2100      	movs	r1, #0
 8007246:	6139      	str	r1, [r7, #16]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007252:	460b      	mov	r3, r1
 8007254:	4313      	orrs	r3, r2
 8007256:	d03a      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800725c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007264:	d00e      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8007266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800726a:	d815      	bhi.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800726c:	2b00      	cmp	r3, #0
 800726e:	d017      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8007270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007274:	d110      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007276:	4b4b      	ldr	r3, [pc, #300]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727a:	4a4a      	ldr	r2, [pc, #296]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800727c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007280:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007282:	e00e      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007288:	3308      	adds	r3, #8
 800728a:	4618      	mov	r0, r3
 800728c:	f003 f82a 	bl	800a2e4 <RCCEx_PLL2_Config>
 8007290:	4603      	mov	r3, r0
 8007292:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007296:	e004      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800729e:	e000      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80072a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10d      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80072aa:	4b3e      	ldr	r3, [pc, #248]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80072ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80072bc:	4939      	ldr	r1, [pc, #228]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80072c4:	e003      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	2100      	movs	r1, #0
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	f003 0310 	and.w	r3, r3, #16
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80072e4:	460b      	mov	r3, r1
 80072e6:	4313      	orrs	r3, r2
 80072e8:	d038      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80072ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80072f2:	2b30      	cmp	r3, #48	@ 0x30
 80072f4:	d01b      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80072f6:	2b30      	cmp	r3, #48	@ 0x30
 80072f8:	d815      	bhi.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80072fa:	2b10      	cmp	r3, #16
 80072fc:	d002      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d007      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8007302:	e010      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007304:	4b27      	ldr	r3, [pc, #156]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007308:	4a26      	ldr	r2, [pc, #152]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800730a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800730e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007310:	e00e      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007312:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007316:	3330      	adds	r3, #48	@ 0x30
 8007318:	4618      	mov	r0, r3
 800731a:	f003 f87b 	bl	800a414 <RCCEx_PLL3_Config>
 800731e:	4603      	mov	r3, r0
 8007320:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007324:	e004      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800732c:	e000      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800732e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007330:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10d      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007338:	4b1a      	ldr	r3, [pc, #104]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800733a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800733e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007342:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007346:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800734a:	4916      	ldr	r1, [pc, #88]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800734c:	4313      	orrs	r3, r2
 800734e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007352:	e003      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007354:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007358:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800735c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	2100      	movs	r1, #0
 8007366:	6039      	str	r1, [r7, #0]
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007372:	460b      	mov	r3, r1
 8007374:	4313      	orrs	r3, r2
 8007376:	d00c      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8007378:	4b0a      	ldr	r3, [pc, #40]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800737a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800737e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007382:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007386:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800738a:	4906      	ldr	r1, [pc, #24]	@ (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800738c:	4313      	orrs	r3, r2
 800738e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8007392:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8007396:	4618      	mov	r0, r3
 8007398:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800739c:	46bd      	mov	sp, r7
 800739e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073a2:	bf00      	nop
 80073a4:	44020c00 	.word	0x44020c00

080073a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b08b      	sub	sp, #44	@ 0x2c
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80073b0:	4bae      	ldr	r3, [pc, #696]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80073b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80073ba:	4bac      	ldr	r3, [pc, #688]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80073bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073be:	f003 0303 	and.w	r3, r3, #3
 80073c2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80073c4:	4ba9      	ldr	r3, [pc, #676]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80073c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c8:	0a1b      	lsrs	r3, r3, #8
 80073ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073ce:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80073d0:	4ba6      	ldr	r3, [pc, #664]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80073d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d4:	091b      	lsrs	r3, r3, #4
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80073dc:	4ba3      	ldr	r3, [pc, #652]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80073de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e0:	08db      	lsrs	r3, r3, #3
 80073e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	fb02 f303 	mul.w	r3, r2, r3
 80073ec:	ee07 3a90 	vmov	s15, r3
 80073f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 8126 	beq.w	800764c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	2b03      	cmp	r3, #3
 8007404:	d053      	beq.n	80074ae <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2b03      	cmp	r3, #3
 800740a:	d86f      	bhi.n	80074ec <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d003      	beq.n	800741a <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	2b02      	cmp	r3, #2
 8007416:	d02b      	beq.n	8007470 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007418:	e068      	b.n	80074ec <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800741a:	4b94      	ldr	r3, [pc, #592]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	08db      	lsrs	r3, r3, #3
 8007420:	f003 0303 	and.w	r3, r3, #3
 8007424:	4a92      	ldr	r2, [pc, #584]	@ (8007670 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007426:	fa22 f303 	lsr.w	r3, r2, r3
 800742a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	ee07 3a90 	vmov	s15, r3
 800743c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007440:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007452:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007674 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800746e:	e068      	b.n	8007542 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007678 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800747e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	ee07 3a90 	vmov	s15, r3
 8007488:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800748c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007490:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007674 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007494:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007498:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800749c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80074ac:	e049      	b.n	8007542 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	ee07 3a90 	vmov	s15, r3
 80074b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800767c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80074bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ca:	ed97 6a04 	vldr	s12, [r7, #16]
 80074ce:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007674 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80074d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80074ea:	e02a      	b.n	8007542 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074ec:	4b5f      	ldr	r3, [pc, #380]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	08db      	lsrs	r3, r3, #3
 80074f2:	f003 0303 	and.w	r3, r3, #3
 80074f6:	4a5e      	ldr	r2, [pc, #376]	@ (8007670 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80074f8:	fa22 f303 	lsr.w	r3, r2, r3
 80074fc:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	ee07 3a90 	vmov	s15, r3
 8007504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	ee07 3a90 	vmov	s15, r3
 800751c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007520:	ed97 6a04 	vldr	s12, [r7, #16]
 8007524:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007674 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007530:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007540:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007542:	4b4a      	ldr	r3, [pc, #296]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800754a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800754e:	d121      	bne.n	8007594 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007550:	4b46      	ldr	r3, [pc, #280]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d017      	beq.n	800758c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800755c:	4b43      	ldr	r3, [pc, #268]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800755e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007560:	0a5b      	lsrs	r3, r3, #9
 8007562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800756e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007572:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007576:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800757a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800757e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007582:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e006      	b.n	800759a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	e002      	b.n	800759a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800759a:	4b34      	ldr	r3, [pc, #208]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075a6:	d121      	bne.n	80075ec <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80075a8:	4b30      	ldr	r3, [pc, #192]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d017      	beq.n	80075e4 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80075b4:	4b2d      	ldr	r3, [pc, #180]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075b8:	0c1b      	lsrs	r3, r3, #16
 80075ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80075c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075ca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80075ce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80075d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075da:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	605a      	str	r2, [r3, #4]
 80075e2:	e006      	b.n	80075f2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	e002      	b.n	80075f2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075f2:	4b1e      	ldr	r3, [pc, #120]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075fe:	d121      	bne.n	8007644 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007600:	4b1a      	ldr	r3, [pc, #104]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007604:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d017      	beq.n	800763c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800760c:	4b17      	ldr	r3, [pc, #92]	@ (800766c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800760e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007610:	0e1b      	lsrs	r3, r3, #24
 8007612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800761e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007622:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007626:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800762a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800762e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007632:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800763a:	e010      	b.n	800765e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	609a      	str	r2, [r3, #8]
}
 8007642:	e00c      	b.n	800765e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	609a      	str	r2, [r3, #8]
}
 800764a:	e008      	b.n	800765e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	609a      	str	r2, [r3, #8]
}
 800765e:	bf00      	nop
 8007660:	372c      	adds	r7, #44	@ 0x2c
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	44020c00 	.word	0x44020c00
 8007670:	03d09000 	.word	0x03d09000
 8007674:	46000000 	.word	0x46000000
 8007678:	4a742400 	.word	0x4a742400
 800767c:	4af42400 	.word	0x4af42400

08007680 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007680:	b480      	push	{r7}
 8007682:	b08b      	sub	sp, #44	@ 0x2c
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007688:	4bae      	ldr	r3, [pc, #696]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800768a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800768c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007690:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007692:	4bac      	ldr	r3, [pc, #688]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800769c:	4ba9      	ldr	r3, [pc, #676]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	0a1b      	lsrs	r3, r3, #8
 80076a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076a6:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80076a8:	4ba6      	ldr	r3, [pc, #664]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	091b      	lsrs	r3, r3, #4
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80076b4:	4ba3      	ldr	r3, [pc, #652]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80076b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b8:	08db      	lsrs	r3, r3, #3
 80076ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	fb02 f303 	mul.w	r3, r2, r3
 80076c4:	ee07 3a90 	vmov	s15, r3
 80076c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076cc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 8126 	beq.w	8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d053      	beq.n	8007786 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d86f      	bhi.n	80077c4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d003      	beq.n	80076f2 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d02b      	beq.n	8007748 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80076f0:	e068      	b.n	80077c4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076f2:	4b94      	ldr	r3, [pc, #592]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	08db      	lsrs	r3, r3, #3
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	4a92      	ldr	r2, [pc, #584]	@ (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80076fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007702:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	ee07 3a90 	vmov	s15, r3
 800770a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	ee07 3a90 	vmov	s15, r3
 8007714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007726:	ed97 6a04 	vldr	s12, [r7, #16]
 800772a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800794c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800772e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800773a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007742:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007746:	e068      	b.n	800781a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007752:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007950 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	ee07 3a90 	vmov	s15, r3
 8007760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007764:	ed97 6a04 	vldr	s12, [r7, #16]
 8007768:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800794c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800776c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007774:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007778:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007780:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007784:	e049      	b.n	800781a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007790:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007954 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8007794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a2:	ed97 6a04 	vldr	s12, [r7, #16]
 80077a6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800794c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80077aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80077c2:	e02a      	b.n	800781a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077c4:	4b5f      	ldr	r3, [pc, #380]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	08db      	lsrs	r3, r3, #3
 80077ca:	f003 0303 	and.w	r3, r3, #3
 80077ce:	4a5e      	ldr	r2, [pc, #376]	@ (8007948 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80077d0:	fa22 f303 	lsr.w	r3, r2, r3
 80077d4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	ee07 3a90 	vmov	s15, r3
 80077dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	ee07 3a90 	vmov	s15, r3
 80077f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80077fc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800794c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007800:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007804:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007808:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800780c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007814:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007818:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800781a:	4b4a      	ldr	r3, [pc, #296]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007822:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007826:	d121      	bne.n	800786c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007828:	4b46      	ldr	r3, [pc, #280]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800782a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d017      	beq.n	8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007834:	4b43      	ldr	r3, [pc, #268]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007838:	0a5b      	lsrs	r3, r3, #9
 800783a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007846:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800784a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800784e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800785a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	e006      	b.n	8007872 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	e002      	b.n	8007872 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007872:	4b34      	ldr	r3, [pc, #208]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800787a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800787e:	d121      	bne.n	80078c4 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007880:	4b30      	ldr	r3, [pc, #192]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d017      	beq.n	80078bc <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800788c:	4b2d      	ldr	r3, [pc, #180]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800788e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007890:	0c1b      	lsrs	r3, r3, #16
 8007892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800789e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078a2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80078a6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80078aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078b2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	e006      	b.n	80078ca <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	605a      	str	r2, [r3, #4]
 80078c2:	e002      	b.n	80078ca <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078d6:	d121      	bne.n	800791c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80078d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d017      	beq.n	8007914 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80078e4:	4b17      	ldr	r3, [pc, #92]	@ (8007944 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80078e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e8:	0e1b      	lsrs	r3, r3, #24
 80078ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ee:	ee07 3a90 	vmov	s15, r3
 80078f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80078f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078fa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80078fe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800790a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007912:	e010      	b.n	8007936 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	609a      	str	r2, [r3, #8]
}
 800791a:	e00c      	b.n	8007936 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	609a      	str	r2, [r3, #8]
}
 8007922:	e008      	b.n	8007936 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	609a      	str	r2, [r3, #8]
}
 8007936:	bf00      	nop
 8007938:	372c      	adds	r7, #44	@ 0x2c
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	44020c00 	.word	0x44020c00
 8007948:	03d09000 	.word	0x03d09000
 800794c:	46000000 	.word	0x46000000
 8007950:	4a742400 	.word	0x4a742400
 8007954:	4af42400 	.word	0x4af42400

08007958 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007958:	b480      	push	{r7}
 800795a:	b08b      	sub	sp, #44	@ 0x2c
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007960:	4bae      	ldr	r3, [pc, #696]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007968:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800796a:	4bac      	ldr	r3, [pc, #688]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007974:	4ba9      	ldr	r3, [pc, #676]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007978:	0a1b      	lsrs	r3, r3, #8
 800797a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800797e:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007980:	4ba6      	ldr	r3, [pc, #664]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007984:	091b      	lsrs	r3, r3, #4
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800798c:	4ba3      	ldr	r3, [pc, #652]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800798e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007990:	08db      	lsrs	r3, r3, #3
 8007992:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	fb02 f303 	mul.w	r3, r2, r3
 800799c:	ee07 3a90 	vmov	s15, r3
 80079a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8126 	beq.w	8007bfc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d053      	beq.n	8007a5e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d86f      	bhi.n	8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d003      	beq.n	80079ca <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d02b      	beq.n	8007a20 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80079c8:	e068      	b.n	8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079ca:	4b94      	ldr	r3, [pc, #592]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	08db      	lsrs	r3, r3, #3
 80079d0:	f003 0303 	and.w	r3, r3, #3
 80079d4:	4a92      	ldr	r2, [pc, #584]	@ (8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80079d6:	fa22 f303 	lsr.w	r3, r2, r3
 80079da:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	ee07 3a90 	vmov	s15, r3
 80079ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a02:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a1a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007a1e:	e068      	b.n	8007af2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007c28 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	ee07 3a90 	vmov	s15, r3
 8007a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a3c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a40:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007a44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007a5c:	e049      	b.n	8007af2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	ee07 3a90 	vmov	s15, r3
 8007a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a68:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007a6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	ee07 3a90 	vmov	s15, r3
 8007a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7a:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a7e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a96:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007a9a:	e02a      	b.n	8007af2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a9c:	4b5f      	ldr	r3, [pc, #380]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	08db      	lsrs	r3, r3, #3
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	4a5e      	ldr	r2, [pc, #376]	@ (8007c20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aac:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad0:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ad4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007af0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007af2:	4b4a      	ldr	r3, [pc, #296]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007afa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007afe:	d121      	bne.n	8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007b00:	4b46      	ldr	r3, [pc, #280]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d017      	beq.n	8007b3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007b0c:	4b43      	ldr	r3, [pc, #268]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b10:	0a5b      	lsrs	r3, r3, #9
 8007b12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b16:	ee07 3a90 	vmov	s15, r3
 8007b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007b1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b22:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007b26:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b32:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e006      	b.n	8007b4a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	e002      	b.n	8007b4a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b4a:	4b34      	ldr	r3, [pc, #208]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b56:	d121      	bne.n	8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007b58:	4b30      	ldr	r3, [pc, #192]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d017      	beq.n	8007b94 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007b64:	4b2d      	ldr	r3, [pc, #180]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b68:	0c1b      	lsrs	r3, r3, #16
 8007b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b6e:	ee07 3a90 	vmov	s15, r3
 8007b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007b76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007b7e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b8a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	605a      	str	r2, [r3, #4]
 8007b92:	e006      	b.n	8007ba2 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	e002      	b.n	8007ba2 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007baa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bae:	d121      	bne.n	8007bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d017      	beq.n	8007bec <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007bbc:	4b17      	ldr	r3, [pc, #92]	@ (8007c1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bc0:	0e1b      	lsrs	r3, r3, #24
 8007bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007bce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007bd6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007bea:	e010      	b.n	8007c0e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	609a      	str	r2, [r3, #8]
}
 8007bf2:	e00c      	b.n	8007c0e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	609a      	str	r2, [r3, #8]
}
 8007bfa:	e008      	b.n	8007c0e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	609a      	str	r2, [r3, #8]
}
 8007c0e:	bf00      	nop
 8007c10:	372c      	adds	r7, #44	@ 0x2c
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	44020c00 	.word	0x44020c00
 8007c20:	03d09000 	.word	0x03d09000
 8007c24:	46000000 	.word	0x46000000
 8007c28:	4a742400 	.word	0x4a742400
 8007c2c:	4af42400 	.word	0x4af42400

08007c30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007c30:	b590      	push	{r4, r7, lr}
 8007c32:	b08f      	sub	sp, #60	@ 0x3c
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c3e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007c42:	4321      	orrs	r1, r4
 8007c44:	d150      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007c46:	4b26      	ldr	r3, [pc, #152]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c50:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007c52:	4b23      	ldr	r3, [pc, #140]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d108      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c66:	d104      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007c68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c6e:	f002 bb2a 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007c72:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c80:	d108      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c88:	d104      	bne.n	8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007c8a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c90:	f002 bb19 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007c94:	4b12      	ldr	r3, [pc, #72]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ca0:	d119      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ca8:	d115      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007caa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cb6:	d30a      	bcc.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007cb8:	4b09      	ldr	r3, [pc, #36]	@ (8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	0a1b      	lsrs	r3, r3, #8
 8007cbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cc2:	4a08      	ldr	r2, [pc, #32]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007cca:	f002 bafc 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007cd2:	f002 baf8 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cda:	f002 baf4 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cde:	bf00      	nop
 8007ce0:	44020c00 	.word	0x44020c00
 8007ce4:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007ce8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cec:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007cf0:	ea50 0104 	orrs.w	r1, r0, r4
 8007cf4:	f001 8275 	beq.w	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8007cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cfc:	2801      	cmp	r0, #1
 8007cfe:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8007d02:	f082 82dd 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d0a:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007d0e:	ea50 0104 	orrs.w	r1, r0, r4
 8007d12:	f001 816c 	beq.w	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8007d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d1a:	2801      	cmp	r0, #1
 8007d1c:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007d20:	f082 82ce 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d28:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8007d2c:	ea50 0104 	orrs.w	r1, r0, r4
 8007d30:	f001 8602 	beq.w	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8007d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d38:	2801      	cmp	r0, #1
 8007d3a:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8007d3e:	f082 82bf 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d46:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8007d4a:	ea50 0104 	orrs.w	r1, r0, r4
 8007d4e:	f001 854c 	beq.w	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007d52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d56:	2801      	cmp	r0, #1
 8007d58:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8007d5c:	f082 82b0 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d64:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8007d68:	ea50 0104 	orrs.w	r1, r0, r4
 8007d6c:	f001 849e 	beq.w	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007d70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d74:	2801      	cmp	r0, #1
 8007d76:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8007d7a:	f082 82a1 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d82:	f1a1 0420 	sub.w	r4, r1, #32
 8007d86:	ea50 0104 	orrs.w	r1, r0, r4
 8007d8a:	f001 83e8 	beq.w	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007d8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d92:	2801      	cmp	r0, #1
 8007d94:	f171 0120 	sbcs.w	r1, r1, #32
 8007d98:	f082 8292 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007da0:	f1a1 0410 	sub.w	r4, r1, #16
 8007da4:	ea50 0104 	orrs.w	r1, r0, r4
 8007da8:	f002 8256 	beq.w	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007db0:	2801      	cmp	r0, #1
 8007db2:	f171 0110 	sbcs.w	r1, r1, #16
 8007db6:	f082 8283 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dbe:	f1a1 0408 	sub.w	r4, r1, #8
 8007dc2:	ea50 0104 	orrs.w	r1, r0, r4
 8007dc6:	f002 81cc 	beq.w	800a162 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8007dca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dce:	2801      	cmp	r0, #1
 8007dd0:	f171 0108 	sbcs.w	r1, r1, #8
 8007dd4:	f082 8274 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ddc:	1f0c      	subs	r4, r1, #4
 8007dde:	ea50 0104 	orrs.w	r1, r0, r4
 8007de2:	f001 8648 	beq.w	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007de6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dea:	2801      	cmp	r0, #1
 8007dec:	f171 0104 	sbcs.w	r1, r1, #4
 8007df0:	f082 8266 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007df8:	1e8c      	subs	r4, r1, #2
 8007dfa:	ea50 0104 	orrs.w	r1, r0, r4
 8007dfe:	f002 8143 	beq.w	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8007e02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e06:	2801      	cmp	r0, #1
 8007e08:	f171 0102 	sbcs.w	r1, r1, #2
 8007e0c:	f082 8258 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e14:	1e4c      	subs	r4, r1, #1
 8007e16:	ea50 0104 	orrs.w	r1, r0, r4
 8007e1a:	f002 80ce 	beq.w	8009fba <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8007e1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e22:	2801      	cmp	r0, #1
 8007e24:	f171 0101 	sbcs.w	r1, r1, #1
 8007e28:	f082 824a 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e30:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007e34:	4321      	orrs	r1, r4
 8007e36:	f002 8059 	beq.w	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8007e3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e3e:	4cd9      	ldr	r4, [pc, #868]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	f171 0100 	sbcs.w	r1, r1, #0
 8007e46:	f082 823b 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e4e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007e52:	4321      	orrs	r1, r4
 8007e54:	f001 87d9 	beq.w	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8007e58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e5c:	4cd2      	ldr	r4, [pc, #840]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007e5e:	42a0      	cmp	r0, r4
 8007e60:	f171 0100 	sbcs.w	r1, r1, #0
 8007e64:	f082 822c 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e6c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8007e70:	4321      	orrs	r1, r4
 8007e72:	f001 8751 	beq.w	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8007e76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e7a:	4ccc      	ldr	r4, [pc, #816]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007e7c:	42a0      	cmp	r0, r4
 8007e7e:	f171 0100 	sbcs.w	r1, r1, #0
 8007e82:	f082 821d 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e8a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8007e8e:	4321      	orrs	r1, r4
 8007e90:	f001 869a 	beq.w	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e98:	4cc5      	ldr	r4, [pc, #788]	@ (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007e9a:	42a0      	cmp	r0, r4
 8007e9c:	f171 0100 	sbcs.w	r1, r1, #0
 8007ea0:	f082 820e 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ea4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ea8:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007eac:	4321      	orrs	r1, r4
 8007eae:	f001 8612 	beq.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007eb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eb6:	4cbf      	ldr	r4, [pc, #764]	@ (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007eb8:	42a0      	cmp	r0, r4
 8007eba:	f171 0100 	sbcs.w	r1, r1, #0
 8007ebe:	f082 81ff 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ec2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ec6:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007eca:	4321      	orrs	r1, r4
 8007ecc:	f002 817e 	beq.w	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007ed0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ed4:	4cb8      	ldr	r4, [pc, #736]	@ (80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007ed6:	42a0      	cmp	r0, r4
 8007ed8:	f171 0100 	sbcs.w	r1, r1, #0
 8007edc:	f082 81f0 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ee4:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007ee8:	4321      	orrs	r1, r4
 8007eea:	f000 829e 	beq.w	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007eee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ef2:	4cb2      	ldr	r4, [pc, #712]	@ (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007ef4:	42a0      	cmp	r0, r4
 8007ef6:	f171 0100 	sbcs.w	r1, r1, #0
 8007efa:	f082 81e1 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007efe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f02:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007f06:	4321      	orrs	r1, r4
 8007f08:	f000 826d 	beq.w	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f10:	4cab      	ldr	r4, [pc, #684]	@ (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007f12:	42a0      	cmp	r0, r4
 8007f14:	f171 0100 	sbcs.w	r1, r1, #0
 8007f18:	f082 81d2 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f20:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007f24:	4321      	orrs	r1, r4
 8007f26:	f001 800d 	beq.w	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8007f2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f2e:	4ca5      	ldr	r4, [pc, #660]	@ (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007f30:	42a0      	cmp	r0, r4
 8007f32:	f171 0100 	sbcs.w	r1, r1, #0
 8007f36:	f082 81c3 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f3e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007f42:	4321      	orrs	r1, r4
 8007f44:	f000 81d0 	beq.w	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007f48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f4c:	4c9e      	ldr	r4, [pc, #632]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007f4e:	42a0      	cmp	r0, r4
 8007f50:	f171 0100 	sbcs.w	r1, r1, #0
 8007f54:	f082 81b4 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f5c:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007f60:	4321      	orrs	r1, r4
 8007f62:	f000 8142 	beq.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007f66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f6a:	4c98      	ldr	r4, [pc, #608]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f6c:	42a0      	cmp	r0, r4
 8007f6e:	f171 0100 	sbcs.w	r1, r1, #0
 8007f72:	f082 81a5 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f7a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007f7e:	4321      	orrs	r1, r4
 8007f80:	f001 824e 	beq.w	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007f84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f88:	4c91      	ldr	r4, [pc, #580]	@ (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007f8a:	42a0      	cmp	r0, r4
 8007f8c:	f171 0100 	sbcs.w	r1, r1, #0
 8007f90:	f082 8196 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f98:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007f9c:	4321      	orrs	r1, r4
 8007f9e:	f001 8197 	beq.w	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007fa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fa6:	4c8b      	ldr	r4, [pc, #556]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007fa8:	42a0      	cmp	r0, r4
 8007faa:	f171 0100 	sbcs.w	r1, r1, #0
 8007fae:	f082 8187 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007fb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fb6:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8007fba:	4321      	orrs	r1, r4
 8007fbc:	f001 8154 	beq.w	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007fc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fc4:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007fc8:	f171 0100 	sbcs.w	r1, r1, #0
 8007fcc:	f082 8178 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007fd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fd4:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007fd8:	4321      	orrs	r1, r4
 8007fda:	f001 80b7 	beq.w	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007fde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fe2:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007fe6:	42a0      	cmp	r0, r4
 8007fe8:	f171 0100 	sbcs.w	r1, r1, #0
 8007fec:	f082 8168 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ff4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007ff8:	4321      	orrs	r1, r4
 8007ffa:	f001 8064 	beq.w	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008002:	f244 0401 	movw	r4, #16385	@ 0x4001
 8008006:	42a0      	cmp	r0, r4
 8008008:	f171 0100 	sbcs.w	r1, r1, #0
 800800c:	f082 8158 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008010:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008014:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008018:	4321      	orrs	r1, r4
 800801a:	f001 8011 	beq.w	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800801e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008022:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008026:	42a0      	cmp	r0, r4
 8008028:	f171 0100 	sbcs.w	r1, r1, #0
 800802c:	f082 8148 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008030:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008034:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8008038:	4321      	orrs	r1, r4
 800803a:	f000 871e 	beq.w	8008e7a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800803e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008042:	f241 0401 	movw	r4, #4097	@ 0x1001
 8008046:	42a0      	cmp	r0, r4
 8008048:	f171 0100 	sbcs.w	r1, r1, #0
 800804c:	f082 8138 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008050:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008054:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8008058:	4321      	orrs	r1, r4
 800805a:	f000 86a8 	beq.w	8008dae <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800805e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008062:	f640 0401 	movw	r4, #2049	@ 0x801
 8008066:	42a0      	cmp	r0, r4
 8008068:	f171 0100 	sbcs.w	r1, r1, #0
 800806c:	f082 8128 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008070:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008074:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8008078:	4321      	orrs	r1, r4
 800807a:	f000 8632 	beq.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800807e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008082:	f240 4401 	movw	r4, #1025	@ 0x401
 8008086:	42a0      	cmp	r0, r4
 8008088:	f171 0100 	sbcs.w	r1, r1, #0
 800808c:	f082 8118 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008090:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008094:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8008098:	4321      	orrs	r1, r4
 800809a:	f000 85b0 	beq.w	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800809e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080a2:	f240 2401 	movw	r4, #513	@ 0x201
 80080a6:	42a0      	cmp	r0, r4
 80080a8:	f171 0100 	sbcs.w	r1, r1, #0
 80080ac:	f082 8108 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080b4:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 80080b8:	4321      	orrs	r1, r4
 80080ba:	f000 8535 	beq.w	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80080be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080c2:	f240 1401 	movw	r4, #257	@ 0x101
 80080c6:	42a0      	cmp	r0, r4
 80080c8:	f171 0100 	sbcs.w	r1, r1, #0
 80080cc:	f082 80f8 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080d4:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 80080d8:	4321      	orrs	r1, r4
 80080da:	f000 84ba 	beq.w	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80080de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080e2:	2881      	cmp	r0, #129	@ 0x81
 80080e4:	f171 0100 	sbcs.w	r1, r1, #0
 80080e8:	f082 80ea 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080f0:	2821      	cmp	r0, #33	@ 0x21
 80080f2:	f171 0100 	sbcs.w	r1, r1, #0
 80080f6:	d26f      	bcs.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80080f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080fc:	4301      	orrs	r1, r0
 80080fe:	f002 80df 	beq.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008102:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008106:	1e42      	subs	r2, r0, #1
 8008108:	f141 33ff 	adc.w	r3, r1, #4294967295
 800810c:	2a20      	cmp	r2, #32
 800810e:	f173 0100 	sbcs.w	r1, r3, #0
 8008112:	f082 80d5 	bcs.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008116:	2a1f      	cmp	r2, #31
 8008118:	f202 80d2 	bhi.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800811c:	a101      	add	r1, pc, #4	@ (adr r1, 8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800811e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008122:	bf00      	nop
 8008124:	08008485 	.word	0x08008485
 8008128:	08008551 	.word	0x08008551
 800812c:	0800a2c1 	.word	0x0800a2c1
 8008130:	08008611 	.word	0x08008611
 8008134:	0800a2c1 	.word	0x0800a2c1
 8008138:	0800a2c1 	.word	0x0800a2c1
 800813c:	0800a2c1 	.word	0x0800a2c1
 8008140:	080086e1 	.word	0x080086e1
 8008144:	0800a2c1 	.word	0x0800a2c1
 8008148:	0800a2c1 	.word	0x0800a2c1
 800814c:	0800a2c1 	.word	0x0800a2c1
 8008150:	0800a2c1 	.word	0x0800a2c1
 8008154:	0800a2c1 	.word	0x0800a2c1
 8008158:	0800a2c1 	.word	0x0800a2c1
 800815c:	0800a2c1 	.word	0x0800a2c1
 8008160:	080087c3 	.word	0x080087c3
 8008164:	0800a2c1 	.word	0x0800a2c1
 8008168:	0800a2c1 	.word	0x0800a2c1
 800816c:	0800a2c1 	.word	0x0800a2c1
 8008170:	0800a2c1 	.word	0x0800a2c1
 8008174:	0800a2c1 	.word	0x0800a2c1
 8008178:	0800a2c1 	.word	0x0800a2c1
 800817c:	0800a2c1 	.word	0x0800a2c1
 8008180:	0800a2c1 	.word	0x0800a2c1
 8008184:	0800a2c1 	.word	0x0800a2c1
 8008188:	0800a2c1 	.word	0x0800a2c1
 800818c:	0800a2c1 	.word	0x0800a2c1
 8008190:	0800a2c1 	.word	0x0800a2c1
 8008194:	0800a2c1 	.word	0x0800a2c1
 8008198:	0800a2c1 	.word	0x0800a2c1
 800819c:	0800a2c1 	.word	0x0800a2c1
 80081a0:	08008899 	.word	0x08008899
 80081a4:	80000001 	.word	0x80000001
 80081a8:	40000001 	.word	0x40000001
 80081ac:	20000001 	.word	0x20000001
 80081b0:	10000001 	.word	0x10000001
 80081b4:	08000001 	.word	0x08000001
 80081b8:	04000001 	.word	0x04000001
 80081bc:	00800001 	.word	0x00800001
 80081c0:	00400001 	.word	0x00400001
 80081c4:	00200001 	.word	0x00200001
 80081c8:	00100001 	.word	0x00100001
 80081cc:	00080001 	.word	0x00080001
 80081d0:	00040001 	.word	0x00040001
 80081d4:	00020001 	.word	0x00020001
 80081d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081dc:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80081e0:	430b      	orrs	r3, r1
 80081e2:	f000 83c4 	beq.w	800896e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80081e6:	f002 b86b 	b.w	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80081ea:	4ba1      	ldr	r3, [pc, #644]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80081ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081f0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80081f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081fc:	d036      	beq.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008204:	d86b      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800820c:	d02b      	beq.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800820e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008210:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008214:	d863      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800821c:	d01b      	beq.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008224:	d85b      	bhi.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008228:	2b00      	cmp	r3, #0
 800822a:	d004      	beq.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008232:	d008      	beq.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8008234:	e053      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008236:	f107 0320 	add.w	r3, r7, #32
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff f8b4 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008242:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008244:	e04e      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008246:	f107 0314 	add.w	r3, r7, #20
 800824a:	4618      	mov	r0, r3
 800824c:	f7ff fa18 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008254:	e046      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008256:	f107 0308 	add.w	r3, r7, #8
 800825a:	4618      	mov	r0, r3
 800825c:	f7ff fb7c 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008264:	e03e      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008266:	4b83      	ldr	r3, [pc, #524]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008268:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800826a:	e03b      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800826c:	4b80      	ldr	r3, [pc, #512]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800826e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008272:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008276:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008278:	4b7d      	ldr	r3, [pc, #500]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b02      	cmp	r3, #2
 8008282:	d10c      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008286:	2b00      	cmp	r3, #0
 8008288:	d109      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800828a:	4b79      	ldr	r3, [pc, #484]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	08db      	lsrs	r3, r3, #3
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	4a78      	ldr	r2, [pc, #480]	@ (8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008296:	fa22 f303 	lsr.w	r3, r2, r3
 800829a:	637b      	str	r3, [r7, #52]	@ 0x34
 800829c:	e01e      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800829e:	4b74      	ldr	r3, [pc, #464]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082aa:	d106      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80082ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082b2:	d102      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80082b4:	4b71      	ldr	r3, [pc, #452]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80082b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082b8:	e010      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082ba:	4b6d      	ldr	r3, [pc, #436]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082c6:	d106      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80082c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082ce:	d102      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80082d0:	4b6b      	ldr	r3, [pc, #428]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80082d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80082d4:	e002      	b.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80082da:	e003      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80082dc:	e002      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082e2:	bf00      	nop
          }
        }
        break;
 80082e4:	f001 bfef 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80082e8:	4b61      	ldr	r3, [pc, #388]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80082ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80082ee:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80082f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082fa:	d036      	beq.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80082fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008302:	d86b      	bhi.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008306:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800830a:	d02b      	beq.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800830c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008312:	d863      	bhi.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008316:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800831a:	d01b      	beq.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800831c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008322:	d85b      	bhi.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008326:	2b00      	cmp	r3, #0
 8008328:	d004      	beq.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800832a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008330:	d008      	beq.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8008332:	e053      	b.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008334:	f107 0320 	add.w	r3, r7, #32
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff f835 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800833e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008340:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008342:	e04e      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008344:	f107 0314 	add.w	r3, r7, #20
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff f999 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008352:	e046      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008354:	f107 0308 	add.w	r3, r7, #8
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff fafd 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008362:	e03e      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008364:	4b43      	ldr	r3, [pc, #268]	@ (8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008366:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008368:	e03b      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800836a:	4b41      	ldr	r3, [pc, #260]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800836c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008370:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008374:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008376:	4b3e      	ldr	r3, [pc, #248]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b02      	cmp	r3, #2
 8008380:	d10c      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8008382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008384:	2b00      	cmp	r3, #0
 8008386:	d109      	bne.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008388:	4b39      	ldr	r3, [pc, #228]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	08db      	lsrs	r3, r3, #3
 800838e:	f003 0303 	and.w	r3, r3, #3
 8008392:	4a39      	ldr	r2, [pc, #228]	@ (8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008394:	fa22 f303 	lsr.w	r3, r2, r3
 8008398:	637b      	str	r3, [r7, #52]	@ 0x34
 800839a:	e01e      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800839c:	4b34      	ldr	r3, [pc, #208]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083a8:	d106      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80083aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b0:	d102      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80083b2:	4b32      	ldr	r3, [pc, #200]	@ (800847c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80083b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b6:	e010      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083b8:	4b2d      	ldr	r3, [pc, #180]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083c4:	d106      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80083c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083cc:	d102      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80083ce:	4b2c      	ldr	r3, [pc, #176]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80083d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d2:	e002      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80083d8:	e003      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80083da:	e002      	b.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80083e0:	bf00      	nop
          }
        }
        break;
 80083e2:	f001 bf70 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80083e6:	4b22      	ldr	r3, [pc, #136]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80083e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80083ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d108      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083f8:	f107 0320 	add.w	r3, r7, #32
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe ffd3 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008406:	f001 bf5e 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800840a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840c:	2b40      	cmp	r3, #64	@ 0x40
 800840e:	d108      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008410:	f107 0314 	add.w	r3, r7, #20
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff f933 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800841e:	f001 bf52 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008426:	f001 bf4e 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800842a:	4b11      	ldr	r3, [pc, #68]	@ (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800842c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008434:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	2b00      	cmp	r3, #0
 800843a:	d108      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800843c:	f107 0320 	add.w	r3, r7, #32
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe ffb1 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008448:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800844a:	f001 bf3c 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	2b80      	cmp	r3, #128	@ 0x80
 8008452:	d108      	bne.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008454:	f107 0314 	add.w	r3, r7, #20
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff f911 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008462:	f001 bf30 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800846a:	f001 bf2c 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800846e:	bf00      	nop
 8008470:	44020c00 	.word	0x44020c00
 8008474:	00bb8000 	.word	0x00bb8000
 8008478:	03d09000 	.word	0x03d09000
 800847c:	003d0900 	.word	0x003d0900
 8008480:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008484:	4b9d      	ldr	r3, [pc, #628]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008486:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008492:	2b00      	cmp	r3, #0
 8008494:	d104      	bne.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008496:	f7fc ffd1 	bl	800543c <HAL_RCC_GetPCLK2Freq>
 800849a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800849c:	f001 bf13 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80084a0:	4b96      	ldr	r3, [pc, #600]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084ac:	d10a      	bne.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d107      	bne.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084b4:	f107 0314 	add.w	r3, r7, #20
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7ff f8e1 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084c2:	e043      	b.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80084c4:	4b8d      	ldr	r3, [pc, #564]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084d0:	d10a      	bne.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80084d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d107      	bne.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084d8:	f107 0308 	add.w	r3, r7, #8
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff fa3b 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084e6:	e031      	b.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80084e8:	4b84      	ldr	r3, [pc, #528]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0302 	and.w	r3, r3, #2
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d10c      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80084f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d109      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084fa:	4b80      	ldr	r3, [pc, #512]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	08db      	lsrs	r3, r3, #3
 8008500:	f003 0303 	and.w	r3, r3, #3
 8008504:	4a7e      	ldr	r2, [pc, #504]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008506:	fa22 f303 	lsr.w	r3, r2, r3
 800850a:	637b      	str	r3, [r7, #52]	@ 0x34
 800850c:	e01e      	b.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800850e:	4b7b      	ldr	r3, [pc, #492]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800851a:	d105      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800851c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851e:	2b04      	cmp	r3, #4
 8008520:	d102      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8008522:	4b78      	ldr	r3, [pc, #480]	@ (8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008524:	637b      	str	r3, [r7, #52]	@ 0x34
 8008526:	e011      	b.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008528:	4b74      	ldr	r3, [pc, #464]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800852a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800852e:	f003 0302 	and.w	r3, r3, #2
 8008532:	2b02      	cmp	r3, #2
 8008534:	d106      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8008536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008538:	2b05      	cmp	r3, #5
 800853a:	d103      	bne.n	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800853c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008540:	637b      	str	r3, [r7, #52]	@ 0x34
 8008542:	e003      	b.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008548:	f001 bebd 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800854c:	f001 bebb 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008550:	4b6a      	ldr	r3, [pc, #424]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008552:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008556:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800855a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800855c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855e:	2b00      	cmp	r3, #0
 8008560:	d104      	bne.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008562:	f7fc ff55 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8008566:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008568:	f001 bead 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800856c:	4b63      	ldr	r3, [pc, #396]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008574:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008578:	d10a      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	2b08      	cmp	r3, #8
 800857e:	d107      	bne.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008580:	f107 0314 	add.w	r3, r7, #20
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff f87b 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	637b      	str	r3, [r7, #52]	@ 0x34
 800858e:	e03d      	b.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008592:	2b10      	cmp	r3, #16
 8008594:	d108      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008596:	f107 0308 	add.w	r3, r7, #8
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff f9dc 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085a4:	f001 be8f 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80085a8:	4b54      	ldr	r3, [pc, #336]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d10c      	bne.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	2b18      	cmp	r3, #24
 80085b8:	d109      	bne.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085ba:	4b50      	ldr	r3, [pc, #320]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	08db      	lsrs	r3, r3, #3
 80085c0:	f003 0303 	and.w	r3, r3, #3
 80085c4:	4a4e      	ldr	r2, [pc, #312]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80085c6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80085cc:	e01e      	b.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80085ce:	4b4b      	ldr	r3, [pc, #300]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085da:	d105      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	2b20      	cmp	r3, #32
 80085e0:	d102      	bne.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80085e2:	4b48      	ldr	r3, [pc, #288]	@ (8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80085e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085e6:	e011      	b.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80085e8:	4b44      	ldr	r3, [pc, #272]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80085ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d106      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80085f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f8:	2b28      	cmp	r3, #40	@ 0x28
 80085fa:	d103      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80085fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008600:	637b      	str	r3, [r7, #52]	@ 0x34
 8008602:	e003      	b.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008608:	f001 be5d 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800860c:	f001 be5b 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008610:	4b3a      	ldr	r3, [pc, #232]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008612:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008616:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800861a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008622:	f7fc fef5 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8008626:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008628:	f001 be4d 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800862c:	4b33      	ldr	r3, [pc, #204]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008634:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008638:	d10a      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800863a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863c:	2b40      	cmp	r3, #64	@ 0x40
 800863e:	d107      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008640:	f107 0314 	add.w	r3, r7, #20
 8008644:	4618      	mov	r0, r3
 8008646:	f7ff f81b 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	637b      	str	r3, [r7, #52]	@ 0x34
 800864e:	e045      	b.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008650:	4b2a      	ldr	r3, [pc, #168]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008658:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800865c:	d10a      	bne.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800865e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008660:	2b80      	cmp	r3, #128	@ 0x80
 8008662:	d107      	bne.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008664:	f107 0308 	add.w	r3, r7, #8
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff f975 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	637b      	str	r3, [r7, #52]	@ 0x34
 8008672:	e033      	b.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008674:	4b21      	ldr	r3, [pc, #132]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0302 	and.w	r3, r3, #2
 800867c:	2b02      	cmp	r3, #2
 800867e:	d10c      	bne.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	2bc0      	cmp	r3, #192	@ 0xc0
 8008684:	d109      	bne.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008686:	4b1d      	ldr	r3, [pc, #116]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	08db      	lsrs	r3, r3, #3
 800868c:	f003 0303 	and.w	r3, r3, #3
 8008690:	4a1b      	ldr	r2, [pc, #108]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008692:	fa22 f303 	lsr.w	r3, r2, r3
 8008696:	637b      	str	r3, [r7, #52]	@ 0x34
 8008698:	e020      	b.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800869a:	4b18      	ldr	r3, [pc, #96]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086a6:	d106      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ae:	d102      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80086b0:	4b14      	ldr	r3, [pc, #80]	@ (8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80086b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b4:	e012      	b.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80086b6:	4b11      	ldr	r3, [pc, #68]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80086b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d107      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80086c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80086ca:	d103      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80086cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d2:	e003      	b.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086d8:	f001 bdf5 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086dc:	f001 bdf3 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80086e0:	4b06      	ldr	r3, [pc, #24]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80086e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80086e6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80086ea:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80086ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80086f2:	f7fc fe8d 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 80086f6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80086f8:	f001 bde5 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086fc:	44020c00 	.word	0x44020c00
 8008700:	03d09000 	.word	0x03d09000
 8008704:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008708:	4ba0      	ldr	r3, [pc, #640]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008714:	d10b      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800871c:	d107      	bne.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800871e:	f107 0314 	add.w	r3, r7, #20
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe ffac 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	637b      	str	r3, [r7, #52]	@ 0x34
 800872c:	e047      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800872e:	4b97      	ldr	r3, [pc, #604]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800873a:	d10b      	bne.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800873c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008742:	d107      	bne.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008744:	f107 0308 	add.w	r3, r7, #8
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff f905 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	637b      	str	r3, [r7, #52]	@ 0x34
 8008752:	e034      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008754:	4b8d      	ldr	r3, [pc, #564]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b02      	cmp	r3, #2
 800875e:	d10d      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008762:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008766:	d109      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008768:	4b88      	ldr	r3, [pc, #544]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	08db      	lsrs	r3, r3, #3
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	4a87      	ldr	r2, [pc, #540]	@ (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
 8008778:	637b      	str	r3, [r7, #52]	@ 0x34
 800877a:	e020      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800877c:	4b83      	ldr	r3, [pc, #524]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008788:	d106      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800878a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008790:	d102      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008792:	4b80      	ldr	r3, [pc, #512]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008794:	637b      	str	r3, [r7, #52]	@ 0x34
 8008796:	e012      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008798:	4b7c      	ldr	r3, [pc, #496]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800879a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d107      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80087a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80087ac:	d103      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80087ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087b4:	e003      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087ba:	f001 bd84 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087be:	f001 bd82 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80087c2:	4b72      	ldr	r3, [pc, #456]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80087c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80087c8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80087cc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80087ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d104      	bne.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80087d4:	f7fc fe1c 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 80087d8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80087da:	f001 bd74 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80087de:	4b6b      	ldr	r3, [pc, #428]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087ea:	d10b      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80087ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087f2:	d107      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087f4:	f107 0314 	add.w	r3, r7, #20
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fe ff41 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	637b      	str	r3, [r7, #52]	@ 0x34
 8008802:	e047      	b.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008804:	4b61      	ldr	r3, [pc, #388]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800880c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008810:	d10b      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8008812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008818:	d107      	bne.n	800882a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800881a:	f107 0308 	add.w	r3, r7, #8
 800881e:	4618      	mov	r0, r3
 8008820:	f7ff f89a 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	637b      	str	r3, [r7, #52]	@ 0x34
 8008828:	e034      	b.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800882a:	4b58      	ldr	r3, [pc, #352]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b02      	cmp	r3, #2
 8008834:	d10d      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008838:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800883c:	d109      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800883e:	4b53      	ldr	r3, [pc, #332]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	08db      	lsrs	r3, r3, #3
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	4a51      	ldr	r2, [pc, #324]	@ (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800884a:	fa22 f303 	lsr.w	r3, r2, r3
 800884e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008850:	e020      	b.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008852:	4b4e      	ldr	r3, [pc, #312]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800885a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800885e:	d106      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008862:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008866:	d102      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8008868:	4b4a      	ldr	r3, [pc, #296]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800886a:	637b      	str	r3, [r7, #52]	@ 0x34
 800886c:	e012      	b.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800886e:	4b47      	ldr	r3, [pc, #284]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b02      	cmp	r3, #2
 800887a:	d107      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800887c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008882:	d103      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008884:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008888:	637b      	str	r3, [r7, #52]	@ 0x34
 800888a:	e003      	b.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800888c:	2300      	movs	r3, #0
 800888e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008890:	f001 bd19 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008894:	f001 bd17 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008898:	4b3c      	ldr	r3, [pc, #240]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800889a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800889e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80088a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80088a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d104      	bne.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80088aa:	f7fc fdb1 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 80088ae:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80088b0:	f001 bd09 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80088b4:	4b35      	ldr	r3, [pc, #212]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088c0:	d10b      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80088c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088c8:	d107      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ca:	f107 0314 	add.w	r3, r7, #20
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fed6 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088d8:	e047      	b.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80088da:	4b2c      	ldr	r3, [pc, #176]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088e6:	d10b      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80088e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088ee:	d107      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088f0:	f107 0308 	add.w	r3, r7, #8
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff f82f 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80088fe:	e034      	b.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008900:	4b22      	ldr	r3, [pc, #136]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b02      	cmp	r3, #2
 800890a:	d10d      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800890c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008912:	d109      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008914:	4b1d      	ldr	r3, [pc, #116]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	08db      	lsrs	r3, r3, #3
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	4a1c      	ldr	r2, [pc, #112]	@ (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008920:	fa22 f303 	lsr.w	r3, r2, r3
 8008924:	637b      	str	r3, [r7, #52]	@ 0x34
 8008926:	e020      	b.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008928:	4b18      	ldr	r3, [pc, #96]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008934:	d106      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800893c:	d102      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800893e:	4b15      	ldr	r3, [pc, #84]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008940:	637b      	str	r3, [r7, #52]	@ 0x34
 8008942:	e012      	b.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008944:	4b11      	ldr	r3, [pc, #68]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b02      	cmp	r3, #2
 8008950:	d107      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008954:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008958:	d103      	bne.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800895a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800895e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008960:	e003      	b.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008962:	2300      	movs	r3, #0
 8008964:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008966:	f001 bcae 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800896a:	f001 bcac 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800896e:	4b07      	ldr	r3, [pc, #28]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008970:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008974:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008978:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800897a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10b      	bne.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008980:	f7fc fd46 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8008984:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008986:	f001 bc9e 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800898a:	bf00      	nop
 800898c:	44020c00 	.word	0x44020c00
 8008990:	03d09000 	.word	0x03d09000
 8008994:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008998:	4ba0      	ldr	r3, [pc, #640]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089a4:	d10b      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80089a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80089ac:	d107      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ae:	f107 0314 	add.w	r3, r7, #20
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fe64 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80089bc:	e047      	b.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80089be:	4b97      	ldr	r3, [pc, #604]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ca:	d10b      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80089cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80089d2:	d107      	bne.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089d4:	f107 0308 	add.w	r3, r7, #8
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fe ffbd 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089e2:	e034      	b.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80089e4:	4b8d      	ldr	r3, [pc, #564]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d10d      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80089f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80089f6:	d109      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089f8:	4b88      	ldr	r3, [pc, #544]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	08db      	lsrs	r3, r3, #3
 80089fe:	f003 0303 	and.w	r3, r3, #3
 8008a02:	4a87      	ldr	r2, [pc, #540]	@ (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008a04:	fa22 f303 	lsr.w	r3, r2, r3
 8008a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a0a:	e020      	b.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008a0c:	4b83      	ldr	r3, [pc, #524]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a18:	d106      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a20:	d102      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8008a22:	4b80      	ldr	r3, [pc, #512]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a26:	e012      	b.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008a28:	4b7c      	ldr	r3, [pc, #496]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d107      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008a3c:	d103      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a44:	e003      	b.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a4a:	f001 bc3c 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a4e:	f001 bc3a 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008a52:	4b72      	ldr	r3, [pc, #456]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a58:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008a5c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d104      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a64:	f7fc fcd4 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8008a68:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a6a:	f001 bc2c 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008a6e:	4b6b      	ldr	r3, [pc, #428]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a7a:	d10b      	bne.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a82:	d107      	bne.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a84:	f107 0314 	add.w	r3, r7, #20
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fe fdf9 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a92:	e047      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008a94:	4b61      	ldr	r3, [pc, #388]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aa0:	d10b      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008aa8:	d107      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aaa:	f107 0308 	add.w	r3, r7, #8
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe ff52 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab8:	e034      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008aba:	4b58      	ldr	r3, [pc, #352]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d10d      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008acc:	d109      	bne.n	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ace:	4b53      	ldr	r3, [pc, #332]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	08db      	lsrs	r3, r3, #3
 8008ad4:	f003 0303 	and.w	r3, r3, #3
 8008ad8:	4a51      	ldr	r2, [pc, #324]	@ (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008ada:	fa22 f303 	lsr.w	r3, r2, r3
 8008ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ae0:	e020      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008aea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aee:	d106      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008af6:	d102      	bne.n	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008af8:	4b4a      	ldr	r3, [pc, #296]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008afc:	e012      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008afe:	4b47      	ldr	r3, [pc, #284]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b04:	f003 0302 	and.w	r3, r3, #2
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d107      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008b12:	d103      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008b14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b1a:	e003      	b.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b20:	f001 bbd1 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b24:	f001 bbcf 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008b28:	4b3c      	ldr	r3, [pc, #240]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008b2e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008b32:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d104      	bne.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b3a:	f7fc fc69 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8008b3e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b40:	f001 bbc1 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008b44:	4b35      	ldr	r3, [pc, #212]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b50:	d10b      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b58:	d107      	bne.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b5a:	f107 0314 	add.w	r3, r7, #20
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fd8e 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b68:	e047      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b76:	d10b      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b7e:	d107      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b80:	f107 0308 	add.w	r3, r7, #8
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fe fee7 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b8e:	e034      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008b90:	4b22      	ldr	r3, [pc, #136]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d10d      	bne.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ba2:	d109      	bne.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	08db      	lsrs	r3, r3, #3
 8008baa:	f003 0303 	and.w	r3, r3, #3
 8008bae:	4a1c      	ldr	r2, [pc, #112]	@ (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb6:	e020      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008bb8:	4b18      	ldr	r3, [pc, #96]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bc4:	d106      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bcc:	d102      	bne.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008bce:	4b15      	ldr	r3, [pc, #84]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd2:	e012      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008bd4:	4b11      	ldr	r3, [pc, #68]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d107      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008be8:	d103      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bf0:	e003      	b.n	8008bfa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bf6:	f001 bb66 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bfa:	f001 bb64 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8008bfe:	4b07      	ldr	r3, [pc, #28]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008c00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008c04:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8008c08:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10b      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c10:	f7fc fbfe 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8008c14:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c16:	f001 bb56 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c1a:	bf00      	nop
 8008c1c:	44020c00 	.word	0x44020c00
 8008c20:	03d09000 	.word	0x03d09000
 8008c24:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8008c28:	4ba1      	ldr	r3, [pc, #644]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c34:	d10b      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c3c:	d107      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c3e:	f107 0314 	add.w	r3, r7, #20
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe fd1c 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c4c:	e047      	b.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008c4e:	4b98      	ldr	r3, [pc, #608]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c5a:	d10b      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c62:	d107      	bne.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c64:	f107 0308 	add.w	r3, r7, #8
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fe fe75 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c72:	e034      	b.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008c74:	4b8e      	ldr	r3, [pc, #568]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d10d      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008c86:	d109      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c88:	4b89      	ldr	r3, [pc, #548]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	08db      	lsrs	r3, r3, #3
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	4a88      	ldr	r2, [pc, #544]	@ (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008c94:	fa22 f303 	lsr.w	r3, r2, r3
 8008c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c9a:	e020      	b.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008c9c:	4b84      	ldr	r3, [pc, #528]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ca8:	d106      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8008caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cb0:	d102      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008cb2:	4b81      	ldr	r3, [pc, #516]	@ (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb6:	e012      	b.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008cb8:	4b7d      	ldr	r3, [pc, #500]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d107      	bne.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008ccc:	d103      	bne.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd4:	e003      	b.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008cda:	f001 baf4 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cde:	f001 baf2 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008ce2:	4b73      	ldr	r3, [pc, #460]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ce4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008ce8:	f003 0307 	and.w	r3, r3, #7
 8008cec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8008cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d104      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008cf4:	f7fc fb8c 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8008cf8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8008cfa:	f001 bae4 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8008cfe:	4b6c      	ldr	r3, [pc, #432]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d0a:	d10a      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d107      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d12:	f107 0314 	add.w	r3, r7, #20
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe fcb2 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d20:	e043      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8008d22:	4b63      	ldr	r3, [pc, #396]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d2e:	d10a      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8008d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d107      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d36:	f107 0308 	add.w	r3, r7, #8
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fe0c 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d44:	e031      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8008d46:	4b5a      	ldr	r3, [pc, #360]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b02      	cmp	r3, #2
 8008d50:	d10c      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8008d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d109      	bne.n	8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d58:	4b55      	ldr	r3, [pc, #340]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	08db      	lsrs	r3, r3, #3
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	4a54      	ldr	r2, [pc, #336]	@ (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008d64:	fa22 f303 	lsr.w	r3, r2, r3
 8008d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d6a:	e01e      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008d6c:	4b50      	ldr	r3, [pc, #320]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d78:	d105      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	d102      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008d80:	4b4d      	ldr	r3, [pc, #308]	@ (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d84:	e011      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8008d86:	4b4a      	ldr	r3, [pc, #296]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d8c:	f003 0302 	and.w	r3, r3, #2
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d106      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	d103      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8008d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008da0:	e003      	b.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008da2:	2300      	movs	r3, #0
 8008da4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008da6:	f001 ba8e 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008daa:	f001 ba8c 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008dae:	4b40      	ldr	r3, [pc, #256]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008db0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008db4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008db8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d104      	bne.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008dc0:	f7fc fb26 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8008dc4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008dc6:	f001 ba7e 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008dca:	4b39      	ldr	r3, [pc, #228]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dd6:	d10a      	bne.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dda:	2b10      	cmp	r3, #16
 8008ddc:	d107      	bne.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dde:	f107 0314 	add.w	r3, r7, #20
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe fc4c 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dec:	e043      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8008dee:	4b30      	ldr	r3, [pc, #192]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dfa:	d10a      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	2b20      	cmp	r3, #32
 8008e00:	d107      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e02:	f107 0308 	add.w	r3, r7, #8
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fda6 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e10:	e031      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008e12:	4b27      	ldr	r3, [pc, #156]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d10c      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e20:	2b30      	cmp	r3, #48	@ 0x30
 8008e22:	d109      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e24:	4b22      	ldr	r3, [pc, #136]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	08db      	lsrs	r3, r3, #3
 8008e2a:	f003 0303 	and.w	r3, r3, #3
 8008e2e:	4a21      	ldr	r2, [pc, #132]	@ (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008e30:	fa22 f303 	lsr.w	r3, r2, r3
 8008e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e36:	e01e      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8008e38:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e44:	d105      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	2b40      	cmp	r3, #64	@ 0x40
 8008e4a:	d102      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e50:	e011      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008e52:	4b17      	ldr	r3, [pc, #92]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d106      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e62:	2b50      	cmp	r3, #80	@ 0x50
 8008e64:	d103      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8008e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e6c:	e003      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e72:	f001 ba28 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e76:	f001 ba26 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e80:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008e84:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d104      	bne.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008e8c:	f7fc faec 	bl	8005468 <HAL_RCC_GetPCLK3Freq>
 8008e90:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e92:	f001 ba18 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e9c:	d10e      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e9e:	f107 0314 	add.w	r3, r7, #20
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fe fbec 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008eac:	f001 ba0b 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008eb0:	44020c00 	.word	0x44020c00
 8008eb4:	03d09000 	.word	0x03d09000
 8008eb8:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ec2:	d108      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ec4:	f107 0308 	add.w	r3, r7, #8
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fe fd45 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ed2:	f001 b9f8 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008ed6:	4ba4      	ldr	r3, [pc, #656]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d10d      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ee8:	d109      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008eea:	4b9f      	ldr	r3, [pc, #636]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	08db      	lsrs	r3, r3, #3
 8008ef0:	f003 0303 	and.w	r3, r3, #3
 8008ef4:	4a9d      	ldr	r2, [pc, #628]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8008efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008efc:	e020      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008efe:	4b9a      	ldr	r3, [pc, #616]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f0a:	d106      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f12:	d102      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008f14:	4b96      	ldr	r3, [pc, #600]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f18:	e012      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008f1a:	4b93      	ldr	r3, [pc, #588]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f20:	f003 0302 	and.w	r3, r3, #2
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d107      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f2e:	d103      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008f30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f36:	e003      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f3c:	f001 b9c3 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f40:	f001 b9c1 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008f44:	4b88      	ldr	r3, [pc, #544]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d104      	bne.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008f56:	f7fc fa3f 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 8008f5a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008f5c:	f001 b9b3 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d104      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f66:	f7fc f90b 	bl	8005180 <HAL_RCC_GetSysClockFreq>
 8008f6a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008f6c:	f001 b9ab 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d108      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f76:	f107 0314 	add.w	r3, r7, #20
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe fb80 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f84:	f001 b99f 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008f88:	4b77      	ldr	r3, [pc, #476]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f94:	d105      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d102      	bne.n	8008fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008f9c:	4b75      	ldr	r3, [pc, #468]	@ (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa0:	e023      	b.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008fa2:	4b71      	ldr	r3, [pc, #452]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0302 	and.w	r3, r3, #2
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d10c      	bne.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb0:	2b04      	cmp	r3, #4
 8008fb2:	d109      	bne.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	08db      	lsrs	r3, r3, #3
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	4a6b      	ldr	r2, [pc, #428]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc6:	e010      	b.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008fc8:	4b67      	ldr	r3, [pc, #412]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fd4:	d105      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	2b05      	cmp	r3, #5
 8008fda:	d102      	bne.n	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008fdc:	4b64      	ldr	r3, [pc, #400]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fe0:	e003      	b.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fe6:	f001 b96e 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fea:	f001 b96c 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008fee:	4b5e      	ldr	r3, [pc, #376]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ff4:	f003 0308 	and.w	r3, r3, #8
 8008ff8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b02      	cmp	r3, #2
 8009006:	d106      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	2b00      	cmp	r3, #0
 800900c:	d103      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800900e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009012:	637b      	str	r3, [r7, #52]	@ 0x34
 8009014:	e012      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8009016:	4b54      	ldr	r3, [pc, #336]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800901c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009020:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009024:	d106      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8009026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009028:	2b08      	cmp	r3, #8
 800902a:	d103      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800902c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009030:	637b      	str	r3, [r7, #52]	@ 0x34
 8009032:	e003      	b.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009038:	f001 b945 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800903c:	f001 b943 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009040:	4b49      	ldr	r3, [pc, #292]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009042:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009046:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800904a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800904c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904e:	2b00      	cmp	r3, #0
 8009050:	d104      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009052:	f7fc f9dd 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8009056:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009058:	f001 b935 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800905c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009062:	d108      	bne.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009064:	f107 0308 	add.w	r3, r7, #8
 8009068:	4618      	mov	r0, r3
 800906a:	f7fe fc75 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009072:	f001 b928 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009076:	4b3c      	ldr	r3, [pc, #240]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b02      	cmp	r3, #2
 8009080:	d10d      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8009082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009084:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009088:	d109      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800908a:	4b37      	ldr	r3, [pc, #220]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	08db      	lsrs	r3, r3, #3
 8009090:	f003 0303 	and.w	r3, r3, #3
 8009094:	4a35      	ldr	r2, [pc, #212]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009096:	fa22 f303 	lsr.w	r3, r2, r3
 800909a:	637b      	str	r3, [r7, #52]	@ 0x34
 800909c:	e011      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800909e:	4b32      	ldr	r3, [pc, #200]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090aa:	d106      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80090ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80090b2:	d102      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80090b4:	4b2e      	ldr	r3, [pc, #184]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80090b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b8:	e003      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80090ba:	2300      	movs	r3, #0
 80090bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090be:	f001 b902 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090c2:	f001 b900 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80090c6:	4b28      	ldr	r3, [pc, #160]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80090c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090cc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80090d0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80090d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d104      	bne.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80090d8:	f7fc f99a 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 80090dc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80090de:	f001 b8f2 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090e8:	d108      	bne.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ea:	f107 0308 	add.w	r3, r7, #8
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fc32 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090f8:	f001 b8e5 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80090fc:	4b1a      	ldr	r3, [pc, #104]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0302 	and.w	r3, r3, #2
 8009104:	2b02      	cmp	r3, #2
 8009106:	d10d      	bne.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8009108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800910e:	d109      	bne.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009110:	4b15      	ldr	r3, [pc, #84]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	08db      	lsrs	r3, r3, #3
 8009116:	f003 0303 	and.w	r3, r3, #3
 800911a:	4a14      	ldr	r2, [pc, #80]	@ (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800911c:	fa22 f303 	lsr.w	r3, r2, r3
 8009120:	637b      	str	r3, [r7, #52]	@ 0x34
 8009122:	e011      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009124:	4b10      	ldr	r3, [pc, #64]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800912c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009130:	d106      	bne.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009138:	d102      	bne.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800913a:	4b0d      	ldr	r3, [pc, #52]	@ (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800913c:	637b      	str	r3, [r7, #52]	@ 0x34
 800913e:	e003      	b.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009144:	f001 b8bf 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009148:	f001 b8bd 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800914c:	4b06      	ldr	r3, [pc, #24]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800914e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009152:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009156:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8009158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10c      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800915e:	f7fc f983 	bl	8005468 <HAL_RCC_GetPCLK3Freq>
 8009162:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009164:	f001 b8af 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009168:	44020c00 	.word	0x44020c00
 800916c:	03d09000 	.word	0x03d09000
 8009170:	003d0900 	.word	0x003d0900
 8009174:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8009178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800917e:	d108      	bne.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009180:	f107 0308 	add.w	r3, r7, #8
 8009184:	4618      	mov	r0, r3
 8009186:	f7fe fbe7 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800918e:	f001 b89a 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8009192:	4b9f      	ldr	r3, [pc, #636]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b02      	cmp	r3, #2
 800919c:	d10d      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091a4:	d109      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091a6:	4b9a      	ldr	r3, [pc, #616]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	08db      	lsrs	r3, r3, #3
 80091ac:	f003 0303 	and.w	r3, r3, #3
 80091b0:	4a98      	ldr	r2, [pc, #608]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80091b2:	fa22 f303 	lsr.w	r3, r2, r3
 80091b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091b8:	e011      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80091ba:	4b95      	ldr	r3, [pc, #596]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091c6:	d106      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80091c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80091ce:	d102      	bne.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80091d0:	4b91      	ldr	r3, [pc, #580]	@ (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80091d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d4:	e003      	b.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091da:	f001 b874 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80091de:	f001 b872 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80091e2:	4b8b      	ldr	r3, [pc, #556]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80091e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091e8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80091ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d104      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80091f4:	f7fc f938 	bl	8005468 <HAL_RCC_GetPCLK3Freq>
 80091f8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80091fa:	f001 b864 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009204:	d108      	bne.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009206:	f107 0308 	add.w	r3, r7, #8
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe fba4 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009214:	f001 b857 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009218:	4b7d      	ldr	r3, [pc, #500]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 0302 	and.w	r3, r3, #2
 8009220:	2b02      	cmp	r3, #2
 8009222:	d10d      	bne.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8009224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009226:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800922a:	d109      	bne.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800922c:	4b78      	ldr	r3, [pc, #480]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	08db      	lsrs	r3, r3, #3
 8009232:	f003 0303 	and.w	r3, r3, #3
 8009236:	4a77      	ldr	r2, [pc, #476]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009238:	fa22 f303 	lsr.w	r3, r2, r3
 800923c:	637b      	str	r3, [r7, #52]	@ 0x34
 800923e:	e011      	b.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8009240:	4b73      	ldr	r3, [pc, #460]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800924c:	d106      	bne.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009254:	d102      	bne.n	800925c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8009256:	4b70      	ldr	r3, [pc, #448]	@ (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009258:	637b      	str	r3, [r7, #52]	@ 0x34
 800925a:	e003      	b.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009260:	f001 b831 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009264:	f001 b82f 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009268:	4b69      	ldr	r3, [pc, #420]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800926a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800926e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009272:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009276:	2b00      	cmp	r3, #0
 8009278:	d104      	bne.n	8009284 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800927a:	f7fc f8c9 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 800927e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009280:	f001 b821 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800928a:	d108      	bne.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800928c:	f107 0308 	add.w	r3, r7, #8
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe fb61 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800929a:	f001 b814 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800929e:	4b5c      	ldr	r3, [pc, #368]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d10e      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80092aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092b0:	d10a      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092b2:	4b57      	ldr	r3, [pc, #348]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	08db      	lsrs	r3, r3, #3
 80092b8:	f003 0303 	and.w	r3, r3, #3
 80092bc:	4a55      	ldr	r2, [pc, #340]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80092be:	fa22 f303 	lsr.w	r3, r2, r3
 80092c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092c4:	f000 bfff 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092cc:	f000 bffb 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80092d0:	4b4f      	ldr	r3, [pc, #316]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80092d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80092d6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80092da:	633b      	str	r3, [r7, #48]	@ 0x30
 80092dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092de:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80092e2:	d056      	beq.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80092e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80092ea:	f200 808b 	bhi.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80092ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092f4:	d03e      	beq.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092fc:	f200 8082 	bhi.w	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009306:	d027      	beq.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8009308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800930e:	d879      	bhi.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009316:	d017      	beq.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8009318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800931e:	d871      	bhi.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009322:	2b00      	cmp	r3, #0
 8009324:	d004      	beq.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800932c:	d004      	beq.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800932e:	e069      	b.n	8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009330:	f7fc f89a 	bl	8005468 <HAL_RCC_GetPCLK3Freq>
 8009334:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009336:	e068      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009338:	f107 0314 	add.w	r3, r7, #20
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe f99f 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009346:	e060      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009348:	f107 0308 	add.w	r3, r7, #8
 800934c:	4618      	mov	r0, r3
 800934e:	f7fe fb03 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009356:	e058      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009358:	4b2d      	ldr	r3, [pc, #180]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800935a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b02      	cmp	r3, #2
 8009364:	d103      	bne.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8009366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800936a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800936c:	e04d      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009372:	e04a      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009374:	4b26      	ldr	r3, [pc, #152]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800937a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800937e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009382:	d103      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8009384:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009388:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800938a:	e03e      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009390:	e03b      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009392:	4b1f      	ldr	r3, [pc, #124]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009398:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800939c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800939e:	4b1c      	ldr	r3, [pc, #112]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d10c      	bne.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80093aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d109      	bne.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093b0:	4b17      	ldr	r3, [pc, #92]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	08db      	lsrs	r3, r3, #3
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	4a16      	ldr	r2, [pc, #88]	@ (8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80093bc:	fa22 f303 	lsr.w	r3, r2, r3
 80093c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c2:	e01e      	b.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093c4:	4b12      	ldr	r3, [pc, #72]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093d0:	d106      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80093d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093d8:	d102      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80093da:	4b0f      	ldr	r3, [pc, #60]	@ (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80093dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80093de:	e010      	b.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093ec:	d106      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80093ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093f4:	d102      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093f6:	4b09      	ldr	r3, [pc, #36]	@ (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80093f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093fa:	e002      	b.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009400:	e003      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8009402:	e002      	b.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8009404:	2300      	movs	r3, #0
 8009406:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009408:	bf00      	nop
          }
        }
        break;
 800940a:	f000 bf5c 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800940e:	bf00      	nop
 8009410:	44020c00 	.word	0x44020c00
 8009414:	03d09000 	.word	0x03d09000
 8009418:	003d0900 	.word	0x003d0900
 800941c:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009420:	4b9e      	ldr	r3, [pc, #632]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009422:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009426:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800942a:	633b      	str	r3, [r7, #48]	@ 0x30
 800942c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009432:	d056      	beq.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8009434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009436:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800943a:	f200 808b 	bhi.w	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800943e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009440:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009444:	d03e      	beq.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8009446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009448:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800944c:	f200 8082 	bhi.w	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009456:	d027      	beq.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8009458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800945e:	d879      	bhi.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009462:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009466:	d017      	beq.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8009468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800946e:	d871      	bhi.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	2b00      	cmp	r3, #0
 8009474:	d004      	beq.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8009476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800947c:	d004      	beq.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800947e:	e069      	b.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009480:	f7fb ffc6 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8009484:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009486:	e068      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009488:	f107 0314 	add.w	r3, r7, #20
 800948c:	4618      	mov	r0, r3
 800948e:	f7fe f8f7 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009496:	e060      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009498:	f107 0308 	add.w	r3, r7, #8
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe fa5b 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094a6:	e058      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80094a8:	4b7c      	ldr	r3, [pc, #496]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d103      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80094b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80094bc:	e04d      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094c2:	e04a      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80094c4:	4b75      	ldr	r3, [pc, #468]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094d2:	d103      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80094d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80094d8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80094da:	e03e      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80094dc:	2300      	movs	r3, #0
 80094de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094e0:	e03b      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094e2:	4b6e      	ldr	r3, [pc, #440]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80094e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80094ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094ee:	4b6b      	ldr	r3, [pc, #428]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0302 	and.w	r3, r3, #2
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	d10c      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80094fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d109      	bne.n	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009500:	4b66      	ldr	r3, [pc, #408]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	08db      	lsrs	r3, r3, #3
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	4a65      	ldr	r2, [pc, #404]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800950c:	fa22 f303 	lsr.w	r3, r2, r3
 8009510:	637b      	str	r3, [r7, #52]	@ 0x34
 8009512:	e01e      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009514:	4b61      	ldr	r3, [pc, #388]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800951c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009520:	d106      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8009522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009528:	d102      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800952a:	4b5e      	ldr	r3, [pc, #376]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800952c:	637b      	str	r3, [r7, #52]	@ 0x34
 800952e:	e010      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009530:	4b5a      	ldr	r3, [pc, #360]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009538:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800953c:	d106      	bne.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800953e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009540:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009544:	d102      	bne.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009546:	4b58      	ldr	r3, [pc, #352]	@ (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009548:	637b      	str	r3, [r7, #52]	@ 0x34
 800954a:	e002      	b.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009550:	e003      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8009552:	e002      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009558:	bf00      	nop
          }
        }
        break;
 800955a:	f000 beb4 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800955e:	4b4f      	ldr	r3, [pc, #316]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009560:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009564:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009568:	633b      	str	r3, [r7, #48]	@ 0x30
 800956a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009570:	d056      	beq.n	8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8009572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009578:	f200 808b 	bhi.w	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800957c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009582:	d03e      	beq.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8009584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009586:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800958a:	f200 8082 	bhi.w	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800958e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009590:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009594:	d027      	beq.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8009596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009598:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800959c:	d879      	bhi.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800959e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095a4:	d017      	beq.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095ac:	d871      	bhi.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d004      	beq.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80095b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095ba:	d004      	beq.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80095bc:	e069      	b.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80095be:	f7fb ff53 	bl	8005468 <HAL_RCC_GetPCLK3Freq>
 80095c2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80095c4:	e068      	b.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c6:	f107 0314 	add.w	r3, r7, #20
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fe f858 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095d4:	e060      	b.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095d6:	f107 0308 	add.w	r3, r7, #8
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe f9bc 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095e4:	e058      	b.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80095e6:	4b2d      	ldr	r3, [pc, #180]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80095e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095ec:	f003 0302 	and.w	r3, r3, #2
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d103      	bne.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80095f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095f8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80095fa:	e04d      	b.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80095fc:	2300      	movs	r3, #0
 80095fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009600:	e04a      	b.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009602:	4b26      	ldr	r3, [pc, #152]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800960c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009610:	d103      	bne.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8009612:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009616:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009618:	e03e      	b.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800961e:	e03b      	b.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009620:	4b1e      	ldr	r3, [pc, #120]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009626:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800962a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800962c:	4b1b      	ldr	r3, [pc, #108]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0302 	and.w	r3, r3, #2
 8009634:	2b02      	cmp	r3, #2
 8009636:	d10c      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8009638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800963e:	4b17      	ldr	r3, [pc, #92]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	08db      	lsrs	r3, r3, #3
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	4a15      	ldr	r2, [pc, #84]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800964a:	fa22 f303 	lsr.w	r3, r2, r3
 800964e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009650:	e01e      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009652:	4b12      	ldr	r3, [pc, #72]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800965a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800965e:	d106      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009666:	d102      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009668:	4b0e      	ldr	r3, [pc, #56]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800966a:	637b      	str	r3, [r7, #52]	@ 0x34
 800966c:	e010      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800966e:	4b0b      	ldr	r3, [pc, #44]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009676:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800967a:	d106      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800967c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009682:	d102      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009684:	4b08      	ldr	r3, [pc, #32]	@ (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009686:	637b      	str	r3, [r7, #52]	@ 0x34
 8009688:	e002      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800968e:	e003      	b.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009690:	e002      	b.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8009692:	2300      	movs	r3, #0
 8009694:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009696:	bf00      	nop
          }
        }
        break;
 8009698:	f000 be15 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800969c:	44020c00 	.word	0x44020c00
 80096a0:	03d09000 	.word	0x03d09000
 80096a4:	003d0900 	.word	0x003d0900
 80096a8:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80096ac:	4b9e      	ldr	r3, [pc, #632]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80096ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80096b2:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 80096b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80096b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ba:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80096be:	d056      	beq.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80096c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80096c6:	f200 808b 	bhi.w	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80096ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096d0:	d03e      	beq.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80096d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096d8:	f200 8082 	bhi.w	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80096e2:	d027      	beq.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80096e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80096ea:	d879      	bhi.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80096ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096f2:	d017      	beq.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80096f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096fa:	d871      	bhi.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80096fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d004      	beq.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8009702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009704:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009708:	d004      	beq.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800970a:	e069      	b.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800970c:	f7fb feac 	bl	8005468 <HAL_RCC_GetPCLK3Freq>
 8009710:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009712:	e068      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009714:	f107 0314 	add.w	r3, r7, #20
 8009718:	4618      	mov	r0, r3
 800971a:	f7fd ffb1 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009722:	e060      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009724:	f107 0308 	add.w	r3, r7, #8
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe f915 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009732:	e058      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009734:	4b7c      	ldr	r3, [pc, #496]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800973a:	f003 0302 	and.w	r3, r3, #2
 800973e:	2b02      	cmp	r3, #2
 8009740:	d103      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8009742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009746:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009748:	e04d      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800974e:	e04a      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009750:	4b75      	ldr	r3, [pc, #468]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009756:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800975a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800975e:	d103      	bne.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009760:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009764:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009766:	e03e      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800976c:	e03b      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800976e:	4b6e      	ldr	r3, [pc, #440]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009774:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009778:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800977a:	4b6b      	ldr	r3, [pc, #428]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 0302 	and.w	r3, r3, #2
 8009782:	2b02      	cmp	r3, #2
 8009784:	d10c      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8009786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009788:	2b00      	cmp	r3, #0
 800978a:	d109      	bne.n	80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800978c:	4b66      	ldr	r3, [pc, #408]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	08db      	lsrs	r3, r3, #3
 8009792:	f003 0303 	and.w	r3, r3, #3
 8009796:	4a65      	ldr	r2, [pc, #404]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009798:	fa22 f303 	lsr.w	r3, r2, r3
 800979c:	637b      	str	r3, [r7, #52]	@ 0x34
 800979e:	e01e      	b.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097a0:	4b61      	ldr	r3, [pc, #388]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ac:	d106      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80097ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097b4:	d102      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80097b6:	4b5e      	ldr	r3, [pc, #376]	@ (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80097b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ba:	e010      	b.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097bc:	4b5a      	ldr	r3, [pc, #360]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097c8:	d106      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80097ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097d0:	d102      	bne.n	80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80097d2:	4b58      	ldr	r3, [pc, #352]	@ (8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80097d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097d6:	e002      	b.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80097dc:	e003      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80097de:	e002      	b.n	80097e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097e4:	bf00      	nop
          }
        }
        break;
 80097e6:	f000 bd6e 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80097ea:	4b4f      	ldr	r3, [pc, #316]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80097ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80097f0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80097f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80097f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80097fc:	d056      	beq.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80097fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009800:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009804:	f200 808b 	bhi.w	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800980e:	d03e      	beq.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8009810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009812:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009816:	f200 8082 	bhi.w	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800981a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009820:	d027      	beq.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8009822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009824:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009828:	d879      	bhi.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800982a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009830:	d017      	beq.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8009832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009834:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009838:	d871      	bhi.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800983a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983c:	2b00      	cmp	r3, #0
 800983e:	d004      	beq.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8009840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009846:	d004      	beq.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8009848:	e069      	b.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800984a:	f7fb fe0d 	bl	8005468 <HAL_RCC_GetPCLK3Freq>
 800984e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009850:	e068      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009852:	f107 0314 	add.w	r3, r7, #20
 8009856:	4618      	mov	r0, r3
 8009858:	f7fd ff12 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009860:	e060      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009862:	f107 0308 	add.w	r3, r7, #8
 8009866:	4618      	mov	r0, r3
 8009868:	f7fe f876 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009870:	e058      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009872:	4b2d      	ldr	r3, [pc, #180]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009878:	f003 0302 	and.w	r3, r3, #2
 800987c:	2b02      	cmp	r3, #2
 800987e:	d103      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009880:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009884:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009886:	e04d      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009888:	2300      	movs	r3, #0
 800988a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800988c:	e04a      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800988e:	4b26      	ldr	r3, [pc, #152]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800989c:	d103      	bne.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800989e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80098a2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80098a4:	e03e      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098aa:	e03b      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098ac:	4b1e      	ldr	r3, [pc, #120]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80098ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098b2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80098b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0302 	and.w	r3, r3, #2
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d10c      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80098c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d109      	bne.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098ca:	4b17      	ldr	r3, [pc, #92]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	08db      	lsrs	r3, r3, #3
 80098d0:	f003 0303 	and.w	r3, r3, #3
 80098d4:	4a15      	ldr	r2, [pc, #84]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80098d6:	fa22 f303 	lsr.w	r3, r2, r3
 80098da:	637b      	str	r3, [r7, #52]	@ 0x34
 80098dc:	e01e      	b.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098de:	4b12      	ldr	r3, [pc, #72]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098ea:	d106      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80098ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098f2:	d102      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80098f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80098f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f8:	e010      	b.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009906:	d106      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8009908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800990a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800990e:	d102      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009910:	4b08      	ldr	r3, [pc, #32]	@ (8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009912:	637b      	str	r3, [r7, #52]	@ 0x34
 8009914:	e002      	b.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800991a:	e003      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800991c:	e002      	b.n	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800991e:	2300      	movs	r3, #0
 8009920:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009922:	bf00      	nop
          }
        }
        break;
 8009924:	f000 bccf 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009928:	44020c00 	.word	0x44020c00
 800992c:	03d09000 	.word	0x03d09000
 8009930:	003d0900 	.word	0x003d0900
 8009934:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8009938:	4b9e      	ldr	r3, [pc, #632]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800993a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800993e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009942:	633b      	str	r3, [r7, #48]	@ 0x30
 8009944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009946:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800994a:	d056      	beq.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009952:	f200 808b 	bhi.w	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800995c:	d03e      	beq.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800995e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009964:	f200 8082 	bhi.w	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800996e:	d027      	beq.n	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009972:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009976:	d879      	bhi.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800997e:	d017      	beq.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009986:	d871      	bhi.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998a:	2b00      	cmp	r3, #0
 800998c:	d004      	beq.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800998e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009994:	d004      	beq.n	80099a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009996:	e069      	b.n	8009a6c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009998:	f7fb fd66 	bl	8005468 <HAL_RCC_GetPCLK3Freq>
 800999c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800999e:	e068      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099a0:	f107 0314 	add.w	r3, r7, #20
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fd fe6b 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099ae:	e060      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099b0:	f107 0308 	add.w	r3, r7, #8
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fd ffcf 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099be:	e058      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80099c0:	4b7c      	ldr	r3, [pc, #496]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099c6:	f003 0302 	and.w	r3, r3, #2
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d103      	bne.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80099ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099d2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80099d4:	e04d      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80099d6:	2300      	movs	r3, #0
 80099d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099da:	e04a      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80099dc:	4b75      	ldr	r3, [pc, #468]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099ea:	d103      	bne.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80099ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80099f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80099f2:	e03e      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099f8:	e03b      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099fa:	4b6e      	ldr	r3, [pc, #440]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a00:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009a04:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a06:	4b6b      	ldr	r3, [pc, #428]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d10c      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8009a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d109      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a18:	4b66      	ldr	r3, [pc, #408]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	08db      	lsrs	r3, r3, #3
 8009a1e:	f003 0303 	and.w	r3, r3, #3
 8009a22:	4a65      	ldr	r2, [pc, #404]	@ (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009a24:	fa22 f303 	lsr.w	r3, r2, r3
 8009a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a2a:	e01e      	b.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a2c:	4b61      	ldr	r3, [pc, #388]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a38:	d106      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8009a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a40:	d102      	bne.n	8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009a42:	4b5e      	ldr	r3, [pc, #376]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a46:	e010      	b.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a48:	4b5a      	ldr	r3, [pc, #360]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a54:	d106      	bne.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a5c:	d102      	bne.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009a5e:	4b58      	ldr	r3, [pc, #352]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a62:	e002      	b.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009a68:	e003      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8009a6a:	e002      	b.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a70:	bf00      	nop
          }
        }
        break;
 8009a72:	f000 bc28 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009a76:	4b4f      	ldr	r3, [pc, #316]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a80:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009a82:	4b4c      	ldr	r3, [pc, #304]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a8e:	d106      	bne.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d103      	bne.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009a96:	4b4a      	ldr	r3, [pc, #296]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009a98:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009a9a:	f000 bc14 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009aa4:	d108      	bne.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009aa6:	f107 0320 	add.w	r3, r7, #32
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fd fc7c 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ab4:	f000 bc07 	b.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009abe:	d107      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ac0:	f107 0314 	add.w	r3, r7, #20
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fd fddb 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ace:	e3fa      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ad4:	e3f7      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009ad6:	4b37      	ldr	r3, [pc, #220]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d861      	bhi.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b05 	.word	0x08009b05
 8009af4:	08009b15 	.word	0x08009b15
 8009af8:	08009b25 	.word	0x08009b25
 8009afc:	08009b35 	.word	0x08009b35
 8009b00:	08009b3b 	.word	0x08009b3b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b04:	f107 0320 	add.w	r3, r7, #32
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7fd fc4d 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b12:	e04e      	b.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b14:	f107 0314 	add.w	r3, r7, #20
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fd fdb1 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b22:	e046      	b.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b24:	f107 0308 	add.w	r3, r7, #8
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fd ff15 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b32:	e03e      	b.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009b34:	4b23      	ldr	r3, [pc, #140]	@ (8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8009b36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b38:	e03b      	b.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b40:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009b44:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b46:	4b1b      	ldr	r3, [pc, #108]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f003 0302 	and.w	r3, r3, #2
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d10c      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d109      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b58:	4b16      	ldr	r3, [pc, #88]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	08db      	lsrs	r3, r3, #3
 8009b5e:	f003 0303 	and.w	r3, r3, #3
 8009b62:	4a15      	ldr	r2, [pc, #84]	@ (8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009b64:	fa22 f303 	lsr.w	r3, r2, r3
 8009b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b6a:	e01e      	b.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b6c:	4b11      	ldr	r3, [pc, #68]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b78:	d106      	bne.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b80:	d102      	bne.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b82:	4b0e      	ldr	r3, [pc, #56]	@ (8009bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b86:	e010      	b.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b88:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b94:	d106      	bne.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b9c:	d102      	bne.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b9e:	4b08      	ldr	r3, [pc, #32]	@ (8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ba2:	e002      	b.n	8009baa <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009ba8:	e003      	b.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009baa:	e002      	b.n	8009bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009bac:	2300      	movs	r3, #0
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009bb0:	bf00      	nop
          }
        }
        break;
 8009bb2:	e388      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009bb4:	44020c00 	.word	0x44020c00
 8009bb8:	03d09000 	.word	0x03d09000
 8009bbc:	003d0900 	.word	0x003d0900
 8009bc0:	007a1200 	.word	0x007a1200
 8009bc4:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009bc8:	4ba9      	ldr	r3, [pc, #676]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009bd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	f200 809a 	bhi.w	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be2:	bf00      	nop
 8009be4:	08009c69 	.word	0x08009c69
 8009be8:	08009d11 	.word	0x08009d11
 8009bec:	08009d11 	.word	0x08009d11
 8009bf0:	08009d11 	.word	0x08009d11
 8009bf4:	08009d11 	.word	0x08009d11
 8009bf8:	08009d11 	.word	0x08009d11
 8009bfc:	08009d11 	.word	0x08009d11
 8009c00:	08009d11 	.word	0x08009d11
 8009c04:	08009c79 	.word	0x08009c79
 8009c08:	08009d11 	.word	0x08009d11
 8009c0c:	08009d11 	.word	0x08009d11
 8009c10:	08009d11 	.word	0x08009d11
 8009c14:	08009d11 	.word	0x08009d11
 8009c18:	08009d11 	.word	0x08009d11
 8009c1c:	08009d11 	.word	0x08009d11
 8009c20:	08009d11 	.word	0x08009d11
 8009c24:	08009c89 	.word	0x08009c89
 8009c28:	08009d11 	.word	0x08009d11
 8009c2c:	08009d11 	.word	0x08009d11
 8009c30:	08009d11 	.word	0x08009d11
 8009c34:	08009d11 	.word	0x08009d11
 8009c38:	08009d11 	.word	0x08009d11
 8009c3c:	08009d11 	.word	0x08009d11
 8009c40:	08009d11 	.word	0x08009d11
 8009c44:	08009c99 	.word	0x08009c99
 8009c48:	08009d11 	.word	0x08009d11
 8009c4c:	08009d11 	.word	0x08009d11
 8009c50:	08009d11 	.word	0x08009d11
 8009c54:	08009d11 	.word	0x08009d11
 8009c58:	08009d11 	.word	0x08009d11
 8009c5c:	08009d11 	.word	0x08009d11
 8009c60:	08009d11 	.word	0x08009d11
 8009c64:	08009c9f 	.word	0x08009c9f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c68:	f107 0320 	add.w	r3, r7, #32
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fd fb9b 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c74:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c76:	e04e      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c78:	f107 0314 	add.w	r3, r7, #20
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fd fcff 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c86:	e046      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c88:	f107 0308 	add.w	r3, r7, #8
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fd fe63 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c96:	e03e      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009c98:	4b76      	ldr	r3, [pc, #472]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009c9a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c9c:	e03b      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c9e:	4b74      	ldr	r3, [pc, #464]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009ca4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009caa:	4b71      	ldr	r3, [pc, #452]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0302 	and.w	r3, r3, #2
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d10c      	bne.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8009cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d109      	bne.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	08db      	lsrs	r3, r3, #3
 8009cc2:	f003 0303 	and.w	r3, r3, #3
 8009cc6:	4a6c      	ldr	r2, [pc, #432]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cce:	e01e      	b.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cd0:	4b67      	ldr	r3, [pc, #412]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cdc:	d106      	bne.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8009cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ce4:	d102      	bne.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009ce6:	4b65      	ldr	r3, [pc, #404]	@ (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cea:	e010      	b.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cec:	4b60      	ldr	r3, [pc, #384]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cf8:	d106      	bne.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8009cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d00:	d102      	bne.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009d02:	4b5f      	ldr	r3, [pc, #380]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d06:	e002      	b.n	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009d0c:	e003      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8009d0e:	e002      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d14:	bf00      	nop
          }
        }
        break;
 8009d16:	e2d6      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009d18:	4b55      	ldr	r3, [pc, #340]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009d1e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009d22:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d2a:	d031      	beq.n	8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d32:	d866      	bhi.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d36:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d38:	d027      	beq.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3c:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d3e:	d860      	bhi.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d42:	2b80      	cmp	r3, #128	@ 0x80
 8009d44:	d019      	beq.n	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8009d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d48:	2b80      	cmp	r3, #128	@ 0x80
 8009d4a:	d85a      	bhi.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	2b40      	cmp	r3, #64	@ 0x40
 8009d56:	d008      	beq.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8009d58:	e053      	b.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d5a:	f107 0320 	add.w	r3, r7, #32
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fd fb22 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d68:	e04e      	b.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d6a:	f107 0314 	add.w	r3, r7, #20
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fd fc86 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d78:	e046      	b.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d7a:	f107 0308 	add.w	r3, r7, #8
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fd fdea 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d88:	e03e      	b.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009d8c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d8e:	e03b      	b.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d90:	4b37      	ldr	r3, [pc, #220]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d96:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d9c:	4b34      	ldr	r3, [pc, #208]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d10c      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8009da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d109      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009dae:	4b30      	ldr	r3, [pc, #192]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	08db      	lsrs	r3, r3, #3
 8009db4:	f003 0303 	and.w	r3, r3, #3
 8009db8:	4a2f      	ldr	r2, [pc, #188]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009dba:	fa22 f303 	lsr.w	r3, r2, r3
 8009dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc0:	e01e      	b.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009dca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dce:	d106      	bne.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dd6:	d102      	bne.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009dd8:	4b28      	ldr	r3, [pc, #160]	@ (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ddc:	e010      	b.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dde:	4b24      	ldr	r3, [pc, #144]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dea:	d106      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009df2:	d102      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009df4:	4b22      	ldr	r3, [pc, #136]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009df8:	e002      	b.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009dfe:	e003      	b.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8009e00:	e002      	b.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8009e02:	2300      	movs	r3, #0
 8009e04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e06:	bf00      	nop
          }
        }
        break;
 8009e08:	e25d      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009e0a:	4b19      	ldr	r3, [pc, #100]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e10:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009e14:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d103      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009e1c:	f7fb fb0e 	bl	800543c <HAL_RCC_GetPCLK2Freq>
 8009e20:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009e22:	e250      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009e24:	4b12      	ldr	r3, [pc, #72]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e30:	d10b      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8009e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e38:	d107      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e3a:	f107 0314 	add.w	r3, r7, #20
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fd fc1e 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e48:	e04f      	b.n	8009eea <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009e4a:	4b09      	ldr	r3, [pc, #36]	@ (8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e56:	d115      	bne.n	8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8009e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e5e:	d111      	bne.n	8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e60:	f107 0308 	add.w	r3, r7, #8
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fd fd77 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e6e:	e03c      	b.n	8009eea <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009e70:	44020c00 	.word	0x44020c00
 8009e74:	00bb8000 	.word	0x00bb8000
 8009e78:	03d09000 	.word	0x03d09000
 8009e7c:	003d0900 	.word	0x003d0900
 8009e80:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009e84:	4b94      	ldr	r3, [pc, #592]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0302 	and.w	r3, r3, #2
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d10d      	bne.n	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e92:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009e96:	d109      	bne.n	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e98:	4b8f      	ldr	r3, [pc, #572]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	08db      	lsrs	r3, r3, #3
 8009e9e:	f003 0303 	and.w	r3, r3, #3
 8009ea2:	4a8e      	ldr	r2, [pc, #568]	@ (800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eaa:	e01e      	b.n	8009eea <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009eac:	4b8a      	ldr	r3, [pc, #552]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009eb8:	d106      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ec0:	d102      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009ec2:	4b87      	ldr	r3, [pc, #540]	@ (800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec6:	e010      	b.n	8009eea <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009ec8:	4b83      	ldr	r3, [pc, #524]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ed0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ed4:	d106      	bne.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009edc:	d102      	bne.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009ede:	4b81      	ldr	r3, [pc, #516]	@ (800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee2:	e002      	b.n	8009eea <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ee8:	e1ed      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009eea:	e1ec      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009eec:	4b7a      	ldr	r3, [pc, #488]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ef2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009ef6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d103      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009efe:	f7fb fab3 	bl	8005468 <HAL_RCC_GetPCLK3Freq>
 8009f02:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009f04:	e1df      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009f06:	4b74      	ldr	r3, [pc, #464]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f12:	d10b      	bne.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f1a:	d107      	bne.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f1c:	f107 0314 	add.w	r3, r7, #20
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7fd fbad 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f2a:	e045      	b.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009f2c:	4b6a      	ldr	r3, [pc, #424]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f38:	d10b      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f40:	d107      	bne.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fd fd06 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f50:	e032      	b.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009f52:	4b61      	ldr	r3, [pc, #388]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0302 	and.w	r3, r3, #2
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d10d      	bne.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f64:	d109      	bne.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f66:	4b5c      	ldr	r3, [pc, #368]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	08db      	lsrs	r3, r3, #3
 8009f6c:	f003 0303 	and.w	r3, r3, #3
 8009f70:	4a5a      	ldr	r2, [pc, #360]	@ (800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009f72:	fa22 f303 	lsr.w	r3, r2, r3
 8009f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f78:	e01e      	b.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009f7a:	4b57      	ldr	r3, [pc, #348]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f86:	d106      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f8e:	d102      	bne.n	8009f96 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009f90:	4b53      	ldr	r3, [pc, #332]	@ (800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f94:	e010      	b.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009f96:	4b50      	ldr	r3, [pc, #320]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fa2:	d106      	bne.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009faa:	d102      	bne.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009fac:	4b4d      	ldr	r3, [pc, #308]	@ (800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fb0:	e002      	b.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009fb6:	e186      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009fb8:	e185      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009fba:	4b47      	ldr	r3, [pc, #284]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fc0:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009fc4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d103      	bne.n	8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009fcc:	f7fb fa36 	bl	800543c <HAL_RCC_GetPCLK2Freq>
 8009fd0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009fd2:	e178      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009fd4:	4b40      	ldr	r3, [pc, #256]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009fe0:	d10b      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fe8:	d107      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fea:	f107 0314 	add.w	r3, r7, #20
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fd fb46 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff8:	e045      	b.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009ffa:	4b37      	ldr	r3, [pc, #220]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a006:	d10b      	bne.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800a008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a00e:	d107      	bne.n	800a020 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a010:	f107 0308 	add.w	r3, r7, #8
 800a014:	4618      	mov	r0, r3
 800a016:	f7fd fc9f 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a01e:	e032      	b.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800a020:	4b2d      	ldr	r3, [pc, #180]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0302 	and.w	r3, r3, #2
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d10d      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a032:	d109      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a034:	4b28      	ldr	r3, [pc, #160]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	08db      	lsrs	r3, r3, #3
 800a03a:	f003 0303 	and.w	r3, r3, #3
 800a03e:	4a27      	ldr	r2, [pc, #156]	@ (800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a040:	fa22 f303 	lsr.w	r3, r2, r3
 800a044:	637b      	str	r3, [r7, #52]	@ 0x34
 800a046:	e01e      	b.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800a048:	4b23      	ldr	r3, [pc, #140]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a054:	d106      	bne.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800a056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a05c:	d102      	bne.n	800a064 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800a05e:	4b20      	ldr	r3, [pc, #128]	@ (800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a060:	637b      	str	r3, [r7, #52]	@ 0x34
 800a062:	e010      	b.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800a064:	4b1c      	ldr	r3, [pc, #112]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a06c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a070:	d106      	bne.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800a072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a074:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a078:	d102      	bne.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800a07a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a07c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a07e:	e002      	b.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800a080:	2300      	movs	r3, #0
 800a082:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a084:	e11f      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a086:	e11e      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a088:	4b13      	ldr	r3, [pc, #76]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a08a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a08e:	f003 0303 	and.w	r3, r3, #3
 800a092:	633b      	str	r3, [r7, #48]	@ 0x30
 800a094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a096:	2b03      	cmp	r3, #3
 800a098:	d85f      	bhi.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800a09a:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800a09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a0:	0800a0b1 	.word	0x0800a0b1
 800a0a4:	0800a0b9 	.word	0x0800a0b9
 800a0a8:	0800a0c9 	.word	0x0800a0c9
 800a0ac:	0800a0e9 	.word	0x0800a0e9

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800a0b0:	f7fb f992 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 800a0b4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a0b6:	e053      	b.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0b8:	f107 0320 	add.w	r3, r7, #32
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fd f973 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0c6:	e04b      	b.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0c8:	f107 0314 	add.w	r3, r7, #20
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fd fad7 	bl	8007680 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0d6:	e043      	b.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a0d8:	44020c00 	.word	0x44020c00
 800a0dc:	03d09000 	.word	0x03d09000
 800a0e0:	003d0900 	.word	0x003d0900
 800a0e4:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0e8:	4b79      	ldr	r3, [pc, #484]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a0ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a0ee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a0f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0f4:	4b76      	ldr	r3, [pc, #472]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0302 	and.w	r3, r3, #2
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d10c      	bne.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800a100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d109      	bne.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a106:	4b72      	ldr	r3, [pc, #456]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	08db      	lsrs	r3, r3, #3
 800a10c:	f003 0303 	and.w	r3, r3, #3
 800a110:	4a70      	ldr	r2, [pc, #448]	@ (800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800a112:	fa22 f303 	lsr.w	r3, r2, r3
 800a116:	637b      	str	r3, [r7, #52]	@ 0x34
 800a118:	e01e      	b.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a11a:	4b6d      	ldr	r3, [pc, #436]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a126:	d106      	bne.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800a128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a12a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a12e:	d102      	bne.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a130:	4b69      	ldr	r3, [pc, #420]	@ (800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800a132:	637b      	str	r3, [r7, #52]	@ 0x34
 800a134:	e010      	b.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a136:	4b66      	ldr	r3, [pc, #408]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a13e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a142:	d106      	bne.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800a144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a146:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a14a:	d102      	bne.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a14c:	4b63      	ldr	r3, [pc, #396]	@ (800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800a14e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a150:	e002      	b.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a156:	e003      	b.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a158:	e002      	b.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800a15a:	2300      	movs	r3, #0
 800a15c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a15e:	bf00      	nop
          }
        }
        break;
 800a160:	e0b1      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800a162:	4b5b      	ldr	r3, [pc, #364]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a168:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a16c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800a16e:	4b58      	ldr	r3, [pc, #352]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a174:	f003 0302 	and.w	r3, r3, #2
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d106      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800a17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d103      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800a182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a186:	637b      	str	r3, [r7, #52]	@ 0x34
 800a188:	e01f      	b.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800a18a:	4b51      	ldr	r3, [pc, #324]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a18c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a194:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a198:	d106      	bne.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800a19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19c:	2b40      	cmp	r3, #64	@ 0x40
 800a19e:	d103      	bne.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800a1a0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a1a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a6:	e010      	b.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800a1a8:	4b49      	ldr	r3, [pc, #292]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1b4:	d106      	bne.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b8:	2b80      	cmp	r3, #128	@ 0x80
 800a1ba:	d103      	bne.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800a1bc:	f248 0312 	movw	r3, #32786	@ 0x8012
 800a1c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1c2:	e002      	b.n	800a1ca <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a1c8:	e07d      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a1ca:	e07c      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a1cc:	4b40      	ldr	r3, [pc, #256]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a1d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a1d8:	4b3d      	ldr	r3, [pc, #244]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a1e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1e4:	d105      	bne.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d102      	bne.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800a1ec:	4b3c      	ldr	r3, [pc, #240]	@ (800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a1ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f0:	e031      	b.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800a1f2:	4b37      	ldr	r3, [pc, #220]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1fe:	d10a      	bne.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800a200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a202:	2b10      	cmp	r3, #16
 800a204:	d107      	bne.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a206:	f107 0320 	add.w	r3, r7, #32
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fd f8cc 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a212:	637b      	str	r3, [r7, #52]	@ 0x34
 800a214:	e01f      	b.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a216:	4b2e      	ldr	r3, [pc, #184]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a21c:	f003 0302 	and.w	r3, r3, #2
 800a220:	2b02      	cmp	r3, #2
 800a222:	d106      	bne.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800a224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a226:	2b20      	cmp	r3, #32
 800a228:	d103      	bne.n	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800a22a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a22e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a230:	e011      	b.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800a232:	4b27      	ldr	r3, [pc, #156]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a23c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a240:	d106      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800a242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a244:	2b30      	cmp	r3, #48	@ 0x30
 800a246:	d103      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800a248:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a24c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a24e:	e002      	b.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a254:	e037      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a256:	e036      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a258:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a25a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a25e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a262:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a266:	2b10      	cmp	r3, #16
 800a268:	d107      	bne.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a26a:	f107 0320 	add.w	r3, r7, #32
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fd f89a 	bl	80073a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a276:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a278:	e025      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800a27a:	4b15      	ldr	r3, [pc, #84]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a282:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a286:	d10a      	bne.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800a288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28a:	2b20      	cmp	r3, #32
 800a28c:	d107      	bne.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a28e:	f107 0308 	add.w	r3, r7, #8
 800a292:	4618      	mov	r0, r3
 800a294:	f7fd fb60 	bl	8007958 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a29c:	e00f      	b.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a29e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2aa:	d105      	bne.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ae:	2b30      	cmp	r3, #48	@ 0x30
 800a2b0:	d102      	bne.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800a2b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a2b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b6:	e002      	b.n	800a2be <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800a2bc:	e003      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a2be:	e002      	b.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2c4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800a2c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	373c      	adds	r7, #60	@ 0x3c
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd90      	pop	{r4, r7, pc}
 800a2d0:	44020c00 	.word	0x44020c00
 800a2d4:	03d09000 	.word	0x03d09000
 800a2d8:	003d0900 	.word	0x003d0900
 800a2dc:	007a1200 	.word	0x007a1200
 800a2e0:	02dc6c00 	.word	0x02dc6c00

0800a2e4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a2ec:	4b48      	ldr	r3, [pc, #288]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a47      	ldr	r2, [pc, #284]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a2f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a2f8:	f7f7 ff18 	bl	800212c <HAL_GetTick>
 800a2fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2fe:	e008      	b.n	800a312 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a300:	f7f7 ff14 	bl	800212c <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d901      	bls.n	800a312 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e07a      	b.n	800a408 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a312:	4b3f      	ldr	r3, [pc, #252]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1f0      	bne.n	800a300 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a31e:	4b3c      	ldr	r3, [pc, #240]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a322:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a326:	f023 0303 	bic.w	r3, r3, #3
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	6811      	ldr	r1, [r2, #0]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	6852      	ldr	r2, [r2, #4]
 800a332:	0212      	lsls	r2, r2, #8
 800a334:	430a      	orrs	r2, r1
 800a336:	4936      	ldr	r1, [pc, #216]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	3b01      	subs	r3, #1
 800a342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	025b      	lsls	r3, r3, #9
 800a34e:	b29b      	uxth	r3, r3
 800a350:	431a      	orrs	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	3b01      	subs	r3, #1
 800a358:	041b      	lsls	r3, r3, #16
 800a35a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a35e:	431a      	orrs	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	3b01      	subs	r3, #1
 800a366:	061b      	lsls	r3, r3, #24
 800a368:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a36c:	4928      	ldr	r1, [pc, #160]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a372:	4b27      	ldr	r3, [pc, #156]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a376:	f023 020c 	bic.w	r2, r3, #12
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	4924      	ldr	r1, [pc, #144]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a380:	4313      	orrs	r3, r2
 800a382:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a384:	4b22      	ldr	r3, [pc, #136]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a388:	f023 0220 	bic.w	r2, r3, #32
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	491f      	ldr	r1, [pc, #124]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a392:	4313      	orrs	r3, r2
 800a394:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a396:	4b1e      	ldr	r3, [pc, #120]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a39e:	491c      	ldr	r1, [pc, #112]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a3a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a8:	4a19      	ldr	r2, [pc, #100]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a3aa:	f023 0310 	bic.w	r3, r3, #16
 800a3ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a3b0:	4b17      	ldr	r3, [pc, #92]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a3b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a3b8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	6a12      	ldr	r2, [r2, #32]
 800a3c0:	00d2      	lsls	r2, r2, #3
 800a3c2:	4913      	ldr	r1, [pc, #76]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a3c8:	4b11      	ldr	r3, [pc, #68]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3cc:	4a10      	ldr	r2, [pc, #64]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a3ce:	f043 0310 	orr.w	r3, r3, #16
 800a3d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a3d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a0d      	ldr	r2, [pc, #52]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a3da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a3de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a3e0:	f7f7 fea4 	bl	800212c <HAL_GetTick>
 800a3e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3e6:	e008      	b.n	800a3fa <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3e8:	f7f7 fea0 	bl	800212c <HAL_GetTick>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d901      	bls.n	800a3fa <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	e006      	b.n	800a408 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3fa:	4b05      	ldr	r3, [pc, #20]	@ (800a410 <RCCEx_PLL2_Config+0x12c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a402:	2b00      	cmp	r3, #0
 800a404:	d0f0      	beq.n	800a3e8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a406:	2300      	movs	r3, #0

}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	44020c00 	.word	0x44020c00

0800a414 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a41c:	4b48      	ldr	r3, [pc, #288]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a47      	ldr	r2, [pc, #284]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a426:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a428:	f7f7 fe80 	bl	800212c <HAL_GetTick>
 800a42c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a42e:	e008      	b.n	800a442 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a430:	f7f7 fe7c 	bl	800212c <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d901      	bls.n	800a442 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e07a      	b.n	800a538 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a442:	4b3f      	ldr	r3, [pc, #252]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1f0      	bne.n	800a430 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a44e:	4b3c      	ldr	r3, [pc, #240]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a452:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a456:	f023 0303 	bic.w	r3, r3, #3
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	6811      	ldr	r1, [r2, #0]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	6852      	ldr	r2, [r2, #4]
 800a462:	0212      	lsls	r2, r2, #8
 800a464:	430a      	orrs	r2, r1
 800a466:	4936      	ldr	r1, [pc, #216]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a468:	4313      	orrs	r3, r2
 800a46a:	630b      	str	r3, [r1, #48]	@ 0x30
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	3b01      	subs	r3, #1
 800a472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	025b      	lsls	r3, r3, #9
 800a47e:	b29b      	uxth	r3, r3
 800a480:	431a      	orrs	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	3b01      	subs	r3, #1
 800a488:	041b      	lsls	r3, r3, #16
 800a48a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a48e:	431a      	orrs	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	695b      	ldr	r3, [r3, #20]
 800a494:	3b01      	subs	r3, #1
 800a496:	061b      	lsls	r3, r3, #24
 800a498:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a49c:	4928      	ldr	r1, [pc, #160]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a4a2:	4b27      	ldr	r3, [pc, #156]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a4a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4a6:	f023 020c 	bic.w	r2, r3, #12
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	4924      	ldr	r1, [pc, #144]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a4b4:	4b22      	ldr	r3, [pc, #136]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a4b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4b8:	f023 0220 	bic.w	r2, r3, #32
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	69db      	ldr	r3, [r3, #28]
 800a4c0:	491f      	ldr	r1, [pc, #124]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a4c6:	4b1e      	ldr	r3, [pc, #120]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a4c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ce:	491c      	ldr	r1, [pc, #112]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a4d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a4d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d8:	4a19      	ldr	r2, [pc, #100]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a4da:	f023 0310 	bic.w	r3, r3, #16
 800a4de:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a4e0:	4b17      	ldr	r3, [pc, #92]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a4e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4e8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6a12      	ldr	r2, [r2, #32]
 800a4f0:	00d2      	lsls	r2, r2, #3
 800a4f2:	4913      	ldr	r1, [pc, #76]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a4f8:	4b11      	ldr	r3, [pc, #68]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4fc:	4a10      	ldr	r2, [pc, #64]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a4fe:	f043 0310 	orr.w	r3, r3, #16
 800a502:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a504:	4b0e      	ldr	r3, [pc, #56]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a0d      	ldr	r2, [pc, #52]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a50a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a50e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a510:	f7f7 fe0c 	bl	800212c <HAL_GetTick>
 800a514:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a516:	e008      	b.n	800a52a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a518:	f7f7 fe08 	bl	800212c <HAL_GetTick>
 800a51c:	4602      	mov	r2, r0
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	2b02      	cmp	r3, #2
 800a524:	d901      	bls.n	800a52a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a526:	2303      	movs	r3, #3
 800a528:	e006      	b.n	800a538 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a52a:	4b05      	ldr	r3, [pc, #20]	@ (800a540 <RCCEx_PLL3_Config+0x12c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0f0      	beq.n	800a518 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	44020c00 	.word	0x44020c00

0800a544 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e08c      	b.n	800a670 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	7a5b      	ldrb	r3, [r3, #9]
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d105      	bne.n	800a56c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7f6 fdf4 	bl	8001154 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2202      	movs	r2, #2
 800a570:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0204 	bic.w	r2, r2, #4
 800a580:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6859      	ldr	r1, [r3, #4]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	4b3b      	ldr	r3, [pc, #236]	@ (800a678 <HAL_RNG_Init+0x134>)
 800a58c:	430b      	orrs	r3, r1
 800a58e:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800a598:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a37      	ldr	r2, [pc, #220]	@ (800a67c <HAL_RNG_Init+0x138>)
 800a5a0:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a5b0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a5b2:	f7f7 fdbb 	bl	800212c <HAL_GetTick>
 800a5b6:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a5b8:	e016      	b.n	800a5e8 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a5ba:	f7f7 fdb7 	bl	800212c <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	2b04      	cmp	r3, #4
 800a5c6:	d90f      	bls.n	800a5e8 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5d6:	d107      	bne.n	800a5e8 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2202      	movs	r2, #2
 800a5e2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e043      	b.n	800a670 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5f6:	d0e0      	beq.n	800a5ba <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f042 0204 	orr.w	r2, r2, #4
 800a606:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a612:	2b40      	cmp	r3, #64	@ 0x40
 800a614:	d104      	bne.n	800a620 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2204      	movs	r2, #4
 800a61a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e027      	b.n	800a670 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a620:	f7f7 fd84 	bl	800212c <HAL_GetTick>
 800a624:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a626:	e015      	b.n	800a654 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a628:	f7f7 fd80 	bl	800212c <HAL_GetTick>
 800a62c:	4602      	mov	r2, r0
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	2b04      	cmp	r3, #4
 800a634:	d90e      	bls.n	800a654 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	2b01      	cmp	r3, #1
 800a642:	d007      	beq.n	800a654 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2204      	movs	r2, #4
 800a648:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2202      	movs	r2, #2
 800a64e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e00d      	b.n	800a670 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d1e2      	bne.n	800a628 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	40f00e00 	.word	0x40f00e00
 800a67c:	0003af66 	.word	0x0003af66

0800a680 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d071      	beq.n	800a776 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d106      	bne.n	800a6ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7f6 fdac 	bl	8001204 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a6b4:	4b32      	ldr	r3, [pc, #200]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	f003 0310 	and.w	r3, r3, #16
 800a6bc:	2b10      	cmp	r3, #16
 800a6be:	d051      	beq.n	800a764 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6c0:	4b2f      	ldr	r3, [pc, #188]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a6c2:	22ca      	movs	r2, #202	@ 0xca
 800a6c4:	625a      	str	r2, [r3, #36]	@ 0x24
 800a6c6:	4b2e      	ldr	r3, [pc, #184]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a6c8:	2253      	movs	r2, #83	@ 0x53
 800a6ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f9a3 	bl	800aa18 <RTC_EnterInitMode>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d13f      	bne.n	800a75c <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a6dc:	4b28      	ldr	r3, [pc, #160]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	4a27      	ldr	r2, [pc, #156]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a6e2:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a6e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6ea:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a6ec:	4b24      	ldr	r3, [pc, #144]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a6ee:	699a      	ldr	r2, [r3, #24]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6859      	ldr	r1, [r3, #4]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	4319      	orrs	r1, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	430b      	orrs	r3, r1
 800a700:	491f      	ldr	r1, [pc, #124]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a702:	4313      	orrs	r3, r2
 800a704:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68da      	ldr	r2, [r3, #12]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	041b      	lsls	r3, r3, #16
 800a710:	491b      	ldr	r1, [pc, #108]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a712:	4313      	orrs	r3, r2
 800a714:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a716:	4b1a      	ldr	r3, [pc, #104]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a726:	430b      	orrs	r3, r1
 800a728:	4915      	ldr	r1, [pc, #84]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f9ae 	bl	800aa90 <RTC_ExitInitMode>
 800a734:	4603      	mov	r3, r0
 800a736:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800a738:	7bfb      	ldrb	r3, [r7, #15]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10e      	bne.n	800a75c <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800a73e:	4b10      	ldr	r3, [pc, #64]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a19      	ldr	r1, [r3, #32]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	4319      	orrs	r1, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	695b      	ldr	r3, [r3, #20]
 800a754:	430b      	orrs	r3, r1
 800a756:	490a      	ldr	r1, [pc, #40]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a75c:	4b08      	ldr	r3, [pc, #32]	@ (800a780 <HAL_RTC_Init+0x100>)
 800a75e:	22ff      	movs	r2, #255	@ 0xff
 800a760:	625a      	str	r2, [r3, #36]	@ 0x24
 800a762:	e001      	b.n	800a768 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a764:	2300      	movs	r3, #0
 800a766:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a768:	7bfb      	ldrb	r3, [r7, #15]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d103      	bne.n	800a776 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800a776:	7bfb      	ldrb	r3, [r7, #15]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	44007800 	.word	0x44007800

0800a784 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a784:	b590      	push	{r4, r7, lr}
 800a786:	b087      	sub	sp, #28
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a796:	2b01      	cmp	r3, #1
 800a798:	d101      	bne.n	800a79e <HAL_RTC_SetTime+0x1a>
 800a79a:	2302      	movs	r3, #2
 800a79c:	e07e      	b.n	800a89c <HAL_RTC_SetTime+0x118>
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a7ae:	4b3d      	ldr	r3, [pc, #244]	@ (800a8a4 <HAL_RTC_SetTime+0x120>)
 800a7b0:	22ca      	movs	r2, #202	@ 0xca
 800a7b2:	625a      	str	r2, [r3, #36]	@ 0x24
 800a7b4:	4b3b      	ldr	r3, [pc, #236]	@ (800a8a4 <HAL_RTC_SetTime+0x120>)
 800a7b6:	2253      	movs	r2, #83	@ 0x53
 800a7b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f000 f92c 	bl	800aa18 <RTC_EnterInitMode>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a7c4:	7cfb      	ldrb	r3, [r7, #19]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d159      	bne.n	800a87e <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a7ca:	4b36      	ldr	r3, [pc, #216]	@ (800a8a4 <HAL_RTC_SetTime+0x120>)
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7d6:	d04d      	beq.n	800a874 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d125      	bne.n	800a82a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a7de:	4b31      	ldr	r3, [pc, #196]	@ (800a8a4 <HAL_RTC_SetTime+0x120>)
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d102      	bne.n	800a7f0 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f000 f989 	bl	800ab0c <RTC_ByteToBcd2>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	785b      	ldrb	r3, [r3, #1]
 800a802:	4618      	mov	r0, r3
 800a804:	f000 f982 	bl	800ab0c <RTC_ByteToBcd2>
 800a808:	4603      	mov	r3, r0
 800a80a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a80c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	789b      	ldrb	r3, [r3, #2]
 800a812:	4618      	mov	r0, r3
 800a814:	f000 f97a 	bl	800ab0c <RTC_ByteToBcd2>
 800a818:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a81a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	78db      	ldrb	r3, [r3, #3]
 800a822:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a824:	4313      	orrs	r3, r2
 800a826:	617b      	str	r3, [r7, #20]
 800a828:	e017      	b.n	800a85a <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a82a:	4b1e      	ldr	r3, [pc, #120]	@ (800a8a4 <HAL_RTC_SetTime+0x120>)
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a832:	2b00      	cmp	r3, #0
 800a834:	d102      	bne.n	800a83c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	2200      	movs	r2, #0
 800a83a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	785b      	ldrb	r3, [r3, #1]
 800a846:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a848:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a84e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	78db      	ldrb	r3, [r3, #3]
 800a854:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a856:	4313      	orrs	r3, r2
 800a858:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a85a:	4a12      	ldr	r2, [pc, #72]	@ (800a8a4 <HAL_RTC_SetTime+0x120>)
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a862:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a866:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a868:	4b0e      	ldr	r3, [pc, #56]	@ (800a8a4 <HAL_RTC_SetTime+0x120>)
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	4a0d      	ldr	r2, [pc, #52]	@ (800a8a4 <HAL_RTC_SetTime+0x120>)
 800a86e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a872:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f000 f90b 	bl	800aa90 <RTC_ExitInitMode>
 800a87a:	4603      	mov	r3, r0
 800a87c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a87e:	4b09      	ldr	r3, [pc, #36]	@ (800a8a4 <HAL_RTC_SetTime+0x120>)
 800a880:	22ff      	movs	r2, #255	@ 0xff
 800a882:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a884:	7cfb      	ldrb	r3, [r7, #19]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d103      	bne.n	800a892 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a89a:	7cfb      	ldrb	r3, [r7, #19]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	371c      	adds	r7, #28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd90      	pop	{r4, r7, pc}
 800a8a4:	44007800 	.word	0x44007800

0800a8a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a8a8:	b590      	push	{r4, r7, lr}
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d101      	bne.n	800a8c2 <HAL_RTC_SetDate+0x1a>
 800a8be:	2302      	movs	r3, #2
 800a8c0:	e071      	b.n	800a9a6 <HAL_RTC_SetDate+0xfe>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10e      	bne.n	800a8f6 <HAL_RTC_SetDate+0x4e>
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	785b      	ldrb	r3, [r3, #1]
 800a8dc:	f003 0310 	and.w	r3, r3, #16
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d008      	beq.n	800a8f6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	785b      	ldrb	r3, [r3, #1]
 800a8e8:	f023 0310 	bic.w	r3, r3, #16
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	330a      	adds	r3, #10
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d11c      	bne.n	800a936 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	78db      	ldrb	r3, [r3, #3]
 800a900:	4618      	mov	r0, r3
 800a902:	f000 f903 	bl	800ab0c <RTC_ByteToBcd2>
 800a906:	4603      	mov	r3, r0
 800a908:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	785b      	ldrb	r3, [r3, #1]
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 f8fc 	bl	800ab0c <RTC_ByteToBcd2>
 800a914:	4603      	mov	r3, r0
 800a916:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a918:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	789b      	ldrb	r3, [r3, #2]
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 f8f4 	bl	800ab0c <RTC_ByteToBcd2>
 800a924:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a926:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a930:	4313      	orrs	r3, r2
 800a932:	617b      	str	r3, [r7, #20]
 800a934:	e00e      	b.n	800a954 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	78db      	ldrb	r3, [r3, #3]
 800a93a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	785b      	ldrb	r3, [r3, #1]
 800a940:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a942:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a948:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a950:	4313      	orrs	r3, r2
 800a952:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a954:	4b16      	ldr	r3, [pc, #88]	@ (800a9b0 <HAL_RTC_SetDate+0x108>)
 800a956:	22ca      	movs	r2, #202	@ 0xca
 800a958:	625a      	str	r2, [r3, #36]	@ 0x24
 800a95a:	4b15      	ldr	r3, [pc, #84]	@ (800a9b0 <HAL_RTC_SetDate+0x108>)
 800a95c:	2253      	movs	r2, #83	@ 0x53
 800a95e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 f859 	bl	800aa18 <RTC_EnterInitMode>
 800a966:	4603      	mov	r3, r0
 800a968:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a96a:	7cfb      	ldrb	r3, [r7, #19]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10b      	bne.n	800a988 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a970:	4a0f      	ldr	r2, [pc, #60]	@ (800a9b0 <HAL_RTC_SetDate+0x108>)
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a978:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a97c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f000 f886 	bl	800aa90 <RTC_ExitInitMode>
 800a984:	4603      	mov	r3, r0
 800a986:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a988:	4b09      	ldr	r3, [pc, #36]	@ (800a9b0 <HAL_RTC_SetDate+0x108>)
 800a98a:	22ff      	movs	r2, #255	@ 0xff
 800a98c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a98e:	7cfb      	ldrb	r3, [r7, #19]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d103      	bne.n	800a99c <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a9a4:	7cfb      	ldrb	r3, [r7, #19]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	371c      	adds	r7, #28
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd90      	pop	{r4, r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	44007800 	.word	0x44007800

0800a9b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a9bc:	4b15      	ldr	r3, [pc, #84]	@ (800aa14 <HAL_RTC_WaitForSynchro+0x60>)
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	4a14      	ldr	r2, [pc, #80]	@ (800aa14 <HAL_RTC_WaitForSynchro+0x60>)
 800a9c2:	f023 0320 	bic.w	r3, r3, #32
 800a9c6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a9c8:	f7f7 fbb0 	bl	800212c <HAL_GetTick>
 800a9cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a9ce:	e013      	b.n	800a9f8 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a9d0:	f7f7 fbac 	bl	800212c <HAL_GetTick>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a9de:	d90b      	bls.n	800a9f8 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a9e0:	4b0c      	ldr	r3, [pc, #48]	@ (800aa14 <HAL_RTC_WaitForSynchro+0x60>)
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f003 0320 	and.w	r3, r3, #32
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10c      	bne.n	800aa06 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2203      	movs	r2, #3
 800a9f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	e008      	b.n	800aa0a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a9f8:	4b06      	ldr	r3, [pc, #24]	@ (800aa14 <HAL_RTC_WaitForSynchro+0x60>)
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f003 0320 	and.w	r3, r3, #32
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d0e5      	beq.n	800a9d0 <HAL_RTC_WaitForSynchro+0x1c>
 800aa04:	e000      	b.n	800aa08 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800aa06:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	44007800 	.word	0x44007800

0800aa18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800aa24:	4b19      	ldr	r3, [pc, #100]	@ (800aa8c <RTC_EnterInitMode+0x74>)
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d128      	bne.n	800aa82 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800aa30:	4b16      	ldr	r3, [pc, #88]	@ (800aa8c <RTC_EnterInitMode+0x74>)
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	4a15      	ldr	r2, [pc, #84]	@ (800aa8c <RTC_EnterInitMode+0x74>)
 800aa36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa3a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800aa3c:	f7f7 fb76 	bl	800212c <HAL_GetTick>
 800aa40:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aa42:	e013      	b.n	800aa6c <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800aa44:	f7f7 fb72 	bl	800212c <HAL_GetTick>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa52:	d90b      	bls.n	800aa6c <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800aa54:	4b0d      	ldr	r3, [pc, #52]	@ (800aa8c <RTC_EnterInitMode+0x74>)
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10f      	bne.n	800aa80 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800aa60:	2303      	movs	r3, #3
 800aa62:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2203      	movs	r2, #3
 800aa68:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aa6c:	4b07      	ldr	r3, [pc, #28]	@ (800aa8c <RTC_EnterInitMode+0x74>)
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d104      	bne.n	800aa82 <RTC_EnterInitMode+0x6a>
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	d1e2      	bne.n	800aa44 <RTC_EnterInitMode+0x2c>
 800aa7e:	e000      	b.n	800aa82 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800aa80:	bf00      	nop
        }
      }
    }
  }

  return status;
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	44007800 	.word	0x44007800

0800aa90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800aa9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ab08 <RTC_ExitInitMode+0x78>)
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	4a19      	ldr	r2, [pc, #100]	@ (800ab08 <RTC_ExitInitMode+0x78>)
 800aaa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aaa6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800aaa8:	4b17      	ldr	r3, [pc, #92]	@ (800ab08 <RTC_ExitInitMode+0x78>)
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	f003 0320 	and.w	r3, r3, #32
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10c      	bne.n	800aace <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f7ff ff7d 	bl	800a9b4 <HAL_RTC_WaitForSynchro>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d01e      	beq.n	800aafe <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2203      	movs	r2, #3
 800aac4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	73fb      	strb	r3, [r7, #15]
 800aacc:	e017      	b.n	800aafe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aace:	4b0e      	ldr	r3, [pc, #56]	@ (800ab08 <RTC_ExitInitMode+0x78>)
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	4a0d      	ldr	r2, [pc, #52]	@ (800ab08 <RTC_ExitInitMode+0x78>)
 800aad4:	f023 0320 	bic.w	r3, r3, #32
 800aad8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7ff ff6a 	bl	800a9b4 <HAL_RTC_WaitForSynchro>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d005      	beq.n	800aaf2 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2203      	movs	r2, #3
 800aaea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aaf2:	4b05      	ldr	r3, [pc, #20]	@ (800ab08 <RTC_ExitInitMode+0x78>)
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	4a04      	ldr	r2, [pc, #16]	@ (800ab08 <RTC_ExitInitMode+0x78>)
 800aaf8:	f043 0320 	orr.w	r3, r3, #32
 800aafc:	6193      	str	r3, [r2, #24]
  }
  return status;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	44007800 	.word	0x44007800

0800ab0c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800ab16:	2300      	movs	r3, #0
 800ab18:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800ab1a:	79fb      	ldrb	r3, [r7, #7]
 800ab1c:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800ab1e:	e005      	b.n	800ab2c <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3301      	adds	r3, #1
 800ab24:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800ab26:	7afb      	ldrb	r3, [r7, #11]
 800ab28:	3b0a      	subs	r3, #10
 800ab2a:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800ab2c:	7afb      	ldrb	r3, [r7, #11]
 800ab2e:	2b09      	cmp	r3, #9
 800ab30:	d8f6      	bhi.n	800ab20 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	011b      	lsls	r3, r3, #4
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	7afb      	ldrb	r3, [r7, #11]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	b2db      	uxtb	r3, r3
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3714      	adds	r7, #20
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	4910      	ldr	r1, [pc, #64]	@ (800aba0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	689a      	ldr	r2, [r3, #8]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	431a      	orrs	r2, r3
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	490c      	ldr	r1, [pc, #48]	@ (800aba4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ab74:	4313      	orrs	r3, r2
 800ab76:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800ab78:	4b0a      	ldr	r3, [pc, #40]	@ (800aba4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	6919      	ldr	r1, [r3, #16]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	041b      	lsls	r3, r3, #16
 800ab8a:	430b      	orrs	r3, r1
 800ab8c:	4905      	ldr	r1, [pc, #20]	@ (800aba4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr
 800aba0:	44007800 	.word	0x44007800
 800aba4:	44007c00 	.word	0x44007c00

0800aba8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e162      	b.n	800ae80 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a70      	ldr	r2, [pc, #448]	@ (800ad80 <HAL_SPI_Init+0x1d8>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d018      	beq.n	800abf6 <HAL_SPI_Init+0x4e>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a6e      	ldr	r2, [pc, #440]	@ (800ad84 <HAL_SPI_Init+0x1dc>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d013      	beq.n	800abf6 <HAL_SPI_Init+0x4e>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a6d      	ldr	r2, [pc, #436]	@ (800ad88 <HAL_SPI_Init+0x1e0>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d00e      	beq.n	800abf6 <HAL_SPI_Init+0x4e>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a6b      	ldr	r2, [pc, #428]	@ (800ad8c <HAL_SPI_Init+0x1e4>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d009      	beq.n	800abf6 <HAL_SPI_Init+0x4e>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a6a      	ldr	r2, [pc, #424]	@ (800ad90 <HAL_SPI_Init+0x1e8>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d004      	beq.n	800abf6 <HAL_SPI_Init+0x4e>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a68      	ldr	r2, [pc, #416]	@ (800ad94 <HAL_SPI_Init+0x1ec>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	e000      	b.n	800abf8 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800abf6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a5f      	ldr	r2, [pc, #380]	@ (800ad80 <HAL_SPI_Init+0x1d8>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d018      	beq.n	800ac3a <HAL_SPI_Init+0x92>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a5d      	ldr	r2, [pc, #372]	@ (800ad84 <HAL_SPI_Init+0x1dc>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d013      	beq.n	800ac3a <HAL_SPI_Init+0x92>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a5c      	ldr	r2, [pc, #368]	@ (800ad88 <HAL_SPI_Init+0x1e0>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d00e      	beq.n	800ac3a <HAL_SPI_Init+0x92>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a5a      	ldr	r2, [pc, #360]	@ (800ad8c <HAL_SPI_Init+0x1e4>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d009      	beq.n	800ac3a <HAL_SPI_Init+0x92>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a59      	ldr	r2, [pc, #356]	@ (800ad90 <HAL_SPI_Init+0x1e8>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d004      	beq.n	800ac3a <HAL_SPI_Init+0x92>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a57      	ldr	r2, [pc, #348]	@ (800ad94 <HAL_SPI_Init+0x1ec>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d105      	bne.n	800ac46 <HAL_SPI_Init+0x9e>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	2b0f      	cmp	r3, #15
 800ac40:	d901      	bls.n	800ac46 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e11c      	b.n	800ae80 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f91e 	bl	800ae88 <SPI_GetPacketSize>
 800ac4c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a4b      	ldr	r2, [pc, #300]	@ (800ad80 <HAL_SPI_Init+0x1d8>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d018      	beq.n	800ac8a <HAL_SPI_Init+0xe2>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a49      	ldr	r2, [pc, #292]	@ (800ad84 <HAL_SPI_Init+0x1dc>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d013      	beq.n	800ac8a <HAL_SPI_Init+0xe2>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a48      	ldr	r2, [pc, #288]	@ (800ad88 <HAL_SPI_Init+0x1e0>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d00e      	beq.n	800ac8a <HAL_SPI_Init+0xe2>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a46      	ldr	r2, [pc, #280]	@ (800ad8c <HAL_SPI_Init+0x1e4>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d009      	beq.n	800ac8a <HAL_SPI_Init+0xe2>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a45      	ldr	r2, [pc, #276]	@ (800ad90 <HAL_SPI_Init+0x1e8>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d004      	beq.n	800ac8a <HAL_SPI_Init+0xe2>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a43      	ldr	r2, [pc, #268]	@ (800ad94 <HAL_SPI_Init+0x1ec>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d102      	bne.n	800ac90 <HAL_SPI_Init+0xe8>
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	d820      	bhi.n	800acd2 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ac94:	4a40      	ldr	r2, [pc, #256]	@ (800ad98 <HAL_SPI_Init+0x1f0>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d018      	beq.n	800accc <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a3f      	ldr	r2, [pc, #252]	@ (800ad9c <HAL_SPI_Init+0x1f4>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d013      	beq.n	800accc <HAL_SPI_Init+0x124>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a3d      	ldr	r2, [pc, #244]	@ (800ada0 <HAL_SPI_Init+0x1f8>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d00e      	beq.n	800accc <HAL_SPI_Init+0x124>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a3c      	ldr	r2, [pc, #240]	@ (800ada4 <HAL_SPI_Init+0x1fc>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d009      	beq.n	800accc <HAL_SPI_Init+0x124>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a3a      	ldr	r2, [pc, #232]	@ (800ada8 <HAL_SPI_Init+0x200>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d004      	beq.n	800accc <HAL_SPI_Init+0x124>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a39      	ldr	r2, [pc, #228]	@ (800adac <HAL_SPI_Init+0x204>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d104      	bne.n	800acd6 <HAL_SPI_Init+0x12e>
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2b10      	cmp	r3, #16
 800acd0:	d901      	bls.n	800acd6 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e0d4      	b.n	800ae80 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7f6 faea 	bl	80012c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2202      	movs	r2, #2
 800acf4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f022 0201 	bic.w	r2, r2, #1
 800ad06:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ad12:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad1c:	d119      	bne.n	800ad52 <HAL_SPI_Init+0x1aa>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad26:	d103      	bne.n	800ad30 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d008      	beq.n	800ad42 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d10c      	bne.n	800ad52 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad40:	d107      	bne.n	800ad52 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ad50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d028      	beq.n	800adb0 <HAL_SPI_Init+0x208>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	2b06      	cmp	r3, #6
 800ad64:	d924      	bls.n	800adb0 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	430a      	orrs	r2, r1
 800ad7a:	601a      	str	r2, [r3, #0]
 800ad7c:	e020      	b.n	800adc0 <HAL_SPI_Init+0x218>
 800ad7e:	bf00      	nop
 800ad80:	40014c00 	.word	0x40014c00
 800ad84:	50014c00 	.word	0x50014c00
 800ad88:	44002000 	.word	0x44002000
 800ad8c:	54002000 	.word	0x54002000
 800ad90:	40015000 	.word	0x40015000
 800ad94:	50015000 	.word	0x50015000
 800ad98:	40013000 	.word	0x40013000
 800ad9c:	50013000 	.word	0x50013000
 800ada0:	40003800 	.word	0x40003800
 800ada4:	50003800 	.word	0x50003800
 800ada8:	40003c00 	.word	0x40003c00
 800adac:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800adbe:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	69da      	ldr	r2, [r3, #28]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adc8:	431a      	orrs	r2, r3
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	431a      	orrs	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800add2:	ea42 0103 	orr.w	r1, r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68da      	ldr	r2, [r3, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	430a      	orrs	r2, r1
 800ade0:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adea:	431a      	orrs	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf0:	431a      	orrs	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	699b      	ldr	r3, [r3, #24]
 800adf6:	431a      	orrs	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	431a      	orrs	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	695b      	ldr	r3, [r3, #20]
 800ae02:	431a      	orrs	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a1b      	ldr	r3, [r3, #32]
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	431a      	orrs	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae14:	431a      	orrs	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	431a      	orrs	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae20:	431a      	orrs	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae26:	431a      	orrs	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae2c:	ea42 0103 	orr.w	r1, r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	430a      	orrs	r2, r1
 800ae3a:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f022 0201 	bic.w	r2, r2, #1
 800ae4a:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00a      	beq.n	800ae6e <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae94:	095b      	lsrs	r3, r3, #5
 800ae96:	3301      	adds	r3, #1
 800ae98:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	3307      	adds	r3, #7
 800aea6:	08db      	lsrs	r3, r3, #3
 800aea8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	fb02 f303 	mul.w	r3, r2, r3
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e042      	b.n	800af56 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d106      	bne.n	800aee8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7f6 faaa 	bl	800143c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2224      	movs	r2, #36	@ 0x24
 800aeec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f022 0201 	bic.w	r2, r2, #1
 800aefe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fab5 	bl	800b478 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f8c4 	bl	800b09c <UART_SetConfig>
 800af14:	4603      	mov	r3, r0
 800af16:	2b01      	cmp	r3, #1
 800af18:	d101      	bne.n	800af1e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	e01b      	b.n	800af56 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f042 0201 	orr.w	r2, r2, #1
 800af4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fb34 	bl	800b5bc <UART_CheckIdleState>
 800af54:	4603      	mov	r3, r0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b08a      	sub	sp, #40	@ 0x28
 800af62:	af02      	add	r7, sp, #8
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	60b9      	str	r1, [r7, #8]
 800af68:	603b      	str	r3, [r7, #0]
 800af6a:	4613      	mov	r3, r2
 800af6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af74:	2b20      	cmp	r3, #32
 800af76:	f040 808b 	bne.w	800b090 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <HAL_UART_Transmit+0x28>
 800af80:	88fb      	ldrh	r3, [r7, #6]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e083      	b.n	800b092 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af94:	2b80      	cmp	r3, #128	@ 0x80
 800af96:	d107      	bne.n	800afa8 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	689a      	ldr	r2, [r3, #8]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800afa6:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2221      	movs	r2, #33	@ 0x21
 800afb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800afb8:	f7f7 f8b8 	bl	800212c <HAL_GetTick>
 800afbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	88fa      	ldrh	r2, [r7, #6]
 800afc2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	88fa      	ldrh	r2, [r7, #6]
 800afca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afd6:	d108      	bne.n	800afea <HAL_UART_Transmit+0x8c>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d104      	bne.n	800afea <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800afe0:	2300      	movs	r3, #0
 800afe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	61bb      	str	r3, [r7, #24]
 800afe8:	e003      	b.n	800aff2 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aff2:	e030      	b.n	800b056 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	2200      	movs	r2, #0
 800affc:	2180      	movs	r1, #128	@ 0x80
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f000 fb86 	bl	800b710 <UART_WaitOnFlagUntilTimeout>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d005      	beq.n	800b016 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2220      	movs	r2, #32
 800b00e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	e03d      	b.n	800b092 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10b      	bne.n	800b034 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	461a      	mov	r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b02a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	3302      	adds	r3, #2
 800b030:	61bb      	str	r3, [r7, #24]
 800b032:	e007      	b.n	800b044 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	781a      	ldrb	r2, [r3, #0]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	3301      	adds	r3, #1
 800b042:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	3b01      	subs	r3, #1
 800b04e:	b29a      	uxth	r2, r3
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1c8      	bne.n	800aff4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2200      	movs	r2, #0
 800b06a:	2140      	movs	r1, #64	@ 0x40
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f000 fb4f 	bl	800b710 <UART_WaitOnFlagUntilTimeout>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d005      	beq.n	800b084 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2220      	movs	r2, #32
 800b07c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b080:	2303      	movs	r3, #3
 800b082:	e006      	b.n	800b092 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2220      	movs	r2, #32
 800b088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	e000      	b.n	800b092 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b090:	2302      	movs	r3, #2
  }
}
 800b092:	4618      	mov	r0, r3
 800b094:	3720      	adds	r7, #32
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
	...

0800b09c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b09c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0a0:	b094      	sub	sp, #80	@ 0x50
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	4b78      	ldr	r3, [pc, #480]	@ (800b294 <UART_SetConfig+0x1f8>)
 800b0b2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b6:	689a      	ldr	r2, [r3, #8]
 800b0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	431a      	orrs	r2, r3
 800b0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c0:	695b      	ldr	r3, [r3, #20]
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c6:	69db      	ldr	r3, [r3, #28]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4971      	ldr	r1, [pc, #452]	@ (800b298 <UART_SetConfig+0x1fc>)
 800b0d4:	4019      	ands	r1, r3
 800b0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ec:	68d9      	ldr	r1, [r3, #12]
 800b0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	ea40 0301 	orr.w	r3, r0, r1
 800b0f6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	4b64      	ldr	r3, [pc, #400]	@ (800b294 <UART_SetConfig+0x1f8>)
 800b104:	429a      	cmp	r2, r3
 800b106:	d009      	beq.n	800b11c <UART_SetConfig+0x80>
 800b108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	4b63      	ldr	r3, [pc, #396]	@ (800b29c <UART_SetConfig+0x200>)
 800b10e:	429a      	cmp	r2, r3
 800b110:	d004      	beq.n	800b11c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b114:	6a1a      	ldr	r2, [r3, #32]
 800b116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b118:	4313      	orrs	r3, r2
 800b11a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b126:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b130:	430b      	orrs	r3, r1
 800b132:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13a:	f023 000f 	bic.w	r0, r3, #15
 800b13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b140:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	ea40 0301 	orr.w	r3, r0, r1
 800b14a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	4b53      	ldr	r3, [pc, #332]	@ (800b2a0 <UART_SetConfig+0x204>)
 800b152:	429a      	cmp	r2, r3
 800b154:	d102      	bne.n	800b15c <UART_SetConfig+0xc0>
 800b156:	2301      	movs	r3, #1
 800b158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b15a:	e066      	b.n	800b22a <UART_SetConfig+0x18e>
 800b15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	4b50      	ldr	r3, [pc, #320]	@ (800b2a4 <UART_SetConfig+0x208>)
 800b162:	429a      	cmp	r2, r3
 800b164:	d102      	bne.n	800b16c <UART_SetConfig+0xd0>
 800b166:	2302      	movs	r3, #2
 800b168:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b16a:	e05e      	b.n	800b22a <UART_SetConfig+0x18e>
 800b16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	4b4d      	ldr	r3, [pc, #308]	@ (800b2a8 <UART_SetConfig+0x20c>)
 800b172:	429a      	cmp	r2, r3
 800b174:	d102      	bne.n	800b17c <UART_SetConfig+0xe0>
 800b176:	2304      	movs	r3, #4
 800b178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b17a:	e056      	b.n	800b22a <UART_SetConfig+0x18e>
 800b17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	4b4a      	ldr	r3, [pc, #296]	@ (800b2ac <UART_SetConfig+0x210>)
 800b182:	429a      	cmp	r2, r3
 800b184:	d102      	bne.n	800b18c <UART_SetConfig+0xf0>
 800b186:	2308      	movs	r3, #8
 800b188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b18a:	e04e      	b.n	800b22a <UART_SetConfig+0x18e>
 800b18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	4b47      	ldr	r3, [pc, #284]	@ (800b2b0 <UART_SetConfig+0x214>)
 800b192:	429a      	cmp	r2, r3
 800b194:	d102      	bne.n	800b19c <UART_SetConfig+0x100>
 800b196:	2310      	movs	r3, #16
 800b198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b19a:	e046      	b.n	800b22a <UART_SetConfig+0x18e>
 800b19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	4b44      	ldr	r3, [pc, #272]	@ (800b2b4 <UART_SetConfig+0x218>)
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d102      	bne.n	800b1ac <UART_SetConfig+0x110>
 800b1a6:	2320      	movs	r3, #32
 800b1a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1aa:	e03e      	b.n	800b22a <UART_SetConfig+0x18e>
 800b1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	4b41      	ldr	r3, [pc, #260]	@ (800b2b8 <UART_SetConfig+0x21c>)
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d102      	bne.n	800b1bc <UART_SetConfig+0x120>
 800b1b6:	2340      	movs	r3, #64	@ 0x40
 800b1b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1ba:	e036      	b.n	800b22a <UART_SetConfig+0x18e>
 800b1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	4b3e      	ldr	r3, [pc, #248]	@ (800b2bc <UART_SetConfig+0x220>)
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d102      	bne.n	800b1cc <UART_SetConfig+0x130>
 800b1c6:	2380      	movs	r3, #128	@ 0x80
 800b1c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1ca:	e02e      	b.n	800b22a <UART_SetConfig+0x18e>
 800b1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	4b3b      	ldr	r3, [pc, #236]	@ (800b2c0 <UART_SetConfig+0x224>)
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d103      	bne.n	800b1de <UART_SetConfig+0x142>
 800b1d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b1da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1dc:	e025      	b.n	800b22a <UART_SetConfig+0x18e>
 800b1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	4b38      	ldr	r3, [pc, #224]	@ (800b2c4 <UART_SetConfig+0x228>)
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d103      	bne.n	800b1f0 <UART_SetConfig+0x154>
 800b1e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1ee:	e01c      	b.n	800b22a <UART_SetConfig+0x18e>
 800b1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	4b34      	ldr	r3, [pc, #208]	@ (800b2c8 <UART_SetConfig+0x22c>)
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d103      	bne.n	800b202 <UART_SetConfig+0x166>
 800b1fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b200:	e013      	b.n	800b22a <UART_SetConfig+0x18e>
 800b202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	4b31      	ldr	r3, [pc, #196]	@ (800b2cc <UART_SetConfig+0x230>)
 800b208:	429a      	cmp	r2, r3
 800b20a:	d103      	bne.n	800b214 <UART_SetConfig+0x178>
 800b20c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b210:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b212:	e00a      	b.n	800b22a <UART_SetConfig+0x18e>
 800b214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	4b1e      	ldr	r3, [pc, #120]	@ (800b294 <UART_SetConfig+0x1f8>)
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d103      	bne.n	800b226 <UART_SetConfig+0x18a>
 800b21e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b222:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b224:	e001      	b.n	800b22a <UART_SetConfig+0x18e>
 800b226:	2300      	movs	r3, #0
 800b228:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	4b19      	ldr	r3, [pc, #100]	@ (800b294 <UART_SetConfig+0x1f8>)
 800b230:	429a      	cmp	r2, r3
 800b232:	d005      	beq.n	800b240 <UART_SetConfig+0x1a4>
 800b234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	4b18      	ldr	r3, [pc, #96]	@ (800b29c <UART_SetConfig+0x200>)
 800b23a:	429a      	cmp	r2, r3
 800b23c:	f040 8094 	bne.w	800b368 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b242:	2200      	movs	r2, #0
 800b244:	623b      	str	r3, [r7, #32]
 800b246:	627a      	str	r2, [r7, #36]	@ 0x24
 800b248:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b24c:	f7fc fcf0 	bl	8007c30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b250:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 80f7 	beq.w	800b448 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b25e:	4a1c      	ldr	r2, [pc, #112]	@ (800b2d0 <UART_SetConfig+0x234>)
 800b260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b264:	461a      	mov	r2, r3
 800b266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b268:	fbb3 f3f2 	udiv	r3, r3, r2
 800b26c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b270:	685a      	ldr	r2, [r3, #4]
 800b272:	4613      	mov	r3, r2
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	4413      	add	r3, r2
 800b278:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d305      	bcc.n	800b28a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b284:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b286:	429a      	cmp	r2, r3
 800b288:	d924      	bls.n	800b2d4 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b290:	e069      	b.n	800b366 <UART_SetConfig+0x2ca>
 800b292:	bf00      	nop
 800b294:	44002400 	.word	0x44002400
 800b298:	cfff69f3 	.word	0xcfff69f3
 800b29c:	54002400 	.word	0x54002400
 800b2a0:	40013800 	.word	0x40013800
 800b2a4:	40004400 	.word	0x40004400
 800b2a8:	40004800 	.word	0x40004800
 800b2ac:	40004c00 	.word	0x40004c00
 800b2b0:	40005000 	.word	0x40005000
 800b2b4:	40006400 	.word	0x40006400
 800b2b8:	40007800 	.word	0x40007800
 800b2bc:	40007c00 	.word	0x40007c00
 800b2c0:	40008000 	.word	0x40008000
 800b2c4:	40006800 	.word	0x40006800
 800b2c8:	40006c00 	.word	0x40006c00
 800b2cc:	40008400 	.word	0x40008400
 800b2d0:	080113b0 	.word	0x080113b0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	61bb      	str	r3, [r7, #24]
 800b2da:	61fa      	str	r2, [r7, #28]
 800b2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e0:	4a64      	ldr	r2, [pc, #400]	@ (800b474 <UART_SetConfig+0x3d8>)
 800b2e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	617a      	str	r2, [r7, #20]
 800b2ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b2f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b2f6:	f7f4 ffc9 	bl	800028c <__aeabi_uldivmod>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	4610      	mov	r0, r2
 800b300:	4619      	mov	r1, r3
 800b302:	f04f 0200 	mov.w	r2, #0
 800b306:	f04f 0300 	mov.w	r3, #0
 800b30a:	020b      	lsls	r3, r1, #8
 800b30c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b310:	0202      	lsls	r2, r0, #8
 800b312:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b314:	6849      	ldr	r1, [r1, #4]
 800b316:	0849      	lsrs	r1, r1, #1
 800b318:	2000      	movs	r0, #0
 800b31a:	460c      	mov	r4, r1
 800b31c:	4605      	mov	r5, r0
 800b31e:	eb12 0804 	adds.w	r8, r2, r4
 800b322:	eb43 0905 	adc.w	r9, r3, r5
 800b326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	60bb      	str	r3, [r7, #8]
 800b32e:	60fa      	str	r2, [r7, #12]
 800b330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b334:	4640      	mov	r0, r8
 800b336:	4649      	mov	r1, r9
 800b338:	f7f4 ffa8 	bl	800028c <__aeabi_uldivmod>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	4613      	mov	r3, r2
 800b342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b34a:	d308      	bcc.n	800b35e <UART_SetConfig+0x2c2>
 800b34c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b34e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b352:	d204      	bcs.n	800b35e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800b354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b35a:	60da      	str	r2, [r3, #12]
 800b35c:	e003      	b.n	800b366 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800b35e:	2301      	movs	r3, #1
 800b360:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b364:	e070      	b.n	800b448 <UART_SetConfig+0x3ac>
 800b366:	e06f      	b.n	800b448 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b370:	d13c      	bne.n	800b3ec <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b374:	2200      	movs	r2, #0
 800b376:	603b      	str	r3, [r7, #0]
 800b378:	607a      	str	r2, [r7, #4]
 800b37a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b37e:	f7fc fc57 	bl	8007c30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b382:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b386:	2b00      	cmp	r3, #0
 800b388:	d05e      	beq.n	800b448 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b38c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b38e:	4a39      	ldr	r2, [pc, #228]	@ (800b474 <UART_SetConfig+0x3d8>)
 800b390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b394:	461a      	mov	r2, r3
 800b396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b398:	fbb3 f3f2 	udiv	r3, r3, r2
 800b39c:	005a      	lsls	r2, r3, #1
 800b39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	085b      	lsrs	r3, r3, #1
 800b3a4:	441a      	add	r2, r3
 800b3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3b2:	2b0f      	cmp	r3, #15
 800b3b4:	d916      	bls.n	800b3e4 <UART_SetConfig+0x348>
 800b3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3bc:	d212      	bcs.n	800b3e4 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	f023 030f 	bic.w	r3, r3, #15
 800b3c6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ca:	085b      	lsrs	r3, r3, #1
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	f003 0307 	and.w	r3, r3, #7
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b3e0:	60da      	str	r2, [r3, #12]
 800b3e2:	e031      	b.n	800b448 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b3ea:	e02d      	b.n	800b448 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b3ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	469a      	mov	sl, r3
 800b3f2:	4693      	mov	fp, r2
 800b3f4:	4650      	mov	r0, sl
 800b3f6:	4659      	mov	r1, fp
 800b3f8:	f7fc fc1a 	bl	8007c30 <HAL_RCCEx_GetPeriphCLKFreq>
 800b3fc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b3fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b400:	2b00      	cmp	r3, #0
 800b402:	d021      	beq.n	800b448 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b408:	4a1a      	ldr	r2, [pc, #104]	@ (800b474 <UART_SetConfig+0x3d8>)
 800b40a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b40e:	461a      	mov	r2, r3
 800b410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b412:	fbb3 f2f2 	udiv	r2, r3, r2
 800b416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	085b      	lsrs	r3, r3, #1
 800b41c:	441a      	add	r2, r3
 800b41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	fbb2 f3f3 	udiv	r3, r2, r3
 800b426:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b42a:	2b0f      	cmp	r3, #15
 800b42c:	d909      	bls.n	800b442 <UART_SetConfig+0x3a6>
 800b42e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b434:	d205      	bcs.n	800b442 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b438:	b29a      	uxth	r2, r3
 800b43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	60da      	str	r2, [r3, #12]
 800b440:	e002      	b.n	800b448 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b44a:	2201      	movs	r2, #1
 800b44c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b452:	2201      	movs	r2, #1
 800b454:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45a:	2200      	movs	r2, #0
 800b45c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b460:	2200      	movs	r2, #0
 800b462:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b464:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3750      	adds	r7, #80	@ 0x50
 800b46c:	46bd      	mov	sp, r7
 800b46e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b472:	bf00      	nop
 800b474:	080113b0 	.word	0x080113b0

0800b478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b484:	f003 0308 	and.w	r3, r3, #8
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00a      	beq.n	800b4a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a6:	f003 0301 	and.w	r3, r3, #1
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00a      	beq.n	800b4c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	430a      	orrs	r2, r1
 800b4c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c8:	f003 0302 	and.w	r3, r3, #2
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00a      	beq.n	800b4e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ea:	f003 0304 	and.w	r3, r3, #4
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00a      	beq.n	800b508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	430a      	orrs	r2, r1
 800b506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b50c:	f003 0310 	and.w	r3, r3, #16
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00a      	beq.n	800b52a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	430a      	orrs	r2, r1
 800b528:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b52e:	f003 0320 	and.w	r3, r3, #32
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00a      	beq.n	800b54c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	430a      	orrs	r2, r1
 800b54a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b554:	2b00      	cmp	r3, #0
 800b556:	d01a      	beq.n	800b58e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	430a      	orrs	r2, r1
 800b56c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b576:	d10a      	bne.n	800b58e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	430a      	orrs	r2, r1
 800b58c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00a      	beq.n	800b5b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	430a      	orrs	r2, r1
 800b5ae:	605a      	str	r2, [r3, #4]
  }
}
 800b5b0:	bf00      	nop
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr

0800b5bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b098      	sub	sp, #96	@ 0x60
 800b5c0:	af02      	add	r7, sp, #8
 800b5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5cc:	f7f6 fdae 	bl	800212c <HAL_GetTick>
 800b5d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0308 	and.w	r3, r3, #8
 800b5dc:	2b08      	cmp	r3, #8
 800b5de:	d12f      	bne.n	800b640 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f88e 	bl	800b710 <UART_WaitOnFlagUntilTimeout>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d022      	beq.n	800b640 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b602:	e853 3f00 	ldrex	r3, [r3]
 800b606:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b60a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b60e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	461a      	mov	r2, r3
 800b616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b618:	647b      	str	r3, [r7, #68]	@ 0x44
 800b61a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b61e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b620:	e841 2300 	strex	r3, r2, [r1]
 800b624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1e6      	bne.n	800b5fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2220      	movs	r2, #32
 800b630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e063      	b.n	800b708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f003 0304 	and.w	r3, r3, #4
 800b64a:	2b04      	cmp	r3, #4
 800b64c:	d149      	bne.n	800b6e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b64e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b656:	2200      	movs	r2, #0
 800b658:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f857 	bl	800b710 <UART_WaitOnFlagUntilTimeout>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d03c      	beq.n	800b6e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b670:	e853 3f00 	ldrex	r3, [r3]
 800b674:	623b      	str	r3, [r7, #32]
   return(result);
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b67c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	461a      	mov	r2, r3
 800b684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b686:	633b      	str	r3, [r7, #48]	@ 0x30
 800b688:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b68c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b68e:	e841 2300 	strex	r3, r2, [r1]
 800b692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1e6      	bne.n	800b668 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	3308      	adds	r3, #8
 800b6a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	e853 3f00 	ldrex	r3, [r3]
 800b6a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f023 0301 	bic.w	r3, r3, #1
 800b6b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	3308      	adds	r3, #8
 800b6b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6ba:	61fa      	str	r2, [r7, #28]
 800b6bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6be:	69b9      	ldr	r1, [r7, #24]
 800b6c0:	69fa      	ldr	r2, [r7, #28]
 800b6c2:	e841 2300 	strex	r3, r2, [r1]
 800b6c6:	617b      	str	r3, [r7, #20]
   return(result);
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1e5      	bne.n	800b69a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2220      	movs	r2, #32
 800b6d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e012      	b.n	800b708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2220      	movs	r2, #32
 800b6ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2200      	movs	r2, #0
 800b702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b706:	2300      	movs	r3, #0
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3758      	adds	r7, #88	@ 0x58
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	603b      	str	r3, [r7, #0]
 800b71c:	4613      	mov	r3, r2
 800b71e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b720:	e04f      	b.n	800b7c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b728:	d04b      	beq.n	800b7c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b72a:	f7f6 fcff 	bl	800212c <HAL_GetTick>
 800b72e:	4602      	mov	r2, r0
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	1ad3      	subs	r3, r2, r3
 800b734:	69ba      	ldr	r2, [r7, #24]
 800b736:	429a      	cmp	r2, r3
 800b738:	d302      	bcc.n	800b740 <UART_WaitOnFlagUntilTimeout+0x30>
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d101      	bne.n	800b744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b740:	2303      	movs	r3, #3
 800b742:	e04e      	b.n	800b7e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f003 0304 	and.w	r3, r3, #4
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d037      	beq.n	800b7c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	2b80      	cmp	r3, #128	@ 0x80
 800b756:	d034      	beq.n	800b7c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	2b40      	cmp	r3, #64	@ 0x40
 800b75c:	d031      	beq.n	800b7c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	69db      	ldr	r3, [r3, #28]
 800b764:	f003 0308 	and.w	r3, r3, #8
 800b768:	2b08      	cmp	r3, #8
 800b76a:	d110      	bne.n	800b78e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2208      	movs	r2, #8
 800b772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b774:	68f8      	ldr	r0, [r7, #12]
 800b776:	f000 f838 	bl	800b7ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2208      	movs	r2, #8
 800b77e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	e029      	b.n	800b7e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	69db      	ldr	r3, [r3, #28]
 800b794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b79c:	d111      	bne.n	800b7c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b7a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f000 f81e 	bl	800b7ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2220      	movs	r2, #32
 800b7b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	e00f      	b.n	800b7e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	69da      	ldr	r2, [r3, #28]
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	bf0c      	ite	eq
 800b7d2:	2301      	moveq	r3, #1
 800b7d4:	2300      	movne	r3, #0
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	461a      	mov	r2, r3
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d0a0      	beq.n	800b722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	b095      	sub	sp, #84	@ 0x54
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7fa:	e853 3f00 	ldrex	r3, [r3]
 800b7fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	461a      	mov	r2, r3
 800b80e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b810:	643b      	str	r3, [r7, #64]	@ 0x40
 800b812:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b818:	e841 2300 	strex	r3, r2, [r1]
 800b81c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1e6      	bne.n	800b7f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3308      	adds	r3, #8
 800b82a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	e853 3f00 	ldrex	r3, [r3]
 800b832:	61fb      	str	r3, [r7, #28]
   return(result);
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b83a:	f023 0301 	bic.w	r3, r3, #1
 800b83e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3308      	adds	r3, #8
 800b846:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b848:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b84a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b84e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b850:	e841 2300 	strex	r3, r2, [r1]
 800b854:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1e3      	bne.n	800b824 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b860:	2b01      	cmp	r3, #1
 800b862:	d118      	bne.n	800b896 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	e853 3f00 	ldrex	r3, [r3]
 800b870:	60bb      	str	r3, [r7, #8]
   return(result);
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	f023 0310 	bic.w	r3, r3, #16
 800b878:	647b      	str	r3, [r7, #68]	@ 0x44
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	461a      	mov	r2, r3
 800b880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b882:	61bb      	str	r3, [r7, #24]
 800b884:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b886:	6979      	ldr	r1, [r7, #20]
 800b888:	69ba      	ldr	r2, [r7, #24]
 800b88a:	e841 2300 	strex	r3, r2, [r1]
 800b88e:	613b      	str	r3, [r7, #16]
   return(result);
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1e6      	bne.n	800b864 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2220      	movs	r2, #32
 800b89a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b8aa:	bf00      	nop
 800b8ac:	3754      	adds	r7, #84	@ 0x54
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b8b6:	b480      	push	{r7}
 800b8b8:	b085      	sub	sp, #20
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d101      	bne.n	800b8cc <HAL_UARTEx_DisableFifoMode+0x16>
 800b8c8:	2302      	movs	r3, #2
 800b8ca:	e027      	b.n	800b91c <HAL_UARTEx_DisableFifoMode+0x66>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2224      	movs	r2, #36	@ 0x24
 800b8d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f022 0201 	bic.w	r2, r2, #1
 800b8f2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b8fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2220      	movs	r2, #32
 800b90e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d101      	bne.n	800b940 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b93c:	2302      	movs	r3, #2
 800b93e:	e02d      	b.n	800b99c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2224      	movs	r2, #36	@ 0x24
 800b94c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f022 0201 	bic.w	r2, r2, #1
 800b966:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	430a      	orrs	r2, r1
 800b97a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f84f 	bl	800ba20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2220      	movs	r2, #32
 800b98e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d101      	bne.n	800b9bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e02d      	b.n	800ba18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2224      	movs	r2, #36	@ 0x24
 800b9c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f022 0201 	bic.w	r2, r2, #1
 800b9e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	430a      	orrs	r2, r1
 800b9f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 f811 	bl	800ba20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2220      	movs	r2, #32
 800ba0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d108      	bne.n	800ba42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba40:	e031      	b.n	800baa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba42:	2308      	movs	r3, #8
 800ba44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba46:	2308      	movs	r3, #8
 800ba48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	0e5b      	lsrs	r3, r3, #25
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	f003 0307 	and.w	r3, r3, #7
 800ba58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	0f5b      	lsrs	r3, r3, #29
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	f003 0307 	and.w	r3, r3, #7
 800ba68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba6a:	7bbb      	ldrb	r3, [r7, #14]
 800ba6c:	7b3a      	ldrb	r2, [r7, #12]
 800ba6e:	4911      	ldr	r1, [pc, #68]	@ (800bab4 <UARTEx_SetNbDataToProcess+0x94>)
 800ba70:	5c8a      	ldrb	r2, [r1, r2]
 800ba72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba76:	7b3a      	ldrb	r2, [r7, #12]
 800ba78:	490f      	ldr	r1, [pc, #60]	@ (800bab8 <UARTEx_SetNbDataToProcess+0x98>)
 800ba7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba7c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
 800ba8a:	7b7a      	ldrb	r2, [r7, #13]
 800ba8c:	4909      	ldr	r1, [pc, #36]	@ (800bab4 <UARTEx_SetNbDataToProcess+0x94>)
 800ba8e:	5c8a      	ldrb	r2, [r1, r2]
 800ba90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba94:	7b7a      	ldrb	r2, [r7, #13]
 800ba96:	4908      	ldr	r1, [pc, #32]	@ (800bab8 <UARTEx_SetNbDataToProcess+0x98>)
 800ba98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba9a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800baa6:	bf00      	nop
 800baa8:	3714      	adds	r7, #20
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	080113c8 	.word	0x080113c8
 800bab8:	080113d0 	.word	0x080113d0

0800babc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bac8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bad4:	f043 0201 	orr.w	r2, r3, #1
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800baea:	b084      	sub	sp, #16
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	f107 001c 	add.w	r0, r7, #28
 800baf8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e008      	b.n	800bb18 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7ff ffd8 	bl	800babc <USB_CoreReset>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800bb16:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb22:	b004      	add	sp, #16
 800bb24:	4770      	bx	lr

0800bb26 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b085      	sub	sp, #20
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bb34:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bb38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bb4e:	b480      	push	{r7}
 800bb50:	b085      	sub	sp, #20
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bb56:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bb5a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	43db      	mvns	r3, r3
 800bb64:	401a      	ands	r2, r3
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800bb84:	78fb      	ldrb	r3, [r7, #3]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d106      	bne.n	800bb98 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	641a      	str	r2, [r3, #64]	@ 0x40
 800bb96:	e00b      	b.n	800bbb0 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800bb98:	78fb      	ldrb	r3, [r7, #3]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d106      	bne.n	800bbac <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bba2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	641a      	str	r2, [r3, #64]	@ 0x40
 800bbaa:	e001      	b.n	800bbb0 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800bbac:	2301      	movs	r3, #1
 800bbae:	e000      	b.n	800bbb2 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	370c      	adds	r7, #12
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	f107 001c 	add.w	r0, r7, #28
 800bbcc:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbda:	f023 0201 	bic.w	r2, r3, #1
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7ff ffc7 	bl	800bb78 <USB_SetCurrentMode>
 800bbea:	4603      	mov	r3, r0
 800bbec:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800bbf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc00:	b004      	add	sp, #16
 800bc02:	4770      	bx	lr

0800bc04 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b09f      	sub	sp, #124	@ 0x7c
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4413      	add	r3, r2
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	4ba0      	ldr	r3, [pc, #640]	@ (800bea4 <USB_ActivateEndpoint+0x2a0>)
 800bc22:	4013      	ands	r3, r2
 800bc24:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	78db      	ldrb	r3, [r3, #3]
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d819      	bhi.n	800bc62 <USB_ActivateEndpoint+0x5e>
 800bc2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc34 <USB_ActivateEndpoint+0x30>)
 800bc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc34:	0800bc45 	.word	0x0800bc45
 800bc38:	0800bc59 	.word	0x0800bc59
 800bc3c:	0800bc6b 	.word	0x0800bc6b
 800bc40:	0800bc4f 	.word	0x0800bc4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bc44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bc4a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bc4c:	e00e      	b.n	800bc6c <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bc4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc50:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bc54:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bc56:	e009      	b.n	800bc6c <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bc58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bc5e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bc60:	e004      	b.n	800bc6c <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800bc68:	e000      	b.n	800bc6c <USB_ActivateEndpoint+0x68>
      break;
 800bc6a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	441a      	add	r2, r3
 800bc76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc80:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	4413      	add	r3, r2
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	4b86      	ldr	r3, [pc, #536]	@ (800bea8 <USB_ActivateEndpoint+0x2a4>)
 800bc90:	4013      	ands	r3, r2
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	7812      	ldrb	r2, [r2, #0]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	441a      	add	r2, r3
 800bca4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcae:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	7b1b      	ldrb	r3, [r3, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f040 8177 	bne.w	800bfa8 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	785b      	ldrb	r3, [r3, #1]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d079      	beq.n	800bdb6 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	00db      	lsls	r3, r3, #3
 800bcc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bccc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	00db      	lsls	r3, r3, #3
 800bcd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bce0:	0c12      	lsrs	r2, r2, #16
 800bce2:	0412      	lsls	r2, r2, #16
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	00db      	lsls	r3, r3, #3
 800bcec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcf0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bcf4:	6819      	ldr	r1, [r3, #0]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	88db      	ldrh	r3, [r3, #6]
 800bcfa:	089b      	lsrs	r3, r3, #2
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	009a      	lsls	r2, r3, #2
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	00db      	lsls	r3, r3, #3
 800bd06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd0e:	430a      	orrs	r2, r1
 800bd10:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	61bb      	str	r3, [r7, #24]
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d013      	beq.n	800bd52 <USB_ActivateEndpoint+0x14e>
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4413      	add	r3, r2
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	4b5c      	ldr	r3, [pc, #368]	@ (800bea8 <USB_ActivateEndpoint+0x2a4>)
 800bd38:	4013      	ands	r3, r2
 800bd3a:	617b      	str	r3, [r7, #20]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	441a      	add	r2, r3
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd50:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	78db      	ldrb	r3, [r3, #3]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d018      	beq.n	800bd8c <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4413      	add	r3, r2
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	4b51      	ldr	r3, [pc, #324]	@ (800beac <USB_ActivateEndpoint+0x2a8>)
 800bd68:	4013      	ands	r3, r2
 800bd6a:	60fb      	str	r3, [r7, #12]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f083 0320 	eor.w	r3, r3, #32
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	441a      	add	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd88:	6013      	str	r3, [r2, #0]
 800bd8a:	e28c      	b.n	800c2a6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4413      	add	r3, r2
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	4b44      	ldr	r3, [pc, #272]	@ (800beac <USB_ActivateEndpoint+0x2a8>)
 800bd9a:	4013      	ands	r3, r2
 800bd9c:	613b      	str	r3, [r7, #16]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	441a      	add	r2, r3
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdb2:	6013      	str	r3, [r2, #0]
 800bdb4:	e277      	b.n	800c2a6 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	00db      	lsls	r3, r3, #3
 800bdbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdc4:	685a      	ldr	r2, [r3, #4]
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	00db      	lsls	r3, r3, #3
 800bdcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdd4:	0c12      	lsrs	r2, r2, #16
 800bdd6:	0412      	lsls	r2, r2, #16
 800bdd8:	605a      	str	r2, [r3, #4]
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	00db      	lsls	r3, r3, #3
 800bde0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bde4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bde8:	6859      	ldr	r1, [r3, #4]
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	88db      	ldrh	r3, [r3, #6]
 800bdee:	089b      	lsrs	r3, r3, #2
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	009a      	lsls	r2, r3, #2
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	00db      	lsls	r3, r3, #3
 800bdfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdfe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be02:	430a      	orrs	r2, r1
 800be04:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	00db      	lsls	r3, r3, #3
 800be0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be24:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800be28:	605a      	str	r2, [r3, #4]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d112      	bne.n	800be58 <USB_ActivateEndpoint+0x254>
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be40:	685a      	ldr	r2, [r3, #4]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	00db      	lsls	r3, r3, #3
 800be48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be50:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800be54:	605a      	str	r2, [r3, #4]
 800be56:	e04d      	b.n	800bef4 <USB_ActivateEndpoint+0x2f0>
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	2b3e      	cmp	r3, #62	@ 0x3e
 800be5e:	d827      	bhi.n	800beb0 <USB_ActivateEndpoint+0x2ac>
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	085b      	lsrs	r3, r3, #1
 800be66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	f003 0301 	and.w	r3, r3, #1
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <USB_ActivateEndpoint+0x276>
 800be74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be76:	3301      	adds	r3, #1
 800be78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	00db      	lsls	r3, r3, #3
 800be80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be88:	6859      	ldr	r1, [r3, #4]
 800be8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be8c:	069a      	lsls	r2, r3, #26
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	00db      	lsls	r3, r3, #3
 800be94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be9c:	430a      	orrs	r2, r1
 800be9e:	605a      	str	r2, [r3, #4]
 800bea0:	e028      	b.n	800bef4 <USB_ActivateEndpoint+0x2f0>
 800bea2:	bf00      	nop
 800bea4:	07ff898f 	.word	0x07ff898f
 800bea8:	07ff8f8f 	.word	0x07ff8f8f
 800beac:	07ff8fbf 	.word	0x07ff8fbf
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	095b      	lsrs	r3, r3, #5
 800beb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	f003 031f 	and.w	r3, r3, #31
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d102      	bne.n	800beca <USB_ActivateEndpoint+0x2c6>
 800bec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bec6:	3b01      	subs	r3, #1
 800bec8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	00db      	lsls	r3, r3, #3
 800bed0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bed4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bed8:	685a      	ldr	r2, [r3, #4]
 800beda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bedc:	069b      	lsls	r3, r3, #26
 800bede:	431a      	orrs	r2, r3
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	00db      	lsls	r3, r3, #3
 800bee6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800beea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800beee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bef2:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	4413      	add	r3, r2
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d013      	beq.n	800bf34 <USB_ActivateEndpoint+0x330>
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4413      	add	r3, r2
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	4b9c      	ldr	r3, [pc, #624]	@ (800c18c <USB_ActivateEndpoint+0x588>)
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	441a      	add	r2, r3
 800bf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf32:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d11c      	bne.n	800bf76 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4413      	add	r3, r2
 800bf46:	681a      	ldr	r2, [r3, #0]
 800bf48:	4b91      	ldr	r3, [pc, #580]	@ (800c190 <USB_ActivateEndpoint+0x58c>)
 800bf4a:	4013      	ands	r3, r2
 800bf4c:	61fb      	str	r3, [r7, #28]
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bf54:	61fb      	str	r3, [r7, #28]
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bf5c:	61fb      	str	r3, [r7, #28]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	441a      	add	r2, r3
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	e197      	b.n	800c2a6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4413      	add	r3, r2
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	4b83      	ldr	r3, [pc, #524]	@ (800c190 <USB_ActivateEndpoint+0x58c>)
 800bf84:	4013      	ands	r3, r2
 800bf86:	623b      	str	r3, [r7, #32]
 800bf88:	6a3b      	ldr	r3, [r7, #32]
 800bf8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bf8e:	623b      	str	r3, [r7, #32]
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	441a      	add	r2, r3
 800bf9a:	6a3b      	ldr	r3, [r7, #32]
 800bf9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfa4:	6013      	str	r3, [r2, #0]
 800bfa6:	e17e      	b.n	800c2a6 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	78db      	ldrb	r3, [r3, #3]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d114      	bne.n	800bfda <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	4413      	add	r3, r2
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	4b73      	ldr	r3, [pc, #460]	@ (800c18c <USB_ActivateEndpoint+0x588>)
 800bfbe:	4013      	ands	r3, r2
 800bfc0:	663b      	str	r3, [r7, #96]	@ 0x60
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	441a      	add	r2, r3
 800bfcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800bfd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfd6:	6013      	str	r3, [r2, #0]
 800bfd8:	e013      	b.n	800c002 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	4413      	add	r3, r2
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	4b6b      	ldr	r3, [pc, #428]	@ (800c194 <USB_ActivateEndpoint+0x590>)
 800bfe8:	4013      	ands	r3, r2
 800bfea:	667b      	str	r3, [r7, #100]	@ 0x64
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	441a      	add	r2, r3
 800bff6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c000:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	00db      	lsls	r3, r3, #3
 800c008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c00c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	00db      	lsls	r3, r3, #3
 800c018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c01c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c020:	0c12      	lsrs	r2, r2, #16
 800c022:	0412      	lsls	r2, r2, #16
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	00db      	lsls	r3, r3, #3
 800c02c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c030:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c034:	6819      	ldr	r1, [r3, #0]
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	891b      	ldrh	r3, [r3, #8]
 800c03a:	089b      	lsrs	r3, r3, #2
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	009a      	lsls	r2, r3, #2
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c04a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c04e:	430a      	orrs	r2, r1
 800c050:	601a      	str	r2, [r3, #0]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	00db      	lsls	r3, r3, #3
 800c058:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c05c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c060:	685a      	ldr	r2, [r3, #4]
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	00db      	lsls	r3, r3, #3
 800c068:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c06c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c070:	0c12      	lsrs	r2, r2, #16
 800c072:	0412      	lsls	r2, r2, #16
 800c074:	605a      	str	r2, [r3, #4]
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	00db      	lsls	r3, r3, #3
 800c07c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c080:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c084:	6859      	ldr	r1, [r3, #4]
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	895b      	ldrh	r3, [r3, #10]
 800c08a:	089b      	lsrs	r3, r3, #2
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	009a      	lsls	r2, r3, #2
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	00db      	lsls	r3, r3, #3
 800c096:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c09a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c09e:	430a      	orrs	r2, r1
 800c0a0:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	785b      	ldrb	r3, [r3, #1]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d178      	bne.n	800c19c <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d013      	beq.n	800c0ea <USB_ActivateEndpoint+0x4e6>
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	4b2f      	ldr	r3, [pc, #188]	@ (800c18c <USB_ActivateEndpoint+0x588>)
 800c0d0:	4013      	ands	r3, r2
 800c0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	441a      	add	r2, r3
 800c0de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c0e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0e8:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	4413      	add	r3, r2
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d013      	beq.n	800c12a <USB_ActivateEndpoint+0x526>
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	4413      	add	r3, r2
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	4b1f      	ldr	r3, [pc, #124]	@ (800c18c <USB_ActivateEndpoint+0x588>)
 800c110:	4013      	ands	r3, r2
 800c112:	637b      	str	r3, [r7, #52]	@ 0x34
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	441a      	add	r2, r3
 800c11e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c124:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c128:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	4413      	add	r3, r2
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	4b16      	ldr	r3, [pc, #88]	@ (800c190 <USB_ActivateEndpoint+0x58c>)
 800c138:	4013      	ands	r3, r2
 800c13a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c13e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c142:	633b      	str	r3, [r7, #48]	@ 0x30
 800c144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c146:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c14a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	441a      	add	r2, r3
 800c156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c158:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c15c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c160:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4413      	add	r3, r2
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	4b0a      	ldr	r3, [pc, #40]	@ (800c198 <USB_ActivateEndpoint+0x594>)
 800c170:	4013      	ands	r3, r2
 800c172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	441a      	add	r2, r3
 800c17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c180:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c188:	6013      	str	r3, [r2, #0]
 800c18a:	e08c      	b.n	800c2a6 <USB_ActivateEndpoint+0x6a2>
 800c18c:	07ff8f8f 	.word	0x07ff8f8f
 800c190:	07ffbf8f 	.word	0x07ffbf8f
 800c194:	07ff8e8f 	.word	0x07ff8e8f
 800c198:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d013      	beq.n	800c1dc <USB_ActivateEndpoint+0x5d8>
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	4413      	add	r3, r2
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	4b3d      	ldr	r3, [pc, #244]	@ (800c2b8 <USB_ActivateEndpoint+0x6b4>)
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	441a      	add	r2, r3
 800c1d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1da:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d013      	beq.n	800c21c <USB_ActivateEndpoint+0x618>
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	4b2d      	ldr	r3, [pc, #180]	@ (800c2b8 <USB_ActivateEndpoint+0x6b4>)
 800c202:	4013      	ands	r3, r2
 800c204:	653b      	str	r3, [r7, #80]	@ 0x50
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	441a      	add	r2, r3
 800c210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c216:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c21a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	78db      	ldrb	r3, [r3, #3]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d018      	beq.n	800c256 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	4b22      	ldr	r3, [pc, #136]	@ (800c2bc <USB_ActivateEndpoint+0x6b8>)
 800c232:	4013      	ands	r3, r2
 800c234:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c238:	f083 0320 	eor.w	r3, r3, #32
 800c23c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	441a      	add	r2, r3
 800c248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c24a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c252:	6013      	str	r3, [r2, #0]
 800c254:	e013      	b.n	800c27e <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	4b16      	ldr	r3, [pc, #88]	@ (800c2bc <USB_ActivateEndpoint+0x6b8>)
 800c264:	4013      	ands	r3, r2
 800c266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	441a      	add	r2, r3
 800c272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c274:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c278:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c27c:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4413      	add	r3, r2
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c0 <USB_ActivateEndpoint+0x6bc>)
 800c28c:	4013      	ands	r3, r2
 800c28e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	441a      	add	r2, r3
 800c29a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c29c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2a4:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c2a6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	377c      	adds	r7, #124	@ 0x7c
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	07ff8f8f 	.word	0x07ff8f8f
 800c2bc:	07ff8fbf 	.word	0x07ff8fbf
 800c2c0:	07ffbf8f 	.word	0x07ffbf8f

0800c2c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b097      	sub	sp, #92	@ 0x5c
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	7b1b      	ldrb	r3, [r3, #12]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d16d      	bne.n	800c3b2 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	785b      	ldrb	r3, [r3, #1]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d034      	beq.n	800c348 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	4413      	add	r3, r2
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	613b      	str	r3, [r7, #16]
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d013      	beq.n	800c31e <USB_DeactivateEndpoint+0x5a>
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	4413      	add	r3, r2
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	4b6d      	ldr	r3, [pc, #436]	@ (800c4b8 <USB_DeactivateEndpoint+0x1f4>)
 800c304:	4013      	ands	r3, r2
 800c306:	60fb      	str	r3, [r7, #12]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	441a      	add	r2, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c318:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c31c:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	4b64      	ldr	r3, [pc, #400]	@ (800c4bc <USB_DeactivateEndpoint+0x1f8>)
 800c32c:	4013      	ands	r3, r2
 800c32e:	60bb      	str	r3, [r7, #8]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	441a      	add	r2, r3
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c344:	6013      	str	r3, [r2, #0]
 800c346:	e139      	b.n	800c5bc <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4413      	add	r3, r2
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	61fb      	str	r3, [r7, #28]
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d013      	beq.n	800c388 <USB_DeactivateEndpoint+0xc4>
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	4b52      	ldr	r3, [pc, #328]	@ (800c4b8 <USB_DeactivateEndpoint+0x1f4>)
 800c36e:	4013      	ands	r3, r2
 800c370:	61bb      	str	r3, [r7, #24]
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	441a      	add	r2, r3
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c386:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	4413      	add	r3, r2
 800c392:	681a      	ldr	r2, [r3, #0]
 800c394:	4b4a      	ldr	r3, [pc, #296]	@ (800c4c0 <USB_DeactivateEndpoint+0x1fc>)
 800c396:	4013      	ands	r3, r2
 800c398:	617b      	str	r3, [r7, #20]
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	441a      	add	r2, r3
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3ae:	6013      	str	r3, [r2, #0]
 800c3b0:	e104      	b.n	800c5bc <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	785b      	ldrb	r3, [r3, #1]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f040 8084 	bne.w	800c4c4 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	4413      	add	r3, r2
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d013      	beq.n	800c3fc <USB_DeactivateEndpoint+0x138>
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	4413      	add	r3, r2
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	4b35      	ldr	r3, [pc, #212]	@ (800c4b8 <USB_DeactivateEndpoint+0x1f4>)
 800c3e2:	4013      	ands	r3, r2
 800c3e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	441a      	add	r2, r3
 800c3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c3f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3fa:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	633b      	str	r3, [r7, #48]	@ 0x30
 800c40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c40c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c410:	2b00      	cmp	r3, #0
 800c412:	d013      	beq.n	800c43c <USB_DeactivateEndpoint+0x178>
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	4b25      	ldr	r3, [pc, #148]	@ (800c4b8 <USB_DeactivateEndpoint+0x1f4>)
 800c422:	4013      	ands	r3, r2
 800c424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	441a      	add	r2, r3
 800c430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c436:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c43a:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	4413      	add	r3, r2
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	4b1b      	ldr	r3, [pc, #108]	@ (800c4b8 <USB_DeactivateEndpoint+0x1f4>)
 800c44a:	4013      	ands	r3, r2
 800c44c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	441a      	add	r2, r3
 800c458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c45e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c462:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	4413      	add	r3, r2
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	4b13      	ldr	r3, [pc, #76]	@ (800c4c0 <USB_DeactivateEndpoint+0x1fc>)
 800c472:	4013      	ands	r3, r2
 800c474:	627b      	str	r3, [r7, #36]	@ 0x24
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	441a      	add	r2, r3
 800c480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c48a:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	4413      	add	r3, r2
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	4b08      	ldr	r3, [pc, #32]	@ (800c4bc <USB_DeactivateEndpoint+0x1f8>)
 800c49a:	4013      	ands	r3, r2
 800c49c:	623b      	str	r3, [r7, #32]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	441a      	add	r2, r3
 800c4a8:	6a3b      	ldr	r3, [r7, #32]
 800c4aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4b2:	6013      	str	r3, [r2, #0]
 800c4b4:	e082      	b.n	800c5bc <USB_DeactivateEndpoint+0x2f8>
 800c4b6:	bf00      	nop
 800c4b8:	07ff8f8f 	.word	0x07ff8f8f
 800c4bc:	07ff8fbf 	.word	0x07ff8fbf
 800c4c0:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	4413      	add	r3, r2
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c4d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d013      	beq.n	800c504 <USB_DeactivateEndpoint+0x240>
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4413      	add	r3, r2
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	4b38      	ldr	r3, [pc, #224]	@ (800c5cc <USB_DeactivateEndpoint+0x308>)
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	441a      	add	r2, r3
 800c4f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c4fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c502:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d013      	beq.n	800c544 <USB_DeactivateEndpoint+0x280>
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	4413      	add	r3, r2
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	4b28      	ldr	r3, [pc, #160]	@ (800c5cc <USB_DeactivateEndpoint+0x308>)
 800c52a:	4013      	ands	r3, r2
 800c52c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	441a      	add	r2, r3
 800c538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c53a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c53e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c542:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	4413      	add	r3, r2
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	4b1e      	ldr	r3, [pc, #120]	@ (800c5cc <USB_DeactivateEndpoint+0x308>)
 800c552:	4013      	ands	r3, r2
 800c554:	647b      	str	r3, [r7, #68]	@ 0x44
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	441a      	add	r2, r3
 800c560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c562:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c56a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	4413      	add	r3, r2
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	4b15      	ldr	r3, [pc, #84]	@ (800c5d0 <USB_DeactivateEndpoint+0x30c>)
 800c57a:	4013      	ands	r3, r2
 800c57c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	441a      	add	r2, r3
 800c588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c58a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c58e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c592:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	4413      	add	r3, r2
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d4 <USB_DeactivateEndpoint+0x310>)
 800c5a2:	4013      	ands	r3, r2
 800c5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	441a      	add	r2, r3
 800c5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5ba:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	375c      	adds	r7, #92	@ 0x5c
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	07ff8f8f 	.word	0x07ff8f8f
 800c5d0:	07ff8fbf 	.word	0x07ff8fbf
 800c5d4:	07ffbf8f 	.word	0x07ffbf8f

0800c5d8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b096      	sub	sp, #88	@ 0x58
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	785b      	ldrb	r3, [r3, #1]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	f040 84ed 	bne.w	800cfc6 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	699a      	ldr	r2, [r3, #24]
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	691b      	ldr	r3, [r3, #16]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d903      	bls.n	800c600 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	691b      	ldr	r3, [r3, #16]
 800c5fc:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5fe:	e002      	b.n	800c606 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	699b      	ldr	r3, [r3, #24]
 800c604:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	7b1b      	ldrb	r3, [r3, #12]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d12e      	bne.n	800c66c <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	6959      	ldr	r1, [r3, #20]
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	88da      	ldrh	r2, [r3, #6]
 800c616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c618:	b29b      	uxth	r3, r3
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f001 f963 	bl	800d8e6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c62a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	00db      	lsls	r3, r3, #3
 800c636:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c63a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c63e:	b292      	uxth	r2, r2
 800c640:	601a      	str	r2, [r3, #0]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	00db      	lsls	r3, r3, #3
 800c648:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c64c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c650:	6819      	ldr	r1, [r3, #0]
 800c652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c654:	041a      	lsls	r2, r3, #16
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	00db      	lsls	r3, r3, #3
 800c65c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c660:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c664:	430a      	orrs	r2, r1
 800c666:	601a      	str	r2, [r3, #0]
 800c668:	f000 bc90 	b.w	800cf8c <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	78db      	ldrb	r3, [r3, #3]
 800c670:	2b02      	cmp	r3, #2
 800c672:	f040 8332 	bne.w	800ccda <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	6a1a      	ldr	r2, [r3, #32]
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	691b      	ldr	r3, [r3, #16]
 800c67e:	429a      	cmp	r2, r3
 800c680:	f240 82e4 	bls.w	800cc4c <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4413      	add	r3, r2
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	4ba4      	ldr	r3, [pc, #656]	@ (800c924 <USB_EPStartXfer+0x34c>)
 800c692:	4013      	ands	r3, r2
 800c694:	613b      	str	r3, [r7, #16]
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	441a      	add	r2, r3
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c6a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6aa:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	6a1a      	ldr	r2, [r3, #32]
 800c6b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6b2:	1ad2      	subs	r2, r2, r3
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	4413      	add	r3, r2
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 8161 	beq.w	800c990 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	785b      	ldrb	r3, [r3, #1]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d16a      	bne.n	800c7ac <USB_EPStartXfer+0x1d4>
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	00db      	lsls	r3, r3, #3
 800c6dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	00db      	lsls	r3, r3, #3
 800c6ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6f4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c6f8:	605a      	str	r2, [r3, #4]
 800c6fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d112      	bne.n	800c726 <USB_EPStartXfer+0x14e>
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	00db      	lsls	r3, r3, #3
 800c706:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c70a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c70e:	685a      	ldr	r2, [r3, #4]
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	00db      	lsls	r3, r3, #3
 800c716:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c71a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c71e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c722:	605a      	str	r2, [r3, #4]
 800c724:	e06a      	b.n	800c7fc <USB_EPStartXfer+0x224>
 800c726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c728:	2b3e      	cmp	r3, #62	@ 0x3e
 800c72a:	d81e      	bhi.n	800c76a <USB_EPStartXfer+0x192>
 800c72c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c72e:	085b      	lsrs	r3, r3, #1
 800c730:	653b      	str	r3, [r7, #80]	@ 0x50
 800c732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c734:	f003 0301 	and.w	r3, r3, #1
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d002      	beq.n	800c742 <USB_EPStartXfer+0x16a>
 800c73c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c73e:	3301      	adds	r3, #1
 800c740:	653b      	str	r3, [r7, #80]	@ 0x50
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c74c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c750:	6859      	ldr	r1, [r3, #4]
 800c752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c754:	069a      	lsls	r2, r3, #26
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	00db      	lsls	r3, r3, #3
 800c75c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c760:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c764:	430a      	orrs	r2, r1
 800c766:	605a      	str	r2, [r3, #4]
 800c768:	e048      	b.n	800c7fc <USB_EPStartXfer+0x224>
 800c76a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c76c:	095b      	lsrs	r3, r3, #5
 800c76e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c772:	f003 031f 	and.w	r3, r3, #31
 800c776:	2b00      	cmp	r3, #0
 800c778:	d102      	bne.n	800c780 <USB_EPStartXfer+0x1a8>
 800c77a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c77c:	3b01      	subs	r3, #1
 800c77e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c78a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c78e:	685a      	ldr	r2, [r3, #4]
 800c790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c792:	069b      	lsls	r3, r3, #26
 800c794:	431a      	orrs	r2, r3
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	00db      	lsls	r3, r3, #3
 800c79c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7a4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c7a8:	605a      	str	r2, [r3, #4]
 800c7aa:	e027      	b.n	800c7fc <USB_EPStartXfer+0x224>
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	785b      	ldrb	r3, [r3, #1]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d123      	bne.n	800c7fc <USB_EPStartXfer+0x224>
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	00db      	lsls	r3, r3, #3
 800c7ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	00db      	lsls	r3, r3, #3
 800c7ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7d2:	b292      	uxth	r2, r2
 800c7d4:	605a      	str	r2, [r3, #4]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	00db      	lsls	r3, r3, #3
 800c7dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7e4:	6859      	ldr	r1, [r3, #4]
 800c7e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7e8:	041a      	lsls	r2, r3, #16
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	00db      	lsls	r3, r3, #3
 800c7f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7f8:	430a      	orrs	r2, r1
 800c7fa:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	895b      	ldrh	r3, [r3, #10]
 800c800:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	6959      	ldr	r1, [r3, #20]
 800c806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c808:	b29b      	uxth	r3, r3
 800c80a:	8b7a      	ldrh	r2, [r7, #26]
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f001 f86a 	bl	800d8e6 <USB_WritePMA>
            ep->xfer_buff += len;
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	695a      	ldr	r2, [r3, #20]
 800c816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c818:	441a      	add	r2, r3
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	6a1a      	ldr	r2, [r3, #32]
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	429a      	cmp	r2, r3
 800c828:	d906      	bls.n	800c838 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	6a1a      	ldr	r2, [r3, #32]
 800c82e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c830:	1ad2      	subs	r2, r2, r3
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	621a      	str	r2, [r3, #32]
 800c836:	e005      	b.n	800c844 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	6a1b      	ldr	r3, [r3, #32]
 800c83c:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	2200      	movs	r2, #0
 800c842:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	785b      	ldrb	r3, [r3, #1]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d16d      	bne.n	800c928 <USB_EPStartXfer+0x350>
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c856:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	00db      	lsls	r3, r3, #3
 800c862:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c866:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c86a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c872:	2b00      	cmp	r3, #0
 800c874:	d112      	bne.n	800c89c <USB_EPStartXfer+0x2c4>
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	00db      	lsls	r3, r3, #3
 800c87c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c880:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	00db      	lsls	r3, r3, #3
 800c88c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c890:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c894:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c898:	601a      	str	r2, [r3, #0]
 800c89a:	e06d      	b.n	800c978 <USB_EPStartXfer+0x3a0>
 800c89c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c89e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c8a0:	d81e      	bhi.n	800c8e0 <USB_EPStartXfer+0x308>
 800c8a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8a4:	085b      	lsrs	r3, r3, #1
 800c8a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d002      	beq.n	800c8b8 <USB_EPStartXfer+0x2e0>
 800c8b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	00db      	lsls	r3, r3, #3
 800c8be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8c6:	6819      	ldr	r1, [r3, #0]
 800c8c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8ca:	069a      	lsls	r2, r3, #26
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	00db      	lsls	r3, r3, #3
 800c8d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8da:	430a      	orrs	r2, r1
 800c8dc:	601a      	str	r2, [r3, #0]
 800c8de:	e04b      	b.n	800c978 <USB_EPStartXfer+0x3a0>
 800c8e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8e2:	095b      	lsrs	r3, r3, #5
 800c8e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8e8:	f003 031f 	and.w	r3, r3, #31
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d102      	bne.n	800c8f6 <USB_EPStartXfer+0x31e>
 800c8f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	781b      	ldrb	r3, [r3, #0]
 800c8fa:	00db      	lsls	r3, r3, #3
 800c8fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c900:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c908:	069b      	lsls	r3, r3, #26
 800c90a:	431a      	orrs	r2, r3
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c916:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c91a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c91e:	601a      	str	r2, [r3, #0]
 800c920:	e02a      	b.n	800c978 <USB_EPStartXfer+0x3a0>
 800c922:	bf00      	nop
 800c924:	07ff8f8f 	.word	0x07ff8f8f
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	785b      	ldrb	r3, [r3, #1]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d123      	bne.n	800c978 <USB_EPStartXfer+0x3a0>
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c93a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	00db      	lsls	r3, r3, #3
 800c946:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c94a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c94e:	b292      	uxth	r2, r2
 800c950:	601a      	str	r2, [r3, #0]
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	00db      	lsls	r3, r3, #3
 800c958:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c95c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c960:	6819      	ldr	r1, [r3, #0]
 800c962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c964:	041a      	lsls	r2, r3, #16
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c970:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c974:	430a      	orrs	r2, r1
 800c976:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	891b      	ldrh	r3, [r3, #8]
 800c97c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	6959      	ldr	r1, [r3, #20]
 800c982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c984:	b29b      	uxth	r3, r3
 800c986:	8b7a      	ldrh	r2, [r7, #26]
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 ffac 	bl	800d8e6 <USB_WritePMA>
 800c98e:	e2fd      	b.n	800cf8c <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	785b      	ldrb	r3, [r3, #1]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d16a      	bne.n	800ca6e <USB_EPStartXfer+0x496>
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	00db      	lsls	r3, r3, #3
 800c99e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	00db      	lsls	r3, r3, #3
 800c9ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9b6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c9ba:	601a      	str	r2, [r3, #0]
 800c9bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d112      	bne.n	800c9e8 <USB_EPStartXfer+0x410>
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	00db      	lsls	r3, r3, #3
 800c9c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	00db      	lsls	r3, r3, #3
 800c9d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9e0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	e06a      	b.n	800cabe <USB_EPStartXfer+0x4e6>
 800c9e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800c9ec:	d81e      	bhi.n	800ca2c <USB_EPStartXfer+0x454>
 800c9ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9f0:	085b      	lsrs	r3, r3, #1
 800c9f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9f6:	f003 0301 	and.w	r3, r3, #1
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d002      	beq.n	800ca04 <USB_EPStartXfer+0x42c>
 800c9fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca00:	3301      	adds	r3, #1
 800ca02:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	00db      	lsls	r3, r3, #3
 800ca0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca12:	6819      	ldr	r1, [r3, #0]
 800ca14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca16:	069a      	lsls	r2, r3, #26
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca26:	430a      	orrs	r2, r1
 800ca28:	601a      	str	r2, [r3, #0]
 800ca2a:	e048      	b.n	800cabe <USB_EPStartXfer+0x4e6>
 800ca2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca2e:	095b      	lsrs	r3, r3, #5
 800ca30:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca34:	f003 031f 	and.w	r3, r3, #31
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <USB_EPStartXfer+0x46a>
 800ca3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	00db      	lsls	r3, r3, #3
 800ca48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca54:	069b      	lsls	r3, r3, #26
 800ca56:	431a      	orrs	r2, r3
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	00db      	lsls	r3, r3, #3
 800ca5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca66:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ca6a:	601a      	str	r2, [r3, #0]
 800ca6c:	e027      	b.n	800cabe <USB_EPStartXfer+0x4e6>
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	785b      	ldrb	r3, [r3, #1]
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d123      	bne.n	800cabe <USB_EPStartXfer+0x4e6>
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	00db      	lsls	r3, r3, #3
 800ca7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	00db      	lsls	r3, r3, #3
 800ca8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca94:	b292      	uxth	r2, r2
 800ca96:	601a      	str	r2, [r3, #0]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	00db      	lsls	r3, r3, #3
 800ca9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caa2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caa6:	6819      	ldr	r1, [r3, #0]
 800caa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caaa:	041a      	lsls	r2, r3, #16
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cab6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caba:	430a      	orrs	r2, r1
 800cabc:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	891b      	ldrh	r3, [r3, #8]
 800cac2:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	6959      	ldr	r1, [r3, #20]
 800cac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caca:	b29b      	uxth	r3, r3
 800cacc:	8b7a      	ldrh	r2, [r7, #26]
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 ff09 	bl	800d8e6 <USB_WritePMA>
            ep->xfer_buff += len;
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	695a      	ldr	r2, [r3, #20]
 800cad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cada:	441a      	add	r2, r3
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	6a1a      	ldr	r2, [r3, #32]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	691b      	ldr	r3, [r3, #16]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d906      	bls.n	800cafa <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	6a1a      	ldr	r2, [r3, #32]
 800caf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caf2:	1ad2      	subs	r2, r2, r3
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	621a      	str	r2, [r3, #32]
 800caf8:	e005      	b.n	800cb06 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	6a1b      	ldr	r3, [r3, #32]
 800cafe:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	2200      	movs	r2, #0
 800cb04:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	785b      	ldrb	r3, [r3, #1]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d16a      	bne.n	800cbe4 <USB_EPStartXfer+0x60c>
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	00db      	lsls	r3, r3, #3
 800cb14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb1c:	685a      	ldr	r2, [r3, #4]
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	00db      	lsls	r3, r3, #3
 800cb24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb2c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cb30:	605a      	str	r2, [r3, #4]
 800cb32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d112      	bne.n	800cb5e <USB_EPStartXfer+0x586>
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	00db      	lsls	r3, r3, #3
 800cb3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb46:	685a      	ldr	r2, [r3, #4]
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	00db      	lsls	r3, r3, #3
 800cb4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb56:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cb5a:	605a      	str	r2, [r3, #4]
 800cb5c:	e06a      	b.n	800cc34 <USB_EPStartXfer+0x65c>
 800cb5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb60:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb62:	d81e      	bhi.n	800cba2 <USB_EPStartXfer+0x5ca>
 800cb64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb66:	085b      	lsrs	r3, r3, #1
 800cb68:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb6c:	f003 0301 	and.w	r3, r3, #1
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d002      	beq.n	800cb7a <USB_EPStartXfer+0x5a2>
 800cb74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb76:	3301      	adds	r3, #1
 800cb78:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	00db      	lsls	r3, r3, #3
 800cb80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb88:	6859      	ldr	r1, [r3, #4]
 800cb8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb8c:	069a      	lsls	r2, r3, #26
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	00db      	lsls	r3, r3, #3
 800cb94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb9c:	430a      	orrs	r2, r1
 800cb9e:	605a      	str	r2, [r3, #4]
 800cba0:	e048      	b.n	800cc34 <USB_EPStartXfer+0x65c>
 800cba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cba4:	095b      	lsrs	r3, r3, #5
 800cba6:	647b      	str	r3, [r7, #68]	@ 0x44
 800cba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbaa:	f003 031f 	and.w	r3, r3, #31
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d102      	bne.n	800cbb8 <USB_EPStartXfer+0x5e0>
 800cbb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbb4:	3b01      	subs	r3, #1
 800cbb6:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbc6:	685a      	ldr	r2, [r3, #4]
 800cbc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbca:	069b      	lsls	r3, r3, #26
 800cbcc:	431a      	orrs	r2, r3
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	00db      	lsls	r3, r3, #3
 800cbd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbdc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cbe0:	605a      	str	r2, [r3, #4]
 800cbe2:	e027      	b.n	800cc34 <USB_EPStartXfer+0x65c>
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	785b      	ldrb	r3, [r3, #1]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d123      	bne.n	800cc34 <USB_EPStartXfer+0x65c>
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	00db      	lsls	r3, r3, #3
 800cbf2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbf6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	00db      	lsls	r3, r3, #3
 800cc02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc0a:	b292      	uxth	r2, r2
 800cc0c:	605a      	str	r2, [r3, #4]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	00db      	lsls	r3, r3, #3
 800cc14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc1c:	6859      	ldr	r1, [r3, #4]
 800cc1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc20:	041a      	lsls	r2, r3, #16
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	00db      	lsls	r3, r3, #3
 800cc28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc30:	430a      	orrs	r2, r1
 800cc32:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	895b      	ldrh	r3, [r3, #10]
 800cc38:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	6959      	ldr	r1, [r3, #20]
 800cc3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc40:	b29b      	uxth	r3, r3
 800cc42:	8b7a      	ldrh	r2, [r7, #26]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fe4e 	bl	800d8e6 <USB_WritePMA>
 800cc4a:	e19f      	b.n	800cf8c <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	6a1b      	ldr	r3, [r3, #32]
 800cc50:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	4413      	add	r3, r2
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	4ba0      	ldr	r3, [pc, #640]	@ (800cee0 <USB_EPStartXfer+0x908>)
 800cc60:	4013      	ands	r3, r2
 800cc62:	617b      	str	r3, [r7, #20]
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	441a      	add	r2, r3
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc78:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc98:	b292      	uxth	r2, r2
 800cc9a:	601a      	str	r2, [r3, #0]
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	00db      	lsls	r3, r3, #3
 800cca2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cca6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccaa:	6819      	ldr	r1, [r3, #0]
 800ccac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccae:	041a      	lsls	r2, r3, #16
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	00db      	lsls	r3, r3, #3
 800ccb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccbe:	430a      	orrs	r2, r1
 800ccc0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	891b      	ldrh	r3, [r3, #8]
 800ccc6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	6959      	ldr	r1, [r3, #20]
 800cccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	8b7a      	ldrh	r2, [r7, #26]
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 fe07 	bl	800d8e6 <USB_WritePMA>
 800ccd8:	e158      	b.n	800cf8c <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	6a1a      	ldr	r2, [r3, #32]
 800ccde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cce0:	1ad2      	subs	r2, r2, r3
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4413      	add	r3, r2
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f000 80a3 	beq.w	800ce42 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	785b      	ldrb	r3, [r3, #1]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d16a      	bne.n	800cdda <USB_EPStartXfer+0x802>
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	00db      	lsls	r3, r3, #3
 800cd0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd12:	685a      	ldr	r2, [r3, #4]
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	00db      	lsls	r3, r3, #3
 800cd1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd22:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cd26:	605a      	str	r2, [r3, #4]
 800cd28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d112      	bne.n	800cd54 <USB_EPStartXfer+0x77c>
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	00db      	lsls	r3, r3, #3
 800cd34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	00db      	lsls	r3, r3, #3
 800cd44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd4c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd50:	605a      	str	r2, [r3, #4]
 800cd52:	e06a      	b.n	800ce2a <USB_EPStartXfer+0x852>
 800cd54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd56:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd58:	d81e      	bhi.n	800cd98 <USB_EPStartXfer+0x7c0>
 800cd5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd5c:	085b      	lsrs	r3, r3, #1
 800cd5e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd62:	f003 0301 	and.w	r3, r3, #1
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d002      	beq.n	800cd70 <USB_EPStartXfer+0x798>
 800cd6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd7e:	6859      	ldr	r1, [r3, #4]
 800cd80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd82:	069a      	lsls	r2, r3, #26
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	00db      	lsls	r3, r3, #3
 800cd8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd92:	430a      	orrs	r2, r1
 800cd94:	605a      	str	r2, [r3, #4]
 800cd96:	e048      	b.n	800ce2a <USB_EPStartXfer+0x852>
 800cd98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd9a:	095b      	lsrs	r3, r3, #5
 800cd9c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cda0:	f003 031f 	and.w	r3, r3, #31
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d102      	bne.n	800cdae <USB_EPStartXfer+0x7d6>
 800cda8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdbc:	685a      	ldr	r2, [r3, #4]
 800cdbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdc0:	069b      	lsls	r3, r3, #26
 800cdc2:	431a      	orrs	r2, r3
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	00db      	lsls	r3, r3, #3
 800cdca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdd2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cdd6:	605a      	str	r2, [r3, #4]
 800cdd8:	e027      	b.n	800ce2a <USB_EPStartXfer+0x852>
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	785b      	ldrb	r3, [r3, #1]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d123      	bne.n	800ce2a <USB_EPStartXfer+0x852>
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdf0:	685a      	ldr	r2, [r3, #4]
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	00db      	lsls	r3, r3, #3
 800cdf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce00:	b292      	uxth	r2, r2
 800ce02:	605a      	str	r2, [r3, #4]
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	00db      	lsls	r3, r3, #3
 800ce0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce12:	6859      	ldr	r1, [r3, #4]
 800ce14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce16:	041a      	lsls	r2, r3, #16
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	00db      	lsls	r3, r3, #3
 800ce1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce26:	430a      	orrs	r2, r1
 800ce28:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	895b      	ldrh	r3, [r3, #10]
 800ce2e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	6959      	ldr	r1, [r3, #20]
 800ce34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	8b7a      	ldrh	r2, [r7, #26]
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 fd53 	bl	800d8e6 <USB_WritePMA>
 800ce40:	e0a4      	b.n	800cf8c <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	785b      	ldrb	r3, [r3, #1]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d16d      	bne.n	800cf26 <USB_EPStartXfer+0x94e>
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	00db      	lsls	r3, r3, #3
 800ce50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	00db      	lsls	r3, r3, #3
 800ce60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce68:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ce6c:	601a      	str	r2, [r3, #0]
 800ce6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d112      	bne.n	800ce9a <USB_EPStartXfer+0x8c2>
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	00db      	lsls	r3, r3, #3
 800ce7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	00db      	lsls	r3, r3, #3
 800ce8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce92:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce96:	601a      	str	r2, [r3, #0]
 800ce98:	e06d      	b.n	800cf76 <USB_EPStartXfer+0x99e>
 800ce9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce9c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce9e:	d821      	bhi.n	800cee4 <USB_EPStartXfer+0x90c>
 800cea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cea2:	085b      	lsrs	r3, r3, #1
 800cea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cea8:	f003 0301 	and.w	r3, r3, #1
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d002      	beq.n	800ceb6 <USB_EPStartXfer+0x8de>
 800ceb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	00db      	lsls	r3, r3, #3
 800cebc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cec0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cec4:	6819      	ldr	r1, [r3, #0]
 800cec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cec8:	069a      	lsls	r2, r3, #26
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	00db      	lsls	r3, r3, #3
 800ced0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ced4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ced8:	430a      	orrs	r2, r1
 800ceda:	601a      	str	r2, [r3, #0]
 800cedc:	e04b      	b.n	800cf76 <USB_EPStartXfer+0x99e>
 800cede:	bf00      	nop
 800cee0:	07ff8e8f 	.word	0x07ff8e8f
 800cee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cee6:	095b      	lsrs	r3, r3, #5
 800cee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ceea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ceec:	f003 031f 	and.w	r3, r3, #31
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d102      	bne.n	800cefa <USB_EPStartXfer+0x922>
 800cef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cef6:	3b01      	subs	r3, #1
 800cef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	00db      	lsls	r3, r3, #3
 800cf00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf0c:	069b      	lsls	r3, r3, #26
 800cf0e:	431a      	orrs	r2, r3
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	00db      	lsls	r3, r3, #3
 800cf16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf1e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	e027      	b.n	800cf76 <USB_EPStartXfer+0x99e>
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	785b      	ldrb	r3, [r3, #1]
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d123      	bne.n	800cf76 <USB_EPStartXfer+0x99e>
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	00db      	lsls	r3, r3, #3
 800cf34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	00db      	lsls	r3, r3, #3
 800cf44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf4c:	b292      	uxth	r2, r2
 800cf4e:	601a      	str	r2, [r3, #0]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	00db      	lsls	r3, r3, #3
 800cf56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf5e:	6819      	ldr	r1, [r3, #0]
 800cf60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf62:	041a      	lsls	r2, r3, #16
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	00db      	lsls	r3, r3, #3
 800cf6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf72:	430a      	orrs	r2, r1
 800cf74:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	891b      	ldrh	r3, [r3, #8]
 800cf7a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	6959      	ldr	r1, [r3, #20]
 800cf80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	8b7a      	ldrh	r2, [r7, #26]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fcad 	bl	800d8e6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cf8c:	687a      	ldr	r2, [r7, #4]
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	4413      	add	r3, r2
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	4b8b      	ldr	r3, [pc, #556]	@ (800d1c8 <USB_EPStartXfer+0xbf0>)
 800cf9a:	4013      	ands	r3, r2
 800cf9c:	60fb      	str	r3, [r7, #12]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f083 0310 	eor.w	r3, r3, #16
 800cfa4:	60fb      	str	r3, [r7, #12]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f083 0320 	eor.w	r3, r3, #32
 800cfac:	60fb      	str	r3, [r7, #12]
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	441a      	add	r2, r3
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfc2:	6013      	str	r3, [r2, #0]
 800cfc4:	e36b      	b.n	800d69e <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	7b1b      	ldrb	r3, [r3, #12]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f040 8081 	bne.w	800d0d2 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	699a      	ldr	r2, [r3, #24]
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d909      	bls.n	800cff0 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	691b      	ldr	r3, [r3, #16]
 800cfe0:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	699a      	ldr	r2, [r3, #24]
 800cfe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfe8:	1ad2      	subs	r2, r2, r3
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	619a      	str	r2, [r3, #24]
 800cfee:	e005      	b.n	800cffc <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	699b      	ldr	r3, [r3, #24]
 800cff4:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	2200      	movs	r2, #0
 800cffa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	00db      	lsls	r3, r3, #3
 800d002:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d006:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d00a:	685a      	ldr	r2, [r3, #4]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	00db      	lsls	r3, r3, #3
 800d012:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d016:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d01a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d01e:	605a      	str	r2, [r3, #4]
 800d020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d022:	2b00      	cmp	r3, #0
 800d024:	d112      	bne.n	800d04c <USB_EPStartXfer+0xa74>
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d030:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d034:	685a      	ldr	r2, [r3, #4]
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	00db      	lsls	r3, r3, #3
 800d03c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d040:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d044:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d048:	605a      	str	r2, [r3, #4]
 800d04a:	e30c      	b.n	800d666 <USB_EPStartXfer+0x108e>
 800d04c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d04e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d050:	d81e      	bhi.n	800d090 <USB_EPStartXfer+0xab8>
 800d052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d054:	085b      	lsrs	r3, r3, #1
 800d056:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d05a:	f003 0301 	and.w	r3, r3, #1
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d002      	beq.n	800d068 <USB_EPStartXfer+0xa90>
 800d062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d064:	3301      	adds	r3, #1
 800d066:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	00db      	lsls	r3, r3, #3
 800d06e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d072:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d076:	6859      	ldr	r1, [r3, #4]
 800d078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07a:	069a      	lsls	r2, r3, #26
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	00db      	lsls	r3, r3, #3
 800d082:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d086:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d08a:	430a      	orrs	r2, r1
 800d08c:	605a      	str	r2, [r3, #4]
 800d08e:	e2ea      	b.n	800d666 <USB_EPStartXfer+0x108e>
 800d090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d092:	095b      	lsrs	r3, r3, #5
 800d094:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d098:	f003 031f 	and.w	r3, r3, #31
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d102      	bne.n	800d0a6 <USB_EPStartXfer+0xace>
 800d0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	00db      	lsls	r3, r3, #3
 800d0ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b8:	069b      	lsls	r3, r3, #26
 800d0ba:	431a      	orrs	r2, r3
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	00db      	lsls	r3, r3, #3
 800d0c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d0ce:	605a      	str	r2, [r3, #4]
 800d0d0:	e2c9      	b.n	800d666 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	78db      	ldrb	r3, [r3, #3]
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	f040 8176 	bne.w	800d3c8 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	785b      	ldrb	r3, [r3, #1]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d173      	bne.n	800d1cc <USB_EPStartXfer+0xbf4>
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	00db      	lsls	r3, r3, #3
 800d0fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d102:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d106:	601a      	str	r2, [r3, #0]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d112      	bne.n	800d136 <USB_EPStartXfer+0xb5e>
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	00db      	lsls	r3, r3, #3
 800d116:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d11a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	00db      	lsls	r3, r3, #3
 800d126:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d12a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d12e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	e073      	b.n	800d21e <USB_EPStartXfer+0xc46>
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	691b      	ldr	r3, [r3, #16]
 800d13a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d13c:	d820      	bhi.n	800d180 <USB_EPStartXfer+0xba8>
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	691b      	ldr	r3, [r3, #16]
 800d142:	085b      	lsrs	r3, r3, #1
 800d144:	637b      	str	r3, [r7, #52]	@ 0x34
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	691b      	ldr	r3, [r3, #16]
 800d14a:	f003 0301 	and.w	r3, r3, #1
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d002      	beq.n	800d158 <USB_EPStartXfer+0xb80>
 800d152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d154:	3301      	adds	r3, #1
 800d156:	637b      	str	r3, [r7, #52]	@ 0x34
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	00db      	lsls	r3, r3, #3
 800d15e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d162:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d166:	6819      	ldr	r1, [r3, #0]
 800d168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d16a:	069a      	lsls	r2, r3, #26
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	00db      	lsls	r3, r3, #3
 800d172:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d176:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d17a:	430a      	orrs	r2, r1
 800d17c:	601a      	str	r2, [r3, #0]
 800d17e:	e04e      	b.n	800d21e <USB_EPStartXfer+0xc46>
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	691b      	ldr	r3, [r3, #16]
 800d184:	095b      	lsrs	r3, r3, #5
 800d186:	637b      	str	r3, [r7, #52]	@ 0x34
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	f003 031f 	and.w	r3, r3, #31
 800d190:	2b00      	cmp	r3, #0
 800d192:	d102      	bne.n	800d19a <USB_EPStartXfer+0xbc2>
 800d194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d196:	3b01      	subs	r3, #1
 800d198:	637b      	str	r3, [r7, #52]	@ 0x34
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	00db      	lsls	r3, r3, #3
 800d1a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ac:	069b      	lsls	r3, r3, #26
 800d1ae:	431a      	orrs	r2, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1be:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	e02b      	b.n	800d21e <USB_EPStartXfer+0xc46>
 800d1c6:	bf00      	nop
 800d1c8:	07ff8fbf 	.word	0x07ff8fbf
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	785b      	ldrb	r3, [r3, #1]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d124      	bne.n	800d21e <USB_EPStartXfer+0xc46>
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	00db      	lsls	r3, r3, #3
 800d1da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	00db      	lsls	r3, r3, #3
 800d1ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1f2:	b292      	uxth	r2, r2
 800d1f4:	601a      	str	r2, [r3, #0]
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d200:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d204:	6819      	ldr	r1, [r3, #0]
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	041a      	lsls	r2, r3, #16
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	00db      	lsls	r3, r3, #3
 800d212:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d216:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d21a:	430a      	orrs	r2, r1
 800d21c:	601a      	str	r2, [r3, #0]
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	785b      	ldrb	r3, [r3, #1]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d170      	bne.n	800d308 <USB_EPStartXfer+0xd30>
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d230:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d234:	685a      	ldr	r2, [r3, #4]
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	00db      	lsls	r3, r3, #3
 800d23c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d240:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d244:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d248:	605a      	str	r2, [r3, #4]
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d112      	bne.n	800d278 <USB_EPStartXfer+0xca0>
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	00db      	lsls	r3, r3, #3
 800d258:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d25c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d260:	685a      	ldr	r2, [r3, #4]
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d26c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d270:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d274:	605a      	str	r2, [r3, #4]
 800d276:	e070      	b.n	800d35a <USB_EPStartXfer+0xd82>
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	691b      	ldr	r3, [r3, #16]
 800d27c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d27e:	d820      	bhi.n	800d2c2 <USB_EPStartXfer+0xcea>
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	085b      	lsrs	r3, r3, #1
 800d286:	633b      	str	r3, [r7, #48]	@ 0x30
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	691b      	ldr	r3, [r3, #16]
 800d28c:	f003 0301 	and.w	r3, r3, #1
 800d290:	2b00      	cmp	r3, #0
 800d292:	d002      	beq.n	800d29a <USB_EPStartXfer+0xcc2>
 800d294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d296:	3301      	adds	r3, #1
 800d298:	633b      	str	r3, [r7, #48]	@ 0x30
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	00db      	lsls	r3, r3, #3
 800d2a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2a8:	6859      	ldr	r1, [r3, #4]
 800d2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ac:	069a      	lsls	r2, r3, #26
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	00db      	lsls	r3, r3, #3
 800d2b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2bc:	430a      	orrs	r2, r1
 800d2be:	605a      	str	r2, [r3, #4]
 800d2c0:	e04b      	b.n	800d35a <USB_EPStartXfer+0xd82>
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	095b      	lsrs	r3, r3, #5
 800d2c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	691b      	ldr	r3, [r3, #16]
 800d2ce:	f003 031f 	and.w	r3, r3, #31
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d102      	bne.n	800d2dc <USB_EPStartXfer+0xd04>
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	00db      	lsls	r3, r3, #3
 800d2e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2ea:	685a      	ldr	r2, [r3, #4]
 800d2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ee:	069b      	lsls	r3, r3, #26
 800d2f0:	431a      	orrs	r2, r3
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	00db      	lsls	r3, r3, #3
 800d2f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d300:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d304:	605a      	str	r2, [r3, #4]
 800d306:	e028      	b.n	800d35a <USB_EPStartXfer+0xd82>
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	785b      	ldrb	r3, [r3, #1]
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d124      	bne.n	800d35a <USB_EPStartXfer+0xd82>
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	00db      	lsls	r3, r3, #3
 800d316:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d31a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d31e:	685a      	ldr	r2, [r3, #4]
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	00db      	lsls	r3, r3, #3
 800d326:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d32a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d32e:	b292      	uxth	r2, r2
 800d330:	605a      	str	r2, [r3, #4]
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	00db      	lsls	r3, r3, #3
 800d338:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d33c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d340:	6859      	ldr	r1, [r3, #4]
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	041a      	lsls	r2, r3, #16
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	00db      	lsls	r3, r3, #3
 800d34e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d352:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d356:	430a      	orrs	r2, r1
 800d358:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	69db      	ldr	r3, [r3, #28]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	f000 8181 	beq.w	800d666 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	4413      	add	r3, r2
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d372:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d004      	beq.n	800d386 <USB_EPStartXfer+0xdae>
 800d37c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d37e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10b      	bne.n	800d39e <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d386:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	f040 816a 	bne.w	800d666 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d392:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f040 8164 	bne.w	800d666 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4413      	add	r3, r2
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	4b98      	ldr	r3, [pc, #608]	@ (800d60c <USB_EPStartXfer+0x1034>)
 800d3ac:	4013      	ands	r3, r2
 800d3ae:	623b      	str	r3, [r7, #32]
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	441a      	add	r2, r3
 800d3ba:	6a3b      	ldr	r3, [r7, #32]
 800d3bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d3c4:	6013      	str	r3, [r2, #0]
 800d3c6:	e14e      	b.n	800d666 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	78db      	ldrb	r3, [r3, #3]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	f040 8148 	bne.w	800d662 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	699a      	ldr	r2, [r3, #24]
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	691b      	ldr	r3, [r3, #16]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d909      	bls.n	800d3f2 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	691b      	ldr	r3, [r3, #16]
 800d3e2:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	699a      	ldr	r2, [r3, #24]
 800d3e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3ea:	1ad2      	subs	r2, r2, r3
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	619a      	str	r2, [r3, #24]
 800d3f0:	e005      	b.n	800d3fe <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	785b      	ldrb	r3, [r3, #1]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d16a      	bne.n	800d4dc <USB_EPStartXfer+0xf04>
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d410:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	00db      	lsls	r3, r3, #3
 800d41c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d420:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d424:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d428:	601a      	str	r2, [r3, #0]
 800d42a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d112      	bne.n	800d456 <USB_EPStartXfer+0xe7e>
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	00db      	lsls	r3, r3, #3
 800d436:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d43a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	00db      	lsls	r3, r3, #3
 800d446:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d44a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d44e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d452:	601a      	str	r2, [r3, #0]
 800d454:	e06a      	b.n	800d52c <USB_EPStartXfer+0xf54>
 800d456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d458:	2b3e      	cmp	r3, #62	@ 0x3e
 800d45a:	d81e      	bhi.n	800d49a <USB_EPStartXfer+0xec2>
 800d45c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d45e:	085b      	lsrs	r3, r3, #1
 800d460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d464:	f003 0301 	and.w	r3, r3, #1
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d002      	beq.n	800d472 <USB_EPStartXfer+0xe9a>
 800d46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46e:	3301      	adds	r3, #1
 800d470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	00db      	lsls	r3, r3, #3
 800d478:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d47c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d480:	6819      	ldr	r1, [r3, #0]
 800d482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d484:	069a      	lsls	r2, r3, #26
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	00db      	lsls	r3, r3, #3
 800d48c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d490:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d494:	430a      	orrs	r2, r1
 800d496:	601a      	str	r2, [r3, #0]
 800d498:	e048      	b.n	800d52c <USB_EPStartXfer+0xf54>
 800d49a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d49c:	095b      	lsrs	r3, r3, #5
 800d49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4a2:	f003 031f 	and.w	r3, r3, #31
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d102      	bne.n	800d4b0 <USB_EPStartXfer+0xed8>
 800d4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	00db      	lsls	r3, r3, #3
 800d4b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c2:	069b      	lsls	r3, r3, #26
 800d4c4:	431a      	orrs	r2, r3
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	00db      	lsls	r3, r3, #3
 800d4cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	e027      	b.n	800d52c <USB_EPStartXfer+0xf54>
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	785b      	ldrb	r3, [r3, #1]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d123      	bne.n	800d52c <USB_EPStartXfer+0xf54>
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	00db      	lsls	r3, r3, #3
 800d4ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	00db      	lsls	r3, r3, #3
 800d4fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d502:	b292      	uxth	r2, r2
 800d504:	601a      	str	r2, [r3, #0]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d510:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d514:	6819      	ldr	r1, [r3, #0]
 800d516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d518:	041a      	lsls	r2, r3, #16
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	00db      	lsls	r3, r3, #3
 800d520:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d524:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d528:	430a      	orrs	r2, r1
 800d52a:	601a      	str	r2, [r3, #0]
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	785b      	ldrb	r3, [r3, #1]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d16d      	bne.n	800d610 <USB_EPStartXfer+0x1038>
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	00db      	lsls	r3, r3, #3
 800d53a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d53e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d542:	685a      	ldr	r2, [r3, #4]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	00db      	lsls	r3, r3, #3
 800d54a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d54e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d552:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d556:	605a      	str	r2, [r3, #4]
 800d558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d112      	bne.n	800d584 <USB_EPStartXfer+0xfac>
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	00db      	lsls	r3, r3, #3
 800d564:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d568:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d56c:	685a      	ldr	r2, [r3, #4]
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	00db      	lsls	r3, r3, #3
 800d574:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d578:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d57c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d580:	605a      	str	r2, [r3, #4]
 800d582:	e070      	b.n	800d666 <USB_EPStartXfer+0x108e>
 800d584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d586:	2b3e      	cmp	r3, #62	@ 0x3e
 800d588:	d81e      	bhi.n	800d5c8 <USB_EPStartXfer+0xff0>
 800d58a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d58c:	085b      	lsrs	r3, r3, #1
 800d58e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d592:	f003 0301 	and.w	r3, r3, #1
 800d596:	2b00      	cmp	r3, #0
 800d598:	d002      	beq.n	800d5a0 <USB_EPStartXfer+0xfc8>
 800d59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59c:	3301      	adds	r3, #1
 800d59e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	00db      	lsls	r3, r3, #3
 800d5a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5ae:	6859      	ldr	r1, [r3, #4]
 800d5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b2:	069a      	lsls	r2, r3, #26
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	00db      	lsls	r3, r3, #3
 800d5ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5c2:	430a      	orrs	r2, r1
 800d5c4:	605a      	str	r2, [r3, #4]
 800d5c6:	e04e      	b.n	800d666 <USB_EPStartXfer+0x108e>
 800d5c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5ca:	095b      	lsrs	r3, r3, #5
 800d5cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5d0:	f003 031f 	and.w	r3, r3, #31
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d102      	bne.n	800d5de <USB_EPStartXfer+0x1006>
 800d5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	00db      	lsls	r3, r3, #3
 800d5e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5ec:	685a      	ldr	r2, [r3, #4]
 800d5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f0:	069b      	lsls	r3, r3, #26
 800d5f2:	431a      	orrs	r2, r3
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	00db      	lsls	r3, r3, #3
 800d5fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d602:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d606:	605a      	str	r2, [r3, #4]
 800d608:	e02d      	b.n	800d666 <USB_EPStartXfer+0x108e>
 800d60a:	bf00      	nop
 800d60c:	07ff8f8f 	.word	0x07ff8f8f
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	785b      	ldrb	r3, [r3, #1]
 800d614:	2b01      	cmp	r3, #1
 800d616:	d126      	bne.n	800d666 <USB_EPStartXfer+0x108e>
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	00db      	lsls	r3, r3, #3
 800d61e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d622:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d626:	685a      	ldr	r2, [r3, #4]
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	00db      	lsls	r3, r3, #3
 800d62e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d632:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d636:	b292      	uxth	r2, r2
 800d638:	605a      	str	r2, [r3, #4]
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d644:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d648:	6859      	ldr	r1, [r3, #4]
 800d64a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d64c:	041a      	lsls	r2, r3, #16
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	00db      	lsls	r3, r3, #3
 800d654:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d658:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d65c:	430a      	orrs	r2, r1
 800d65e:	605a      	str	r2, [r3, #4]
 800d660:	e001      	b.n	800d666 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800d662:	2301      	movs	r3, #1
 800d664:	e01c      	b.n	800d6a0 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	4413      	add	r3, r2
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	4b0d      	ldr	r3, [pc, #52]	@ (800d6a8 <USB_EPStartXfer+0x10d0>)
 800d674:	4013      	ands	r3, r2
 800d676:	61fb      	str	r3, [r7, #28]
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d67e:	61fb      	str	r3, [r7, #28]
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d686:	61fb      	str	r3, [r7, #28]
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	441a      	add	r2, r3
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d69c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3758      	adds	r7, #88	@ 0x58
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	07ffbf8f 	.word	0x07ffbf8f

0800d6ac <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	785b      	ldrb	r3, [r3, #1]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d018      	beq.n	800d6f0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	4b19      	ldr	r3, [pc, #100]	@ (800d730 <USB_EPSetStall+0x84>)
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	60bb      	str	r3, [r7, #8]
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	f083 0310 	eor.w	r3, r3, #16
 800d6d6:	60bb      	str	r3, [r7, #8]
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	441a      	add	r2, r3
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6ec:	6013      	str	r3, [r2, #0]
 800d6ee:	e017      	b.n	800d720 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	4413      	add	r3, r2
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	4b0d      	ldr	r3, [pc, #52]	@ (800d734 <USB_EPSetStall+0x88>)
 800d6fe:	4013      	ands	r3, r2
 800d700:	60fb      	str	r3, [r7, #12]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d708:	60fb      	str	r3, [r7, #12]
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	441a      	add	r2, r3
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d71a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d71e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d720:	2300      	movs	r3, #0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3714      	adds	r7, #20
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	07ff8fbf 	.word	0x07ff8fbf
 800d734:	07ffbf8f 	.word	0x07ffbf8f

0800d738 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d738:	b480      	push	{r7}
 800d73a:	b089      	sub	sp, #36	@ 0x24
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	7b1b      	ldrb	r3, [r3, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d17c      	bne.n	800d844 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	785b      	ldrb	r3, [r3, #1]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d03c      	beq.n	800d7cc <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	4413      	add	r3, r2
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	613b      	str	r3, [r7, #16]
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d766:	2b00      	cmp	r3, #0
 800d768:	d013      	beq.n	800d792 <USB_EPClearStall+0x5a>
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	4413      	add	r3, r2
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	4b37      	ldr	r3, [pc, #220]	@ (800d854 <USB_EPClearStall+0x11c>)
 800d778:	4013      	ands	r3, r2
 800d77a:	60fb      	str	r3, [r7, #12]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	441a      	add	r2, r3
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d78c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d790:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	78db      	ldrb	r3, [r3, #3]
 800d796:	2b01      	cmp	r3, #1
 800d798:	d054      	beq.n	800d844 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	009b      	lsls	r3, r3, #2
 800d7a2:	4413      	add	r3, r2
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	4b2c      	ldr	r3, [pc, #176]	@ (800d858 <USB_EPClearStall+0x120>)
 800d7a8:	4013      	ands	r3, r2
 800d7aa:	60bb      	str	r3, [r7, #8]
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	f083 0320 	eor.w	r3, r3, #32
 800d7b2:	60bb      	str	r3, [r7, #8]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	441a      	add	r2, r3
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7c8:	6013      	str	r3, [r2, #0]
 800d7ca:	e03b      	b.n	800d844 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	4413      	add	r3, r2
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	61fb      	str	r3, [r7, #28]
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d013      	beq.n	800d80c <USB_EPClearStall+0xd4>
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	4413      	add	r3, r2
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	4b18      	ldr	r3, [pc, #96]	@ (800d854 <USB_EPClearStall+0x11c>)
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	61bb      	str	r3, [r7, #24]
 800d7f6:	687a      	ldr	r2, [r7, #4]
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	441a      	add	r2, r3
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d80a:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	4413      	add	r3, r2
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	4b10      	ldr	r3, [pc, #64]	@ (800d85c <USB_EPClearStall+0x124>)
 800d81a:	4013      	ands	r3, r2
 800d81c:	617b      	str	r3, [r7, #20]
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d824:	617b      	str	r3, [r7, #20]
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d82c:	617b      	str	r3, [r7, #20]
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	441a      	add	r2, r3
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d842:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3724      	adds	r7, #36	@ 0x24
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	07ff8f8f 	.word	0x07ff8f8f
 800d858:	07ff8fbf 	.word	0x07ff8fbf
 800d85c:	07ffbf8f 	.word	0x07ffbf8f

0800d860 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	460b      	mov	r3, r1
 800d86a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d86c:	78fb      	ldrb	r3, [r7, #3]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d102      	bne.n	800d878 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2280      	movs	r2, #128	@ 0x80
 800d876:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d878:	2300      	movs	r3, #0
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	370c      	adds	r7, #12
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr

0800d886 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800d886:	b480      	push	{r7}
 800d888:	b083      	sub	sp, #12
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d892:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d89a:	2300      	movs	r3, #0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8b4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d8bc:	2300      	movs	r3, #0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	370c      	adds	r7, #12
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr

0800d8ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800d8ca:	b480      	push	{r7}
 800d8cc:	b085      	sub	sp, #20
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8d6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3714      	adds	r7, #20
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr

0800d8e6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d8e6:	b480      	push	{r7}
 800d8e8:	b08b      	sub	sp, #44	@ 0x2c
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	60f8      	str	r0, [r7, #12]
 800d8ee:	60b9      	str	r1, [r7, #8]
 800d8f0:	4611      	mov	r1, r2
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	80fb      	strh	r3, [r7, #6]
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d8fc:	88bb      	ldrh	r3, [r7, #4]
 800d8fe:	3303      	adds	r3, #3
 800d900:	089b      	lsrs	r3, r3, #2
 800d902:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d904:	88bb      	ldrh	r3, [r7, #4]
 800d906:	f003 0303 	and.w	r3, r3, #3
 800d90a:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800d910:	8afb      	ldrh	r3, [r7, #22]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d002      	beq.n	800d91c <USB_WritePMA+0x36>
  {
    NbWords--;
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	3b01      	subs	r3, #1
 800d91a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d91c:	88fb      	ldrh	r3, [r7, #6]
 800d91e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d922:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d926:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	623b      	str	r3, [r7, #32]
 800d92c:	e015      	b.n	800d95a <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	3304      	adds	r3, #4
 800d93a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	3301      	adds	r3, #1
 800d940:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	3301      	adds	r3, #1
 800d946:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	3301      	adds	r3, #1
 800d94c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	3301      	adds	r3, #1
 800d952:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800d954:	6a3b      	ldr	r3, [r7, #32]
 800d956:	3b01      	subs	r3, #1
 800d958:	623b      	str	r3, [r7, #32]
 800d95a:	6a3b      	ldr	r3, [r7, #32]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d1e6      	bne.n	800d92e <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800d960:	8afb      	ldrh	r3, [r7, #22]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d01a      	beq.n	800d99c <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800d966:	2300      	movs	r3, #0
 800d968:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	461a      	mov	r2, r3
 800d970:	6a3b      	ldr	r3, [r7, #32]
 800d972:	00db      	lsls	r3, r3, #3
 800d974:	fa02 f303 	lsl.w	r3, r2, r3
 800d978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d97a:	4313      	orrs	r3, r2
 800d97c:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	3301      	adds	r3, #1
 800d982:	623b      	str	r3, [r7, #32]
      pBuf++;
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	3301      	adds	r3, #1
 800d988:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800d98a:	8afb      	ldrh	r3, [r7, #22]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800d990:	8afb      	ldrh	r3, [r7, #22]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1e9      	bne.n	800d96a <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d99a:	601a      	str	r2, [r3, #0]
  }
}
 800d99c:	bf00      	nop
 800d99e:	372c      	adds	r7, #44	@ 0x2c
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b08b      	sub	sp, #44	@ 0x2c
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	4611      	mov	r1, r2
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	80fb      	strh	r3, [r7, #6]
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d9be:	88bb      	ldrh	r3, [r7, #4]
 800d9c0:	3303      	adds	r3, #3
 800d9c2:	089b      	lsrs	r3, r3, #2
 800d9c4:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d9c6:	88bb      	ldrh	r3, [r7, #4]
 800d9c8:	f003 0303 	and.w	r3, r3, #3
 800d9cc:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d9d2:	88fb      	ldrh	r3, [r7, #6]
 800d9d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9dc:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800d9de:	8b7b      	ldrh	r3, [r7, #26]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d002      	beq.n	800d9ea <USB_ReadPMA+0x42>
  {
    NbWords--;
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800d9ea:	69fb      	ldr	r3, [r7, #28]
 800d9ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9ee:	e015      	b.n	800da1c <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	681a      	ldr	r2, [r3, #0]
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800d9f8:	6a3b      	ldr	r3, [r7, #32]
 800d9fa:	3304      	adds	r3, #4
 800d9fc:	623b      	str	r3, [r7, #32]
    pBuf++;
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	3301      	adds	r3, #1
 800da02:	617b      	str	r3, [r7, #20]
    pBuf++;
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	3301      	adds	r3, #1
 800da08:	617b      	str	r3, [r7, #20]
    pBuf++;
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	3301      	adds	r3, #1
 800da0e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	3301      	adds	r3, #1
 800da14:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800da16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da18:	3b01      	subs	r3, #1
 800da1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800da1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1e6      	bne.n	800d9f0 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800da22:	8b7b      	ldrh	r3, [r7, #26]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d017      	beq.n	800da58 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800da28:	6a3b      	ldr	r3, [r7, #32]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800da2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da30:	b2db      	uxtb	r3, r3
 800da32:	00db      	lsls	r3, r3, #3
 800da34:	693a      	ldr	r2, [r7, #16]
 800da36:	fa22 f303 	lsr.w	r3, r2, r3
 800da3a:	b2da      	uxtb	r2, r3
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	701a      	strb	r2, [r3, #0]
      count++;
 800da40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da42:	3301      	adds	r3, #1
 800da44:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	3301      	adds	r3, #1
 800da4a:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800da4c:	8b7b      	ldrh	r3, [r7, #26]
 800da4e:	3b01      	subs	r3, #1
 800da50:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800da52:	8b7b      	ldrh	r3, [r7, #26]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d1ea      	bne.n	800da2e <USB_ReadPMA+0x86>
  }
}
 800da58:	bf00      	nop
 800da5a:	372c      	adds	r7, #44	@ 0x2c
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	460b      	mov	r3, r1
 800da6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800da70:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800da74:	f000 ff60 	bl	800e938 <USBD_static_malloc>
 800da78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d109      	bne.n	800da94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	32b0      	adds	r2, #176	@ 0xb0
 800da8a:	2100      	movs	r1, #0
 800da8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800da90:	2302      	movs	r3, #2
 800da92:	e0d4      	b.n	800dc3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800da94:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800da98:	2100      	movs	r1, #0
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f002 fc1e 	bl	80102dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	32b0      	adds	r2, #176	@ 0xb0
 800daaa:	68f9      	ldr	r1, [r7, #12]
 800daac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	32b0      	adds	r2, #176	@ 0xb0
 800daba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	7c1b      	ldrb	r3, [r3, #16]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d138      	bne.n	800db3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dacc:	4b5e      	ldr	r3, [pc, #376]	@ (800dc48 <USBD_CDC_Init+0x1e4>)
 800dace:	7819      	ldrb	r1, [r3, #0]
 800dad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dad4:	2202      	movs	r2, #2
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 fe35 	bl	800e746 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dadc:	4b5a      	ldr	r3, [pc, #360]	@ (800dc48 <USBD_CDC_Init+0x1e4>)
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	f003 020f 	and.w	r2, r3, #15
 800dae4:	6879      	ldr	r1, [r7, #4]
 800dae6:	4613      	mov	r3, r2
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	4413      	add	r3, r2
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	440b      	add	r3, r1
 800daf0:	3324      	adds	r3, #36	@ 0x24
 800daf2:	2201      	movs	r2, #1
 800daf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800daf6:	4b55      	ldr	r3, [pc, #340]	@ (800dc4c <USBD_CDC_Init+0x1e8>)
 800daf8:	7819      	ldrb	r1, [r3, #0]
 800dafa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dafe:	2202      	movs	r2, #2
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 fe20 	bl	800e746 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800db06:	4b51      	ldr	r3, [pc, #324]	@ (800dc4c <USBD_CDC_Init+0x1e8>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	f003 020f 	and.w	r2, r3, #15
 800db0e:	6879      	ldr	r1, [r7, #4]
 800db10:	4613      	mov	r3, r2
 800db12:	009b      	lsls	r3, r3, #2
 800db14:	4413      	add	r3, r2
 800db16:	009b      	lsls	r3, r3, #2
 800db18:	440b      	add	r3, r1
 800db1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800db1e:	2201      	movs	r2, #1
 800db20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800db22:	4b4b      	ldr	r3, [pc, #300]	@ (800dc50 <USBD_CDC_Init+0x1ec>)
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	f003 020f 	and.w	r2, r3, #15
 800db2a:	6879      	ldr	r1, [r7, #4]
 800db2c:	4613      	mov	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4413      	add	r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	440b      	add	r3, r1
 800db36:	3326      	adds	r3, #38	@ 0x26
 800db38:	2210      	movs	r2, #16
 800db3a:	801a      	strh	r2, [r3, #0]
 800db3c:	e035      	b.n	800dbaa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800db3e:	4b42      	ldr	r3, [pc, #264]	@ (800dc48 <USBD_CDC_Init+0x1e4>)
 800db40:	7819      	ldrb	r1, [r3, #0]
 800db42:	2340      	movs	r3, #64	@ 0x40
 800db44:	2202      	movs	r2, #2
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fdfd 	bl	800e746 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800db4c:	4b3e      	ldr	r3, [pc, #248]	@ (800dc48 <USBD_CDC_Init+0x1e4>)
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	f003 020f 	and.w	r2, r3, #15
 800db54:	6879      	ldr	r1, [r7, #4]
 800db56:	4613      	mov	r3, r2
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	4413      	add	r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	440b      	add	r3, r1
 800db60:	3324      	adds	r3, #36	@ 0x24
 800db62:	2201      	movs	r2, #1
 800db64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800db66:	4b39      	ldr	r3, [pc, #228]	@ (800dc4c <USBD_CDC_Init+0x1e8>)
 800db68:	7819      	ldrb	r1, [r3, #0]
 800db6a:	2340      	movs	r3, #64	@ 0x40
 800db6c:	2202      	movs	r2, #2
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 fde9 	bl	800e746 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800db74:	4b35      	ldr	r3, [pc, #212]	@ (800dc4c <USBD_CDC_Init+0x1e8>)
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	f003 020f 	and.w	r2, r3, #15
 800db7c:	6879      	ldr	r1, [r7, #4]
 800db7e:	4613      	mov	r3, r2
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	4413      	add	r3, r2
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	440b      	add	r3, r1
 800db88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800db8c:	2201      	movs	r2, #1
 800db8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800db90:	4b2f      	ldr	r3, [pc, #188]	@ (800dc50 <USBD_CDC_Init+0x1ec>)
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	f003 020f 	and.w	r2, r3, #15
 800db98:	6879      	ldr	r1, [r7, #4]
 800db9a:	4613      	mov	r3, r2
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	4413      	add	r3, r2
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	440b      	add	r3, r1
 800dba4:	3326      	adds	r3, #38	@ 0x26
 800dba6:	2210      	movs	r2, #16
 800dba8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dbaa:	4b29      	ldr	r3, [pc, #164]	@ (800dc50 <USBD_CDC_Init+0x1ec>)
 800dbac:	7819      	ldrb	r1, [r3, #0]
 800dbae:	2308      	movs	r3, #8
 800dbb0:	2203      	movs	r2, #3
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 fdc7 	bl	800e746 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dbb8:	4b25      	ldr	r3, [pc, #148]	@ (800dc50 <USBD_CDC_Init+0x1ec>)
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	f003 020f 	and.w	r2, r3, #15
 800dbc0:	6879      	ldr	r1, [r7, #4]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	440b      	add	r3, r1
 800dbcc:	3324      	adds	r3, #36	@ 0x24
 800dbce:	2201      	movs	r2, #1
 800dbd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	33b0      	adds	r3, #176	@ 0xb0
 800dbe4:	009b      	lsls	r3, r3, #2
 800dbe6:	4413      	add	r3, r2
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d101      	bne.n	800dc0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dc08:	2302      	movs	r3, #2
 800dc0a:	e018      	b.n	800dc3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	7c1b      	ldrb	r3, [r3, #16]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d10a      	bne.n	800dc2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc14:	4b0d      	ldr	r3, [pc, #52]	@ (800dc4c <USBD_CDC_Init+0x1e8>)
 800dc16:	7819      	ldrb	r1, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 fe5a 	bl	800e8dc <USBD_LL_PrepareReceive>
 800dc28:	e008      	b.n	800dc3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc2a:	4b08      	ldr	r3, [pc, #32]	@ (800dc4c <USBD_CDC_Init+0x1e8>)
 800dc2c:	7819      	ldrb	r1, [r3, #0]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc34:	2340      	movs	r3, #64	@ 0x40
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 fe50 	bl	800e8dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	200000b3 	.word	0x200000b3
 800dc4c:	200000b4 	.word	0x200000b4
 800dc50:	200000b5 	.word	0x200000b5

0800dc54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dc60:	4b3a      	ldr	r3, [pc, #232]	@ (800dd4c <USBD_CDC_DeInit+0xf8>)
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	4619      	mov	r1, r3
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 fd8d 	bl	800e786 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dc6c:	4b37      	ldr	r3, [pc, #220]	@ (800dd4c <USBD_CDC_DeInit+0xf8>)
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	f003 020f 	and.w	r2, r3, #15
 800dc74:	6879      	ldr	r1, [r7, #4]
 800dc76:	4613      	mov	r3, r2
 800dc78:	009b      	lsls	r3, r3, #2
 800dc7a:	4413      	add	r3, r2
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	440b      	add	r3, r1
 800dc80:	3324      	adds	r3, #36	@ 0x24
 800dc82:	2200      	movs	r2, #0
 800dc84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dc86:	4b32      	ldr	r3, [pc, #200]	@ (800dd50 <USBD_CDC_DeInit+0xfc>)
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 fd7a 	bl	800e786 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dc92:	4b2f      	ldr	r3, [pc, #188]	@ (800dd50 <USBD_CDC_DeInit+0xfc>)
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	f003 020f 	and.w	r2, r3, #15
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4413      	add	r3, r2
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	440b      	add	r3, r1
 800dca6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dcaa:	2200      	movs	r2, #0
 800dcac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800dcae:	4b29      	ldr	r3, [pc, #164]	@ (800dd54 <USBD_CDC_DeInit+0x100>)
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fd66 	bl	800e786 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dcba:	4b26      	ldr	r3, [pc, #152]	@ (800dd54 <USBD_CDC_DeInit+0x100>)
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	f003 020f 	and.w	r2, r3, #15
 800dcc2:	6879      	ldr	r1, [r7, #4]
 800dcc4:	4613      	mov	r3, r2
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	4413      	add	r3, r2
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	440b      	add	r3, r1
 800dcce:	3324      	adds	r3, #36	@ 0x24
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800dcd4:	4b1f      	ldr	r3, [pc, #124]	@ (800dd54 <USBD_CDC_DeInit+0x100>)
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	f003 020f 	and.w	r2, r3, #15
 800dcdc:	6879      	ldr	r1, [r7, #4]
 800dcde:	4613      	mov	r3, r2
 800dce0:	009b      	lsls	r3, r3, #2
 800dce2:	4413      	add	r3, r2
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	440b      	add	r3, r1
 800dce8:	3326      	adds	r3, #38	@ 0x26
 800dcea:	2200      	movs	r2, #0
 800dcec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	32b0      	adds	r2, #176	@ 0xb0
 800dcf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d01f      	beq.n	800dd40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	33b0      	adds	r3, #176	@ 0xb0
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	4413      	add	r3, r2
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	32b0      	adds	r2, #176	@ 0xb0
 800dd1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd22:	4618      	mov	r0, r3
 800dd24:	f000 fe16 	bl	800e954 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	32b0      	adds	r2, #176	@ 0xb0
 800dd32:	2100      	movs	r1, #0
 800dd34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3708      	adds	r7, #8
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	200000b3 	.word	0x200000b3
 800dd50:	200000b4 	.word	0x200000b4
 800dd54:	200000b5 	.word	0x200000b5

0800dd58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	32b0      	adds	r2, #176	@ 0xb0
 800dd6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dd72:	2300      	movs	r3, #0
 800dd74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dd76:	2300      	movs	r3, #0
 800dd78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d101      	bne.n	800dd88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800dd84:	2303      	movs	r3, #3
 800dd86:	e0bf      	b.n	800df08 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d050      	beq.n	800de36 <USBD_CDC_Setup+0xde>
 800dd94:	2b20      	cmp	r3, #32
 800dd96:	f040 80af 	bne.w	800def8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	88db      	ldrh	r3, [r3, #6]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d03a      	beq.n	800de18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	b25b      	sxtb	r3, r3
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	da1b      	bge.n	800dde4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ddb2:	687a      	ldr	r2, [r7, #4]
 800ddb4:	33b0      	adds	r3, #176	@ 0xb0
 800ddb6:	009b      	lsls	r3, r3, #2
 800ddb8:	4413      	add	r3, r2
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	683a      	ldr	r2, [r7, #0]
 800ddc0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ddc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ddc4:	683a      	ldr	r2, [r7, #0]
 800ddc6:	88d2      	ldrh	r2, [r2, #6]
 800ddc8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	88db      	ldrh	r3, [r3, #6]
 800ddce:	2b07      	cmp	r3, #7
 800ddd0:	bf28      	it	cs
 800ddd2:	2307      	movcs	r3, #7
 800ddd4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	89fa      	ldrh	r2, [r7, #14]
 800ddda:	4619      	mov	r1, r3
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f002 f8ac 	bl	800ff3a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800dde2:	e090      	b.n	800df06 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	785a      	ldrb	r2, [r3, #1]
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	88db      	ldrh	r3, [r3, #6]
 800ddf2:	2b3f      	cmp	r3, #63	@ 0x3f
 800ddf4:	d803      	bhi.n	800ddfe <USBD_CDC_Setup+0xa6>
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	88db      	ldrh	r3, [r3, #6]
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	e000      	b.n	800de00 <USBD_CDC_Setup+0xa8>
 800ddfe:	2240      	movs	r2, #64	@ 0x40
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800de06:	6939      	ldr	r1, [r7, #16]
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800de0e:	461a      	mov	r2, r3
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f002 f8be 	bl	800ff92 <USBD_CtlPrepareRx>
      break;
 800de16:	e076      	b.n	800df06 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	33b0      	adds	r3, #176	@ 0xb0
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	4413      	add	r3, r2
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	689b      	ldr	r3, [r3, #8]
 800de2a:	683a      	ldr	r2, [r7, #0]
 800de2c:	7850      	ldrb	r0, [r2, #1]
 800de2e:	2200      	movs	r2, #0
 800de30:	6839      	ldr	r1, [r7, #0]
 800de32:	4798      	blx	r3
      break;
 800de34:	e067      	b.n	800df06 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	785b      	ldrb	r3, [r3, #1]
 800de3a:	2b0b      	cmp	r3, #11
 800de3c:	d851      	bhi.n	800dee2 <USBD_CDC_Setup+0x18a>
 800de3e:	a201      	add	r2, pc, #4	@ (adr r2, 800de44 <USBD_CDC_Setup+0xec>)
 800de40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de44:	0800de75 	.word	0x0800de75
 800de48:	0800def1 	.word	0x0800def1
 800de4c:	0800dee3 	.word	0x0800dee3
 800de50:	0800dee3 	.word	0x0800dee3
 800de54:	0800dee3 	.word	0x0800dee3
 800de58:	0800dee3 	.word	0x0800dee3
 800de5c:	0800dee3 	.word	0x0800dee3
 800de60:	0800dee3 	.word	0x0800dee3
 800de64:	0800dee3 	.word	0x0800dee3
 800de68:	0800dee3 	.word	0x0800dee3
 800de6c:	0800de9f 	.word	0x0800de9f
 800de70:	0800dec9 	.word	0x0800dec9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	2b03      	cmp	r3, #3
 800de7e:	d107      	bne.n	800de90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800de80:	f107 030a 	add.w	r3, r7, #10
 800de84:	2202      	movs	r2, #2
 800de86:	4619      	mov	r1, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f002 f856 	bl	800ff3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800de8e:	e032      	b.n	800def6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800de90:	6839      	ldr	r1, [r7, #0]
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f001 fed3 	bl	800fc3e <USBD_CtlError>
            ret = USBD_FAIL;
 800de98:	2303      	movs	r3, #3
 800de9a:	75fb      	strb	r3, [r7, #23]
          break;
 800de9c:	e02b      	b.n	800def6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	2b03      	cmp	r3, #3
 800dea8:	d107      	bne.n	800deba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800deaa:	f107 030d 	add.w	r3, r7, #13
 800deae:	2201      	movs	r2, #1
 800deb0:	4619      	mov	r1, r3
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f002 f841 	bl	800ff3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800deb8:	e01d      	b.n	800def6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800deba:	6839      	ldr	r1, [r7, #0]
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f001 febe 	bl	800fc3e <USBD_CtlError>
            ret = USBD_FAIL;
 800dec2:	2303      	movs	r3, #3
 800dec4:	75fb      	strb	r3, [r7, #23]
          break;
 800dec6:	e016      	b.n	800def6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	2b03      	cmp	r3, #3
 800ded2:	d00f      	beq.n	800def4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ded4:	6839      	ldr	r1, [r7, #0]
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f001 feb1 	bl	800fc3e <USBD_CtlError>
            ret = USBD_FAIL;
 800dedc:	2303      	movs	r3, #3
 800dede:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dee0:	e008      	b.n	800def4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f001 feaa 	bl	800fc3e <USBD_CtlError>
          ret = USBD_FAIL;
 800deea:	2303      	movs	r3, #3
 800deec:	75fb      	strb	r3, [r7, #23]
          break;
 800deee:	e002      	b.n	800def6 <USBD_CDC_Setup+0x19e>
          break;
 800def0:	bf00      	nop
 800def2:	e008      	b.n	800df06 <USBD_CDC_Setup+0x1ae>
          break;
 800def4:	bf00      	nop
      }
      break;
 800def6:	e006      	b.n	800df06 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800def8:	6839      	ldr	r1, [r7, #0]
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f001 fe9f 	bl	800fc3e <USBD_CtlError>
      ret = USBD_FAIL;
 800df00:	2303      	movs	r3, #3
 800df02:	75fb      	strb	r3, [r7, #23]
      break;
 800df04:	bf00      	nop
  }

  return (uint8_t)ret;
 800df06:	7dfb      	ldrb	r3, [r7, #23]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3718      	adds	r7, #24
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	460b      	mov	r3, r1
 800df1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	32b0      	adds	r2, #176	@ 0xb0
 800df2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d101      	bne.n	800df3a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800df36:	2303      	movs	r3, #3
 800df38:	e065      	b.n	800e006 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	32b0      	adds	r2, #176	@ 0xb0
 800df44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800df4a:	78fb      	ldrb	r3, [r7, #3]
 800df4c:	f003 020f 	and.w	r2, r3, #15
 800df50:	6879      	ldr	r1, [r7, #4]
 800df52:	4613      	mov	r3, r2
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	4413      	add	r3, r2
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	440b      	add	r3, r1
 800df5c:	3318      	adds	r3, #24
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d02f      	beq.n	800dfc4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800df64:	78fb      	ldrb	r3, [r7, #3]
 800df66:	f003 020f 	and.w	r2, r3, #15
 800df6a:	6879      	ldr	r1, [r7, #4]
 800df6c:	4613      	mov	r3, r2
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	4413      	add	r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	440b      	add	r3, r1
 800df76:	3318      	adds	r3, #24
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	78fb      	ldrb	r3, [r7, #3]
 800df7c:	f003 010f 	and.w	r1, r3, #15
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	460b      	mov	r3, r1
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	440b      	add	r3, r1
 800df88:	00db      	lsls	r3, r3, #3
 800df8a:	4403      	add	r3, r0
 800df8c:	3324      	adds	r3, #36	@ 0x24
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	fbb2 f1f3 	udiv	r1, r2, r3
 800df94:	fb01 f303 	mul.w	r3, r1, r3
 800df98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d112      	bne.n	800dfc4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800df9e:	78fb      	ldrb	r3, [r7, #3]
 800dfa0:	f003 020f 	and.w	r2, r3, #15
 800dfa4:	6879      	ldr	r1, [r7, #4]
 800dfa6:	4613      	mov	r3, r2
 800dfa8:	009b      	lsls	r3, r3, #2
 800dfaa:	4413      	add	r3, r2
 800dfac:	009b      	lsls	r3, r3, #2
 800dfae:	440b      	add	r3, r1
 800dfb0:	3318      	adds	r3, #24
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dfb6:	78f9      	ldrb	r1, [r7, #3]
 800dfb8:	2300      	movs	r3, #0
 800dfba:	2200      	movs	r2, #0
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 fc72 	bl	800e8a6 <USBD_LL_Transmit>
 800dfc2:	e01f      	b.n	800e004 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	33b0      	adds	r3, #176	@ 0xb0
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	4413      	add	r3, r2
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	691b      	ldr	r3, [r3, #16]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d010      	beq.n	800e004 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	33b0      	adds	r3, #176	@ 0xb0
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	4413      	add	r3, r2
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	691b      	ldr	r3, [r3, #16]
 800dff4:	68ba      	ldr	r2, [r7, #8]
 800dff6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e000:	78fa      	ldrb	r2, [r7, #3]
 800e002:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e004:	2300      	movs	r3, #0
}
 800e006:	4618      	mov	r0, r3
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b084      	sub	sp, #16
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
 800e016:	460b      	mov	r3, r1
 800e018:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	32b0      	adds	r2, #176	@ 0xb0
 800e024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e028:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	32b0      	adds	r2, #176	@ 0xb0
 800e034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d101      	bne.n	800e040 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e03c:	2303      	movs	r3, #3
 800e03e:	e01a      	b.n	800e076 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e040:	78fb      	ldrb	r3, [r7, #3]
 800e042:	4619      	mov	r1, r3
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 fc64 	bl	800e912 <USBD_LL_GetRxDataSize>
 800e04a:	4602      	mov	r2, r0
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	33b0      	adds	r3, #176	@ 0xb0
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	4413      	add	r3, r2
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	68db      	ldr	r3, [r3, #12]
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e070:	4611      	mov	r1, r2
 800e072:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b084      	sub	sp, #16
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	32b0      	adds	r2, #176	@ 0xb0
 800e090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e094:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d101      	bne.n	800e0a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e09c:	2303      	movs	r3, #3
 800e09e:	e024      	b.n	800e0ea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	33b0      	adds	r3, #176	@ 0xb0
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4413      	add	r3, r2
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d019      	beq.n	800e0e8 <USBD_CDC_EP0_RxReady+0x6a>
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e0ba:	2bff      	cmp	r3, #255	@ 0xff
 800e0bc:	d014      	beq.n	800e0e8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	33b0      	adds	r3, #176	@ 0xb0
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	4413      	add	r3, r2
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e0d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e0de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	22ff      	movs	r2, #255	@ 0xff
 800e0e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e0e8:	2300      	movs	r3, #0
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
	...

0800e0f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b086      	sub	sp, #24
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e0fc:	2182      	movs	r1, #130	@ 0x82
 800e0fe:	4818      	ldr	r0, [pc, #96]	@ (800e160 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e100:	f000 ff67 	bl	800efd2 <USBD_GetEpDesc>
 800e104:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e106:	2101      	movs	r1, #1
 800e108:	4815      	ldr	r0, [pc, #84]	@ (800e160 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e10a:	f000 ff62 	bl	800efd2 <USBD_GetEpDesc>
 800e10e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e110:	2181      	movs	r1, #129	@ 0x81
 800e112:	4813      	ldr	r0, [pc, #76]	@ (800e160 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e114:	f000 ff5d 	bl	800efd2 <USBD_GetEpDesc>
 800e118:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d002      	beq.n	800e126 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	2210      	movs	r2, #16
 800e124:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d006      	beq.n	800e13a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	2200      	movs	r2, #0
 800e130:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e134:	711a      	strb	r2, [r3, #4]
 800e136:	2200      	movs	r2, #0
 800e138:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d006      	beq.n	800e14e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2200      	movs	r2, #0
 800e144:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e148:	711a      	strb	r2, [r3, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2243      	movs	r2, #67	@ 0x43
 800e152:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e154:	4b02      	ldr	r3, [pc, #8]	@ (800e160 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e156:	4618      	mov	r0, r3
 800e158:	3718      	adds	r7, #24
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
 800e15e:	bf00      	nop
 800e160:	20000070 	.word	0x20000070

0800e164 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b086      	sub	sp, #24
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e16c:	2182      	movs	r1, #130	@ 0x82
 800e16e:	4818      	ldr	r0, [pc, #96]	@ (800e1d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e170:	f000 ff2f 	bl	800efd2 <USBD_GetEpDesc>
 800e174:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e176:	2101      	movs	r1, #1
 800e178:	4815      	ldr	r0, [pc, #84]	@ (800e1d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e17a:	f000 ff2a 	bl	800efd2 <USBD_GetEpDesc>
 800e17e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e180:	2181      	movs	r1, #129	@ 0x81
 800e182:	4813      	ldr	r0, [pc, #76]	@ (800e1d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e184:	f000 ff25 	bl	800efd2 <USBD_GetEpDesc>
 800e188:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d002      	beq.n	800e196 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	2210      	movs	r2, #16
 800e194:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d006      	beq.n	800e1aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	711a      	strb	r2, [r3, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f042 0202 	orr.w	r2, r2, #2
 800e1a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d006      	beq.n	800e1be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	711a      	strb	r2, [r3, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	f042 0202 	orr.w	r2, r2, #2
 800e1bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2243      	movs	r2, #67	@ 0x43
 800e1c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e1c4:	4b02      	ldr	r3, [pc, #8]	@ (800e1d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3718      	adds	r7, #24
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20000070 	.word	0x20000070

0800e1d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e1dc:	2182      	movs	r1, #130	@ 0x82
 800e1de:	4818      	ldr	r0, [pc, #96]	@ (800e240 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e1e0:	f000 fef7 	bl	800efd2 <USBD_GetEpDesc>
 800e1e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e1e6:	2101      	movs	r1, #1
 800e1e8:	4815      	ldr	r0, [pc, #84]	@ (800e240 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e1ea:	f000 fef2 	bl	800efd2 <USBD_GetEpDesc>
 800e1ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e1f0:	2181      	movs	r1, #129	@ 0x81
 800e1f2:	4813      	ldr	r0, [pc, #76]	@ (800e240 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e1f4:	f000 feed 	bl	800efd2 <USBD_GetEpDesc>
 800e1f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d002      	beq.n	800e206 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	2210      	movs	r2, #16
 800e204:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d006      	beq.n	800e21a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	2200      	movs	r2, #0
 800e210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e214:	711a      	strb	r2, [r3, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d006      	beq.n	800e22e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2200      	movs	r2, #0
 800e224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e228:	711a      	strb	r2, [r3, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2243      	movs	r2, #67	@ 0x43
 800e232:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e234:	4b02      	ldr	r3, [pc, #8]	@ (800e240 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e236:	4618      	mov	r0, r3
 800e238:	3718      	adds	r7, #24
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop
 800e240:	20000070 	.word	0x20000070

0800e244 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	220a      	movs	r2, #10
 800e250:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e252:	4b03      	ldr	r3, [pc, #12]	@ (800e260 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e254:	4618      	mov	r0, r3
 800e256:	370c      	adds	r7, #12
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr
 800e260:	2000002c 	.word	0x2000002c

0800e264 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d101      	bne.n	800e278 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e274:	2303      	movs	r3, #3
 800e276:	e009      	b.n	800e28c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	33b0      	adds	r3, #176	@ 0xb0
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4413      	add	r3, r2
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	370c      	adds	r7, #12
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr

0800e298 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e298:	b480      	push	{r7}
 800e29a:	b087      	sub	sp, #28
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	32b0      	adds	r2, #176	@ 0xb0
 800e2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d101      	bne.n	800e2be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e2ba:	2303      	movs	r3, #3
 800e2bc:	e008      	b.n	800e2d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	68ba      	ldr	r2, [r7, #8]
 800e2c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	371c      	adds	r7, #28
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	32b0      	adds	r2, #176	@ 0xb0
 800e2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d101      	bne.n	800e300 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	e004      	b.n	800e30a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	683a      	ldr	r2, [r7, #0]
 800e304:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e308:	2300      	movs	r3, #0
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3714      	adds	r7, #20
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr
	...

0800e318 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	32b0      	adds	r2, #176	@ 0xb0
 800e32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e32e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	32b0      	adds	r2, #176	@ 0xb0
 800e33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d101      	bne.n	800e346 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e342:	2303      	movs	r3, #3
 800e344:	e018      	b.n	800e378 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	7c1b      	ldrb	r3, [r3, #16]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d10a      	bne.n	800e364 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e34e:	4b0c      	ldr	r3, [pc, #48]	@ (800e380 <USBD_CDC_ReceivePacket+0x68>)
 800e350:	7819      	ldrb	r1, [r3, #0]
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e358:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f000 fabd 	bl	800e8dc <USBD_LL_PrepareReceive>
 800e362:	e008      	b.n	800e376 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e364:	4b06      	ldr	r3, [pc, #24]	@ (800e380 <USBD_CDC_ReceivePacket+0x68>)
 800e366:	7819      	ldrb	r1, [r3, #0]
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e36e:	2340      	movs	r3, #64	@ 0x40
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 fab3 	bl	800e8dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	200000b4 	.word	0x200000b4

0800e384 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e388:	2200      	movs	r2, #0
 800e38a:	4905      	ldr	r1, [pc, #20]	@ (800e3a0 <TEMPLATE_Init+0x1c>)
 800e38c:	4805      	ldr	r0, [pc, #20]	@ (800e3a4 <TEMPLATE_Init+0x20>)
 800e38e:	f7ff ff83 	bl	800e298 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e392:	4905      	ldr	r1, [pc, #20]	@ (800e3a8 <TEMPLATE_Init+0x24>)
 800e394:	4803      	ldr	r0, [pc, #12]	@ (800e3a4 <TEMPLATE_Init+0x20>)
 800e396:	f7ff ffa1 	bl	800e2dc <USBD_CDC_SetRxBuffer>
      return (0);
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	20000d3c 	.word	0x20000d3c
 800e3a4:	200007b4 	.word	0x200007b4
 800e3a8:	20000b3c 	.word	0x20000b3c

0800e3ac <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	6039      	str	r1, [r7, #0]
 800e3c6:	71fb      	strb	r3, [r7, #7]
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800e3cc:	79fb      	ldrb	r3, [r7, #7]
 800e3ce:	2b23      	cmp	r3, #35	@ 0x23
 800e3d0:	f200 8098 	bhi.w	800e504 <TEMPLATE_Control+0x148>
 800e3d4:	a201      	add	r2, pc, #4	@ (adr r2, 800e3dc <TEMPLATE_Control+0x20>)
 800e3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3da:	bf00      	nop
 800e3dc:	0800e505 	.word	0x0800e505
 800e3e0:	0800e505 	.word	0x0800e505
 800e3e4:	0800e505 	.word	0x0800e505
 800e3e8:	0800e505 	.word	0x0800e505
 800e3ec:	0800e505 	.word	0x0800e505
 800e3f0:	0800e505 	.word	0x0800e505
 800e3f4:	0800e505 	.word	0x0800e505
 800e3f8:	0800e505 	.word	0x0800e505
 800e3fc:	0800e505 	.word	0x0800e505
 800e400:	0800e505 	.word	0x0800e505
 800e404:	0800e505 	.word	0x0800e505
 800e408:	0800e505 	.word	0x0800e505
 800e40c:	0800e505 	.word	0x0800e505
 800e410:	0800e505 	.word	0x0800e505
 800e414:	0800e505 	.word	0x0800e505
 800e418:	0800e505 	.word	0x0800e505
 800e41c:	0800e505 	.word	0x0800e505
 800e420:	0800e505 	.word	0x0800e505
 800e424:	0800e505 	.word	0x0800e505
 800e428:	0800e505 	.word	0x0800e505
 800e42c:	0800e505 	.word	0x0800e505
 800e430:	0800e505 	.word	0x0800e505
 800e434:	0800e505 	.word	0x0800e505
 800e438:	0800e505 	.word	0x0800e505
 800e43c:	0800e505 	.word	0x0800e505
 800e440:	0800e505 	.word	0x0800e505
 800e444:	0800e505 	.word	0x0800e505
 800e448:	0800e505 	.word	0x0800e505
 800e44c:	0800e505 	.word	0x0800e505
 800e450:	0800e505 	.word	0x0800e505
 800e454:	0800e505 	.word	0x0800e505
 800e458:	0800e505 	.word	0x0800e505
 800e45c:	0800e46d 	.word	0x0800e46d
 800e460:	0800e4b1 	.word	0x0800e4b1
 800e464:	0800e505 	.word	0x0800e505
 800e468:	0800e505 	.word	0x0800e505
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	781b      	ldrb	r3, [r3, #0]
 800e470:	461a      	mov	r2, r3
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	3301      	adds	r3, #1
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	021b      	lsls	r3, r3, #8
 800e47a:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	3302      	adds	r3, #2
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e484:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	3303      	adds	r3, #3
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	061b      	lsls	r3, r3, #24
 800e48e:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e490:	461a      	mov	r2, r3
 800e492:	4b20      	ldr	r3, [pc, #128]	@ (800e514 <TEMPLATE_Control+0x158>)
 800e494:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	791a      	ldrb	r2, [r3, #4]
 800e49a:	4b1e      	ldr	r3, [pc, #120]	@ (800e514 <TEMPLATE_Control+0x158>)
 800e49c:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	795a      	ldrb	r2, [r3, #5]
 800e4a2:	4b1c      	ldr	r3, [pc, #112]	@ (800e514 <TEMPLATE_Control+0x158>)
 800e4a4:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	799a      	ldrb	r2, [r3, #6]
 800e4aa:	4b1a      	ldr	r3, [pc, #104]	@ (800e514 <TEMPLATE_Control+0x158>)
 800e4ac:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800e4ae:	e02a      	b.n	800e506 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800e4b0:	4b18      	ldr	r3, [pc, #96]	@ (800e514 <TEMPLATE_Control+0x158>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	b2da      	uxtb	r2, r3
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800e4ba:	4b16      	ldr	r3, [pc, #88]	@ (800e514 <TEMPLATE_Control+0x158>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	0a1a      	lsrs	r2, r3, #8
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	b2d2      	uxtb	r2, r2
 800e4c6:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800e4c8:	4b12      	ldr	r3, [pc, #72]	@ (800e514 <TEMPLATE_Control+0x158>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	0c1a      	lsrs	r2, r3, #16
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	3302      	adds	r3, #2
 800e4d2:	b2d2      	uxtb	r2, r2
 800e4d4:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800e4d6:	4b0f      	ldr	r3, [pc, #60]	@ (800e514 <TEMPLATE_Control+0x158>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	0e1a      	lsrs	r2, r3, #24
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	3303      	adds	r3, #3
 800e4e0:	b2d2      	uxtb	r2, r2
 800e4e2:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	3304      	adds	r3, #4
 800e4e8:	4a0a      	ldr	r2, [pc, #40]	@ (800e514 <TEMPLATE_Control+0x158>)
 800e4ea:	7912      	ldrb	r2, [r2, #4]
 800e4ec:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	3305      	adds	r3, #5
 800e4f2:	4a08      	ldr	r2, [pc, #32]	@ (800e514 <TEMPLATE_Control+0x158>)
 800e4f4:	7952      	ldrb	r2, [r2, #5]
 800e4f6:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	3306      	adds	r3, #6
 800e4fc:	4a05      	ldr	r2, [pc, #20]	@ (800e514 <TEMPLATE_Control+0x158>)
 800e4fe:	7992      	ldrb	r2, [r2, #6]
 800e500:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800e502:	e000      	b.n	800e506 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800e504:	bf00      	nop
  }

  return (0);
 800e506:	2300      	movs	r3, #0
}
 800e508:	4618      	mov	r0, r3
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr
 800e514:	200000cc 	.word	0x200000cc

0800e518 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
    // Check for overflow (always a good idea)
    if ((usb_rx_index + *Len) > MAX_USB_DATA_SIZE)
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	681a      	ldr	r2, [r3, #0]
 800e526:	4b1a      	ldr	r3, [pc, #104]	@ (800e590 <TEMPLATE_Receive+0x78>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4413      	add	r3, r2
 800e52c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e530:	d907      	bls.n	800e542 <TEMPLATE_Receive+0x2a>
    {
        log_error("USB RX buffer overflow");
 800e532:	4818      	ldr	r0, [pc, #96]	@ (800e594 <TEMPLATE_Receive+0x7c>)
 800e534:	f7f2 f89c 	bl	8000670 <log_error>
        usb_rx_index = 0;
 800e538:	4b15      	ldr	r3, [pc, #84]	@ (800e590 <TEMPLATE_Receive+0x78>)
 800e53a:	2200      	movs	r2, #0
 800e53c:	601a      	str	r2, [r3, #0]
        return USBD_FAIL;
 800e53e:	2303      	movs	r3, #3
 800e540:	e022      	b.n	800e588 <TEMPLATE_Receive+0x70>
    }

    // Copy the incoming packet to our application buffer
    memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 800e542:	4b13      	ldr	r3, [pc, #76]	@ (800e590 <TEMPLATE_Receive+0x78>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a14      	ldr	r2, [pc, #80]	@ (800e598 <TEMPLATE_Receive+0x80>)
 800e548:	1898      	adds	r0, r3, r2
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	461a      	mov	r2, r3
 800e550:	6879      	ldr	r1, [r7, #4]
 800e552:	f001 ff3e 	bl	80103d2 <memcpy>
    usb_rx_index += *Len;
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	4b0d      	ldr	r3, [pc, #52]	@ (800e590 <TEMPLATE_Receive+0x78>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4413      	add	r3, r2
 800e560:	4a0b      	ldr	r2, [pc, #44]	@ (800e590 <TEMPLATE_Receive+0x78>)
 800e562:	6013      	str	r3, [r2, #0]

    // OPTIONAL: Detect if full message has been received
    if (usb_rx_index >= MAX_USB_DATA_SIZE)
 800e564:	4b0a      	ldr	r3, [pc, #40]	@ (800e590 <TEMPLATE_Receive+0x78>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e56c:	d308      	bcc.n	800e580 <TEMPLATE_Receive+0x68>
    {
        log_info("Full USB data received: %lu bytes", usb_rx_index);
 800e56e:	4b08      	ldr	r3, [pc, #32]	@ (800e590 <TEMPLATE_Receive+0x78>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4619      	mov	r1, r3
 800e574:	4809      	ldr	r0, [pc, #36]	@ (800e59c <TEMPLATE_Receive+0x84>)
 800e576:	f7f2 f861 	bl	800063c <log_info>
        // Reset for next transfer
        usb_rx_index = 0;
 800e57a:	4b05      	ldr	r3, [pc, #20]	@ (800e590 <TEMPLATE_Receive+0x78>)
 800e57c:	2200      	movs	r2, #0
 800e57e:	601a      	str	r2, [r3, #0]
    }

    // Prepare USB to receive the next packet
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e580:	4807      	ldr	r0, [pc, #28]	@ (800e5a0 <TEMPLATE_Receive+0x88>)
 800e582:	f7ff fec9 	bl	800e318 <USBD_CDC_ReceivePacket>

    return USBD_OK;
 800e586:	2300      	movs	r3, #0
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	20010f3c 	.word	0x20010f3c
 800e594:	08011308 	.word	0x08011308
 800e598:	20000f3c 	.word	0x20000f3c
 800e59c:	08011320 	.word	0x08011320
 800e5a0:	200007b4 	.word	0x200007b4

0800e5a4 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 800e5b2:	2300      	movs	r3, #0

}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	f000 faa5 	bl	800eb26 <USBD_LL_SetupStage>
}
 800e5dc:	bf00      	nop
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b082      	sub	sp, #8
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e5f6:	78fa      	ldrb	r2, [r7, #3]
 800e5f8:	6879      	ldr	r1, [r7, #4]
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4413      	add	r3, r2
 800e600:	00db      	lsls	r3, r3, #3
 800e602:	440b      	add	r3, r1
 800e604:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	78fb      	ldrb	r3, [r7, #3]
 800e60c:	4619      	mov	r1, r3
 800e60e:	f000 fadf 	bl	800ebd0 <USBD_LL_DataOutStage>
}
 800e612:	bf00      	nop
 800e614:	3708      	adds	r7, #8
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b082      	sub	sp, #8
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
 800e622:	460b      	mov	r3, r1
 800e624:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e62c:	78fa      	ldrb	r2, [r7, #3]
 800e62e:	6879      	ldr	r1, [r7, #4]
 800e630:	4613      	mov	r3, r2
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	4413      	add	r3, r2
 800e636:	00db      	lsls	r3, r3, #3
 800e638:	440b      	add	r3, r1
 800e63a:	3328      	adds	r3, #40	@ 0x28
 800e63c:	681a      	ldr	r2, [r3, #0]
 800e63e:	78fb      	ldrb	r3, [r7, #3]
 800e640:	4619      	mov	r1, r3
 800e642:	f000 fb78 	bl	800ed36 <USBD_LL_DataInStage>
}
 800e646:	bf00      	nop
 800e648:	3708      	adds	r7, #8
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e64e:	b580      	push	{r7, lr}
 800e650:	b082      	sub	sp, #8
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e65c:	4618      	mov	r0, r3
 800e65e:	f000 fc7e 	bl	800ef5e <USBD_LL_SOF>
}
 800e662:	bf00      	nop
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b084      	sub	sp, #16
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e672:	2301      	movs	r3, #1
 800e674:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	79db      	ldrb	r3, [r3, #7]
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	d001      	beq.n	800e682 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e67e:	f7f2 fcb1 	bl	8000fe4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e688:	7bfa      	ldrb	r2, [r7, #15]
 800e68a:	4611      	mov	r1, r2
 800e68c:	4618      	mov	r0, r3
 800e68e:	f000 fc56 	bl	800ef3e <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e698:	4618      	mov	r0, r3
 800e69a:	f000 fbfe 	bl	800ee9a <USBD_LL_Reset>
}
 800e69e:	bf00      	nop
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
	...

0800e6a8 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	4a19      	ldr	r2, [pc, #100]	@ (800e718 <USBD_LL_Init+0x70>)
 800e6b4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6be:	2340      	movs	r3, #64	@ 0x40
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	f7f5 fee8 	bl	8004498 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6ce:	2380      	movs	r3, #128	@ 0x80
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	2180      	movs	r1, #128	@ 0x80
 800e6d4:	f7f5 fee0 	bl	8004498 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6de:	23c0      	movs	r3, #192	@ 0xc0
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	2181      	movs	r1, #129	@ 0x81
 800e6e4:	f7f5 fed8 	bl	8004498 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	2101      	movs	r1, #1
 800e6f6:	f7f5 fecf 	bl	8004498 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e700:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800e704:	2200      	movs	r2, #0
 800e706:	2182      	movs	r1, #130	@ 0x82
 800e708:	f7f5 fec6 	bl	8004498 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	200004d0 	.word	0x200004d0

0800e71c <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7f4 fb98 	bl	8002e60 <HAL_PCD_Start>
 800e730:	4603      	mov	r3, r0
 800e732:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800e734:	7bfb      	ldrb	r3, [r7, #15]
 800e736:	4618      	mov	r0, r3
 800e738:	f000 f916 	bl	800e968 <USBD_Get_USB_Status>
 800e73c:	4603      	mov	r3, r0
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3710      	adds	r7, #16
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800e746:	b580      	push	{r7, lr}
 800e748:	b084      	sub	sp, #16
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
 800e74e:	4608      	mov	r0, r1
 800e750:	4611      	mov	r1, r2
 800e752:	461a      	mov	r2, r3
 800e754:	4603      	mov	r3, r0
 800e756:	70fb      	strb	r3, [r7, #3]
 800e758:	460b      	mov	r3, r1
 800e75a:	70bb      	strb	r3, [r7, #2]
 800e75c:	4613      	mov	r3, r2
 800e75e:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e766:	78bb      	ldrb	r3, [r7, #2]
 800e768:	883a      	ldrh	r2, [r7, #0]
 800e76a:	78f9      	ldrb	r1, [r7, #3]
 800e76c:	f7f4 fcc7 	bl	80030fe <HAL_PCD_EP_Open>
 800e770:	4603      	mov	r3, r0
 800e772:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e774:	7bfb      	ldrb	r3, [r7, #15]
 800e776:	4618      	mov	r0, r3
 800e778:	f000 f8f6 	bl	800e968 <USBD_Get_USB_Status>
 800e77c:	4603      	mov	r3, r0
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3710      	adds	r7, #16
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}

0800e786 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e786:	b580      	push	{r7, lr}
 800e788:	b084      	sub	sp, #16
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
 800e78e:	460b      	mov	r3, r1
 800e790:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e798:	78fa      	ldrb	r2, [r7, #3]
 800e79a:	4611      	mov	r1, r2
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7f4 fd0f 	bl	80031c0 <HAL_PCD_EP_Close>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e7a6:	7bfb      	ldrb	r3, [r7, #15]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f000 f8dd 	bl	800e968 <USBD_Get_USB_Status>
 800e7ae:	4603      	mov	r3, r0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3710      	adds	r7, #16
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7ca:	78fa      	ldrb	r2, [r7, #3]
 800e7cc:	4611      	mov	r1, r2
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7f4 fdc2 	bl	8003358 <HAL_PCD_EP_SetStall>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e7d8:	7bfb      	ldrb	r3, [r7, #15]
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f000 f8c4 	bl	800e968 <USBD_Get_USB_Status>
 800e7e0:	4603      	mov	r3, r0
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3710      	adds	r7, #16
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b084      	sub	sp, #16
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7fc:	78fa      	ldrb	r2, [r7, #3]
 800e7fe:	4611      	mov	r1, r2
 800e800:	4618      	mov	r0, r3
 800e802:	f7f4 fdfd 	bl	8003400 <HAL_PCD_EP_ClrStall>
 800e806:	4603      	mov	r3, r0
 800e808:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e80a:	7bfb      	ldrb	r3, [r7, #15]
 800e80c:	4618      	mov	r0, r3
 800e80e:	f000 f8ab 	bl	800e968 <USBD_Get_USB_Status>
 800e812:	4603      	mov	r3, r0
}
 800e814:	4618      	mov	r0, r3
 800e816:	3710      	adds	r7, #16
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b085      	sub	sp, #20
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	460b      	mov	r3, r1
 800e826:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e82e:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800e830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e834:	2b00      	cmp	r3, #0
 800e836:	da0b      	bge.n	800e850 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e838:	78fb      	ldrb	r3, [r7, #3]
 800e83a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e83e:	68f9      	ldr	r1, [r7, #12]
 800e840:	4613      	mov	r3, r2
 800e842:	009b      	lsls	r3, r3, #2
 800e844:	4413      	add	r3, r2
 800e846:	00db      	lsls	r3, r3, #3
 800e848:	440b      	add	r3, r1
 800e84a:	3316      	adds	r3, #22
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	e00b      	b.n	800e868 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e850:	78fb      	ldrb	r3, [r7, #3]
 800e852:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e856:	68f9      	ldr	r1, [r7, #12]
 800e858:	4613      	mov	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	4413      	add	r3, r2
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	440b      	add	r3, r1
 800e862:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800e866:	781b      	ldrb	r3, [r3, #0]
      }
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3714      	adds	r7, #20
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	460b      	mov	r3, r1
 800e87e:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e886:	78fa      	ldrb	r2, [r7, #3]
 800e888:	4611      	mov	r1, r2
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7f4 fc13 	bl	80030b6 <HAL_PCD_SetAddress>
 800e890:	4603      	mov	r3, r0
 800e892:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e894:	7bfb      	ldrb	r3, [r7, #15]
 800e896:	4618      	mov	r0, r3
 800e898:	f000 f866 	bl	800e968 <USBD_Get_USB_Status>
 800e89c:	4603      	mov	r3, r0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b086      	sub	sp, #24
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	60f8      	str	r0, [r7, #12]
 800e8ae:	607a      	str	r2, [r7, #4]
 800e8b0:	603b      	str	r3, [r7, #0]
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e8bc:	7af9      	ldrb	r1, [r7, #11]
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	f7f4 fd11 	bl	80032e8 <HAL_PCD_EP_Transmit>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e8ca:	7dfb      	ldrb	r3, [r7, #23]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f000 f84b 	bl	800e968 <USBD_Get_USB_Status>
 800e8d2:	4603      	mov	r3, r0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3718      	adds	r7, #24
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b086      	sub	sp, #24
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	607a      	str	r2, [r7, #4]
 800e8e6:	603b      	str	r3, [r7, #0]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e8f2:	7af9      	ldrb	r1, [r7, #11]
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	f7f4 fcac 	bl	8003254 <HAL_PCD_EP_Receive>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e900:	7dfb      	ldrb	r3, [r7, #23]
 800e902:	4618      	mov	r0, r3
 800e904:	f000 f830 	bl	800e968 <USBD_Get_USB_Status>
 800e908:	4603      	mov	r3, r0
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3718      	adds	r7, #24
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b082      	sub	sp, #8
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
 800e91a:	460b      	mov	r3, r1
 800e91c:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e924:	78fa      	ldrb	r2, [r7, #3]
 800e926:	4611      	mov	r1, r2
 800e928:	4618      	mov	r0, r3
 800e92a:	f7f4 fcc5 	bl	80032b8 <HAL_PCD_EP_GetRxCount>
 800e92e:	4603      	mov	r3, r0
}
 800e930:	4618      	mov	r0, r3
 800e932:	3708      	adds	r7, #8
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800e940:	4b03      	ldr	r3, [pc, #12]	@ (800e950 <USBD_static_malloc+0x18>)
}
 800e942:	4618      	mov	r0, r3
 800e944:	370c      	adds	r7, #12
 800e946:	46bd      	mov	sp, r7
 800e948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94c:	4770      	bx	lr
 800e94e:	bf00      	nop
 800e950:	20010f40 	.word	0x20010f40

0800e954 <USBD_static_free>:

void USBD_static_free(void *p)
{
 800e954:	b480      	push	{r7}
 800e956:	b083      	sub	sp, #12
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800e95c:	bf00      	nop
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	4603      	mov	r3, r0
 800e970:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800e972:	2300      	movs	r3, #0
 800e974:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800e976:	79fb      	ldrb	r3, [r7, #7]
 800e978:	2b03      	cmp	r3, #3
 800e97a:	d817      	bhi.n	800e9ac <USBD_Get_USB_Status+0x44>
 800e97c:	a201      	add	r2, pc, #4	@ (adr r2, 800e984 <USBD_Get_USB_Status+0x1c>)
 800e97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e982:	bf00      	nop
 800e984:	0800e995 	.word	0x0800e995
 800e988:	0800e99b 	.word	0x0800e99b
 800e98c:	0800e9a1 	.word	0x0800e9a1
 800e990:	0800e9a7 	.word	0x0800e9a7
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800e994:	2300      	movs	r3, #0
 800e996:	73fb      	strb	r3, [r7, #15]
             break;
 800e998:	e00b      	b.n	800e9b2 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800e99a:	2303      	movs	r3, #3
 800e99c:	73fb      	strb	r3, [r7, #15]
             break;
 800e99e:	e008      	b.n	800e9b2 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	73fb      	strb	r3, [r7, #15]
             break;
 800e9a4:	e005      	b.n	800e9b2 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800e9a6:	2303      	movs	r3, #3
 800e9a8:	73fb      	strb	r3, [r7, #15]
             break;
 800e9aa:	e002      	b.n	800e9b2 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800e9ac:	2303      	movs	r3, #3
 800e9ae:	73fb      	strb	r3, [r7, #15]
             break;
 800e9b0:	bf00      	nop
      }
      return usb_status;
 800e9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3714      	adds	r7, #20
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr

0800e9c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b086      	sub	sp, #24
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d101      	bne.n	800e9d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e9d4:	2303      	movs	r3, #3
 800e9d6:	e01f      	b.n	800ea18 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d003      	beq.n	800e9fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	68ba      	ldr	r2, [r7, #8]
 800e9fa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2201      	movs	r2, #1
 800ea02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	79fa      	ldrb	r2, [r7, #7]
 800ea0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f7ff fe4b 	bl	800e6a8 <USBD_LL_Init>
 800ea12:	4603      	mov	r3, r0
 800ea14:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ea16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3718      	adds	r7, #24
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d101      	bne.n	800ea38 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ea34:	2303      	movs	r3, #3
 800ea36:	e025      	b.n	800ea84 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	683a      	ldr	r2, [r7, #0]
 800ea3c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	32ae      	adds	r2, #174	@ 0xae
 800ea4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d00f      	beq.n	800ea74 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	32ae      	adds	r2, #174	@ 0xae
 800ea5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea64:	f107 020e 	add.w	r2, r7, #14
 800ea68:	4610      	mov	r0, r2
 800ea6a:	4798      	blx	r3
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ea7a:	1c5a      	adds	r2, r3, #1
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ea82:	2300      	movs	r3, #0
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3710      	adds	r7, #16
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b082      	sub	sp, #8
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7ff fe41 	bl	800e71c <USBD_LL_Start>
 800ea9a:	4603      	mov	r3, r0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3708      	adds	r7, #8
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eaac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	370c      	adds	r7, #12
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr

0800eaba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b084      	sub	sp, #16
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	460b      	mov	r3, r1
 800eac4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eac6:	2300      	movs	r3, #0
 800eac8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d009      	beq.n	800eae8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	78fa      	ldrb	r2, [r7, #3]
 800eade:	4611      	mov	r1, r2
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	4798      	blx	r3
 800eae4:	4603      	mov	r3, r0
 800eae6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3710      	adds	r7, #16
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b084      	sub	sp, #16
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
 800eafa:	460b      	mov	r3, r1
 800eafc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eafe:	2300      	movs	r3, #0
 800eb00:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	78fa      	ldrb	r2, [r7, #3]
 800eb0c:	4611      	mov	r1, r2
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	4798      	blx	r3
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d001      	beq.n	800eb1c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800eb18:	2303      	movs	r3, #3
 800eb1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eb1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b084      	sub	sp, #16
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	6078      	str	r0, [r7, #4]
 800eb2e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb36:	6839      	ldr	r1, [r7, #0]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f001 f846 	bl	800fbca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2201      	movs	r2, #1
 800eb42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eb5a:	f003 031f 	and.w	r3, r3, #31
 800eb5e:	2b02      	cmp	r3, #2
 800eb60:	d01a      	beq.n	800eb98 <USBD_LL_SetupStage+0x72>
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d822      	bhi.n	800ebac <USBD_LL_SetupStage+0x86>
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d002      	beq.n	800eb70 <USBD_LL_SetupStage+0x4a>
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d00a      	beq.n	800eb84 <USBD_LL_SetupStage+0x5e>
 800eb6e:	e01d      	b.n	800ebac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb76:	4619      	mov	r1, r3
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 fa9d 	bl	800f0b8 <USBD_StdDevReq>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	73fb      	strb	r3, [r7, #15]
      break;
 800eb82:	e020      	b.n	800ebc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 fb05 	bl	800f19c <USBD_StdItfReq>
 800eb92:	4603      	mov	r3, r0
 800eb94:	73fb      	strb	r3, [r7, #15]
      break;
 800eb96:	e016      	b.n	800ebc6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb9e:	4619      	mov	r1, r3
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f000 fb67 	bl	800f274 <USBD_StdEPReq>
 800eba6:	4603      	mov	r3, r0
 800eba8:	73fb      	strb	r3, [r7, #15]
      break;
 800ebaa:	e00c      	b.n	800ebc6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ebb2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	4619      	mov	r1, r3
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f7ff fdfc 	bl	800e7b8 <USBD_LL_StallEP>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	73fb      	strb	r3, [r7, #15]
      break;
 800ebc4:	bf00      	nop
  }

  return ret;
 800ebc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b086      	sub	sp, #24
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	460b      	mov	r3, r1
 800ebda:	607a      	str	r2, [r7, #4]
 800ebdc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ebe2:	7afb      	ldrb	r3, [r7, #11]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d16e      	bne.n	800ecc6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ebee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ebf6:	2b03      	cmp	r3, #3
 800ebf8:	f040 8098 	bne.w	800ed2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	689a      	ldr	r2, [r3, #8]
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	68db      	ldr	r3, [r3, #12]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d913      	bls.n	800ec30 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	689a      	ldr	r2, [r3, #8]
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	1ad2      	subs	r2, r2, r3
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	68da      	ldr	r2, [r3, #12]
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	bf28      	it	cs
 800ec22:	4613      	movcs	r3, r2
 800ec24:	461a      	mov	r2, r3
 800ec26:	6879      	ldr	r1, [r7, #4]
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f001 f9cf 	bl	800ffcc <USBD_CtlContinueRx>
 800ec2e:	e07d      	b.n	800ed2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ec36:	f003 031f 	and.w	r3, r3, #31
 800ec3a:	2b02      	cmp	r3, #2
 800ec3c:	d014      	beq.n	800ec68 <USBD_LL_DataOutStage+0x98>
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	d81d      	bhi.n	800ec7e <USBD_LL_DataOutStage+0xae>
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d002      	beq.n	800ec4c <USBD_LL_DataOutStage+0x7c>
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d003      	beq.n	800ec52 <USBD_LL_DataOutStage+0x82>
 800ec4a:	e018      	b.n	800ec7e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	75bb      	strb	r3, [r7, #22]
            break;
 800ec50:	e018      	b.n	800ec84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	68f8      	ldr	r0, [r7, #12]
 800ec5e:	f000 f99e 	bl	800ef9e <USBD_CoreFindIF>
 800ec62:	4603      	mov	r3, r0
 800ec64:	75bb      	strb	r3, [r7, #22]
            break;
 800ec66:	e00d      	b.n	800ec84 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	4619      	mov	r1, r3
 800ec72:	68f8      	ldr	r0, [r7, #12]
 800ec74:	f000 f9a0 	bl	800efb8 <USBD_CoreFindEP>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	75bb      	strb	r3, [r7, #22]
            break;
 800ec7c:	e002      	b.n	800ec84 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	75bb      	strb	r3, [r7, #22]
            break;
 800ec82:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ec84:	7dbb      	ldrb	r3, [r7, #22]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d119      	bne.n	800ecbe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec90:	b2db      	uxtb	r3, r3
 800ec92:	2b03      	cmp	r3, #3
 800ec94:	d113      	bne.n	800ecbe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ec96:	7dba      	ldrb	r2, [r7, #22]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	32ae      	adds	r2, #174	@ 0xae
 800ec9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eca0:	691b      	ldr	r3, [r3, #16]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00b      	beq.n	800ecbe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800eca6:	7dba      	ldrb	r2, [r7, #22]
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ecae:	7dba      	ldrb	r2, [r7, #22]
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	32ae      	adds	r2, #174	@ 0xae
 800ecb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecb8:	691b      	ldr	r3, [r3, #16]
 800ecba:	68f8      	ldr	r0, [r7, #12]
 800ecbc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f001 f995 	bl	800ffee <USBD_CtlSendStatus>
 800ecc4:	e032      	b.n	800ed2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ecc6:	7afb      	ldrb	r3, [r7, #11]
 800ecc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	4619      	mov	r1, r3
 800ecd0:	68f8      	ldr	r0, [r7, #12]
 800ecd2:	f000 f971 	bl	800efb8 <USBD_CoreFindEP>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ecda:	7dbb      	ldrb	r3, [r7, #22]
 800ecdc:	2bff      	cmp	r3, #255	@ 0xff
 800ecde:	d025      	beq.n	800ed2c <USBD_LL_DataOutStage+0x15c>
 800ece0:	7dbb      	ldrb	r3, [r7, #22]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d122      	bne.n	800ed2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecec:	b2db      	uxtb	r3, r3
 800ecee:	2b03      	cmp	r3, #3
 800ecf0:	d117      	bne.n	800ed22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ecf2:	7dba      	ldrb	r2, [r7, #22]
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	32ae      	adds	r2, #174	@ 0xae
 800ecf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecfc:	699b      	ldr	r3, [r3, #24]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d00f      	beq.n	800ed22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ed02:	7dba      	ldrb	r2, [r7, #22]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ed0a:	7dba      	ldrb	r2, [r7, #22]
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	32ae      	adds	r2, #174	@ 0xae
 800ed10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed14:	699b      	ldr	r3, [r3, #24]
 800ed16:	7afa      	ldrb	r2, [r7, #11]
 800ed18:	4611      	mov	r1, r2
 800ed1a:	68f8      	ldr	r0, [r7, #12]
 800ed1c:	4798      	blx	r3
 800ed1e:	4603      	mov	r3, r0
 800ed20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ed22:	7dfb      	ldrb	r3, [r7, #23]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d001      	beq.n	800ed2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ed28:	7dfb      	ldrb	r3, [r7, #23]
 800ed2a:	e000      	b.n	800ed2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ed2c:	2300      	movs	r3, #0
}
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3718      	adds	r7, #24
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b086      	sub	sp, #24
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	60f8      	str	r0, [r7, #12]
 800ed3e:	460b      	mov	r3, r1
 800ed40:	607a      	str	r2, [r7, #4]
 800ed42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ed44:	7afb      	ldrb	r3, [r7, #11]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d16f      	bne.n	800ee2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	3314      	adds	r3, #20
 800ed4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ed56:	2b02      	cmp	r3, #2
 800ed58:	d15a      	bne.n	800ee10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	689a      	ldr	r2, [r3, #8]
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d914      	bls.n	800ed90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	689a      	ldr	r2, [r3, #8]
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	1ad2      	subs	r2, r2, r3
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	461a      	mov	r2, r3
 800ed7a:	6879      	ldr	r1, [r7, #4]
 800ed7c:	68f8      	ldr	r0, [r7, #12]
 800ed7e:	f001 f8f7 	bl	800ff70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed82:	2300      	movs	r3, #0
 800ed84:	2200      	movs	r2, #0
 800ed86:	2100      	movs	r1, #0
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f7ff fda7 	bl	800e8dc <USBD_LL_PrepareReceive>
 800ed8e:	e03f      	b.n	800ee10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	68da      	ldr	r2, [r3, #12]
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	689b      	ldr	r3, [r3, #8]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d11c      	bne.n	800edd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	685a      	ldr	r2, [r3, #4]
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d316      	bcc.n	800edd6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	685a      	ldr	r2, [r3, #4]
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d20f      	bcs.n	800edd6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800edb6:	2200      	movs	r2, #0
 800edb8:	2100      	movs	r1, #0
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	f001 f8d8 	bl	800ff70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edc8:	2300      	movs	r3, #0
 800edca:	2200      	movs	r2, #0
 800edcc:	2100      	movs	r1, #0
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	f7ff fd84 	bl	800e8dc <USBD_LL_PrepareReceive>
 800edd4:	e01c      	b.n	800ee10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	2b03      	cmp	r3, #3
 800ede0:	d10f      	bne.n	800ee02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d009      	beq.n	800ee02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2200      	movs	r2, #0
 800edf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	68f8      	ldr	r0, [r7, #12]
 800ee00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee02:	2180      	movs	r1, #128	@ 0x80
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f7ff fcd7 	bl	800e7b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ee0a:	68f8      	ldr	r0, [r7, #12]
 800ee0c:	f001 f902 	bl	8010014 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d03a      	beq.n	800ee90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ee1a:	68f8      	ldr	r0, [r7, #12]
 800ee1c:	f7ff fe42 	bl	800eaa4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2200      	movs	r2, #0
 800ee24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ee28:	e032      	b.n	800ee90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ee2a:	7afb      	ldrb	r3, [r7, #11]
 800ee2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ee30:	b2db      	uxtb	r3, r3
 800ee32:	4619      	mov	r1, r3
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f000 f8bf 	bl	800efb8 <USBD_CoreFindEP>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ee3e:	7dfb      	ldrb	r3, [r7, #23]
 800ee40:	2bff      	cmp	r3, #255	@ 0xff
 800ee42:	d025      	beq.n	800ee90 <USBD_LL_DataInStage+0x15a>
 800ee44:	7dfb      	ldrb	r3, [r7, #23]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d122      	bne.n	800ee90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	2b03      	cmp	r3, #3
 800ee54:	d11c      	bne.n	800ee90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ee56:	7dfa      	ldrb	r2, [r7, #23]
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	32ae      	adds	r2, #174	@ 0xae
 800ee5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee60:	695b      	ldr	r3, [r3, #20]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d014      	beq.n	800ee90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ee66:	7dfa      	ldrb	r2, [r7, #23]
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ee6e:	7dfa      	ldrb	r2, [r7, #23]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	32ae      	adds	r2, #174	@ 0xae
 800ee74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee78:	695b      	ldr	r3, [r3, #20]
 800ee7a:	7afa      	ldrb	r2, [r7, #11]
 800ee7c:	4611      	mov	r1, r2
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	4798      	blx	r3
 800ee82:	4603      	mov	r3, r0
 800ee84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ee86:	7dbb      	ldrb	r3, [r7, #22]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d001      	beq.n	800ee90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ee8c:	7dbb      	ldrb	r3, [r7, #22]
 800ee8e:	e000      	b.n	800ee92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3718      	adds	r7, #24
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}

0800ee9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ee9a:	b580      	push	{r7, lr}
 800ee9c:	b084      	sub	sp, #16
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800eea2:	2300      	movs	r3, #0
 800eea4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2201      	movs	r2, #1
 800eeaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2200      	movs	r2, #0
 800eec0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2200      	movs	r2, #0
 800eec8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d014      	beq.n	800ef00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00e      	beq.n	800ef00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	6852      	ldr	r2, [r2, #4]
 800eeee:	b2d2      	uxtb	r2, r2
 800eef0:	4611      	mov	r1, r2
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	4798      	blx	r3
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d001      	beq.n	800ef00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800eefc:	2303      	movs	r3, #3
 800eefe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef00:	2340      	movs	r3, #64	@ 0x40
 800ef02:	2200      	movs	r2, #0
 800ef04:	2100      	movs	r1, #0
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f7ff fc1d 	bl	800e746 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2240      	movs	r2, #64	@ 0x40
 800ef18:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef1c:	2340      	movs	r3, #64	@ 0x40
 800ef1e:	2200      	movs	r2, #0
 800ef20:	2180      	movs	r1, #128	@ 0x80
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f7ff fc0f 	bl	800e746 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2240      	movs	r2, #64	@ 0x40
 800ef32:	621a      	str	r2, [r3, #32]

  return ret;
 800ef34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ef3e:	b480      	push	{r7}
 800ef40:	b083      	sub	sp, #12
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	460b      	mov	r3, r1
 800ef48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	78fa      	ldrb	r2, [r7, #3]
 800ef4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ef50:	2300      	movs	r3, #0
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	370c      	adds	r7, #12
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr

0800ef5e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ef5e:	b580      	push	{r7, lr}
 800ef60:	b082      	sub	sp, #8
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	2b03      	cmp	r3, #3
 800ef70:	d110      	bne.n	800ef94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d00b      	beq.n	800ef94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef82:	69db      	ldr	r3, [r3, #28]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d005      	beq.n	800ef94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef8e:	69db      	ldr	r3, [r3, #28]
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ef94:	2300      	movs	r3, #0
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3708      	adds	r7, #8
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}

0800ef9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ef9e:	b480      	push	{r7}
 800efa0:	b083      	sub	sp, #12
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	460b      	mov	r3, r1
 800efa8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800efaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800efac:	4618      	mov	r0, r3
 800efae:	370c      	adds	r7, #12
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr

0800efb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	460b      	mov	r3, r1
 800efc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800efc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	370c      	adds	r7, #12
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr

0800efd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b086      	sub	sp, #24
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	460b      	mov	r3, r1
 800efdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800efe6:	2300      	movs	r3, #0
 800efe8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	885b      	ldrh	r3, [r3, #2]
 800efee:	b29b      	uxth	r3, r3
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	7812      	ldrb	r2, [r2, #0]
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d91f      	bls.n	800f038 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800effe:	e013      	b.n	800f028 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f000:	f107 030a 	add.w	r3, r7, #10
 800f004:	4619      	mov	r1, r3
 800f006:	6978      	ldr	r0, [r7, #20]
 800f008:	f000 f81b 	bl	800f042 <USBD_GetNextDesc>
 800f00c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	785b      	ldrb	r3, [r3, #1]
 800f012:	2b05      	cmp	r3, #5
 800f014:	d108      	bne.n	800f028 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	789b      	ldrb	r3, [r3, #2]
 800f01e:	78fa      	ldrb	r2, [r7, #3]
 800f020:	429a      	cmp	r2, r3
 800f022:	d008      	beq.n	800f036 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f024:	2300      	movs	r3, #0
 800f026:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	885b      	ldrh	r3, [r3, #2]
 800f02c:	b29a      	uxth	r2, r3
 800f02e:	897b      	ldrh	r3, [r7, #10]
 800f030:	429a      	cmp	r2, r3
 800f032:	d8e5      	bhi.n	800f000 <USBD_GetEpDesc+0x2e>
 800f034:	e000      	b.n	800f038 <USBD_GetEpDesc+0x66>
          break;
 800f036:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f038:	693b      	ldr	r3, [r7, #16]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3718      	adds	r7, #24
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}

0800f042 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f042:	b480      	push	{r7}
 800f044:	b085      	sub	sp, #20
 800f046:	af00      	add	r7, sp, #0
 800f048:	6078      	str	r0, [r7, #4]
 800f04a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	881b      	ldrh	r3, [r3, #0]
 800f054:	68fa      	ldr	r2, [r7, #12]
 800f056:	7812      	ldrb	r2, [r2, #0]
 800f058:	4413      	add	r3, r2
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	461a      	mov	r2, r3
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4413      	add	r3, r2
 800f06a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f06c:	68fb      	ldr	r3, [r7, #12]
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3714      	adds	r7, #20
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr

0800f07a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f07a:	b480      	push	{r7}
 800f07c:	b087      	sub	sp, #28
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	3301      	adds	r3, #1
 800f090:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f098:	8a3b      	ldrh	r3, [r7, #16]
 800f09a:	021b      	lsls	r3, r3, #8
 800f09c:	b21a      	sxth	r2, r3
 800f09e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	b21b      	sxth	r3, r3
 800f0a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f0a8:	89fb      	ldrh	r3, [r7, #14]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	371c      	adds	r7, #28
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr
	...

0800f0b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f0ce:	2b40      	cmp	r3, #64	@ 0x40
 800f0d0:	d005      	beq.n	800f0de <USBD_StdDevReq+0x26>
 800f0d2:	2b40      	cmp	r3, #64	@ 0x40
 800f0d4:	d857      	bhi.n	800f186 <USBD_StdDevReq+0xce>
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d00f      	beq.n	800f0fa <USBD_StdDevReq+0x42>
 800f0da:	2b20      	cmp	r3, #32
 800f0dc:	d153      	bne.n	800f186 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	32ae      	adds	r2, #174	@ 0xae
 800f0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0ec:	689b      	ldr	r3, [r3, #8]
 800f0ee:	6839      	ldr	r1, [r7, #0]
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	4798      	blx	r3
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	73fb      	strb	r3, [r7, #15]
      break;
 800f0f8:	e04a      	b.n	800f190 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	785b      	ldrb	r3, [r3, #1]
 800f0fe:	2b09      	cmp	r3, #9
 800f100:	d83b      	bhi.n	800f17a <USBD_StdDevReq+0xc2>
 800f102:	a201      	add	r2, pc, #4	@ (adr r2, 800f108 <USBD_StdDevReq+0x50>)
 800f104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f108:	0800f15d 	.word	0x0800f15d
 800f10c:	0800f171 	.word	0x0800f171
 800f110:	0800f17b 	.word	0x0800f17b
 800f114:	0800f167 	.word	0x0800f167
 800f118:	0800f17b 	.word	0x0800f17b
 800f11c:	0800f13b 	.word	0x0800f13b
 800f120:	0800f131 	.word	0x0800f131
 800f124:	0800f17b 	.word	0x0800f17b
 800f128:	0800f153 	.word	0x0800f153
 800f12c:	0800f145 	.word	0x0800f145
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f130:	6839      	ldr	r1, [r7, #0]
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f000 fa3c 	bl	800f5b0 <USBD_GetDescriptor>
          break;
 800f138:	e024      	b.n	800f184 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f13a:	6839      	ldr	r1, [r7, #0]
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f000 fba1 	bl	800f884 <USBD_SetAddress>
          break;
 800f142:	e01f      	b.n	800f184 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f144:	6839      	ldr	r1, [r7, #0]
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 fbe0 	bl	800f90c <USBD_SetConfig>
 800f14c:	4603      	mov	r3, r0
 800f14e:	73fb      	strb	r3, [r7, #15]
          break;
 800f150:	e018      	b.n	800f184 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f152:	6839      	ldr	r1, [r7, #0]
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 fc83 	bl	800fa60 <USBD_GetConfig>
          break;
 800f15a:	e013      	b.n	800f184 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f15c:	6839      	ldr	r1, [r7, #0]
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 fcb4 	bl	800facc <USBD_GetStatus>
          break;
 800f164:	e00e      	b.n	800f184 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f166:	6839      	ldr	r1, [r7, #0]
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f000 fce3 	bl	800fb34 <USBD_SetFeature>
          break;
 800f16e:	e009      	b.n	800f184 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f170:	6839      	ldr	r1, [r7, #0]
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 fd07 	bl	800fb86 <USBD_ClrFeature>
          break;
 800f178:	e004      	b.n	800f184 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f17a:	6839      	ldr	r1, [r7, #0]
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f000 fd5e 	bl	800fc3e <USBD_CtlError>
          break;
 800f182:	bf00      	nop
      }
      break;
 800f184:	e004      	b.n	800f190 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f186:	6839      	ldr	r1, [r7, #0]
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f000 fd58 	bl	800fc3e <USBD_CtlError>
      break;
 800f18e:	bf00      	nop
  }

  return ret;
 800f190:	7bfb      	ldrb	r3, [r7, #15]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3710      	adds	r7, #16
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop

0800f19c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f1b2:	2b40      	cmp	r3, #64	@ 0x40
 800f1b4:	d005      	beq.n	800f1c2 <USBD_StdItfReq+0x26>
 800f1b6:	2b40      	cmp	r3, #64	@ 0x40
 800f1b8:	d852      	bhi.n	800f260 <USBD_StdItfReq+0xc4>
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d001      	beq.n	800f1c2 <USBD_StdItfReq+0x26>
 800f1be:	2b20      	cmp	r3, #32
 800f1c0:	d14e      	bne.n	800f260 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	3b01      	subs	r3, #1
 800f1cc:	2b02      	cmp	r3, #2
 800f1ce:	d840      	bhi.n	800f252 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	889b      	ldrh	r3, [r3, #4]
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d836      	bhi.n	800f248 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	889b      	ldrh	r3, [r3, #4]
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	4619      	mov	r1, r3
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7ff fedb 	bl	800ef9e <USBD_CoreFindIF>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f1ec:	7bbb      	ldrb	r3, [r7, #14]
 800f1ee:	2bff      	cmp	r3, #255	@ 0xff
 800f1f0:	d01d      	beq.n	800f22e <USBD_StdItfReq+0x92>
 800f1f2:	7bbb      	ldrb	r3, [r7, #14]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d11a      	bne.n	800f22e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f1f8:	7bba      	ldrb	r2, [r7, #14]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	32ae      	adds	r2, #174	@ 0xae
 800f1fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f202:	689b      	ldr	r3, [r3, #8]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00f      	beq.n	800f228 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f208:	7bba      	ldrb	r2, [r7, #14]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f210:	7bba      	ldrb	r2, [r7, #14]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	32ae      	adds	r2, #174	@ 0xae
 800f216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	6839      	ldr	r1, [r7, #0]
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	4798      	blx	r3
 800f222:	4603      	mov	r3, r0
 800f224:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f226:	e004      	b.n	800f232 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f228:	2303      	movs	r3, #3
 800f22a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f22c:	e001      	b.n	800f232 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f22e:	2303      	movs	r3, #3
 800f230:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	88db      	ldrh	r3, [r3, #6]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d110      	bne.n	800f25c <USBD_StdItfReq+0xc0>
 800f23a:	7bfb      	ldrb	r3, [r7, #15]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d10d      	bne.n	800f25c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 fed4 	bl	800ffee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f246:	e009      	b.n	800f25c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f248:	6839      	ldr	r1, [r7, #0]
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 fcf7 	bl	800fc3e <USBD_CtlError>
          break;
 800f250:	e004      	b.n	800f25c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f252:	6839      	ldr	r1, [r7, #0]
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 fcf2 	bl	800fc3e <USBD_CtlError>
          break;
 800f25a:	e000      	b.n	800f25e <USBD_StdItfReq+0xc2>
          break;
 800f25c:	bf00      	nop
      }
      break;
 800f25e:	e004      	b.n	800f26a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f260:	6839      	ldr	r1, [r7, #0]
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 fceb 	bl	800fc3e <USBD_CtlError>
      break;
 800f268:	bf00      	nop
  }

  return ret;
 800f26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b084      	sub	sp, #16
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f27e:	2300      	movs	r3, #0
 800f280:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	889b      	ldrh	r3, [r3, #4]
 800f286:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f290:	2b40      	cmp	r3, #64	@ 0x40
 800f292:	d007      	beq.n	800f2a4 <USBD_StdEPReq+0x30>
 800f294:	2b40      	cmp	r3, #64	@ 0x40
 800f296:	f200 817f 	bhi.w	800f598 <USBD_StdEPReq+0x324>
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d02a      	beq.n	800f2f4 <USBD_StdEPReq+0x80>
 800f29e:	2b20      	cmp	r3, #32
 800f2a0:	f040 817a 	bne.w	800f598 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f2a4:	7bbb      	ldrb	r3, [r7, #14]
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7ff fe85 	bl	800efb8 <USBD_CoreFindEP>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f2b2:	7b7b      	ldrb	r3, [r7, #13]
 800f2b4:	2bff      	cmp	r3, #255	@ 0xff
 800f2b6:	f000 8174 	beq.w	800f5a2 <USBD_StdEPReq+0x32e>
 800f2ba:	7b7b      	ldrb	r3, [r7, #13]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f040 8170 	bne.w	800f5a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f2c2:	7b7a      	ldrb	r2, [r7, #13]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f2ca:	7b7a      	ldrb	r2, [r7, #13]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	32ae      	adds	r2, #174	@ 0xae
 800f2d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	f000 8163 	beq.w	800f5a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f2dc:	7b7a      	ldrb	r2, [r7, #13]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	32ae      	adds	r2, #174	@ 0xae
 800f2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	6839      	ldr	r1, [r7, #0]
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	4798      	blx	r3
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f2f2:	e156      	b.n	800f5a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	785b      	ldrb	r3, [r3, #1]
 800f2f8:	2b03      	cmp	r3, #3
 800f2fa:	d008      	beq.n	800f30e <USBD_StdEPReq+0x9a>
 800f2fc:	2b03      	cmp	r3, #3
 800f2fe:	f300 8145 	bgt.w	800f58c <USBD_StdEPReq+0x318>
 800f302:	2b00      	cmp	r3, #0
 800f304:	f000 809b 	beq.w	800f43e <USBD_StdEPReq+0x1ca>
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d03c      	beq.n	800f386 <USBD_StdEPReq+0x112>
 800f30c:	e13e      	b.n	800f58c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f314:	b2db      	uxtb	r3, r3
 800f316:	2b02      	cmp	r3, #2
 800f318:	d002      	beq.n	800f320 <USBD_StdEPReq+0xac>
 800f31a:	2b03      	cmp	r3, #3
 800f31c:	d016      	beq.n	800f34c <USBD_StdEPReq+0xd8>
 800f31e:	e02c      	b.n	800f37a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f320:	7bbb      	ldrb	r3, [r7, #14]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00d      	beq.n	800f342 <USBD_StdEPReq+0xce>
 800f326:	7bbb      	ldrb	r3, [r7, #14]
 800f328:	2b80      	cmp	r3, #128	@ 0x80
 800f32a:	d00a      	beq.n	800f342 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f32c:	7bbb      	ldrb	r3, [r7, #14]
 800f32e:	4619      	mov	r1, r3
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f7ff fa41 	bl	800e7b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f336:	2180      	movs	r1, #128	@ 0x80
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7ff fa3d 	bl	800e7b8 <USBD_LL_StallEP>
 800f33e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f340:	e020      	b.n	800f384 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f342:	6839      	ldr	r1, [r7, #0]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 fc7a 	bl	800fc3e <USBD_CtlError>
              break;
 800f34a:	e01b      	b.n	800f384 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	885b      	ldrh	r3, [r3, #2]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d10e      	bne.n	800f372 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f354:	7bbb      	ldrb	r3, [r7, #14]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d00b      	beq.n	800f372 <USBD_StdEPReq+0xfe>
 800f35a:	7bbb      	ldrb	r3, [r7, #14]
 800f35c:	2b80      	cmp	r3, #128	@ 0x80
 800f35e:	d008      	beq.n	800f372 <USBD_StdEPReq+0xfe>
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	88db      	ldrh	r3, [r3, #6]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d104      	bne.n	800f372 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f368:	7bbb      	ldrb	r3, [r7, #14]
 800f36a:	4619      	mov	r1, r3
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7ff fa23 	bl	800e7b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 fe3b 	bl	800ffee <USBD_CtlSendStatus>

              break;
 800f378:	e004      	b.n	800f384 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f37a:	6839      	ldr	r1, [r7, #0]
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 fc5e 	bl	800fc3e <USBD_CtlError>
              break;
 800f382:	bf00      	nop
          }
          break;
 800f384:	e107      	b.n	800f596 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	2b02      	cmp	r3, #2
 800f390:	d002      	beq.n	800f398 <USBD_StdEPReq+0x124>
 800f392:	2b03      	cmp	r3, #3
 800f394:	d016      	beq.n	800f3c4 <USBD_StdEPReq+0x150>
 800f396:	e04b      	b.n	800f430 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f398:	7bbb      	ldrb	r3, [r7, #14]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d00d      	beq.n	800f3ba <USBD_StdEPReq+0x146>
 800f39e:	7bbb      	ldrb	r3, [r7, #14]
 800f3a0:	2b80      	cmp	r3, #128	@ 0x80
 800f3a2:	d00a      	beq.n	800f3ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3a4:	7bbb      	ldrb	r3, [r7, #14]
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f7ff fa05 	bl	800e7b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3ae:	2180      	movs	r1, #128	@ 0x80
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f7ff fa01 	bl	800e7b8 <USBD_LL_StallEP>
 800f3b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f3b8:	e040      	b.n	800f43c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f3ba:	6839      	ldr	r1, [r7, #0]
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 fc3e 	bl	800fc3e <USBD_CtlError>
              break;
 800f3c2:	e03b      	b.n	800f43c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	885b      	ldrh	r3, [r3, #2]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d136      	bne.n	800f43a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f3cc:	7bbb      	ldrb	r3, [r7, #14]
 800f3ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d004      	beq.n	800f3e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f3d6:	7bbb      	ldrb	r3, [r7, #14]
 800f3d8:	4619      	mov	r1, r3
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f7ff fa05 	bl	800e7ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 fe04 	bl	800ffee <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f3e6:	7bbb      	ldrb	r3, [r7, #14]
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7ff fde4 	bl	800efb8 <USBD_CoreFindEP>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f3f4:	7b7b      	ldrb	r3, [r7, #13]
 800f3f6:	2bff      	cmp	r3, #255	@ 0xff
 800f3f8:	d01f      	beq.n	800f43a <USBD_StdEPReq+0x1c6>
 800f3fa:	7b7b      	ldrb	r3, [r7, #13]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d11c      	bne.n	800f43a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f400:	7b7a      	ldrb	r2, [r7, #13]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f408:	7b7a      	ldrb	r2, [r7, #13]
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	32ae      	adds	r2, #174	@ 0xae
 800f40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d010      	beq.n	800f43a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f418:	7b7a      	ldrb	r2, [r7, #13]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	32ae      	adds	r2, #174	@ 0xae
 800f41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	6839      	ldr	r1, [r7, #0]
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	4798      	blx	r3
 800f42a:	4603      	mov	r3, r0
 800f42c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f42e:	e004      	b.n	800f43a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f430:	6839      	ldr	r1, [r7, #0]
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f000 fc03 	bl	800fc3e <USBD_CtlError>
              break;
 800f438:	e000      	b.n	800f43c <USBD_StdEPReq+0x1c8>
              break;
 800f43a:	bf00      	nop
          }
          break;
 800f43c:	e0ab      	b.n	800f596 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f444:	b2db      	uxtb	r3, r3
 800f446:	2b02      	cmp	r3, #2
 800f448:	d002      	beq.n	800f450 <USBD_StdEPReq+0x1dc>
 800f44a:	2b03      	cmp	r3, #3
 800f44c:	d032      	beq.n	800f4b4 <USBD_StdEPReq+0x240>
 800f44e:	e097      	b.n	800f580 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f450:	7bbb      	ldrb	r3, [r7, #14]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d007      	beq.n	800f466 <USBD_StdEPReq+0x1f2>
 800f456:	7bbb      	ldrb	r3, [r7, #14]
 800f458:	2b80      	cmp	r3, #128	@ 0x80
 800f45a:	d004      	beq.n	800f466 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f45c:	6839      	ldr	r1, [r7, #0]
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 fbed 	bl	800fc3e <USBD_CtlError>
                break;
 800f464:	e091      	b.n	800f58a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f466:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	da0b      	bge.n	800f486 <USBD_StdEPReq+0x212>
 800f46e:	7bbb      	ldrb	r3, [r7, #14]
 800f470:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f474:	4613      	mov	r3, r2
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	4413      	add	r3, r2
 800f47a:	009b      	lsls	r3, r3, #2
 800f47c:	3310      	adds	r3, #16
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	4413      	add	r3, r2
 800f482:	3304      	adds	r3, #4
 800f484:	e00b      	b.n	800f49e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f486:	7bbb      	ldrb	r3, [r7, #14]
 800f488:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f48c:	4613      	mov	r3, r2
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	4413      	add	r3, r2
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	4413      	add	r3, r2
 800f49c:	3304      	adds	r3, #4
 800f49e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	2202      	movs	r2, #2
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 fd44 	bl	800ff3a <USBD_CtlSendData>
              break;
 800f4b2:	e06a      	b.n	800f58a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f4b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	da11      	bge.n	800f4e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f4bc:	7bbb      	ldrb	r3, [r7, #14]
 800f4be:	f003 020f 	and.w	r2, r3, #15
 800f4c2:	6879      	ldr	r1, [r7, #4]
 800f4c4:	4613      	mov	r3, r2
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	4413      	add	r3, r2
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	440b      	add	r3, r1
 800f4ce:	3324      	adds	r3, #36	@ 0x24
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d117      	bne.n	800f506 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 fbb0 	bl	800fc3e <USBD_CtlError>
                  break;
 800f4de:	e054      	b.n	800f58a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f4e0:	7bbb      	ldrb	r3, [r7, #14]
 800f4e2:	f003 020f 	and.w	r2, r3, #15
 800f4e6:	6879      	ldr	r1, [r7, #4]
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	4413      	add	r3, r2
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	440b      	add	r3, r1
 800f4f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f4f6:	881b      	ldrh	r3, [r3, #0]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d104      	bne.n	800f506 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f4fc:	6839      	ldr	r1, [r7, #0]
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 fb9d 	bl	800fc3e <USBD_CtlError>
                  break;
 800f504:	e041      	b.n	800f58a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f506:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	da0b      	bge.n	800f526 <USBD_StdEPReq+0x2b2>
 800f50e:	7bbb      	ldrb	r3, [r7, #14]
 800f510:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f514:	4613      	mov	r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	4413      	add	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	3310      	adds	r3, #16
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	4413      	add	r3, r2
 800f522:	3304      	adds	r3, #4
 800f524:	e00b      	b.n	800f53e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f526:	7bbb      	ldrb	r3, [r7, #14]
 800f528:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f52c:	4613      	mov	r3, r2
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	4413      	add	r3, r2
 800f532:	009b      	lsls	r3, r3, #2
 800f534:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	4413      	add	r3, r2
 800f53c:	3304      	adds	r3, #4
 800f53e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f540:	7bbb      	ldrb	r3, [r7, #14]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d002      	beq.n	800f54c <USBD_StdEPReq+0x2d8>
 800f546:	7bbb      	ldrb	r3, [r7, #14]
 800f548:	2b80      	cmp	r3, #128	@ 0x80
 800f54a:	d103      	bne.n	800f554 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	2200      	movs	r2, #0
 800f550:	601a      	str	r2, [r3, #0]
 800f552:	e00e      	b.n	800f572 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f554:	7bbb      	ldrb	r3, [r7, #14]
 800f556:	4619      	mov	r1, r3
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f7ff f95f 	bl	800e81c <USBD_LL_IsStallEP>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d003      	beq.n	800f56c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	2201      	movs	r2, #1
 800f568:	601a      	str	r2, [r3, #0]
 800f56a:	e002      	b.n	800f572 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	2200      	movs	r2, #0
 800f570:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2202      	movs	r2, #2
 800f576:	4619      	mov	r1, r3
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f000 fcde 	bl	800ff3a <USBD_CtlSendData>
              break;
 800f57e:	e004      	b.n	800f58a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f580:	6839      	ldr	r1, [r7, #0]
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f000 fb5b 	bl	800fc3e <USBD_CtlError>
              break;
 800f588:	bf00      	nop
          }
          break;
 800f58a:	e004      	b.n	800f596 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f58c:	6839      	ldr	r1, [r7, #0]
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 fb55 	bl	800fc3e <USBD_CtlError>
          break;
 800f594:	bf00      	nop
      }
      break;
 800f596:	e005      	b.n	800f5a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f598:	6839      	ldr	r1, [r7, #0]
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 fb4f 	bl	800fc3e <USBD_CtlError>
      break;
 800f5a0:	e000      	b.n	800f5a4 <USBD_StdEPReq+0x330>
      break;
 800f5a2:	bf00      	nop
  }

  return ret;
 800f5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
	...

0800f5b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	885b      	ldrh	r3, [r3, #2]
 800f5ca:	0a1b      	lsrs	r3, r3, #8
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	3b01      	subs	r3, #1
 800f5d0:	2b06      	cmp	r3, #6
 800f5d2:	f200 8128 	bhi.w	800f826 <USBD_GetDescriptor+0x276>
 800f5d6:	a201      	add	r2, pc, #4	@ (adr r2, 800f5dc <USBD_GetDescriptor+0x2c>)
 800f5d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5dc:	0800f5f9 	.word	0x0800f5f9
 800f5e0:	0800f611 	.word	0x0800f611
 800f5e4:	0800f651 	.word	0x0800f651
 800f5e8:	0800f827 	.word	0x0800f827
 800f5ec:	0800f827 	.word	0x0800f827
 800f5f0:	0800f7c7 	.word	0x0800f7c7
 800f5f4:	0800f7f3 	.word	0x0800f7f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	7c12      	ldrb	r2, [r2, #16]
 800f604:	f107 0108 	add.w	r1, r7, #8
 800f608:	4610      	mov	r0, r2
 800f60a:	4798      	blx	r3
 800f60c:	60f8      	str	r0, [r7, #12]
      break;
 800f60e:	e112      	b.n	800f836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	7c1b      	ldrb	r3, [r3, #16]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d10d      	bne.n	800f634 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f620:	f107 0208 	add.w	r2, r7, #8
 800f624:	4610      	mov	r0, r2
 800f626:	4798      	blx	r3
 800f628:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3301      	adds	r3, #1
 800f62e:	2202      	movs	r2, #2
 800f630:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f632:	e100      	b.n	800f836 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f63c:	f107 0208 	add.w	r2, r7, #8
 800f640:	4610      	mov	r0, r2
 800f642:	4798      	blx	r3
 800f644:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	3301      	adds	r3, #1
 800f64a:	2202      	movs	r2, #2
 800f64c:	701a      	strb	r2, [r3, #0]
      break;
 800f64e:	e0f2      	b.n	800f836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	885b      	ldrh	r3, [r3, #2]
 800f654:	b2db      	uxtb	r3, r3
 800f656:	2b05      	cmp	r3, #5
 800f658:	f200 80ac 	bhi.w	800f7b4 <USBD_GetDescriptor+0x204>
 800f65c:	a201      	add	r2, pc, #4	@ (adr r2, 800f664 <USBD_GetDescriptor+0xb4>)
 800f65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f662:	bf00      	nop
 800f664:	0800f67d 	.word	0x0800f67d
 800f668:	0800f6b1 	.word	0x0800f6b1
 800f66c:	0800f6e5 	.word	0x0800f6e5
 800f670:	0800f719 	.word	0x0800f719
 800f674:	0800f74d 	.word	0x0800f74d
 800f678:	0800f781 	.word	0x0800f781
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d00b      	beq.n	800f6a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	7c12      	ldrb	r2, [r2, #16]
 800f694:	f107 0108 	add.w	r1, r7, #8
 800f698:	4610      	mov	r0, r2
 800f69a:	4798      	blx	r3
 800f69c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f69e:	e091      	b.n	800f7c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6a0:	6839      	ldr	r1, [r7, #0]
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 facb 	bl	800fc3e <USBD_CtlError>
            err++;
 800f6a8:	7afb      	ldrb	r3, [r7, #11]
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	72fb      	strb	r3, [r7, #11]
          break;
 800f6ae:	e089      	b.n	800f7c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d00b      	beq.n	800f6d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	7c12      	ldrb	r2, [r2, #16]
 800f6c8:	f107 0108 	add.w	r1, r7, #8
 800f6cc:	4610      	mov	r0, r2
 800f6ce:	4798      	blx	r3
 800f6d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6d2:	e077      	b.n	800f7c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6d4:	6839      	ldr	r1, [r7, #0]
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 fab1 	bl	800fc3e <USBD_CtlError>
            err++;
 800f6dc:	7afb      	ldrb	r3, [r7, #11]
 800f6de:	3301      	adds	r3, #1
 800f6e0:	72fb      	strb	r3, [r7, #11]
          break;
 800f6e2:	e06f      	b.n	800f7c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00b      	beq.n	800f708 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	7c12      	ldrb	r2, [r2, #16]
 800f6fc:	f107 0108 	add.w	r1, r7, #8
 800f700:	4610      	mov	r0, r2
 800f702:	4798      	blx	r3
 800f704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f706:	e05d      	b.n	800f7c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f708:	6839      	ldr	r1, [r7, #0]
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f000 fa97 	bl	800fc3e <USBD_CtlError>
            err++;
 800f710:	7afb      	ldrb	r3, [r7, #11]
 800f712:	3301      	adds	r3, #1
 800f714:	72fb      	strb	r3, [r7, #11]
          break;
 800f716:	e055      	b.n	800f7c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f71e:	691b      	ldr	r3, [r3, #16]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d00b      	beq.n	800f73c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f72a:	691b      	ldr	r3, [r3, #16]
 800f72c:	687a      	ldr	r2, [r7, #4]
 800f72e:	7c12      	ldrb	r2, [r2, #16]
 800f730:	f107 0108 	add.w	r1, r7, #8
 800f734:	4610      	mov	r0, r2
 800f736:	4798      	blx	r3
 800f738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f73a:	e043      	b.n	800f7c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f73c:	6839      	ldr	r1, [r7, #0]
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f000 fa7d 	bl	800fc3e <USBD_CtlError>
            err++;
 800f744:	7afb      	ldrb	r3, [r7, #11]
 800f746:	3301      	adds	r3, #1
 800f748:	72fb      	strb	r3, [r7, #11]
          break;
 800f74a:	e03b      	b.n	800f7c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f752:	695b      	ldr	r3, [r3, #20]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d00b      	beq.n	800f770 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f75e:	695b      	ldr	r3, [r3, #20]
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	7c12      	ldrb	r2, [r2, #16]
 800f764:	f107 0108 	add.w	r1, r7, #8
 800f768:	4610      	mov	r0, r2
 800f76a:	4798      	blx	r3
 800f76c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f76e:	e029      	b.n	800f7c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f770:	6839      	ldr	r1, [r7, #0]
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f000 fa63 	bl	800fc3e <USBD_CtlError>
            err++;
 800f778:	7afb      	ldrb	r3, [r7, #11]
 800f77a:	3301      	adds	r3, #1
 800f77c:	72fb      	strb	r3, [r7, #11]
          break;
 800f77e:	e021      	b.n	800f7c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f786:	699b      	ldr	r3, [r3, #24]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d00b      	beq.n	800f7a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f792:	699b      	ldr	r3, [r3, #24]
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	7c12      	ldrb	r2, [r2, #16]
 800f798:	f107 0108 	add.w	r1, r7, #8
 800f79c:	4610      	mov	r0, r2
 800f79e:	4798      	blx	r3
 800f7a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7a2:	e00f      	b.n	800f7c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f7a4:	6839      	ldr	r1, [r7, #0]
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 fa49 	bl	800fc3e <USBD_CtlError>
            err++;
 800f7ac:	7afb      	ldrb	r3, [r7, #11]
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	72fb      	strb	r3, [r7, #11]
          break;
 800f7b2:	e007      	b.n	800f7c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f7b4:	6839      	ldr	r1, [r7, #0]
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 fa41 	bl	800fc3e <USBD_CtlError>
          err++;
 800f7bc:	7afb      	ldrb	r3, [r7, #11]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f7c2:	bf00      	nop
      }
      break;
 800f7c4:	e037      	b.n	800f836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	7c1b      	ldrb	r3, [r3, #16]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d109      	bne.n	800f7e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7d6:	f107 0208 	add.w	r2, r7, #8
 800f7da:	4610      	mov	r0, r2
 800f7dc:	4798      	blx	r3
 800f7de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7e0:	e029      	b.n	800f836 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f7e2:	6839      	ldr	r1, [r7, #0]
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 fa2a 	bl	800fc3e <USBD_CtlError>
        err++;
 800f7ea:	7afb      	ldrb	r3, [r7, #11]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	72fb      	strb	r3, [r7, #11]
      break;
 800f7f0:	e021      	b.n	800f836 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	7c1b      	ldrb	r3, [r3, #16]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d10d      	bne.n	800f816 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f802:	f107 0208 	add.w	r2, r7, #8
 800f806:	4610      	mov	r0, r2
 800f808:	4798      	blx	r3
 800f80a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	3301      	adds	r3, #1
 800f810:	2207      	movs	r2, #7
 800f812:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f814:	e00f      	b.n	800f836 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f816:	6839      	ldr	r1, [r7, #0]
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f000 fa10 	bl	800fc3e <USBD_CtlError>
        err++;
 800f81e:	7afb      	ldrb	r3, [r7, #11]
 800f820:	3301      	adds	r3, #1
 800f822:	72fb      	strb	r3, [r7, #11]
      break;
 800f824:	e007      	b.n	800f836 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f826:	6839      	ldr	r1, [r7, #0]
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 fa08 	bl	800fc3e <USBD_CtlError>
      err++;
 800f82e:	7afb      	ldrb	r3, [r7, #11]
 800f830:	3301      	adds	r3, #1
 800f832:	72fb      	strb	r3, [r7, #11]
      break;
 800f834:	bf00      	nop
  }

  if (err != 0U)
 800f836:	7afb      	ldrb	r3, [r7, #11]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d11e      	bne.n	800f87a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	88db      	ldrh	r3, [r3, #6]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d016      	beq.n	800f872 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f844:	893b      	ldrh	r3, [r7, #8]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d00e      	beq.n	800f868 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	88da      	ldrh	r2, [r3, #6]
 800f84e:	893b      	ldrh	r3, [r7, #8]
 800f850:	4293      	cmp	r3, r2
 800f852:	bf28      	it	cs
 800f854:	4613      	movcs	r3, r2
 800f856:	b29b      	uxth	r3, r3
 800f858:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f85a:	893b      	ldrh	r3, [r7, #8]
 800f85c:	461a      	mov	r2, r3
 800f85e:	68f9      	ldr	r1, [r7, #12]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f000 fb6a 	bl	800ff3a <USBD_CtlSendData>
 800f866:	e009      	b.n	800f87c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f868:	6839      	ldr	r1, [r7, #0]
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 f9e7 	bl	800fc3e <USBD_CtlError>
 800f870:	e004      	b.n	800f87c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 fbbb 	bl	800ffee <USBD_CtlSendStatus>
 800f878:	e000      	b.n	800f87c <USBD_GetDescriptor+0x2cc>
    return;
 800f87a:	bf00      	nop
  }
}
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop

0800f884 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	889b      	ldrh	r3, [r3, #4]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d131      	bne.n	800f8fa <USBD_SetAddress+0x76>
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	88db      	ldrh	r3, [r3, #6]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d12d      	bne.n	800f8fa <USBD_SetAddress+0x76>
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	885b      	ldrh	r3, [r3, #2]
 800f8a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800f8a4:	d829      	bhi.n	800f8fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	885b      	ldrh	r3, [r3, #2]
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	2b03      	cmp	r3, #3
 800f8bc:	d104      	bne.n	800f8c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f8be:	6839      	ldr	r1, [r7, #0]
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 f9bc 	bl	800fc3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8c6:	e01d      	b.n	800f904 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	7bfa      	ldrb	r2, [r7, #15]
 800f8cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f8d0:	7bfb      	ldrb	r3, [r7, #15]
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7fe ffcd 	bl	800e874 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f000 fb87 	bl	800ffee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f8e0:	7bfb      	ldrb	r3, [r7, #15]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d004      	beq.n	800f8f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2202      	movs	r2, #2
 800f8ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8ee:	e009      	b.n	800f904 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8f8:	e004      	b.n	800f904 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f8fa:	6839      	ldr	r1, [r7, #0]
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f000 f99e 	bl	800fc3e <USBD_CtlError>
  }
}
 800f902:	bf00      	nop
 800f904:	bf00      	nop
 800f906:	3710      	adds	r7, #16
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f916:	2300      	movs	r3, #0
 800f918:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	885b      	ldrh	r3, [r3, #2]
 800f91e:	b2da      	uxtb	r2, r3
 800f920:	4b4e      	ldr	r3, [pc, #312]	@ (800fa5c <USBD_SetConfig+0x150>)
 800f922:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f924:	4b4d      	ldr	r3, [pc, #308]	@ (800fa5c <USBD_SetConfig+0x150>)
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	2b01      	cmp	r3, #1
 800f92a:	d905      	bls.n	800f938 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f92c:	6839      	ldr	r1, [r7, #0]
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 f985 	bl	800fc3e <USBD_CtlError>
    return USBD_FAIL;
 800f934:	2303      	movs	r3, #3
 800f936:	e08c      	b.n	800fa52 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f93e:	b2db      	uxtb	r3, r3
 800f940:	2b02      	cmp	r3, #2
 800f942:	d002      	beq.n	800f94a <USBD_SetConfig+0x3e>
 800f944:	2b03      	cmp	r3, #3
 800f946:	d029      	beq.n	800f99c <USBD_SetConfig+0x90>
 800f948:	e075      	b.n	800fa36 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f94a:	4b44      	ldr	r3, [pc, #272]	@ (800fa5c <USBD_SetConfig+0x150>)
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d020      	beq.n	800f994 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f952:	4b42      	ldr	r3, [pc, #264]	@ (800fa5c <USBD_SetConfig+0x150>)
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	461a      	mov	r2, r3
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f95c:	4b3f      	ldr	r3, [pc, #252]	@ (800fa5c <USBD_SetConfig+0x150>)
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	4619      	mov	r1, r3
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f7ff f8a9 	bl	800eaba <USBD_SetClassConfig>
 800f968:	4603      	mov	r3, r0
 800f96a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f96c:	7bfb      	ldrb	r3, [r7, #15]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d008      	beq.n	800f984 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f972:	6839      	ldr	r1, [r7, #0]
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f000 f962 	bl	800fc3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2202      	movs	r2, #2
 800f97e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f982:	e065      	b.n	800fa50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f000 fb32 	bl	800ffee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2203      	movs	r2, #3
 800f98e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f992:	e05d      	b.n	800fa50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f000 fb2a 	bl	800ffee <USBD_CtlSendStatus>
      break;
 800f99a:	e059      	b.n	800fa50 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f99c:	4b2f      	ldr	r3, [pc, #188]	@ (800fa5c <USBD_SetConfig+0x150>)
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d112      	bne.n	800f9ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2202      	movs	r2, #2
 800f9a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f9ac:	4b2b      	ldr	r3, [pc, #172]	@ (800fa5c <USBD_SetConfig+0x150>)
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	461a      	mov	r2, r3
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9b6:	4b29      	ldr	r3, [pc, #164]	@ (800fa5c <USBD_SetConfig+0x150>)
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	f7ff f898 	bl	800eaf2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 fb13 	bl	800ffee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9c8:	e042      	b.n	800fa50 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f9ca:	4b24      	ldr	r3, [pc, #144]	@ (800fa5c <USBD_SetConfig+0x150>)
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d02a      	beq.n	800fa2e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	4619      	mov	r1, r3
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f7ff f886 	bl	800eaf2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f9e6:	4b1d      	ldr	r3, [pc, #116]	@ (800fa5c <USBD_SetConfig+0x150>)
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f9f0:	4b1a      	ldr	r3, [pc, #104]	@ (800fa5c <USBD_SetConfig+0x150>)
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7ff f85f 	bl	800eaba <USBD_SetClassConfig>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fa00:	7bfb      	ldrb	r3, [r7, #15]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d00f      	beq.n	800fa26 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 f918 	bl	800fc3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	4619      	mov	r1, r3
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f7ff f86b 	bl	800eaf2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2202      	movs	r2, #2
 800fa20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fa24:	e014      	b.n	800fa50 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 fae1 	bl	800ffee <USBD_CtlSendStatus>
      break;
 800fa2c:	e010      	b.n	800fa50 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f000 fadd 	bl	800ffee <USBD_CtlSendStatus>
      break;
 800fa34:	e00c      	b.n	800fa50 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fa36:	6839      	ldr	r1, [r7, #0]
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 f900 	bl	800fc3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa3e:	4b07      	ldr	r3, [pc, #28]	@ (800fa5c <USBD_SetConfig+0x150>)
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	4619      	mov	r1, r3
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7ff f854 	bl	800eaf2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fa4a:	2303      	movs	r3, #3
 800fa4c:	73fb      	strb	r3, [r7, #15]
      break;
 800fa4e:	bf00      	nop
  }

  return ret;
 800fa50:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3710      	adds	r7, #16
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	20011160 	.word	0x20011160

0800fa60 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	88db      	ldrh	r3, [r3, #6]
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d004      	beq.n	800fa7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa72:	6839      	ldr	r1, [r7, #0]
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 f8e2 	bl	800fc3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa7a:	e023      	b.n	800fac4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	2b02      	cmp	r3, #2
 800fa86:	dc02      	bgt.n	800fa8e <USBD_GetConfig+0x2e>
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	dc03      	bgt.n	800fa94 <USBD_GetConfig+0x34>
 800fa8c:	e015      	b.n	800faba <USBD_GetConfig+0x5a>
 800fa8e:	2b03      	cmp	r3, #3
 800fa90:	d00b      	beq.n	800faaa <USBD_GetConfig+0x4a>
 800fa92:	e012      	b.n	800faba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2200      	movs	r2, #0
 800fa98:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	3308      	adds	r3, #8
 800fa9e:	2201      	movs	r2, #1
 800faa0:	4619      	mov	r1, r3
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 fa49 	bl	800ff3a <USBD_CtlSendData>
        break;
 800faa8:	e00c      	b.n	800fac4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	3304      	adds	r3, #4
 800faae:	2201      	movs	r2, #1
 800fab0:	4619      	mov	r1, r3
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 fa41 	bl	800ff3a <USBD_CtlSendData>
        break;
 800fab8:	e004      	b.n	800fac4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800faba:	6839      	ldr	r1, [r7, #0]
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f000 f8be 	bl	800fc3e <USBD_CtlError>
        break;
 800fac2:	bf00      	nop
}
 800fac4:	bf00      	nop
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	3b01      	subs	r3, #1
 800fae0:	2b02      	cmp	r3, #2
 800fae2:	d81e      	bhi.n	800fb22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	88db      	ldrh	r3, [r3, #6]
 800fae8:	2b02      	cmp	r3, #2
 800faea:	d004      	beq.n	800faf6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800faec:	6839      	ldr	r1, [r7, #0]
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f000 f8a5 	bl	800fc3e <USBD_CtlError>
        break;
 800faf4:	e01a      	b.n	800fb2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2201      	movs	r2, #1
 800fafa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d005      	beq.n	800fb12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	f043 0202 	orr.w	r2, r3, #2
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	330c      	adds	r3, #12
 800fb16:	2202      	movs	r2, #2
 800fb18:	4619      	mov	r1, r3
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f000 fa0d 	bl	800ff3a <USBD_CtlSendData>
      break;
 800fb20:	e004      	b.n	800fb2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fb22:	6839      	ldr	r1, [r7, #0]
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f000 f88a 	bl	800fc3e <USBD_CtlError>
      break;
 800fb2a:	bf00      	nop
  }
}
 800fb2c:	bf00      	nop
 800fb2e:	3708      	adds	r7, #8
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	885b      	ldrh	r3, [r3, #2]
 800fb42:	2b01      	cmp	r3, #1
 800fb44:	d107      	bne.n	800fb56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2201      	movs	r2, #1
 800fb4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f000 fa4d 	bl	800ffee <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fb54:	e013      	b.n	800fb7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	885b      	ldrh	r3, [r3, #2]
 800fb5a:	2b02      	cmp	r3, #2
 800fb5c:	d10b      	bne.n	800fb76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	889b      	ldrh	r3, [r3, #4]
 800fb62:	0a1b      	lsrs	r3, r3, #8
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	b2da      	uxtb	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 fa3d 	bl	800ffee <USBD_CtlSendStatus>
}
 800fb74:	e003      	b.n	800fb7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fb76:	6839      	ldr	r1, [r7, #0]
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 f860 	bl	800fc3e <USBD_CtlError>
}
 800fb7e:	bf00      	nop
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}

0800fb86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b082      	sub	sp, #8
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
 800fb8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	3b01      	subs	r3, #1
 800fb9a:	2b02      	cmp	r3, #2
 800fb9c:	d80b      	bhi.n	800fbb6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	885b      	ldrh	r3, [r3, #2]
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d10c      	bne.n	800fbc0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 fa1d 	bl	800ffee <USBD_CtlSendStatus>
      }
      break;
 800fbb4:	e004      	b.n	800fbc0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fbb6:	6839      	ldr	r1, [r7, #0]
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f000 f840 	bl	800fc3e <USBD_CtlError>
      break;
 800fbbe:	e000      	b.n	800fbc2 <USBD_ClrFeature+0x3c>
      break;
 800fbc0:	bf00      	nop
  }
}
 800fbc2:	bf00      	nop
 800fbc4:	3708      	adds	r7, #8
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}

0800fbca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fbca:	b580      	push	{r7, lr}
 800fbcc:	b084      	sub	sp, #16
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	6078      	str	r0, [r7, #4]
 800fbd2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	781a      	ldrb	r2, [r3, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	781a      	ldrb	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fbf4:	68f8      	ldr	r0, [r7, #12]
 800fbf6:	f7ff fa40 	bl	800f07a <SWAPBYTE>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	3301      	adds	r3, #1
 800fc06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fc0e:	68f8      	ldr	r0, [r7, #12]
 800fc10:	f7ff fa33 	bl	800f07a <SWAPBYTE>
 800fc14:	4603      	mov	r3, r0
 800fc16:	461a      	mov	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	3301      	adds	r3, #1
 800fc26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fc28:	68f8      	ldr	r0, [r7, #12]
 800fc2a:	f7ff fa26 	bl	800f07a <SWAPBYTE>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	461a      	mov	r2, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	80da      	strh	r2, [r3, #6]
}
 800fc36:	bf00      	nop
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}

0800fc3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc3e:	b580      	push	{r7, lr}
 800fc40:	b082      	sub	sp, #8
 800fc42:	af00      	add	r7, sp, #0
 800fc44:	6078      	str	r0, [r7, #4]
 800fc46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc48:	2180      	movs	r1, #128	@ 0x80
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7fe fdb4 	bl	800e7b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc50:	2100      	movs	r1, #0
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f7fe fdb0 	bl	800e7b8 <USBD_LL_StallEP>
}
 800fc58:	bf00      	nop
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d036      	beq.n	800fce4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fc7a:	6938      	ldr	r0, [r7, #16]
 800fc7c:	f000 f836 	bl	800fcec <USBD_GetLen>
 800fc80:	4603      	mov	r3, r0
 800fc82:	3301      	adds	r3, #1
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	005b      	lsls	r3, r3, #1
 800fc88:	b29a      	uxth	r2, r3
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc8e:	7dfb      	ldrb	r3, [r7, #23]
 800fc90:	68ba      	ldr	r2, [r7, #8]
 800fc92:	4413      	add	r3, r2
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	7812      	ldrb	r2, [r2, #0]
 800fc98:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc9a:	7dfb      	ldrb	r3, [r7, #23]
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fca0:	7dfb      	ldrb	r3, [r7, #23]
 800fca2:	68ba      	ldr	r2, [r7, #8]
 800fca4:	4413      	add	r3, r2
 800fca6:	2203      	movs	r2, #3
 800fca8:	701a      	strb	r2, [r3, #0]
  idx++;
 800fcaa:	7dfb      	ldrb	r3, [r7, #23]
 800fcac:	3301      	adds	r3, #1
 800fcae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fcb0:	e013      	b.n	800fcda <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fcb2:	7dfb      	ldrb	r3, [r7, #23]
 800fcb4:	68ba      	ldr	r2, [r7, #8]
 800fcb6:	4413      	add	r3, r2
 800fcb8:	693a      	ldr	r2, [r7, #16]
 800fcba:	7812      	ldrb	r2, [r2, #0]
 800fcbc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	613b      	str	r3, [r7, #16]
    idx++;
 800fcc4:	7dfb      	ldrb	r3, [r7, #23]
 800fcc6:	3301      	adds	r3, #1
 800fcc8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fcca:	7dfb      	ldrb	r3, [r7, #23]
 800fccc:	68ba      	ldr	r2, [r7, #8]
 800fcce:	4413      	add	r3, r2
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	701a      	strb	r2, [r3, #0]
    idx++;
 800fcd4:	7dfb      	ldrb	r3, [r7, #23]
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d1e7      	bne.n	800fcb2 <USBD_GetString+0x52>
 800fce2:	e000      	b.n	800fce6 <USBD_GetString+0x86>
    return;
 800fce4:	bf00      	nop
  }
}
 800fce6:	3718      	adds	r7, #24
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b085      	sub	sp, #20
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fcfc:	e005      	b.n	800fd0a <USBD_GetLen+0x1e>
  {
    len++;
 800fcfe:	7bfb      	ldrb	r3, [r7, #15]
 800fd00:	3301      	adds	r3, #1
 800fd02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	3301      	adds	r3, #1
 800fd08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d1f5      	bne.n	800fcfe <USBD_GetLen+0x12>
  }

  return len;
 800fd12:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3714      	adds	r7, #20
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr

0800fd20 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	4603      	mov	r3, r0
 800fd28:	6039      	str	r1, [r7, #0]
 800fd2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	2212      	movs	r2, #18
 800fd30:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800fd32:	4b03      	ldr	r3, [pc, #12]	@ (800fd40 <USBD_Class_DeviceDescriptor+0x20>)
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	370c      	adds	r7, #12
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr
 800fd40:	200000f0 	.word	0x200000f0

0800fd44 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	6039      	str	r1, [r7, #0]
 800fd4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	2204      	movs	r2, #4
 800fd54:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800fd56:	4b03      	ldr	r3, [pc, #12]	@ (800fd64 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr
 800fd64:	20000104 	.word	0x20000104

0800fd68 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	4603      	mov	r3, r0
 800fd70:	6039      	str	r1, [r7, #0]
 800fd72:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800fd74:	79fb      	ldrb	r3, [r7, #7]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d105      	bne.n	800fd86 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800fd7a:	683a      	ldr	r2, [r7, #0]
 800fd7c:	4907      	ldr	r1, [pc, #28]	@ (800fd9c <USBD_Class_ProductStrDescriptor+0x34>)
 800fd7e:	4808      	ldr	r0, [pc, #32]	@ (800fda0 <USBD_Class_ProductStrDescriptor+0x38>)
 800fd80:	f7ff ff6e 	bl	800fc60 <USBD_GetString>
 800fd84:	e004      	b.n	800fd90 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800fd86:	683a      	ldr	r2, [r7, #0]
 800fd88:	4904      	ldr	r1, [pc, #16]	@ (800fd9c <USBD_Class_ProductStrDescriptor+0x34>)
 800fd8a:	4805      	ldr	r0, [pc, #20]	@ (800fda0 <USBD_Class_ProductStrDescriptor+0x38>)
 800fd8c:	f7ff ff68 	bl	800fc60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd90:	4b02      	ldr	r3, [pc, #8]	@ (800fd9c <USBD_Class_ProductStrDescriptor+0x34>)
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3708      	adds	r7, #8
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	20011164 	.word	0x20011164
 800fda0:	08011344 	.word	0x08011344

0800fda4 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	4603      	mov	r3, r0
 800fdac:	6039      	str	r1, [r7, #0]
 800fdae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fdb0:	683a      	ldr	r2, [r7, #0]
 800fdb2:	4904      	ldr	r1, [pc, #16]	@ (800fdc4 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800fdb4:	4804      	ldr	r0, [pc, #16]	@ (800fdc8 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800fdb6:	f7ff ff53 	bl	800fc60 <USBD_GetString>
  return USBD_StrDesc;
 800fdba:	4b02      	ldr	r3, [pc, #8]	@ (800fdc4 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3708      	adds	r7, #8
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}
 800fdc4:	20011164 	.word	0x20011164
 800fdc8:	0801135c 	.word	0x0801135c

0800fdcc <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	6039      	str	r1, [r7, #0]
 800fdd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	221a      	movs	r2, #26
 800fddc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800fdde:	f000 f843 	bl	800fe68 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800fde2:	4b02      	ldr	r3, [pc, #8]	@ (800fdec <USBD_Class_SerialStrDescriptor+0x20>)
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	3708      	adds	r7, #8
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}
 800fdec:	20000108 	.word	0x20000108

0800fdf0 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	6039      	str	r1, [r7, #0]
 800fdfa:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800fdfc:	79fb      	ldrb	r3, [r7, #7]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d105      	bne.n	800fe0e <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800fe02:	683a      	ldr	r2, [r7, #0]
 800fe04:	4907      	ldr	r1, [pc, #28]	@ (800fe24 <USBD_Class_ConfigStrDescriptor+0x34>)
 800fe06:	4808      	ldr	r0, [pc, #32]	@ (800fe28 <USBD_Class_ConfigStrDescriptor+0x38>)
 800fe08:	f7ff ff2a 	bl	800fc60 <USBD_GetString>
 800fe0c:	e004      	b.n	800fe18 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800fe0e:	683a      	ldr	r2, [r7, #0]
 800fe10:	4904      	ldr	r1, [pc, #16]	@ (800fe24 <USBD_Class_ConfigStrDescriptor+0x34>)
 800fe12:	4805      	ldr	r0, [pc, #20]	@ (800fe28 <USBD_Class_ConfigStrDescriptor+0x38>)
 800fe14:	f7ff ff24 	bl	800fc60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe18:	4b02      	ldr	r3, [pc, #8]	@ (800fe24 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3708      	adds	r7, #8
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	20011164 	.word	0x20011164
 800fe28:	08011370 	.word	0x08011370

0800fe2c <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	4603      	mov	r3, r0
 800fe34:	6039      	str	r1, [r7, #0]
 800fe36:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800fe38:	79fb      	ldrb	r3, [r7, #7]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d105      	bne.n	800fe4a <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800fe3e:	683a      	ldr	r2, [r7, #0]
 800fe40:	4907      	ldr	r1, [pc, #28]	@ (800fe60 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800fe42:	4808      	ldr	r0, [pc, #32]	@ (800fe64 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800fe44:	f7ff ff0c 	bl	800fc60 <USBD_GetString>
 800fe48:	e004      	b.n	800fe54 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800fe4a:	683a      	ldr	r2, [r7, #0]
 800fe4c:	4904      	ldr	r1, [pc, #16]	@ (800fe60 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800fe4e:	4805      	ldr	r0, [pc, #20]	@ (800fe64 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800fe50:	f7ff ff06 	bl	800fc60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe54:	4b02      	ldr	r3, [pc, #8]	@ (800fe60 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3708      	adds	r7, #8
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	20011164 	.word	0x20011164
 800fe64:	0801137c 	.word	0x0801137c

0800fe68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b084      	sub	sp, #16
 800fe6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800fe6e:	4b0f      	ldr	r3, [pc, #60]	@ (800feac <Get_SerialNum+0x44>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800fe74:	4b0e      	ldr	r3, [pc, #56]	@ (800feb0 <Get_SerialNum+0x48>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800fe7a:	4b0e      	ldr	r3, [pc, #56]	@ (800feb4 <Get_SerialNum+0x4c>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fe80:	68fa      	ldr	r2, [r7, #12]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	4413      	add	r3, r2
 800fe86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d009      	beq.n	800fea2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800fe8e:	2208      	movs	r2, #8
 800fe90:	4909      	ldr	r1, [pc, #36]	@ (800feb8 <Get_SerialNum+0x50>)
 800fe92:	68f8      	ldr	r0, [r7, #12]
 800fe94:	f000 f814 	bl	800fec0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800fe98:	2204      	movs	r2, #4
 800fe9a:	4908      	ldr	r1, [pc, #32]	@ (800febc <Get_SerialNum+0x54>)
 800fe9c:	68b8      	ldr	r0, [r7, #8]
 800fe9e:	f000 f80f 	bl	800fec0 <IntToUnicode>
  }
}
 800fea2:	bf00      	nop
 800fea4:	3710      	adds	r7, #16
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
 800feaa:	bf00      	nop
 800feac:	08fff800 	.word	0x08fff800
 800feb0:	08fff804 	.word	0x08fff804
 800feb4:	08fff808 	.word	0x08fff808
 800feb8:	2000010a 	.word	0x2000010a
 800febc:	2000011a 	.word	0x2000011a

0800fec0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800fec0:	b480      	push	{r7}
 800fec2:	b087      	sub	sp, #28
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	4613      	mov	r3, r2
 800fecc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800fece:	2300      	movs	r3, #0
 800fed0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800fed2:	2300      	movs	r3, #0
 800fed4:	75fb      	strb	r3, [r7, #23]
 800fed6:	e025      	b.n	800ff24 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	0f1b      	lsrs	r3, r3, #28
 800fedc:	2b09      	cmp	r3, #9
 800fede:	d80a      	bhi.n	800fef6 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	0f1b      	lsrs	r3, r3, #28
 800fee4:	b2da      	uxtb	r2, r3
 800fee6:	7dfb      	ldrb	r3, [r7, #23]
 800fee8:	005b      	lsls	r3, r3, #1
 800feea:	68b9      	ldr	r1, [r7, #8]
 800feec:	440b      	add	r3, r1
 800feee:	3230      	adds	r2, #48	@ 0x30
 800fef0:	b2d2      	uxtb	r2, r2
 800fef2:	701a      	strb	r2, [r3, #0]
 800fef4:	e009      	b.n	800ff0a <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	0f1b      	lsrs	r3, r3, #28
 800fefa:	b2da      	uxtb	r2, r3
 800fefc:	7dfb      	ldrb	r3, [r7, #23]
 800fefe:	005b      	lsls	r3, r3, #1
 800ff00:	68b9      	ldr	r1, [r7, #8]
 800ff02:	440b      	add	r3, r1
 800ff04:	3237      	adds	r2, #55	@ 0x37
 800ff06:	b2d2      	uxtb	r2, r2
 800ff08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	011b      	lsls	r3, r3, #4
 800ff0e:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800ff10:	7dfb      	ldrb	r3, [r7, #23]
 800ff12:	005b      	lsls	r3, r3, #1
 800ff14:	3301      	adds	r3, #1
 800ff16:	68ba      	ldr	r2, [r7, #8]
 800ff18:	4413      	add	r3, r2
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800ff1e:	7dfb      	ldrb	r3, [r7, #23]
 800ff20:	3301      	adds	r3, #1
 800ff22:	75fb      	strb	r3, [r7, #23]
 800ff24:	7dfa      	ldrb	r2, [r7, #23]
 800ff26:	79fb      	ldrb	r3, [r7, #7]
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d3d5      	bcc.n	800fed8 <IntToUnicode+0x18>
  }
}
 800ff2c:	bf00      	nop
 800ff2e:	bf00      	nop
 800ff30:	371c      	adds	r7, #28
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr

0800ff3a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b084      	sub	sp, #16
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	60f8      	str	r0, [r7, #12]
 800ff42:	60b9      	str	r1, [r7, #8]
 800ff44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2202      	movs	r2, #2
 800ff4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	68ba      	ldr	r2, [r7, #8]
 800ff5e:	2100      	movs	r1, #0
 800ff60:	68f8      	ldr	r0, [r7, #12]
 800ff62:	f7fe fca0 	bl	800e8a6 <USBD_LL_Transmit>

  return USBD_OK;
 800ff66:	2300      	movs	r3, #0
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	68ba      	ldr	r2, [r7, #8]
 800ff80:	2100      	movs	r1, #0
 800ff82:	68f8      	ldr	r0, [r7, #12]
 800ff84:	f7fe fc8f 	bl	800e8a6 <USBD_LL_Transmit>

  return USBD_OK;
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3710      	adds	r7, #16
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}

0800ff92 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ff92:	b580      	push	{r7, lr}
 800ff94:	b084      	sub	sp, #16
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	60f8      	str	r0, [r7, #12]
 800ff9a:	60b9      	str	r1, [r7, #8]
 800ff9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2203      	movs	r2, #3
 800ffa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	687a      	ldr	r2, [r7, #4]
 800ffb2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	68ba      	ldr	r2, [r7, #8]
 800ffba:	2100      	movs	r1, #0
 800ffbc:	68f8      	ldr	r0, [r7, #12]
 800ffbe:	f7fe fc8d 	bl	800e8dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ffc2:	2300      	movs	r3, #0
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3710      	adds	r7, #16
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}

0800ffcc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	60f8      	str	r0, [r7, #12]
 800ffd4:	60b9      	str	r1, [r7, #8]
 800ffd6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	68ba      	ldr	r2, [r7, #8]
 800ffdc:	2100      	movs	r1, #0
 800ffde:	68f8      	ldr	r0, [r7, #12]
 800ffe0:	f7fe fc7c 	bl	800e8dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ffe4:	2300      	movs	r3, #0
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3710      	adds	r7, #16
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}

0800ffee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ffee:	b580      	push	{r7, lr}
 800fff0:	b082      	sub	sp, #8
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2204      	movs	r2, #4
 800fffa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fffe:	2300      	movs	r3, #0
 8010000:	2200      	movs	r2, #0
 8010002:	2100      	movs	r1, #0
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f7fe fc4e 	bl	800e8a6 <USBD_LL_Transmit>

  return USBD_OK;
 801000a:	2300      	movs	r3, #0
}
 801000c:	4618      	mov	r0, r3
 801000e:	3708      	adds	r7, #8
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2205      	movs	r2, #5
 8010020:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010024:	2300      	movs	r3, #0
 8010026:	2200      	movs	r2, #0
 8010028:	2100      	movs	r1, #0
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f7fe fc56 	bl	800e8dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010030:	2300      	movs	r3, #0
}
 8010032:	4618      	mov	r0, r3
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
	...

0801003c <std>:
 801003c:	2300      	movs	r3, #0
 801003e:	b510      	push	{r4, lr}
 8010040:	4604      	mov	r4, r0
 8010042:	6083      	str	r3, [r0, #8]
 8010044:	8181      	strh	r1, [r0, #12]
 8010046:	4619      	mov	r1, r3
 8010048:	6643      	str	r3, [r0, #100]	@ 0x64
 801004a:	81c2      	strh	r2, [r0, #14]
 801004c:	2208      	movs	r2, #8
 801004e:	6183      	str	r3, [r0, #24]
 8010050:	e9c0 3300 	strd	r3, r3, [r0]
 8010054:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010058:	305c      	adds	r0, #92	@ 0x5c
 801005a:	f000 f93f 	bl	80102dc <memset>
 801005e:	4b0d      	ldr	r3, [pc, #52]	@ (8010094 <std+0x58>)
 8010060:	6224      	str	r4, [r4, #32]
 8010062:	6263      	str	r3, [r4, #36]	@ 0x24
 8010064:	4b0c      	ldr	r3, [pc, #48]	@ (8010098 <std+0x5c>)
 8010066:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010068:	4b0c      	ldr	r3, [pc, #48]	@ (801009c <std+0x60>)
 801006a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801006c:	4b0c      	ldr	r3, [pc, #48]	@ (80100a0 <std+0x64>)
 801006e:	6323      	str	r3, [r4, #48]	@ 0x30
 8010070:	4b0c      	ldr	r3, [pc, #48]	@ (80100a4 <std+0x68>)
 8010072:	429c      	cmp	r4, r3
 8010074:	d006      	beq.n	8010084 <std+0x48>
 8010076:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801007a:	4294      	cmp	r4, r2
 801007c:	d002      	beq.n	8010084 <std+0x48>
 801007e:	33d0      	adds	r3, #208	@ 0xd0
 8010080:	429c      	cmp	r4, r3
 8010082:	d105      	bne.n	8010090 <std+0x54>
 8010084:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801008c:	f000 b99e 	b.w	80103cc <__retarget_lock_init_recursive>
 8010090:	bd10      	pop	{r4, pc}
 8010092:	bf00      	nop
 8010094:	080101e5 	.word	0x080101e5
 8010098:	08010207 	.word	0x08010207
 801009c:	0801023f 	.word	0x0801023f
 80100a0:	08010263 	.word	0x08010263
 80100a4:	20011264 	.word	0x20011264

080100a8 <stdio_exit_handler>:
 80100a8:	4a02      	ldr	r2, [pc, #8]	@ (80100b4 <stdio_exit_handler+0xc>)
 80100aa:	4903      	ldr	r1, [pc, #12]	@ (80100b8 <stdio_exit_handler+0x10>)
 80100ac:	4803      	ldr	r0, [pc, #12]	@ (80100bc <stdio_exit_handler+0x14>)
 80100ae:	f000 b869 	b.w	8010184 <_fwalk_sglue>
 80100b2:	bf00      	nop
 80100b4:	20000124 	.word	0x20000124
 80100b8:	08010f3d 	.word	0x08010f3d
 80100bc:	20000134 	.word	0x20000134

080100c0 <cleanup_stdio>:
 80100c0:	6841      	ldr	r1, [r0, #4]
 80100c2:	4b0c      	ldr	r3, [pc, #48]	@ (80100f4 <cleanup_stdio+0x34>)
 80100c4:	4299      	cmp	r1, r3
 80100c6:	b510      	push	{r4, lr}
 80100c8:	4604      	mov	r4, r0
 80100ca:	d001      	beq.n	80100d0 <cleanup_stdio+0x10>
 80100cc:	f000 ff36 	bl	8010f3c <_fflush_r>
 80100d0:	68a1      	ldr	r1, [r4, #8]
 80100d2:	4b09      	ldr	r3, [pc, #36]	@ (80100f8 <cleanup_stdio+0x38>)
 80100d4:	4299      	cmp	r1, r3
 80100d6:	d002      	beq.n	80100de <cleanup_stdio+0x1e>
 80100d8:	4620      	mov	r0, r4
 80100da:	f000 ff2f 	bl	8010f3c <_fflush_r>
 80100de:	68e1      	ldr	r1, [r4, #12]
 80100e0:	4b06      	ldr	r3, [pc, #24]	@ (80100fc <cleanup_stdio+0x3c>)
 80100e2:	4299      	cmp	r1, r3
 80100e4:	d004      	beq.n	80100f0 <cleanup_stdio+0x30>
 80100e6:	4620      	mov	r0, r4
 80100e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100ec:	f000 bf26 	b.w	8010f3c <_fflush_r>
 80100f0:	bd10      	pop	{r4, pc}
 80100f2:	bf00      	nop
 80100f4:	20011264 	.word	0x20011264
 80100f8:	200112cc 	.word	0x200112cc
 80100fc:	20011334 	.word	0x20011334

08010100 <global_stdio_init.part.0>:
 8010100:	b510      	push	{r4, lr}
 8010102:	4b0b      	ldr	r3, [pc, #44]	@ (8010130 <global_stdio_init.part.0+0x30>)
 8010104:	2104      	movs	r1, #4
 8010106:	4c0b      	ldr	r4, [pc, #44]	@ (8010134 <global_stdio_init.part.0+0x34>)
 8010108:	4a0b      	ldr	r2, [pc, #44]	@ (8010138 <global_stdio_init.part.0+0x38>)
 801010a:	4620      	mov	r0, r4
 801010c:	601a      	str	r2, [r3, #0]
 801010e:	2200      	movs	r2, #0
 8010110:	f7ff ff94 	bl	801003c <std>
 8010114:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010118:	2201      	movs	r2, #1
 801011a:	2109      	movs	r1, #9
 801011c:	f7ff ff8e 	bl	801003c <std>
 8010120:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010124:	2202      	movs	r2, #2
 8010126:	2112      	movs	r1, #18
 8010128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801012c:	f7ff bf86 	b.w	801003c <std>
 8010130:	2001139c 	.word	0x2001139c
 8010134:	20011264 	.word	0x20011264
 8010138:	080100a9 	.word	0x080100a9

0801013c <__sfp_lock_acquire>:
 801013c:	4801      	ldr	r0, [pc, #4]	@ (8010144 <__sfp_lock_acquire+0x8>)
 801013e:	f000 b946 	b.w	80103ce <__retarget_lock_acquire_recursive>
 8010142:	bf00      	nop
 8010144:	200113a5 	.word	0x200113a5

08010148 <__sfp_lock_release>:
 8010148:	4801      	ldr	r0, [pc, #4]	@ (8010150 <__sfp_lock_release+0x8>)
 801014a:	f000 b941 	b.w	80103d0 <__retarget_lock_release_recursive>
 801014e:	bf00      	nop
 8010150:	200113a5 	.word	0x200113a5

08010154 <__sinit>:
 8010154:	b510      	push	{r4, lr}
 8010156:	4604      	mov	r4, r0
 8010158:	f7ff fff0 	bl	801013c <__sfp_lock_acquire>
 801015c:	6a23      	ldr	r3, [r4, #32]
 801015e:	b11b      	cbz	r3, 8010168 <__sinit+0x14>
 8010160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010164:	f7ff bff0 	b.w	8010148 <__sfp_lock_release>
 8010168:	4b04      	ldr	r3, [pc, #16]	@ (801017c <__sinit+0x28>)
 801016a:	6223      	str	r3, [r4, #32]
 801016c:	4b04      	ldr	r3, [pc, #16]	@ (8010180 <__sinit+0x2c>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d1f5      	bne.n	8010160 <__sinit+0xc>
 8010174:	f7ff ffc4 	bl	8010100 <global_stdio_init.part.0>
 8010178:	e7f2      	b.n	8010160 <__sinit+0xc>
 801017a:	bf00      	nop
 801017c:	080100c1 	.word	0x080100c1
 8010180:	2001139c 	.word	0x2001139c

08010184 <_fwalk_sglue>:
 8010184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010188:	4607      	mov	r7, r0
 801018a:	4688      	mov	r8, r1
 801018c:	4614      	mov	r4, r2
 801018e:	2600      	movs	r6, #0
 8010190:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010194:	f1b9 0901 	subs.w	r9, r9, #1
 8010198:	d505      	bpl.n	80101a6 <_fwalk_sglue+0x22>
 801019a:	6824      	ldr	r4, [r4, #0]
 801019c:	2c00      	cmp	r4, #0
 801019e:	d1f7      	bne.n	8010190 <_fwalk_sglue+0xc>
 80101a0:	4630      	mov	r0, r6
 80101a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101a6:	89ab      	ldrh	r3, [r5, #12]
 80101a8:	2b01      	cmp	r3, #1
 80101aa:	d907      	bls.n	80101bc <_fwalk_sglue+0x38>
 80101ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101b0:	3301      	adds	r3, #1
 80101b2:	d003      	beq.n	80101bc <_fwalk_sglue+0x38>
 80101b4:	4629      	mov	r1, r5
 80101b6:	4638      	mov	r0, r7
 80101b8:	47c0      	blx	r8
 80101ba:	4306      	orrs	r6, r0
 80101bc:	3568      	adds	r5, #104	@ 0x68
 80101be:	e7e9      	b.n	8010194 <_fwalk_sglue+0x10>

080101c0 <iprintf>:
 80101c0:	b40f      	push	{r0, r1, r2, r3}
 80101c2:	b507      	push	{r0, r1, r2, lr}
 80101c4:	4906      	ldr	r1, [pc, #24]	@ (80101e0 <iprintf+0x20>)
 80101c6:	ab04      	add	r3, sp, #16
 80101c8:	6808      	ldr	r0, [r1, #0]
 80101ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80101ce:	6881      	ldr	r1, [r0, #8]
 80101d0:	9301      	str	r3, [sp, #4]
 80101d2:	f000 fb85 	bl	80108e0 <_vfiprintf_r>
 80101d6:	b003      	add	sp, #12
 80101d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80101dc:	b004      	add	sp, #16
 80101de:	4770      	bx	lr
 80101e0:	20000130 	.word	0x20000130

080101e4 <__sread>:
 80101e4:	b510      	push	{r4, lr}
 80101e6:	460c      	mov	r4, r1
 80101e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ec:	f000 f8a0 	bl	8010330 <_read_r>
 80101f0:	2800      	cmp	r0, #0
 80101f2:	bfab      	itete	ge
 80101f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80101f6:	89a3      	ldrhlt	r3, [r4, #12]
 80101f8:	181b      	addge	r3, r3, r0
 80101fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80101fe:	bfac      	ite	ge
 8010200:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010202:	81a3      	strhlt	r3, [r4, #12]
 8010204:	bd10      	pop	{r4, pc}

08010206 <__swrite>:
 8010206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801020a:	461f      	mov	r7, r3
 801020c:	898b      	ldrh	r3, [r1, #12]
 801020e:	4605      	mov	r5, r0
 8010210:	460c      	mov	r4, r1
 8010212:	05db      	lsls	r3, r3, #23
 8010214:	4616      	mov	r6, r2
 8010216:	d505      	bpl.n	8010224 <__swrite+0x1e>
 8010218:	2302      	movs	r3, #2
 801021a:	2200      	movs	r2, #0
 801021c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010220:	f000 f874 	bl	801030c <_lseek_r>
 8010224:	89a3      	ldrh	r3, [r4, #12]
 8010226:	4632      	mov	r2, r6
 8010228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801022c:	4628      	mov	r0, r5
 801022e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010232:	81a3      	strh	r3, [r4, #12]
 8010234:	463b      	mov	r3, r7
 8010236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801023a:	f000 b88b 	b.w	8010354 <_write_r>

0801023e <__sseek>:
 801023e:	b510      	push	{r4, lr}
 8010240:	460c      	mov	r4, r1
 8010242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010246:	f000 f861 	bl	801030c <_lseek_r>
 801024a:	1c43      	adds	r3, r0, #1
 801024c:	89a3      	ldrh	r3, [r4, #12]
 801024e:	bf15      	itete	ne
 8010250:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010252:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010256:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801025a:	81a3      	strheq	r3, [r4, #12]
 801025c:	bf18      	it	ne
 801025e:	81a3      	strhne	r3, [r4, #12]
 8010260:	bd10      	pop	{r4, pc}

08010262 <__sclose>:
 8010262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010266:	f000 b841 	b.w	80102ec <_close_r>

0801026a <_vsniprintf_r>:
 801026a:	b530      	push	{r4, r5, lr}
 801026c:	4614      	mov	r4, r2
 801026e:	b09b      	sub	sp, #108	@ 0x6c
 8010270:	4605      	mov	r5, r0
 8010272:	461a      	mov	r2, r3
 8010274:	2c00      	cmp	r4, #0
 8010276:	da05      	bge.n	8010284 <_vsniprintf_r+0x1a>
 8010278:	238b      	movs	r3, #139	@ 0x8b
 801027a:	6003      	str	r3, [r0, #0]
 801027c:	f04f 30ff 	mov.w	r0, #4294967295
 8010280:	b01b      	add	sp, #108	@ 0x6c
 8010282:	bd30      	pop	{r4, r5, pc}
 8010284:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010288:	9100      	str	r1, [sp, #0]
 801028a:	9104      	str	r1, [sp, #16]
 801028c:	4669      	mov	r1, sp
 801028e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010292:	bf14      	ite	ne
 8010294:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010298:	4623      	moveq	r3, r4
 801029a:	9302      	str	r3, [sp, #8]
 801029c:	9305      	str	r3, [sp, #20]
 801029e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80102a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80102a6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80102a8:	f000 f9f4 	bl	8010694 <_svfiprintf_r>
 80102ac:	1c43      	adds	r3, r0, #1
 80102ae:	bfbc      	itt	lt
 80102b0:	238b      	movlt	r3, #139	@ 0x8b
 80102b2:	602b      	strlt	r3, [r5, #0]
 80102b4:	2c00      	cmp	r4, #0
 80102b6:	d0e3      	beq.n	8010280 <_vsniprintf_r+0x16>
 80102b8:	9b00      	ldr	r3, [sp, #0]
 80102ba:	2200      	movs	r2, #0
 80102bc:	701a      	strb	r2, [r3, #0]
 80102be:	e7df      	b.n	8010280 <_vsniprintf_r+0x16>

080102c0 <vsniprintf>:
 80102c0:	b507      	push	{r0, r1, r2, lr}
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	4613      	mov	r3, r2
 80102c6:	460a      	mov	r2, r1
 80102c8:	4601      	mov	r1, r0
 80102ca:	4803      	ldr	r0, [pc, #12]	@ (80102d8 <vsniprintf+0x18>)
 80102cc:	6800      	ldr	r0, [r0, #0]
 80102ce:	f7ff ffcc 	bl	801026a <_vsniprintf_r>
 80102d2:	b003      	add	sp, #12
 80102d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80102d8:	20000130 	.word	0x20000130

080102dc <memset>:
 80102dc:	4402      	add	r2, r0
 80102de:	4603      	mov	r3, r0
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d100      	bne.n	80102e6 <memset+0xa>
 80102e4:	4770      	bx	lr
 80102e6:	f803 1b01 	strb.w	r1, [r3], #1
 80102ea:	e7f9      	b.n	80102e0 <memset+0x4>

080102ec <_close_r>:
 80102ec:	b538      	push	{r3, r4, r5, lr}
 80102ee:	2300      	movs	r3, #0
 80102f0:	4d05      	ldr	r5, [pc, #20]	@ (8010308 <_close_r+0x1c>)
 80102f2:	4604      	mov	r4, r0
 80102f4:	4608      	mov	r0, r1
 80102f6:	602b      	str	r3, [r5, #0]
 80102f8:	f7f1 fb3b 	bl	8001972 <_close>
 80102fc:	1c43      	adds	r3, r0, #1
 80102fe:	d102      	bne.n	8010306 <_close_r+0x1a>
 8010300:	682b      	ldr	r3, [r5, #0]
 8010302:	b103      	cbz	r3, 8010306 <_close_r+0x1a>
 8010304:	6023      	str	r3, [r4, #0]
 8010306:	bd38      	pop	{r3, r4, r5, pc}
 8010308:	200113a0 	.word	0x200113a0

0801030c <_lseek_r>:
 801030c:	b538      	push	{r3, r4, r5, lr}
 801030e:	4604      	mov	r4, r0
 8010310:	4d06      	ldr	r5, [pc, #24]	@ (801032c <_lseek_r+0x20>)
 8010312:	4608      	mov	r0, r1
 8010314:	4611      	mov	r1, r2
 8010316:	2200      	movs	r2, #0
 8010318:	602a      	str	r2, [r5, #0]
 801031a:	461a      	mov	r2, r3
 801031c:	f7f1 fb50 	bl	80019c0 <_lseek>
 8010320:	1c43      	adds	r3, r0, #1
 8010322:	d102      	bne.n	801032a <_lseek_r+0x1e>
 8010324:	682b      	ldr	r3, [r5, #0]
 8010326:	b103      	cbz	r3, 801032a <_lseek_r+0x1e>
 8010328:	6023      	str	r3, [r4, #0]
 801032a:	bd38      	pop	{r3, r4, r5, pc}
 801032c:	200113a0 	.word	0x200113a0

08010330 <_read_r>:
 8010330:	b538      	push	{r3, r4, r5, lr}
 8010332:	4604      	mov	r4, r0
 8010334:	4d06      	ldr	r5, [pc, #24]	@ (8010350 <_read_r+0x20>)
 8010336:	4608      	mov	r0, r1
 8010338:	4611      	mov	r1, r2
 801033a:	2200      	movs	r2, #0
 801033c:	602a      	str	r2, [r5, #0]
 801033e:	461a      	mov	r2, r3
 8010340:	f7f1 fade 	bl	8001900 <_read>
 8010344:	1c43      	adds	r3, r0, #1
 8010346:	d102      	bne.n	801034e <_read_r+0x1e>
 8010348:	682b      	ldr	r3, [r5, #0]
 801034a:	b103      	cbz	r3, 801034e <_read_r+0x1e>
 801034c:	6023      	str	r3, [r4, #0]
 801034e:	bd38      	pop	{r3, r4, r5, pc}
 8010350:	200113a0 	.word	0x200113a0

08010354 <_write_r>:
 8010354:	b538      	push	{r3, r4, r5, lr}
 8010356:	4604      	mov	r4, r0
 8010358:	4d06      	ldr	r5, [pc, #24]	@ (8010374 <_write_r+0x20>)
 801035a:	4608      	mov	r0, r1
 801035c:	4611      	mov	r1, r2
 801035e:	2200      	movs	r2, #0
 8010360:	602a      	str	r2, [r5, #0]
 8010362:	461a      	mov	r2, r3
 8010364:	f7f1 fae9 	bl	800193a <_write>
 8010368:	1c43      	adds	r3, r0, #1
 801036a:	d102      	bne.n	8010372 <_write_r+0x1e>
 801036c:	682b      	ldr	r3, [r5, #0]
 801036e:	b103      	cbz	r3, 8010372 <_write_r+0x1e>
 8010370:	6023      	str	r3, [r4, #0]
 8010372:	bd38      	pop	{r3, r4, r5, pc}
 8010374:	200113a0 	.word	0x200113a0

08010378 <__errno>:
 8010378:	4b01      	ldr	r3, [pc, #4]	@ (8010380 <__errno+0x8>)
 801037a:	6818      	ldr	r0, [r3, #0]
 801037c:	4770      	bx	lr
 801037e:	bf00      	nop
 8010380:	20000130 	.word	0x20000130

08010384 <__libc_init_array>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	4d0d      	ldr	r5, [pc, #52]	@ (80103bc <__libc_init_array+0x38>)
 8010388:	2600      	movs	r6, #0
 801038a:	4c0d      	ldr	r4, [pc, #52]	@ (80103c0 <__libc_init_array+0x3c>)
 801038c:	1b64      	subs	r4, r4, r5
 801038e:	10a4      	asrs	r4, r4, #2
 8010390:	42a6      	cmp	r6, r4
 8010392:	d109      	bne.n	80103a8 <__libc_init_array+0x24>
 8010394:	4d0b      	ldr	r5, [pc, #44]	@ (80103c4 <__libc_init_array+0x40>)
 8010396:	2600      	movs	r6, #0
 8010398:	4c0b      	ldr	r4, [pc, #44]	@ (80103c8 <__libc_init_array+0x44>)
 801039a:	f000 ff7d 	bl	8011298 <_init>
 801039e:	1b64      	subs	r4, r4, r5
 80103a0:	10a4      	asrs	r4, r4, #2
 80103a2:	42a6      	cmp	r6, r4
 80103a4:	d105      	bne.n	80103b2 <__libc_init_array+0x2e>
 80103a6:	bd70      	pop	{r4, r5, r6, pc}
 80103a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80103ac:	3601      	adds	r6, #1
 80103ae:	4798      	blx	r3
 80103b0:	e7ee      	b.n	8010390 <__libc_init_array+0xc>
 80103b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80103b6:	3601      	adds	r6, #1
 80103b8:	4798      	blx	r3
 80103ba:	e7f2      	b.n	80103a2 <__libc_init_array+0x1e>
 80103bc:	08011414 	.word	0x08011414
 80103c0:	08011414 	.word	0x08011414
 80103c4:	08011414 	.word	0x08011414
 80103c8:	08011418 	.word	0x08011418

080103cc <__retarget_lock_init_recursive>:
 80103cc:	4770      	bx	lr

080103ce <__retarget_lock_acquire_recursive>:
 80103ce:	4770      	bx	lr

080103d0 <__retarget_lock_release_recursive>:
 80103d0:	4770      	bx	lr

080103d2 <memcpy>:
 80103d2:	440a      	add	r2, r1
 80103d4:	1e43      	subs	r3, r0, #1
 80103d6:	4291      	cmp	r1, r2
 80103d8:	d100      	bne.n	80103dc <memcpy+0xa>
 80103da:	4770      	bx	lr
 80103dc:	b510      	push	{r4, lr}
 80103de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103e2:	4291      	cmp	r1, r2
 80103e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103e8:	d1f9      	bne.n	80103de <memcpy+0xc>
 80103ea:	bd10      	pop	{r4, pc}

080103ec <_free_r>:
 80103ec:	b538      	push	{r3, r4, r5, lr}
 80103ee:	4605      	mov	r5, r0
 80103f0:	2900      	cmp	r1, #0
 80103f2:	d041      	beq.n	8010478 <_free_r+0x8c>
 80103f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103f8:	1f0c      	subs	r4, r1, #4
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	bfb8      	it	lt
 80103fe:	18e4      	addlt	r4, r4, r3
 8010400:	f000 f8e0 	bl	80105c4 <__malloc_lock>
 8010404:	4a1d      	ldr	r2, [pc, #116]	@ (801047c <_free_r+0x90>)
 8010406:	6813      	ldr	r3, [r2, #0]
 8010408:	b933      	cbnz	r3, 8010418 <_free_r+0x2c>
 801040a:	6063      	str	r3, [r4, #4]
 801040c:	6014      	str	r4, [r2, #0]
 801040e:	4628      	mov	r0, r5
 8010410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010414:	f000 b8dc 	b.w	80105d0 <__malloc_unlock>
 8010418:	42a3      	cmp	r3, r4
 801041a:	d908      	bls.n	801042e <_free_r+0x42>
 801041c:	6820      	ldr	r0, [r4, #0]
 801041e:	1821      	adds	r1, r4, r0
 8010420:	428b      	cmp	r3, r1
 8010422:	bf01      	itttt	eq
 8010424:	6819      	ldreq	r1, [r3, #0]
 8010426:	685b      	ldreq	r3, [r3, #4]
 8010428:	1809      	addeq	r1, r1, r0
 801042a:	6021      	streq	r1, [r4, #0]
 801042c:	e7ed      	b.n	801040a <_free_r+0x1e>
 801042e:	461a      	mov	r2, r3
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	b10b      	cbz	r3, 8010438 <_free_r+0x4c>
 8010434:	42a3      	cmp	r3, r4
 8010436:	d9fa      	bls.n	801042e <_free_r+0x42>
 8010438:	6811      	ldr	r1, [r2, #0]
 801043a:	1850      	adds	r0, r2, r1
 801043c:	42a0      	cmp	r0, r4
 801043e:	d10b      	bne.n	8010458 <_free_r+0x6c>
 8010440:	6820      	ldr	r0, [r4, #0]
 8010442:	4401      	add	r1, r0
 8010444:	1850      	adds	r0, r2, r1
 8010446:	6011      	str	r1, [r2, #0]
 8010448:	4283      	cmp	r3, r0
 801044a:	d1e0      	bne.n	801040e <_free_r+0x22>
 801044c:	6818      	ldr	r0, [r3, #0]
 801044e:	685b      	ldr	r3, [r3, #4]
 8010450:	4408      	add	r0, r1
 8010452:	6053      	str	r3, [r2, #4]
 8010454:	6010      	str	r0, [r2, #0]
 8010456:	e7da      	b.n	801040e <_free_r+0x22>
 8010458:	d902      	bls.n	8010460 <_free_r+0x74>
 801045a:	230c      	movs	r3, #12
 801045c:	602b      	str	r3, [r5, #0]
 801045e:	e7d6      	b.n	801040e <_free_r+0x22>
 8010460:	6820      	ldr	r0, [r4, #0]
 8010462:	1821      	adds	r1, r4, r0
 8010464:	428b      	cmp	r3, r1
 8010466:	bf02      	ittt	eq
 8010468:	6819      	ldreq	r1, [r3, #0]
 801046a:	685b      	ldreq	r3, [r3, #4]
 801046c:	1809      	addeq	r1, r1, r0
 801046e:	6063      	str	r3, [r4, #4]
 8010470:	bf08      	it	eq
 8010472:	6021      	streq	r1, [r4, #0]
 8010474:	6054      	str	r4, [r2, #4]
 8010476:	e7ca      	b.n	801040e <_free_r+0x22>
 8010478:	bd38      	pop	{r3, r4, r5, pc}
 801047a:	bf00      	nop
 801047c:	200113ac 	.word	0x200113ac

08010480 <sbrk_aligned>:
 8010480:	b570      	push	{r4, r5, r6, lr}
 8010482:	4e0f      	ldr	r6, [pc, #60]	@ (80104c0 <sbrk_aligned+0x40>)
 8010484:	460c      	mov	r4, r1
 8010486:	4605      	mov	r5, r0
 8010488:	6831      	ldr	r1, [r6, #0]
 801048a:	b911      	cbnz	r1, 8010492 <sbrk_aligned+0x12>
 801048c:	f000 fe2c 	bl	80110e8 <_sbrk_r>
 8010490:	6030      	str	r0, [r6, #0]
 8010492:	4621      	mov	r1, r4
 8010494:	4628      	mov	r0, r5
 8010496:	f000 fe27 	bl	80110e8 <_sbrk_r>
 801049a:	1c43      	adds	r3, r0, #1
 801049c:	d103      	bne.n	80104a6 <sbrk_aligned+0x26>
 801049e:	f04f 34ff 	mov.w	r4, #4294967295
 80104a2:	4620      	mov	r0, r4
 80104a4:	bd70      	pop	{r4, r5, r6, pc}
 80104a6:	1cc4      	adds	r4, r0, #3
 80104a8:	f024 0403 	bic.w	r4, r4, #3
 80104ac:	42a0      	cmp	r0, r4
 80104ae:	d0f8      	beq.n	80104a2 <sbrk_aligned+0x22>
 80104b0:	1a21      	subs	r1, r4, r0
 80104b2:	4628      	mov	r0, r5
 80104b4:	f000 fe18 	bl	80110e8 <_sbrk_r>
 80104b8:	3001      	adds	r0, #1
 80104ba:	d1f2      	bne.n	80104a2 <sbrk_aligned+0x22>
 80104bc:	e7ef      	b.n	801049e <sbrk_aligned+0x1e>
 80104be:	bf00      	nop
 80104c0:	200113a8 	.word	0x200113a8

080104c4 <_malloc_r>:
 80104c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104c8:	1ccd      	adds	r5, r1, #3
 80104ca:	4606      	mov	r6, r0
 80104cc:	f025 0503 	bic.w	r5, r5, #3
 80104d0:	3508      	adds	r5, #8
 80104d2:	2d0c      	cmp	r5, #12
 80104d4:	bf38      	it	cc
 80104d6:	250c      	movcc	r5, #12
 80104d8:	2d00      	cmp	r5, #0
 80104da:	db01      	blt.n	80104e0 <_malloc_r+0x1c>
 80104dc:	42a9      	cmp	r1, r5
 80104de:	d904      	bls.n	80104ea <_malloc_r+0x26>
 80104e0:	230c      	movs	r3, #12
 80104e2:	6033      	str	r3, [r6, #0]
 80104e4:	2000      	movs	r0, #0
 80104e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80105c0 <_malloc_r+0xfc>
 80104ee:	f000 f869 	bl	80105c4 <__malloc_lock>
 80104f2:	f8d8 3000 	ldr.w	r3, [r8]
 80104f6:	461c      	mov	r4, r3
 80104f8:	bb44      	cbnz	r4, 801054c <_malloc_r+0x88>
 80104fa:	4629      	mov	r1, r5
 80104fc:	4630      	mov	r0, r6
 80104fe:	f7ff ffbf 	bl	8010480 <sbrk_aligned>
 8010502:	1c43      	adds	r3, r0, #1
 8010504:	4604      	mov	r4, r0
 8010506:	d158      	bne.n	80105ba <_malloc_r+0xf6>
 8010508:	f8d8 4000 	ldr.w	r4, [r8]
 801050c:	4627      	mov	r7, r4
 801050e:	2f00      	cmp	r7, #0
 8010510:	d143      	bne.n	801059a <_malloc_r+0xd6>
 8010512:	2c00      	cmp	r4, #0
 8010514:	d04b      	beq.n	80105ae <_malloc_r+0xea>
 8010516:	6823      	ldr	r3, [r4, #0]
 8010518:	4639      	mov	r1, r7
 801051a:	4630      	mov	r0, r6
 801051c:	eb04 0903 	add.w	r9, r4, r3
 8010520:	f000 fde2 	bl	80110e8 <_sbrk_r>
 8010524:	4581      	cmp	r9, r0
 8010526:	d142      	bne.n	80105ae <_malloc_r+0xea>
 8010528:	6821      	ldr	r1, [r4, #0]
 801052a:	4630      	mov	r0, r6
 801052c:	1a6d      	subs	r5, r5, r1
 801052e:	4629      	mov	r1, r5
 8010530:	f7ff ffa6 	bl	8010480 <sbrk_aligned>
 8010534:	3001      	adds	r0, #1
 8010536:	d03a      	beq.n	80105ae <_malloc_r+0xea>
 8010538:	6823      	ldr	r3, [r4, #0]
 801053a:	442b      	add	r3, r5
 801053c:	6023      	str	r3, [r4, #0]
 801053e:	f8d8 3000 	ldr.w	r3, [r8]
 8010542:	685a      	ldr	r2, [r3, #4]
 8010544:	bb62      	cbnz	r2, 80105a0 <_malloc_r+0xdc>
 8010546:	f8c8 7000 	str.w	r7, [r8]
 801054a:	e00f      	b.n	801056c <_malloc_r+0xa8>
 801054c:	6822      	ldr	r2, [r4, #0]
 801054e:	1b52      	subs	r2, r2, r5
 8010550:	d420      	bmi.n	8010594 <_malloc_r+0xd0>
 8010552:	2a0b      	cmp	r2, #11
 8010554:	d917      	bls.n	8010586 <_malloc_r+0xc2>
 8010556:	1961      	adds	r1, r4, r5
 8010558:	42a3      	cmp	r3, r4
 801055a:	6025      	str	r5, [r4, #0]
 801055c:	bf18      	it	ne
 801055e:	6059      	strne	r1, [r3, #4]
 8010560:	6863      	ldr	r3, [r4, #4]
 8010562:	bf08      	it	eq
 8010564:	f8c8 1000 	streq.w	r1, [r8]
 8010568:	5162      	str	r2, [r4, r5]
 801056a:	604b      	str	r3, [r1, #4]
 801056c:	4630      	mov	r0, r6
 801056e:	f000 f82f 	bl	80105d0 <__malloc_unlock>
 8010572:	f104 000b 	add.w	r0, r4, #11
 8010576:	1d23      	adds	r3, r4, #4
 8010578:	f020 0007 	bic.w	r0, r0, #7
 801057c:	1ac2      	subs	r2, r0, r3
 801057e:	bf1c      	itt	ne
 8010580:	1a1b      	subne	r3, r3, r0
 8010582:	50a3      	strne	r3, [r4, r2]
 8010584:	e7af      	b.n	80104e6 <_malloc_r+0x22>
 8010586:	6862      	ldr	r2, [r4, #4]
 8010588:	42a3      	cmp	r3, r4
 801058a:	bf0c      	ite	eq
 801058c:	f8c8 2000 	streq.w	r2, [r8]
 8010590:	605a      	strne	r2, [r3, #4]
 8010592:	e7eb      	b.n	801056c <_malloc_r+0xa8>
 8010594:	4623      	mov	r3, r4
 8010596:	6864      	ldr	r4, [r4, #4]
 8010598:	e7ae      	b.n	80104f8 <_malloc_r+0x34>
 801059a:	463c      	mov	r4, r7
 801059c:	687f      	ldr	r7, [r7, #4]
 801059e:	e7b6      	b.n	801050e <_malloc_r+0x4a>
 80105a0:	461a      	mov	r2, r3
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	42a3      	cmp	r3, r4
 80105a6:	d1fb      	bne.n	80105a0 <_malloc_r+0xdc>
 80105a8:	2300      	movs	r3, #0
 80105aa:	6053      	str	r3, [r2, #4]
 80105ac:	e7de      	b.n	801056c <_malloc_r+0xa8>
 80105ae:	230c      	movs	r3, #12
 80105b0:	4630      	mov	r0, r6
 80105b2:	6033      	str	r3, [r6, #0]
 80105b4:	f000 f80c 	bl	80105d0 <__malloc_unlock>
 80105b8:	e794      	b.n	80104e4 <_malloc_r+0x20>
 80105ba:	6005      	str	r5, [r0, #0]
 80105bc:	e7d6      	b.n	801056c <_malloc_r+0xa8>
 80105be:	bf00      	nop
 80105c0:	200113ac 	.word	0x200113ac

080105c4 <__malloc_lock>:
 80105c4:	4801      	ldr	r0, [pc, #4]	@ (80105cc <__malloc_lock+0x8>)
 80105c6:	f7ff bf02 	b.w	80103ce <__retarget_lock_acquire_recursive>
 80105ca:	bf00      	nop
 80105cc:	200113a4 	.word	0x200113a4

080105d0 <__malloc_unlock>:
 80105d0:	4801      	ldr	r0, [pc, #4]	@ (80105d8 <__malloc_unlock+0x8>)
 80105d2:	f7ff befd 	b.w	80103d0 <__retarget_lock_release_recursive>
 80105d6:	bf00      	nop
 80105d8:	200113a4 	.word	0x200113a4

080105dc <__ssputs_r>:
 80105dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105e0:	461f      	mov	r7, r3
 80105e2:	688e      	ldr	r6, [r1, #8]
 80105e4:	4682      	mov	sl, r0
 80105e6:	460c      	mov	r4, r1
 80105e8:	42be      	cmp	r6, r7
 80105ea:	4690      	mov	r8, r2
 80105ec:	680b      	ldr	r3, [r1, #0]
 80105ee:	d82d      	bhi.n	801064c <__ssputs_r+0x70>
 80105f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80105f8:	d026      	beq.n	8010648 <__ssputs_r+0x6c>
 80105fa:	6965      	ldr	r5, [r4, #20]
 80105fc:	6909      	ldr	r1, [r1, #16]
 80105fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010602:	eba3 0901 	sub.w	r9, r3, r1
 8010606:	1c7b      	adds	r3, r7, #1
 8010608:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801060c:	444b      	add	r3, r9
 801060e:	106d      	asrs	r5, r5, #1
 8010610:	429d      	cmp	r5, r3
 8010612:	bf38      	it	cc
 8010614:	461d      	movcc	r5, r3
 8010616:	0553      	lsls	r3, r2, #21
 8010618:	d527      	bpl.n	801066a <__ssputs_r+0x8e>
 801061a:	4629      	mov	r1, r5
 801061c:	f7ff ff52 	bl	80104c4 <_malloc_r>
 8010620:	4606      	mov	r6, r0
 8010622:	b360      	cbz	r0, 801067e <__ssputs_r+0xa2>
 8010624:	464a      	mov	r2, r9
 8010626:	6921      	ldr	r1, [r4, #16]
 8010628:	f7ff fed3 	bl	80103d2 <memcpy>
 801062c:	89a3      	ldrh	r3, [r4, #12]
 801062e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010636:	81a3      	strh	r3, [r4, #12]
 8010638:	6126      	str	r6, [r4, #16]
 801063a:	444e      	add	r6, r9
 801063c:	6165      	str	r5, [r4, #20]
 801063e:	eba5 0509 	sub.w	r5, r5, r9
 8010642:	6026      	str	r6, [r4, #0]
 8010644:	463e      	mov	r6, r7
 8010646:	60a5      	str	r5, [r4, #8]
 8010648:	42be      	cmp	r6, r7
 801064a:	d900      	bls.n	801064e <__ssputs_r+0x72>
 801064c:	463e      	mov	r6, r7
 801064e:	4632      	mov	r2, r6
 8010650:	4641      	mov	r1, r8
 8010652:	6820      	ldr	r0, [r4, #0]
 8010654:	f000 fd2e 	bl	80110b4 <memmove>
 8010658:	68a3      	ldr	r3, [r4, #8]
 801065a:	2000      	movs	r0, #0
 801065c:	1b9b      	subs	r3, r3, r6
 801065e:	60a3      	str	r3, [r4, #8]
 8010660:	6823      	ldr	r3, [r4, #0]
 8010662:	4433      	add	r3, r6
 8010664:	6023      	str	r3, [r4, #0]
 8010666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801066a:	462a      	mov	r2, r5
 801066c:	f000 fd5a 	bl	8011124 <_realloc_r>
 8010670:	4606      	mov	r6, r0
 8010672:	2800      	cmp	r0, #0
 8010674:	d1e0      	bne.n	8010638 <__ssputs_r+0x5c>
 8010676:	6921      	ldr	r1, [r4, #16]
 8010678:	4650      	mov	r0, sl
 801067a:	f7ff feb7 	bl	80103ec <_free_r>
 801067e:	230c      	movs	r3, #12
 8010680:	f04f 30ff 	mov.w	r0, #4294967295
 8010684:	f8ca 3000 	str.w	r3, [sl]
 8010688:	89a3      	ldrh	r3, [r4, #12]
 801068a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801068e:	81a3      	strh	r3, [r4, #12]
 8010690:	e7e9      	b.n	8010666 <__ssputs_r+0x8a>
	...

08010694 <_svfiprintf_r>:
 8010694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010698:	4698      	mov	r8, r3
 801069a:	898b      	ldrh	r3, [r1, #12]
 801069c:	b09d      	sub	sp, #116	@ 0x74
 801069e:	4607      	mov	r7, r0
 80106a0:	061b      	lsls	r3, r3, #24
 80106a2:	460d      	mov	r5, r1
 80106a4:	4614      	mov	r4, r2
 80106a6:	d510      	bpl.n	80106ca <_svfiprintf_r+0x36>
 80106a8:	690b      	ldr	r3, [r1, #16]
 80106aa:	b973      	cbnz	r3, 80106ca <_svfiprintf_r+0x36>
 80106ac:	2140      	movs	r1, #64	@ 0x40
 80106ae:	f7ff ff09 	bl	80104c4 <_malloc_r>
 80106b2:	6028      	str	r0, [r5, #0]
 80106b4:	6128      	str	r0, [r5, #16]
 80106b6:	b930      	cbnz	r0, 80106c6 <_svfiprintf_r+0x32>
 80106b8:	230c      	movs	r3, #12
 80106ba:	603b      	str	r3, [r7, #0]
 80106bc:	f04f 30ff 	mov.w	r0, #4294967295
 80106c0:	b01d      	add	sp, #116	@ 0x74
 80106c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c6:	2340      	movs	r3, #64	@ 0x40
 80106c8:	616b      	str	r3, [r5, #20]
 80106ca:	2300      	movs	r3, #0
 80106cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80106d0:	f04f 0901 	mov.w	r9, #1
 80106d4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010878 <_svfiprintf_r+0x1e4>
 80106d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80106da:	2320      	movs	r3, #32
 80106dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80106e0:	2330      	movs	r3, #48	@ 0x30
 80106e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80106e6:	4623      	mov	r3, r4
 80106e8:	469a      	mov	sl, r3
 80106ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106ee:	b10a      	cbz	r2, 80106f4 <_svfiprintf_r+0x60>
 80106f0:	2a25      	cmp	r2, #37	@ 0x25
 80106f2:	d1f9      	bne.n	80106e8 <_svfiprintf_r+0x54>
 80106f4:	ebba 0b04 	subs.w	fp, sl, r4
 80106f8:	d00b      	beq.n	8010712 <_svfiprintf_r+0x7e>
 80106fa:	465b      	mov	r3, fp
 80106fc:	4622      	mov	r2, r4
 80106fe:	4629      	mov	r1, r5
 8010700:	4638      	mov	r0, r7
 8010702:	f7ff ff6b 	bl	80105dc <__ssputs_r>
 8010706:	3001      	adds	r0, #1
 8010708:	f000 80a7 	beq.w	801085a <_svfiprintf_r+0x1c6>
 801070c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801070e:	445a      	add	r2, fp
 8010710:	9209      	str	r2, [sp, #36]	@ 0x24
 8010712:	f89a 3000 	ldrb.w	r3, [sl]
 8010716:	2b00      	cmp	r3, #0
 8010718:	f000 809f 	beq.w	801085a <_svfiprintf_r+0x1c6>
 801071c:	2300      	movs	r3, #0
 801071e:	f04f 32ff 	mov.w	r2, #4294967295
 8010722:	f10a 0a01 	add.w	sl, sl, #1
 8010726:	9304      	str	r3, [sp, #16]
 8010728:	9307      	str	r3, [sp, #28]
 801072a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801072e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010734:	4654      	mov	r4, sl
 8010736:	2205      	movs	r2, #5
 8010738:	484f      	ldr	r0, [pc, #316]	@ (8010878 <_svfiprintf_r+0x1e4>)
 801073a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801073e:	f000 fce3 	bl	8011108 <memchr>
 8010742:	9a04      	ldr	r2, [sp, #16]
 8010744:	b9d8      	cbnz	r0, 801077e <_svfiprintf_r+0xea>
 8010746:	06d0      	lsls	r0, r2, #27
 8010748:	bf44      	itt	mi
 801074a:	2320      	movmi	r3, #32
 801074c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010750:	0711      	lsls	r1, r2, #28
 8010752:	bf44      	itt	mi
 8010754:	232b      	movmi	r3, #43	@ 0x2b
 8010756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801075a:	f89a 3000 	ldrb.w	r3, [sl]
 801075e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010760:	d015      	beq.n	801078e <_svfiprintf_r+0xfa>
 8010762:	9a07      	ldr	r2, [sp, #28]
 8010764:	4654      	mov	r4, sl
 8010766:	2000      	movs	r0, #0
 8010768:	f04f 0c0a 	mov.w	ip, #10
 801076c:	4621      	mov	r1, r4
 801076e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010772:	3b30      	subs	r3, #48	@ 0x30
 8010774:	2b09      	cmp	r3, #9
 8010776:	d94b      	bls.n	8010810 <_svfiprintf_r+0x17c>
 8010778:	b1b0      	cbz	r0, 80107a8 <_svfiprintf_r+0x114>
 801077a:	9207      	str	r2, [sp, #28]
 801077c:	e014      	b.n	80107a8 <_svfiprintf_r+0x114>
 801077e:	eba0 0308 	sub.w	r3, r0, r8
 8010782:	46a2      	mov	sl, r4
 8010784:	fa09 f303 	lsl.w	r3, r9, r3
 8010788:	4313      	orrs	r3, r2
 801078a:	9304      	str	r3, [sp, #16]
 801078c:	e7d2      	b.n	8010734 <_svfiprintf_r+0xa0>
 801078e:	9b03      	ldr	r3, [sp, #12]
 8010790:	1d19      	adds	r1, r3, #4
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	9103      	str	r1, [sp, #12]
 8010798:	bfbb      	ittet	lt
 801079a:	425b      	neglt	r3, r3
 801079c:	f042 0202 	orrlt.w	r2, r2, #2
 80107a0:	9307      	strge	r3, [sp, #28]
 80107a2:	9307      	strlt	r3, [sp, #28]
 80107a4:	bfb8      	it	lt
 80107a6:	9204      	strlt	r2, [sp, #16]
 80107a8:	7823      	ldrb	r3, [r4, #0]
 80107aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80107ac:	d10a      	bne.n	80107c4 <_svfiprintf_r+0x130>
 80107ae:	7863      	ldrb	r3, [r4, #1]
 80107b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80107b2:	d132      	bne.n	801081a <_svfiprintf_r+0x186>
 80107b4:	9b03      	ldr	r3, [sp, #12]
 80107b6:	3402      	adds	r4, #2
 80107b8:	1d1a      	adds	r2, r3, #4
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80107c0:	9203      	str	r2, [sp, #12]
 80107c2:	9305      	str	r3, [sp, #20]
 80107c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010888 <_svfiprintf_r+0x1f4>
 80107c8:	2203      	movs	r2, #3
 80107ca:	7821      	ldrb	r1, [r4, #0]
 80107cc:	4650      	mov	r0, sl
 80107ce:	f000 fc9b 	bl	8011108 <memchr>
 80107d2:	b138      	cbz	r0, 80107e4 <_svfiprintf_r+0x150>
 80107d4:	eba0 000a 	sub.w	r0, r0, sl
 80107d8:	2240      	movs	r2, #64	@ 0x40
 80107da:	9b04      	ldr	r3, [sp, #16]
 80107dc:	3401      	adds	r4, #1
 80107de:	4082      	lsls	r2, r0
 80107e0:	4313      	orrs	r3, r2
 80107e2:	9304      	str	r3, [sp, #16]
 80107e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107e8:	2206      	movs	r2, #6
 80107ea:	4824      	ldr	r0, [pc, #144]	@ (801087c <_svfiprintf_r+0x1e8>)
 80107ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80107f0:	f000 fc8a 	bl	8011108 <memchr>
 80107f4:	2800      	cmp	r0, #0
 80107f6:	d036      	beq.n	8010866 <_svfiprintf_r+0x1d2>
 80107f8:	4b21      	ldr	r3, [pc, #132]	@ (8010880 <_svfiprintf_r+0x1ec>)
 80107fa:	bb1b      	cbnz	r3, 8010844 <_svfiprintf_r+0x1b0>
 80107fc:	9b03      	ldr	r3, [sp, #12]
 80107fe:	3307      	adds	r3, #7
 8010800:	f023 0307 	bic.w	r3, r3, #7
 8010804:	3308      	adds	r3, #8
 8010806:	9303      	str	r3, [sp, #12]
 8010808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801080a:	4433      	add	r3, r6
 801080c:	9309      	str	r3, [sp, #36]	@ 0x24
 801080e:	e76a      	b.n	80106e6 <_svfiprintf_r+0x52>
 8010810:	fb0c 3202 	mla	r2, ip, r2, r3
 8010814:	460c      	mov	r4, r1
 8010816:	2001      	movs	r0, #1
 8010818:	e7a8      	b.n	801076c <_svfiprintf_r+0xd8>
 801081a:	2300      	movs	r3, #0
 801081c:	3401      	adds	r4, #1
 801081e:	f04f 0c0a 	mov.w	ip, #10
 8010822:	4619      	mov	r1, r3
 8010824:	9305      	str	r3, [sp, #20]
 8010826:	4620      	mov	r0, r4
 8010828:	f810 2b01 	ldrb.w	r2, [r0], #1
 801082c:	3a30      	subs	r2, #48	@ 0x30
 801082e:	2a09      	cmp	r2, #9
 8010830:	d903      	bls.n	801083a <_svfiprintf_r+0x1a6>
 8010832:	2b00      	cmp	r3, #0
 8010834:	d0c6      	beq.n	80107c4 <_svfiprintf_r+0x130>
 8010836:	9105      	str	r1, [sp, #20]
 8010838:	e7c4      	b.n	80107c4 <_svfiprintf_r+0x130>
 801083a:	fb0c 2101 	mla	r1, ip, r1, r2
 801083e:	4604      	mov	r4, r0
 8010840:	2301      	movs	r3, #1
 8010842:	e7f0      	b.n	8010826 <_svfiprintf_r+0x192>
 8010844:	ab03      	add	r3, sp, #12
 8010846:	462a      	mov	r2, r5
 8010848:	a904      	add	r1, sp, #16
 801084a:	4638      	mov	r0, r7
 801084c:	9300      	str	r3, [sp, #0]
 801084e:	4b0d      	ldr	r3, [pc, #52]	@ (8010884 <_svfiprintf_r+0x1f0>)
 8010850:	f3af 8000 	nop.w
 8010854:	1c42      	adds	r2, r0, #1
 8010856:	4606      	mov	r6, r0
 8010858:	d1d6      	bne.n	8010808 <_svfiprintf_r+0x174>
 801085a:	89ab      	ldrh	r3, [r5, #12]
 801085c:	065b      	lsls	r3, r3, #25
 801085e:	f53f af2d 	bmi.w	80106bc <_svfiprintf_r+0x28>
 8010862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010864:	e72c      	b.n	80106c0 <_svfiprintf_r+0x2c>
 8010866:	ab03      	add	r3, sp, #12
 8010868:	462a      	mov	r2, r5
 801086a:	a904      	add	r1, sp, #16
 801086c:	4638      	mov	r0, r7
 801086e:	9300      	str	r3, [sp, #0]
 8010870:	4b04      	ldr	r3, [pc, #16]	@ (8010884 <_svfiprintf_r+0x1f0>)
 8010872:	f000 f9bf 	bl	8010bf4 <_printf_i>
 8010876:	e7ed      	b.n	8010854 <_svfiprintf_r+0x1c0>
 8010878:	080113d8 	.word	0x080113d8
 801087c:	080113e2 	.word	0x080113e2
 8010880:	00000000 	.word	0x00000000
 8010884:	080105dd 	.word	0x080105dd
 8010888:	080113de 	.word	0x080113de

0801088c <__sfputc_r>:
 801088c:	6893      	ldr	r3, [r2, #8]
 801088e:	3b01      	subs	r3, #1
 8010890:	2b00      	cmp	r3, #0
 8010892:	6093      	str	r3, [r2, #8]
 8010894:	b410      	push	{r4}
 8010896:	da08      	bge.n	80108aa <__sfputc_r+0x1e>
 8010898:	6994      	ldr	r4, [r2, #24]
 801089a:	42a3      	cmp	r3, r4
 801089c:	db01      	blt.n	80108a2 <__sfputc_r+0x16>
 801089e:	290a      	cmp	r1, #10
 80108a0:	d103      	bne.n	80108aa <__sfputc_r+0x1e>
 80108a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108a6:	f000 bb71 	b.w	8010f8c <__swbuf_r>
 80108aa:	6813      	ldr	r3, [r2, #0]
 80108ac:	1c58      	adds	r0, r3, #1
 80108ae:	6010      	str	r0, [r2, #0]
 80108b0:	4608      	mov	r0, r1
 80108b2:	7019      	strb	r1, [r3, #0]
 80108b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108b8:	4770      	bx	lr

080108ba <__sfputs_r>:
 80108ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108bc:	4606      	mov	r6, r0
 80108be:	460f      	mov	r7, r1
 80108c0:	4614      	mov	r4, r2
 80108c2:	18d5      	adds	r5, r2, r3
 80108c4:	42ac      	cmp	r4, r5
 80108c6:	d101      	bne.n	80108cc <__sfputs_r+0x12>
 80108c8:	2000      	movs	r0, #0
 80108ca:	e007      	b.n	80108dc <__sfputs_r+0x22>
 80108cc:	463a      	mov	r2, r7
 80108ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108d2:	4630      	mov	r0, r6
 80108d4:	f7ff ffda 	bl	801088c <__sfputc_r>
 80108d8:	1c43      	adds	r3, r0, #1
 80108da:	d1f3      	bne.n	80108c4 <__sfputs_r+0xa>
 80108dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080108e0 <_vfiprintf_r>:
 80108e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e4:	460d      	mov	r5, r1
 80108e6:	b09d      	sub	sp, #116	@ 0x74
 80108e8:	4614      	mov	r4, r2
 80108ea:	4698      	mov	r8, r3
 80108ec:	4606      	mov	r6, r0
 80108ee:	b118      	cbz	r0, 80108f8 <_vfiprintf_r+0x18>
 80108f0:	6a03      	ldr	r3, [r0, #32]
 80108f2:	b90b      	cbnz	r3, 80108f8 <_vfiprintf_r+0x18>
 80108f4:	f7ff fc2e 	bl	8010154 <__sinit>
 80108f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80108fa:	07d9      	lsls	r1, r3, #31
 80108fc:	d405      	bmi.n	801090a <_vfiprintf_r+0x2a>
 80108fe:	89ab      	ldrh	r3, [r5, #12]
 8010900:	059a      	lsls	r2, r3, #22
 8010902:	d402      	bmi.n	801090a <_vfiprintf_r+0x2a>
 8010904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010906:	f7ff fd62 	bl	80103ce <__retarget_lock_acquire_recursive>
 801090a:	89ab      	ldrh	r3, [r5, #12]
 801090c:	071b      	lsls	r3, r3, #28
 801090e:	d501      	bpl.n	8010914 <_vfiprintf_r+0x34>
 8010910:	692b      	ldr	r3, [r5, #16]
 8010912:	b99b      	cbnz	r3, 801093c <_vfiprintf_r+0x5c>
 8010914:	4629      	mov	r1, r5
 8010916:	4630      	mov	r0, r6
 8010918:	f000 fb76 	bl	8011008 <__swsetup_r>
 801091c:	b170      	cbz	r0, 801093c <_vfiprintf_r+0x5c>
 801091e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010920:	07dc      	lsls	r4, r3, #31
 8010922:	d504      	bpl.n	801092e <_vfiprintf_r+0x4e>
 8010924:	f04f 30ff 	mov.w	r0, #4294967295
 8010928:	b01d      	add	sp, #116	@ 0x74
 801092a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801092e:	89ab      	ldrh	r3, [r5, #12]
 8010930:	0598      	lsls	r0, r3, #22
 8010932:	d4f7      	bmi.n	8010924 <_vfiprintf_r+0x44>
 8010934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010936:	f7ff fd4b 	bl	80103d0 <__retarget_lock_release_recursive>
 801093a:	e7f3      	b.n	8010924 <_vfiprintf_r+0x44>
 801093c:	2300      	movs	r3, #0
 801093e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010942:	f04f 0901 	mov.w	r9, #1
 8010946:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8010afc <_vfiprintf_r+0x21c>
 801094a:	9309      	str	r3, [sp, #36]	@ 0x24
 801094c:	2320      	movs	r3, #32
 801094e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010952:	2330      	movs	r3, #48	@ 0x30
 8010954:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010958:	4623      	mov	r3, r4
 801095a:	469a      	mov	sl, r3
 801095c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010960:	b10a      	cbz	r2, 8010966 <_vfiprintf_r+0x86>
 8010962:	2a25      	cmp	r2, #37	@ 0x25
 8010964:	d1f9      	bne.n	801095a <_vfiprintf_r+0x7a>
 8010966:	ebba 0b04 	subs.w	fp, sl, r4
 801096a:	d00b      	beq.n	8010984 <_vfiprintf_r+0xa4>
 801096c:	465b      	mov	r3, fp
 801096e:	4622      	mov	r2, r4
 8010970:	4629      	mov	r1, r5
 8010972:	4630      	mov	r0, r6
 8010974:	f7ff ffa1 	bl	80108ba <__sfputs_r>
 8010978:	3001      	adds	r0, #1
 801097a:	f000 80a7 	beq.w	8010acc <_vfiprintf_r+0x1ec>
 801097e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010980:	445a      	add	r2, fp
 8010982:	9209      	str	r2, [sp, #36]	@ 0x24
 8010984:	f89a 3000 	ldrb.w	r3, [sl]
 8010988:	2b00      	cmp	r3, #0
 801098a:	f000 809f 	beq.w	8010acc <_vfiprintf_r+0x1ec>
 801098e:	2300      	movs	r3, #0
 8010990:	f04f 32ff 	mov.w	r2, #4294967295
 8010994:	f10a 0a01 	add.w	sl, sl, #1
 8010998:	9304      	str	r3, [sp, #16]
 801099a:	9307      	str	r3, [sp, #28]
 801099c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80109a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80109a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109a6:	4654      	mov	r4, sl
 80109a8:	2205      	movs	r2, #5
 80109aa:	4854      	ldr	r0, [pc, #336]	@ (8010afc <_vfiprintf_r+0x21c>)
 80109ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109b0:	f000 fbaa 	bl	8011108 <memchr>
 80109b4:	9a04      	ldr	r2, [sp, #16]
 80109b6:	b9d8      	cbnz	r0, 80109f0 <_vfiprintf_r+0x110>
 80109b8:	06d1      	lsls	r1, r2, #27
 80109ba:	bf44      	itt	mi
 80109bc:	2320      	movmi	r3, #32
 80109be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109c2:	0713      	lsls	r3, r2, #28
 80109c4:	bf44      	itt	mi
 80109c6:	232b      	movmi	r3, #43	@ 0x2b
 80109c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109cc:	f89a 3000 	ldrb.w	r3, [sl]
 80109d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80109d2:	d015      	beq.n	8010a00 <_vfiprintf_r+0x120>
 80109d4:	9a07      	ldr	r2, [sp, #28]
 80109d6:	4654      	mov	r4, sl
 80109d8:	2000      	movs	r0, #0
 80109da:	f04f 0c0a 	mov.w	ip, #10
 80109de:	4621      	mov	r1, r4
 80109e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109e4:	3b30      	subs	r3, #48	@ 0x30
 80109e6:	2b09      	cmp	r3, #9
 80109e8:	d94b      	bls.n	8010a82 <_vfiprintf_r+0x1a2>
 80109ea:	b1b0      	cbz	r0, 8010a1a <_vfiprintf_r+0x13a>
 80109ec:	9207      	str	r2, [sp, #28]
 80109ee:	e014      	b.n	8010a1a <_vfiprintf_r+0x13a>
 80109f0:	eba0 0308 	sub.w	r3, r0, r8
 80109f4:	46a2      	mov	sl, r4
 80109f6:	fa09 f303 	lsl.w	r3, r9, r3
 80109fa:	4313      	orrs	r3, r2
 80109fc:	9304      	str	r3, [sp, #16]
 80109fe:	e7d2      	b.n	80109a6 <_vfiprintf_r+0xc6>
 8010a00:	9b03      	ldr	r3, [sp, #12]
 8010a02:	1d19      	adds	r1, r3, #4
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	9103      	str	r1, [sp, #12]
 8010a0a:	bfbb      	ittet	lt
 8010a0c:	425b      	neglt	r3, r3
 8010a0e:	f042 0202 	orrlt.w	r2, r2, #2
 8010a12:	9307      	strge	r3, [sp, #28]
 8010a14:	9307      	strlt	r3, [sp, #28]
 8010a16:	bfb8      	it	lt
 8010a18:	9204      	strlt	r2, [sp, #16]
 8010a1a:	7823      	ldrb	r3, [r4, #0]
 8010a1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a1e:	d10a      	bne.n	8010a36 <_vfiprintf_r+0x156>
 8010a20:	7863      	ldrb	r3, [r4, #1]
 8010a22:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a24:	d132      	bne.n	8010a8c <_vfiprintf_r+0x1ac>
 8010a26:	9b03      	ldr	r3, [sp, #12]
 8010a28:	3402      	adds	r4, #2
 8010a2a:	1d1a      	adds	r2, r3, #4
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a32:	9203      	str	r2, [sp, #12]
 8010a34:	9305      	str	r3, [sp, #20]
 8010a36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010b0c <_vfiprintf_r+0x22c>
 8010a3a:	2203      	movs	r2, #3
 8010a3c:	7821      	ldrb	r1, [r4, #0]
 8010a3e:	4650      	mov	r0, sl
 8010a40:	f000 fb62 	bl	8011108 <memchr>
 8010a44:	b138      	cbz	r0, 8010a56 <_vfiprintf_r+0x176>
 8010a46:	eba0 000a 	sub.w	r0, r0, sl
 8010a4a:	2240      	movs	r2, #64	@ 0x40
 8010a4c:	9b04      	ldr	r3, [sp, #16]
 8010a4e:	3401      	adds	r4, #1
 8010a50:	4082      	lsls	r2, r0
 8010a52:	4313      	orrs	r3, r2
 8010a54:	9304      	str	r3, [sp, #16]
 8010a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a5a:	2206      	movs	r2, #6
 8010a5c:	4828      	ldr	r0, [pc, #160]	@ (8010b00 <_vfiprintf_r+0x220>)
 8010a5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a62:	f000 fb51 	bl	8011108 <memchr>
 8010a66:	2800      	cmp	r0, #0
 8010a68:	d03f      	beq.n	8010aea <_vfiprintf_r+0x20a>
 8010a6a:	4b26      	ldr	r3, [pc, #152]	@ (8010b04 <_vfiprintf_r+0x224>)
 8010a6c:	bb1b      	cbnz	r3, 8010ab6 <_vfiprintf_r+0x1d6>
 8010a6e:	9b03      	ldr	r3, [sp, #12]
 8010a70:	3307      	adds	r3, #7
 8010a72:	f023 0307 	bic.w	r3, r3, #7
 8010a76:	3308      	adds	r3, #8
 8010a78:	9303      	str	r3, [sp, #12]
 8010a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a7c:	443b      	add	r3, r7
 8010a7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a80:	e76a      	b.n	8010958 <_vfiprintf_r+0x78>
 8010a82:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a86:	460c      	mov	r4, r1
 8010a88:	2001      	movs	r0, #1
 8010a8a:	e7a8      	b.n	80109de <_vfiprintf_r+0xfe>
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	3401      	adds	r4, #1
 8010a90:	f04f 0c0a 	mov.w	ip, #10
 8010a94:	4619      	mov	r1, r3
 8010a96:	9305      	str	r3, [sp, #20]
 8010a98:	4620      	mov	r0, r4
 8010a9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a9e:	3a30      	subs	r2, #48	@ 0x30
 8010aa0:	2a09      	cmp	r2, #9
 8010aa2:	d903      	bls.n	8010aac <_vfiprintf_r+0x1cc>
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d0c6      	beq.n	8010a36 <_vfiprintf_r+0x156>
 8010aa8:	9105      	str	r1, [sp, #20]
 8010aaa:	e7c4      	b.n	8010a36 <_vfiprintf_r+0x156>
 8010aac:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ab0:	4604      	mov	r4, r0
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	e7f0      	b.n	8010a98 <_vfiprintf_r+0x1b8>
 8010ab6:	ab03      	add	r3, sp, #12
 8010ab8:	462a      	mov	r2, r5
 8010aba:	a904      	add	r1, sp, #16
 8010abc:	4630      	mov	r0, r6
 8010abe:	9300      	str	r3, [sp, #0]
 8010ac0:	4b11      	ldr	r3, [pc, #68]	@ (8010b08 <_vfiprintf_r+0x228>)
 8010ac2:	f3af 8000 	nop.w
 8010ac6:	4607      	mov	r7, r0
 8010ac8:	1c78      	adds	r0, r7, #1
 8010aca:	d1d6      	bne.n	8010a7a <_vfiprintf_r+0x19a>
 8010acc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ace:	07d9      	lsls	r1, r3, #31
 8010ad0:	d405      	bmi.n	8010ade <_vfiprintf_r+0x1fe>
 8010ad2:	89ab      	ldrh	r3, [r5, #12]
 8010ad4:	059a      	lsls	r2, r3, #22
 8010ad6:	d402      	bmi.n	8010ade <_vfiprintf_r+0x1fe>
 8010ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ada:	f7ff fc79 	bl	80103d0 <__retarget_lock_release_recursive>
 8010ade:	89ab      	ldrh	r3, [r5, #12]
 8010ae0:	065b      	lsls	r3, r3, #25
 8010ae2:	f53f af1f 	bmi.w	8010924 <_vfiprintf_r+0x44>
 8010ae6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ae8:	e71e      	b.n	8010928 <_vfiprintf_r+0x48>
 8010aea:	ab03      	add	r3, sp, #12
 8010aec:	462a      	mov	r2, r5
 8010aee:	a904      	add	r1, sp, #16
 8010af0:	4630      	mov	r0, r6
 8010af2:	9300      	str	r3, [sp, #0]
 8010af4:	4b04      	ldr	r3, [pc, #16]	@ (8010b08 <_vfiprintf_r+0x228>)
 8010af6:	f000 f87d 	bl	8010bf4 <_printf_i>
 8010afa:	e7e4      	b.n	8010ac6 <_vfiprintf_r+0x1e6>
 8010afc:	080113d8 	.word	0x080113d8
 8010b00:	080113e2 	.word	0x080113e2
 8010b04:	00000000 	.word	0x00000000
 8010b08:	080108bb 	.word	0x080108bb
 8010b0c:	080113de 	.word	0x080113de

08010b10 <_printf_common>:
 8010b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b14:	4616      	mov	r6, r2
 8010b16:	4698      	mov	r8, r3
 8010b18:	688a      	ldr	r2, [r1, #8]
 8010b1a:	4607      	mov	r7, r0
 8010b1c:	690b      	ldr	r3, [r1, #16]
 8010b1e:	460c      	mov	r4, r1
 8010b20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010b24:	4293      	cmp	r3, r2
 8010b26:	bfb8      	it	lt
 8010b28:	4613      	movlt	r3, r2
 8010b2a:	6033      	str	r3, [r6, #0]
 8010b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010b30:	b10a      	cbz	r2, 8010b36 <_printf_common+0x26>
 8010b32:	3301      	adds	r3, #1
 8010b34:	6033      	str	r3, [r6, #0]
 8010b36:	6823      	ldr	r3, [r4, #0]
 8010b38:	0699      	lsls	r1, r3, #26
 8010b3a:	bf42      	ittt	mi
 8010b3c:	6833      	ldrmi	r3, [r6, #0]
 8010b3e:	3302      	addmi	r3, #2
 8010b40:	6033      	strmi	r3, [r6, #0]
 8010b42:	6825      	ldr	r5, [r4, #0]
 8010b44:	f015 0506 	ands.w	r5, r5, #6
 8010b48:	d106      	bne.n	8010b58 <_printf_common+0x48>
 8010b4a:	f104 0a19 	add.w	sl, r4, #25
 8010b4e:	68e3      	ldr	r3, [r4, #12]
 8010b50:	6832      	ldr	r2, [r6, #0]
 8010b52:	1a9b      	subs	r3, r3, r2
 8010b54:	42ab      	cmp	r3, r5
 8010b56:	dc2b      	bgt.n	8010bb0 <_printf_common+0xa0>
 8010b58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010b5c:	6822      	ldr	r2, [r4, #0]
 8010b5e:	3b00      	subs	r3, #0
 8010b60:	bf18      	it	ne
 8010b62:	2301      	movne	r3, #1
 8010b64:	0692      	lsls	r2, r2, #26
 8010b66:	d430      	bmi.n	8010bca <_printf_common+0xba>
 8010b68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010b6c:	4641      	mov	r1, r8
 8010b6e:	4638      	mov	r0, r7
 8010b70:	47c8      	blx	r9
 8010b72:	3001      	adds	r0, #1
 8010b74:	d023      	beq.n	8010bbe <_printf_common+0xae>
 8010b76:	6823      	ldr	r3, [r4, #0]
 8010b78:	341a      	adds	r4, #26
 8010b7a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8010b7e:	f003 0306 	and.w	r3, r3, #6
 8010b82:	2b04      	cmp	r3, #4
 8010b84:	bf0a      	itet	eq
 8010b86:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8010b8a:	2500      	movne	r5, #0
 8010b8c:	6833      	ldreq	r3, [r6, #0]
 8010b8e:	f04f 0600 	mov.w	r6, #0
 8010b92:	bf08      	it	eq
 8010b94:	1aed      	subeq	r5, r5, r3
 8010b96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8010b9a:	bf08      	it	eq
 8010b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	bfc4      	itt	gt
 8010ba4:	1a9b      	subgt	r3, r3, r2
 8010ba6:	18ed      	addgt	r5, r5, r3
 8010ba8:	42b5      	cmp	r5, r6
 8010baa:	d11a      	bne.n	8010be2 <_printf_common+0xd2>
 8010bac:	2000      	movs	r0, #0
 8010bae:	e008      	b.n	8010bc2 <_printf_common+0xb2>
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	4652      	mov	r2, sl
 8010bb4:	4641      	mov	r1, r8
 8010bb6:	4638      	mov	r0, r7
 8010bb8:	47c8      	blx	r9
 8010bba:	3001      	adds	r0, #1
 8010bbc:	d103      	bne.n	8010bc6 <_printf_common+0xb6>
 8010bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8010bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bc6:	3501      	adds	r5, #1
 8010bc8:	e7c1      	b.n	8010b4e <_printf_common+0x3e>
 8010bca:	18e1      	adds	r1, r4, r3
 8010bcc:	1c5a      	adds	r2, r3, #1
 8010bce:	2030      	movs	r0, #48	@ 0x30
 8010bd0:	3302      	adds	r3, #2
 8010bd2:	4422      	add	r2, r4
 8010bd4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010bdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010be0:	e7c2      	b.n	8010b68 <_printf_common+0x58>
 8010be2:	2301      	movs	r3, #1
 8010be4:	4622      	mov	r2, r4
 8010be6:	4641      	mov	r1, r8
 8010be8:	4638      	mov	r0, r7
 8010bea:	47c8      	blx	r9
 8010bec:	3001      	adds	r0, #1
 8010bee:	d0e6      	beq.n	8010bbe <_printf_common+0xae>
 8010bf0:	3601      	adds	r6, #1
 8010bf2:	e7d9      	b.n	8010ba8 <_printf_common+0x98>

08010bf4 <_printf_i>:
 8010bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010bf8:	7e0f      	ldrb	r7, [r1, #24]
 8010bfa:	4691      	mov	r9, r2
 8010bfc:	4680      	mov	r8, r0
 8010bfe:	460c      	mov	r4, r1
 8010c00:	2f78      	cmp	r7, #120	@ 0x78
 8010c02:	469a      	mov	sl, r3
 8010c04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010c06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010c0a:	d807      	bhi.n	8010c1c <_printf_i+0x28>
 8010c0c:	2f62      	cmp	r7, #98	@ 0x62
 8010c0e:	d80a      	bhi.n	8010c26 <_printf_i+0x32>
 8010c10:	2f00      	cmp	r7, #0
 8010c12:	f000 80d2 	beq.w	8010dba <_printf_i+0x1c6>
 8010c16:	2f58      	cmp	r7, #88	@ 0x58
 8010c18:	f000 80b9 	beq.w	8010d8e <_printf_i+0x19a>
 8010c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010c20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010c24:	e03a      	b.n	8010c9c <_printf_i+0xa8>
 8010c26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010c2a:	2b15      	cmp	r3, #21
 8010c2c:	d8f6      	bhi.n	8010c1c <_printf_i+0x28>
 8010c2e:	a101      	add	r1, pc, #4	@ (adr r1, 8010c34 <_printf_i+0x40>)
 8010c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010c34:	08010c8d 	.word	0x08010c8d
 8010c38:	08010ca1 	.word	0x08010ca1
 8010c3c:	08010c1d 	.word	0x08010c1d
 8010c40:	08010c1d 	.word	0x08010c1d
 8010c44:	08010c1d 	.word	0x08010c1d
 8010c48:	08010c1d 	.word	0x08010c1d
 8010c4c:	08010ca1 	.word	0x08010ca1
 8010c50:	08010c1d 	.word	0x08010c1d
 8010c54:	08010c1d 	.word	0x08010c1d
 8010c58:	08010c1d 	.word	0x08010c1d
 8010c5c:	08010c1d 	.word	0x08010c1d
 8010c60:	08010da1 	.word	0x08010da1
 8010c64:	08010ccb 	.word	0x08010ccb
 8010c68:	08010d5b 	.word	0x08010d5b
 8010c6c:	08010c1d 	.word	0x08010c1d
 8010c70:	08010c1d 	.word	0x08010c1d
 8010c74:	08010dc3 	.word	0x08010dc3
 8010c78:	08010c1d 	.word	0x08010c1d
 8010c7c:	08010ccb 	.word	0x08010ccb
 8010c80:	08010c1d 	.word	0x08010c1d
 8010c84:	08010c1d 	.word	0x08010c1d
 8010c88:	08010d63 	.word	0x08010d63
 8010c8c:	6833      	ldr	r3, [r6, #0]
 8010c8e:	1d1a      	adds	r2, r3, #4
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	6032      	str	r2, [r6, #0]
 8010c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010c98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010c9c:	2301      	movs	r3, #1
 8010c9e:	e09d      	b.n	8010ddc <_printf_i+0x1e8>
 8010ca0:	6833      	ldr	r3, [r6, #0]
 8010ca2:	6820      	ldr	r0, [r4, #0]
 8010ca4:	1d19      	adds	r1, r3, #4
 8010ca6:	6031      	str	r1, [r6, #0]
 8010ca8:	0606      	lsls	r6, r0, #24
 8010caa:	d501      	bpl.n	8010cb0 <_printf_i+0xbc>
 8010cac:	681d      	ldr	r5, [r3, #0]
 8010cae:	e003      	b.n	8010cb8 <_printf_i+0xc4>
 8010cb0:	0645      	lsls	r5, r0, #25
 8010cb2:	d5fb      	bpl.n	8010cac <_printf_i+0xb8>
 8010cb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010cb8:	2d00      	cmp	r5, #0
 8010cba:	da03      	bge.n	8010cc4 <_printf_i+0xd0>
 8010cbc:	232d      	movs	r3, #45	@ 0x2d
 8010cbe:	426d      	negs	r5, r5
 8010cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010cc4:	4859      	ldr	r0, [pc, #356]	@ (8010e2c <_printf_i+0x238>)
 8010cc6:	230a      	movs	r3, #10
 8010cc8:	e011      	b.n	8010cee <_printf_i+0xfa>
 8010cca:	6821      	ldr	r1, [r4, #0]
 8010ccc:	6833      	ldr	r3, [r6, #0]
 8010cce:	0608      	lsls	r0, r1, #24
 8010cd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8010cd4:	d402      	bmi.n	8010cdc <_printf_i+0xe8>
 8010cd6:	0649      	lsls	r1, r1, #25
 8010cd8:	bf48      	it	mi
 8010cda:	b2ad      	uxthmi	r5, r5
 8010cdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8010cde:	6033      	str	r3, [r6, #0]
 8010ce0:	4852      	ldr	r0, [pc, #328]	@ (8010e2c <_printf_i+0x238>)
 8010ce2:	bf14      	ite	ne
 8010ce4:	230a      	movne	r3, #10
 8010ce6:	2308      	moveq	r3, #8
 8010ce8:	2100      	movs	r1, #0
 8010cea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010cee:	6866      	ldr	r6, [r4, #4]
 8010cf0:	2e00      	cmp	r6, #0
 8010cf2:	60a6      	str	r6, [r4, #8]
 8010cf4:	bfa2      	ittt	ge
 8010cf6:	6821      	ldrge	r1, [r4, #0]
 8010cf8:	f021 0104 	bicge.w	r1, r1, #4
 8010cfc:	6021      	strge	r1, [r4, #0]
 8010cfe:	b90d      	cbnz	r5, 8010d04 <_printf_i+0x110>
 8010d00:	2e00      	cmp	r6, #0
 8010d02:	d04b      	beq.n	8010d9c <_printf_i+0x1a8>
 8010d04:	4616      	mov	r6, r2
 8010d06:	fbb5 f1f3 	udiv	r1, r5, r3
 8010d0a:	fb03 5711 	mls	r7, r3, r1, r5
 8010d0e:	5dc7      	ldrb	r7, [r0, r7]
 8010d10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010d14:	462f      	mov	r7, r5
 8010d16:	460d      	mov	r5, r1
 8010d18:	42bb      	cmp	r3, r7
 8010d1a:	d9f4      	bls.n	8010d06 <_printf_i+0x112>
 8010d1c:	2b08      	cmp	r3, #8
 8010d1e:	d10b      	bne.n	8010d38 <_printf_i+0x144>
 8010d20:	6823      	ldr	r3, [r4, #0]
 8010d22:	07df      	lsls	r7, r3, #31
 8010d24:	d508      	bpl.n	8010d38 <_printf_i+0x144>
 8010d26:	6923      	ldr	r3, [r4, #16]
 8010d28:	6861      	ldr	r1, [r4, #4]
 8010d2a:	4299      	cmp	r1, r3
 8010d2c:	bfde      	ittt	le
 8010d2e:	2330      	movle	r3, #48	@ 0x30
 8010d30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010d34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010d38:	1b92      	subs	r2, r2, r6
 8010d3a:	6122      	str	r2, [r4, #16]
 8010d3c:	464b      	mov	r3, r9
 8010d3e:	aa03      	add	r2, sp, #12
 8010d40:	4621      	mov	r1, r4
 8010d42:	4640      	mov	r0, r8
 8010d44:	f8cd a000 	str.w	sl, [sp]
 8010d48:	f7ff fee2 	bl	8010b10 <_printf_common>
 8010d4c:	3001      	adds	r0, #1
 8010d4e:	d14a      	bne.n	8010de6 <_printf_i+0x1f2>
 8010d50:	f04f 30ff 	mov.w	r0, #4294967295
 8010d54:	b004      	add	sp, #16
 8010d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d5a:	6823      	ldr	r3, [r4, #0]
 8010d5c:	f043 0320 	orr.w	r3, r3, #32
 8010d60:	6023      	str	r3, [r4, #0]
 8010d62:	2778      	movs	r7, #120	@ 0x78
 8010d64:	4832      	ldr	r0, [pc, #200]	@ (8010e30 <_printf_i+0x23c>)
 8010d66:	6823      	ldr	r3, [r4, #0]
 8010d68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010d6c:	061f      	lsls	r7, r3, #24
 8010d6e:	6831      	ldr	r1, [r6, #0]
 8010d70:	f851 5b04 	ldr.w	r5, [r1], #4
 8010d74:	d402      	bmi.n	8010d7c <_printf_i+0x188>
 8010d76:	065f      	lsls	r7, r3, #25
 8010d78:	bf48      	it	mi
 8010d7a:	b2ad      	uxthmi	r5, r5
 8010d7c:	6031      	str	r1, [r6, #0]
 8010d7e:	07d9      	lsls	r1, r3, #31
 8010d80:	bf44      	itt	mi
 8010d82:	f043 0320 	orrmi.w	r3, r3, #32
 8010d86:	6023      	strmi	r3, [r4, #0]
 8010d88:	b11d      	cbz	r5, 8010d92 <_printf_i+0x19e>
 8010d8a:	2310      	movs	r3, #16
 8010d8c:	e7ac      	b.n	8010ce8 <_printf_i+0xf4>
 8010d8e:	4827      	ldr	r0, [pc, #156]	@ (8010e2c <_printf_i+0x238>)
 8010d90:	e7e9      	b.n	8010d66 <_printf_i+0x172>
 8010d92:	6823      	ldr	r3, [r4, #0]
 8010d94:	f023 0320 	bic.w	r3, r3, #32
 8010d98:	6023      	str	r3, [r4, #0]
 8010d9a:	e7f6      	b.n	8010d8a <_printf_i+0x196>
 8010d9c:	4616      	mov	r6, r2
 8010d9e:	e7bd      	b.n	8010d1c <_printf_i+0x128>
 8010da0:	6833      	ldr	r3, [r6, #0]
 8010da2:	6825      	ldr	r5, [r4, #0]
 8010da4:	1d18      	adds	r0, r3, #4
 8010da6:	6961      	ldr	r1, [r4, #20]
 8010da8:	6030      	str	r0, [r6, #0]
 8010daa:	062e      	lsls	r6, r5, #24
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	d501      	bpl.n	8010db4 <_printf_i+0x1c0>
 8010db0:	6019      	str	r1, [r3, #0]
 8010db2:	e002      	b.n	8010dba <_printf_i+0x1c6>
 8010db4:	0668      	lsls	r0, r5, #25
 8010db6:	d5fb      	bpl.n	8010db0 <_printf_i+0x1bc>
 8010db8:	8019      	strh	r1, [r3, #0]
 8010dba:	2300      	movs	r3, #0
 8010dbc:	4616      	mov	r6, r2
 8010dbe:	6123      	str	r3, [r4, #16]
 8010dc0:	e7bc      	b.n	8010d3c <_printf_i+0x148>
 8010dc2:	6833      	ldr	r3, [r6, #0]
 8010dc4:	2100      	movs	r1, #0
 8010dc6:	1d1a      	adds	r2, r3, #4
 8010dc8:	6032      	str	r2, [r6, #0]
 8010dca:	681e      	ldr	r6, [r3, #0]
 8010dcc:	6862      	ldr	r2, [r4, #4]
 8010dce:	4630      	mov	r0, r6
 8010dd0:	f000 f99a 	bl	8011108 <memchr>
 8010dd4:	b108      	cbz	r0, 8010dda <_printf_i+0x1e6>
 8010dd6:	1b80      	subs	r0, r0, r6
 8010dd8:	6060      	str	r0, [r4, #4]
 8010dda:	6863      	ldr	r3, [r4, #4]
 8010ddc:	6123      	str	r3, [r4, #16]
 8010dde:	2300      	movs	r3, #0
 8010de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010de4:	e7aa      	b.n	8010d3c <_printf_i+0x148>
 8010de6:	6923      	ldr	r3, [r4, #16]
 8010de8:	4632      	mov	r2, r6
 8010dea:	4649      	mov	r1, r9
 8010dec:	4640      	mov	r0, r8
 8010dee:	47d0      	blx	sl
 8010df0:	3001      	adds	r0, #1
 8010df2:	d0ad      	beq.n	8010d50 <_printf_i+0x15c>
 8010df4:	6823      	ldr	r3, [r4, #0]
 8010df6:	079b      	lsls	r3, r3, #30
 8010df8:	d413      	bmi.n	8010e22 <_printf_i+0x22e>
 8010dfa:	68e0      	ldr	r0, [r4, #12]
 8010dfc:	9b03      	ldr	r3, [sp, #12]
 8010dfe:	4298      	cmp	r0, r3
 8010e00:	bfb8      	it	lt
 8010e02:	4618      	movlt	r0, r3
 8010e04:	e7a6      	b.n	8010d54 <_printf_i+0x160>
 8010e06:	2301      	movs	r3, #1
 8010e08:	4632      	mov	r2, r6
 8010e0a:	4649      	mov	r1, r9
 8010e0c:	4640      	mov	r0, r8
 8010e0e:	47d0      	blx	sl
 8010e10:	3001      	adds	r0, #1
 8010e12:	d09d      	beq.n	8010d50 <_printf_i+0x15c>
 8010e14:	3501      	adds	r5, #1
 8010e16:	68e3      	ldr	r3, [r4, #12]
 8010e18:	9903      	ldr	r1, [sp, #12]
 8010e1a:	1a5b      	subs	r3, r3, r1
 8010e1c:	42ab      	cmp	r3, r5
 8010e1e:	dcf2      	bgt.n	8010e06 <_printf_i+0x212>
 8010e20:	e7eb      	b.n	8010dfa <_printf_i+0x206>
 8010e22:	2500      	movs	r5, #0
 8010e24:	f104 0619 	add.w	r6, r4, #25
 8010e28:	e7f5      	b.n	8010e16 <_printf_i+0x222>
 8010e2a:	bf00      	nop
 8010e2c:	080113e9 	.word	0x080113e9
 8010e30:	080113fa 	.word	0x080113fa

08010e34 <__sflush_r>:
 8010e34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e3c:	0716      	lsls	r6, r2, #28
 8010e3e:	4605      	mov	r5, r0
 8010e40:	460c      	mov	r4, r1
 8010e42:	d454      	bmi.n	8010eee <__sflush_r+0xba>
 8010e44:	684b      	ldr	r3, [r1, #4]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	dc02      	bgt.n	8010e50 <__sflush_r+0x1c>
 8010e4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	dd48      	ble.n	8010ee2 <__sflush_r+0xae>
 8010e50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e52:	2e00      	cmp	r6, #0
 8010e54:	d045      	beq.n	8010ee2 <__sflush_r+0xae>
 8010e56:	2300      	movs	r3, #0
 8010e58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010e5c:	682f      	ldr	r7, [r5, #0]
 8010e5e:	6a21      	ldr	r1, [r4, #32]
 8010e60:	602b      	str	r3, [r5, #0]
 8010e62:	d030      	beq.n	8010ec6 <__sflush_r+0x92>
 8010e64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010e66:	89a3      	ldrh	r3, [r4, #12]
 8010e68:	0759      	lsls	r1, r3, #29
 8010e6a:	d505      	bpl.n	8010e78 <__sflush_r+0x44>
 8010e6c:	6863      	ldr	r3, [r4, #4]
 8010e6e:	1ad2      	subs	r2, r2, r3
 8010e70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010e72:	b10b      	cbz	r3, 8010e78 <__sflush_r+0x44>
 8010e74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010e76:	1ad2      	subs	r2, r2, r3
 8010e78:	2300      	movs	r3, #0
 8010e7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e7c:	6a21      	ldr	r1, [r4, #32]
 8010e7e:	4628      	mov	r0, r5
 8010e80:	47b0      	blx	r6
 8010e82:	1c43      	adds	r3, r0, #1
 8010e84:	89a3      	ldrh	r3, [r4, #12]
 8010e86:	d106      	bne.n	8010e96 <__sflush_r+0x62>
 8010e88:	6829      	ldr	r1, [r5, #0]
 8010e8a:	291d      	cmp	r1, #29
 8010e8c:	d82b      	bhi.n	8010ee6 <__sflush_r+0xb2>
 8010e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8010f38 <__sflush_r+0x104>)
 8010e90:	410a      	asrs	r2, r1
 8010e92:	07d6      	lsls	r6, r2, #31
 8010e94:	d427      	bmi.n	8010ee6 <__sflush_r+0xb2>
 8010e96:	2200      	movs	r2, #0
 8010e98:	04d9      	lsls	r1, r3, #19
 8010e9a:	6062      	str	r2, [r4, #4]
 8010e9c:	6922      	ldr	r2, [r4, #16]
 8010e9e:	6022      	str	r2, [r4, #0]
 8010ea0:	d504      	bpl.n	8010eac <__sflush_r+0x78>
 8010ea2:	1c42      	adds	r2, r0, #1
 8010ea4:	d101      	bne.n	8010eaa <__sflush_r+0x76>
 8010ea6:	682b      	ldr	r3, [r5, #0]
 8010ea8:	b903      	cbnz	r3, 8010eac <__sflush_r+0x78>
 8010eaa:	6560      	str	r0, [r4, #84]	@ 0x54
 8010eac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010eae:	602f      	str	r7, [r5, #0]
 8010eb0:	b1b9      	cbz	r1, 8010ee2 <__sflush_r+0xae>
 8010eb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010eb6:	4299      	cmp	r1, r3
 8010eb8:	d002      	beq.n	8010ec0 <__sflush_r+0x8c>
 8010eba:	4628      	mov	r0, r5
 8010ebc:	f7ff fa96 	bl	80103ec <_free_r>
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ec4:	e00d      	b.n	8010ee2 <__sflush_r+0xae>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	4628      	mov	r0, r5
 8010eca:	47b0      	blx	r6
 8010ecc:	4602      	mov	r2, r0
 8010ece:	1c50      	adds	r0, r2, #1
 8010ed0:	d1c9      	bne.n	8010e66 <__sflush_r+0x32>
 8010ed2:	682b      	ldr	r3, [r5, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d0c6      	beq.n	8010e66 <__sflush_r+0x32>
 8010ed8:	2b1d      	cmp	r3, #29
 8010eda:	d001      	beq.n	8010ee0 <__sflush_r+0xac>
 8010edc:	2b16      	cmp	r3, #22
 8010ede:	d11d      	bne.n	8010f1c <__sflush_r+0xe8>
 8010ee0:	602f      	str	r7, [r5, #0]
 8010ee2:	2000      	movs	r0, #0
 8010ee4:	e021      	b.n	8010f2a <__sflush_r+0xf6>
 8010ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010eea:	b21b      	sxth	r3, r3
 8010eec:	e01a      	b.n	8010f24 <__sflush_r+0xf0>
 8010eee:	690f      	ldr	r7, [r1, #16]
 8010ef0:	2f00      	cmp	r7, #0
 8010ef2:	d0f6      	beq.n	8010ee2 <__sflush_r+0xae>
 8010ef4:	0793      	lsls	r3, r2, #30
 8010ef6:	680e      	ldr	r6, [r1, #0]
 8010ef8:	600f      	str	r7, [r1, #0]
 8010efa:	bf0c      	ite	eq
 8010efc:	694b      	ldreq	r3, [r1, #20]
 8010efe:	2300      	movne	r3, #0
 8010f00:	eba6 0807 	sub.w	r8, r6, r7
 8010f04:	608b      	str	r3, [r1, #8]
 8010f06:	f1b8 0f00 	cmp.w	r8, #0
 8010f0a:	ddea      	ble.n	8010ee2 <__sflush_r+0xae>
 8010f0c:	4643      	mov	r3, r8
 8010f0e:	463a      	mov	r2, r7
 8010f10:	6a21      	ldr	r1, [r4, #32]
 8010f12:	4628      	mov	r0, r5
 8010f14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010f16:	47b0      	blx	r6
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	dc08      	bgt.n	8010f2e <__sflush_r+0xfa>
 8010f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f24:	f04f 30ff 	mov.w	r0, #4294967295
 8010f28:	81a3      	strh	r3, [r4, #12]
 8010f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f2e:	4407      	add	r7, r0
 8010f30:	eba8 0800 	sub.w	r8, r8, r0
 8010f34:	e7e7      	b.n	8010f06 <__sflush_r+0xd2>
 8010f36:	bf00      	nop
 8010f38:	dfbffffe 	.word	0xdfbffffe

08010f3c <_fflush_r>:
 8010f3c:	b538      	push	{r3, r4, r5, lr}
 8010f3e:	690b      	ldr	r3, [r1, #16]
 8010f40:	4605      	mov	r5, r0
 8010f42:	460c      	mov	r4, r1
 8010f44:	b913      	cbnz	r3, 8010f4c <_fflush_r+0x10>
 8010f46:	2500      	movs	r5, #0
 8010f48:	4628      	mov	r0, r5
 8010f4a:	bd38      	pop	{r3, r4, r5, pc}
 8010f4c:	b118      	cbz	r0, 8010f56 <_fflush_r+0x1a>
 8010f4e:	6a03      	ldr	r3, [r0, #32]
 8010f50:	b90b      	cbnz	r3, 8010f56 <_fflush_r+0x1a>
 8010f52:	f7ff f8ff 	bl	8010154 <__sinit>
 8010f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d0f3      	beq.n	8010f46 <_fflush_r+0xa>
 8010f5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010f60:	07d0      	lsls	r0, r2, #31
 8010f62:	d404      	bmi.n	8010f6e <_fflush_r+0x32>
 8010f64:	0599      	lsls	r1, r3, #22
 8010f66:	d402      	bmi.n	8010f6e <_fflush_r+0x32>
 8010f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f6a:	f7ff fa30 	bl	80103ce <__retarget_lock_acquire_recursive>
 8010f6e:	4628      	mov	r0, r5
 8010f70:	4621      	mov	r1, r4
 8010f72:	f7ff ff5f 	bl	8010e34 <__sflush_r>
 8010f76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010f78:	4605      	mov	r5, r0
 8010f7a:	07da      	lsls	r2, r3, #31
 8010f7c:	d4e4      	bmi.n	8010f48 <_fflush_r+0xc>
 8010f7e:	89a3      	ldrh	r3, [r4, #12]
 8010f80:	059b      	lsls	r3, r3, #22
 8010f82:	d4e1      	bmi.n	8010f48 <_fflush_r+0xc>
 8010f84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f86:	f7ff fa23 	bl	80103d0 <__retarget_lock_release_recursive>
 8010f8a:	e7dd      	b.n	8010f48 <_fflush_r+0xc>

08010f8c <__swbuf_r>:
 8010f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f8e:	460e      	mov	r6, r1
 8010f90:	4614      	mov	r4, r2
 8010f92:	4605      	mov	r5, r0
 8010f94:	b118      	cbz	r0, 8010f9e <__swbuf_r+0x12>
 8010f96:	6a03      	ldr	r3, [r0, #32]
 8010f98:	b90b      	cbnz	r3, 8010f9e <__swbuf_r+0x12>
 8010f9a:	f7ff f8db 	bl	8010154 <__sinit>
 8010f9e:	69a3      	ldr	r3, [r4, #24]
 8010fa0:	60a3      	str	r3, [r4, #8]
 8010fa2:	89a3      	ldrh	r3, [r4, #12]
 8010fa4:	071a      	lsls	r2, r3, #28
 8010fa6:	d501      	bpl.n	8010fac <__swbuf_r+0x20>
 8010fa8:	6923      	ldr	r3, [r4, #16]
 8010faa:	b943      	cbnz	r3, 8010fbe <__swbuf_r+0x32>
 8010fac:	4621      	mov	r1, r4
 8010fae:	4628      	mov	r0, r5
 8010fb0:	f000 f82a 	bl	8011008 <__swsetup_r>
 8010fb4:	b118      	cbz	r0, 8010fbe <__swbuf_r+0x32>
 8010fb6:	f04f 37ff 	mov.w	r7, #4294967295
 8010fba:	4638      	mov	r0, r7
 8010fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fbe:	6823      	ldr	r3, [r4, #0]
 8010fc0:	b2f6      	uxtb	r6, r6
 8010fc2:	6922      	ldr	r2, [r4, #16]
 8010fc4:	4637      	mov	r7, r6
 8010fc6:	1a98      	subs	r0, r3, r2
 8010fc8:	6963      	ldr	r3, [r4, #20]
 8010fca:	4283      	cmp	r3, r0
 8010fcc:	dc05      	bgt.n	8010fda <__swbuf_r+0x4e>
 8010fce:	4621      	mov	r1, r4
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	f7ff ffb3 	bl	8010f3c <_fflush_r>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	d1ed      	bne.n	8010fb6 <__swbuf_r+0x2a>
 8010fda:	68a3      	ldr	r3, [r4, #8]
 8010fdc:	3b01      	subs	r3, #1
 8010fde:	60a3      	str	r3, [r4, #8]
 8010fe0:	6823      	ldr	r3, [r4, #0]
 8010fe2:	1c5a      	adds	r2, r3, #1
 8010fe4:	6022      	str	r2, [r4, #0]
 8010fe6:	701e      	strb	r6, [r3, #0]
 8010fe8:	1c43      	adds	r3, r0, #1
 8010fea:	6962      	ldr	r2, [r4, #20]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d004      	beq.n	8010ffa <__swbuf_r+0x6e>
 8010ff0:	89a3      	ldrh	r3, [r4, #12]
 8010ff2:	07db      	lsls	r3, r3, #31
 8010ff4:	d5e1      	bpl.n	8010fba <__swbuf_r+0x2e>
 8010ff6:	2e0a      	cmp	r6, #10
 8010ff8:	d1df      	bne.n	8010fba <__swbuf_r+0x2e>
 8010ffa:	4621      	mov	r1, r4
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	f7ff ff9d 	bl	8010f3c <_fflush_r>
 8011002:	2800      	cmp	r0, #0
 8011004:	d0d9      	beq.n	8010fba <__swbuf_r+0x2e>
 8011006:	e7d6      	b.n	8010fb6 <__swbuf_r+0x2a>

08011008 <__swsetup_r>:
 8011008:	b538      	push	{r3, r4, r5, lr}
 801100a:	4b29      	ldr	r3, [pc, #164]	@ (80110b0 <__swsetup_r+0xa8>)
 801100c:	4605      	mov	r5, r0
 801100e:	460c      	mov	r4, r1
 8011010:	6818      	ldr	r0, [r3, #0]
 8011012:	b118      	cbz	r0, 801101c <__swsetup_r+0x14>
 8011014:	6a03      	ldr	r3, [r0, #32]
 8011016:	b90b      	cbnz	r3, 801101c <__swsetup_r+0x14>
 8011018:	f7ff f89c 	bl	8010154 <__sinit>
 801101c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011020:	0719      	lsls	r1, r3, #28
 8011022:	d422      	bmi.n	801106a <__swsetup_r+0x62>
 8011024:	06da      	lsls	r2, r3, #27
 8011026:	d407      	bmi.n	8011038 <__swsetup_r+0x30>
 8011028:	2209      	movs	r2, #9
 801102a:	602a      	str	r2, [r5, #0]
 801102c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011030:	f04f 30ff 	mov.w	r0, #4294967295
 8011034:	81a3      	strh	r3, [r4, #12]
 8011036:	e033      	b.n	80110a0 <__swsetup_r+0x98>
 8011038:	0758      	lsls	r0, r3, #29
 801103a:	d512      	bpl.n	8011062 <__swsetup_r+0x5a>
 801103c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801103e:	b141      	cbz	r1, 8011052 <__swsetup_r+0x4a>
 8011040:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011044:	4299      	cmp	r1, r3
 8011046:	d002      	beq.n	801104e <__swsetup_r+0x46>
 8011048:	4628      	mov	r0, r5
 801104a:	f7ff f9cf 	bl	80103ec <_free_r>
 801104e:	2300      	movs	r3, #0
 8011050:	6363      	str	r3, [r4, #52]	@ 0x34
 8011052:	89a3      	ldrh	r3, [r4, #12]
 8011054:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011058:	81a3      	strh	r3, [r4, #12]
 801105a:	2300      	movs	r3, #0
 801105c:	6063      	str	r3, [r4, #4]
 801105e:	6923      	ldr	r3, [r4, #16]
 8011060:	6023      	str	r3, [r4, #0]
 8011062:	89a3      	ldrh	r3, [r4, #12]
 8011064:	f043 0308 	orr.w	r3, r3, #8
 8011068:	81a3      	strh	r3, [r4, #12]
 801106a:	6923      	ldr	r3, [r4, #16]
 801106c:	b94b      	cbnz	r3, 8011082 <__swsetup_r+0x7a>
 801106e:	89a3      	ldrh	r3, [r4, #12]
 8011070:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011078:	d003      	beq.n	8011082 <__swsetup_r+0x7a>
 801107a:	4621      	mov	r1, r4
 801107c:	4628      	mov	r0, r5
 801107e:	f000 f8a4 	bl	80111ca <__smakebuf_r>
 8011082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011086:	f013 0201 	ands.w	r2, r3, #1
 801108a:	d00a      	beq.n	80110a2 <__swsetup_r+0x9a>
 801108c:	2200      	movs	r2, #0
 801108e:	60a2      	str	r2, [r4, #8]
 8011090:	6962      	ldr	r2, [r4, #20]
 8011092:	4252      	negs	r2, r2
 8011094:	61a2      	str	r2, [r4, #24]
 8011096:	6922      	ldr	r2, [r4, #16]
 8011098:	b942      	cbnz	r2, 80110ac <__swsetup_r+0xa4>
 801109a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801109e:	d1c5      	bne.n	801102c <__swsetup_r+0x24>
 80110a0:	bd38      	pop	{r3, r4, r5, pc}
 80110a2:	0799      	lsls	r1, r3, #30
 80110a4:	bf58      	it	pl
 80110a6:	6962      	ldrpl	r2, [r4, #20]
 80110a8:	60a2      	str	r2, [r4, #8]
 80110aa:	e7f4      	b.n	8011096 <__swsetup_r+0x8e>
 80110ac:	2000      	movs	r0, #0
 80110ae:	e7f7      	b.n	80110a0 <__swsetup_r+0x98>
 80110b0:	20000130 	.word	0x20000130

080110b4 <memmove>:
 80110b4:	4288      	cmp	r0, r1
 80110b6:	b510      	push	{r4, lr}
 80110b8:	eb01 0402 	add.w	r4, r1, r2
 80110bc:	d902      	bls.n	80110c4 <memmove+0x10>
 80110be:	4284      	cmp	r4, r0
 80110c0:	4623      	mov	r3, r4
 80110c2:	d807      	bhi.n	80110d4 <memmove+0x20>
 80110c4:	1e43      	subs	r3, r0, #1
 80110c6:	42a1      	cmp	r1, r4
 80110c8:	d008      	beq.n	80110dc <memmove+0x28>
 80110ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110d2:	e7f8      	b.n	80110c6 <memmove+0x12>
 80110d4:	4402      	add	r2, r0
 80110d6:	4601      	mov	r1, r0
 80110d8:	428a      	cmp	r2, r1
 80110da:	d100      	bne.n	80110de <memmove+0x2a>
 80110dc:	bd10      	pop	{r4, pc}
 80110de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110e6:	e7f7      	b.n	80110d8 <memmove+0x24>

080110e8 <_sbrk_r>:
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	2300      	movs	r3, #0
 80110ec:	4d05      	ldr	r5, [pc, #20]	@ (8011104 <_sbrk_r+0x1c>)
 80110ee:	4604      	mov	r4, r0
 80110f0:	4608      	mov	r0, r1
 80110f2:	602b      	str	r3, [r5, #0]
 80110f4:	f7f0 fc72 	bl	80019dc <_sbrk>
 80110f8:	1c43      	adds	r3, r0, #1
 80110fa:	d102      	bne.n	8011102 <_sbrk_r+0x1a>
 80110fc:	682b      	ldr	r3, [r5, #0]
 80110fe:	b103      	cbz	r3, 8011102 <_sbrk_r+0x1a>
 8011100:	6023      	str	r3, [r4, #0]
 8011102:	bd38      	pop	{r3, r4, r5, pc}
 8011104:	200113a0 	.word	0x200113a0

08011108 <memchr>:
 8011108:	b2c9      	uxtb	r1, r1
 801110a:	4603      	mov	r3, r0
 801110c:	4402      	add	r2, r0
 801110e:	b510      	push	{r4, lr}
 8011110:	4293      	cmp	r3, r2
 8011112:	4618      	mov	r0, r3
 8011114:	d101      	bne.n	801111a <memchr+0x12>
 8011116:	2000      	movs	r0, #0
 8011118:	e003      	b.n	8011122 <memchr+0x1a>
 801111a:	7804      	ldrb	r4, [r0, #0]
 801111c:	3301      	adds	r3, #1
 801111e:	428c      	cmp	r4, r1
 8011120:	d1f6      	bne.n	8011110 <memchr+0x8>
 8011122:	bd10      	pop	{r4, pc}

08011124 <_realloc_r>:
 8011124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011128:	4680      	mov	r8, r0
 801112a:	4615      	mov	r5, r2
 801112c:	460c      	mov	r4, r1
 801112e:	b921      	cbnz	r1, 801113a <_realloc_r+0x16>
 8011130:	4611      	mov	r1, r2
 8011132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011136:	f7ff b9c5 	b.w	80104c4 <_malloc_r>
 801113a:	b92a      	cbnz	r2, 8011148 <_realloc_r+0x24>
 801113c:	f7ff f956 	bl	80103ec <_free_r>
 8011140:	2400      	movs	r4, #0
 8011142:	4620      	mov	r0, r4
 8011144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011148:	f000 f89e 	bl	8011288 <_malloc_usable_size_r>
 801114c:	4285      	cmp	r5, r0
 801114e:	4606      	mov	r6, r0
 8011150:	d802      	bhi.n	8011158 <_realloc_r+0x34>
 8011152:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011156:	d8f4      	bhi.n	8011142 <_realloc_r+0x1e>
 8011158:	4629      	mov	r1, r5
 801115a:	4640      	mov	r0, r8
 801115c:	f7ff f9b2 	bl	80104c4 <_malloc_r>
 8011160:	4607      	mov	r7, r0
 8011162:	2800      	cmp	r0, #0
 8011164:	d0ec      	beq.n	8011140 <_realloc_r+0x1c>
 8011166:	42b5      	cmp	r5, r6
 8011168:	462a      	mov	r2, r5
 801116a:	4621      	mov	r1, r4
 801116c:	bf28      	it	cs
 801116e:	4632      	movcs	r2, r6
 8011170:	f7ff f92f 	bl	80103d2 <memcpy>
 8011174:	4621      	mov	r1, r4
 8011176:	4640      	mov	r0, r8
 8011178:	463c      	mov	r4, r7
 801117a:	f7ff f937 	bl	80103ec <_free_r>
 801117e:	e7e0      	b.n	8011142 <_realloc_r+0x1e>

08011180 <__swhatbuf_r>:
 8011180:	b570      	push	{r4, r5, r6, lr}
 8011182:	460c      	mov	r4, r1
 8011184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011188:	b096      	sub	sp, #88	@ 0x58
 801118a:	4615      	mov	r5, r2
 801118c:	2900      	cmp	r1, #0
 801118e:	461e      	mov	r6, r3
 8011190:	da0c      	bge.n	80111ac <__swhatbuf_r+0x2c>
 8011192:	89a3      	ldrh	r3, [r4, #12]
 8011194:	2100      	movs	r1, #0
 8011196:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801119a:	bf14      	ite	ne
 801119c:	2340      	movne	r3, #64	@ 0x40
 801119e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80111a2:	2000      	movs	r0, #0
 80111a4:	6031      	str	r1, [r6, #0]
 80111a6:	602b      	str	r3, [r5, #0]
 80111a8:	b016      	add	sp, #88	@ 0x58
 80111aa:	bd70      	pop	{r4, r5, r6, pc}
 80111ac:	466a      	mov	r2, sp
 80111ae:	f000 f849 	bl	8011244 <_fstat_r>
 80111b2:	2800      	cmp	r0, #0
 80111b4:	dbed      	blt.n	8011192 <__swhatbuf_r+0x12>
 80111b6:	9901      	ldr	r1, [sp, #4]
 80111b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80111bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80111c0:	4259      	negs	r1, r3
 80111c2:	4159      	adcs	r1, r3
 80111c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111c8:	e7eb      	b.n	80111a2 <__swhatbuf_r+0x22>

080111ca <__smakebuf_r>:
 80111ca:	898b      	ldrh	r3, [r1, #12]
 80111cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111ce:	079d      	lsls	r5, r3, #30
 80111d0:	4606      	mov	r6, r0
 80111d2:	460c      	mov	r4, r1
 80111d4:	d507      	bpl.n	80111e6 <__smakebuf_r+0x1c>
 80111d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80111da:	6023      	str	r3, [r4, #0]
 80111dc:	6123      	str	r3, [r4, #16]
 80111de:	2301      	movs	r3, #1
 80111e0:	6163      	str	r3, [r4, #20]
 80111e2:	b003      	add	sp, #12
 80111e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111e6:	ab01      	add	r3, sp, #4
 80111e8:	466a      	mov	r2, sp
 80111ea:	f7ff ffc9 	bl	8011180 <__swhatbuf_r>
 80111ee:	9f00      	ldr	r7, [sp, #0]
 80111f0:	4605      	mov	r5, r0
 80111f2:	4630      	mov	r0, r6
 80111f4:	4639      	mov	r1, r7
 80111f6:	f7ff f965 	bl	80104c4 <_malloc_r>
 80111fa:	b948      	cbnz	r0, 8011210 <__smakebuf_r+0x46>
 80111fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011200:	059a      	lsls	r2, r3, #22
 8011202:	d4ee      	bmi.n	80111e2 <__smakebuf_r+0x18>
 8011204:	f023 0303 	bic.w	r3, r3, #3
 8011208:	f043 0302 	orr.w	r3, r3, #2
 801120c:	81a3      	strh	r3, [r4, #12]
 801120e:	e7e2      	b.n	80111d6 <__smakebuf_r+0xc>
 8011210:	89a3      	ldrh	r3, [r4, #12]
 8011212:	6020      	str	r0, [r4, #0]
 8011214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011218:	81a3      	strh	r3, [r4, #12]
 801121a:	9b01      	ldr	r3, [sp, #4]
 801121c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011220:	b15b      	cbz	r3, 801123a <__smakebuf_r+0x70>
 8011222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011226:	4630      	mov	r0, r6
 8011228:	f000 f81e 	bl	8011268 <_isatty_r>
 801122c:	b128      	cbz	r0, 801123a <__smakebuf_r+0x70>
 801122e:	89a3      	ldrh	r3, [r4, #12]
 8011230:	f023 0303 	bic.w	r3, r3, #3
 8011234:	f043 0301 	orr.w	r3, r3, #1
 8011238:	81a3      	strh	r3, [r4, #12]
 801123a:	89a3      	ldrh	r3, [r4, #12]
 801123c:	431d      	orrs	r5, r3
 801123e:	81a5      	strh	r5, [r4, #12]
 8011240:	e7cf      	b.n	80111e2 <__smakebuf_r+0x18>
	...

08011244 <_fstat_r>:
 8011244:	b538      	push	{r3, r4, r5, lr}
 8011246:	2300      	movs	r3, #0
 8011248:	4d06      	ldr	r5, [pc, #24]	@ (8011264 <_fstat_r+0x20>)
 801124a:	4604      	mov	r4, r0
 801124c:	4608      	mov	r0, r1
 801124e:	4611      	mov	r1, r2
 8011250:	602b      	str	r3, [r5, #0]
 8011252:	f7f0 fb9a 	bl	800198a <_fstat>
 8011256:	1c43      	adds	r3, r0, #1
 8011258:	d102      	bne.n	8011260 <_fstat_r+0x1c>
 801125a:	682b      	ldr	r3, [r5, #0]
 801125c:	b103      	cbz	r3, 8011260 <_fstat_r+0x1c>
 801125e:	6023      	str	r3, [r4, #0]
 8011260:	bd38      	pop	{r3, r4, r5, pc}
 8011262:	bf00      	nop
 8011264:	200113a0 	.word	0x200113a0

08011268 <_isatty_r>:
 8011268:	b538      	push	{r3, r4, r5, lr}
 801126a:	2300      	movs	r3, #0
 801126c:	4d05      	ldr	r5, [pc, #20]	@ (8011284 <_isatty_r+0x1c>)
 801126e:	4604      	mov	r4, r0
 8011270:	4608      	mov	r0, r1
 8011272:	602b      	str	r3, [r5, #0]
 8011274:	f7f0 fb99 	bl	80019aa <_isatty>
 8011278:	1c43      	adds	r3, r0, #1
 801127a:	d102      	bne.n	8011282 <_isatty_r+0x1a>
 801127c:	682b      	ldr	r3, [r5, #0]
 801127e:	b103      	cbz	r3, 8011282 <_isatty_r+0x1a>
 8011280:	6023      	str	r3, [r4, #0]
 8011282:	bd38      	pop	{r3, r4, r5, pc}
 8011284:	200113a0 	.word	0x200113a0

08011288 <_malloc_usable_size_r>:
 8011288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801128c:	1f18      	subs	r0, r3, #4
 801128e:	2b00      	cmp	r3, #0
 8011290:	bfbc      	itt	lt
 8011292:	580b      	ldrlt	r3, [r1, r0]
 8011294:	18c0      	addlt	r0, r0, r3
 8011296:	4770      	bx	lr

08011298 <_init>:
 8011298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801129a:	bf00      	nop
 801129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801129e:	bc08      	pop	{r3}
 80112a0:	469e      	mov	lr, r3
 80112a2:	4770      	bx	lr

080112a4 <_fini>:
 80112a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112a6:	bf00      	nop
 80112a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112aa:	bc08      	pop	{r3}
 80112ac:	469e      	mov	lr, r3
 80112ae:	4770      	bx	lr
