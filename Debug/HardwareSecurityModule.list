
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016c44  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e44  08016e90  08016e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018cd4  08018cd4  0001a180  2**0
                  CONTENTS
  4 .ARM          00000008  08018cd4  08018cd4  00019cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018cdc  08018cdc  0001a180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018cdc  08018cdc  00019cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018ce0  08018ce0  00019ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  08018ce4  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000133b0  20000180  08018e64  0001a180  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20013530  08018e64  0001a530  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001a180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f326  00000000  00000000  0001a1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077a5  00000000  00000000  000494dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002378  00000000  00000000  00050c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ac2  00000000  00000000  00053000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d485  00000000  00000000  00054ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ddca  00000000  00000000  00091f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014df6e  00000000  00000000  000cfd11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021dc7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a3c  00000000  00000000  0021dcc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00227700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	08016e78 	.word	0x08016e78

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	08016e78 	.word	0x08016e78

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GetCommandName>:

#include <stdio.h>
#include <stdint.h>

static const char* GetCommandName(uint8_t cmd)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    switch (cmd)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	2b0e      	cmp	r3, #14
 80005b4:	d832      	bhi.n	800061c <GetCommandName+0x78>
 80005b6:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <GetCommandName+0x18>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005f9 	.word	0x080005f9
 80005c0:	080005fd 	.word	0x080005fd
 80005c4:	08000601 	.word	0x08000601
 80005c8:	0800061d 	.word	0x0800061d
 80005cc:	08000605 	.word	0x08000605
 80005d0:	08000609 	.word	0x08000609
 80005d4:	0800060d 	.word	0x0800060d
 80005d8:	08000611 	.word	0x08000611
 80005dc:	08000615 	.word	0x08000615
 80005e0:	0800061d 	.word	0x0800061d
 80005e4:	0800061d 	.word	0x0800061d
 80005e8:	0800061d 	.word	0x0800061d
 80005ec:	0800061d 	.word	0x0800061d
 80005f0:	0800061d 	.word	0x0800061d
 80005f4:	08000619 	.word	0x08000619
    {
        case CMD_ENCRYPT:   	return "Encryption Operation";
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <GetCommandName+0x88>)
 80005fa:	e010      	b.n	800061e <GetCommandName+0x7a>
        case CMD_DECRYPT:   	return "Decryption Operation";
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <GetCommandName+0x8c>)
 80005fe:	e00e      	b.n	800061e <GetCommandName+0x7a>
        case CMD_HASH:      	return "Hashing Operation";
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <GetCommandName+0x90>)
 8000602:	e00c      	b.n	800061e <GetCommandName+0x7a>
        case CMD_RANDOM:   		return "RNG Operation";
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <GetCommandName+0x94>)
 8000606:	e00a      	b.n	800061e <GetCommandName+0x7a>
        case CMD_OTP:   		return "OTP Operation";
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <GetCommandName+0x98>)
 800060a:	e008      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_GEN:   	return "Key Generation Operation";
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <GetCommandName+0x9c>)
 800060e:	e006      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_STORE:   	return "Key Store Operation";
 8000610:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <GetCommandName+0xa0>)
 8000612:	e004      	b.n	800061e <GetCommandName+0x7a>
        case CMD_KEY_DELETE:   	return "Key Delete Operation";
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <GetCommandName+0xa4>)
 8000616:	e002      	b.n	800061e <GetCommandName+0x7a>
        case CMD_PING:   		return "Device Ping Operation";
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <GetCommandName+0xa8>)
 800061a:	e000      	b.n	800061e <GetCommandName+0x7a>
        default:            	return "Unknown Command";
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <GetCommandName+0xac>)
    }
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	08016e90 	.word	0x08016e90
 8000630:	08016ea8 	.word	0x08016ea8
 8000634:	08016ec0 	.word	0x08016ec0
 8000638:	08016ed4 	.word	0x08016ed4
 800063c:	08016ee4 	.word	0x08016ee4
 8000640:	08016ef4 	.word	0x08016ef4
 8000644:	08016f10 	.word	0x08016f10
 8000648:	08016f24 	.word	0x08016f24
 800064c:	08016f3c 	.word	0x08016f3c
 8000650:	08016f54 	.word	0x08016f54

08000654 <GetOptionName>:

static const char* GetOptionName(uint8_t option)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
    switch (option)
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	3b01      	subs	r3, #1
 8000662:	2b4e      	cmp	r3, #78	@ 0x4e
 8000664:	f200 80d2 	bhi.w	800080c <GetOptionName+0x1b8>
 8000668:	a201      	add	r2, pc, #4	@ (adr r2, 8000670 <GetOptionName+0x1c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080007ad 	.word	0x080007ad
 8000674:	080007b1 	.word	0x080007b1
 8000678:	0800080d 	.word	0x0800080d
 800067c:	0800080d 	.word	0x0800080d
 8000680:	0800080d 	.word	0x0800080d
 8000684:	0800080d 	.word	0x0800080d
 8000688:	0800080d 	.word	0x0800080d
 800068c:	0800080d 	.word	0x0800080d
 8000690:	0800080d 	.word	0x0800080d
 8000694:	0800080d 	.word	0x0800080d
 8000698:	0800080d 	.word	0x0800080d
 800069c:	0800080d 	.word	0x0800080d
 80006a0:	0800080d 	.word	0x0800080d
 80006a4:	0800080d 	.word	0x0800080d
 80006a8:	0800080d 	.word	0x0800080d
 80006ac:	0800080d 	.word	0x0800080d
 80006b0:	080007b5 	.word	0x080007b5
 80006b4:	080007b9 	.word	0x080007b9
 80006b8:	0800080d 	.word	0x0800080d
 80006bc:	0800080d 	.word	0x0800080d
 80006c0:	0800080d 	.word	0x0800080d
 80006c4:	0800080d 	.word	0x0800080d
 80006c8:	0800080d 	.word	0x0800080d
 80006cc:	0800080d 	.word	0x0800080d
 80006d0:	0800080d 	.word	0x0800080d
 80006d4:	0800080d 	.word	0x0800080d
 80006d8:	0800080d 	.word	0x0800080d
 80006dc:	0800080d 	.word	0x0800080d
 80006e0:	0800080d 	.word	0x0800080d
 80006e4:	0800080d 	.word	0x0800080d
 80006e8:	0800080d 	.word	0x0800080d
 80006ec:	0800080d 	.word	0x0800080d
 80006f0:	080007bd 	.word	0x080007bd
 80006f4:	080007c1 	.word	0x080007c1
 80006f8:	080007c5 	.word	0x080007c5
 80006fc:	080007c9 	.word	0x080007c9
 8000700:	0800080d 	.word	0x0800080d
 8000704:	0800080d 	.word	0x0800080d
 8000708:	0800080d 	.word	0x0800080d
 800070c:	0800080d 	.word	0x0800080d
 8000710:	0800080d 	.word	0x0800080d
 8000714:	0800080d 	.word	0x0800080d
 8000718:	0800080d 	.word	0x0800080d
 800071c:	0800080d 	.word	0x0800080d
 8000720:	0800080d 	.word	0x0800080d
 8000724:	0800080d 	.word	0x0800080d
 8000728:	0800080d 	.word	0x0800080d
 800072c:	0800080d 	.word	0x0800080d
 8000730:	080007cd 	.word	0x080007cd
 8000734:	080007d1 	.word	0x080007d1
 8000738:	0800080d 	.word	0x0800080d
 800073c:	0800080d 	.word	0x0800080d
 8000740:	0800080d 	.word	0x0800080d
 8000744:	0800080d 	.word	0x0800080d
 8000748:	0800080d 	.word	0x0800080d
 800074c:	0800080d 	.word	0x0800080d
 8000750:	0800080d 	.word	0x0800080d
 8000754:	0800080d 	.word	0x0800080d
 8000758:	0800080d 	.word	0x0800080d
 800075c:	0800080d 	.word	0x0800080d
 8000760:	0800080d 	.word	0x0800080d
 8000764:	0800080d 	.word	0x0800080d
 8000768:	0800080d 	.word	0x0800080d
 800076c:	0800080d 	.word	0x0800080d
 8000770:	080007d5 	.word	0x080007d5
 8000774:	080007d9 	.word	0x080007d9
 8000778:	080007dd 	.word	0x080007dd
 800077c:	080007e1 	.word	0x080007e1
 8000780:	080007e5 	.word	0x080007e5
 8000784:	080007e9 	.word	0x080007e9
 8000788:	080007ed 	.word	0x080007ed
 800078c:	080007f1 	.word	0x080007f1
 8000790:	080007f5 	.word	0x080007f5
 8000794:	080007f9 	.word	0x080007f9
 8000798:	0800080d 	.word	0x0800080d
 800079c:	080007fd 	.word	0x080007fd
 80007a0:	08000801 	.word	0x08000801
 80007a4:	08000805 	.word	0x08000805
 80007a8:	08000809 	.word	0x08000809
    {
    	case OPTION_ENCRYP_KEY128:	return "128-bit Encryption";
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <GetOptionName+0x1c8>)
 80007ae:	e02e      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_ENCRYP_KEY256:	return "256-bit Encryption";
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <GetOptionName+0x1cc>)
 80007b2:	e02c      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_DECRYP_KEY128:	return "128-bit Decryption";
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <GetOptionName+0x1d0>)
 80007b6:	e02a      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_DECRYP_KEY256:	return "256-bit Decryption";
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <GetOptionName+0x1d4>)
 80007ba:	e028      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_HASH_SHA224:	return "SHA224 Hashing Algorithm";
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <GetOptionName+0x1d8>)
 80007be:	e026      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_HASH_SHA256:	return "SHA256 Hashing Algorithm";
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <GetOptionName+0x1dc>)
 80007c2:	e024      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_HASH_SHA384:	return "SHA384 Hashing Algorithm";
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <GetOptionName+0x1e0>)
 80007c6:	e022      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_HASH_SHA512:	return "SHA512 Hashing Algorithm";
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <GetOptionName+0x1e4>)
 80007ca:	e020      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_HMAC_SHA224:	return "SHA224 HMAC Algorithm";
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <GetOptionName+0x1e8>)
 80007ce:	e01e      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_HMAC_SHA256:	return "SHA256 HMAC Algorithm";
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <GetOptionName+0x1ec>)
 80007d2:	e01c      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0004:		return "4-byte Random Number Generation";
 80007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <GetOptionName+0x1f0>)
 80007d6:	e01a      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0008:		return "8-byte Random Number Generation";
 80007d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <GetOptionName+0x1f4>)
 80007da:	e018      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0016:		return "16-byte Random Number Generation";
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <GetOptionName+0x1f8>)
 80007de:	e016      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0024:		return "24-byte Random Number Generation";
 80007e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <GetOptionName+0x1fc>)
 80007e2:	e014      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0032:		return "32-byte Random Number Generation";
 80007e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <GetOptionName+0x200>)
 80007e6:	e012      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0048:		return "48-byte Random Number Generation";
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <GetOptionName+0x204>)
 80007ea:	e010      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0064:		return "64-byte Random Number Generation";
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <GetOptionName+0x208>)
 80007ee:	e00e      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0066:		return "66-byte Random Number Generation";
 80007f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000860 <GetOptionName+0x20c>)
 80007f2:	e00c      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0128:		return "128-byte Random Number Generation";
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <GetOptionName+0x210>)
 80007f6:	e00a      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0256:		return "256-byte Random Number Generation";
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <GetOptionName+0x214>)
 80007fa:	e008      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_0512:		return "512-byte Random Number Generation";
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <GetOptionName+0x218>)
 80007fe:	e006      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_1024:		return "1024-byte Random Number Generation";
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <GetOptionName+0x21c>)
 8000802:	e004      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_2048:		return "2048-byte Random Number Generation";
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <GetOptionName+0x220>)
 8000806:	e002      	b.n	800080e <GetOptionName+0x1ba>
		case OPTION_RNG_4096:		return "4096-byte Random Number Generation";
 8000808:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <GetOptionName+0x224>)
 800080a:	e000      	b.n	800080e <GetOptionName+0x1ba>
		default:					return "Unknown Command"; 	break;
 800080c:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <GetOptionName+0x228>)
    }
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	08016f64 	.word	0x08016f64
 8000820:	08016f78 	.word	0x08016f78
 8000824:	08016f8c 	.word	0x08016f8c
 8000828:	08016fa0 	.word	0x08016fa0
 800082c:	08016fb4 	.word	0x08016fb4
 8000830:	08016fd0 	.word	0x08016fd0
 8000834:	08016fec 	.word	0x08016fec
 8000838:	08017008 	.word	0x08017008
 800083c:	08017024 	.word	0x08017024
 8000840:	0801703c 	.word	0x0801703c
 8000844:	08017054 	.word	0x08017054
 8000848:	08017074 	.word	0x08017074
 800084c:	08017094 	.word	0x08017094
 8000850:	080170b8 	.word	0x080170b8
 8000854:	080170dc 	.word	0x080170dc
 8000858:	08017100 	.word	0x08017100
 800085c:	08017124 	.word	0x08017124
 8000860:	08017148 	.word	0x08017148
 8000864:	0801716c 	.word	0x0801716c
 8000868:	08017190 	.word	0x08017190
 800086c:	080171b4 	.word	0x080171b4
 8000870:	080171d8 	.word	0x080171d8
 8000874:	080171fc 	.word	0x080171fc
 8000878:	08017220 	.word	0x08017220
 800087c:	08016f54 	.word	0x08016f54

08000880 <LogParsedPacket>:

static void LogParsedPacket(const ParsedPacket_t* packet)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	@ 0x50
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d103      	bne.n	8000896 <LogParsedPacket+0x16>
    {
        log_error("ParsedPacket is NULL");
 800088e:	4841      	ldr	r0, [pc, #260]	@ (8000994 <LogParsedPacket+0x114>)
 8000890:	f003 fa14 	bl	8003cbc <log_error>
        return;
 8000894:	e07b      	b.n	800098e <LogParsedPacket+0x10e>
    }

    log_debug("PARSED PACKET:");
 8000896:	4840      	ldr	r0, [pc, #256]	@ (8000998 <LogParsedPacket+0x118>)
 8000898:	f003 f9c2 	bl	8003c20 <log_debug>
    log_debug("TXID       : %u", packet->transactionID);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	483e      	ldr	r0, [pc, #248]	@ (800099c <LogParsedPacket+0x11c>)
 80008a4:	f003 f9bc 	bl	8003c20 <log_debug>
    log_debug("CMD        : %s", GetCommandName(packet->cmd));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe79 	bl	80005a4 <GetCommandName>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4619      	mov	r1, r3
 80008b6:	483a      	ldr	r0, [pc, #232]	@ (80009a0 <LogParsedPacket+0x120>)
 80008b8:	f003 f9b2 	bl	8003c20 <log_debug>
    log_debug("OPTION     : %s", GetOptionName(packet->option));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	795b      	ldrb	r3, [r3, #5]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fec7 	bl	8000654 <GetOptionName>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4619      	mov	r1, r3
 80008ca:	4836      	ldr	r0, [pc, #216]	@ (80009a4 <LogParsedPacket+0x124>)
 80008cc:	f003 f9a8 	bl	8003c20 <log_debug>
    log_debug("INPUT SIZE : %hu bytes", packet->inputSize);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	88db      	ldrh	r3, [r3, #6]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4834      	ldr	r0, [pc, #208]	@ (80009a8 <LogParsedPacket+0x128>)
 80008d8:	f003 f9a2 	bl	8003c20 <log_debug>

    const uint8_t* data = packet->inputData;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3308      	adds	r3, #8
 80008e0:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->inputSize;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	88db      	ldrh	r3, [r3, #6]
 80008e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80008ee:	e049      	b.n	8000984 <LogParsedPacket+0x104>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	222d      	movs	r2, #45	@ 0x2d
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f015 fb8b 	bl	8016018 <memset>
        char* ptr = line;
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000908:	2300      	movs	r3, #0
 800090a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800090e:	e017      	b.n	8000940 <LogParsedPacket+0xc0>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 8000910:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000914:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000918:	4413      	add	r3, r2
 800091a:	461a      	mov	r2, r3
 800091c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	4921      	ldr	r1, [pc, #132]	@ (80009ac <LogParsedPacket+0x12c>)
 8000926:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000928:	f015 faca 	bl	8015ec0 <siprintf>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000932:	4413      	add	r3, r2
 8000934:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000936:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800093a:	3301      	adds	r3, #1
 800093c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000940:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d807      	bhi.n	8000958 <LogParsedPacket+0xd8>
 8000948:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800094c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000950:	441a      	add	r2, r3
 8000952:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000954:	429a      	cmp	r2, r3
 8000956:	dbdb      	blt.n	8000910 <LogParsedPacket+0x90>
        }

        if (i == 0)
 8000958:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800095c:	2b00      	cmp	r3, #0
 800095e:	d106      	bne.n	800096e <LogParsedPacket+0xee>
        {
        	log_debug("INPUT DATA : %s", line);
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	4619      	mov	r1, r3
 8000966:	4812      	ldr	r0, [pc, #72]	@ (80009b0 <LogParsedPacket+0x130>)
 8000968:	f003 f95a 	bl	8003c20 <log_debug>
 800096c:	e005      	b.n	800097a <LogParsedPacket+0xfa>
        }
        else
        {
        	log_debug("             %s", line);
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4619      	mov	r1, r3
 8000974:	480f      	ldr	r0, [pc, #60]	@ (80009b4 <LogParsedPacket+0x134>)
 8000976:	f003 f953 	bl	8003c20 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 800097a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800097e:	3310      	adds	r3, #16
 8000980:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000984:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000988:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800098a:	429a      	cmp	r2, r3
 800098c:	d3b0      	bcc.n	80008f0 <LogParsedPacket+0x70>
        }
    }
    // log_debug("EOD FLAG    : %04X", packet->out_eod_flag);
}
 800098e:	3750      	adds	r7, #80	@ 0x50
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	08017244 	.word	0x08017244
 8000998:	0801725c 	.word	0x0801725c
 800099c:	0801726c 	.word	0x0801726c
 80009a0:	0801727c 	.word	0x0801727c
 80009a4:	0801728c 	.word	0x0801728c
 80009a8:	0801729c 	.word	0x0801729c
 80009ac:	080172b4 	.word	0x080172b4
 80009b0:	080172bc 	.word	0x080172bc
 80009b4:	080172cc 	.word	0x080172cc

080009b8 <LogResponsePacket>:

static void LogResponsePacket(const ResponsePacket_t* packet)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	@ 0x50
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    if (!packet)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d103      	bne.n	80009ce <LogResponsePacket+0x16>
    {
        log_error("ResponsePacket is NULL");
 80009c6:	483b      	ldr	r0, [pc, #236]	@ (8000ab4 <LogResponsePacket+0xfc>)
 80009c8:	f003 f978 	bl	8003cbc <log_error>
        return;
 80009cc:	e06f      	b.n	8000aae <LogResponsePacket+0xf6>
    }

    log_debug("RESPONSE PACKET");
 80009ce:	483a      	ldr	r0, [pc, #232]	@ (8000ab8 <LogResponsePacket+0x100>)
 80009d0:	f003 f926 	bl	8003c20 <log_debug>
    log_debug("TXID        : %u", packet->transactionID);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	4838      	ldr	r0, [pc, #224]	@ (8000abc <LogResponsePacket+0x104>)
 80009dc:	f003 f920 	bl	8003c20 <log_debug>
    log_debug("OUTPUT SIZE : %u bytes", packet->outputSize);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	889b      	ldrh	r3, [r3, #4]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4836      	ldr	r0, [pc, #216]	@ (8000ac0 <LogResponsePacket+0x108>)
 80009e8:	f003 f91a 	bl	8003c20 <log_debug>

    const uint8_t* data = packet->outputData;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3306      	adds	r3, #6
 80009f0:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->outputSize;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	889b      	ldrh	r3, [r3, #4]
 80009f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80009fe:	e049      	b.n	8000a94 <LogResponsePacket+0xdc>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	222d      	movs	r2, #45	@ 0x2d
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f015 fb03 	bl	8016018 <memset>
        char* ptr = line;
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000a1e:	e017      	b.n	8000a50 <LogResponsePacket+0x98>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 8000a20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a28:	4413      	add	r3, r2
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000a2e:	4413      	add	r3, r2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4923      	ldr	r1, [pc, #140]	@ (8000ac4 <LogResponsePacket+0x10c>)
 8000a36:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8000a38:	f015 fa42 	bl	8015ec0 <siprintf>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a42:	4413      	add	r3, r2
 8000a44:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000a46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000a50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d807      	bhi.n	8000a68 <LogResponsePacket+0xb0>
 8000a58:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a60:	441a      	add	r2, r3
 8000a62:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbdb      	blt.n	8000a20 <LogResponsePacket+0x68>
        }

        if (i == 0)
 8000a68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d106      	bne.n	8000a7e <LogResponsePacket+0xc6>
            log_debug("OUTPUT DATA : %s", line);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	4814      	ldr	r0, [pc, #80]	@ (8000ac8 <LogResponsePacket+0x110>)
 8000a78:	f003 f8d2 	bl	8003c20 <log_debug>
 8000a7c:	e005      	b.n	8000a8a <LogResponsePacket+0xd2>
        else
            log_debug("              %s", line);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	4811      	ldr	r0, [pc, #68]	@ (8000acc <LogResponsePacket+0x114>)
 8000a86:	f003 f8cb 	bl	8003c20 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000a8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a8e:	3310      	adds	r3, #16
 8000a90:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000a94:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3b0      	bcc.n	8000a00 <LogResponsePacket+0x48>
    }
    log_debug("EOD FLAG    : %04X", packet->out_eod_flag);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <LogResponsePacket+0x118>)
 8000aaa:	f003 f8b9 	bl	8003c20 <log_debug>
}
 8000aae:	3750      	adds	r7, #80	@ 0x50
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	080172dc 	.word	0x080172dc
 8000ab8:	080172f4 	.word	0x080172f4
 8000abc:	08017304 	.word	0x08017304
 8000ac0:	08017318 	.word	0x08017318
 8000ac4:	080172b4 	.word	0x080172b4
 8000ac8:	08017330 	.word	0x08017330
 8000acc:	08017344 	.word	0x08017344
 8000ad0:	08017358 	.word	0x08017358

08000ad4 <LogTransmitBuffer>:

static void LogTransmitBuffer(const uint8_t* usb_tx_buffer, uint32_t usb_tx_index)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b092      	sub	sp, #72	@ 0x48
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
    if (!usb_tx_buffer || usb_tx_index == 0)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <LogTransmitBuffer+0x16>
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d103      	bne.n	8000af2 <LogTransmitBuffer+0x1e>
    {
        log_debug("USB TX buffer is empty or NULL.");
 8000aea:	4826      	ldr	r0, [pc, #152]	@ (8000b84 <LogTransmitBuffer+0xb0>)
 8000aec:	f003 f898 	bl	8003c20 <log_debug>
        return;
 8000af0:	e045      	b.n	8000b7e <LogTransmitBuffer+0xaa>
    }


    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000af2:	2300      	movs	r3, #0
 8000af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8000af6:	e03e      	b.n	8000b76 <LogTransmitBuffer+0xa2>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	222d      	movs	r2, #45	@ 0x2d
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f015 fa87 	bl	8016018 <memset>
        char* ptr = line;
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	643b      	str	r3, [r7, #64]	@ 0x40

        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000b10:	2300      	movs	r3, #0
 8000b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b14:	e012      	b.n	8000b3c <LogTransmitBuffer+0x68>
        {
            ptr += sprintf(ptr, "%02X ", usb_tx_buffer[i + j]);
 8000b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b1a:	4413      	add	r3, r2
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	4918      	ldr	r1, [pc, #96]	@ (8000b88 <LogTransmitBuffer+0xb4>)
 8000b26:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000b28:	f015 f9ca 	bl	8015ec0 <siprintf>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b32:	4413      	add	r3, r2
 8000b34:	643b      	str	r3, [r7, #64]	@ 0x40
        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b38:	3301      	adds	r3, #1
 8000b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d805      	bhi.n	8000b4e <LogTransmitBuffer+0x7a>
 8000b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b46:	4413      	add	r3, r2
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d8e3      	bhi.n	8000b16 <LogTransmitBuffer+0x42>
        }

        if (i == 0)
 8000b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d107      	bne.n	8000b64 <LogTransmitBuffer+0x90>
            log_debug("USB Tx [%lu bytes]: %s", usb_tx_index, line);
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	461a      	mov	r2, r3
 8000b5a:	6839      	ldr	r1, [r7, #0]
 8000b5c:	480b      	ldr	r0, [pc, #44]	@ (8000b8c <LogTransmitBuffer+0xb8>)
 8000b5e:	f003 f85f 	bl	8003c20 <log_debug>
 8000b62:	e005      	b.n	8000b70 <LogTransmitBuffer+0x9c>
        else
            log_debug("                   %s", line);  // 17-character indent to align with line 1
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4809      	ldr	r0, [pc, #36]	@ (8000b90 <LogTransmitBuffer+0xbc>)
 8000b6c:	f003 f858 	bl	8003c20 <log_debug>
    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b72:	3310      	adds	r3, #16
 8000b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d3bc      	bcc.n	8000af8 <LogTransmitBuffer+0x24>
    }
}
 8000b7e:	3748      	adds	r7, #72	@ 0x48
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	0801736c 	.word	0x0801736c
 8000b88:	080172b4 	.word	0x080172b4
 8000b8c:	0801738c 	.word	0x0801738c
 8000b90:	080173a4 	.word	0x080173a4

08000b94 <HSMManager_Init>:

void HSMManager_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	// int err;

	log_init(LOG_LEVEL_DEBUG);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f002 ffdb 	bl	8003b54 <log_init>
	log_info("Initializing HSM Device.");
 8000b9e:	4838      	ldr	r0, [pc, #224]	@ (8000c80 <HSMManager_Init+0xec>)
 8000ba0:	f003 f858 	bl	8003c54 <log_info>
	HAL_Delay(1000);
 8000ba4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ba8:	f004 fd70 	bl	800568c <HAL_Delay>
	log_info("Turning LED ON.");
 8000bac:	4835      	ldr	r0, [pc, #212]	@ (8000c84 <HSMManager_Init+0xf0>)
 8000bae:	f003 f851 	bl	8003c54 <log_info>
	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f004 fb08 	bl	80051c8 <BSP_LED_Toggle>
 8000bb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bbc:	f004 fd66 	bl	800568c <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f004 fb01 	bl	80051c8 <BSP_LED_Toggle>
 8000bc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bca:	f004 fd5f 	bl	800568c <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f004 fafa 	bl	80051c8 <BSP_LED_Toggle>
 8000bd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bd8:	f004 fd58 	bl	800568c <HAL_Delay>
	log_clearline();
 8000bdc:	f002 ffca 	bl	8003b74 <log_clearline>
	log_info("Turning LED OFF.");
 8000be0:	4829      	ldr	r0, [pc, #164]	@ (8000c88 <HSMManager_Init+0xf4>)
 8000be2:	f003 f837 	bl	8003c54 <log_info>
	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f004 faee 	bl	80051c8 <BSP_LED_Toggle>
 8000bec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf0:	f004 fd4c 	bl	800568c <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f004 fae7 	bl	80051c8 <BSP_LED_Toggle>
 8000bfa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bfe:	f004 fd45 	bl	800568c <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f004 fae0 	bl	80051c8 <BSP_LED_Toggle>
 8000c08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c0c:	f004 fd3e 	bl	800568c <HAL_Delay>
	log_clearline();
 8000c10:	f002 ffb0 	bl	8003b74 <log_clearline>
	{
		log_error("Key Manager did not Initialize. Error.");
		while(1);
	}*/

	log_info("Turning LED ON.");
 8000c14:	481b      	ldr	r0, [pc, #108]	@ (8000c84 <HSMManager_Init+0xf0>)
 8000c16:	f003 f81d 	bl	8003c54 <log_info>
	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f004 fad4 	bl	80051c8 <BSP_LED_Toggle>
 8000c20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c24:	f004 fd32 	bl	800568c <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f004 facd 	bl	80051c8 <BSP_LED_Toggle>
 8000c2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c32:	f004 fd2b 	bl	800568c <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000c36:	2001      	movs	r0, #1
 8000c38:	f004 fac6 	bl	80051c8 <BSP_LED_Toggle>
 8000c3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c40:	f004 fd24 	bl	800568c <HAL_Delay>
	log_clearline();
 8000c44:	f002 ff96 	bl	8003b74 <log_clearline>
	log_info("Turning LED OFF.");
 8000c48:	480f      	ldr	r0, [pc, #60]	@ (8000c88 <HSMManager_Init+0xf4>)
 8000c4a:	f003 f803 	bl	8003c54 <log_info>
	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f004 faba 	bl	80051c8 <BSP_LED_Toggle>
 8000c54:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c58:	f004 fd18 	bl	800568c <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f004 fab3 	bl	80051c8 <BSP_LED_Toggle>
 8000c62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c66:	f004 fd11 	bl	800568c <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f004 faac 	bl	80051c8 <BSP_LED_Toggle>
 8000c70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c74:	f004 fd0a 	bl	800568c <HAL_Delay>
	log_clearline();
 8000c78:	f002 ff7c 	bl	8003b74 <log_clearline>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	080173bc 	.word	0x080173bc
 8000c84:	080173d8 	.word	0x080173d8
 8000c88:	080173e8 	.word	0x080173e8

08000c8c <HSMManager_ProcessCommand>:


OperationStatus_t HSMManager_ProcessCommand(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	f5ad 3d90 	sub.w	sp, sp, #73728	@ 0x12000
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
	 if (usb_rx_complete)
 8000c96:	4b48      	ldr	r3, [pc, #288]	@ (8000db8 <HSMManager_ProcessCommand+0x12c>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 8084 	beq.w	8000daa <HSMManager_ProcessCommand+0x11e>
	 {
		 ParsedPacket_t request;
		 ResponsePacket_t response;
		 uint8_t usb_tx_buffer[MAX_USB_DATA_SIZE];
		 uint16_t usb_tx_index;
		 ParseStatus_t status = PacketParser_Parse(usb_rx_buffer, usb_rx_index, &request);
 8000ca2:	4b46      	ldr	r3, [pc, #280]	@ (8000dbc <HSMManager_ProcessCommand+0x130>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	b299      	uxth	r1, r3
 8000ca8:	f107 0318 	add.w	r3, r7, #24
 8000cac:	3b18      	subs	r3, #24
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4843      	ldr	r0, [pc, #268]	@ (8000dc0 <HSMManager_ProcessCommand+0x134>)
 8000cb2:	f002 fe65 	bl	8003980 <PacketParser_Parse>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000cbc:	f102 0217 	add.w	r2, r2, #23
 8000cc0:	7013      	strb	r3, [r2, #0]

		 if (status == PARSE_SUCCESS)
 8000cc2:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000cc6:	f103 0317 	add.w	r3, r3, #23
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d163      	bne.n	8000d98 <HSMManager_ProcessCommand+0x10c>
		 {
			 log_debug("Packet Parsed Successfully:");
 8000cd0:	483c      	ldr	r0, [pc, #240]	@ (8000dc4 <HSMManager_ProcessCommand+0x138>)
 8000cd2:	f002 ffa5 	bl	8003c20 <log_debug>
			 LogParsedPacket(&request);
 8000cd6:	f107 0318 	add.w	r3, r7, #24
 8000cda:	3b18      	subs	r3, #24
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fdcf 	bl	8000880 <LogParsedPacket>
			 OperationDispatcher_Dispatch(&request, &response);
 8000ce2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000ce6:	f102 0218 	add.w	r2, r2, #24
 8000cea:	3a10      	subs	r2, #16
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	3b18      	subs	r3, #24
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f869 	bl	8000dcc <OperationDispatcher_Dispatch>
			 response.transactionID = request.transactionID;
 8000cfa:	f107 0318 	add.w	r3, r7, #24
 8000cfe:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000d02:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000d06:	f102 0218 	add.w	r2, r2, #24
 8000d0a:	f842 3c10 	str.w	r3, [r2, #-16]
			 LogResponsePacket(&response);
 8000d0e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000d12:	f103 0318 	add.w	r3, r3, #24
 8000d16:	3b10      	subs	r3, #16
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fe4d 	bl	80009b8 <LogResponsePacket>
			 usb_tx_index = response.outputSize + 10;
 8000d1e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000d22:	f103 0318 	add.w	r3, r3, #24
 8000d26:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000d2a:	330a      	adds	r3, #10
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000d32:	f102 0214 	add.w	r2, r2, #20
 8000d36:	8013      	strh	r3, [r2, #0]
			 PacketBuilder_Build(&response, usb_tx_buffer, &usb_tx_index);
 8000d38:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000d3c:	f102 0214 	add.w	r2, r2, #20
 8000d40:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8000d44:	f101 0118 	add.w	r1, r1, #24
 8000d48:	3904      	subs	r1, #4
 8000d4a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000d4e:	f103 0318 	add.w	r3, r3, #24
 8000d52:	3b10      	subs	r3, #16
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 fd63 	bl	8003820 <PacketBuilder_Build>
			 LogTransmitBuffer(usb_tx_buffer, usb_tx_index);
 8000d5a:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d5e:	f103 0314 	add.w	r3, r3, #20
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000d6a:	f103 0318 	add.w	r3, r3, #24
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff feae 	bl	8000ad4 <LogTransmitBuffer>
			 USB_Transmit(usb_tx_buffer, usb_tx_index);
 8000d78:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d7c:	f103 0314 	add.w	r3, r3, #20
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000d88:	f103 0318 	add.w	r3, r3, #24
 8000d8c:	3b04      	subs	r3, #4
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f012 ff35 	bl	8013c00 <USB_Transmit>
 8000d96:	e008      	b.n	8000daa <HSMManager_ProcessCommand+0x11e>
		 }
		 else
		 {
			 log_error("Parsing failed with status code: %d", status);
 8000d98:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d9c:	f103 0317 	add.w	r3, r3, #23
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	4619      	mov	r1, r3
 8000da4:	4808      	ldr	r0, [pc, #32]	@ (8000dc8 <HSMManager_ProcessCommand+0x13c>)
 8000da6:	f002 ff89 	bl	8003cbc <log_error>
		 }
	 }
	 return 0;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	f507 3790 	add.w	r7, r7, #73728	@ 0x12000
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200130bc 	.word	0x200130bc
 8000dbc:	200130b8 	.word	0x200130b8
 8000dc0:	200030b8 	.word	0x200030b8
 8000dc4:	080173fc 	.word	0x080173fc
 8000dc8:	08017418 	.word	0x08017418

08000dcc <OperationDispatcher_Dispatch>:
#include "../../../Handlers/KeyDelete/Inc/KeyDelete.h"
#include "constants.h"
#include "Logger.h"

OperationStatus_t OperationDispatcher_Dispatch(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
    log_info("Dispatching Command.");
 8000dd6:	4846      	ldr	r0, [pc, #280]	@ (8000ef0 <OperationDispatcher_Dispatch+0x124>)
 8000dd8:	f002 ff3c 	bl	8003c54 <log_info>

    switch (request->cmd)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	791b      	ldrb	r3, [r3, #4]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	2b0e      	cmp	r3, #14
 8000de4:	d879      	bhi.n	8000eda <OperationDispatcher_Dispatch+0x10e>
 8000de6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dec <OperationDispatcher_Dispatch+0x20>)
 8000de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dec:	08000e29 	.word	0x08000e29
 8000df0:	08000e3b 	.word	0x08000e3b
 8000df4:	08000e4d 	.word	0x08000e4d
 8000df8:	08000e5f 	.word	0x08000e5f
 8000dfc:	08000e71 	.word	0x08000e71
 8000e00:	08000e83 	.word	0x08000e83
 8000e04:	08000e95 	.word	0x08000e95
 8000e08:	08000ea7 	.word	0x08000ea7
 8000e0c:	08000eb9 	.word	0x08000eb9
 8000e10:	08000edb 	.word	0x08000edb
 8000e14:	08000edb 	.word	0x08000edb
 8000e18:	08000edb 	.word	0x08000edb
 8000e1c:	08000edb 	.word	0x08000edb
 8000e20:	08000edb 	.word	0x08000edb
 8000e24:	08000ecb 	.word	0x08000ecb
    {
        case CMD_ENCRYPT:
        	log_info("Calling Encryption Operation.");
 8000e28:	4832      	ldr	r0, [pc, #200]	@ (8000ef4 <OperationDispatcher_Dispatch+0x128>)
 8000e2a:	f002 ff13 	bl	8003c54 <log_info>
            return EncryptHandler_Encrypt(request, response);
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 f98b 	bl	800114c <EncryptHandler_Encrypt>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e056      	b.n	8000ee8 <OperationDispatcher_Dispatch+0x11c>

        case CMD_DECRYPT:
        	log_info("Calling Decryption Operation.");
 8000e3a:	482f      	ldr	r0, [pc, #188]	@ (8000ef8 <OperationDispatcher_Dispatch+0x12c>)
 8000e3c:	f002 ff0a 	bl	8003c54 <log_info>
            return DecryptHandler_Decrypt(request, response);
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 f88c 	bl	8000f60 <DecryptHandler_Decrypt>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	e04d      	b.n	8000ee8 <OperationDispatcher_Dispatch+0x11c>

        case CMD_HASH:
        	log_info("Calling Hashing Operation.");
 8000e4c:	482b      	ldr	r0, [pc, #172]	@ (8000efc <OperationDispatcher_Dispatch+0x130>)
 8000e4e:	f002 ff01 	bl	8003c54 <log_info>
            return HashingHandler_Handle(request, response);
 8000e52:	6839      	ldr	r1, [r7, #0]
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 fbc1 	bl	80015dc <HashingHandler_Handle>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e044      	b.n	8000ee8 <OperationDispatcher_Dispatch+0x11c>

        case CMD_HMAC:
        	log_info("Calling HMAC Operation.");
 8000e5e:	4828      	ldr	r0, [pc, #160]	@ (8000f00 <OperationDispatcher_Dispatch+0x134>)
 8000e60:	f002 fef8 	bl	8003c54 <log_info>
            return HMACHandler_Handle(request, response);
 8000e64:	6839      	ldr	r1, [r7, #0]
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 fa8a 	bl	8001380 <HMACHandler_Handle>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	e03b      	b.n	8000ee8 <OperationDispatcher_Dispatch+0x11c>

        case CMD_RANDOM:
        	log_info("Calling RNG Operation.");
 8000e70:	4824      	ldr	r0, [pc, #144]	@ (8000f04 <OperationDispatcher_Dispatch+0x138>)
 8000e72:	f002 feef 	bl	8003c54 <log_info>
            return RandomHandler_Handle(request, response);
 8000e76:	6839      	ldr	r1, [r7, #0]
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 ff01 	bl	8001c80 <RandomHandler_Handle>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e032      	b.n	8000ee8 <OperationDispatcher_Dispatch+0x11c>

        case CMD_OTP:
            log_info("Calling OTP Operation.");
 8000e82:	4821      	ldr	r0, [pc, #132]	@ (8000f08 <OperationDispatcher_Dispatch+0x13c>)
 8000e84:	f002 fee6 	bl	8003c54 <log_info>
            return OTPHandler_Handle(request, response);
 8000e88:	6839      	ldr	r1, [r7, #0]
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 fe42 	bl	8001b14 <OTPHandler_Handle>
 8000e90:	4603      	mov	r3, r0
 8000e92:	e029      	b.n	8000ee8 <OperationDispatcher_Dispatch+0x11c>

        case CMD_KEY_GEN:
        	log_info("Calling Key Generator Operation.");
 8000e94:	481d      	ldr	r0, [pc, #116]	@ (8000f0c <OperationDispatcher_Dispatch+0x140>)
 8000e96:	f002 fedd 	bl	8003c54 <log_info>
            return KeyHandler_Generate(request, response);
 8000e9a:	6839      	ldr	r1, [r7, #0]
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 fcf9 	bl	8001894 <KeyHandler_Generate>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e020      	b.n	8000ee8 <OperationDispatcher_Dispatch+0x11c>

        case CMD_KEY_STORE:
        	log_info("Calling Key Store Operation.");
 8000ea6:	481a      	ldr	r0, [pc, #104]	@ (8000f10 <OperationDispatcher_Dispatch+0x144>)
 8000ea8:	f002 fed4 	bl	8003c54 <log_info>
            return KeyHandler_Store(request, response);
 8000eac:	6839      	ldr	r1, [r7, #0]
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 fd84 	bl	80019bc <KeyHandler_Store>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	e017      	b.n	8000ee8 <OperationDispatcher_Dispatch+0x11c>

        case CMD_KEY_DELETE:
        	log_info("Calling Key Delete Operation.");
 8000eb8:	4816      	ldr	r0, [pc, #88]	@ (8000f14 <OperationDispatcher_Dispatch+0x148>)
 8000eba:	f002 fecb 	bl	8003c54 <log_info>
            return KeyHandler_Delete(request, response);
 8000ebe:	6839      	ldr	r1, [r7, #0]
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f000 fc59 	bl	8001778 <KeyHandler_Delete>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	e00e      	b.n	8000ee8 <OperationDispatcher_Dispatch+0x11c>

        case CMD_PING:
        	log_info("Calling Ping Operation.");
 8000eca:	4813      	ldr	r0, [pc, #76]	@ (8000f18 <OperationDispatcher_Dispatch+0x14c>)
 8000ecc:	f002 fec2 	bl	8003c54 <log_info>
        	log_warn("Ping Operation not supported");
 8000ed0:	4812      	ldr	r0, [pc, #72]	@ (8000f1c <OperationDispatcher_Dispatch+0x150>)
 8000ed2:	f002 fed9 	bl	8003c88 <log_warn>
            return OPERATION_INVALID_CMD;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e006      	b.n	8000ee8 <OperationDispatcher_Dispatch+0x11c>

        default:
            log_error("Invalid Command code received");
 8000eda:	4811      	ldr	r0, [pc, #68]	@ (8000f20 <OperationDispatcher_Dispatch+0x154>)
 8000edc:	f002 feee 	bl	8003cbc <log_error>
            log_error("Returning Failure Status code");
 8000ee0:	4810      	ldr	r0, [pc, #64]	@ (8000f24 <OperationDispatcher_Dispatch+0x158>)
 8000ee2:	f002 feeb 	bl	8003cbc <log_error>
            return OPERATION_INVALID_CMD;
 8000ee6:	2301      	movs	r3, #1
    }
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	0801743c 	.word	0x0801743c
 8000ef4:	08017454 	.word	0x08017454
 8000ef8:	08017474 	.word	0x08017474
 8000efc:	08017494 	.word	0x08017494
 8000f00:	080174b0 	.word	0x080174b0
 8000f04:	080174c8 	.word	0x080174c8
 8000f08:	080174e0 	.word	0x080174e0
 8000f0c:	080174f8 	.word	0x080174f8
 8000f10:	0801751c 	.word	0x0801751c
 8000f14:	0801753c 	.word	0x0801753c
 8000f18:	0801755c 	.word	0x0801755c
 8000f1c:	08017574 	.word	0x08017574
 8000f20:	08017594 	.word	0x08017594
 8000f24:	080175b4 	.word	0x080175b4

08000f28 <ConvertKeyIDToUint32>:
#define KEYID_LEN		4
#define OUT_KEYID_POS	0
#define OUT_PT_POS		4

static uint32_t ConvertKeyIDToUint32(const uint8_t keyID[4])
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
    return ((uint32_t)keyID[0]) |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
           ((uint32_t)keyID[1] << 8) |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	021b      	lsls	r3, r3, #8
    return ((uint32_t)keyID[0]) |
 8000f3e:	431a      	orrs	r2, r3
           ((uint32_t)keyID[2] << 16) |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3302      	adds	r3, #2
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	041b      	lsls	r3, r3, #16
           ((uint32_t)keyID[1] << 8) |
 8000f48:	431a      	orrs	r2, r3
           ((uint32_t)keyID[3] << 24);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3303      	adds	r3, #3
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	061b      	lsls	r3, r3, #24
           ((uint32_t)keyID[2] << 16) |
 8000f52:	4313      	orrs	r3, r2
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <DecryptHandler_Decrypt>:

OperationStatus_t DecryptHandler_Decrypt(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b08b      	sub	sp, #44	@ 0x2c
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
	log_info("Handling Decryption operation.");
 8000f6a:	485c      	ldr	r0, [pc, #368]	@ (80010dc <DecryptHandler_Decrypt+0x17c>)
 8000f6c:	f002 fe72 	bl	8003c54 <log_info>
	// Check if either Request or Response Packet is NULL
	if (!request )
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d104      	bne.n	8000f80 <DecryptHandler_Decrypt+0x20>
	{
		log_error("Request Packet is NULL.");
 8000f76:	485a      	ldr	r0, [pc, #360]	@ (80010e0 <DecryptHandler_Decrypt+0x180>)
 8000f78:	f002 fea0 	bl	8003cbc <log_error>
		return OPERATION_INVALID_INPUT_DATA;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e0a9      	b.n	80010d4 <DecryptHandler_Decrypt+0x174>
	}
	// Initialize variable to store Codec operation status
	int codec_result = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
	// Declare variables to assign Key and IV state
	uint8_t keyState, ivState;
	// Initialize array to store Key ID
	uint8_t keyID[KEYID_LEN] = {0};
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
	uint32_t keyID_32 = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
	// Declare array to hold Key and IV data in data section
	static uint8_t keyData[DEC_KEY_SIZE], ivData[DEC_IV_SIZE];
	// Parse out Key State and IV state from Input Data Stream
	keyState = request->inputData[KEY_STATE_POS];
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7a1b      	ldrb	r3, [r3, #8]
 8000f90:	75fb      	strb	r3, [r7, #23]
	ivState = request->inputData[IV_STATE_POS];
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7e5b      	ldrb	r3, [r3, #25]
 8000f96:	75bb      	strb	r3, [r7, #22]
	// Calculate the size of input Ciphertext
	const uint16_t ciphertextLen = (request->inputSize) - DEC_KEY_SIZE - DEC_IV_SIZE - 2;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	88db      	ldrh	r3, [r3, #6]
 8000f9c:	3b22      	subs	r3, #34	@ 0x22
 8000f9e:	82bb      	strh	r3, [r7, #20]
	// Declare array to hold the output Ciphertext on the stack
	uint8_t *plaintextData = malloc(ciphertextLen);
 8000fa0:	8abb      	ldrh	r3, [r7, #20]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f014 fdc6 	bl	8015b34 <malloc>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	613b      	str	r3, [r7, #16]
	// Check if the dynamically allocated array is NULL or not
	if (plaintextData == NULL)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d104      	bne.n	8000fbc <DecryptHandler_Decrypt+0x5c>
	{
	    log_error("Failed to allocate buffer for Plaintext");
 8000fb2:	484c      	ldr	r0, [pc, #304]	@ (80010e4 <DecryptHandler_Decrypt+0x184>)
 8000fb4:	f002 fe82 	bl	8003cbc <log_error>
	    return OPERATION_HEAP_FAIL;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	e08b      	b.n	80010d4 <DecryptHandler_Decrypt+0x174>
	}
	// Copy the IV from the Data Stream
	switch(ivState)
 8000fbc:	7dbb      	ldrb	r3, [r7, #22]
 8000fbe:	2bc1      	cmp	r3, #193	@ 0xc1
 8000fc0:	d002      	beq.n	8000fc8 <DecryptHandler_Decrypt+0x68>
 8000fc2:	2bc2      	cmp	r3, #194	@ 0xc2
 8000fc4:	d00d      	beq.n	8000fe2 <DecryptHandler_Decrypt+0x82>
 8000fc6:	e019      	b.n	8000ffc <DecryptHandler_Decrypt+0x9c>
	{
		case DEC_IV_BYIV:
			log_info("Using a User-Provided Initialization Vector.");
 8000fc8:	4847      	ldr	r0, [pc, #284]	@ (80010e8 <DecryptHandler_Decrypt+0x188>)
 8000fca:	f002 fe43 	bl	8003c54 <log_info>
			memcpy(ivData, &request->inputData[IV_DATA_POS], DEC_IV_SIZE);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	331a      	adds	r3, #26
 8000fd2:	4a46      	ldr	r2, [pc, #280]	@ (80010ec <DecryptHandler_Decrypt+0x18c>)
 8000fd4:	4614      	mov	r4, r2
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	6859      	ldr	r1, [r3, #4]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			break;
 8000fe0:	e010      	b.n	8001004 <DecryptHandler_Decrypt+0xa4>

		case DEC_IV_DABA:
			log_info("Generating a Random Initialization Vector");
 8000fe2:	4843      	ldr	r0, [pc, #268]	@ (80010f0 <DecryptHandler_Decrypt+0x190>)
 8000fe4:	f002 fe36 	bl	8003c54 <log_info>
			memcpy(ivData, &request->inputData[IV_DATA_POS], DEC_IV_SIZE);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	331a      	adds	r3, #26
 8000fec:	4a3f      	ldr	r2, [pc, #252]	@ (80010ec <DecryptHandler_Decrypt+0x18c>)
 8000fee:	4614      	mov	r4, r2
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	6859      	ldr	r1, [r3, #4]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			break;
 8000ffa:	e003      	b.n	8001004 <DecryptHandler_Decrypt+0xa4>

		default:
			log_warn("IV State field not Recognized.");
 8000ffc:	483d      	ldr	r0, [pc, #244]	@ (80010f4 <DecryptHandler_Decrypt+0x194>)
 8000ffe:	f002 fe43 	bl	8003c88 <log_warn>
			break;
 8001002:	bf00      	nop
	}
	// Copy the Key/Key ID from Data Stream
	switch(keyState)
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2bd1      	cmp	r3, #209	@ 0xd1
 8001008:	d002      	beq.n	8001010 <DecryptHandler_Decrypt+0xb0>
 800100a:	2bd2      	cmp	r3, #210	@ 0xd2
 800100c:	d020      	beq.n	8001050 <DecryptHandler_Decrypt+0xf0>
 800100e:	e031      	b.n	8001074 <DecryptHandler_Decrypt+0x114>
	{
		case DEC_KEY_BYOK:
			log_info("Using a User-Provided Decryption Key.");
 8001010:	4839      	ldr	r0, [pc, #228]	@ (80010f8 <DecryptHandler_Decrypt+0x198>)
 8001012:	f002 fe1f 	bl	8003c54 <log_info>
			memcpy(keyData, &request->inputData[KEY_DATA_POS], DEC_KEY_SIZE);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3309      	adds	r3, #9
 800101a:	4a38      	ldr	r2, [pc, #224]	@ (80010fc <DecryptHandler_Decrypt+0x19c>)
 800101c:	4614      	mov	r4, r2
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	6859      	ldr	r1, [r3, #4]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			GenerateKEYID(keyID);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4618      	mov	r0, r3
 800102e:	f002 f8b9 	bl	80031a4 <GenerateKEYID>
			keyID_32 = ConvertKeyIDToUint32(keyID);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff76 	bl	8000f28 <ConvertKeyIDToUint32>
 800103c:	61b8      	str	r0, [r7, #24]
			KeyManager_AddKey(keyID_32, keyData, DEC_KEY_SIZE, KEY_ORIGIN_PROVIDED, USAGE_DECRYPT);
 800103e:	2302      	movs	r3, #2
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	2210      	movs	r2, #16
 8001046:	492d      	ldr	r1, [pc, #180]	@ (80010fc <DecryptHandler_Decrypt+0x19c>)
 8001048:	69b8      	ldr	r0, [r7, #24]
 800104a:	f002 f95b 	bl	8003304 <KeyManager_AddKey>
			break;
 800104e:	e015      	b.n	800107c <DecryptHandler_Decrypt+0x11c>

		case DEC_KEY_DABA:
			log_info("Searching for a stored Key in the Key Manager.");
 8001050:	482b      	ldr	r0, [pc, #172]	@ (8001100 <DecryptHandler_Decrypt+0x1a0>)
 8001052:	f002 fdff 	bl	8003c54 <log_info>
			memcpy(keyID, &request->inputData[KEY_DATA_POS], KEYID_LEN);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3309      	adds	r3, #9
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]
			keyID_32 = ConvertKeyIDToUint32(keyID);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff60 	bl	8000f28 <ConvertKeyIDToUint32>
 8001068:	61b8      	str	r0, [r7, #24]
			KeyManager_GetKey(keyID_32, keyData);
 800106a:	4924      	ldr	r1, [pc, #144]	@ (80010fc <DecryptHandler_Decrypt+0x19c>)
 800106c:	69b8      	ldr	r0, [r7, #24]
 800106e:	f002 fa77 	bl	8003560 <KeyManager_GetKey>
			break;
 8001072:	e003      	b.n	800107c <DecryptHandler_Decrypt+0x11c>

		default:
			log_warn("Key State field not Recognized.");
 8001074:	4823      	ldr	r0, [pc, #140]	@ (8001104 <DecryptHandler_Decrypt+0x1a4>)
 8001076:	f002 fe07 	bl	8003c88 <log_warn>
			break;
 800107a:	bf00      	nop
	}
	// Execute the Encryption operation
	codec_result = CryptoEngine_Codec(plaintextData,
 800107c:	8ab9      	ldrh	r1, [r7, #20]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8001084:	8abb      	ldrh	r3, [r7, #20]
 8001086:	481d      	ldr	r0, [pc, #116]	@ (80010fc <DecryptHandler_Decrypt+0x19c>)
 8001088:	9001      	str	r0, [sp, #4]
 800108a:	4818      	ldr	r0, [pc, #96]	@ (80010ec <DecryptHandler_Decrypt+0x18c>)
 800108c:	9000      	str	r0, [sp, #0]
 800108e:	6938      	ldr	r0, [r7, #16]
 8001090:	f001 fe08 	bl	8002ca4 <CryptoEngine_Codec>
 8001094:	61f8      	str	r0, [r7, #28]
									  &request->inputData[CIPHERTEXT_POS],
									  ciphertextLen,
									  ivData,
									  keyData);
	// Check if Encryption operation was success
	if(codec_result == CODEC_FAILURE)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d104      	bne.n	80010a6 <DecryptHandler_Decrypt+0x146>
	{
		log_error("Decryption operation failed.");
 800109c:	481a      	ldr	r0, [pc, #104]	@ (8001108 <DecryptHandler_Decrypt+0x1a8>)
 800109e:	f002 fe0d 	bl	8003cbc <log_error>
		return OPERATION_DECRYPTION_FAIL;
 80010a2:	2306      	movs	r3, #6
 80010a4:	e016      	b.n	80010d4 <DecryptHandler_Decrypt+0x174>
	}
	log_info("Input Data has been Decrypted. Building packet now.");
 80010a6:	4819      	ldr	r0, [pc, #100]	@ (800110c <DecryptHandler_Decrypt+0x1ac>)
 80010a8:	f002 fdd4 	bl	8003c54 <log_info>
	// Set the output size in Response Packet
	response->outputSize = ciphertextLen + KEYID_LEN;
 80010ac:	8abb      	ldrh	r3, [r7, #20]
 80010ae:	3304      	adds	r3, #4
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	809a      	strh	r2, [r3, #4]
	// Copy the Key ID into Output Data Buffer
	memcpy(&response->outputData[OUT_KEYID_POS], keyID, KEYID_LEN);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3306      	adds	r3, #6
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	601a      	str	r2, [r3, #0]
	// Copy the Ciphertext into Output Data Buffer
	memcpy(&response->outputData[OUT_PT_POS], plaintextData, ciphertextLen);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	330a      	adds	r3, #10
 80010c2:	8aba      	ldrh	r2, [r7, #20]
 80010c4:	6939      	ldr	r1, [r7, #16]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f015 f831 	bl	801612e <memcpy>
	log_info("Decryption operation completed.");
 80010cc:	4810      	ldr	r0, [pc, #64]	@ (8001110 <DecryptHandler_Decrypt+0x1b0>)
 80010ce:	f002 fdc1 	bl	8003c54 <log_info>
	// Return the OperationStatus value
	return OPERATION_SUCCESS;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3724      	adds	r7, #36	@ 0x24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	080175d4 	.word	0x080175d4
 80010e0:	080175f4 	.word	0x080175f4
 80010e4:	0801760c 	.word	0x0801760c
 80010e8:	08017634 	.word	0x08017634
 80010ec:	2000019c 	.word	0x2000019c
 80010f0:	08017664 	.word	0x08017664
 80010f4:	08017690 	.word	0x08017690
 80010f8:	080176b0 	.word	0x080176b0
 80010fc:	200001ac 	.word	0x200001ac
 8001100:	080176d8 	.word	0x080176d8
 8001104:	08017708 	.word	0x08017708
 8001108:	08017728 	.word	0x08017728
 800110c:	08017748 	.word	0x08017748
 8001110:	0801777c 	.word	0x0801777c

08001114 <ConvertKeyIDToUint32>:
#define OUT_KEYID_POS	0
#define OUT_IV_POS		4
#define OUT_CT_POS		20

static uint32_t ConvertKeyIDToUint32(const uint8_t keyID[4])
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    return ((uint32_t)keyID[0]) |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
           ((uint32_t)keyID[1] << 8) |
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3301      	adds	r3, #1
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	021b      	lsls	r3, r3, #8
    return ((uint32_t)keyID[0]) |
 800112a:	431a      	orrs	r2, r3
           ((uint32_t)keyID[2] << 16) |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3302      	adds	r3, #2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	041b      	lsls	r3, r3, #16
           ((uint32_t)keyID[1] << 8) |
 8001134:	431a      	orrs	r2, r3
           ((uint32_t)keyID[3] << 24);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3303      	adds	r3, #3
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	061b      	lsls	r3, r3, #24
           ((uint32_t)keyID[2] << 16) |
 800113e:	4313      	orrs	r3, r2
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <EncryptHandler_Encrypt>:

OperationStatus_t EncryptHandler_Encrypt(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 800114c:	b5b0      	push	{r4, r5, r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
	log_info("Handling Encryption operation.");
 8001156:	486d      	ldr	r0, [pc, #436]	@ (800130c <EncryptHandler_Encrypt+0x1c0>)
 8001158:	f002 fd7c 	bl	8003c54 <log_info>
	// Check if either Request or Response Packet is NULL
	if (!request )
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d104      	bne.n	800116c <EncryptHandler_Encrypt+0x20>
	{
		log_error("Request Packet is NULL.");
 8001162:	486b      	ldr	r0, [pc, #428]	@ (8001310 <EncryptHandler_Encrypt+0x1c4>)
 8001164:	f002 fdaa 	bl	8003cbc <log_error>
		return OPERATION_INVALID_INPUT_DATA;
 8001168:	2303      	movs	r3, #3
 800116a:	e0cb      	b.n	8001304 <EncryptHandler_Encrypt+0x1b8>
	}
	// Initialize variable to store Codec operation status
	int codec_result = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
	// Declare variables to assign Key and IV state
	uint8_t keyState, ivState;
	// Initialize variable to store Key ID
	uint8_t keyID[KEYID_LEN] = {0};
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
	uint32_t keyID_32 = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
	// Declare array to hold Key and IV data in data section
	static uint8_t keyData[ENC_KEY_SIZE], ivData[ENC_IV_SIZE];
	// Parse out Key State and IV state from Input Data Stream
	keyState = request->inputData[KEY_STATE_POS];
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7a1b      	ldrb	r3, [r3, #8]
 800117c:	75fb      	strb	r3, [r7, #23]
	ivState = request->inputData[IV_STATE_POS];
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7e5b      	ldrb	r3, [r3, #25]
 8001182:	75bb      	strb	r3, [r7, #22]
	// Calculate the size of input Plaintext
	uint16_t plaintextLen = (request->inputSize) - ENC_KEY_SIZE - ENC_IV_SIZE - KEY_STATE_SIZE - IV_STATE_SIZE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	88db      	ldrh	r3, [r3, #6]
 8001188:	3b22      	subs	r3, #34	@ 0x22
 800118a:	82bb      	strh	r3, [r7, #20]
	// Declare array to hold the output Ciphertext on the stack
	uint8_t *ciphertextData = malloc(plaintextLen);
 800118c:	8abb      	ldrh	r3, [r7, #20]
 800118e:	4618      	mov	r0, r3
 8001190:	f014 fcd0 	bl	8015b34 <malloc>
 8001194:	4603      	mov	r3, r0
 8001196:	613b      	str	r3, [r7, #16]
	// Check if the dynamically allocated array is NULL or not
	if (ciphertextData == NULL)
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d104      	bne.n	80011a8 <EncryptHandler_Encrypt+0x5c>
	{
	    log_error("Failed to allocate buffer for Ciphertext");
 800119e:	485d      	ldr	r0, [pc, #372]	@ (8001314 <EncryptHandler_Encrypt+0x1c8>)
 80011a0:	f002 fd8c 	bl	8003cbc <log_error>
	    return OPERATION_HEAP_FAIL;
 80011a4:	2304      	movs	r3, #4
 80011a6:	e0ad      	b.n	8001304 <EncryptHandler_Encrypt+0x1b8>
	}
	// Copy the IV from Data Stream or Generate an IV
	switch(ivState)
 80011a8:	7dbb      	ldrb	r3, [r7, #22]
 80011aa:	2be1      	cmp	r3, #225	@ 0xe1
 80011ac:	d002      	beq.n	80011b4 <EncryptHandler_Encrypt+0x68>
 80011ae:	2be2      	cmp	r3, #226	@ 0xe2
 80011b0:	d00d      	beq.n	80011ce <EncryptHandler_Encrypt+0x82>
 80011b2:	e013      	b.n	80011dc <EncryptHandler_Encrypt+0x90>
	{
		case ENC_IV_BYIV:
			log_info("Using a User-Provided Initialization Vector.");
 80011b4:	4858      	ldr	r0, [pc, #352]	@ (8001318 <EncryptHandler_Encrypt+0x1cc>)
 80011b6:	f002 fd4d 	bl	8003c54 <log_info>
			memcpy(ivData, &request->inputData[IV_DATA_POS], ENC_IV_SIZE);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	331a      	adds	r3, #26
 80011be:	4a57      	ldr	r2, [pc, #348]	@ (800131c <EncryptHandler_Encrypt+0x1d0>)
 80011c0:	4614      	mov	r4, r2
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	6859      	ldr	r1, [r3, #4]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			break;
 80011cc:	e00a      	b.n	80011e4 <EncryptHandler_Encrypt+0x98>

		case ENC_IV_GYIV:
			log_info("Generating a Random Initialization Vector");
 80011ce:	4854      	ldr	r0, [pc, #336]	@ (8001320 <EncryptHandler_Encrypt+0x1d4>)
 80011d0:	f002 fd40 	bl	8003c54 <log_info>
			GenerateIV(ivData);
 80011d4:	4851      	ldr	r0, [pc, #324]	@ (800131c <EncryptHandler_Encrypt+0x1d0>)
 80011d6:	f001 ffd8 	bl	800318a <GenerateIV>
			break;
 80011da:	e003      	b.n	80011e4 <EncryptHandler_Encrypt+0x98>

		default:
			log_warn("IV State field not Recognized.");
 80011dc:	4851      	ldr	r0, [pc, #324]	@ (8001324 <EncryptHandler_Encrypt+0x1d8>)
 80011de:	f002 fd53 	bl	8003c88 <log_warn>
			break;
 80011e2:	bf00      	nop
	}
	// Copy the Key/Key ID from Data Stream or Generate a Key
	switch(keyState)
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	2bf3      	cmp	r3, #243	@ 0xf3
 80011e8:	d026      	beq.n	8001238 <EncryptHandler_Encrypt+0xec>
 80011ea:	2bf3      	cmp	r3, #243	@ 0xf3
 80011ec:	dc50      	bgt.n	8001290 <EncryptHandler_Encrypt+0x144>
 80011ee:	2bf1      	cmp	r3, #241	@ 0xf1
 80011f0:	d002      	beq.n	80011f8 <EncryptHandler_Encrypt+0xac>
 80011f2:	2bf2      	cmp	r3, #242	@ 0xf2
 80011f4:	d032      	beq.n	800125c <EncryptHandler_Encrypt+0x110>
 80011f6:	e04b      	b.n	8001290 <EncryptHandler_Encrypt+0x144>
	{
		case ENC_KEY_BYOK:
			log_info("Using a User-Provided Encryption Key.");
 80011f8:	484b      	ldr	r0, [pc, #300]	@ (8001328 <EncryptHandler_Encrypt+0x1dc>)
 80011fa:	f002 fd2b 	bl	8003c54 <log_info>
			memcpy(keyData, &request->inputData[KEY_DATA_POS], ENC_KEY_SIZE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3309      	adds	r3, #9
 8001202:	4a4a      	ldr	r2, [pc, #296]	@ (800132c <EncryptHandler_Encrypt+0x1e0>)
 8001204:	4614      	mov	r4, r2
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	6859      	ldr	r1, [r3, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			GenerateKEYID(keyID);
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4618      	mov	r0, r3
 8001216:	f001 ffc5 	bl	80031a4 <GenerateKEYID>
			keyID_32 = ConvertKeyIDToUint32(keyID);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff78 	bl	8001114 <ConvertKeyIDToUint32>
 8001224:	61b8      	str	r0, [r7, #24]
			KeyManager_AddKey(keyID_32, keyData, ENC_KEY_SIZE, KEY_ORIGIN_PROVIDED, USAGE_ENCRYPT);
 8001226:	2301      	movs	r3, #1
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2300      	movs	r3, #0
 800122c:	2210      	movs	r2, #16
 800122e:	493f      	ldr	r1, [pc, #252]	@ (800132c <EncryptHandler_Encrypt+0x1e0>)
 8001230:	69b8      	ldr	r0, [r7, #24]
 8001232:	f002 f867 	bl	8003304 <KeyManager_AddKey>
			break;
 8001236:	e02f      	b.n	8001298 <EncryptHandler_Encrypt+0x14c>

		case ENC_KEY_DABA:
			log_info("Searching for a stored Key in the Key Manager.");
 8001238:	483d      	ldr	r0, [pc, #244]	@ (8001330 <EncryptHandler_Encrypt+0x1e4>)
 800123a:	f002 fd0b 	bl	8003c54 <log_info>
			memcpy(keyID, &request->inputData[KEY_DATA_POS], KEYID_LEN);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3309      	adds	r3, #9
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
			keyID_32 = ConvertKeyIDToUint32(keyID);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff62 	bl	8001114 <ConvertKeyIDToUint32>
 8001250:	61b8      	str	r0, [r7, #24]
			KeyManager_GetKey(keyID_32, keyData);
 8001252:	4936      	ldr	r1, [pc, #216]	@ (800132c <EncryptHandler_Encrypt+0x1e0>)
 8001254:	69b8      	ldr	r0, [r7, #24]
 8001256:	f002 f983 	bl	8003560 <KeyManager_GetKey>
			break;
 800125a:	e01d      	b.n	8001298 <EncryptHandler_Encrypt+0x14c>

		case ENC_KEY_GYOK:
			log_info("Generating a Random Encryption Key.");
 800125c:	4835      	ldr	r0, [pc, #212]	@ (8001334 <EncryptHandler_Encrypt+0x1e8>)
 800125e:	f002 fcf9 	bl	8003c54 <log_info>
			GenerateKEYID(keyID);
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4618      	mov	r0, r3
 8001268:	f001 ff9c 	bl	80031a4 <GenerateKEYID>
			GenerateKEY(keyData);
 800126c:	482f      	ldr	r0, [pc, #188]	@ (800132c <EncryptHandler_Encrypt+0x1e0>)
 800126e:	f001 ff7f 	bl	8003170 <GenerateKEY>
			keyID_32 = ConvertKeyIDToUint32(keyID);
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff4c 	bl	8001114 <ConvertKeyIDToUint32>
 800127c:	61b8      	str	r0, [r7, #24]
			KeyManager_AddKey(keyID_32, keyData, ENC_KEY_SIZE, KEY_ORIGIN_GENERATED, USAGE_ENCRYPT);
 800127e:	2301      	movs	r3, #1
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	2210      	movs	r2, #16
 8001286:	4929      	ldr	r1, [pc, #164]	@ (800132c <EncryptHandler_Encrypt+0x1e0>)
 8001288:	69b8      	ldr	r0, [r7, #24]
 800128a:	f002 f83b 	bl	8003304 <KeyManager_AddKey>
			break;
 800128e:	e003      	b.n	8001298 <EncryptHandler_Encrypt+0x14c>

		default:
			log_warn("Key State field not Recognized.");
 8001290:	4829      	ldr	r0, [pc, #164]	@ (8001338 <EncryptHandler_Encrypt+0x1ec>)
 8001292:	f002 fcf9 	bl	8003c88 <log_warn>
			break;
 8001296:	bf00      	nop
	}
	// Execute the Encryption operation
	codec_result = CryptoEngine_Codec(ciphertextData,
 8001298:	8ab9      	ldrh	r1, [r7, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80012a0:	8abb      	ldrh	r3, [r7, #20]
 80012a2:	4822      	ldr	r0, [pc, #136]	@ (800132c <EncryptHandler_Encrypt+0x1e0>)
 80012a4:	9001      	str	r0, [sp, #4]
 80012a6:	481d      	ldr	r0, [pc, #116]	@ (800131c <EncryptHandler_Encrypt+0x1d0>)
 80012a8:	9000      	str	r0, [sp, #0]
 80012aa:	6938      	ldr	r0, [r7, #16]
 80012ac:	f001 fcfa 	bl	8002ca4 <CryptoEngine_Codec>
 80012b0:	61f8      	str	r0, [r7, #28]
									  &request->inputData[PLAINTEXT_POS],
									  plaintextLen,
									  ivData,
									  keyData);
	// Check if Encryption operation was success
	if(codec_result == CODEC_FAILURE)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d104      	bne.n	80012c2 <EncryptHandler_Encrypt+0x176>
	{
		log_error("Encryption operation failed.");
 80012b8:	4820      	ldr	r0, [pc, #128]	@ (800133c <EncryptHandler_Encrypt+0x1f0>)
 80012ba:	f002 fcff 	bl	8003cbc <log_error>
		return OPERATION_ENCRYPTION_FAIL;
 80012be:	2305      	movs	r3, #5
 80012c0:	e020      	b.n	8001304 <EncryptHandler_Encrypt+0x1b8>
	}
	log_info("Input Data has been Encrypted. Building Packet now.");
 80012c2:	481f      	ldr	r0, [pc, #124]	@ (8001340 <EncryptHandler_Encrypt+0x1f4>)
 80012c4:	f002 fcc6 	bl	8003c54 <log_info>
	// Set the output size in Response Packet
	response->outputSize = plaintextLen + KEYID_LEN + ENC_IV_SIZE;
 80012c8:	8abb      	ldrh	r3, [r7, #20]
 80012ca:	3314      	adds	r3, #20
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	809a      	strh	r2, [r3, #4]
	// Copy the Key ID into Output Data Buffer
	memcpy(&response->outputData[OUT_KEYID_POS], keyID, KEYID_LEN);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	3306      	adds	r3, #6
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	601a      	str	r2, [r3, #0]
	// Copy the Initialization Vector into Output Data Buffer
	memcpy(&response->outputData[OUT_IV_POS], ivData, ENC_IV_SIZE);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	330a      	adds	r3, #10
 80012de:	4a0f      	ldr	r2, [pc, #60]	@ (800131c <EncryptHandler_Encrypt+0x1d0>)
 80012e0:	461c      	mov	r4, r3
 80012e2:	4615      	mov	r5, r2
 80012e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012e6:	6020      	str	r0, [r4, #0]
 80012e8:	6061      	str	r1, [r4, #4]
 80012ea:	60a2      	str	r2, [r4, #8]
 80012ec:	60e3      	str	r3, [r4, #12]
	// Copy the Ciphertext into Output Data Buffer
	memcpy(&response->outputData[OUT_CT_POS], ciphertextData, plaintextLen);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	331a      	adds	r3, #26
 80012f2:	8aba      	ldrh	r2, [r7, #20]
 80012f4:	6939      	ldr	r1, [r7, #16]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f014 ff19 	bl	801612e <memcpy>
	log_info("Encryption operation complete.");
 80012fc:	4811      	ldr	r0, [pc, #68]	@ (8001344 <EncryptHandler_Encrypt+0x1f8>)
 80012fe:	f002 fca9 	bl	8003c54 <log_info>
	// Return the OperationStatus value
	return OPERATION_SUCCESS;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bdb0      	pop	{r4, r5, r7, pc}
 800130c:	0801779c 	.word	0x0801779c
 8001310:	080177bc 	.word	0x080177bc
 8001314:	080177d4 	.word	0x080177d4
 8001318:	08017800 	.word	0x08017800
 800131c:	200001bc 	.word	0x200001bc
 8001320:	08017830 	.word	0x08017830
 8001324:	0801785c 	.word	0x0801785c
 8001328:	0801787c 	.word	0x0801787c
 800132c:	200001cc 	.word	0x200001cc
 8001330:	080178a4 	.word	0x080178a4
 8001334:	080178d4 	.word	0x080178d4
 8001338:	080178f8 	.word	0x080178f8
 800133c:	08017918 	.word	0x08017918
 8001340:	08017938 	.word	0x08017938
 8001344:	0801796c 	.word	0x0801796c

08001348 <ConvertKeyIDToUint32>:
#define OUT_DIGEST_POS			4
#define OUT_DIGEST_SIZE_SHA224	28
#define OUT_DIGEST_SIZE_SHA256	32

static uint32_t ConvertKeyIDToUint32(const uint8_t keyID[4])
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    return ((uint32_t)keyID[0]) |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
           ((uint32_t)keyID[1] << 8) |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3301      	adds	r3, #1
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	021b      	lsls	r3, r3, #8
    return ((uint32_t)keyID[0]) |
 800135e:	431a      	orrs	r2, r3
           ((uint32_t)keyID[2] << 16) |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3302      	adds	r3, #2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	041b      	lsls	r3, r3, #16
           ((uint32_t)keyID[1] << 8) |
 8001368:	431a      	orrs	r2, r3
           ((uint32_t)keyID[3] << 24);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3303      	adds	r3, #3
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	061b      	lsls	r3, r3, #24
           ((uint32_t)keyID[2] << 16) |
 8001372:	4313      	orrs	r3, r2
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HMACHandler_Handle>:

OperationStatus_t HMACHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af02      	add	r7, sp, #8
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
	log_info("Handling HMAC operation.");
 800138a:	4880      	ldr	r0, [pc, #512]	@ (800158c <HMACHandler_Handle+0x20c>)
 800138c:	f002 fc62 	bl	8003c54 <log_info>
	// Check if either Request or Response Packet is NULL
    if (!request )
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d104      	bne.n	80013a0 <HMACHandler_Handle+0x20>
    {
    	log_error("Request Packet is NULL.");
 8001396:	487e      	ldr	r0, [pc, #504]	@ (8001590 <HMACHandler_Handle+0x210>)
 8001398:	f002 fc90 	bl	8003cbc <log_error>
        return OPERATION_INVALID_INPUT_DATA;
 800139c:	2303      	movs	r3, #3
 800139e:	e0f0      	b.n	8001582 <HMACHandler_Handle+0x202>
	// Declare variable to assign Key state
	uint8_t keyState;
    // Declare variable to assign HMAC Algorithm
    uint32_t AlgorithmSelected;
	// Initialize variable to store Key ID
	uint8_t keyID[OUT_KEYID_SIZE] = {0};
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
	uint32_t keyID_32 = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
	// Pointer to Location of Input Data to Hash
	const uint8_t *inputDataPtr = &request->inputData[INPUT_DATA_POS];
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3328      	adds	r3, #40	@ 0x28
 80013ac:	617b      	str	r3, [r7, #20]
	// Declare array to hold Key and IV data in data section
	static uint8_t keyData[KEY_DATA_SIZE] = {0};
    // Declare a static byte array of 64 elements
    static uint8_t digest[OUT_DIGEST_SIZE_SHA256] = {0};
	// Parse out Key State and IV state from Input Data Stream
	keyState = request->inputData[KEY_STATE_POS];
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7a1b      	ldrb	r3, [r3, #8]
 80013b2:	74fb      	strb	r3, [r7, #19]
	// Calculate the size of input Plaintext
	uint16_t inputDataSize = (request->inputSize) - KEY_STATE_SIZE - KEY_DATA_SIZE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	88db      	ldrh	r3, [r3, #6]
 80013b8:	3b21      	subs	r3, #33	@ 0x21
 80013ba:	823b      	strh	r3, [r7, #16]
    // Check the Request Packet's option member
    switch (request->option)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	795b      	ldrb	r3, [r3, #5]
 80013c0:	2b31      	cmp	r3, #49	@ 0x31
 80013c2:	d002      	beq.n	80013ca <HMACHandler_Handle+0x4a>
 80013c4:	2b32      	cmp	r3, #50	@ 0x32
 80013c6:	d00a      	beq.n	80013de <HMACHandler_Handle+0x5e>
 80013c8:	e013      	b.n	80013f2 <HMACHandler_Handle+0x72>
    {
    	// SHA224 Hashing Algorithm Selected.
        case OPTION_HMAC_SHA224:
        	log_info("SHA224 HMAC Algorithm Selected.");
 80013ca:	4872      	ldr	r0, [pc, #456]	@ (8001594 <HMACHandler_Handle+0x214>)
 80013cc:	f002 fc42 	bl	8003c54 <log_info>
        	response->outputSize = OUT_DIGEST_SIZE_SHA224 + OUT_KEYID_SIZE;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	2220      	movs	r2, #32
 80013d4:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA224;
 80013d6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80013da:	61fb      	str	r3, [r7, #28]
            break;
 80013dc:	e00e      	b.n	80013fc <HMACHandler_Handle+0x7c>

        // SHA256 Hashing Algorithm Selected.
        case OPTION_HMAC_SHA256:
        	log_info("SHA256 HMAC Algorithm Selected.");
 80013de:	486e      	ldr	r0, [pc, #440]	@ (8001598 <HMACHandler_Handle+0x218>)
 80013e0:	f002 fc38 	bl	8003c54 <log_info>
        	response->outputSize = OUT_DIGEST_SIZE_SHA256 + OUT_KEYID_SIZE;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2224      	movs	r2, #36	@ 0x24
 80013e8:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA256;
 80013ea:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 80013ee:	61fb      	str	r3, [r7, #28]
            break;
 80013f0:	e004      	b.n	80013fc <HMACHandler_Handle+0x7c>

        // Default switch case
        default:
        	log_error("Option Byte not Recognized.");
 80013f2:	486a      	ldr	r0, [pc, #424]	@ (800159c <HMACHandler_Handle+0x21c>)
 80013f4:	f002 fc62 	bl	8003cbc <log_error>
            return OPERATION_INVALID_OPTION;
 80013f8:	2302      	movs	r3, #2
 80013fa:	e0c2      	b.n	8001582 <HMACHandler_Handle+0x202>
    }
	// Copy the Key/Key ID from Data Stream or Generate a Key
	switch(keyState)
 80013fc:	7cfb      	ldrb	r3, [r7, #19]
 80013fe:	2bb3      	cmp	r3, #179	@ 0xb3
 8001400:	d02c      	beq.n	800145c <HMACHandler_Handle+0xdc>
 8001402:	2bb3      	cmp	r3, #179	@ 0xb3
 8001404:	dc52      	bgt.n	80014ac <HMACHandler_Handle+0x12c>
 8001406:	2bb1      	cmp	r3, #177	@ 0xb1
 8001408:	d002      	beq.n	8001410 <HMACHandler_Handle+0x90>
 800140a:	2bb2      	cmp	r3, #178	@ 0xb2
 800140c:	d034      	beq.n	8001478 <HMACHandler_Handle+0xf8>
 800140e:	e04d      	b.n	80014ac <HMACHandler_Handle+0x12c>
	{
		case HMAC_KEY_BYOK:
			log_info("Using the User-Provided HMAC Key.");
 8001410:	4863      	ldr	r0, [pc, #396]	@ (80015a0 <HMACHandler_Handle+0x220>)
 8001412:	f002 fc1f 	bl	8003c54 <log_info>
			memcpy(keyData, &request->inputData[KEY_DATA_POS], KEY_DATA_SIZE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3309      	adds	r3, #9
 800141a:	4a62      	ldr	r2, [pc, #392]	@ (80015a4 <HMACHandler_Handle+0x224>)
 800141c:	4614      	mov	r4, r2
 800141e:	461d      	mov	r5, r3
 8001420:	6828      	ldr	r0, [r5, #0]
 8001422:	6869      	ldr	r1, [r5, #4]
 8001424:	68aa      	ldr	r2, [r5, #8]
 8001426:	68eb      	ldr	r3, [r5, #12]
 8001428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142a:	6928      	ldr	r0, [r5, #16]
 800142c:	6969      	ldr	r1, [r5, #20]
 800142e:	69aa      	ldr	r2, [r5, #24]
 8001430:	69eb      	ldr	r3, [r5, #28]
 8001432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			GenerateKEYID(keyID);
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	4618      	mov	r0, r3
 800143a:	f001 feb3 	bl	80031a4 <GenerateKEYID>
			keyID_32 = ConvertKeyIDToUint32(keyID);
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff80 	bl	8001348 <ConvertKeyIDToUint32>
 8001448:	61b8      	str	r0, [r7, #24]
			KeyManager_AddKey(keyID_32, keyData, HMAC_KEY_SIZE, KEY_ORIGIN_PROVIDED, USAGE_HMAC);
 800144a:	2304      	movs	r3, #4
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2300      	movs	r3, #0
 8001450:	2220      	movs	r2, #32
 8001452:	4954      	ldr	r1, [pc, #336]	@ (80015a4 <HMACHandler_Handle+0x224>)
 8001454:	69b8      	ldr	r0, [r7, #24]
 8001456:	f001 ff55 	bl	8003304 <KeyManager_AddKey>
			break;
 800145a:	e02b      	b.n	80014b4 <HMACHandler_Handle+0x134>

		case HMAC_KEY_DABA:
			log_info("Searching for a stored Key in the Key Manager.");
 800145c:	4852      	ldr	r0, [pc, #328]	@ (80015a8 <HMACHandler_Handle+0x228>)
 800145e:	f002 fbf9 	bl	8003c54 <log_info>
			memcpy(keyData, &request->inputData[KEY_DATA_POS], OUT_KEYID_SIZE);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3309      	adds	r3, #9
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b4e      	ldr	r3, [pc, #312]	@ (80015a4 <HMACHandler_Handle+0x224>)
 800146c:	601a      	str	r2, [r3, #0]
			KeyManager_GetKey(keyID_32, keyData);
 800146e:	494d      	ldr	r1, [pc, #308]	@ (80015a4 <HMACHandler_Handle+0x224>)
 8001470:	69b8      	ldr	r0, [r7, #24]
 8001472:	f002 f875 	bl	8003560 <KeyManager_GetKey>
			break;
 8001476:	e01d      	b.n	80014b4 <HMACHandler_Handle+0x134>

		case HMAC_KEY_GYOK:
			log_info("Generating a Random HMAC Key.");
 8001478:	484c      	ldr	r0, [pc, #304]	@ (80015ac <HMACHandler_Handle+0x22c>)
 800147a:	f002 fbeb 	bl	8003c54 <log_info>
			GenerateKEYID(keyID);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4618      	mov	r0, r3
 8001484:	f001 fe8e 	bl	80031a4 <GenerateKEYID>
			GenerateKEY(keyData);
 8001488:	4846      	ldr	r0, [pc, #280]	@ (80015a4 <HMACHandler_Handle+0x224>)
 800148a:	f001 fe71 	bl	8003170 <GenerateKEY>
			keyID_32 = ConvertKeyIDToUint32(keyID);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff58 	bl	8001348 <ConvertKeyIDToUint32>
 8001498:	61b8      	str	r0, [r7, #24]
			KeyManager_AddKey(keyID_32, keyData, HMAC_KEY_SIZE, KEY_ORIGIN_GENERATED, USAGE_HMAC);
 800149a:	2304      	movs	r3, #4
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	2220      	movs	r2, #32
 80014a2:	4940      	ldr	r1, [pc, #256]	@ (80015a4 <HMACHandler_Handle+0x224>)
 80014a4:	69b8      	ldr	r0, [r7, #24]
 80014a6:	f001 ff2d 	bl	8003304 <KeyManager_AddKey>
			break;
 80014aa:	e003      	b.n	80014b4 <HMACHandler_Handle+0x134>

		default:
			log_warn("Key State field not Recognized.");
 80014ac:	4840      	ldr	r0, [pc, #256]	@ (80015b0 <HMACHandler_Handle+0x230>)
 80014ae:	f002 fbeb 	bl	8003c88 <log_warn>
			break;
 80014b2:	bf00      	nop
	}

    HAL_HASH_DeInit(&hhash);
 80014b4:	483f      	ldr	r0, [pc, #252]	@ (80015b4 <HMACHandler_Handle+0x234>)
 80014b6:	f004 fd79 	bl	8005fac <HAL_HASH_DeInit>

    log_info("De-Initialized HMAC Peripheral.");
 80014ba:	483f      	ldr	r0, [pc, #252]	@ (80015b8 <HMACHandler_Handle+0x238>)
 80014bc:	f002 fbca 	bl	8003c54 <log_info>

    hhash.Instance = HASH;
 80014c0:	4b3c      	ldr	r3, [pc, #240]	@ (80015b4 <HMACHandler_Handle+0x234>)
 80014c2:	4a3e      	ldr	r2, [pc, #248]	@ (80015bc <HMACHandler_Handle+0x23c>)
 80014c4:	601a      	str	r2, [r3, #0]
    hhash.Init.DataType = HASH_BYTE_SWAP;
 80014c6:	4b3b      	ldr	r3, [pc, #236]	@ (80015b4 <HMACHandler_Handle+0x234>)
 80014c8:	2220      	movs	r2, #32
 80014ca:	605a      	str	r2, [r3, #4]
    hhash.Init.KeySize = KEY_DATA_SIZE;
 80014cc:	4b39      	ldr	r3, [pc, #228]	@ (80015b4 <HMACHandler_Handle+0x234>)
 80014ce:	2220      	movs	r2, #32
 80014d0:	609a      	str	r2, [r3, #8]
    hhash.Init.pKey = (uint8_t *)keyData;
 80014d2:	4b38      	ldr	r3, [pc, #224]	@ (80015b4 <HMACHandler_Handle+0x234>)
 80014d4:	4a33      	ldr	r2, [pc, #204]	@ (80015a4 <HMACHandler_Handle+0x224>)
 80014d6:	60da      	str	r2, [r3, #12]
    hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 80014d8:	4b36      	ldr	r3, [pc, #216]	@ (80015b4 <HMACHandler_Handle+0x234>)
 80014da:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 80014de:	611a      	str	r2, [r3, #16]
    if (HAL_HASH_Init(&hhash) != HAL_OK)
 80014e0:	4834      	ldr	r0, [pc, #208]	@ (80015b4 <HMACHandler_Handle+0x234>)
 80014e2:	f004 fd2b 	bl	8005f3c <HAL_HASH_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d004      	beq.n	80014f6 <HMACHandler_Handle+0x176>
    {
    	log_error("Hash Peripheral Initialization failed.");
 80014ec:	4834      	ldr	r0, [pc, #208]	@ (80015c0 <HMACHandler_Handle+0x240>)
 80014ee:	f002 fbe5 	bl	8003cbc <log_error>
        return OPERATION_HMAC_FAIL;
 80014f2:	2308      	movs	r3, #8
 80014f4:	e045      	b.n	8001582 <HMACHandler_Handle+0x202>
    }

    log_info("Re-initialized HASH Peripheral.");
 80014f6:	4833      	ldr	r0, [pc, #204]	@ (80015c4 <HMACHandler_Handle+0x244>)
 80014f8:	f002 fbac 	bl	8003c54 <log_info>

    /* Compute HMAC SHA2 */
    if (HAL_HASH_HMAC_Start(&hhash, inputDataPtr, inputDataSize, digest, 0xFF) != HAL_OK)
 80014fc:	8a3a      	ldrh	r2, [r7, #16]
 80014fe:	23ff      	movs	r3, #255	@ 0xff
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	4b31      	ldr	r3, [pc, #196]	@ (80015c8 <HMACHandler_Handle+0x248>)
 8001504:	6979      	ldr	r1, [r7, #20]
 8001506:	482b      	ldr	r0, [pc, #172]	@ (80015b4 <HMACHandler_Handle+0x234>)
 8001508:	f004 fde0 	bl	80060cc <HAL_HASH_HMAC_Start>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d004      	beq.n	800151c <HMACHandler_Handle+0x19c>
    {
        log_error("HMAC Operation Failed.");
 8001512:	482e      	ldr	r0, [pc, #184]	@ (80015cc <HMACHandler_Handle+0x24c>)
 8001514:	f002 fbd2 	bl	8003cbc <log_error>
        return OPERATION_HMAC_FAIL;
 8001518:	2308      	movs	r3, #8
 800151a:	e032      	b.n	8001582 <HMACHandler_Handle+0x202>
    }
    log_info("Generated HMAC Digest successfully.");
 800151c:	482c      	ldr	r0, [pc, #176]	@ (80015d0 <HMACHandler_Handle+0x250>)
 800151e:	f002 fb99 	bl	8003c54 <log_info>
    log_info("Copying HMAC Digest into Response Packet.");
 8001522:	482c      	ldr	r0, [pc, #176]	@ (80015d4 <HMACHandler_Handle+0x254>)
 8001524:	f002 fb96 	bl	8003c54 <log_info>
    // Copy Key ID into Response Packet structure
    memcpy(&response->outputData[OUT_KEYID_POS], keyID, OUT_KEYID_SIZE);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	3306      	adds	r3, #6
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	601a      	str	r2, [r3, #0]
    // Copy HMAC Digest into Response Packet structure
    switch(AlgorithmSelected)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b31      	cmp	r3, #49	@ 0x31
 8001534:	d003      	beq.n	800153e <HMACHandler_Handle+0x1be>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	2b32      	cmp	r3, #50	@ 0x32
 800153a:	d00e      	beq.n	800155a <HMACHandler_Handle+0x1da>
 800153c:	e01d      	b.n	800157a <HMACHandler_Handle+0x1fa>
    {
		case OPTION_HMAC_SHA224:
			// Dummy word to zero the last 4-bytes of SHA224 digest
			uint8_t buffer[OUT_DIGEST_SIZE_SHA256 - OUT_DIGEST_SIZE_SHA224] = {0};
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
			// Copying the 28-byte Digest into Response Structure
			memcpy(&response->outputData[OUT_DIGEST_POS], digest, OUT_DIGEST_SIZE_SHA224);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	330a      	adds	r3, #10
 8001546:	221c      	movs	r2, #28
 8001548:	491f      	ldr	r1, [pc, #124]	@ (80015c8 <HMACHandler_Handle+0x248>)
 800154a:	4618      	mov	r0, r3
 800154c:	f014 fdef 	bl	801612e <memcpy>
			// Copying zero word to fill last 4-bytes of Digest space in Response Structure
			memcpy(&response->outputData[OUT_DIGEST_POS + OUT_DIGEST_SIZE_SHA224], buffer, OUT_DIGEST_SIZE_SHA256 - OUT_DIGEST_SIZE_SHA224);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	3326      	adds	r3, #38	@ 0x26
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	601a      	str	r2, [r3, #0]
			break;
 8001558:	e00f      	b.n	800157a <HMACHandler_Handle+0x1fa>

		case OPTION_HMAC_SHA256:
			// Copying the 32-byte SHA256 Digest into Response Structure
			memcpy(&response->outputData[OUT_DIGEST_POS], digest, OUT_DIGEST_SIZE_SHA256);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	330a      	adds	r3, #10
 800155e:	4a1a      	ldr	r2, [pc, #104]	@ (80015c8 <HMACHandler_Handle+0x248>)
 8001560:	461c      	mov	r4, r3
 8001562:	4615      	mov	r5, r2
 8001564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001566:	6020      	str	r0, [r4, #0]
 8001568:	6061      	str	r1, [r4, #4]
 800156a:	60a2      	str	r2, [r4, #8]
 800156c:	60e3      	str	r3, [r4, #12]
 800156e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001570:	6120      	str	r0, [r4, #16]
 8001572:	6161      	str	r1, [r4, #20]
 8001574:	61a2      	str	r2, [r4, #24]
 8001576:	61e3      	str	r3, [r4, #28]
			break;
 8001578:	bf00      	nop
    }
    log_info("HMAC operation complete.");
 800157a:	4817      	ldr	r0, [pc, #92]	@ (80015d8 <HMACHandler_Handle+0x258>)
 800157c:	f002 fb6a 	bl	8003c54 <log_info>
    // Return Success
    return OPERATION_SUCCESS;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bdb0      	pop	{r4, r5, r7, pc}
 800158a:	bf00      	nop
 800158c:	0801798c 	.word	0x0801798c
 8001590:	080179a8 	.word	0x080179a8
 8001594:	080179c0 	.word	0x080179c0
 8001598:	080179e0 	.word	0x080179e0
 800159c:	08017a00 	.word	0x08017a00
 80015a0:	08017a1c 	.word	0x08017a1c
 80015a4:	200001dc 	.word	0x200001dc
 80015a8:	08017a40 	.word	0x08017a40
 80015ac:	08017a70 	.word	0x08017a70
 80015b0:	08017a90 	.word	0x08017a90
 80015b4:	200023bc 	.word	0x200023bc
 80015b8:	08017ab0 	.word	0x08017ab0
 80015bc:	420c0400 	.word	0x420c0400
 80015c0:	08017ad0 	.word	0x08017ad0
 80015c4:	08017af8 	.word	0x08017af8
 80015c8:	200001fc 	.word	0x200001fc
 80015cc:	08017b18 	.word	0x08017b18
 80015d0:	08017b30 	.word	0x08017b30
 80015d4:	08017b54 	.word	0x08017b54
 80015d8:	08017b80 	.word	0x08017b80

080015dc <HashingHandler_Handle>:

extern HASH_HandleTypeDef hhash;
extern void Error_Handler(void);

OperationStatus_t HashingHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
	log_info("Handling Hashing operation.");
 80015e6:	4849      	ldr	r0, [pc, #292]	@ (800170c <HashingHandler_Handle+0x130>)
 80015e8:	f002 fb34 	bl	8003c54 <log_info>
	// Check if either Request or Response Packet is NULL
    if (!request )
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HashingHandler_Handle+0x1a>
    {
        return OPERATION_INVALID_INPUT_DATA;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e085      	b.n	8001702 <HashingHandler_Handle+0x126>
    }
    uint32_t AlgorithmSelected;
    // Declare status as Negative for Early Exit Pattern
    OperationStatus_t status = OPERATION_HASH_FAIL;
 80015f6:	2307      	movs	r3, #7
 80015f8:	72fb      	strb	r3, [r7, #11]
    // Declare a static byte array of 64 elements
    static uint8_t digest[64] = {0};
    // Check the Request Packet's option member
    switch (request->option)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	795b      	ldrb	r3, [r3, #5]
 80015fe:	3b21      	subs	r3, #33	@ 0x21
 8001600:	2b03      	cmp	r3, #3
 8001602:	d833      	bhi.n	800166c <HashingHandler_Handle+0x90>
 8001604:	a201      	add	r2, pc, #4	@ (adr r2, 800160c <HashingHandler_Handle+0x30>)
 8001606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160a:	bf00      	nop
 800160c:	0800161d 	.word	0x0800161d
 8001610:	08001631 	.word	0x08001631
 8001614:	08001645 	.word	0x08001645
 8001618:	08001659 	.word	0x08001659
    {
    	// SHA224 Hashing Algorithm Selected.
        case OPTION_HASH_SHA224:
        	log_info("SHA224 Hashing Algorithm Selected.");
 800161c:	483c      	ldr	r0, [pc, #240]	@ (8001710 <HashingHandler_Handle+0x134>)
 800161e:	f002 fb19 	bl	8003c54 <log_info>
        	response->outputSize = 28;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	221c      	movs	r2, #28
 8001626:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA224;
 8001628:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800162c:	60fb      	str	r3, [r7, #12]
            break;
 800162e:	e01f      	b.n	8001670 <HashingHandler_Handle+0x94>

        // SHA256 Hashing Algorithm Selected.
        case OPTION_HASH_SHA256:
        	log_info("SHA256 Hashing Algorithm Selected.");
 8001630:	4838      	ldr	r0, [pc, #224]	@ (8001714 <HashingHandler_Handle+0x138>)
 8001632:	f002 fb0f 	bl	8003c54 <log_info>
        	response->outputSize = 32;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2220      	movs	r2, #32
 800163a:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA256;
 800163c:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 8001640:	60fb      	str	r3, [r7, #12]
            break;
 8001642:	e015      	b.n	8001670 <HashingHandler_Handle+0x94>

        // SHA384 Hashing Algorithm Selected.
        case OPTION_HASH_SHA384:
        	log_info("SHA384 Hashing Algorithm Selected.");
 8001644:	4834      	ldr	r0, [pc, #208]	@ (8001718 <HashingHandler_Handle+0x13c>)
 8001646:	f002 fb05 	bl	8003c54 <log_info>
        	response->outputSize = 48;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2230      	movs	r2, #48	@ 0x30
 800164e:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA384;
 8001650:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8001654:	60fb      	str	r3, [r7, #12]
            break;
 8001656:	e00b      	b.n	8001670 <HashingHandler_Handle+0x94>

        // SHA512 Hashing Algorithm Selected.
        case OPTION_HASH_SHA512:
        	log_info("SHA512 Hashing Algorithm Selected.");
 8001658:	4830      	ldr	r0, [pc, #192]	@ (800171c <HashingHandler_Handle+0x140>)
 800165a:	f002 fafb 	bl	8003c54 <log_info>
        	response->outputSize = 64;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2240      	movs	r2, #64	@ 0x40
 8001662:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA512;
 8001664:	f44f 13f0 	mov.w	r3, #1966080	@ 0x1e0000
 8001668:	60fb      	str	r3, [r7, #12]
            break;
 800166a:	e001      	b.n	8001670 <HashingHandler_Handle+0x94>

        // Default switch case
        default:
            return OPERATION_INVALID_OPTION;
 800166c:	2302      	movs	r3, #2
 800166e:	e048      	b.n	8001702 <HashingHandler_Handle+0x126>
    }

    status = OPERATION_SUCCESS;
 8001670:	2300      	movs	r3, #0
 8001672:	72fb      	strb	r3, [r7, #11]
    HAL_HASH_DeInit(&hhash);
 8001674:	482a      	ldr	r0, [pc, #168]	@ (8001720 <HashingHandler_Handle+0x144>)
 8001676:	f004 fc99 	bl	8005fac <HAL_HASH_DeInit>

    log_info("De-Initialized HASH Peripheral.");
 800167a:	482a      	ldr	r0, [pc, #168]	@ (8001724 <HashingHandler_Handle+0x148>)
 800167c:	f002 faea 	bl	8003c54 <log_info>

    hhash.Instance = HASH;
 8001680:	4b27      	ldr	r3, [pc, #156]	@ (8001720 <HashingHandler_Handle+0x144>)
 8001682:	4a29      	ldr	r2, [pc, #164]	@ (8001728 <HashingHandler_Handle+0x14c>)
 8001684:	601a      	str	r2, [r3, #0]
    hhash.Init.DataType = HASH_BYTE_SWAP;
 8001686:	4b26      	ldr	r3, [pc, #152]	@ (8001720 <HashingHandler_Handle+0x144>)
 8001688:	2220      	movs	r2, #32
 800168a:	605a      	str	r2, [r3, #4]
    hhash.Init.Algorithm = AlgorithmSelected;
 800168c:	4a24      	ldr	r2, [pc, #144]	@ (8001720 <HashingHandler_Handle+0x144>)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6113      	str	r3, [r2, #16]
    if (HAL_HASH_Init(&hhash) != HAL_OK)
 8001692:	4823      	ldr	r0, [pc, #140]	@ (8001720 <HashingHandler_Handle+0x144>)
 8001694:	f004 fc52 	bl	8005f3c <HAL_HASH_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HashingHandler_Handle+0xc6>
    {
    	status = OPERATION_HASH_FAIL;
 800169e:	2307      	movs	r3, #7
 80016a0:	72fb      	strb	r3, [r7, #11]
    }

    log_info("Re-initialized HASH Peripheral.");
 80016a2:	4822      	ldr	r0, [pc, #136]	@ (800172c <HashingHandler_Handle+0x150>)
 80016a4:	f002 fad6 	bl	8003c54 <log_info>

    if (HAL_HASH_Start_IT(&hhash, (uint8_t*)request->inputData, (uint32_t)request->inputSize, digest) != HAL_OK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f103 0108 	add.w	r1, r3, #8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	88db      	ldrh	r3, [r3, #6]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <HashingHandler_Handle+0x154>)
 80016b6:	481a      	ldr	r0, [pc, #104]	@ (8001720 <HashingHandler_Handle+0x144>)
 80016b8:	f004 fc9b 	bl	8005ff2 <HAL_HASH_Start_IT>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HashingHandler_Handle+0xea>
    {
      Error_Handler();
 80016c2:	f002 ff5b 	bl	800457c <Error_Handler>
    }
    while (HAL_HASH_GetState(&hhash) != HAL_HASH_STATE_READY);
 80016c6:	bf00      	nop
 80016c8:	4815      	ldr	r0, [pc, #84]	@ (8001720 <HashingHandler_Handle+0x144>)
 80016ca:	f004 fee8 	bl	800649e <HAL_HASH_GetState>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d1f9      	bne.n	80016c8 <HashingHandler_Handle+0xec>

    log_info("Generated Hash Digest successfully.");
 80016d4:	4817      	ldr	r0, [pc, #92]	@ (8001734 <HashingHandler_Handle+0x158>)
 80016d6:	f002 fabd 	bl	8003c54 <log_info>
    // Check if operation status is Success
    if (status != OPERATION_SUCCESS)
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HashingHandler_Handle+0x108>
    {
        return status;
 80016e0:	7afb      	ldrb	r3, [r7, #11]
 80016e2:	e00e      	b.n	8001702 <HashingHandler_Handle+0x126>
    }
    log_info("Copying Hash Digest into Response Packet.");
 80016e4:	4814      	ldr	r0, [pc, #80]	@ (8001738 <HashingHandler_Handle+0x15c>)
 80016e6:	f002 fab5 	bl	8003c54 <log_info>
    // Copy digest value to Response Packet structure
    memcpy(response->outputData, digest, response->outputSize);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	1d98      	adds	r0, r3, #6
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	889b      	ldrh	r3, [r3, #4]
 80016f2:	461a      	mov	r2, r3
 80016f4:	490e      	ldr	r1, [pc, #56]	@ (8001730 <HashingHandler_Handle+0x154>)
 80016f6:	f014 fd1a 	bl	801612e <memcpy>
    log_info("Hash operation complete.");
 80016fa:	4810      	ldr	r0, [pc, #64]	@ (800173c <HashingHandler_Handle+0x160>)
 80016fc:	f002 faaa 	bl	8003c54 <log_info>
    // Return Success
    return OPERATION_SUCCESS;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	08017b9c 	.word	0x08017b9c
 8001710:	08017bb8 	.word	0x08017bb8
 8001714:	08017bdc 	.word	0x08017bdc
 8001718:	08017c00 	.word	0x08017c00
 800171c:	08017c24 	.word	0x08017c24
 8001720:	200023bc 	.word	0x200023bc
 8001724:	08017c48 	.word	0x08017c48
 8001728:	420c0400 	.word	0x420c0400
 800172c:	08017c68 	.word	0x08017c68
 8001730:	2000021c 	.word	0x2000021c
 8001734:	08017c88 	.word	0x08017c88
 8001738:	08017cac 	.word	0x08017cac
 800173c:	08017cd8 	.word	0x08017cd8

08001740 <ConvertKeyIDToUint32>:
#include <string.h>

#include "stm32h5xx_hal.h"

static uint32_t ConvertKeyIDToUint32(const uint8_t keyID[4])
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
    return ((uint32_t)keyID[0]) |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461a      	mov	r2, r3
           ((uint32_t)keyID[1] << 8) |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3301      	adds	r3, #1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	021b      	lsls	r3, r3, #8
    return ((uint32_t)keyID[0]) |
 8001756:	431a      	orrs	r2, r3
           ((uint32_t)keyID[2] << 16) |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3302      	adds	r3, #2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	041b      	lsls	r3, r3, #16
           ((uint32_t)keyID[1] << 8) |
 8001760:	431a      	orrs	r2, r3
           ((uint32_t)keyID[3] << 24);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3303      	adds	r3, #3
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	061b      	lsls	r3, r3, #24
           ((uint32_t)keyID[2] << 16) |
 800176a:	4313      	orrs	r3, r2
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <KeyHandler_Delete>:


OperationStatus_t KeyHandler_Delete(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    log_info("Handling Key Delete operation.");
 8001782:	481b      	ldr	r0, [pc, #108]	@ (80017f0 <KeyHandler_Delete+0x78>)
 8001784:	f002 fa66 	bl	8003c54 <log_info>

    // Check if either Request or Response Packet is NULL
    if (!request)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d104      	bne.n	8001798 <KeyHandler_Delete+0x20>
    {
    	log_error("Request Packet is NULL.");
 800178e:	4819      	ldr	r0, [pc, #100]	@ (80017f4 <KeyHandler_Delete+0x7c>)
 8001790:	f002 fa94 	bl	8003cbc <log_error>
        return OPERATION_INVALID_INPUT_DATA;
 8001794:	2303      	movs	r3, #3
 8001796:	e026      	b.n	80017e6 <KeyHandler_Delete+0x6e>
    }

    // Declare variables to hold Key ID.
    uint8_t keyID[4] = {0};
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
    uint32_t keyID_32 = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]

    // Retrieve Key ID from Request Packet
    memcpy(keyID, &request->inputData[0], 4);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3308      	adds	r3, #8
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60bb      	str	r3, [r7, #8]

    // Convert 4-byte Key ID array into 32-bit unsigned integer
    keyID_32 = ConvertKeyIDToUint32(keyID);
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ffc7 	bl	8001740 <ConvertKeyIDToUint32>
 80017b2:	60f8      	str	r0, [r7, #12]
    // Call Key Manager to Add Key to Storage medium
    if(KeyManager_DeleteKey(keyID_32) != 0)
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f001 fff7 	bl	80037a8 <KeyManager_DeleteKey>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <KeyHandler_Delete+0x52>
    {
    	log_error("Failed to Delete Key from Storage Medium.");
 80017c0:	480d      	ldr	r0, [pc, #52]	@ (80017f8 <KeyHandler_Delete+0x80>)
 80017c2:	f002 fa7b 	bl	8003cbc <log_error>
    	return OPERATION_KEY_DELETE_FAIL;
 80017c6:	230d      	movs	r3, #13
 80017c8:	e00d      	b.n	80017e6 <KeyHandler_Delete+0x6e>
    }

    // Set the Output Size to 2 for zeroing output data
    response->outputSize = 2;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2202      	movs	r2, #2
 80017ce:	809a      	strh	r2, [r3, #4]
    memset(&response->outputData, 0, 2);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	3306      	adds	r3, #6
 80017d4:	2202      	movs	r2, #2
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f014 fc1d 	bl	8016018 <memset>
    log_info("Key Delete Operation complete.");
 80017de:	4807      	ldr	r0, [pc, #28]	@ (80017fc <KeyHandler_Delete+0x84>)
 80017e0:	f002 fa38 	bl	8003c54 <log_info>
    return OPERATION_SUCCESS;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	08017cf4 	.word	0x08017cf4
 80017f4:	08017d14 	.word	0x08017d14
 80017f8:	08017d2c 	.word	0x08017d2c
 80017fc:	08017d58 	.word	0x08017d58

08001800 <CalculateKeySize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

static uint16_t CalculateKeySize(uint8_t option_member)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	3b43      	subs	r3, #67	@ 0x43
 800180e:	2b09      	cmp	r3, #9
 8001810:	d837      	bhi.n	8001882 <CalculateKeySize+0x82>
 8001812:	a201      	add	r2, pc, #4	@ (adr r2, 8001818 <CalculateKeySize+0x18>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001841 	.word	0x08001841
 800181c:	08001847 	.word	0x08001847
 8001820:	0800184d 	.word	0x0800184d
 8001824:	08001853 	.word	0x08001853
 8001828:	08001859 	.word	0x08001859
 800182c:	0800185f 	.word	0x0800185f
 8001830:	08001865 	.word	0x08001865
 8001834:	0800186b 	.word	0x0800186b
 8001838:	08001873 	.word	0x08001873
 800183c:	0800187b 	.word	0x0800187b
	{
		case OPTION_RNG_0016: byteSize = 16; 	break;
 8001840:	2310      	movs	r3, #16
 8001842:	81fb      	strh	r3, [r7, #14]
 8001844:	e01e      	b.n	8001884 <CalculateKeySize+0x84>
		case OPTION_RNG_0024: byteSize = 24; 	break;
 8001846:	2318      	movs	r3, #24
 8001848:	81fb      	strh	r3, [r7, #14]
 800184a:	e01b      	b.n	8001884 <CalculateKeySize+0x84>
		case OPTION_RNG_0032: byteSize = 32; 	break;
 800184c:	2320      	movs	r3, #32
 800184e:	81fb      	strh	r3, [r7, #14]
 8001850:	e018      	b.n	8001884 <CalculateKeySize+0x84>
		case OPTION_RNG_0048: byteSize = 48; 	break;
 8001852:	2330      	movs	r3, #48	@ 0x30
 8001854:	81fb      	strh	r3, [r7, #14]
 8001856:	e015      	b.n	8001884 <CalculateKeySize+0x84>
		case OPTION_RNG_0064: byteSize = 64; 	break;
 8001858:	2340      	movs	r3, #64	@ 0x40
 800185a:	81fb      	strh	r3, [r7, #14]
 800185c:	e012      	b.n	8001884 <CalculateKeySize+0x84>
		case OPTION_RNG_0066: byteSize = 66; 	break;
 800185e:	2342      	movs	r3, #66	@ 0x42
 8001860:	81fb      	strh	r3, [r7, #14]
 8001862:	e00f      	b.n	8001884 <CalculateKeySize+0x84>
		case OPTION_RNG_0128: byteSize = 128; 	break;
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	81fb      	strh	r3, [r7, #14]
 8001868:	e00c      	b.n	8001884 <CalculateKeySize+0x84>
		case OPTION_RNG_0256: byteSize = 256; 	break;
 800186a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800186e:	81fb      	strh	r3, [r7, #14]
 8001870:	e008      	b.n	8001884 <CalculateKeySize+0x84>
		case OPTION_RNG_0384: byteSize = 384; 	break;
 8001872:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001876:	81fb      	strh	r3, [r7, #14]
 8001878:	e004      	b.n	8001884 <CalculateKeySize+0x84>
		case OPTION_RNG_0512: byteSize = 512; 	break;
 800187a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800187e:	81fb      	strh	r3, [r7, #14]
 8001880:	e000      	b.n	8001884 <CalculateKeySize+0x84>
		default: break;
 8001882:	bf00      	nop
	}
	return byteSize;
 8001884:	89fb      	ldrh	r3, [r7, #14]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop

08001894 <KeyHandler_Generate>:

OperationStatus_t KeyHandler_Generate(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
    log_info("Handling Key Generation operation.");
 800189e:	4832      	ldr	r0, [pc, #200]	@ (8001968 <KeyHandler_Generate+0xd4>)
 80018a0:	f002 f9d8 	bl	8003c54 <log_info>
    // Variable to hold word alignment overflow count
    uint16_t remainder = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	82fb      	strh	r3, [r7, #22]
    // Retrieve requested OPTION byte from Request Packet
    uint8_t option_val = (request->option);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	795b      	ldrb	r3, [r3, #5]
 80018ac:	74bb      	strb	r3, [r7, #18]
    // Set the requested Pad size
    uint16_t numBytes = CalculateKeySize(option_val);
 80018ae:	7cbb      	ldrb	r3, [r7, #18]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ffa5 	bl	8001800 <CalculateKeySize>
 80018b6:	4603      	mov	r3, r0
 80018b8:	82bb      	strh	r3, [r7, #20]
    // Checking if requested byte count is word aligned
    if(numBytes % 4)
 80018ba:	8abb      	ldrh	r3, [r7, #20]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00a      	beq.n	80018dc <KeyHandler_Generate+0x48>
    {
    	log_info("Padding RNG Output to be word aligned.");
 80018c6:	4829      	ldr	r0, [pc, #164]	@ (800196c <KeyHandler_Generate+0xd8>)
 80018c8:	f002 f9c4 	bl	8003c54 <log_info>
    	remainder = numBytes % 4;
 80018cc:	8abb      	ldrh	r3, [r7, #20]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	82fb      	strh	r3, [r7, #22]
    	numBytes += remainder;
 80018d4:	8aba      	ldrh	r2, [r7, #20]
 80018d6:	8afb      	ldrh	r3, [r7, #22]
 80018d8:	4413      	add	r3, r2
 80018da:	82bb      	strh	r3, [r7, #20]
    }
    log_info("Generating %d bytes of One-Time Pad", numBytes - remainder);
 80018dc:	8aba      	ldrh	r2, [r7, #20]
 80018de:	8afb      	ldrh	r3, [r7, #22]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	4619      	mov	r1, r3
 80018e4:	4822      	ldr	r0, [pc, #136]	@ (8001970 <KeyHandler_Generate+0xdc>)
 80018e6:	f002 f9b5 	bl	8003c54 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 80018ea:	8abb      	ldrh	r3, [r7, #20]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <KeyHandler_Generate+0x64>
 80018f0:	8abb      	ldrh	r3, [r7, #20]
 80018f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018f6:	d904      	bls.n	8001902 <KeyHandler_Generate+0x6e>
    {
        log_error("Requested Pad count is invalid.");
 80018f8:	481e      	ldr	r0, [pc, #120]	@ (8001974 <KeyHandler_Generate+0xe0>)
 80018fa:	f002 f9df 	bl	8003cbc <log_error>
        return OPERATION_INVALID_OPTION;
 80018fe:	2302      	movs	r3, #2
 8001900:	e02d      	b.n	800195e <KeyHandler_Generate+0xca>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001902:	2300      	movs	r3, #0
 8001904:	74fb      	strb	r3, [r7, #19]
 8001906:	e019      	b.n	800193c <KeyHandler_Generate+0xa8>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	4619      	mov	r1, r3
 800190e:	481a      	ldr	r0, [pc, #104]	@ (8001978 <KeyHandler_Generate+0xe4>)
 8001910:	f00d fbce 	bl	800f0b0 <HAL_RNG_GenerateRandomNumber>
 8001914:	4603      	mov	r3, r0
 8001916:	747b      	strb	r3, [r7, #17]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 8001918:	7c7b      	ldrb	r3, [r7, #17]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d004      	beq.n	8001928 <KeyHandler_Generate+0x94>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 800191e:	4817      	ldr	r0, [pc, #92]	@ (800197c <KeyHandler_Generate+0xe8>)
 8001920:	f002 f9cc 	bl	8003cbc <log_error>
		    return OPERATION_KEY_GEN_FAIL;
 8001924:	230b      	movs	r3, #11
 8001926:	e01a      	b.n	800195e <KeyHandler_Generate+0xca>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	7cfb      	ldrb	r3, [r7, #19]
 800192c:	b2d1      	uxtb	r1, r2
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	4413      	add	r3, r2
 8001932:	460a      	mov	r2, r1
 8001934:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001936:	7cfb      	ldrb	r3, [r7, #19]
 8001938:	3301      	adds	r3, #1
 800193a:	74fb      	strb	r3, [r7, #19]
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	b29a      	uxth	r2, r3
 8001940:	8abb      	ldrh	r3, [r7, #20]
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	b29b      	uxth	r3, r3
 8001946:	429a      	cmp	r2, r3
 8001948:	d3de      	bcc.n	8001908 <KeyHandler_Generate+0x74>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes - remainder;
 800194a:	8aba      	ldrh	r2, [r7, #20]
 800194c:	8afb      	ldrh	r3, [r7, #22]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	b29a      	uxth	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	809a      	strh	r2, [r3, #4]
    log_info("One-Time Pad Generation Operation complete.");
 8001956:	480a      	ldr	r0, [pc, #40]	@ (8001980 <KeyHandler_Generate+0xec>)
 8001958:	f002 f97c 	bl	8003c54 <log_info>
    return OPERATION_SUCCESS;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	08017d78 	.word	0x08017d78
 800196c:	08017d9c 	.word	0x08017d9c
 8001970:	08017dc4 	.word	0x08017dc4
 8001974:	08017de8 	.word	0x08017de8
 8001978:	20002450 	.word	0x20002450
 800197c:	08017e08 	.word	0x08017e08
 8001980:	08017e40 	.word	0x08017e40

08001984 <ConvertKeyIDToUint32>:
#include <string.h>

#include "stm32h5xx_hal.h"

static uint32_t ConvertKeyIDToUint32(const uint8_t keyID[4])
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    return ((uint32_t)keyID[0]) |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
           ((uint32_t)keyID[1] << 8) |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3301      	adds	r3, #1
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	021b      	lsls	r3, r3, #8
    return ((uint32_t)keyID[0]) |
 800199a:	431a      	orrs	r2, r3
           ((uint32_t)keyID[2] << 16) |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3302      	adds	r3, #2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	041b      	lsls	r3, r3, #16
           ((uint32_t)keyID[1] << 8) |
 80019a4:	431a      	orrs	r2, r3
           ((uint32_t)keyID[3] << 24);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3303      	adds	r3, #3
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	061b      	lsls	r3, r3, #24
           ((uint32_t)keyID[2] << 16) |
 80019ae:	4313      	orrs	r3, r2
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <KeyHandler_Store>:

OperationStatus_t KeyHandler_Store(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b090      	sub	sp, #64	@ 0x40
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
    log_info("Handling Key Store operation.");
 80019c6:	482e      	ldr	r0, [pc, #184]	@ (8001a80 <KeyHandler_Store+0xc4>)
 80019c8:	f002 f944 	bl	8003c54 <log_info>

    // Check if either Request or Response Packet is NULL
    if (!request )
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d104      	bne.n	80019dc <KeyHandler_Store+0x20>
    {
    	log_error("Request Packet is NULL.");
 80019d2:	482c      	ldr	r0, [pc, #176]	@ (8001a84 <KeyHandler_Store+0xc8>)
 80019d4:	f002 f972 	bl	8003cbc <log_error>
        return OPERATION_INVALID_INPUT_DATA;
 80019d8:	2303      	movs	r3, #3
 80019da:	e04c      	b.n	8001a76 <KeyHandler_Store+0xba>
    }

    // Declare variables to hold Key ID, Key Value, and Key Usage information.
    uint8_t keyID[4] = {0};
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t keyID_32 = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t keyVal[32] = {0};
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
 80019f8:	615a      	str	r2, [r3, #20]
 80019fa:	619a      	str	r2, [r3, #24]

    // Retrieve Key Size, Key Usage and Key Value from Request Packet
    uint8_t keySize = request->inputSize - 1;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	88db      	ldrh	r3, [r3, #6]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t keyUsage = request->inputData[0];
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7a1b      	ldrb	r3, [r3, #8]
 8001a0c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    memcpy(keyVal, &request->inputData[1], keySize);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f103 0109 	add.w	r1, r3, #9
 8001a16:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f014 fb85 	bl	801612e <memcpy>

    // Generate 4-byte Key ID
    GenerateKEYID(keyID);
 8001a24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f001 fbbb 	bl	80031a4 <GenerateKEYID>
    // Convert 4-byte Key ID array into 32-bit unsigned integer
    keyID_32 = ConvertKeyIDToUint32(keyID);
 8001a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ffa6 	bl	8001984 <ConvertKeyIDToUint32>
 8001a38:	6378      	str	r0, [r7, #52]	@ 0x34
    // Call Key Manager to Add Key to Storage medium
    if(KeyManager_AddKey(keyID_32, keyVal, keySize, KEY_ORIGIN_PROVIDED, keyUsage) != 0)
 8001a3a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8001a3e:	f107 010c 	add.w	r1, r7, #12
 8001a42:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a4c:	f001 fc5a 	bl	8003304 <KeyManager_AddKey>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d004      	beq.n	8001a60 <KeyHandler_Store+0xa4>
    {
    	log_error("Failed to Add Key to Storage Medium.");
 8001a56:	480c      	ldr	r0, [pc, #48]	@ (8001a88 <KeyHandler_Store+0xcc>)
 8001a58:	f002 f930 	bl	8003cbc <log_error>
    	return OPERATION_KEY_STORE_FAIL;
 8001a5c:	230c      	movs	r3, #12
 8001a5e:	e00a      	b.n	8001a76 <KeyHandler_Store+0xba>
    }

    // Set the Output Size to the size of Key ID
    response->outputSize = 4;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2204      	movs	r2, #4
 8001a64:	809a      	strh	r2, [r3, #4]
    memcpy(&response->outputData, keyID, 4);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	3306      	adds	r3, #6
 8001a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a6c:	601a      	str	r2, [r3, #0]
    log_info("Key Store Operation complete.");
 8001a6e:	4807      	ldr	r0, [pc, #28]	@ (8001a8c <KeyHandler_Store+0xd0>)
 8001a70:	f002 f8f0 	bl	8003c54 <log_info>
    return OPERATION_SUCCESS;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3738      	adds	r7, #56	@ 0x38
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	08017e6c 	.word	0x08017e6c
 8001a84:	08017e8c 	.word	0x08017e8c
 8001a88:	08017ea4 	.word	0x08017ea4
 8001a8c:	08017ecc 	.word	0x08017ecc

08001a90 <CalculatePadSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculatePadSize(uint8_t option_member)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	3b43      	subs	r3, #67	@ 0x43
 8001a9e:	2b0a      	cmp	r3, #10
 8001aa0:	d830      	bhi.n	8001b04 <CalculatePadSize+0x74>
 8001aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8001aa8 <CalculatePadSize+0x18>)
 8001aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa8:	08001ad5 	.word	0x08001ad5
 8001aac:	08001b05 	.word	0x08001b05
 8001ab0:	08001adb 	.word	0x08001adb
 8001ab4:	08001b05 	.word	0x08001b05
 8001ab8:	08001ae1 	.word	0x08001ae1
 8001abc:	08001b05 	.word	0x08001b05
 8001ac0:	08001ae7 	.word	0x08001ae7
 8001ac4:	08001aed 	.word	0x08001aed
 8001ac8:	08001b05 	.word	0x08001b05
 8001acc:	08001af5 	.word	0x08001af5
 8001ad0:	08001afd 	.word	0x08001afd
	{
		case OPTION_RNG_0016: byteSize = 16; 	break;
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	81fb      	strh	r3, [r7, #14]
 8001ad8:	e015      	b.n	8001b06 <CalculatePadSize+0x76>
		case OPTION_RNG_0032: byteSize = 32; 	break;
 8001ada:	2320      	movs	r3, #32
 8001adc:	81fb      	strh	r3, [r7, #14]
 8001ade:	e012      	b.n	8001b06 <CalculatePadSize+0x76>
		case OPTION_RNG_0064: byteSize = 64; 	break;
 8001ae0:	2340      	movs	r3, #64	@ 0x40
 8001ae2:	81fb      	strh	r3, [r7, #14]
 8001ae4:	e00f      	b.n	8001b06 <CalculatePadSize+0x76>
		case OPTION_RNG_0128: byteSize = 128; 	break;
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	81fb      	strh	r3, [r7, #14]
 8001aea:	e00c      	b.n	8001b06 <CalculatePadSize+0x76>
		case OPTION_RNG_0256: byteSize = 256; 	break;
 8001aec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001af0:	81fb      	strh	r3, [r7, #14]
 8001af2:	e008      	b.n	8001b06 <CalculatePadSize+0x76>
		case OPTION_RNG_0512: byteSize = 512; 	break;
 8001af4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001af8:	81fb      	strh	r3, [r7, #14]
 8001afa:	e004      	b.n	8001b06 <CalculatePadSize+0x76>
		case OPTION_RNG_1024: byteSize = 1024; 	break;
 8001afc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b00:	81fb      	strh	r3, [r7, #14]
 8001b02:	e000      	b.n	8001b06 <CalculatePadSize+0x76>
		default: break;
 8001b04:	bf00      	nop
	}
	return byteSize;
 8001b06:	89fb      	ldrh	r3, [r7, #14]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <OTPHandler_Handle>:

OperationStatus_t OTPHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
    log_info("Handling One-Time Pad Generation operation.");
 8001b1e:	4826      	ldr	r0, [pc, #152]	@ (8001bb8 <OTPHandler_Handle+0xa4>)
 8001b20:	f002 f898 	bl	8003c54 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	795b      	ldrb	r3, [r3, #5]
 8001b28:	75bb      	strb	r3, [r7, #22]
    // Set the requested Pad size
    uint16_t numBytes = CalculatePadSize(option_val);
 8001b2a:	7dbb      	ldrb	r3, [r7, #22]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ffaf 	bl	8001a90 <CalculatePadSize>
 8001b32:	4603      	mov	r3, r0
 8001b34:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of One-Time Pad", numBytes);
 8001b36:	8abb      	ldrh	r3, [r7, #20]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4820      	ldr	r0, [pc, #128]	@ (8001bbc <OTPHandler_Handle+0xa8>)
 8001b3c:	f002 f88a 	bl	8003c54 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 8001b40:	8abb      	ldrh	r3, [r7, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <OTPHandler_Handle+0x3a>
 8001b46:	8abb      	ldrh	r3, [r7, #20]
 8001b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b4c:	d904      	bls.n	8001b58 <OTPHandler_Handle+0x44>
    {
        log_error("Requested Pad count is too big.");
 8001b4e:	481c      	ldr	r0, [pc, #112]	@ (8001bc0 <OTPHandler_Handle+0xac>)
 8001b50:	f002 f8b4 	bl	8003cbc <log_error>
        return OPERATION_INVALID_OPTION;
 8001b54:	2302      	movs	r3, #2
 8001b56:	e02a      	b.n	8001bae <OTPHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	75fb      	strb	r3, [r7, #23]
 8001b5c:	e019      	b.n	8001b92 <OTPHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	4619      	mov	r1, r3
 8001b64:	4817      	ldr	r0, [pc, #92]	@ (8001bc4 <OTPHandler_Handle+0xb0>)
 8001b66:	f00d faa3 	bl	800f0b0 <HAL_RNG_GenerateRandomNumber>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 8001b6e:	7cfb      	ldrb	r3, [r7, #19]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <OTPHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 8001b74:	4814      	ldr	r0, [pc, #80]	@ (8001bc8 <OTPHandler_Handle+0xb4>)
 8001b76:	f002 f8a1 	bl	8003cbc <log_error>
		    return OPERATION_OTP_GEN_FAIL;
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	e017      	b.n	8001bae <OTPHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	b2d1      	uxtb	r1, r2
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	460a      	mov	r2, r1
 8001b8a:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001b8c:	7dfb      	ldrb	r3, [r7, #23]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	8abb      	ldrh	r3, [r7, #20]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3de      	bcc.n	8001b5e <OTPHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	8aba      	ldrh	r2, [r7, #20]
 8001ba4:	809a      	strh	r2, [r3, #4]
    log_info("One-Time Pad Generation Operation complete.");
 8001ba6:	4809      	ldr	r0, [pc, #36]	@ (8001bcc <OTPHandler_Handle+0xb8>)
 8001ba8:	f002 f854 	bl	8003c54 <log_info>
    return OPERATION_SUCCESS;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	08017eec 	.word	0x08017eec
 8001bbc:	08017f18 	.word	0x08017f18
 8001bc0:	08017f3c 	.word	0x08017f3c
 8001bc4:	20002450 	.word	0x20002450
 8001bc8:	08017f5c 	.word	0x08017f5c
 8001bcc:	08017f94 	.word	0x08017f94

08001bd0 <CalculateByteSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculateByteSize(uint8_t option_member)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	3b41      	subs	r3, #65	@ 0x41
 8001bde:	2b0e      	cmp	r3, #14
 8001be0:	d846      	bhi.n	8001c70 <CalculateByteSize+0xa0>
 8001be2:	a201      	add	r2, pc, #4	@ (adr r2, 8001be8 <CalculateByteSize+0x18>)
 8001be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be8:	08001c25 	.word	0x08001c25
 8001bec:	08001c2b 	.word	0x08001c2b
 8001bf0:	08001c31 	.word	0x08001c31
 8001bf4:	08001c71 	.word	0x08001c71
 8001bf8:	08001c37 	.word	0x08001c37
 8001bfc:	08001c71 	.word	0x08001c71
 8001c00:	08001c3d 	.word	0x08001c3d
 8001c04:	08001c71 	.word	0x08001c71
 8001c08:	08001c43 	.word	0x08001c43
 8001c0c:	08001c49 	.word	0x08001c49
 8001c10:	08001c71 	.word	0x08001c71
 8001c14:	08001c51 	.word	0x08001c51
 8001c18:	08001c59 	.word	0x08001c59
 8001c1c:	08001c61 	.word	0x08001c61
 8001c20:	08001c69 	.word	0x08001c69
	{
		case OPTION_RNG_0004: byteSize = 4; break;
 8001c24:	2304      	movs	r3, #4
 8001c26:	81fb      	strh	r3, [r7, #14]
 8001c28:	e023      	b.n	8001c72 <CalculateByteSize+0xa2>
		case OPTION_RNG_0008: byteSize = 8; break;
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	81fb      	strh	r3, [r7, #14]
 8001c2e:	e020      	b.n	8001c72 <CalculateByteSize+0xa2>
		case OPTION_RNG_0016: byteSize = 16; break;
 8001c30:	2310      	movs	r3, #16
 8001c32:	81fb      	strh	r3, [r7, #14]
 8001c34:	e01d      	b.n	8001c72 <CalculateByteSize+0xa2>
		case OPTION_RNG_0032: byteSize = 32; break;
 8001c36:	2320      	movs	r3, #32
 8001c38:	81fb      	strh	r3, [r7, #14]
 8001c3a:	e01a      	b.n	8001c72 <CalculateByteSize+0xa2>
		case OPTION_RNG_0064: byteSize = 64; break;
 8001c3c:	2340      	movs	r3, #64	@ 0x40
 8001c3e:	81fb      	strh	r3, [r7, #14]
 8001c40:	e017      	b.n	8001c72 <CalculateByteSize+0xa2>
		case OPTION_RNG_0128: byteSize = 128; break;
 8001c42:	2380      	movs	r3, #128	@ 0x80
 8001c44:	81fb      	strh	r3, [r7, #14]
 8001c46:	e014      	b.n	8001c72 <CalculateByteSize+0xa2>
		case OPTION_RNG_0256: byteSize = 256; break;
 8001c48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c4c:	81fb      	strh	r3, [r7, #14]
 8001c4e:	e010      	b.n	8001c72 <CalculateByteSize+0xa2>
		case OPTION_RNG_0512: byteSize = 512; break;
 8001c50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c54:	81fb      	strh	r3, [r7, #14]
 8001c56:	e00c      	b.n	8001c72 <CalculateByteSize+0xa2>
		case OPTION_RNG_1024: byteSize = 1024; break;
 8001c58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c5c:	81fb      	strh	r3, [r7, #14]
 8001c5e:	e008      	b.n	8001c72 <CalculateByteSize+0xa2>
		case OPTION_RNG_2048: byteSize = 2048; break;
 8001c60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c64:	81fb      	strh	r3, [r7, #14]
 8001c66:	e004      	b.n	8001c72 <CalculateByteSize+0xa2>
		case OPTION_RNG_4096: byteSize = 4096; break;
 8001c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c6c:	81fb      	strh	r3, [r7, #14]
 8001c6e:	e000      	b.n	8001c72 <CalculateByteSize+0xa2>
		default: break;
 8001c70:	bf00      	nop
	}
	return byteSize;
 8001c72:	89fb      	ldrh	r3, [r7, #14]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <RandomHandler_Handle>:

OperationStatus_t RandomHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
    log_info("Handling Random Number Generation operation.");
 8001c8a:	4826      	ldr	r0, [pc, #152]	@ (8001d24 <RandomHandler_Handle+0xa4>)
 8001c8c:	f001 ffe2 	bl	8003c54 <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	795b      	ldrb	r3, [r3, #5]
 8001c94:	75bb      	strb	r3, [r7, #22]
    // Set the requested Random Number size
    uint16_t numBytes = CalculateByteSize(option_val);
 8001c96:	7dbb      	ldrb	r3, [r7, #22]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff99 	bl	8001bd0 <CalculateByteSize>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of Random Number", numBytes);
 8001ca2:	8abb      	ldrh	r3, [r7, #20]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4820      	ldr	r0, [pc, #128]	@ (8001d28 <RandomHandler_Handle+0xa8>)
 8001ca8:	f001 ffd4 	bl	8003c54 <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 8001cac:	8abb      	ldrh	r3, [r7, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <RandomHandler_Handle+0x3a>
 8001cb2:	8abb      	ldrh	r3, [r7, #20]
 8001cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cb8:	d904      	bls.n	8001cc4 <RandomHandler_Handle+0x44>
    {
        log_error("Requested random byte count is invalid.");
 8001cba:	481c      	ldr	r0, [pc, #112]	@ (8001d2c <RandomHandler_Handle+0xac>)
 8001cbc:	f001 fffe 	bl	8003cbc <log_error>
        return OPERATION_INVALID_OPTION;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e02a      	b.n	8001d1a <RandomHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	75fb      	strb	r3, [r7, #23]
 8001cc8:	e019      	b.n	8001cfe <RandomHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4817      	ldr	r0, [pc, #92]	@ (8001d30 <RandomHandler_Handle+0xb0>)
 8001cd2:	f00d f9ed 	bl	800f0b0 <HAL_RNG_GenerateRandomNumber>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 8001cda:	7cfb      	ldrb	r3, [r7, #19]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <RandomHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 8001ce0:	4814      	ldr	r0, [pc, #80]	@ (8001d34 <RandomHandler_Handle+0xb4>)
 8001ce2:	f001 ffeb 	bl	8003cbc <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 8001ce6:	2309      	movs	r3, #9
 8001ce8:	e017      	b.n	8001d1a <RandomHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	b2d1      	uxtb	r1, r2
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	460a      	mov	r2, r1
 8001cf6:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	8abb      	ldrh	r3, [r7, #20]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d3de      	bcc.n	8001cca <RandomHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	8aba      	ldrh	r2, [r7, #20]
 8001d10:	809a      	strh	r2, [r3, #4]
    log_info("RNG Operation complete.");
 8001d12:	4809      	ldr	r0, [pc, #36]	@ (8001d38 <RandomHandler_Handle+0xb8>)
 8001d14:	f001 ff9e 	bl	8003c54 <log_info>
    return OPERATION_SUCCESS;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	08017fc0 	.word	0x08017fc0
 8001d28:	08017ff0 	.word	0x08017ff0
 8001d2c:	08018018 	.word	0x08018018
 8001d30:	20002450 	.word	0x20002450
 8001d34:	08018040 	.word	0x08018040
 8001d38:	08018078 	.word	0x08018078

08001d3c <W25Q_Delay>:
#define W25Q_SPI hspi1

#define numBLOCK 32

void W25Q_Delay(uint32_t time)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f003 fca1 	bl	800568c <HAL_Delay>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <csLOW>:

void csLOW (void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d5e:	4802      	ldr	r0, [pc, #8]	@ (8001d68 <csLOW+0x14>)
 8001d60:	f004 f8ba 	bl	8005ed8 <HAL_GPIO_WritePin>
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	42020c00 	.word	0x42020c00

08001d6c <csHIGH>:

void csHIGH (void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001d70:	2201      	movs	r2, #1
 8001d72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d76:	4802      	ldr	r0, [pc, #8]	@ (8001d80 <csHIGH+0x14>)
 8001d78:	f004 f8ae 	bl	8005ed8 <HAL_GPIO_WritePin>
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	42020c00 	.word	0x42020c00

08001d84 <SPI_Write>:

void SPI_Write(uint8_t *data, uint8_t len)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4803      	ldr	r0, [pc, #12]	@ (8001da8 <SPI_Write+0x24>)
 8001d9c:	f00d fe92 	bl	800fac4 <HAL_SPI_Transmit>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20002494 	.word	0x20002494

08001dac <SPI_Read>:

void SPI_Read(uint8_t *data, uint32_t len)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4803      	ldr	r0, [pc, #12]	@ (8001dd0 <SPI_Read+0x24>)
 8001dc2:	f00e f8b7 	bl	800ff34 <HAL_SPI_Receive>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20002494 	.word	0x20002494

08001dd4 <W25Q_Read>:
	csHIGH();
	return ((rData[0]<<16)|(rData[1]<<8)|rData[2]);
}

void W25Q_Read (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	460b      	mov	r3, r1
 8001de2:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[5];
	uint32_t memAddr = (startPage*256) + offset;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	4413      	add	r3, r2
 8001dec:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x03;  // enable Read
 8001dee:	2303      	movs	r3, #3
 8001df0:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	75fb      	strb	r3, [r7, #23]
		tData[2] = (memAddr>>16)&0xFF;
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
	}

	csLOW();  // pull the CS Low
 8001e08:	f7ff ffa4 	bl	8001d54 <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2104      	movs	r1, #4
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ffb6 	bl	8001d84 <SPI_Write>
	else
	{
		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	6838      	ldr	r0, [r7, #0]
 8001e1c:	f7ff ffc6 	bl	8001dac <SPI_Read>
	csHIGH();  // pull the CS High
 8001e20:	f7ff ffa4 	bl	8001d6c <csHIGH>
}
 8001e24:	bf00      	nop
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <W25Q_FastRead>:

void W25Q_FastRead (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[6];
	uint32_t memAddr = (startPage*256) + offset;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021a      	lsls	r2, r3, #8
 8001e40:	7afb      	ldrb	r3, [r7, #11]
 8001e42:	4413      	add	r3, r2
 8001e44:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x0B;  // enable Fast Read
 8001e46:	230b      	movs	r3, #11
 8001e48:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	75fb      	strb	r3, [r7, #23]
		tData[4] = 0;  // Dummy clock
 8001e60:	2300      	movs	r3, #0
 8001e62:	763b      	strb	r3, [r7, #24]
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
		tData[5] = 0;  // Dummy clock
	}

	csLOW();  // pull the CS Low
 8001e64:	f7ff ff76 	bl	8001d54 <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 5);  // send read instruction along with the 24 bit memory address
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ff88 	bl	8001d84 <SPI_Write>
	else
	{
		SPI_Write(tData, 6);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	6838      	ldr	r0, [r7, #0]
 8001e78:	f7ff ff98 	bl	8001dac <SPI_Read>
	csHIGH();  // pull the CS High
 8001e7c:	f7ff ff76 	bl	8001d6c <csHIGH>
}
 8001e80:	bf00      	nop
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <write_enable>:

void write_enable (void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06;  // enable write
 8001e8e:	2306      	movs	r3, #6
 8001e90:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001e92:	f7ff ff5f 	bl	8001d54 <csLOW>
	SPI_Write(&tData, 1);
 8001e96:	1dfb      	adds	r3, r7, #7
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff72 	bl	8001d84 <SPI_Write>
	csHIGH();
 8001ea0:	f7ff ff64 	bl	8001d6c <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8001ea4:	2005      	movs	r0, #5
 8001ea6:	f7ff ff49 	bl	8001d3c <W25Q_Delay>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <write_disable>:

void write_disable(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04;  // disable write
 8001eb8:	2304      	movs	r3, #4
 8001eba:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8001ebc:	f7ff ff4a 	bl	8001d54 <csLOW>
	SPI_Write(&tData, 1);
 8001ec0:	1dfb      	adds	r3, r7, #7
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <SPI_Write>
	csHIGH();
 8001eca:	f7ff ff4f 	bl	8001d6c <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8001ece:	2005      	movs	r0, #5
 8001ed0:	f7ff ff34 	bl	8001d3c <W25Q_Delay>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <bytestowriteFLASH>:

uint32_t bytestowriteFLASH (uint32_t size, uint16_t offset)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<256) return size;
 8001ee8:	887a      	ldrh	r2, [r7, #2]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	2bff      	cmp	r3, #255	@ 0xff
 8001ef0:	d801      	bhi.n	8001ef6 <bytestowriteFLASH+0x1a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	e002      	b.n	8001efc <bytestowriteFLASH+0x20>
	else return 256-offset;
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <bytestomodify>:

uint32_t bytestomodify (uint32_t size, uint16_t offset)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<4096) return size;
 8001f14:	887a      	ldrh	r2, [r7, #2]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f1e:	d201      	bcs.n	8001f24 <bytestomodify+0x1c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	e002      	b.n	8001f2a <bytestomodify+0x22>
	else return 4096-offset;
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <W25Q_Erase_Sector>:

void W25Q_Erase_Sector (uint16_t numsector)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	80fb      	strh	r3, [r7, #6]
	uint8_t tData[6];
	uint32_t memAddr = numsector*16*256;   // Each sector contains 16 pages * 256 bytes
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	031b      	lsls	r3, r3, #12
 8001f44:	617b      	str	r3, [r7, #20]

	write_enable();
 8001f46:	f7ff ff9f 	bl	8001e88 <write_enable>

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x20;  // Erase sector
 8001f4a:	2320      	movs	r3, #32
 8001f4c:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddr>>8)&0xFF;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	73fb      	strb	r3, [r7, #15]

		csLOW();
 8001f64:	f7ff fef6 	bl	8001d54 <csLOW>
		SPI_Write(tData, 4);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff08 	bl	8001d84 <SPI_Write>
		csHIGH();
 8001f74:	f7ff fefa 	bl	8001d6c <csHIGH>
		csLOW();  // pull the CS LOW
		SPI_Write(tData, 5);
		csHIGH();  // pull the HIGH
	}

	W25Q_Delay(450);  // 450ms delay for sector erase
 8001f78:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8001f7c:	f7ff fede 	bl	8001d3c <W25Q_Delay>

	write_disable();
 8001f80:	f7ff ff97 	bl	8001eb2 <write_disable>

}
 8001f84:	bf00      	nop
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <W25Q_Write_Clean>:


void W25Q_Write_Clean (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b0d3      	sub	sp, #332	@ 0x14c
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 8001f96:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8001f9a:	6020      	str	r0, [r4, #0]
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001fa2:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8001fa6:	600a      	str	r2, [r1, #0]
 8001fa8:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8001fac:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001fb6:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8001fba:	4602      	mov	r2, r0
 8001fbc:	801a      	strh	r2, [r3, #0]
	uint8_t tData[266];
	uint32_t startPage = page;
 8001fbe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001fc2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	uint32_t endPage  = startPage + ((size+offset-1)/256);
 8001fcc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001fd0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8001fd4:	881a      	ldrh	r2, [r3, #0]
 8001fd6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001fda:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001fea:	4413      	add	r3, r2
 8001fec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	uint32_t numPages = endPage-startPage+1;
 8001ff0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001ff4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint16_t startSector  = startPage/16;
 8002000:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
	uint16_t endSector  = endPage/16;
 800200a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	uint16_t numSectors = endSector-startSector+1;
 8002014:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8002018:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	b29b      	uxth	r3, r3
 8002020:	3301      	adds	r3, #1
 8002022:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
	for (uint16_t i=0; i<numSectors; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
 800202c:	e00c      	b.n	8002048 <W25Q_Write_Clean+0xbc>
	{
		W25Q_Erase_Sector(startSector++);
 800202e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	f8a7 2142 	strh.w	r2, [r7, #322]	@ 0x142
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff7c 	bl	8001f36 <W25Q_Erase_Sector>
	for (uint16_t i=0; i<numSectors; i++)
 800203e:	f8b7 3140 	ldrh.w	r3, [r7, #320]	@ 0x140
 8002042:	3301      	adds	r3, #1
 8002044:	f8a7 3140 	strh.w	r3, [r7, #320]	@ 0x140
 8002048:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 800204c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8002050:	429a      	cmp	r2, r3
 8002052:	d3ec      	bcc.n	800202e <W25Q_Write_Clean+0xa2>
	}

	uint32_t dataPosition = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

	// write the data
	for (uint32_t i=0; i<numPages; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002060:	e0c0      	b.n	80021e4 <W25Q_Write_Clean+0x258>
	{
		uint32_t memAddr = (startPage*256)+offset;
 8002062:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002066:	021a      	lsls	r2, r3, #8
 8002068:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800206c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	4413      	add	r3, r2
 8002074:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		uint16_t bytesremaining  = bytestowriteFLASH(size, offset);
 8002078:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800207c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002086:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800208a:	4611      	mov	r1, r2
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	f7ff ff25 	bl	8001edc <bytestowriteFLASH>
 8002092:	4603      	mov	r3, r0
 8002094:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		uint32_t indx = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

		write_enable();
 800209e:	f7ff fef3 	bl	8001e88 <write_enable>

		if (numBLOCK<512)   // Chip Size<256Mb
		{
			tData[0] = 0x02;  // page program
 80020a2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020aa:	2202      	movs	r2, #2
 80020ac:	701a      	strb	r2, [r3, #0]
			tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 80020ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020b2:	0c1b      	lsrs	r3, r3, #16
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020be:	705a      	strb	r2, [r3, #1]
			tData[2] = (memAddr>>8)&0xFF;
 80020c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020cc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020d0:	709a      	strb	r2, [r3, #2]
			tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 80020d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020dc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020e0:	70da      	strb	r2, [r3, #3]

			indx = 4;
 80020e2:	2304      	movs	r3, #4
 80020e4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
			tData[4] = (memAddr)&0xFF; // LSB of the memory Address

			indx = 5;
		}

		uint16_t bytestosend  = bytesremaining + indx;
 80020e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80020f2:	4413      	add	r3, r2
 80020f4:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

		for (uint16_t i=0; i<bytesremaining; i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 80020fe:	e01a      	b.n	8002136 <W25Q_Write_Clean+0x1aa>
		{
			tData[indx++] = data[i+dataPosition];
 8002100:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 8002104:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002108:	4413      	add	r3, r2
 800210a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800210e:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	441a      	add	r2, r3
 8002116:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800211a:	1c59      	adds	r1, r3, #1
 800211c:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8002120:	7811      	ldrb	r1, [r2, #0]
 8002122:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002126:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800212a:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i=0; i<bytesremaining; i++)
 800212c:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8002130:	3301      	adds	r3, #1
 8002132:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 8002136:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 800213a:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 800213e:	429a      	cmp	r2, r3
 8002140:	d3de      	bcc.n	8002100 <W25Q_Write_Clean+0x174>
		}

		if (bytestosend > 250)
 8002142:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8002146:	2bfa      	cmp	r3, #250	@ 0xfa
 8002148:	d916      	bls.n	8002178 <W25Q_Write_Clean+0x1ec>
		{
			csLOW();
 800214a:	f7ff fe03 	bl	8001d54 <csLOW>
			SPI_Write(tData, 100);
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	2164      	movs	r1, #100	@ 0x64
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fe15 	bl	8001d84 <SPI_Write>
			SPI_Write(tData+100, bytestosend-100);
 800215a:	f107 0310 	add.w	r3, r7, #16
 800215e:	3364      	adds	r3, #100	@ 0x64
 8002160:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	3a64      	subs	r2, #100	@ 0x64
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fe09 	bl	8001d84 <SPI_Write>
			csHIGH();
 8002172:	f7ff fdfb 	bl	8001d6c <csHIGH>
 8002176:	e00c      	b.n	8002192 <W25Q_Write_Clean+0x206>

		}

		else
		{
			csLOW();
 8002178:	f7ff fdec 	bl	8001d54 <csLOW>
			SPI_Write(tData, bytestosend);
 800217c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8002180:	b2da      	uxtb	r2, r3
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fdfb 	bl	8001d84 <SPI_Write>
			csHIGH();
 800218e:	f7ff fded 	bl	8001d6c <csHIGH>
		}


		startPage++;
 8002192:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002196:	3301      	adds	r3, #1
 8002198:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		offset = 0;
 800219c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80021a0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80021a4:	2200      	movs	r2, #0
 80021a6:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 80021a8:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 80021ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80021b0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80021b4:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80021b8:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 80021bc:	6809      	ldr	r1, [r1, #0]
 80021be:	1a8a      	subs	r2, r1, r2
 80021c0:	601a      	str	r2, [r3, #0]
		dataPosition = dataPosition+bytesremaining;
 80021c2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80021c6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80021ca:	4413      	add	r3, r2
 80021cc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

		W25Q_Delay(5);
 80021d0:	2005      	movs	r0, #5
 80021d2:	f7ff fdb3 	bl	8001d3c <W25Q_Delay>
		write_disable();
 80021d6:	f7ff fe6c 	bl	8001eb2 <write_disable>
	for (uint32_t i=0; i<numPages; i++)
 80021da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80021de:	3301      	adds	r3, #1
 80021e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80021e4:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80021e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f4ff af38 	bcc.w	8002062 <W25Q_Write_Clean+0xd6>

	}
}
 80021f2:	bf00      	nop
 80021f4:	bf00      	nop
 80021f6:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd90      	pop	{r4, r7, pc}

080021fe <W25Q_Write>:

void W25Q_Write (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 80021fe:	b590      	push	{r4, r7, lr}
 8002200:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800220c:	f844 0c24 	str.w	r0, [r4, #-36]
 8002210:	4608      	mov	r0, r1
 8002212:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002216:	f841 2c2c 	str.w	r2, [r1, #-44]
 800221a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800221e:	f842 3c30 	str.w	r3, [r2, #-48]
 8002222:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002226:	4602      	mov	r2, r0
 8002228:	f823 2c26 	strh.w	r2, [r3, #-38]
	uint16_t startSector  = page/16;
 800222c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002230:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800223a:	f102 020e 	add.w	r2, r2, #14
 800223e:	8013      	strh	r3, [r2, #0]
	uint16_t endSector  = (page + ((size+offset-1)/256))/16;
 8002240:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002244:	f833 2c26 	ldrh.w	r2, [r3, #-38]
 8002248:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800224c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002250:	4413      	add	r3, r2
 8002252:	3b01      	subs	r3, #1
 8002254:	0a1a      	lsrs	r2, r3, #8
 8002256:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800225a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800225e:	4413      	add	r3, r2
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8002266:	f102 021e 	add.w	r2, r2, #30
 800226a:	8013      	strh	r3, [r2, #0]
	uint16_t numSectors = endSector-startSector+1;
 800226c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002270:	f103 031e 	add.w	r3, r3, #30
 8002274:	881a      	ldrh	r2, [r3, #0]
 8002276:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800227a:	f103 030e 	add.w	r3, r3, #14
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	b29b      	uxth	r3, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800228a:	f102 021c 	add.w	r2, r2, #28
 800228e:	8013      	strh	r3, [r2, #0]

	uint8_t previousData[4096];
	uint32_t sectorOffset = ((page%16)*256)+offset;
 8002290:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002294:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	021a      	lsls	r2, r3, #8
 800229e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022a2:	f833 3c26 	ldrh.w	r3, [r3, #-38]
 80022a6:	4413      	add	r3, r2
 80022a8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80022ac:	f102 0208 	add.w	r2, r2, #8
 80022b0:	6013      	str	r3, [r2, #0]
	uint32_t dataindx = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80022b8:	f102 0204 	add.w	r2, r2, #4
 80022bc:	6013      	str	r3, [r2, #0]

	for (uint16_t i=0; i<numSectors; i++)
 80022be:	2300      	movs	r3, #0
 80022c0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80022c4:	f102 0202 	add.w	r2, r2, #2
 80022c8:	8013      	strh	r3, [r2, #0]
 80022ca:	e0a5      	b.n	8002418 <W25Q_Write+0x21a>
	{
		uint32_t startPage = startSector*16;
 80022cc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80022d0:	f103 030e 	add.w	r3, r3, #14
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80022dc:	f102 0218 	add.w	r2, r2, #24
 80022e0:	6013      	str	r3, [r2, #0]
		W25Q_FastRead(startPage, 0, 4096, previousData);
 80022e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80022e6:	3b1c      	subs	r3, #28
 80022e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022ec:	2100      	movs	r1, #0
 80022ee:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 80022f2:	f100 0018 	add.w	r0, r0, #24
 80022f6:	6800      	ldr	r0, [r0, #0]
 80022f8:	f7ff fd98 	bl	8001e2c <W25Q_FastRead>

		uint16_t bytesRemaining = bytestomodify(size, sectorOffset);
 80022fc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002300:	f103 0308 	add.w	r3, r3, #8
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800230c:	4619      	mov	r1, r3
 800230e:	f852 0c2c 	ldr.w	r0, [r2, #-44]
 8002312:	f7ff fdf9 	bl	8001f08 <bytestomodify>
 8002316:	4603      	mov	r3, r0
 8002318:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800231c:	f102 0216 	add.w	r2, r2, #22
 8002320:	8013      	strh	r3, [r2, #0]
		for (uint16_t i=0; i<bytesRemaining; i++)
 8002322:	2300      	movs	r3, #0
 8002324:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002328:	8013      	strh	r3, [r2, #0]
 800232a:	e023      	b.n	8002374 <W25Q_Write+0x176>
		{
			previousData[i+sectorOffset] = data[i+dataindx];
 800232c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002336:	f103 0304 	add.w	r3, r3, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4413      	add	r3, r2
 800233e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002342:	f852 2c30 	ldr.w	r2, [r2, #-48]
 8002346:	441a      	add	r2, r3
 8002348:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800234c:	8819      	ldrh	r1, [r3, #0]
 800234e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002352:	f103 0308 	add.w	r3, r3, #8
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	440b      	add	r3, r1
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002360:	440b      	add	r3, r1
 8002362:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint16_t i=0; i<bytesRemaining; i++)
 8002366:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002372:	8013      	strh	r3, [r2, #0]
 8002374:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800237e:	f103 0316 	add.w	r3, r3, #22
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d3d1      	bcc.n	800232c <W25Q_Write+0x12e>
		}

		W25Q_Write_Clean(startPage, 0, 4096, previousData);
 8002388:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800238c:	3b1c      	subs	r3, #28
 800238e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002392:	2100      	movs	r1, #0
 8002394:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8002398:	f100 0018 	add.w	r0, r0, #24
 800239c:	6800      	ldr	r0, [r0, #0]
 800239e:	f7ff fdf5 	bl	8001f8c <W25Q_Write_Clean>

		startSector++;
 80023a2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80023a6:	f103 030e 	add.w	r3, r3, #14
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80023b2:	f102 020e 	add.w	r2, r2, #14
 80023b6:	8013      	strh	r3, [r2, #0]
		sectorOffset = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80023be:	f102 0208 	add.w	r2, r2, #8
 80023c2:	6013      	str	r3, [r2, #0]
		dataindx = dataindx+bytesRemaining;
 80023c4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80023c8:	f103 0316 	add.w	r3, r3, #22
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80023d2:	f102 0204 	add.w	r2, r2, #4
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80023de:	f102 0204 	add.w	r2, r2, #4
 80023e2:	6013      	str	r3, [r2, #0]
		size = size-bytesRemaining;
 80023e4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80023e8:	f103 0316 	add.w	r3, r3, #22
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80023f2:	4611      	mov	r1, r2
 80023f4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80023f8:	f852 2c2c 	ldr.w	r2, [r2, #-44]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f841 3c2c 	str.w	r3, [r1, #-44]
	for (uint16_t i=0; i<numSectors; i++)
 8002402:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002406:	f103 0302 	add.w	r3, r3, #2
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002412:	f102 0202 	add.w	r2, r2, #2
 8002416:	8013      	strh	r3, [r2, #0]
 8002418:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800241c:	f103 0302 	add.w	r3, r3, #2
 8002420:	881a      	ldrh	r2, [r3, #0]
 8002422:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002426:	f103 031c 	add.w	r3, r3, #28
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	f4ff af4d 	bcc.w	80022cc <W25Q_Write+0xce>
	}
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bd90      	pop	{r4, r7, pc}

08002440 <W25Q_Read_Byte>:

uint8_t W25Q_Read_Byte (uint32_t Addr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	uint8_t tData[5];
	uint8_t rData;

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x03;  // enable Read
 8002448:	2303      	movs	r3, #3
 800244a:	743b      	strb	r3, [r7, #16]
		tData[1] = (Addr>>16)&0xFF;  // MSB of the memory Address
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	0c1b      	lsrs	r3, r3, #16
 8002450:	b2db      	uxtb	r3, r3
 8002452:	747b      	strb	r3, [r7, #17]
		tData[2] = (Addr>>8)&0xFF;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	b2db      	uxtb	r3, r3
 800245a:	74bb      	strb	r3, [r7, #18]
		tData[3] = (Addr)&0xFF; // LSB of the memory Address
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	74fb      	strb	r3, [r7, #19]
		tData[2] = (Addr>>16)&0xFF;
		tData[3] = (Addr>>8)&0xFF;
		tData[4] = (Addr)&0xFF; // LSB of the memory Address
	}

	csLOW();  // pull the CS Low
 8002462:	f7ff fc77 	bl	8001d54 <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 4);  // send read instruction along with the 24 bit memory address
 8002466:	f107 0310 	add.w	r3, r7, #16
 800246a:	2104      	movs	r1, #4
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fc89 	bl	8001d84 <SPI_Write>
	else
	{
		SPI_Write(tData, 5);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(&rData, 1);  // Read the data
 8002472:	f107 030f 	add.w	r3, r7, #15
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fc97 	bl	8001dac <SPI_Read>
	csHIGH();  // pull the CS High
 800247e:	f7ff fc75 	bl	8001d6c <csHIGH>

	return rData;
 8002482:	7bfb      	ldrb	r3, [r7, #15]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <W25Q_Write_Byte>:

void W25Q_Write_Byte (uint32_t Addr, uint8_t data)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	70fb      	strb	r3, [r7, #3]
	uint8_t tData[6];
	uint8_t indx;

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x02;  // page program
 8002498:	2302      	movs	r3, #2
 800249a:	723b      	strb	r3, [r7, #8]
		tData[1] = (Addr>>16)&0xFF;  // MSB of the memory Address
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	0c1b      	lsrs	r3, r3, #16
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	727b      	strb	r3, [r7, #9]
		tData[2] = (Addr>>8)&0xFF;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	72bb      	strb	r3, [r7, #10]
		tData[3] = (Addr)&0xFF; // LSB of the memory Address
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	72fb      	strb	r3, [r7, #11]
		tData[4] = data;
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	733b      	strb	r3, [r7, #12]
		indx = 5;
 80024b6:	2305      	movs	r3, #5
 80024b8:	73fb      	strb	r3, [r7, #15]
		tData[5] = data;
		indx = 6;
	}


	if (W25Q_Read_Byte(Addr) == 0xFF)
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffc0 	bl	8002440 <W25Q_Read_Byte>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2bff      	cmp	r3, #255	@ 0xff
 80024c4:	d111      	bne.n	80024ea <W25Q_Write_Byte+0x5e>
	{
		write_enable();
 80024c6:	f7ff fcdf 	bl	8001e88 <write_enable>
		csLOW();
 80024ca:	f7ff fc43 	bl	8001d54 <csLOW>
		SPI_Write(tData, indx);
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	f107 0308 	add.w	r3, r7, #8
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fc54 	bl	8001d84 <SPI_Write>
		csHIGH();
 80024dc:	f7ff fc46 	bl	8001d6c <csHIGH>

		W25Q_Delay(5);
 80024e0:	2005      	movs	r0, #5
 80024e2:	f7ff fc2b 	bl	8001d3c <W25Q_Delay>
		write_disable();
 80024e6:	f7ff fce4 	bl	8001eb2 <write_disable>
	}
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <rotword>:
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f,
	0xb0, 0x54, 0xbb, 0x16
};

static inline unsigned int rotword(unsigned int a)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
	return (((a) >> 24)|((a) << 8));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	ea4f 6333 	mov.w	r3, r3, ror #24
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b090      	sub	sp, #64	@ 0x40
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
	const unsigned int rconst[11] = {
 8002516:	4b49      	ldr	r3, [pc, #292]	@ (800263c <tc_aes128_set_encrypt_key+0x130>)
 8002518:	f107 040c 	add.w	r4, r7, #12
 800251c:	461d      	mov	r5, r3
 800251e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002526:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800252a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <tc_aes128_set_encrypt_key+0x2c>
		return TC_CRYPTO_FAIL;
 8002534:	2300      	movs	r3, #0
 8002536:	e07d      	b.n	8002634 <tc_aes128_set_encrypt_key+0x128>
	} else if (k == (const uint8_t *) 0) {
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <tc_aes128_set_encrypt_key+0x36>
		return TC_CRYPTO_FAIL;
 800253e:	2300      	movs	r3, #0
 8002540:	e078      	b.n	8002634 <tc_aes128_set_encrypt_key+0x128>
	}

	for (i = 0; i < Nk; ++i) {
 8002542:	2300      	movs	r3, #0
 8002544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002546:	e024      	b.n	8002592 <tc_aes128_set_encrypt_key+0x86>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 8002548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	061a      	lsls	r2, r3, #24
 8002554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	3301      	adds	r3, #1
 800255a:	6839      	ldr	r1, [r7, #0]
 800255c:	440b      	add	r3, r1
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	431a      	orrs	r2, r3
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
 8002564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	6839      	ldr	r1, [r7, #0]
 800256c:	440b      	add	r3, r1
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	021b      	lsls	r3, r3, #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 8002572:	4313      	orrs	r3, r2
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
 8002574:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	3203      	adds	r2, #3
 800257a:	6839      	ldr	r1, [r7, #0]
 800257c:	440a      	add	r2, r1
 800257e:	7812      	ldrb	r2, [r2, #0]
 8002580:	4313      	orrs	r3, r2
 8002582:	4619      	mov	r1, r3
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
 800258c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800258e:	3301      	adds	r3, #1
 8002590:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002594:	2b03      	cmp	r3, #3
 8002596:	d9d7      	bls.n	8002548 <tc_aes128_set_encrypt_key+0x3c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
 8002598:	e048      	b.n	800262c <tc_aes128_set_encrypt_key+0x120>
		t = s->words[i-1];
 800259a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800259c:	1e5a      	subs	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a4:	63bb      	str	r3, [r7, #56]	@ 0x38
		if ((i % Nk) == 0) {
 80025a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d12e      	bne.n	800260e <tc_aes128_set_encrypt_key+0x102>
			t = subword(rotword(t)) ^ rconst[i/Nk];
 80025b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80025b2:	f7ff ff9e 	bl	80024f2 <rotword>
 80025b6:	4603      	mov	r3, r0
 80025b8:	0e1b      	lsrs	r3, r3, #24
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4a20      	ldr	r2, [pc, #128]	@ (8002640 <tc_aes128_set_encrypt_key+0x134>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	061c      	lsls	r4, r3, #24
 80025c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80025c4:	f7ff ff95 	bl	80024f2 <rotword>
 80025c8:	4603      	mov	r3, r0
 80025ca:	0c1b      	lsrs	r3, r3, #16
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002640 <tc_aes128_set_encrypt_key+0x134>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	431c      	orrs	r4, r3
 80025d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80025d8:	f7ff ff8b 	bl	80024f2 <rotword>
 80025dc:	4603      	mov	r3, r0
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	4a17      	ldr	r2, [pc, #92]	@ (8002640 <tc_aes128_set_encrypt_key+0x134>)
 80025e4:	5cd3      	ldrb	r3, [r2, r3]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	431c      	orrs	r4, r3
 80025ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80025ec:	f7ff ff81 	bl	80024f2 <rotword>
 80025f0:	4603      	mov	r3, r0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4a12      	ldr	r2, [pc, #72]	@ (8002640 <tc_aes128_set_encrypt_key+0x134>)
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	4323      	orrs	r3, r4
 80025fa:	461a      	mov	r2, r3
 80025fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	3340      	adds	r3, #64	@ 0x40
 8002604:	443b      	add	r3, r7
 8002606:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800260a:	4053      	eors	r3, r2
 800260c:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		s->words[i] = s->words[i-Nk] ^ t;
 800260e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002610:	1f1a      	subs	r2, r3, #4
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261a:	ea82 0103 	eor.w	r1, r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
 8002626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002628:	3301      	adds	r3, #1
 800262a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800262c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800262e:	2b2b      	cmp	r3, #43	@ 0x2b
 8002630:	d9b3      	bls.n	800259a <tc_aes128_set_encrypt_key+0x8e>
	}

	return TC_CRYPTO_SUCCESS;
 8002632:	2301      	movs	r3, #1
}
 8002634:	4618      	mov	r0, r3
 8002636:	3740      	adds	r7, #64	@ 0x40
 8002638:	46bd      	mov	sp, r7
 800263a:	bdb0      	pop	{r4, r5, r7, pc}
 800263c:	08018090 	.word	0x08018090
 8002640:	08018b50 	.word	0x08018b50

08002644 <add_round_key>:

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e1b      	lsrs	r3, r3, #24
 8002658:	b2db      	uxtb	r3, r3
 800265a:	4053      	eors	r3, r2
 800265c:	b2da      	uxtb	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3301      	adds	r3, #1
 8002666:	7819      	ldrb	r1, [r3, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	b2da      	uxtb	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3301      	adds	r3, #1
 8002674:	404a      	eors	r2, r1
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3302      	adds	r3, #2
 800267e:	7819      	ldrb	r1, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	b2da      	uxtb	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3302      	adds	r3, #2
 800268c:	404a      	eors	r2, r1
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3303      	adds	r3, #3
 8002696:	7819      	ldrb	r1, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3303      	adds	r3, #3
 80026a2:	404a      	eors	r2, r1
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3304      	adds	r3, #4
 80026ac:	7819      	ldrb	r1, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	3304      	adds	r3, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0e1b      	lsrs	r3, r3, #24
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3304      	adds	r3, #4
 80026bc:	404a      	eors	r2, r1
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3305      	adds	r3, #5
 80026c6:	7819      	ldrb	r1, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	3304      	adds	r3, #4
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0c1b      	lsrs	r3, r3, #16
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3305      	adds	r3, #5
 80026d6:	404a      	eors	r2, r1
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	701a      	strb	r2, [r3, #0]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3306      	adds	r3, #6
 80026e0:	7819      	ldrb	r1, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	3304      	adds	r3, #4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3306      	adds	r3, #6
 80026f0:	404a      	eors	r2, r1
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3307      	adds	r3, #7
 80026fa:	7819      	ldrb	r1, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	3304      	adds	r3, #4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3307      	adds	r3, #7
 8002708:	404a      	eors	r2, r1
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3308      	adds	r3, #8
 8002712:	7819      	ldrb	r1, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	3308      	adds	r3, #8
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	0e1b      	lsrs	r3, r3, #24
 800271c:	b2da      	uxtb	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3308      	adds	r3, #8
 8002722:	404a      	eors	r2, r1
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3309      	adds	r3, #9
 800272c:	7819      	ldrb	r1, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	3308      	adds	r3, #8
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	b2da      	uxtb	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3309      	adds	r3, #9
 800273c:	404a      	eors	r2, r1
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	330a      	adds	r3, #10
 8002746:	7819      	ldrb	r1, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3308      	adds	r3, #8
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	b2da      	uxtb	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	330a      	adds	r3, #10
 8002756:	404a      	eors	r2, r1
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	330b      	adds	r3, #11
 8002760:	7819      	ldrb	r1, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	3308      	adds	r3, #8
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	330b      	adds	r3, #11
 800276e:	404a      	eors	r2, r1
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	330c      	adds	r3, #12
 8002778:	7819      	ldrb	r1, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0e1b      	lsrs	r3, r3, #24
 8002782:	b2da      	uxtb	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	330c      	adds	r3, #12
 8002788:	404a      	eors	r2, r1
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	330d      	adds	r3, #13
 8002792:	7819      	ldrb	r1, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	330c      	adds	r3, #12
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0c1b      	lsrs	r3, r3, #16
 800279c:	b2da      	uxtb	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	330d      	adds	r3, #13
 80027a2:	404a      	eors	r2, r1
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	330e      	adds	r3, #14
 80027ac:	7819      	ldrb	r1, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	330e      	adds	r3, #14
 80027bc:	404a      	eors	r2, r1
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	330f      	adds	r3, #15
 80027c6:	7819      	ldrb	r1, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	330f      	adds	r3, #15
 80027d4:	404a      	eors	r2, r1
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
	...

080027e8 <sub_bytes>:

static inline void sub_bytes(uint8_t *s)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e00d      	b.n	8002812 <sub_bytes+0x2a>
		s[i] = sbox[s[i]];
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	4619      	mov	r1, r3
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4413      	add	r3, r2
 8002806:	4a08      	ldr	r2, [pc, #32]	@ (8002828 <sub_bytes+0x40>)
 8002808:	5c52      	ldrb	r2, [r2, r1]
 800280a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3301      	adds	r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b0f      	cmp	r3, #15
 8002816:	d9ee      	bls.n	80027f6 <sub_bytes+0xe>
	}
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	08018b50 	.word	0x08018b50

0800282c <mult_row_column>:

#define triple(a)(_double_byte(a)^(a))

static inline void mult_row_column(uint8_t *out, const uint8_t *in)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fa14 	bl	8002c68 <_double_byte>
 8002840:	4603      	mov	r3, r0
 8002842:	461c      	mov	r4, r3
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fa0c 	bl	8002c68 <_double_byte>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	3301      	adds	r3, #1
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	4053      	eors	r3, r2
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4063      	eors	r3, r4
 8002860:	b2da      	uxtb	r2, r3
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	3302      	adds	r3, #2
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4053      	eors	r3, r2
 800286a:	b2da      	uxtb	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	3303      	adds	r3, #3
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	4053      	eors	r3, r2
 8002874:	b2da      	uxtb	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	701a      	strb	r2, [r3, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	781c      	ldrb	r4, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f9ef 	bl	8002c68 <_double_byte>
 800288a:	4603      	mov	r3, r0
 800288c:	4063      	eors	r3, r4
 800288e:	b2dc      	uxtb	r4, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	3302      	adds	r3, #2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f9e6 	bl	8002c68 <_double_byte>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	3302      	adds	r3, #2
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	4053      	eors	r3, r2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	4063      	eors	r3, r4
 80028ac:	b2d9      	uxtb	r1, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	3303      	adds	r3, #3
 80028b2:	781a      	ldrb	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3301      	adds	r3, #1
 80028b8:	404a      	eors	r2, r1
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4053      	eors	r3, r2
 80028ca:	b2dc      	uxtb	r4, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	3302      	adds	r3, #2
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 f9c8 	bl	8002c68 <_double_byte>
 80028d8:	4603      	mov	r3, r0
 80028da:	4063      	eors	r3, r4
 80028dc:	b2dc      	uxtb	r4, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	3303      	adds	r3, #3
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 f9bf 	bl	8002c68 <_double_byte>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	3303      	adds	r3, #3
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4053      	eors	r3, r2
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3302      	adds	r3, #2
 80028fc:	4062      	eors	r2, r4
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f9ae 	bl	8002c68 <_double_byte>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4053      	eors	r3, r2
 8002916:	b2da      	uxtb	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	3301      	adds	r3, #1
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	4053      	eors	r3, r2
 8002920:	b2da      	uxtb	r2, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	3302      	adds	r3, #2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4053      	eors	r3, r2
 800292a:	b2dc      	uxtb	r4, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	3303      	adds	r3, #3
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f998 	bl	8002c68 <_double_byte>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3303      	adds	r3, #3
 8002940:	4062      	eors	r2, r4
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bd90      	pop	{r4, r7, pc}

0800294e <mix_columns>:

static inline void mix_columns(uint8_t *s)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
	uint8_t t[Nb*Nk];

	mult_row_column(t, s);
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff65 	bl	800282c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	1d1a      	adds	r2, r3, #4
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	3304      	adds	r3, #4
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff5c 	bl	800282c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f103 0208 	add.w	r2, r3, #8
 800297a:	f107 0308 	add.w	r3, r7, #8
 800297e:	3308      	adds	r3, #8
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff ff52 	bl	800282c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f103 020c 	add.w	r2, r3, #12
 800298e:	f107 0308 	add.w	r3, r7, #8
 8002992:	330c      	adds	r3, #12
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff48 	bl	800282c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
 800299c:	f107 0208 	add.w	r2, r7, #8
 80029a0:	2310      	movs	r3, #16
 80029a2:	2110      	movs	r1, #16
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f937 	bl	8002c18 <_copy>
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	723b      	strb	r3, [r7, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	795b      	ldrb	r3, [r3, #5]
 80029c4:	727b      	strb	r3, [r7, #9]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7a9b      	ldrb	r3, [r3, #10]
 80029ca:	72bb      	strb	r3, [r7, #10]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7bdb      	ldrb	r3, [r3, #15]
 80029d0:	72fb      	strb	r3, [r7, #11]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	791b      	ldrb	r3, [r3, #4]
 80029d6:	733b      	strb	r3, [r7, #12]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7a5b      	ldrb	r3, [r3, #9]
 80029dc:	737b      	strb	r3, [r7, #13]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7b9b      	ldrb	r3, [r3, #14]
 80029e2:	73bb      	strb	r3, [r7, #14]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	78db      	ldrb	r3, [r3, #3]
 80029e8:	73fb      	strb	r3, [r7, #15]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	7a1b      	ldrb	r3, [r3, #8]
 80029ee:	743b      	strb	r3, [r7, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	7b5b      	ldrb	r3, [r3, #13]
 80029f4:	747b      	strb	r3, [r7, #17]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	789b      	ldrb	r3, [r3, #2]
 80029fa:	74bb      	strb	r3, [r7, #18]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	79db      	ldrb	r3, [r3, #7]
 8002a00:	74fb      	strb	r3, [r7, #19]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	7b1b      	ldrb	r3, [r3, #12]
 8002a06:	753b      	strb	r3, [r7, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	785b      	ldrb	r3, [r3, #1]
 8002a0c:	757b      	strb	r3, [r7, #21]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	799b      	ldrb	r3, [r3, #6]
 8002a12:	75bb      	strb	r3, [r7, #22]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7adb      	ldrb	r3, [r3, #11]
 8002a18:	75fb      	strb	r3, [r7, #23]
	(void) _copy(s, sizeof(t), t, sizeof(t));
 8002a1a:	f107 0208 	add.w	r2, r7, #8
 8002a1e:	2310      	movs	r3, #16
 8002a20:	2110      	movs	r1, #16
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8f8 	bl	8002c18 <_copy>
}
 8002a28:	bf00      	nop
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	@ 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <tc_aes_encrypt+0x16>
		return TC_CRYPTO_FAIL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e05e      	b.n	8002b04 <tc_aes_encrypt+0xd4>
	} else if (in == (const uint8_t *) 0) {
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <tc_aes_encrypt+0x20>
		return TC_CRYPTO_FAIL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e059      	b.n	8002b04 <tc_aes_encrypt+0xd4>
	} else if (s == (TCAesKeySched_t) 0) {
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <tc_aes_encrypt+0x2a>
		return TC_CRYPTO_FAIL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e054      	b.n	8002b04 <tc_aes_encrypt+0xd4>
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
 8002a5a:	f107 0014 	add.w	r0, r7, #20
 8002a5e:	2310      	movs	r3, #16
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	2110      	movs	r1, #16
 8002a64:	f000 f8d8 	bl	8002c18 <_copy>
	add_round_key(state, s->words);
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fde7 	bl	8002644 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a7a:	e01c      	b.n	8002ab6 <tc_aes_encrypt+0x86>
		sub_bytes(state);
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff feb1 	bl	80027e8 <sub_bytes>
		shift_rows(state);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ff91 	bl	80029b2 <shift_rows>
		mix_columns(state);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff5a 	bl	800294e <mix_columns>
		add_round_key(state, s->words + Nb*(i+1));
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	441a      	add	r2, r3
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fdca 	bl	8002644 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d9df      	bls.n	8002a7c <tc_aes_encrypt+0x4c>
	}

	sub_bytes(state);
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fe91 	bl	80027e8 <sub_bytes>
	shift_rows(state);
 8002ac6:	f107 0314 	add.w	r3, r7, #20
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff71 	bl	80029b2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	441a      	add	r2, r3
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fdaf 	bl	8002644 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
 8002ae6:	f107 0214 	add.w	r2, r7, #20
 8002aea:	2310      	movs	r3, #16
 8002aec:	2110      	movs	r1, #16
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f892 	bl	8002c18 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2210      	movs	r2, #16
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 f8a2 	bl	8002c46 <_set>

	return TC_CRYPTO_SUCCESS;
 8002b02:	2301      	movs	r3, #1
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3728      	adds	r7, #40	@ 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <tc_ctr_mode>:
#include <tinycrypt/ctr_mode.h>
#include <tinycrypt/utils.h>

int tc_ctr_mode(uint8_t *out, unsigned int outlen, const uint8_t *in,
		unsigned int inlen, uint8_t *ctr, const TCAesKeySched_t sched)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08e      	sub	sp, #56	@ 0x38
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
	uint8_t nonce[TC_AES_BLOCK_SIZE];
	unsigned int block_num;
	unsigned int i;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d012      	beq.n	8002b46 <tc_ctr_mode+0x3a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00f      	beq.n	8002b46 <tc_ctr_mode+0x3a>
	    in == (uint8_t *) 0 ||
 8002b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00c      	beq.n	8002b46 <tc_ctr_mode+0x3a>
	    ctr == (uint8_t *) 0 ||
 8002b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <tc_ctr_mode+0x3a>
	    sched == (TCAesKeySched_t) 0 ||
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <tc_ctr_mode+0x3a>
	    inlen == 0 ||
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <tc_ctr_mode+0x3a>
	    outlen == 0 ||
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d001      	beq.n	8002b4a <tc_ctr_mode+0x3e>
	    outlen != inlen) {
		return TC_CRYPTO_FAIL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e062      	b.n	8002c10 <tc_ctr_mode+0x104>
	}

	/* copy the ctr to the nonce */
	(void)_copy(nonce, sizeof(nonce), ctr, sizeof(nonce));
 8002b4a:	f107 0010 	add.w	r0, r7, #16
 8002b4e:	2310      	movs	r3, #16
 8002b50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b52:	2110      	movs	r1, #16
 8002b54:	f000 f860 	bl	8002c18 <_copy>

	/* select the last 4 bytes of the nonce to be incremented */
	block_num = (nonce[12] << 24) | (nonce[13] << 16) |
 8002b58:	7f3b      	ldrb	r3, [r7, #28]
 8002b5a:	061a      	lsls	r2, r3, #24
 8002b5c:	7f7b      	ldrb	r3, [r7, #29]
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	431a      	orrs	r2, r3
		    (nonce[14] << 8) | (nonce[15]);
 8002b62:	7fbb      	ldrb	r3, [r7, #30]
 8002b64:	021b      	lsls	r3, r3, #8
	block_num = (nonce[12] << 24) | (nonce[13] << 16) |
 8002b66:	4313      	orrs	r3, r2
		    (nonce[14] << 8) | (nonce[15]);
 8002b68:	7ffa      	ldrb	r2, [r7, #31]
 8002b6a:	4313      	orrs	r3, r2
	block_num = (nonce[12] << 24) | (nonce[13] << 16) |
 8002b6c:	637b      	str	r3, [r7, #52]	@ 0x34
	for (i = 0; i < inlen; ++i) {
 8002b6e:	2300      	movs	r3, #0
 8002b70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b72:	e038      	b.n	8002be6 <tc_ctr_mode+0xda>
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
 8002b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d11f      	bne.n	8002bbe <tc_ctr_mode+0xb2>
			/* encrypt data using the current nonce */
			if (tc_aes_encrypt(buffer, nonce, sched)) {
 8002b7e:	f107 0110 	add.w	r1, r7, #16
 8002b82:	f107 0320 	add.w	r3, r7, #32
 8002b86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff51 	bl	8002a30 <tc_aes_encrypt>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d012      	beq.n	8002bba <tc_ctr_mode+0xae>
				block_num++;
 8002b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b96:	3301      	adds	r3, #1
 8002b98:	637b      	str	r3, [r7, #52]	@ 0x34
				nonce[12] = (uint8_t)(block_num >> 24);
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9c:	0e1b      	lsrs	r3, r3, #24
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	773b      	strb	r3, [r7, #28]
				nonce[13] = (uint8_t)(block_num >> 16);
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	777b      	strb	r3, [r7, #29]
				nonce[14] = (uint8_t)(block_num >> 8);
 8002baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	77bb      	strb	r3, [r7, #30]
				nonce[15] = (uint8_t)(block_num);
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	77fb      	strb	r3, [r7, #31]
 8002bb8:	e001      	b.n	8002bbe <tc_ctr_mode+0xb2>
			} else {
				return TC_CRYPTO_FAIL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e028      	b.n	8002c10 <tc_ctr_mode+0x104>
			}
		}
		/* update the output */
		*out++ = buffer[i%(TC_AES_BLOCK_SIZE)] ^ *in++;
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	3338      	adds	r3, #56	@ 0x38
 8002bc6:	443b      	add	r3, r7
 8002bc8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	607a      	str	r2, [r7, #4]
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1c58      	adds	r0, r3, #1
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	404a      	eors	r2, r1
 8002bdc:	b2d2      	uxtb	r2, r2
 8002bde:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < inlen; ++i) {
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	3301      	adds	r3, #1
 8002be4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d3c2      	bcc.n	8002b74 <tc_ctr_mode+0x68>
	}

	/* update the counter */
	ctr[12] = nonce[12]; ctr[13] = nonce[13];
 8002bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	7f3a      	ldrb	r2, [r7, #28]
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf8:	330d      	adds	r3, #13
 8002bfa:	7f7a      	ldrb	r2, [r7, #29]
 8002bfc:	701a      	strb	r2, [r3, #0]
	ctr[14] = nonce[14]; ctr[15] = nonce[15];
 8002bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c00:	330e      	adds	r3, #14
 8002c02:	7fba      	ldrb	r2, [r7, #30]
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c08:	330f      	adds	r3, #15
 8002c0a:	7ffa      	ldrb	r2, [r7, #31]
 8002c0c:	701a      	strb	r2, [r3, #0]

	return TC_CRYPTO_SUCCESS;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3738      	adds	r7, #56	@ 0x38
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
	if (from_len <= to_len) {
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d806      	bhi.n	8002c3c <_copy+0x24>
		(void)memcpy(to, from, from_len);
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f013 fa7b 	bl	801612e <memcpy>
		return from_len;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	e000      	b.n	8002c3e <_copy+0x26>
	} else {
		return TC_CRYPTO_FAIL;
 8002c3c:	2300      	movs	r3, #0
	}
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	72fb      	strb	r3, [r7, #11]
	(void)memset(to, val, len);
 8002c54:	7afb      	ldrb	r3, [r7, #11]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f013 f9dc 	bl	8016018 <memset>
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <_double_byte>:

/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	b25a      	sxtb	r2, r3
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	09db      	lsrs	r3, r3, #7
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	4619      	mov	r1, r3
 8002c80:	0049      	lsls	r1, r1, #1
 8002c82:	440b      	add	r3, r1
 8002c84:	4619      	mov	r1, r3
 8002c86:	00c8      	lsls	r0, r1, #3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	440b      	add	r3, r1
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	4053      	eors	r3, r2
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <CryptoEngine_Codec>:

int CryptoEngine_Codec(uint8_t *out, unsigned int outlen,
                            const uint8_t *in, unsigned int inlen,
                            const uint8_t *ctr,
                            const uint8_t *key)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b0b9      	sub	sp, #228	@ 0xe4
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
    if (!out || !in || !ctr || !key || outlen != inlen || inlen == 0)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d011      	beq.n	8002cdc <CryptoEngine_Codec+0x38>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00e      	beq.n	8002cdc <CryptoEngine_Codec+0x38>
 8002cbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <CryptoEngine_Codec+0x38>
 8002cc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <CryptoEngine_Codec+0x38>
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d102      	bne.n	8002cdc <CryptoEngine_Codec+0x38>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <CryptoEngine_Codec+0x3c>
    {
        return TC_CRYPTO_FAIL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e024      	b.n	8002d2a <CryptoEngine_Codec+0x86>
    }

    struct tc_aes_key_sched_struct sched;
    if (tc_aes128_set_encrypt_key(&sched, key) != TC_CRYPTO_SUCCESS)
 8002ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ce4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fc0f 	bl	800250c <tc_aes128_set_encrypt_key>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d001      	beq.n	8002cf8 <CryptoEngine_Codec+0x54>
    {
        return TC_CRYPTO_FAIL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e018      	b.n	8002d2a <CryptoEngine_Codec+0x86>
    }

    uint8_t ctr_copy[TC_AES_BLOCK_SIZE];
    memcpy(ctr_copy, ctr, TC_AES_BLOCK_SIZE);
 8002cf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002cfc:	f107 0414 	add.w	r4, r7, #20
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    int result = tc_ctr_mode(out, outlen, in, inlen, ctr_copy, &sched);
 8002d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f7ff fef5 	bl	8002b0c <tc_ctr_mode>
 8002d22:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    return result;
 8002d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	37dc      	adds	r7, #220	@ 0xdc
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd90      	pop	{r4, r7, pc}
	...

08002d34 <DeviceInfo_GetUniqueID>:
    }
	return DEVICE_INFO_OK;
}

InfoStatus_t DeviceInfo_GetUniqueID(uint8_t* uID)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
    if (uID == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d104      	bne.n	8002d4c <DeviceInfo_GetUniqueID+0x18>
    {
    	log_error("Received NULL Input for UID storage.");
 8002d42:	482b      	ldr	r0, [pc, #172]	@ (8002df0 <DeviceInfo_GetUniqueID+0xbc>)
 8002d44:	f000 ffba 	bl	8003cbc <log_error>
        return DEVICE_INFO_NULL_INPUT;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e04d      	b.n	8002de8 <DeviceInfo_GetUniqueID+0xb4>
    }
    uint32_t uid0 = HAL_GetUIDw0(); // bits 0–31
 8002d4c:	f002 fcc2 	bl	80056d4 <HAL_GetUIDw0>
 8002d50:	6178      	str	r0, [r7, #20]
    uint32_t uid1 = HAL_GetUIDw1(); // bits 32–63
 8002d52:	f002 fccb 	bl	80056ec <HAL_GetUIDw1>
 8002d56:	6138      	str	r0, [r7, #16]
    uint32_t uid2 = HAL_GetUIDw2(); // bits 64–95
 8002d58:	f002 fcd4 	bl	8005704 <HAL_GetUIDw2>
 8002d5c:	60f8      	str	r0, [r7, #12]
    	log_error("Failed to retrieve Unique ID.");
    	return DEVICE_INFO_UID_FAIL;
    }

    // Store in Little Endian order (byte-wise)
    uID[0]  = (uid0 >>  0) & 0xFF;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	701a      	strb	r2, [r3, #0]
    uID[1]  = (uid0 >>  8) & 0xFF;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	0a1a      	lsrs	r2, r3, #8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]
    uID[2]  = (uid0 >> 16) & 0xFF;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	0c1a      	lsrs	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3302      	adds	r3, #2
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]
    uID[3]  = (uid0 >> 24) & 0xFF;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	0e1a      	lsrs	r2, r3, #24
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3303      	adds	r3, #3
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]

    uID[4]  = (uid1 >>  0) & 0xFF;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]
    uID[5]  = (uid1 >>  8) & 0xFF;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	0a1a      	lsrs	r2, r3, #8
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3305      	adds	r3, #5
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]
    uID[6]  = (uid1 >> 16) & 0xFF;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	0c1a      	lsrs	r2, r3, #16
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3306      	adds	r3, #6
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]
    uID[7]  = (uid1 >> 24) & 0xFF;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	0e1a      	lsrs	r2, r3, #24
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3307      	adds	r3, #7
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]

    uID[8]  = (uid2 >>  0) & 0xFF;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3308      	adds	r3, #8
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]
    uID[9]  = (uid2 >>  8) & 0xFF;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	0a1a      	lsrs	r2, r3, #8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3309      	adds	r3, #9
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]
    uID[10] = (uid2 >> 16) & 0xFF;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	0c1a      	lsrs	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	330a      	adds	r3, #10
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]
    uID[11] = (uid2 >> 24) & 0xFF;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	0e1a      	lsrs	r2, r3, #24
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	330b      	adds	r3, #11
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	701a      	strb	r2, [r3, #0]

    return DEVICE_INFO_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	080180dc 	.word	0x080180dc

08002df4 <FlashManager_ReadIdentifier>:
	log_info("Flash Memory Device ID : %0xX", deviceID);
	return FLASH_MANAGER_OK;
}

FlashManagerStatus_t FlashManager_ReadIdentifier(uint16_t sectorNumber, uint8_t *entryHeader)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	80fb      	strh	r3, [r7, #6]
	// Calculating Page Number from Sector Number
	uint32_t page_number = sectorNumber * (SECTOR_SIZE/PAGE_SIZE);
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	60fb      	str	r3, [r7, #12]
	// Read the first 5 bytes from the sector
	W25Q_Read(page_number, 0, IDENTIFIER_SIZE, entryHeader);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2205      	movs	r2, #5
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7fe ffe1 	bl	8001dd4 <W25Q_Read>
	log_info("Read Sector Identifier from Flash.");
 8002e12:	4804      	ldr	r0, [pc, #16]	@ (8002e24 <FlashManager_ReadIdentifier+0x30>)
 8002e14:	f000 ff1e 	bl	8003c54 <log_info>
	return FLASH_MANAGER_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	080181d8 	.word	0x080181d8

08002e28 <FlashManager_ReadEntry>:

FlashManagerStatus_t FlashManager_ReadEntry(uint16_t sectorNumber, uint8_t *entry)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	80fb      	strh	r3, [r7, #6]
	// Calculating Page Number and Validity Flag address.
	uint32_t page_number = sectorNumber * (SECTOR_SIZE/PAGE_SIZE);
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	617b      	str	r3, [r7, #20]
	uint32_t byte_addr = page_number * PAGE_SIZE;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	613b      	str	r3, [r7, #16]
	// Reading Validity Flag at the start of sector.
	uint8_t entryFlag = W25Q_Read_Byte(byte_addr);
 8002e40:	6938      	ldr	r0, [r7, #16]
 8002e42:	f7ff fafd 	bl	8002440 <W25Q_Read_Byte>
 8002e46:	4603      	mov	r3, r0
 8002e48:	73fb      	strb	r3, [r7, #15]
	// Checking if Entry has a Valid Flag or not.
	if (entryFlag != VALID_FLAG)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2baa      	cmp	r3, #170	@ 0xaa
 8002e4e:	d004      	beq.n	8002e5a <FlashManager_ReadEntry+0x32>
	{
		log_error("Entry has an Invalid/Unidentified Flag.");
 8002e50:	4809      	ldr	r0, [pc, #36]	@ (8002e78 <FlashManager_ReadEntry+0x50>)
 8002e52:	f000 ff33 	bl	8003cbc <log_error>
		return FLASH_MANAGER_INVALID_FLAG;
 8002e56:	2304      	movs	r3, #4
 8002e58:	e009      	b.n	8002e6e <FlashManager_ReadEntry+0x46>
	}
	else
	{
		// Reading from the sector if validity flag is 0xAA
		W25Q_Read(page_number, 1, ENTRY_SIZE, entry);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2258      	movs	r2, #88	@ 0x58
 8002e5e:	2101      	movs	r1, #1
 8002e60:	6978      	ldr	r0, [r7, #20]
 8002e62:	f7fe ffb7 	bl	8001dd4 <W25Q_Read>
		log_info("Read valid entry from Flash.");
 8002e66:	4805      	ldr	r0, [pc, #20]	@ (8002e7c <FlashManager_ReadEntry+0x54>)
 8002e68:	f000 fef4 	bl	8003c54 <log_info>
	}
	return FLASH_MANAGER_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	080181fc 	.word	0x080181fc
 8002e7c:	08018224 	.word	0x08018224

08002e80 <FlashManager_WriteEntry>:

FlashManagerStatus_t FlashManager_WriteEntry(uint16_t sectorNumber, uint8_t *entry)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	80fb      	strh	r3, [r7, #6]
	// Calculating Page Number and Validity Flag address
	uint32_t page_number = sectorNumber * (SECTOR_SIZE/PAGE_SIZE);
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	617b      	str	r3, [r7, #20]
	uint32_t byte_addr = page_number * PAGE_SIZE;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	613b      	str	r3, [r7, #16]
	// Reading Validity Flag at the start of sector
	uint8_t entryFlag = W25Q_Read_Byte(byte_addr);
 8002e98:	6938      	ldr	r0, [r7, #16]
 8002e9a:	f7ff fad1 	bl	8002440 <W25Q_Read_Byte>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	73fb      	strb	r3, [r7, #15]
	// Checking if Entry has a Valid Flag or not.
	if (entryFlag == VALID_FLAG)
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	2baa      	cmp	r3, #170	@ 0xaa
 8002ea6:	d107      	bne.n	8002eb8 <FlashManager_WriteEntry+0x38>
	{
		log_error("Entry has a Valid Flag.");
 8002ea8:	480c      	ldr	r0, [pc, #48]	@ (8002edc <FlashManager_WriteEntry+0x5c>)
 8002eaa:	f000 ff07 	bl	8003cbc <log_error>
		log_warn("Cannot write to this sector.");
 8002eae:	480c      	ldr	r0, [pc, #48]	@ (8002ee0 <FlashManager_WriteEntry+0x60>)
 8002eb0:	f000 feea 	bl	8003c88 <log_warn>
		return FLASH_MANAGER_WRITE_FAIL;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e00d      	b.n	8002ed4 <FlashManager_WriteEntry+0x54>
	}
	else
	{
		// Writing to the sector if Validity Flag is not 0xAA
		W25Q_Write_Byte(byte_addr, VALID_FLAG);
 8002eb8:	21aa      	movs	r1, #170	@ 0xaa
 8002eba:	6938      	ldr	r0, [r7, #16]
 8002ebc:	f7ff fae6 	bl	800248c <W25Q_Write_Byte>
		W25Q_Write(page_number, 1, ENTRY_SIZE, entry);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2258      	movs	r2, #88	@ 0x58
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f7ff f999 	bl	80021fe <W25Q_Write>
		log_info("Wrote a valid entry to Flash.");
 8002ecc:	4805      	ldr	r0, [pc, #20]	@ (8002ee4 <FlashManager_WriteEntry+0x64>)
 8002ece:	f000 fec1 	bl	8003c54 <log_info>
	}
	return FLASH_MANAGER_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	08018244 	.word	0x08018244
 8002ee0:	0801825c 	.word	0x0801825c
 8002ee4:	0801827c 	.word	0x0801827c

08002ee8 <FlashManager_UpdateEntry>:

FlashManagerStatus_t FlashManager_UpdateEntry(uint16_t sectorNumber, uint8_t *entry)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	6039      	str	r1, [r7, #0]
 8002ef2:	80fb      	strh	r3, [r7, #6]
	// Calculating Page Number and Validity Flag address
	uint32_t page_number = sectorNumber * (SECTOR_SIZE/PAGE_SIZE);
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	617b      	str	r3, [r7, #20]
	uint32_t byte_addr = page_number * PAGE_SIZE;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	613b      	str	r3, [r7, #16]
	// Reading Validity Flag at the start of sector
	uint8_t entryFlag = W25Q_Read_Byte(byte_addr);
 8002f00:	6938      	ldr	r0, [r7, #16]
 8002f02:	f7ff fa9d 	bl	8002440 <W25Q_Read_Byte>
 8002f06:	4603      	mov	r3, r0
 8002f08:	73fb      	strb	r3, [r7, #15]
	// Checking if Entry has an Invalid Flag or not.
	if (entryFlag != VALID_FLAG)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2baa      	cmp	r3, #170	@ 0xaa
 8002f0e:	d004      	beq.n	8002f1a <FlashManager_UpdateEntry+0x32>
	{
		log_error("Entry has an Invalid/Unidentified Flag.");
 8002f10:	4810      	ldr	r0, [pc, #64]	@ (8002f54 <FlashManager_UpdateEntry+0x6c>)
 8002f12:	f000 fed3 	bl	8003cbc <log_error>
		return FLASH_MANAGER_INVALID_FLAG;
 8002f16:	2304      	movs	r3, #4
 8002f18:	e017      	b.n	8002f4a <FlashManager_UpdateEntry+0x62>
	}
	else
	{
		// Updating the sector if Validity Flag is 0xAA
		log_info("Erasing the current entry in Flash.");
 8002f1a:	480f      	ldr	r0, [pc, #60]	@ (8002f58 <FlashManager_UpdateEntry+0x70>)
 8002f1c:	f000 fe9a 	bl	8003c54 <log_info>
		W25Q_Erase_Sector(sectorNumber);
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff f807 	bl	8001f36 <W25Q_Erase_Sector>
		log_info("Updating the current entry in Flash.");
 8002f28:	480c      	ldr	r0, [pc, #48]	@ (8002f5c <FlashManager_UpdateEntry+0x74>)
 8002f2a:	f000 fe93 	bl	8003c54 <log_info>
		W25Q_Write_Byte(byte_addr, VALID_FLAG);
 8002f2e:	21aa      	movs	r1, #170	@ 0xaa
 8002f30:	6938      	ldr	r0, [r7, #16]
 8002f32:	f7ff faab 	bl	800248c <W25Q_Write_Byte>
		W25Q_Write(page_number, 1, ENTRY_SIZE, entry);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2258      	movs	r2, #88	@ 0x58
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	6978      	ldr	r0, [r7, #20]
 8002f3e:	f7ff f95e 	bl	80021fe <W25Q_Write>
		log_info("Completed updating the Key Entry in Flash.");
 8002f42:	4807      	ldr	r0, [pc, #28]	@ (8002f60 <FlashManager_UpdateEntry+0x78>)
 8002f44:	f000 fe86 	bl	8003c54 <log_info>
	}
	return FLASH_MANAGER_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	080181fc 	.word	0x080181fc
 8002f58:	0801829c 	.word	0x0801829c
 8002f5c:	080182c0 	.word	0x080182c0
 8002f60:	080182e8 	.word	0x080182e8

08002f64 <FlashManager_EraseEntry>:
	}
	return FLASH_MANAGER_OK;
}*/

FlashManagerStatus_t FlashManager_EraseEntry(uint16_t sectorNumber)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	80fb      	strh	r3, [r7, #6]
	// Calculating Page Number and Validity Flag address
	uint32_t page_number = sectorNumber * (SECTOR_SIZE/PAGE_SIZE);
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	617b      	str	r3, [r7, #20]
	uint32_t byte_addr = page_number * PAGE_SIZE;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	613b      	str	r3, [r7, #16]
	// Reading Validity Flag at the start of sector
	uint8_t entryFlag = W25Q_Read_Byte(byte_addr);
 8002f7a:	6938      	ldr	r0, [r7, #16]
 8002f7c:	f7ff fa60 	bl	8002440 <W25Q_Read_Byte>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]
	// Checking if Entry has a Valid Flag or not.
	if (entryFlag == VALID_FLAG)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2baa      	cmp	r3, #170	@ 0xaa
 8002f88:	d10b      	bne.n	8002fa2 <FlashManager_EraseEntry+0x3e>
	{
		log_info("The current entry has a Valid Flag.");
 8002f8a:	480a      	ldr	r0, [pc, #40]	@ (8002fb4 <FlashManager_EraseEntry+0x50>)
 8002f8c:	f000 fe62 	bl	8003c54 <log_info>
		W25Q_Erase_Sector(sectorNumber);
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe ffcf 	bl	8001f36 <W25Q_Erase_Sector>
		log_info("Completed erasing the Key Entry in Flash.");
 8002f98:	4807      	ldr	r0, [pc, #28]	@ (8002fb8 <FlashManager_EraseEntry+0x54>)
 8002f9a:	f000 fe5b 	bl	8003c54 <log_info>
	else
	{
		log_info("The current entry has an Invalid Flag.");
		return FLASH_MANAGER_ERASE_FAIL;
	}
	return FLASH_MANAGER_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e003      	b.n	8002faa <FlashManager_EraseEntry+0x46>
		log_info("The current entry has an Invalid Flag.");
 8002fa2:	4806      	ldr	r0, [pc, #24]	@ (8002fbc <FlashManager_EraseEntry+0x58>)
 8002fa4:	f000 fe56 	bl	8003c54 <log_info>
		return FLASH_MANAGER_ERASE_FAIL;
 8002fa8:	2303      	movs	r3, #3
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	08018314 	.word	0x08018314
 8002fb8:	08018338 	.word	0x08018338
 8002fbc:	08018364 	.word	0x08018364

08002fc0 <GenerateRandomBytes>:
extern HASH_HandleTypeDef hhash;

#define HMAC_KEY_SIZE	16

static GeneratorStatus_t GenerateRandomBytes(uint8_t *output, uint32_t length)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
    if (output == NULL || length == 0 || (length % 4) != 0)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <GenerateRandomBytes+0x20>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d004      	beq.n	8002fe0 <GenerateRandomBytes+0x20>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <GenerateRandomBytes+0x24>
    {
        return GENERATOR_STATUS_INPUT_NULL;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e054      	b.n	800308e <GenerateRandomBytes+0xce>
    }

    HAL_RNG_DeInit(&hrng);
 8002fe4:	482c      	ldr	r0, [pc, #176]	@ (8003098 <GenerateRandomBytes+0xd8>)
 8002fe6:	f00b ffff 	bl	800efe8 <HAL_RNG_DeInit>
    log_info("De-Initialized RNG Peripheral.");
 8002fea:	482c      	ldr	r0, [pc, #176]	@ (800309c <GenerateRandomBytes+0xdc>)
 8002fec:	f000 fe32 	bl	8003c54 <log_info>
    hrng.Instance = RNG;
 8002ff0:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <GenerateRandomBytes+0xd8>)
 8002ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80030a0 <GenerateRandomBytes+0xe0>)
 8002ff4:	601a      	str	r2, [r3, #0]
    hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002ff6:	4b28      	ldr	r3, [pc, #160]	@ (8003098 <GenerateRandomBytes+0xd8>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	605a      	str	r2, [r3, #4]

    if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002ffc:	4826      	ldr	r0, [pc, #152]	@ (8003098 <GenerateRandomBytes+0xd8>)
 8002ffe:	f00b ff55 	bl	800eeac <HAL_RNG_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <GenerateRandomBytes+0x52>
    {
    	log_error("Failed to Re-Initialize the RNG Peripheral.");
 8003008:	4826      	ldr	r0, [pc, #152]	@ (80030a4 <GenerateRandomBytes+0xe4>)
 800300a:	f000 fe57 	bl	8003cbc <log_error>
    	return GENERATOR_STATUS_RNG_INIT_FAIL;
 800300e:	2302      	movs	r3, #2
 8003010:	e03d      	b.n	800308e <GenerateRandomBytes+0xce>
    }

    log_info("Re-Initialized RNG Peripheral.");
 8003012:	4825      	ldr	r0, [pc, #148]	@ (80030a8 <GenerateRandomBytes+0xe8>)
 8003014:	f000 fe1e 	bl	8003c54 <log_info>

    for (uint32_t i = 0; i < length; i += 4)
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	e02e      	b.n	800307c <GenerateRandomBytes+0xbc>
    {
        uint32_t rnd;
        if (HAL_RNG_GenerateRandomNumber(&hrng, &rnd) != HAL_OK)
 800301e:	f107 0308 	add.w	r3, r7, #8
 8003022:	4619      	mov	r1, r3
 8003024:	481c      	ldr	r0, [pc, #112]	@ (8003098 <GenerateRandomBytes+0xd8>)
 8003026:	f00c f843 	bl	800f0b0 <HAL_RNG_GenerateRandomNumber>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <GenerateRandomBytes+0x7a>
        {
        	log_error("RNG Operation failed.");
 8003030:	481e      	ldr	r0, [pc, #120]	@ (80030ac <GenerateRandomBytes+0xec>)
 8003032:	f000 fe43 	bl	8003cbc <log_error>
            return GENERATOR_STATUS_RNG_OP_FAIL;
 8003036:	2304      	movs	r3, #4
 8003038:	e029      	b.n	800308e <GenerateRandomBytes+0xce>
        }

        output[i + 0] = (uint8_t)(rnd >> 24);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	0e19      	lsrs	r1, r3, #24
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	b2ca      	uxtb	r2, r1
 8003046:	701a      	strb	r2, [r3, #0]
        output[i + 1] = (uint8_t)(rnd >> 16);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	0c19      	lsrs	r1, r3, #16
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3301      	adds	r3, #1
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	b2ca      	uxtb	r2, r1
 8003056:	701a      	strb	r2, [r3, #0]
        output[i + 2] = (uint8_t)(rnd >> 8);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	0a19      	lsrs	r1, r3, #8
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3302      	adds	r3, #2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	b2ca      	uxtb	r2, r1
 8003066:	701a      	strb	r2, [r3, #0]
        output[i + 3] = (uint8_t)(rnd);
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	3303      	adds	r3, #3
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	b2ca      	uxtb	r2, r1
 8003074:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i += 4)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3304      	adds	r3, #4
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d3cc      	bcc.n	800301e <GenerateRandomBytes+0x5e>
    }

    log_info("RNG Generated for %d bytes.", length);
 8003084:	6839      	ldr	r1, [r7, #0]
 8003086:	480a      	ldr	r0, [pc, #40]	@ (80030b0 <GenerateRandomBytes+0xf0>)
 8003088:	f000 fde4 	bl	8003c54 <log_info>
    return GENERATOR_STATUS_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20002450 	.word	0x20002450
 800309c:	0801838c 	.word	0x0801838c
 80030a0:	420c0800 	.word	0x420c0800
 80030a4:	080183ac 	.word	0x080183ac
 80030a8:	080183d8 	.word	0x080183d8
 80030ac:	080183f8 	.word	0x080183f8
 80030b0:	08018410 	.word	0x08018410

080030b4 <GenerateHMAC>:

GeneratorStatus_t GenerateHMAC(uint8_t* input, uint8_t size, uint8_t* key, uint8_t* output)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	460b      	mov	r3, r1
 80030c2:	72fb      	strb	r3, [r7, #11]
	if (input == NULL || size == 0 || key == 0)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <GenerateHMAC+0x22>
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <GenerateHMAC+0x22>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <GenerateHMAC+0x26>
	{
		return GENERATOR_STATUS_INPUT_NULL;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e037      	b.n	800314a <GenerateHMAC+0x96>
	}

	HAL_HASH_DeInit(&hhash);
 80030da:	481e      	ldr	r0, [pc, #120]	@ (8003154 <GenerateHMAC+0xa0>)
 80030dc:	f002 ff66 	bl	8005fac <HAL_HASH_DeInit>
	log_info("De-Initialized HASH Peripheral.");
 80030e0:	481d      	ldr	r0, [pc, #116]	@ (8003158 <GenerateHMAC+0xa4>)
 80030e2:	f000 fdb7 	bl	8003c54 <log_info>

	hhash.Instance = HASH;
 80030e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003154 <GenerateHMAC+0xa0>)
 80030e8:	4a1c      	ldr	r2, [pc, #112]	@ (800315c <GenerateHMAC+0xa8>)
 80030ea:	601a      	str	r2, [r3, #0]
	hhash.Init.DataType = HASH_BYTE_SWAP;
 80030ec:	4b19      	ldr	r3, [pc, #100]	@ (8003154 <GenerateHMAC+0xa0>)
 80030ee:	2220      	movs	r2, #32
 80030f0:	605a      	str	r2, [r3, #4]
	hhash.Init.KeySize = HMAC_KEY_SIZE;
 80030f2:	4b18      	ldr	r3, [pc, #96]	@ (8003154 <GenerateHMAC+0xa0>)
 80030f4:	2210      	movs	r2, #16
 80030f6:	609a      	str	r2, [r3, #8]
	hhash.Init.pKey = (uint8_t *)key;
 80030f8:	4a16      	ldr	r2, [pc, #88]	@ (8003154 <GenerateHMAC+0xa0>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	60d3      	str	r3, [r2, #12]
	hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 80030fe:	4b15      	ldr	r3, [pc, #84]	@ (8003154 <GenerateHMAC+0xa0>)
 8003100:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8003104:	611a      	str	r2, [r3, #16]

	if (HAL_HASH_Init(&hhash) != HAL_OK)
 8003106:	4813      	ldr	r0, [pc, #76]	@ (8003154 <GenerateHMAC+0xa0>)
 8003108:	f002 ff18 	bl	8005f3c <HAL_HASH_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <GenerateHMAC+0x68>
	{
		log_error("Failed to Re-Initialize the Hash Peripheral.");
 8003112:	4813      	ldr	r0, [pc, #76]	@ (8003160 <GenerateHMAC+0xac>)
 8003114:	f000 fdd2 	bl	8003cbc <log_error>
		return GENERATOR_STATUS_HASH_INIT_FAIL;
 8003118:	2303      	movs	r3, #3
 800311a:	e016      	b.n	800314a <GenerateHMAC+0x96>
	}

	log_info("Re-Initialized HASH Peripheral.");
 800311c:	4811      	ldr	r0, [pc, #68]	@ (8003164 <GenerateHMAC+0xb0>)
 800311e:	f000 fd99 	bl	8003c54 <log_info>

	if (HAL_HASH_HMAC_Start(&hhash, (uint8_t *)input, size, (uint8_t *)output, 0xFF) != HAL_OK)
 8003122:	7afa      	ldrb	r2, [r7, #11]
 8003124:	23ff      	movs	r3, #255	@ 0xff
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68f9      	ldr	r1, [r7, #12]
 800312c:	4809      	ldr	r0, [pc, #36]	@ (8003154 <GenerateHMAC+0xa0>)
 800312e:	f002 ffcd 	bl	80060cc <HAL_HASH_HMAC_Start>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d004      	beq.n	8003142 <GenerateHMAC+0x8e>
	{
		log_error("HMAC Operation failed.");
 8003138:	480b      	ldr	r0, [pc, #44]	@ (8003168 <GenerateHMAC+0xb4>)
 800313a:	f000 fdbf 	bl	8003cbc <log_error>
		return GENERATOR_STATUS_HASH_OP_FAIL;
 800313e:	2305      	movs	r3, #5
 8003140:	e003      	b.n	800314a <GenerateHMAC+0x96>
	}

	log_info("HMAC Generated for Key Blob.");
 8003142:	480a      	ldr	r0, [pc, #40]	@ (800316c <GenerateHMAC+0xb8>)
 8003144:	f000 fd86 	bl	8003c54 <log_info>
	return GENERATOR_STATUS_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	200023bc 	.word	0x200023bc
 8003158:	0801842c 	.word	0x0801842c
 800315c:	420c0400 	.word	0x420c0400
 8003160:	0801844c 	.word	0x0801844c
 8003164:	0801847c 	.word	0x0801847c
 8003168:	0801849c 	.word	0x0801849c
 800316c:	080184b4 	.word	0x080184b4

08003170 <GenerateKEY>:


GeneratorStatus_t GenerateKEY(uint8_t *key_out)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
    return GenerateRandomBytes(key_out, 16);
 8003178:	2110      	movs	r1, #16
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ff20 	bl	8002fc0 <GenerateRandomBytes>
 8003180:	4603      	mov	r3, r0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <GenerateIV>:

GeneratorStatus_t GenerateIV(uint8_t *iv_out)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
    return GenerateRandomBytes(iv_out, 16);
 8003192:	2110      	movs	r1, #16
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff13 	bl	8002fc0 <GenerateRandomBytes>
 800319a:	4603      	mov	r3, r0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <GenerateKEYID>:

GeneratorStatus_t GenerateKEYID(uint8_t *id_out)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
    return GenerateRandomBytes(id_out, 4);
 80031ac:	2104      	movs	r1, #4
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff ff06 	bl	8002fc0 <GenerateRandomBytes>
 80031b4:	4603      	mov	r3, r0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HKDF_DeriveKey>:
#define DERIVED_KEY_SIZE 	16  // 128-bit AES key
#define UID_SIZE         	12  // 96-bit STM32 Unique ID
#define IKM_SIZE         	20  // Random entropy size

KeyDerivatorStatus_t HKDF_DeriveKey(const uint8_t *ikm, const uint8_t *uid, uint8_t *out_key)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b0a0      	sub	sp, #128	@ 0x80
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
	//Checking if Input arguments are NULL
    if (!ikm || !uid || !out_key)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HKDF_DeriveKey+0x1e>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HKDF_DeriveKey+0x1e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d104      	bne.n	80031e8 <HKDF_DeriveKey+0x28>
    {
        log_error("Key derivation: NULL input");
 80031de:	4824      	ldr	r0, [pc, #144]	@ (8003270 <HKDF_DeriveKey+0xb0>)
 80031e0:	f000 fd6c 	bl	8003cbc <log_error>
        return KEY_DERIVATOR_NULL_INPUT;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e03e      	b.n	8003266 <HKDF_DeriveKey+0xa6>
    }

    uint8_t prk[HASH_OUTPUT_SIZE];
    uint8_t salt[HASH_OUTPUT_SIZE] = {0};  // optional, use zero as per HKDF standard
 80031e8:	2300      	movs	r3, #0
 80031ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80031ec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
 80031fc:	615a      	str	r2, [r3, #20]
 80031fe:	619a      	str	r2, [r3, #24]

    // HKDF Extract: PRK = HMAC(salt, IKM)
    if (GenerateHMAC((uint8_t *)ikm, IKM_SIZE, salt, prk) != 0)
 8003200:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003204:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003208:	2114      	movs	r1, #20
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff ff52 	bl	80030b4 <GenerateHMAC>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <HKDF_DeriveKey+0x60>
    {
        log_error("HKDF Extract failed.");
 8003216:	4817      	ldr	r0, [pc, #92]	@ (8003274 <HKDF_DeriveKey+0xb4>)
 8003218:	f000 fd50 	bl	8003cbc <log_error>
        return KEY_DERIVATOR_HMAC_FAIL;
 800321c:	2302      	movs	r3, #2
 800321e:	e022      	b.n	8003266 <HKDF_DeriveKey+0xa6>
    }

    // HKDF Expand: OKM = HMAC(PRK, info | 0x01)
    uint8_t info[UID_SIZE + 1];
    memcpy(info, uid, UID_SIZE);
 8003220:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003224:	220c      	movs	r2, #12
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	4618      	mov	r0, r3
 800322a:	f012 ff80 	bl	801612e <memcpy>
    info[UID_SIZE] = 0x01;  // Counter = 1
 800322e:	2301      	movs	r3, #1
 8003230:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

    uint8_t okm[HASH_OUTPUT_SIZE];  // full 32-byte output
    if (GenerateHMAC(info, sizeof(info), prk, okm) != 0)
 8003234:	f107 0310 	add.w	r3, r7, #16
 8003238:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800323c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8003240:	210d      	movs	r1, #13
 8003242:	f7ff ff37 	bl	80030b4 <GenerateHMAC>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d004      	beq.n	8003256 <HKDF_DeriveKey+0x96>
    {
        log_error("HKDF Expand failed.");
 800324c:	480a      	ldr	r0, [pc, #40]	@ (8003278 <HKDF_DeriveKey+0xb8>)
 800324e:	f000 fd35 	bl	8003cbc <log_error>
        return KEY_DERIVATOR_HMAC_FAIL;
 8003252:	2302      	movs	r3, #2
 8003254:	e007      	b.n	8003266 <HKDF_DeriveKey+0xa6>
    }

    // Copy first 16 bytes for AES-128
    memcpy(out_key, okm, DERIVED_KEY_SIZE);
 8003256:	f107 0310 	add.w	r3, r7, #16
 800325a:	2210      	movs	r2, #16
 800325c:	4619      	mov	r1, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f012 ff65 	bl	801612e <memcpy>
    return KEY_DERIVATOR_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3780      	adds	r7, #128	@ 0x80
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	080184d4 	.word	0x080184d4
 8003274:	080184f0 	.word	0x080184f0
 8003278:	08018508 	.word	0x08018508

0800327c <KeyManager_FindKey>:
static uint32_t key_lookup_table[MAX_SECTORS];
static uint16_t total_keys = 0;

// Returns sector number if key is found, else -1
static int16_t KeyManager_FindKey(uint32_t key_id)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
    for (uint16_t sector = 0; sector < MAX_SECTORS; sector++)
 8003284:	2300      	movs	r3, #0
 8003286:	81fb      	strh	r3, [r7, #14]
 8003288:	e00c      	b.n	80032a4 <KeyManager_FindKey+0x28>
    {
        if (key_lookup_table[sector] == key_id)
 800328a:	89fb      	ldrh	r3, [r7, #14]
 800328c:	4a0b      	ldr	r2, [pc, #44]	@ (80032bc <KeyManager_FindKey+0x40>)
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d102      	bne.n	800329e <KeyManager_FindKey+0x22>
		{
        	return sector;
 8003298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800329c:	e008      	b.n	80032b0 <KeyManager_FindKey+0x34>
    for (uint16_t sector = 0; sector < MAX_SECTORS; sector++)
 800329e:	89fb      	ldrh	r3, [r7, #14]
 80032a0:	3301      	adds	r3, #1
 80032a2:	81fb      	strh	r3, [r7, #14]
 80032a4:	89fb      	ldrh	r3, [r7, #14]
 80032a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032aa:	d3ee      	bcc.n	800328a <KeyManager_FindKey+0xe>
		}
    }
    return -1;
 80032ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	2000025c 	.word	0x2000025c

080032c0 <KeyManager_FindFreeSector>:

// Returns the first empty sector
static int16_t KeyManager_FindFreeSector(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
    for (uint16_t sector = 0; sector < MAX_SECTORS; sector++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	80fb      	strh	r3, [r7, #6]
 80032ca:	e00c      	b.n	80032e6 <KeyManager_FindFreeSector+0x26>
    {
        if (key_lookup_table[sector] == 0xFFFFFFFF)
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003300 <KeyManager_FindFreeSector+0x40>)
 80032d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d102      	bne.n	80032e0 <KeyManager_FindFreeSector+0x20>
        {
            return sector;
 80032da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032de:	e008      	b.n	80032f2 <KeyManager_FindFreeSector+0x32>
    for (uint16_t sector = 0; sector < MAX_SECTORS; sector++)
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	3301      	adds	r3, #1
 80032e4:	80fb      	strh	r3, [r7, #6]
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032ec:	d3ee      	bcc.n	80032cc <KeyManager_FindFreeSector+0xc>
        }
    }
    return -1;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	2000025c 	.word	0x2000025c

08003304 <KeyManager_AddKey>:
    log_info("KeyManager Initialization completed with %u keys loaded.", total_keys);
    return KM_STATUS_OK;
}

KeyManagerStatus_t KeyManager_AddKey(uint32_t keyID, uint8_t* key, uint8_t keySize, uint8_t keyOrigin, uint8_t keyUsage)
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	b09f      	sub	sp, #124	@ 0x7c
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	4611      	mov	r1, r2
 8003310:	461a      	mov	r2, r3
 8003312:	460b      	mov	r3, r1
 8003314:	71fb      	strb	r3, [r7, #7]
 8003316:	4613      	mov	r3, r2
 8003318:	71bb      	strb	r3, [r7, #6]
	// Check for Free Sector in the Look-Up table
	uint16_t sectorNumber = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	sectorNumber = KeyManager_FindFreeSector();
 8003320:	f7ff ffce 	bl	80032c0 <KeyManager_FindFreeSector>
 8003324:	4603      	mov	r3, r0
 8003326:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		log_error("No free sectors are available. Key Manager full.");
		return KM_STATUS_STORAGE_FULL;
	}

	// Creating an instance of the KeyEntry_t structure
	KeyEntry_t *keyEntry = (KeyEntry_t *)malloc(sizeof(KeyEntry_t));
 800332a:	2058      	movs	r0, #88	@ 0x58
 800332c:	f012 fc02 	bl	8015b34 <malloc>
 8003330:	4603      	mov	r3, r0
 8003332:	66bb      	str	r3, [r7, #104]	@ 0x68
	// Checking if Heap allocated space for the struct instance
	if(keyEntry == NULL)
 8003334:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <KeyManager_AddKey+0x40>
	{
		log_error("Failed to allocate memory for Key Entry.");
 800333a:	487f      	ldr	r0, [pc, #508]	@ (8003538 <KeyManager_AddKey+0x234>)
 800333c:	f000 fcbe 	bl	8003cbc <log_error>
		return KM_STATUS_NO_HEAP;
 8003340:	2303      	movs	r3, #3
 8003342:	e0f4      	b.n	800352e <KeyManager_AddKey+0x22a>
	}
	// Set struct memory to zero
	memset(keyEntry, 0, sizeof(KeyEntry_t));
 8003344:	2258      	movs	r2, #88	@ 0x58
 8003346:	2100      	movs	r1, #0
 8003348:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800334a:	f012 fe65 	bl	8016018 <memset>

	// Declare static arrays to hold Plaintext, Ciphertext, IV, HMAC and Buffer Array to flush to flash
	static uint8_t keyEntryArray[sizeof(KeyEntry_t)] = {0};
	static uint8_t plaintext[sizeof(KeyEntry_t)-53] = {0};
	static uint8_t ciphertext[sizeof(KeyEntry_t)-53] = {0};
	uint8_t iv[KEY_IV_SIZE] = {0}, hmac[KEY_HMAC_SIZE] = {0}, uid[12] = {0}, masterKey[16] = {0};
 800334e:	2300      	movs	r3, #0
 8003350:	653b      	str	r3, [r7, #80]	@ 0x50
 8003352:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	2300      	movs	r3, #0
 8003360:	633b      	str	r3, [r7, #48]	@ 0x30
 8003362:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	60da      	str	r2, [r3, #12]
 8003370:	611a      	str	r2, [r3, #16]
 8003372:	615a      	str	r2, [r3, #20]
 8003374:	619a      	str	r2, [r3, #24]
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
 800337a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	f107 0318 	add.w	r3, r7, #24
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
	int err = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	667b      	str	r3, [r7, #100]	@ 0x64

	// Retrieve Salt from Flash
	const uint8_t* salt_ptr = SaltManager_Get();
 8003398:	f000 fbd2 	bl	8003b40 <SaltManager_Get>
 800339c:	6638      	str	r0, [r7, #96]	@ 0x60
	// Retrieve UID from System
	DeviceInfo_GetUniqueID(uid);
 800339e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fcc6 	bl	8002d34 <DeviceInfo_GetUniqueID>
	// Derive Key using HKDF
	HKDF_DeriveKey(salt_ptr, uid, masterKey);
 80033a8:	f107 0214 	add.w	r2, r7, #20
 80033ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033b0:	4619      	mov	r1, r3
 80033b2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80033b4:	f7ff ff04 	bl	80031c0 <HKDF_DeriveKey>

	// Set Key ID member in the structure
	keyEntry->key_id = keyID;
 80033b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]
	// Set Key Usage Count to zero in the structure
	keyEntry->usage_count = 0;
 80033be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033c0:	2200      	movs	r2, #0
 80033c2:	711a      	strb	r2, [r3, #4]
	// Set Key Origin member in the structure
	keyEntry->origin = keyOrigin;
 80033c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033c6:	79ba      	ldrb	r2, [r7, #6]
 80033c8:	715a      	strb	r2, [r3, #5]
	// Set Key Usage member in the structure
	keyEntry->usage = keyUsage;
 80033ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033cc:	f897 2088 	ldrb.w	r2, [r7, #136]	@ 0x88
 80033d0:	719a      	strb	r2, [r3, #6]
	// Set Key Size member in the structure
	keyEntry->key_size = keySize;
 80033d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033d4:	79fa      	ldrb	r2, [r7, #7]
 80033d6:	71da      	strb	r2, [r3, #7]
	// Fill Key Value member in the structure
	memcpy(keyEntry->key_val, key, keySize);
 80033d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033da:	3308      	adds	r3, #8
 80033dc:	79fa      	ldrb	r2, [r7, #7]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f012 fea4 	bl	801612e <memcpy>

	// Filling up plaintext array to be encrypted with Master Key
	plaintext[KEY_ORIGIN_POS - 5] = keyOrigin;
 80033e6:	4a55      	ldr	r2, [pc, #340]	@ (800353c <KeyManager_AddKey+0x238>)
 80033e8:	79bb      	ldrb	r3, [r7, #6]
 80033ea:	7013      	strb	r3, [r2, #0]
	plaintext[KEY_USAGE_POS - 5] = keyUsage;
 80033ec:	4a53      	ldr	r2, [pc, #332]	@ (800353c <KeyManager_AddKey+0x238>)
 80033ee:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80033f2:	7053      	strb	r3, [r2, #1]
	plaintext[KEY_SIZE_POS - 5] = keySize;
 80033f4:	4a51      	ldr	r2, [pc, #324]	@ (800353c <KeyManager_AddKey+0x238>)
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	7093      	strb	r3, [r2, #2]
	memcpy(&plaintext[KEY_VAL_POS - 5], key, MAX_KEY_SIZE);
 80033fa:	2220      	movs	r2, #32
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	4850      	ldr	r0, [pc, #320]	@ (8003540 <KeyManager_AddKey+0x23c>)
 8003400:	f012 fe95 	bl	801612e <memcpy>

	// Generate a 16-byte Random Initialization Vector
	err = GenerateIV(iv);
 8003404:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff febe 	bl	800318a <GenerateIV>
 800340e:	4603      	mov	r3, r0
 8003410:	667b      	str	r3, [r7, #100]	@ 0x64
	if(err)
 8003412:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <KeyManager_AddKey+0x124>
	{
		log_error("IV Generation Failed.");
 8003418:	484a      	ldr	r0, [pc, #296]	@ (8003544 <KeyManager_AddKey+0x240>)
 800341a:	f000 fc4f 	bl	8003cbc <log_error>
		free(keyEntry);
 800341e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003420:	f012 fb90 	bl	8015b44 <free>
		return KM_STATUS_IV_FAIL;
 8003424:	230e      	movs	r3, #14
 8003426:	e082      	b.n	800352e <KeyManager_AddKey+0x22a>
	}

	// Encrypt the Key Entry Blob with a Master key from KDF
	err = CryptoEngine_Codec(ciphertext, sizeof(ciphertext), plaintext, sizeof(plaintext), iv, masterKey);
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2323      	movs	r3, #35	@ 0x23
 8003436:	4a41      	ldr	r2, [pc, #260]	@ (800353c <KeyManager_AddKey+0x238>)
 8003438:	2123      	movs	r1, #35	@ 0x23
 800343a:	4843      	ldr	r0, [pc, #268]	@ (8003548 <KeyManager_AddKey+0x244>)
 800343c:	f7ff fc32 	bl	8002ca4 <CryptoEngine_Codec>
 8003440:	6678      	str	r0, [r7, #100]	@ 0x64
	if(err)
 8003442:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <KeyManager_AddKey+0x154>
	{
		log_error("Codec Generation Failed.");
 8003448:	4840      	ldr	r0, [pc, #256]	@ (800354c <KeyManager_AddKey+0x248>)
 800344a:	f000 fc37 	bl	8003cbc <log_error>
		free(keyEntry);
 800344e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003450:	f012 fb78 	bl	8015b44 <free>
		return KM_STATUS_CODEC_FAIL;
 8003454:	230f      	movs	r3, #15
 8003456:	e06a      	b.n	800352e <KeyManager_AddKey+0x22a>
	}

	// Generate the 32-byte HMAC digest for the encrypted Key Entry Blob
	err = GenerateHMAC(ciphertext, sizeof(ciphertext), masterKey, hmac);
 8003458:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800345c:	f107 0214 	add.w	r2, r7, #20
 8003460:	2123      	movs	r1, #35	@ 0x23
 8003462:	4839      	ldr	r0, [pc, #228]	@ (8003548 <KeyManager_AddKey+0x244>)
 8003464:	f7ff fe26 	bl	80030b4 <GenerateHMAC>
 8003468:	4603      	mov	r3, r0
 800346a:	667b      	str	r3, [r7, #100]	@ 0x64
	if(err)
 800346c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800346e:	2b00      	cmp	r3, #0
 8003470:	d007      	beq.n	8003482 <KeyManager_AddKey+0x17e>
	{
		log_error("HMAC Generation Failed.");
 8003472:	4837      	ldr	r0, [pc, #220]	@ (8003550 <KeyManager_AddKey+0x24c>)
 8003474:	f000 fc22 	bl	8003cbc <log_error>
		free(keyEntry);
 8003478:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800347a:	f012 fb63 	bl	8015b44 <free>
		return KM_STATUS_HMAC_FAIL;
 800347e:	2310      	movs	r3, #16
 8003480:	e055      	b.n	800352e <KeyManager_AddKey+0x22a>
	}

	// Set Key ID in the Buffer array
	keyEntryArray[KEY_ID_POS + 0] = (uint8_t)((keyEntry->key_id << 24) & 0xFF);
 8003482:	4b34      	ldr	r3, [pc, #208]	@ (8003554 <KeyManager_AddKey+0x250>)
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
	keyEntryArray[KEY_ID_POS + 1] = (uint8_t)((keyEntry->key_id << 16) & 0xFF);
 8003488:	4b32      	ldr	r3, [pc, #200]	@ (8003554 <KeyManager_AddKey+0x250>)
 800348a:	2200      	movs	r2, #0
 800348c:	705a      	strb	r2, [r3, #1]
	keyEntryArray[KEY_ID_POS + 2] = (uint8_t)((keyEntry->key_id << 8) & 0xFF);
 800348e:	4b31      	ldr	r3, [pc, #196]	@ (8003554 <KeyManager_AddKey+0x250>)
 8003490:	2200      	movs	r2, #0
 8003492:	709a      	strb	r2, [r3, #2]
	keyEntryArray[KEY_ID_POS + 3] = (uint8_t)((keyEntry->key_id) & 0xFF);
 8003494:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	4b2e      	ldr	r3, [pc, #184]	@ (8003554 <KeyManager_AddKey+0x250>)
 800349c:	70da      	strb	r2, [r3, #3]
	// Set Key Usage Count in the Buffer array
	keyEntryArray[KEY_USECOUNT_POS] = (uint8_t)((keyEntry->usage_count) & 0xFF);
 800349e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034a0:	791a      	ldrb	r2, [r3, #4]
 80034a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003554 <KeyManager_AddKey+0x250>)
 80034a4:	711a      	strb	r2, [r3, #4]
	// Copy the encrypted Key Entry Blob into the Buffer array
	memcpy(&keyEntryArray[KEY_ORIGIN_POS], ciphertext, sizeof(ciphertext));
 80034a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003554 <KeyManager_AddKey+0x250>)
 80034a8:	4a27      	ldr	r2, [pc, #156]	@ (8003548 <KeyManager_AddKey+0x244>)
 80034aa:	4614      	mov	r4, r2
 80034ac:	f103 0c05 	add.w	ip, r3, #5
 80034b0:	f104 0e20 	add.w	lr, r4, #32
 80034b4:	4665      	mov	r5, ip
 80034b6:	4626      	mov	r6, r4
 80034b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80034ba:	6028      	str	r0, [r5, #0]
 80034bc:	6069      	str	r1, [r5, #4]
 80034be:	60aa      	str	r2, [r5, #8]
 80034c0:	60eb      	str	r3, [r5, #12]
 80034c2:	3410      	adds	r4, #16
 80034c4:	f10c 0c10 	add.w	ip, ip, #16
 80034c8:	4574      	cmp	r4, lr
 80034ca:	d1f3      	bne.n	80034b4 <KeyManager_AddKey+0x1b0>
 80034cc:	4663      	mov	r3, ip
 80034ce:	4622      	mov	r2, r4
 80034d0:	8811      	ldrh	r1, [r2, #0]
 80034d2:	7892      	ldrb	r2, [r2, #2]
 80034d4:	8019      	strh	r1, [r3, #0]
 80034d6:	709a      	strb	r2, [r3, #2]
	// Copy the used Initialization vector into the Buffer array
	memcpy(&keyEntryArray[KEY_IV_POS], iv, sizeof(iv));
 80034d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003554 <KeyManager_AddKey+0x250>)
 80034da:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80034de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80034e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Copy the generated HMAC Digest into the Buffer array
	memcpy(&keyEntryArray[KEY_HMAC_POS], hmac, sizeof(hmac));
 80034e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003554 <KeyManager_AddKey+0x250>)
 80034ea:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 80034ee:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 80034f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80034fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Call Flash Manager function to write to Flash
	if(FlashManager_WriteEntry(sectorNumber, keyEntryArray) != 0)
 80034fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003502:	4914      	ldr	r1, [pc, #80]	@ (8003554 <KeyManager_AddKey+0x250>)
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fcbb 	bl	8002e80 <FlashManager_WriteEntry>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <KeyManager_AddKey+0x21c>
	{
		log_error("Write operation to Flash Failed.");
 8003510:	4811      	ldr	r0, [pc, #68]	@ (8003558 <KeyManager_AddKey+0x254>)
 8003512:	f000 fbd3 	bl	8003cbc <log_error>
		free(keyEntry);
 8003516:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003518:	f012 fb14 	bl	8015b44 <free>
		return KM_STATUS_WRITE_KEY_FAIL;
 800351c:	2311      	movs	r3, #17
 800351e:	e006      	b.n	800352e <KeyManager_AddKey+0x22a>
	}
	log_info("Key Entry Added to Flash Memory.");
 8003520:	480e      	ldr	r0, [pc, #56]	@ (800355c <KeyManager_AddKey+0x258>)
 8003522:	f000 fb97 	bl	8003c54 <log_info>
	free(keyEntry);
 8003526:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003528:	f012 fb0c 	bl	8015b44 <free>
	return KM_STATUS_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3774      	adds	r7, #116	@ 0x74
 8003532:	46bd      	mov	sp, r7
 8003534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003536:	bf00      	nop
 8003538:	080185ac 	.word	0x080185ac
 800353c:	2000225c 	.word	0x2000225c
 8003540:	2000225f 	.word	0x2000225f
 8003544:	080185d8 	.word	0x080185d8
 8003548:	20002280 	.word	0x20002280
 800354c:	080185f0 	.word	0x080185f0
 8003550:	0801860c 	.word	0x0801860c
 8003554:	200022a4 	.word	0x200022a4
 8003558:	08018624 	.word	0x08018624
 800355c:	08018648 	.word	0x08018648

08003560 <KeyManager_GetKey>:

KeyManagerStatus_t KeyManager_GetKey(uint32_t keyID, uint8_t* key)
{
 8003560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003562:	b0a5      	sub	sp, #148	@ 0x94
 8003564:	af02      	add	r7, sp, #8
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
	// Find the Sector Number using the given Key ID
	uint16_t sectorNumber = KeyManager_FindKey(keyID);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fe86 	bl	800327c <KeyManager_FindKey>
 8003570:	4603      	mov	r3, r0
 8003572:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
		log_error("Failed to match Key ID in Database.");
		return KM_STATUS_KEY_NOT_FOUND;
	}

	// Creating an instance of the KeyEntry_t structure
	KeyEntry_t *keyEntry = (KeyEntry_t *)malloc(sizeof(KeyEntry_t));
 8003576:	2058      	movs	r0, #88	@ 0x58
 8003578:	f012 fadc 	bl	8015b34 <malloc>
 800357c:	4603      	mov	r3, r0
 800357e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	// Checking if Heap allocated space for the struct instance
	if(keyEntry == NULL)
 8003582:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d104      	bne.n	8003594 <KeyManager_GetKey+0x34>
	{
		log_error("Failed to allocate memory for Key Entry.");
 800358a:	487c      	ldr	r0, [pc, #496]	@ (800377c <KeyManager_GetKey+0x21c>)
 800358c:	f000 fb96 	bl	8003cbc <log_error>
		return KM_STATUS_NO_HEAP;
 8003590:	2303      	movs	r3, #3
 8003592:	e0ee      	b.n	8003772 <KeyManager_GetKey+0x212>
	}
	// Set struct memory to zero
	memset(keyEntry, 0, sizeof(KeyEntry_t));
 8003594:	2258      	movs	r2, #88	@ 0x58
 8003596:	2100      	movs	r1, #0
 8003598:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800359c:	f012 fd3c 	bl	8016018 <memset>

	// Declare static arrays to hold plaintext, ciphertext, iv, hmac, master key and buffer array to flush to flash
	static uint8_t keyEntryArray[sizeof(KeyEntry_t)] = {0};
	static uint8_t plaintext[sizeof(KeyEntry_t)-53] = {0};
	static uint8_t ciphertext[sizeof(KeyEntry_t)-53] = {0};
	uint8_t iv[KEY_IV_SIZE] = {0}, stored_hmac[KEY_HMAC_SIZE] = {0}, computed_hmac[KEY_HMAC_SIZE] = {0}, uid[12] = {0}, masterKey[16] = {0};
 80035a0:	2300      	movs	r3, #0
 80035a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	2300      	movs	r3, #0
 80035b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	611a      	str	r2, [r3, #16]
 80035c4:	615a      	str	r2, [r3, #20]
 80035c6:	619a      	str	r2, [r3, #24]
 80035c8:	2300      	movs	r3, #0
 80035ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	611a      	str	r2, [r3, #16]
 80035dc:	615a      	str	r2, [r3, #20]
 80035de:	619a      	str	r2, [r3, #24]
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	f107 0320 	add.w	r3, r7, #32
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	f107 0310 	add.w	r3, r7, #16
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	609a      	str	r2, [r3, #8]
	int err = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Retrieve Salt from Flash
	const uint8_t* salt_ptr = SaltManager_Get();
 8003602:	f000 fa9d 	bl	8003b40 <SaltManager_Get>
 8003606:	67b8      	str	r0, [r7, #120]	@ 0x78
	// Retrieve UID from System
	DeviceInfo_GetUniqueID(uid);
 8003608:	f107 031c 	add.w	r3, r7, #28
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fb91 	bl	8002d34 <DeviceInfo_GetUniqueID>
	// Derive Key using HKDF
	HKDF_DeriveKey(salt_ptr, uid, masterKey);
 8003612:	f107 020c 	add.w	r2, r7, #12
 8003616:	f107 031c 	add.w	r3, r7, #28
 800361a:	4619      	mov	r1, r3
 800361c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800361e:	f7ff fdcf 	bl	80031c0 <HKDF_DeriveKey>

	// Call FlashManager function to read back the Key Entry and store it in keyEntryArray[]
	if(FlashManager_ReadEntry(sectorNumber, keyEntryArray) != 0)
 8003622:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003626:	4956      	ldr	r1, [pc, #344]	@ (8003780 <KeyManager_GetKey+0x220>)
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fbfd 	bl	8002e28 <FlashManager_ReadEntry>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <KeyManager_GetKey+0xe6>
	{
		log_error("Failed to Read entry from Flash.");
 8003634:	4853      	ldr	r0, [pc, #332]	@ (8003784 <KeyManager_GetKey+0x224>)
 8003636:	f000 fb41 	bl	8003cbc <log_error>
		free(keyEntry);
 800363a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800363e:	f012 fa81 	bl	8015b44 <free>
		return KM_STATUS_READ_KEY_FAIL;
 8003642:	2312      	movs	r3, #18
 8003644:	e095      	b.n	8003772 <KeyManager_GetKey+0x212>
	}

	// Copy the encrypted Key Entry Blob into the Ciphertext array
	memcpy(ciphertext, &keyEntryArray[KEY_ORIGIN_POS], sizeof(ciphertext));
 8003646:	4a50      	ldr	r2, [pc, #320]	@ (8003788 <KeyManager_GetKey+0x228>)
 8003648:	4b4d      	ldr	r3, [pc, #308]	@ (8003780 <KeyManager_GetKey+0x220>)
 800364a:	1d5c      	adds	r4, r3, #5
 800364c:	4616      	mov	r6, r2
 800364e:	f104 0c20 	add.w	ip, r4, #32
 8003652:	4635      	mov	r5, r6
 8003654:	4623      	mov	r3, r4
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003660:	3410      	adds	r4, #16
 8003662:	3610      	adds	r6, #16
 8003664:	4564      	cmp	r4, ip
 8003666:	d1f4      	bne.n	8003652 <KeyManager_GetKey+0xf2>
 8003668:	4633      	mov	r3, r6
 800366a:	4622      	mov	r2, r4
 800366c:	8811      	ldrh	r1, [r2, #0]
 800366e:	7892      	ldrb	r2, [r2, #2]
 8003670:	8019      	strh	r1, [r3, #0]
 8003672:	709a      	strb	r2, [r3, #2]
	// Copy the used Initialization vector into the Buffer array
	memcpy(iv, &keyEntryArray[KEY_IV_POS], KEY_IV_SIZE);
 8003674:	4b42      	ldr	r3, [pc, #264]	@ (8003780 <KeyManager_GetKey+0x220>)
 8003676:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 800367a:	3328      	adds	r3, #40	@ 0x28
 800367c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800367e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Copy the generated HMAC Digest into the Buffer arrayS
	memcpy(stored_hmac, &keyEntryArray[KEY_HMAC_POS], KEY_HMAC_SIZE);
 8003682:	4b3f      	ldr	r3, [pc, #252]	@ (8003780 <KeyManager_GetKey+0x220>)
 8003684:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8003688:	f103 0538 	add.w	r5, r3, #56	@ 0x38
 800368c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800368e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003690:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Generate the 32-byte HMAC digest for the encrypted Key Entry Blob
	err = GenerateHMAC(ciphertext, sizeof(ciphertext), masterKey, computed_hmac);
 8003698:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800369c:	f107 020c 	add.w	r2, r7, #12
 80036a0:	2123      	movs	r1, #35	@ 0x23
 80036a2:	4839      	ldr	r0, [pc, #228]	@ (8003788 <KeyManager_GetKey+0x228>)
 80036a4:	f7ff fd06 	bl	80030b4 <GenerateHMAC>
 80036a8:	4603      	mov	r3, r0
 80036aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
	if(err)
 80036ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <KeyManager_GetKey+0x164>
	{
		log_error("HMAC Generation Failed.");
 80036b2:	4836      	ldr	r0, [pc, #216]	@ (800378c <KeyManager_GetKey+0x22c>)
 80036b4:	f000 fb02 	bl	8003cbc <log_error>
		free(keyEntry);
 80036b8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80036bc:	f012 fa42 	bl	8015b44 <free>
		return KM_STATUS_HMAC_FAIL;
 80036c0:	2310      	movs	r3, #16
 80036c2:	e056      	b.n	8003772 <KeyManager_GetKey+0x212>
	}

	// Check if Computed HMAC is same as Stored value
	if(memcmp(stored_hmac, computed_hmac, KEY_HMAC_SIZE) != 0)
 80036c4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80036c8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80036cc:	2220      	movs	r2, #32
 80036ce:	4618      	mov	r0, r3
 80036d0:	f012 fc92 	bl	8015ff8 <memcmp>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <KeyManager_GetKey+0x18c>
	{
		log_error("Computed HMAC value does not match with the stored value.");
 80036da:	482d      	ldr	r0, [pc, #180]	@ (8003790 <KeyManager_GetKey+0x230>)
 80036dc:	f000 faee 	bl	8003cbc <log_error>
		free(keyEntry);
 80036e0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80036e4:	f012 fa2e 	bl	8015b44 <free>
		return KM_STATUS_HMAC_MISMATCH;
 80036e8:	2309      	movs	r3, #9
 80036ea:	e042      	b.n	8003772 <KeyManager_GetKey+0x212>
	}
	log_info("Computed HMAC value matches with the stored value.");
 80036ec:	4829      	ldr	r0, [pc, #164]	@ (8003794 <KeyManager_GetKey+0x234>)
 80036ee:	f000 fab1 	bl	8003c54 <log_info>

	// Decrypt the Key Entry Blob with a Master key from KDF
	err = CryptoEngine_Codec(plaintext, sizeof(plaintext), ciphertext, sizeof(ciphertext), iv, masterKey);
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	2323      	movs	r3, #35	@ 0x23
 8003700:	4a21      	ldr	r2, [pc, #132]	@ (8003788 <KeyManager_GetKey+0x228>)
 8003702:	2123      	movs	r1, #35	@ 0x23
 8003704:	4824      	ldr	r0, [pc, #144]	@ (8003798 <KeyManager_GetKey+0x238>)
 8003706:	f7ff facd 	bl	8002ca4 <CryptoEngine_Codec>
 800370a:	67f8      	str	r0, [r7, #124]	@ 0x7c
	if(err)
 800370c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <KeyManager_GetKey+0x1c4>
	{
		log_error("Codec Generation Failed.");
 8003712:	4822      	ldr	r0, [pc, #136]	@ (800379c <KeyManager_GetKey+0x23c>)
 8003714:	f000 fad2 	bl	8003cbc <log_error>
		free(keyEntry);
 8003718:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800371c:	f012 fa12 	bl	8015b44 <free>
		return KM_STATUS_CODEC_FAIL;
 8003720:	230f      	movs	r3, #15
 8003722:	e026      	b.n	8003772 <KeyManager_GetKey+0x212>
	}

	// Retrieve the Key Size
	keyEntry->key_size = plaintext[KEY_SIZE_POS - 5];
 8003724:	4b1c      	ldr	r3, [pc, #112]	@ (8003798 <KeyManager_GetKey+0x238>)
 8003726:	789a      	ldrb	r2, [r3, #2]
 8003728:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800372c:	71da      	strb	r2, [r3, #7]
	// Retrieve the Key Value
	memcpy(key, &plaintext[KEY_VAL_POS - 5], MAX_KEY_SIZE);
 800372e:	2220      	movs	r2, #32
 8003730:	491b      	ldr	r1, [pc, #108]	@ (80037a0 <KeyManager_GetKey+0x240>)
 8003732:	6838      	ldr	r0, [r7, #0]
 8003734:	f012 fcfb 	bl	801612e <memcpy>
	// Update the Key Use Count in the Buffer array
	keyEntryArray[KEY_USECOUNT_POS] += 1;
 8003738:	4b11      	ldr	r3, [pc, #68]	@ (8003780 <KeyManager_GetKey+0x220>)
 800373a:	791b      	ldrb	r3, [r3, #4]
 800373c:	3301      	adds	r3, #1
 800373e:	b2da      	uxtb	r2, r3
 8003740:	4b0f      	ldr	r3, [pc, #60]	@ (8003780 <KeyManager_GetKey+0x220>)
 8003742:	711a      	strb	r2, [r3, #4]
	// Call FlashManager function to write the updated Buffer array to flash
	if(FlashManager_UpdateEntry(sectorNumber, keyEntryArray) != 0)
 8003744:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003748:	490d      	ldr	r1, [pc, #52]	@ (8003780 <KeyManager_GetKey+0x220>)
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fbcc 	bl	8002ee8 <FlashManager_UpdateEntry>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <KeyManager_GetKey+0x208>
	{
		log_error("Failed to Update entry in Flash.");
 8003756:	4813      	ldr	r0, [pc, #76]	@ (80037a4 <KeyManager_GetKey+0x244>)
 8003758:	f000 fab0 	bl	8003cbc <log_error>
		free(keyEntry);
 800375c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003760:	f012 f9f0 	bl	8015b44 <free>
		return KM_STATUS_UPDATE_KEY_FAIL;
 8003764:	2313      	movs	r3, #19
 8003766:	e004      	b.n	8003772 <KeyManager_GetKey+0x212>
	}
	free(keyEntry);
 8003768:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800376c:	f012 f9ea 	bl	8015b44 <free>
	// Return operation success flag.
	return KM_STATUS_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	378c      	adds	r7, #140	@ 0x8c
 8003776:	46bd      	mov	sp, r7
 8003778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800377a:	bf00      	nop
 800377c:	080185ac 	.word	0x080185ac
 8003780:	200022fc 	.word	0x200022fc
 8003784:	0801866c 	.word	0x0801866c
 8003788:	20002354 	.word	0x20002354
 800378c:	0801860c 	.word	0x0801860c
 8003790:	08018690 	.word	0x08018690
 8003794:	080186cc 	.word	0x080186cc
 8003798:	20002378 	.word	0x20002378
 800379c:	080185f0 	.word	0x080185f0
 80037a0:	2000237b 	.word	0x2000237b
 80037a4:	08018700 	.word	0x08018700

080037a8 <KeyManager_DeleteKey>:

KeyManagerStatus_t KeyManager_DeleteKey(uint32_t keyID)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	uint16_t sectorNumber = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	81fb      	strh	r3, [r7, #14]
	uint8_t header[ENTRY_HEADER_SIZE] = {0};
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	2300      	movs	r3, #0
 80037ba:	733b      	strb	r3, [r7, #12]
	sectorNumber = KeyManager_FindKey(keyID);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fd5d 	bl	800327c <KeyManager_FindKey>
 80037c2:	4603      	mov	r3, r0
 80037c4:	81fb      	strh	r3, [r7, #14]
	{
		log_error("Failed to match Key ID in Database.");
		return KM_STATUS_KEY_NOT_FOUND;
	}

	if(FlashManager_ReadIdentifier(sectorNumber, header) != 0)
 80037c6:	f107 0208 	add.w	r2, r7, #8
 80037ca:	89fb      	ldrh	r3, [r7, #14]
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff fb10 	bl	8002df4 <FlashManager_ReadIdentifier>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <KeyManager_DeleteKey+0x3c>
	{
		log_error("Failed to read Identifier Flash.");
 80037da:	480e      	ldr	r0, [pc, #56]	@ (8003814 <KeyManager_DeleteKey+0x6c>)
 80037dc:	f000 fa6e 	bl	8003cbc <log_error>
		return KM_STATUS_READ_KEY_FAIL;
 80037e0:	2312      	movs	r3, #18
 80037e2:	e012      	b.n	800380a <KeyManager_DeleteKey+0x62>
	}

	if(header[VALIDITY_FLAG_POS] == VALID_ENTRY_FLAG)
 80037e4:	7a3b      	ldrb	r3, [r7, #8]
 80037e6:	2baa      	cmp	r3, #170	@ 0xaa
 80037e8:	d10e      	bne.n	8003808 <KeyManager_DeleteKey+0x60>
	{
		log_info("Sector contains valid entry. Erasing now.");
 80037ea:	480b      	ldr	r0, [pc, #44]	@ (8003818 <KeyManager_DeleteKey+0x70>)
 80037ec:	f000 fa32 	bl	8003c54 <log_info>
		if(FlashManager_EraseEntry(sectorNumber) != 0)
 80037f0:	89fb      	ldrh	r3, [r7, #14]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fbb6 	bl	8002f64 <FlashManager_EraseEntry>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <KeyManager_DeleteKey+0x60>
		{
			log_error("Failed to Erase entry from Flash.");
 80037fe:	4807      	ldr	r0, [pc, #28]	@ (800381c <KeyManager_DeleteKey+0x74>)
 8003800:	f000 fa5c 	bl	8003cbc <log_error>
			return KM_STATUS_DELETE_KEY_FAIL;
 8003804:	2314      	movs	r3, #20
 8003806:	e000      	b.n	800380a <KeyManager_DeleteKey+0x62>
		}
	}
	return KM_STATUS_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	08018724 	.word	0x08018724
 8003818:	08018748 	.word	0x08018748
 800381c:	08018774 	.word	0x08018774

08003820 <PacketBuilder_Build>:
#include "Logger.h"
#include <string.h>


BuildStatus_t PacketBuilder_Build(const ResponsePacket_t* responsePacket, uint8_t* outBuffer, uint16_t* outLength)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
	log_debug("Checking if Response Packet is NULL");
 800382c:	484e      	ldr	r0, [pc, #312]	@ (8003968 <PacketBuilder_Build+0x148>)
 800382e:	f000 f9f7 	bl	8003c20 <log_debug>
	// Check if Response, Output and Output Size are NULL
    if (!responsePacket || !outBuffer || !outLength)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <PacketBuilder_Build+0x24>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <PacketBuilder_Build+0x24>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <PacketBuilder_Build+0x28>
    {
    	return BUILD_NULL_POINTER;
 8003844:	2301      	movs	r3, #1
 8003846:	e08b      	b.n	8003960 <PacketBuilder_Build+0x140>
    }
    log_debug("Checking if Output Size is under limits");
 8003848:	4848      	ldr	r0, [pc, #288]	@ (800396c <PacketBuilder_Build+0x14c>)
 800384a:	f000 f9e9 	bl	8003c20 <log_debug>
    // Check if Output Size is under the specified limits
    if (responsePacket->outputSize > MAX_OUTPUT_DATA_SIZE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	889b      	ldrh	r3, [r3, #4]
 8003852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003856:	d901      	bls.n	800385c <PacketBuilder_Build+0x3c>
    {
    	return BUILD_OUTPUT_TOO_LARGE;
 8003858:	2302      	movs	r3, #2
 800385a:	e081      	b.n	8003960 <PacketBuilder_Build+0x140>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Transaction ID to Out Buffer");
 8003860:	4843      	ldr	r0, [pc, #268]	@ (8003970 <PacketBuilder_Build+0x150>)
 8003862:	f000 f9dd 	bl	8003c20 <log_debug>
    // Fill Data Stream with the corresponding Transaction ID
    outBuffer[index++] = (responsePacket->transactionID >> 24) & 0xFF;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	0e1a      	lsrs	r2, r3, #24
 800386c:	8afb      	ldrh	r3, [r7, #22]
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	82f9      	strh	r1, [r7, #22]
 8003872:	4619      	mov	r1, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	440b      	add	r3, r1
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 16) & 0xFF;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0c1a      	lsrs	r2, r3, #16
 8003882:	8afb      	ldrh	r3, [r7, #22]
 8003884:	1c59      	adds	r1, r3, #1
 8003886:	82f9      	strh	r1, [r7, #22]
 8003888:	4619      	mov	r1, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	440b      	add	r3, r1
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 8)  & 0xFF;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	0a1a      	lsrs	r2, r3, #8
 8003898:	8afb      	ldrh	r3, [r7, #22]
 800389a:	1c59      	adds	r1, r3, #1
 800389c:	82f9      	strh	r1, [r7, #22]
 800389e:	4619      	mov	r1, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	440b      	add	r3, r1
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID)       & 0xFF;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	8afb      	ldrh	r3, [r7, #22]
 80038ae:	1c59      	adds	r1, r3, #1
 80038b0:	82f9      	strh	r1, [r7, #22]
 80038b2:	4619      	mov	r1, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	440b      	add	r3, r1
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]
    log_debug("Adding Output Data Size to Out Buffer");
 80038bc:	482d      	ldr	r0, [pc, #180]	@ (8003974 <PacketBuilder_Build+0x154>)
 80038be:	f000 f9af 	bl	8003c20 <log_debug>
    // Fill Data Stream with the Output Data Size
    outBuffer[index++] = (responsePacket->outputSize >> 8) & 0xFF;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	889b      	ldrh	r3, [r3, #4]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	8afb      	ldrh	r3, [r7, #22]
 80038cc:	1c59      	adds	r1, r3, #1
 80038ce:	82f9      	strh	r1, [r7, #22]
 80038d0:	4619      	mov	r1, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	440b      	add	r3, r1
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->outputSize)      & 0xFF;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	889a      	ldrh	r2, [r3, #4]
 80038de:	8afb      	ldrh	r3, [r7, #22]
 80038e0:	1c59      	adds	r1, r3, #1
 80038e2:	82f9      	strh	r1, [r7, #22]
 80038e4:	4619      	mov	r1, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	440b      	add	r3, r1
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]
    // Copy Output Data contents to Data Stream
    log_debug("Copying Output Data to Out Buffer");
 80038ee:	4822      	ldr	r0, [pc, #136]	@ (8003978 <PacketBuilder_Build+0x158>)
 80038f0:	f000 f996 	bl	8003c20 <log_debug>
    memcpy(&outBuffer[index], responsePacket->outputData, responsePacket->outputSize);
 80038f4:	8afb      	ldrh	r3, [r7, #22]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	18d0      	adds	r0, r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1d99      	adds	r1, r3, #6
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	889b      	ldrh	r3, [r3, #4]
 8003902:	461a      	mov	r2, r3
 8003904:	f012 fc13 	bl	801612e <memcpy>
    // Set Index to point to EOD Flag
    index += responsePacket->outputSize;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	889a      	ldrh	r2, [r3, #4]
 800390c:	8afb      	ldrh	r3, [r7, #22]
 800390e:	4413      	add	r3, r2
 8003910:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Outward EOD Flag to Out Buffer");
 8003912:	481a      	ldr	r0, [pc, #104]	@ (800397c <PacketBuilder_Build+0x15c>)
 8003914:	f000 f984 	bl	8003c20 <log_debug>
    // Add EOD Flag to Data Stream
    outBuffer[index++] = (OUT_EOD_FLAG >> 24) & 0xFF;
 8003918:	8afb      	ldrh	r3, [r7, #22]
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	82fa      	strh	r2, [r7, #22]
 800391e:	461a      	mov	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4413      	add	r3, r2
 8003924:	22ca      	movs	r2, #202	@ 0xca
 8003926:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 16) & 0xFF;
 8003928:	8afb      	ldrh	r3, [r7, #22]
 800392a:	1c5a      	adds	r2, r3, #1
 800392c:	82fa      	strh	r2, [r7, #22]
 800392e:	461a      	mov	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4413      	add	r3, r2
 8003934:	22fe      	movs	r2, #254	@ 0xfe
 8003936:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 8)  & 0xFF;
 8003938:	8afb      	ldrh	r3, [r7, #22]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	82fa      	strh	r2, [r7, #22]
 800393e:	461a      	mov	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4413      	add	r3, r2
 8003944:	22ba      	movs	r2, #186	@ 0xba
 8003946:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG)       & 0xFF;
 8003948:	8afb      	ldrh	r3, [r7, #22]
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	82fa      	strh	r2, [r7, #22]
 800394e:	461a      	mov	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4413      	add	r3, r2
 8003954:	22be      	movs	r2, #190	@ 0xbe
 8003956:	701a      	strb	r2, [r3, #0]
    // Set Index to point to End of Data Stream
    *outLength = index;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8afa      	ldrh	r2, [r7, #22]
 800395c:	801a      	strh	r2, [r3, #0]
    // Return to indicate successful Packet Build
    return BUILD_SUCCESS;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	08018798 	.word	0x08018798
 800396c:	080187bc 	.word	0x080187bc
 8003970:	080187e4 	.word	0x080187e4
 8003974:	08018808 	.word	0x08018808
 8003978:	08018830 	.word	0x08018830
 800397c:	08018854 	.word	0x08018854

08003980 <PacketParser_Parse>:
#include "constants.h"
#include "Logger.h"
#include <string.h>

ParseStatus_t PacketParser_Parse(const uint8_t* rawData, uint16_t rawLength, ParsedPacket_t* parsedPacket)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	460b      	mov	r3, r1
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	817b      	strh	r3, [r7, #10]
	log_debug("Checking if Data Stream or Packet Structure is NULL.");
 800398e:	4860      	ldr	r0, [pc, #384]	@ (8003b10 <PacketParser_Parse+0x190>)
 8003990:	f000 f946 	bl	8003c20 <log_debug>
	// Check if Data Stream or Packet structure is NULL
	if (!rawData || !parsedPacket)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <PacketParser_Parse+0x20>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <PacketParser_Parse+0x2a>
    {
		log_error("Data Stream or Packet Structure is NULL");
 80039a0:	485c      	ldr	r0, [pc, #368]	@ (8003b14 <PacketParser_Parse+0x194>)
 80039a2:	f000 f98b 	bl	8003cbc <log_error>
    	return PARSE_NULL_POINTER;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e0ae      	b.n	8003b08 <PacketParser_Parse+0x188>
    }
	log_debug("Checking if Data Stream contains less than 12 bytes.");
 80039aa:	485b      	ldr	r0, [pc, #364]	@ (8003b18 <PacketParser_Parse+0x198>)
 80039ac:	f000 f938 	bl	8003c20 <log_debug>
    // Check if Data Stream contains Data of valid length
    if (rawLength < 12)
 80039b0:	897b      	ldrh	r3, [r7, #10]
 80039b2:	2b0b      	cmp	r3, #11
 80039b4:	d804      	bhi.n	80039c0 <PacketParser_Parse+0x40>
    {
    	log_error("Data stream contain less than 12 bytes");
 80039b6:	4859      	ldr	r0, [pc, #356]	@ (8003b1c <PacketParser_Parse+0x19c>)
 80039b8:	f000 f980 	bl	8003cbc <log_error>
    	return PARSE_INVALID_LENGTH;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0a3      	b.n	8003b08 <PacketParser_Parse+0x188>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up Transaction ID.");
 80039c4:	4856      	ldr	r0, [pc, #344]	@ (8003b20 <PacketParser_Parse+0x1a0>)
 80039c6:	f000 f92b 	bl	8003c20 <log_debug>
    // Retrieve Transaction ID from Data Stream
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80039ca:	8afb      	ldrh	r3, [r7, #22]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	061a      	lsls	r2, r3, #24
                                  (rawData[index + 1] << 16) |
 80039d4:	8afb      	ldrh	r3, [r7, #22]
 80039d6:	3301      	adds	r3, #1
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	440b      	add	r3, r1
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	041b      	lsls	r3, r3, #16
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80039e0:	431a      	orrs	r2, r3
                                  (rawData[index + 2] << 8)  |
 80039e2:	8afb      	ldrh	r3, [r7, #22]
 80039e4:	3302      	adds	r3, #2
 80039e6:	68f9      	ldr	r1, [r7, #12]
 80039e8:	440b      	add	r3, r1
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	021b      	lsls	r3, r3, #8
                                  (rawData[index + 1] << 16) |
 80039ee:	4313      	orrs	r3, r2
                                  (rawData[index + 3]);
 80039f0:	8afa      	ldrh	r2, [r7, #22]
 80039f2:	3203      	adds	r2, #3
 80039f4:	68f9      	ldr	r1, [r7, #12]
 80039f6:	440a      	add	r2, r1
 80039f8:	7812      	ldrb	r2, [r2, #0]
                                  (rawData[index + 2] << 8)  |
 80039fa:	4313      	orrs	r3, r2
 80039fc:	461a      	mov	r2, r3
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	601a      	str	r2, [r3, #0]
    // Set Index to point CMD byte
    index += 4;
 8003a02:	8afb      	ldrh	r3, [r7, #22]
 8003a04:	3304      	adds	r3, #4
 8003a06:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up CMD, OPTION and INPUT_SIZE fields.");
 8003a08:	4846      	ldr	r0, [pc, #280]	@ (8003b24 <PacketParser_Parse+0x1a4>)
 8003a0a:	f000 f909 	bl	8003c20 <log_debug>
    // Retrieve CMD byte from Data Stream
    parsedPacket->cmd = rawData[index++];
 8003a0e:	8afb      	ldrh	r3, [r7, #22]
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	82fa      	strh	r2, [r7, #22]
 8003a14:	461a      	mov	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4413      	add	r3, r2
 8003a1a:	781a      	ldrb	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	711a      	strb	r2, [r3, #4]
    // Retrieve OPTION byte from Data Stream
    parsedPacket->option = rawData[index++];
 8003a20:	8afb      	ldrh	r3, [r7, #22]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	82fa      	strh	r2, [r7, #22]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	715a      	strb	r2, [r3, #5]
    // Retrieve INPUT_SIZE half-word from Data Stream
    parsedPacket->inputSize = (rawData[index] << 8) | rawData[index + 1];
 8003a32:	8afb      	ldrh	r3, [r7, #22]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	b21a      	sxth	r2, r3
 8003a3e:	8afb      	ldrh	r3, [r7, #22]
 8003a40:	3301      	adds	r3, #1
 8003a42:	68f9      	ldr	r1, [r7, #12]
 8003a44:	440b      	add	r3, r1
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b21b      	sxth	r3, r3
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	b21b      	sxth	r3, r3
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	80da      	strh	r2, [r3, #6]
    // Set Index to point INPUT_DATA
    index += 2;
 8003a54:	8afb      	ldrh	r3, [r7, #22]
 8003a56:	3302      	adds	r3, #2
 8003a58:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking if INPUT_SIZE is within the limits.");
 8003a5a:	4833      	ldr	r0, [pc, #204]	@ (8003b28 <PacketParser_Parse+0x1a8>)
 8003a5c:	f000 f8e0 	bl	8003c20 <log_debug>
    // Check if INPUT_SIZE is under the prescribed limit
    if (parsedPacket->inputSize > MAX_INPUT_DATA_SIZE || ((index - 1) + parsedPacket->inputSize + 4) > rawLength)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	88db      	ldrh	r3, [r3, #6]
 8003a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a68:	d808      	bhi.n	8003a7c <PacketParser_Parse+0xfc>
 8003a6a:	8afb      	ldrh	r3, [r7, #22]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	88d2      	ldrh	r2, [r2, #6]
 8003a72:	4413      	add	r3, r2
 8003a74:	1cda      	adds	r2, r3, #3
 8003a76:	897b      	ldrh	r3, [r7, #10]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	db04      	blt.n	8003a86 <PacketParser_Parse+0x106>
    {
    	log_error("Input Data Size is too big.");
 8003a7c:	482b      	ldr	r0, [pc, #172]	@ (8003b2c <PacketParser_Parse+0x1ac>)
 8003a7e:	f000 f91d 	bl	8003cbc <log_error>
        return PARSE_INPUT_TOO_LARGE;
 8003a82:	2304      	movs	r3, #4
 8003a84:	e040      	b.n	8003b08 <PacketParser_Parse+0x188>
    }
    log_debug("Copying INPUT DATA to Packet Structure.");
 8003a86:	482a      	ldr	r0, [pc, #168]	@ (8003b30 <PacketParser_Parse+0x1b0>)
 8003a88:	f000 f8ca 	bl	8003c20 <log_debug>
    // Copy INPUT_DATA array from Data Stream to Packet structure
    memcpy(parsedPacket->inputData, &rawData[index], parsedPacket->inputSize);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f103 0008 	add.w	r0, r3, #8
 8003a92:	8afb      	ldrh	r3, [r7, #22]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	18d1      	adds	r1, r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	88db      	ldrh	r3, [r3, #6]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f012 fb46 	bl	801612e <memcpy>
    // Set Index to point EOD Flag
    if(!(parsedPacket->inputSize))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	88db      	ldrh	r3, [r3, #6]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <PacketParser_Parse+0x130>
    {
    	index = 8;
 8003aaa:	2308      	movs	r3, #8
 8003aac:	82fb      	strh	r3, [r7, #22]
 8003aae:	e004      	b.n	8003aba <PacketParser_Parse+0x13a>
    }
    else
    {
    	index += parsedPacket->inputSize;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	88da      	ldrh	r2, [r3, #6]
 8003ab4:	8afb      	ldrh	r3, [r7, #22]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	82fb      	strh	r3, [r7, #22]
    }
    log_debug("Checking the Received EOD word.");
 8003aba:	481e      	ldr	r0, [pc, #120]	@ (8003b34 <PacketParser_Parse+0x1b4>)
 8003abc:	f000 f8b0 	bl	8003c20 <log_debug>
    // Retrieve EOD Flag from Data Stream
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8003ac0:	8afb      	ldrh	r3, [r7, #22]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	061a      	lsls	r2, r3, #24
                           	   (rawData[index + 1] << 16) |
 8003aca:	8afb      	ldrh	r3, [r7, #22]
 8003acc:	3301      	adds	r3, #1
 8003ace:	68f9      	ldr	r1, [r7, #12]
 8003ad0:	440b      	add	r3, r1
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	041b      	lsls	r3, r3, #16
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8003ad6:	431a      	orrs	r2, r3
							   (rawData[index + 2] << 8)  |
 8003ad8:	8afb      	ldrh	r3, [r7, #22]
 8003ada:	3302      	adds	r3, #2
 8003adc:	68f9      	ldr	r1, [r7, #12]
 8003ade:	440b      	add	r3, r1
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	021b      	lsls	r3, r3, #8
                           	   (rawData[index + 1] << 16) |
 8003ae4:	4313      	orrs	r3, r2
							   (rawData[index + 3]);
 8003ae6:	8afa      	ldrh	r2, [r7, #22]
 8003ae8:	3203      	adds	r2, #3
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	440a      	add	r2, r1
 8003aee:	7812      	ldrb	r2, [r2, #0]
							   (rawData[index + 2] << 8)  |
 8003af0:	4313      	orrs	r3, r2
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8003af2:	613b      	str	r3, [r7, #16]
    // Check if EOD Flag is valid
    if (received_IN_EOD != IN_EOD_FLAG)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4a10      	ldr	r2, [pc, #64]	@ (8003b38 <PacketParser_Parse+0x1b8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d004      	beq.n	8003b06 <PacketParser_Parse+0x186>
    {
    	log_error("Received EOD Flag is Invalid");
 8003afc:	480f      	ldr	r0, [pc, #60]	@ (8003b3c <PacketParser_Parse+0x1bc>)
 8003afe:	f000 f8dd 	bl	8003cbc <log_error>
        return PARSE_EOD_MISMATCH;
 8003b02:	2302      	movs	r3, #2
 8003b04:	e000      	b.n	8003b08 <PacketParser_Parse+0x188>
    }
    // Return to Indicate successful parsing
    return PARSE_SUCCESS;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	0801887c 	.word	0x0801887c
 8003b14:	080188b4 	.word	0x080188b4
 8003b18:	080188dc 	.word	0x080188dc
 8003b1c:	08018914 	.word	0x08018914
 8003b20:	0801893c 	.word	0x0801893c
 8003b24:	08018958 	.word	0x08018958
 8003b28:	08018988 	.word	0x08018988
 8003b2c:	080189b8 	.word	0x080189b8
 8003b30:	080189d4 	.word	0x080189d4
 8003b34:	080189fc 	.word	0x080189fc
 8003b38:	deadbeef 	.word	0xdeadbeef
 8003b3c:	08018a1c 	.word	0x08018a1c

08003b40 <SaltManager_Get>:
    }
    return SALT_MANAGER_OK;
}

const uint8_t* SaltManager_Get(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
    return salt;
 8003b44:	4b02      	ldr	r3, [pc, #8]	@ (8003b50 <SaltManager_Get+0x10>)
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	2000239c 	.word	0x2000239c

08003b54 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 8003b5e:	4a04      	ldr	r2, [pc, #16]	@ (8003b70 <log_init+0x1c>)
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	7013      	strb	r3, [r2, #0]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	20000000 	.word	0x20000000

08003b74 <log_clearline>:

void log_clearline(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
    // Move cursor up and clear the entire line
    printf("\033[A\033[2K\r");
 8003b78:	4802      	ldr	r0, [pc, #8]	@ (8003b84 <log_clearline+0x10>)
 8003b7a:	f012 f95b 	bl	8015e34 <iprintf>
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08018a3c 	.word	0x08018a3c

08003b88 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b0c7      	sub	sp, #284	@ 0x11c
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	4604      	mov	r4, r0
 8003b90:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8003b94:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8003b98:	6001      	str	r1, [r0, #0]
 8003b9a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8003b9e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8003ba2:	600a      	str	r2, [r1, #0]
 8003ba4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003ba8:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003bb2:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 8003bba:	4b16      	ldr	r3, [pc, #88]	@ (8003c14 <log_generic+0x8c>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003bc2:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 8003bc6:	7812      	ldrb	r2, [r2, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d31e      	bcc.n	8003c0a <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8003bcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003bd0:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8003bd4:	f107 0010 	add.w	r0, r7, #16
 8003bd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003be2:	f012 f9fb 	bl	8015fdc <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8003be6:	f107 0310 	add.w	r3, r7, #16
 8003bea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003bee:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003bf2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8003bf6:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8003bfa:	4807      	ldr	r0, [pc, #28]	@ (8003c18 <log_generic+0x90>)
 8003bfc:	9000      	str	r0, [sp, #0]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	6809      	ldr	r1, [r1, #0]
 8003c02:	4806      	ldr	r0, [pc, #24]	@ (8003c1c <log_generic+0x94>)
 8003c04:	f012 f916 	bl	8015e34 <iprintf>
 8003c08:	e000      	b.n	8003c0c <log_generic+0x84>
        return;
 8003c0a:	bf00      	nop
}
 8003c0c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd90      	pop	{r4, r7, pc}
 8003c14:	20000000 	.word	0x20000000
 8003c18:	08018a58 	.word	0x08018a58
 8003c1c:	08018a48 	.word	0x08018a48

08003c20 <log_debug>:

void log_debug(const char *fmt, ...)
{
 8003c20:	b40f      	push	{r0, r1, r2, r3}
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4a05      	ldr	r2, [pc, #20]	@ (8003c4c <log_debug+0x2c>)
 8003c36:	4906      	ldr	r1, [pc, #24]	@ (8003c50 <log_debug+0x30>)
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f7ff ffa5 	bl	8003b88 <log_generic>
    va_end(args);
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c48:	b004      	add	sp, #16
 8003c4a:	4770      	bx	lr
 8003c4c:	08018a60 	.word	0x08018a60
 8003c50:	08018a68 	.word	0x08018a68

08003c54 <log_info>:

void log_info(const char *fmt, ...)
{
 8003c54:	b40f      	push	{r0, r1, r2, r3}
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8003c5c:	f107 0314 	add.w	r3, r7, #20
 8003c60:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4a05      	ldr	r2, [pc, #20]	@ (8003c80 <log_info+0x2c>)
 8003c6a:	4906      	ldr	r1, [pc, #24]	@ (8003c84 <log_info+0x30>)
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f7ff ff8b 	bl	8003b88 <log_generic>
    va_end(args);
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c7c:	b004      	add	sp, #16
 8003c7e:	4770      	bx	lr
 8003c80:	08018a70 	.word	0x08018a70
 8003c84:	08018a78 	.word	0x08018a78

08003c88 <log_warn>:

void log_warn(const char *fmt, ...)
{
 8003c88:	b40f      	push	{r0, r1, r2, r3}
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4a05      	ldr	r2, [pc, #20]	@ (8003cb4 <log_warn+0x2c>)
 8003c9e:	4906      	ldr	r1, [pc, #24]	@ (8003cb8 <log_warn+0x30>)
 8003ca0:	2002      	movs	r0, #2
 8003ca2:	f7ff ff71 	bl	8003b88 <log_generic>
    va_end(args);
}
 8003ca6:	bf00      	nop
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cb0:	b004      	add	sp, #16
 8003cb2:	4770      	bx	lr
 8003cb4:	08018a80 	.word	0x08018a80
 8003cb8:	08018a88 	.word	0x08018a88

08003cbc <log_error>:

void log_error(const char *fmt, ...)
{
 8003cbc:	b40f      	push	{r0, r1, r2, r3}
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8003cc4:	f107 0314 	add.w	r3, r7, #20
 8003cc8:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4a05      	ldr	r2, [pc, #20]	@ (8003ce8 <log_error+0x2c>)
 8003cd2:	4906      	ldr	r1, [pc, #24]	@ (8003cec <log_error+0x30>)
 8003cd4:	2003      	movs	r0, #3
 8003cd6:	f7ff ff57 	bl	8003b88 <log_generic>
    va_end(args);
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ce4:	b004      	add	sp, #16
 8003ce6:	4770      	bx	lr
 8003ce8:	08018a90 	.word	0x08018a90
 8003cec:	08018a98 	.word	0x08018a98

08003cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cf4:	f001 fc0c 	bl	8005510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cf8:	f000 f84a 	bl	8003d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cfc:	f000 fb1a 	bl	8004334 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8003d00:	f000 fab6 	bl	8004270 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8003d04:	f000 fa1c 	bl	8004140 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003d08:	f000 f8ec 	bl	8003ee4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003d0c:	f000 f9c2 	bl	8004094 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8003d10:	f000 fa62 	bl	80041d8 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8003d14:	f000 f93c 	bl	8003f90 <MX_RTC_Init>
  MX_RNG_Init();
 8003d18:	f000 f924 	bl	8003f64 <MX_RNG_Init>
  MX_HASH_Init();
 8003d1c:	f000 f8c0 	bl	8003ea0 <MX_HASH_Init>
  MX_FLASH_Init();
 8003d20:	f000 f8ac 	bl	8003e7c <MX_FLASH_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 8003d24:	bf00      	nop
 8003d26:	4b18      	ldr	r3, [pc, #96]	@ (8003d88 <main+0x98>)
 8003d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0fa      	beq.n	8003d26 <main+0x36>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8003d30:	2000      	movs	r0, #0
 8003d32:	f001 f9d3 	bl	80050dc <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8003d36:	2001      	movs	r0, #1
 8003d38:	f001 f9d0 	bl	80050dc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003d3c:	2002      	movs	r0, #2
 8003d3e:	f001 f9cd 	bl	80050dc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003d42:	2101      	movs	r1, #1
 8003d44:	2000      	movs	r0, #0
 8003d46:	f001 fa69 	bl	800521c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8003d4a:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <main+0x9c>)
 8003d4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d50:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8003d52:	4b0e      	ldr	r3, [pc, #56]	@ (8003d8c <main+0x9c>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8003d58:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <main+0x9c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <main+0x9c>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8003d64:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <main+0x9c>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8003d6a:	4908      	ldr	r1, [pc, #32]	@ (8003d8c <main+0x9c>)
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	f001 faef 	bl	8005350 <BSP_COM_Init>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <main+0x8c>
  {
    Error_Handler();
 8003d78:	f000 fc00 	bl	800457c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HSMManager_Init();
 8003d7c:	f7fc ff0a 	bl	8000b94 <HSMManager_Init>

  HSMManager_ProcessCommand();
 8003d80:	f7fc ff84 	bl	8000c8c <HSMManager_ProcessCommand>

  while (1)
 8003d84:	bf00      	nop
 8003d86:	e7fd      	b.n	8003d84 <main+0x94>
 8003d88:	20002930 	.word	0x20002930
 8003d8c:	200023ac 	.word	0x200023ac

08003d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b09c      	sub	sp, #112	@ 0x70
 8003d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d96:	f107 0320 	add.w	r3, r7, #32
 8003d9a:	2250      	movs	r2, #80	@ 0x50
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f012 f93a 	bl	8016018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003da4:	f107 0308 	add.w	r3, r7, #8
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	611a      	str	r2, [r3, #16]
 8003db4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003db6:	4b2f      	ldr	r3, [pc, #188]	@ (8003e74 <SystemClock_Config+0xe4>)
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	4a2e      	ldr	r2, [pc, #184]	@ (8003e74 <SystemClock_Config+0xe4>)
 8003dbc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003dc0:	6113      	str	r3, [r2, #16]
 8003dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e74 <SystemClock_Config+0xe4>)
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003dca:	607b      	str	r3, [r7, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003dce:	bf00      	nop
 8003dd0:	4b28      	ldr	r3, [pc, #160]	@ (8003e74 <SystemClock_Config+0xe4>)
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d1f9      	bne.n	8003dd0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8003ddc:	2329      	movs	r3, #41	@ 0x29
 8003dde:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003de0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003de6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003dec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003df0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003df2:	2302      	movs	r3, #2
 8003df4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8003df6:	2303      	movs	r3, #3
 8003df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8003dfe:	23fa      	movs	r3, #250	@ 0xfa
 8003e00:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003e02:	2302      	movs	r3, #2
 8003e04:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003e06:	2302      	movs	r3, #2
 8003e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8003e0e:	2304      	movs	r3, #4
 8003e10:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e1a:	f107 0320 	add.w	r3, r7, #32
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f005 f872 	bl	8008f08 <HAL_RCC_OscConfig>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003e2a:	f000 fba7 	bl	800457c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e2e:	231f      	movs	r3, #31
 8003e30:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e32:	2303      	movs	r3, #3
 8003e34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e46:	f107 0308 	add.w	r3, r7, #8
 8003e4a:	2105      	movs	r1, #5
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f005 fc93 	bl	8009778 <HAL_RCC_ClockConfig>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8003e58:	f000 fb90 	bl	800457c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8003e5c:	4b06      	ldr	r3, [pc, #24]	@ (8003e78 <SystemClock_Config+0xe8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003e64:	4a04      	ldr	r2, [pc, #16]	@ (8003e78 <SystemClock_Config+0xe8>)
 8003e66:	f043 0320 	orr.w	r3, r3, #32
 8003e6a:	6013      	str	r3, [r2, #0]
}
 8003e6c:	bf00      	nop
 8003e6e:	3770      	adds	r7, #112	@ 0x70
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	44020800 	.word	0x44020800
 8003e78:	40022000 	.word	0x40022000

08003e7c <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE END FLASH_Init 0 */

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8003e80:	f001 fe96 	bl	8005bb0 <HAL_FLASH_Unlock>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <MX_FLASH_Init+0x12>
  {
    Error_Handler();
 8003e8a:	f000 fb77 	bl	800457c <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8003e8e:	f001 feb5 	bl	8005bfc <HAL_FLASH_Lock>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8003e98:	f000 fb70 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 8003e9c:	bf00      	nop
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed8 <MX_HASH_Init+0x38>)
 8003ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8003edc <MX_HASH_Init+0x3c>)
 8003ea8:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_BYTE_SWAP;
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <MX_HASH_Init+0x38>)
 8003eac:	2220      	movs	r2, #32
 8003eae:	605a      	str	r2, [r3, #4]
  hhash.Init.KeySize = 1;
 8003eb0:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <MX_HASH_Init+0x38>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	609a      	str	r2, [r3, #8]
  hhash.Init.pKey = (uint8_t *)pKeyHASH;
 8003eb6:	4b08      	ldr	r3, [pc, #32]	@ (8003ed8 <MX_HASH_Init+0x38>)
 8003eb8:	4a09      	ldr	r2, [pc, #36]	@ (8003ee0 <MX_HASH_Init+0x40>)
 8003eba:	60da      	str	r2, [r3, #12]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 8003ebc:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <MX_HASH_Init+0x38>)
 8003ebe:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8003ec2:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8003ec4:	4804      	ldr	r0, [pc, #16]	@ (8003ed8 <MX_HASH_Init+0x38>)
 8003ec6:	f002 f839 	bl	8005f3c <HAL_HASH_Init>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_HASH_Init+0x34>
  {
    Error_Handler();
 8003ed0:	f000 fb54 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8003ed4:	bf00      	nop
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	200023bc 	.word	0x200023bc
 8003edc:	420c0400 	.word	0x420c0400
 8003ee0:	08018c50 	.word	0x08018c50

08003ee4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <MX_I2C1_Init+0x74>)
 8003eea:	4a1c      	ldr	r2, [pc, #112]	@ (8003f5c <MX_I2C1_Init+0x78>)
 8003eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8003eee:	4b1a      	ldr	r3, [pc, #104]	@ (8003f58 <MX_I2C1_Init+0x74>)
 8003ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f60 <MX_I2C1_Init+0x7c>)
 8003ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003ef4:	4b18      	ldr	r3, [pc, #96]	@ (8003f58 <MX_I2C1_Init+0x74>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003efa:	4b17      	ldr	r3, [pc, #92]	@ (8003f58 <MX_I2C1_Init+0x74>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f00:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <MX_I2C1_Init+0x74>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003f06:	4b14      	ldr	r3, [pc, #80]	@ (8003f58 <MX_I2C1_Init+0x74>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003f0c:	4b12      	ldr	r3, [pc, #72]	@ (8003f58 <MX_I2C1_Init+0x74>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f12:	4b11      	ldr	r3, [pc, #68]	@ (8003f58 <MX_I2C1_Init+0x74>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f18:	4b0f      	ldr	r3, [pc, #60]	@ (8003f58 <MX_I2C1_Init+0x74>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f1e:	480e      	ldr	r0, [pc, #56]	@ (8003f58 <MX_I2C1_Init+0x74>)
 8003f20:	f003 f9bb 	bl	800729a <HAL_I2C_Init>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003f2a:	f000 fb27 	bl	800457c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4809      	ldr	r0, [pc, #36]	@ (8003f58 <MX_I2C1_Init+0x74>)
 8003f32:	f003 fa4d 	bl	80073d0 <HAL_I2CEx_ConfigAnalogFilter>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003f3c:	f000 fb1e 	bl	800457c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003f40:	2100      	movs	r1, #0
 8003f42:	4805      	ldr	r0, [pc, #20]	@ (8003f58 <MX_I2C1_Init+0x74>)
 8003f44:	f003 fa8f 	bl	8007466 <HAL_I2CEx_ConfigDigitalFilter>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003f4e:	f000 fb15 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	200023fc 	.word	0x200023fc
 8003f5c:	40005400 	.word	0x40005400
 8003f60:	10c043e5 	.word	0x10c043e5

08003f64 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003f68:	4b07      	ldr	r3, [pc, #28]	@ (8003f88 <MX_RNG_Init+0x24>)
 8003f6a:	4a08      	ldr	r2, [pc, #32]	@ (8003f8c <MX_RNG_Init+0x28>)
 8003f6c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8003f6e:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <MX_RNG_Init+0x24>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003f74:	4804      	ldr	r0, [pc, #16]	@ (8003f88 <MX_RNG_Init+0x24>)
 8003f76:	f00a ff99 	bl	800eeac <HAL_RNG_Init>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8003f80:	f000 fafc 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20002450 	.word	0x20002450
 8003f8c:	420c0800 	.word	0x420c0800

08003f90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08e      	sub	sp, #56	@ 0x38
 8003f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8003f96:	f107 031c 	add.w	r3, r7, #28
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	605a      	str	r2, [r3, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
 8003fa2:	60da      	str	r2, [r3, #12]
 8003fa4:	611a      	str	r2, [r3, #16]
 8003fa6:	615a      	str	r2, [r3, #20]
 8003fa8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8003faa:	f107 0308 	add.w	r3, r7, #8
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	60da      	str	r2, [r3, #12]
 8003fb8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003fbe:	4b33      	ldr	r3, [pc, #204]	@ (800408c <MX_RTC_Init+0xfc>)
 8003fc0:	4a33      	ldr	r2, [pc, #204]	@ (8004090 <MX_RTC_Init+0x100>)
 8003fc2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003fc4:	4b31      	ldr	r3, [pc, #196]	@ (800408c <MX_RTC_Init+0xfc>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003fca:	4b30      	ldr	r3, [pc, #192]	@ (800408c <MX_RTC_Init+0xfc>)
 8003fcc:	227f      	movs	r2, #127	@ 0x7f
 8003fce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800408c <MX_RTC_Init+0xfc>)
 8003fd2:	22ff      	movs	r2, #255	@ 0xff
 8003fd4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800408c <MX_RTC_Init+0xfc>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800408c <MX_RTC_Init+0xfc>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800408c <MX_RTC_Init+0xfc>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003fe8:	4b28      	ldr	r3, [pc, #160]	@ (800408c <MX_RTC_Init+0xfc>)
 8003fea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003fee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003ff0:	4b26      	ldr	r3, [pc, #152]	@ (800408c <MX_RTC_Init+0xfc>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8003ff6:	4b25      	ldr	r3, [pc, #148]	@ (800408c <MX_RTC_Init+0xfc>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003ffc:	4823      	ldr	r0, [pc, #140]	@ (800408c <MX_RTC_Init+0xfc>)
 8003ffe:	f00b f95d 	bl	800f2bc <HAL_RTC_Init>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004008:	f000 fab8 	bl	800457c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800400c:	2300      	movs	r3, #0
 800400e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8004010:	2300      	movs	r3, #0
 8004012:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8004014:	2300      	movs	r3, #0
 8004016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8004018:	2300      	movs	r3, #0
 800401a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800401c:	f107 031c 	add.w	r3, r7, #28
 8004020:	4619      	mov	r1, r3
 8004022:	481a      	ldr	r0, [pc, #104]	@ (800408c <MX_RTC_Init+0xfc>)
 8004024:	f00b fbb0 	bl	800f788 <HAL_RTCEx_PrivilegeModeSet>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800402e:	f000 faa5 	bl	800457c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004032:	2300      	movs	r3, #0
 8004034:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8004036:	2300      	movs	r3, #0
 8004038:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 800403a:	2300      	movs	r3, #0
 800403c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004042:	2300      	movs	r3, #0
 8004044:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004046:	f107 0308 	add.w	r3, r7, #8
 800404a:	2201      	movs	r2, #1
 800404c:	4619      	mov	r1, r3
 800404e:	480f      	ldr	r0, [pc, #60]	@ (800408c <MX_RTC_Init+0xfc>)
 8004050:	f00b f9b6 	bl	800f3c0 <HAL_RTC_SetTime>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800405a:	f000 fa8f 	bl	800457c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800405e:	2301      	movs	r3, #1
 8004060:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8004062:	2301      	movs	r3, #1
 8004064:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8004066:	2301      	movs	r3, #1
 8004068:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800406a:	2300      	movs	r3, #0
 800406c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	2201      	movs	r2, #1
 8004072:	4619      	mov	r1, r3
 8004074:	4805      	ldr	r0, [pc, #20]	@ (800408c <MX_RTC_Init+0xfc>)
 8004076:	f00b fa35 	bl	800f4e4 <HAL_RTC_SetDate>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8004080:	f000 fa7c 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004084:	bf00      	nop
 8004086:	3738      	adds	r7, #56	@ 0x38
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20002464 	.word	0x20002464
 8004090:	44007800 	.word	0x44007800

08004094 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004098:	4b27      	ldr	r3, [pc, #156]	@ (8004138 <MX_SPI1_Init+0xa4>)
 800409a:	4a28      	ldr	r2, [pc, #160]	@ (800413c <MX_SPI1_Init+0xa8>)
 800409c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800409e:	4b26      	ldr	r3, [pc, #152]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040a0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80040a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80040a6:	4b24      	ldr	r3, [pc, #144]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80040ac:	4b22      	ldr	r3, [pc, #136]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040ae:	2207      	movs	r2, #7
 80040b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040b2:	4b21      	ldr	r3, [pc, #132]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80040be:	4b1e      	ldr	r3, [pc, #120]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80040c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80040c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040c8:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80040cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80040d4:	4b18      	ldr	r3, [pc, #96]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040da:	4b17      	ldr	r3, [pc, #92]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040dc:	2200      	movs	r2, #0
 80040de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80040e0:	4b15      	ldr	r3, [pc, #84]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040e2:	2207      	movs	r2, #7
 80040e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80040e6:	4b14      	ldr	r3, [pc, #80]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80040ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80040ee:	4b12      	ldr	r3, [pc, #72]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80040f4:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80040fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004138 <MX_SPI1_Init+0xa4>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004100:	4b0d      	ldr	r3, [pc, #52]	@ (8004138 <MX_SPI1_Init+0xa4>)
 8004102:	2200      	movs	r2, #0
 8004104:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004106:	4b0c      	ldr	r3, [pc, #48]	@ (8004138 <MX_SPI1_Init+0xa4>)
 8004108:	2200      	movs	r2, #0
 800410a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800410c:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <MX_SPI1_Init+0xa4>)
 800410e:	2200      	movs	r2, #0
 8004110:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004112:	4b09      	ldr	r3, [pc, #36]	@ (8004138 <MX_SPI1_Init+0xa4>)
 8004114:	2200      	movs	r2, #0
 8004116:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8004118:	4b07      	ldr	r3, [pc, #28]	@ (8004138 <MX_SPI1_Init+0xa4>)
 800411a:	2200      	movs	r2, #0
 800411c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800411e:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <MX_SPI1_Init+0xa4>)
 8004120:	2200      	movs	r2, #0
 8004122:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004124:	4804      	ldr	r0, [pc, #16]	@ (8004138 <MX_SPI1_Init+0xa4>)
 8004126:	f00b fb5d 	bl	800f7e4 <HAL_SPI_Init>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8004130:	f000 fa24 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004134:	bf00      	nop
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20002494 	.word	0x20002494
 800413c:	40013000 	.word	0x40013000

08004140 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004144:	4b22      	ldr	r3, [pc, #136]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 8004146:	4a23      	ldr	r2, [pc, #140]	@ (80041d4 <MX_USART2_UART_Init+0x94>)
 8004148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800414a:	4b21      	ldr	r3, [pc, #132]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 800414c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004152:	4b1f      	ldr	r3, [pc, #124]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 8004154:	2200      	movs	r2, #0
 8004156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004158:	4b1d      	ldr	r3, [pc, #116]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 800415a:	2200      	movs	r2, #0
 800415c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800415e:	4b1c      	ldr	r3, [pc, #112]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 8004160:	2200      	movs	r2, #0
 8004162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004164:	4b1a      	ldr	r3, [pc, #104]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 8004166:	220c      	movs	r2, #12
 8004168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800416a:	4b19      	ldr	r3, [pc, #100]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 800416c:	2200      	movs	r2, #0
 800416e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004170:	4b17      	ldr	r3, [pc, #92]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 8004172:	2200      	movs	r2, #0
 8004174:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004176:	4b16      	ldr	r3, [pc, #88]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 8004178:	2200      	movs	r2, #0
 800417a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800417c:	4b14      	ldr	r3, [pc, #80]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 800417e:	2200      	movs	r2, #0
 8004180:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004182:	4b13      	ldr	r3, [pc, #76]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 8004184:	2200      	movs	r2, #0
 8004186:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004188:	4811      	ldr	r0, [pc, #68]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 800418a:	f00c fa7a 	bl	8010682 <HAL_UART_Init>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004194:	f000 f9f2 	bl	800457c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004198:	2100      	movs	r1, #0
 800419a:	480d      	ldr	r0, [pc, #52]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 800419c:	f00c ffa6 	bl	80110ec <HAL_UARTEx_SetTxFifoThreshold>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80041a6:	f000 f9e9 	bl	800457c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041aa:	2100      	movs	r1, #0
 80041ac:	4808      	ldr	r0, [pc, #32]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 80041ae:	f00c ffdb 	bl	8011168 <HAL_UARTEx_SetRxFifoThreshold>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80041b8:	f000 f9e0 	bl	800457c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80041bc:	4804      	ldr	r0, [pc, #16]	@ (80041d0 <MX_USART2_UART_Init+0x90>)
 80041be:	f00c ff5c 	bl	801107a <HAL_UARTEx_DisableFifoMode>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80041c8:	f000 f9d8 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80041cc:	bf00      	nop
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20002524 	.word	0x20002524
 80041d4:	40004400 	.word	0x40004400

080041d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80041dc:	4b22      	ldr	r3, [pc, #136]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 80041de:	4a23      	ldr	r2, [pc, #140]	@ (800426c <MX_USART6_UART_Init+0x94>)
 80041e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80041e2:	4b21      	ldr	r3, [pc, #132]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 80041e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80041e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80041ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80041f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80041f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80041fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 80041fe:	220c      	movs	r2, #12
 8004200:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004202:	4b19      	ldr	r3, [pc, #100]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 8004204:	2200      	movs	r2, #0
 8004206:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004208:	4b17      	ldr	r3, [pc, #92]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 800420a:	2200      	movs	r2, #0
 800420c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800420e:	4b16      	ldr	r3, [pc, #88]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 8004210:	2200      	movs	r2, #0
 8004212:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004214:	4b14      	ldr	r3, [pc, #80]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 8004216:	2200      	movs	r2, #0
 8004218:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800421a:	4b13      	ldr	r3, [pc, #76]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 800421c:	2200      	movs	r2, #0
 800421e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004220:	4811      	ldr	r0, [pc, #68]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 8004222:	f00c fa2e 	bl	8010682 <HAL_UART_Init>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800422c:	f000 f9a6 	bl	800457c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004230:	2100      	movs	r1, #0
 8004232:	480d      	ldr	r0, [pc, #52]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 8004234:	f00c ff5a 	bl	80110ec <HAL_UARTEx_SetTxFifoThreshold>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800423e:	f000 f99d 	bl	800457c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004242:	2100      	movs	r1, #0
 8004244:	4808      	ldr	r0, [pc, #32]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 8004246:	f00c ff8f 	bl	8011168 <HAL_UARTEx_SetRxFifoThreshold>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8004250:	f000 f994 	bl	800457c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8004254:	4804      	ldr	r0, [pc, #16]	@ (8004268 <MX_USART6_UART_Init+0x90>)
 8004256:	f00c ff10 	bl	801107a <HAL_UARTEx_DisableFifoMode>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8004260:	f000 f98c 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004264:	bf00      	nop
 8004266:	bd80      	pop	{r7, pc}
 8004268:	200025b8 	.word	0x200025b8
 800426c:	40006400 	.word	0x40006400

08004270 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8004274:	4b29      	ldr	r3, [pc, #164]	@ (800431c <MX_USB_PCD_Init+0xac>)
 8004276:	4a2a      	ldr	r2, [pc, #168]	@ (8004320 <MX_USB_PCD_Init+0xb0>)
 8004278:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800427c:	4b27      	ldr	r3, [pc, #156]	@ (800431c <MX_USB_PCD_Init+0xac>)
 800427e:	4a29      	ldr	r2, [pc, #164]	@ (8004324 <MX_USB_PCD_Init+0xb4>)
 8004280:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8004282:	4b26      	ldr	r3, [pc, #152]	@ (800431c <MX_USB_PCD_Init+0xac>)
 8004284:	2208      	movs	r2, #8
 8004286:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8004288:	4b24      	ldr	r3, [pc, #144]	@ (800431c <MX_USB_PCD_Init+0xac>)
 800428a:	2202      	movs	r2, #2
 800428c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800428e:	4b23      	ldr	r3, [pc, #140]	@ (800431c <MX_USB_PCD_Init+0xac>)
 8004290:	2202      	movs	r2, #2
 8004292:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8004294:	4b21      	ldr	r3, [pc, #132]	@ (800431c <MX_USB_PCD_Init+0xac>)
 8004296:	2200      	movs	r2, #0
 8004298:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800429a:	4b20      	ldr	r3, [pc, #128]	@ (800431c <MX_USB_PCD_Init+0xac>)
 800429c:	2200      	movs	r2, #0
 800429e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80042a0:	4b1e      	ldr	r3, [pc, #120]	@ (800431c <MX_USB_PCD_Init+0xac>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80042a6:	4b1d      	ldr	r3, [pc, #116]	@ (800431c <MX_USB_PCD_Init+0xac>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80042ac:	4b1b      	ldr	r3, [pc, #108]	@ (800431c <MX_USB_PCD_Init+0xac>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80042b2:	4b1a      	ldr	r3, [pc, #104]	@ (800431c <MX_USB_PCD_Init+0xac>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80042b8:	4b18      	ldr	r3, [pc, #96]	@ (800431c <MX_USB_PCD_Init+0xac>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80042be:	4817      	ldr	r0, [pc, #92]	@ (800431c <MX_USB_PCD_Init+0xac>)
 80042c0:	f003 f980 	bl	80075c4 <HAL_PCD_Init>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 80042ca:	f000 f957 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 80042ce:	2200      	movs	r2, #0
 80042d0:	4915      	ldr	r1, [pc, #84]	@ (8004328 <MX_USB_PCD_Init+0xb8>)
 80042d2:	4813      	ldr	r0, [pc, #76]	@ (8004320 <MX_USB_PCD_Init+0xb0>)
 80042d4:	f010 f8f0 	bl	80144b8 <USBD_Init>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 80042de:	f000 f94d 	bl	800457c <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80042e2:	4912      	ldr	r1, [pc, #72]	@ (800432c <MX_USB_PCD_Init+0xbc>)
 80042e4:	480e      	ldr	r0, [pc, #56]	@ (8004320 <MX_USB_PCD_Init+0xb0>)
 80042e6:	f010 f917 	bl	8014518 <USBD_RegisterClass>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 80042f0:	f000 f944 	bl	800457c <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 80042f4:	490e      	ldr	r1, [pc, #56]	@ (8004330 <MX_USB_PCD_Init+0xc0>)
 80042f6:	480a      	ldr	r0, [pc, #40]	@ (8004320 <MX_USB_PCD_Init+0xb0>)
 80042f8:	f00f fb96 	bl	8013a28 <USBD_CDC_RegisterInterface>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8004302:	f000 f93b 	bl	800457c <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004306:	4806      	ldr	r0, [pc, #24]	@ (8004320 <MX_USB_PCD_Init+0xb0>)
 8004308:	f010 f93c 	bl	8014584 <USBD_Start>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8004312:	f000 f933 	bl	800457c <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	2000264c 	.word	0x2000264c
 8004320:	20002930 	.word	0x20002930
 8004324:	40016000 	.word	0x40016000
 8004328:	200000d4 	.word	0x200000d4
 800432c:	20000038 	.word	0x20000038
 8004330:	200000b8 	.word	0x200000b8

08004334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	@ 0x30
 8004338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800433a:	f107 031c 	add.w	r3, r7, #28
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	60da      	str	r2, [r3, #12]
 8004348:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800434a:	4b85      	ldr	r3, [pc, #532]	@ (8004560 <MX_GPIO_Init+0x22c>)
 800434c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004350:	4a83      	ldr	r2, [pc, #524]	@ (8004560 <MX_GPIO_Init+0x22c>)
 8004352:	f043 0310 	orr.w	r3, r3, #16
 8004356:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800435a:	4b81      	ldr	r3, [pc, #516]	@ (8004560 <MX_GPIO_Init+0x22c>)
 800435c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004368:	4b7d      	ldr	r3, [pc, #500]	@ (8004560 <MX_GPIO_Init+0x22c>)
 800436a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800436e:	4a7c      	ldr	r2, [pc, #496]	@ (8004560 <MX_GPIO_Init+0x22c>)
 8004370:	f043 0304 	orr.w	r3, r3, #4
 8004374:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004378:	4b79      	ldr	r3, [pc, #484]	@ (8004560 <MX_GPIO_Init+0x22c>)
 800437a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004386:	4b76      	ldr	r3, [pc, #472]	@ (8004560 <MX_GPIO_Init+0x22c>)
 8004388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800438c:	4a74      	ldr	r2, [pc, #464]	@ (8004560 <MX_GPIO_Init+0x22c>)
 800438e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004392:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004396:	4b72      	ldr	r3, [pc, #456]	@ (8004560 <MX_GPIO_Init+0x22c>)
 8004398:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800439c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a4:	4b6e      	ldr	r3, [pc, #440]	@ (8004560 <MX_GPIO_Init+0x22c>)
 80043a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043aa:	4a6d      	ldr	r2, [pc, #436]	@ (8004560 <MX_GPIO_Init+0x22c>)
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80043b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004560 <MX_GPIO_Init+0x22c>)
 80043b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c2:	4b67      	ldr	r3, [pc, #412]	@ (8004560 <MX_GPIO_Init+0x22c>)
 80043c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043c8:	4a65      	ldr	r2, [pc, #404]	@ (8004560 <MX_GPIO_Init+0x22c>)
 80043ca:	f043 0302 	orr.w	r3, r3, #2
 80043ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80043d2:	4b63      	ldr	r3, [pc, #396]	@ (8004560 <MX_GPIO_Init+0x22c>)
 80043d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043e0:	4b5f      	ldr	r3, [pc, #380]	@ (8004560 <MX_GPIO_Init+0x22c>)
 80043e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004560 <MX_GPIO_Init+0x22c>)
 80043e8:	f043 0308 	orr.w	r3, r3, #8
 80043ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80043f0:	4b5b      	ldr	r3, [pc, #364]	@ (8004560 <MX_GPIO_Init+0x22c>)
 80043f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80043fe:	4b58      	ldr	r3, [pc, #352]	@ (8004560 <MX_GPIO_Init+0x22c>)
 8004400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004404:	4a56      	ldr	r2, [pc, #344]	@ (8004560 <MX_GPIO_Init+0x22c>)
 8004406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800440a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800440e:	4b54      	ldr	r3, [pc, #336]	@ (8004560 <MX_GPIO_Init+0x22c>)
 8004410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800441c:	2200      	movs	r2, #0
 800441e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004422:	4850      	ldr	r0, [pc, #320]	@ (8004564 <MX_GPIO_Init+0x230>)
 8004424:	f001 fd58 	bl	8005ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004428:	2332      	movs	r3, #50	@ 0x32
 800442a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442c:	2302      	movs	r3, #2
 800442e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004430:	2300      	movs	r3, #0
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004434:	2302      	movs	r3, #2
 8004436:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004438:	230b      	movs	r3, #11
 800443a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800443c:	f107 031c 	add.w	r3, r7, #28
 8004440:	4619      	mov	r1, r3
 8004442:	4849      	ldr	r0, [pc, #292]	@ (8004568 <MX_GPIO_Init+0x234>)
 8004444:	f001 fbf6 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004448:	2384      	movs	r3, #132	@ 0x84
 800444a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444c:	2302      	movs	r3, #2
 800444e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004450:	2300      	movs	r3, #0
 8004452:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004454:	2302      	movs	r3, #2
 8004456:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004458:	230b      	movs	r3, #11
 800445a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445c:	f107 031c 	add.w	r3, r7, #28
 8004460:	4619      	mov	r1, r3
 8004462:	4842      	ldr	r0, [pc, #264]	@ (800456c <MX_GPIO_Init+0x238>)
 8004464:	f001 fbe6 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8004468:	2310      	movs	r3, #16
 800446a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800446c:	2303      	movs	r3, #3
 800446e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	2300      	movs	r3, #0
 8004472:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8004474:	f107 031c 	add.w	r3, r7, #28
 8004478:	4619      	mov	r1, r3
 800447a:	483c      	ldr	r0, [pc, #240]	@ (800456c <MX_GPIO_Init+0x238>)
 800447c:	f001 fbda 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004480:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004486:	2302      	movs	r3, #2
 8004488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448a:	2300      	movs	r3, #0
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448e:	2300      	movs	r3, #0
 8004490:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004492:	2307      	movs	r3, #7
 8004494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004496:	f107 031c 	add.w	r3, r7, #28
 800449a:	4619      	mov	r1, r3
 800449c:	4834      	ldr	r0, [pc, #208]	@ (8004570 <MX_GPIO_Init+0x23c>)
 800449e:	f001 fbc9 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 80044a2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80044a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044a8:	2303      	movs	r3, #3
 80044aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b0:	f107 031c 	add.w	r3, r7, #28
 80044b4:	4619      	mov	r1, r3
 80044b6:	482e      	ldr	r0, [pc, #184]	@ (8004570 <MX_GPIO_Init+0x23c>)
 80044b8:	f001 fbbc 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80044bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c2:	2302      	movs	r3, #2
 80044c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044ca:	2302      	movs	r3, #2
 80044cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044ce:	230b      	movs	r3, #11
 80044d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80044d2:	f107 031c 	add.w	r3, r7, #28
 80044d6:	4619      	mov	r1, r3
 80044d8:	4825      	ldr	r0, [pc, #148]	@ (8004570 <MX_GPIO_Init+0x23c>)
 80044da:	f001 fbab 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80044de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e4:	2301      	movs	r3, #1
 80044e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ec:	2300      	movs	r3, #0
 80044ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044f0:	f107 031c 	add.w	r3, r7, #28
 80044f4:	4619      	mov	r1, r3
 80044f6:	481b      	ldr	r0, [pc, #108]	@ (8004564 <MX_GPIO_Init+0x230>)
 80044f8:	f001 fb9c 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80044fc:	2380      	movs	r3, #128	@ 0x80
 80044fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004500:	4b1c      	ldr	r3, [pc, #112]	@ (8004574 <MX_GPIO_Init+0x240>)
 8004502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8004508:	f107 031c 	add.w	r3, r7, #28
 800450c:	4619      	mov	r1, r3
 800450e:	481a      	ldr	r0, [pc, #104]	@ (8004578 <MX_GPIO_Init+0x244>)
 8004510:	f001 fb90 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8004514:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451a:	2302      	movs	r3, #2
 800451c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451e:	2300      	movs	r3, #0
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004522:	2302      	movs	r3, #2
 8004524:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004526:	230b      	movs	r3, #11
 8004528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800452a:	f107 031c 	add.w	r3, r7, #28
 800452e:	4619      	mov	r1, r3
 8004530:	4811      	ldr	r0, [pc, #68]	@ (8004578 <MX_GPIO_Init+0x244>)
 8004532:	f001 fb7f 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8004536:	23c0      	movs	r3, #192	@ 0xc0
 8004538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453a:	2302      	movs	r3, #2
 800453c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	2300      	movs	r3, #0
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004542:	2300      	movs	r3, #0
 8004544:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004546:	2308      	movs	r3, #8
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800454a:	f107 031c 	add.w	r3, r7, #28
 800454e:	4619      	mov	r1, r3
 8004550:	4807      	ldr	r0, [pc, #28]	@ (8004570 <MX_GPIO_Init+0x23c>)
 8004552:	f001 fb6f 	bl	8005c34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004556:	bf00      	nop
 8004558:	3730      	adds	r7, #48	@ 0x30
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	44020c00 	.word	0x44020c00
 8004564:	42020c00 	.word	0x42020c00
 8004568:	42020800 	.word	0x42020800
 800456c:	42020000 	.word	0x42020000
 8004570:	42020400 	.word	0x42020400
 8004574:	10110000 	.word	0x10110000
 8004578:	42021800 	.word	0x42021800

0800457c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004580:	b672      	cpsid	i
}
 8004582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <Error_Handler+0x8>

08004588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 80045a0:	4b0d      	ldr	r3, [pc, #52]	@ (80045d8 <HAL_HASH_MspInit+0x40>)
 80045a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045a6:	4a0c      	ldr	r2, [pc, #48]	@ (80045d8 <HAL_HASH_MspInit+0x40>)
 80045a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80045b0:	4b09      	ldr	r3, [pc, #36]	@ (80045d8 <HAL_HASH_MspInit+0x40>)
 80045b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
    /* HASH interrupt Init */
    HAL_NVIC_SetPriority(HASH_IRQn, 0, 0);
 80045be:	2200      	movs	r2, #0
 80045c0:	2100      	movs	r1, #0
 80045c2:	2075      	movs	r0, #117	@ 0x75
 80045c4:	f001 f986 	bl	80058d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_IRQn);
 80045c8:	2075      	movs	r0, #117	@ 0x75
 80045ca:	f001 f99d 	bl	8005908 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	44020c00 	.word	0x44020c00

080045dc <HAL_HASH_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspDeInit(HASH_HandleTypeDef* hhash)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspDeInit 0 */

  /* USER CODE END HASH_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_HASH_CLK_DISABLE();
 80045e4:	4b07      	ldr	r3, [pc, #28]	@ (8004604 <HAL_HASH_MspDeInit+0x28>)
 80045e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045ea:	4a06      	ldr	r2, [pc, #24]	@ (8004604 <HAL_HASH_MspDeInit+0x28>)
 80045ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80045f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

    /* HASH interrupt DeInit */
    HAL_NVIC_DisableIRQ(HASH_IRQn);
 80045f4:	2075      	movs	r0, #117	@ 0x75
 80045f6:	f001 f995 	bl	8005924 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN HASH_MspDeInit 1 */

  /* USER CODE END HASH_MspDeInit 1 */

}
 80045fa:	bf00      	nop
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	44020c00 	.word	0x44020c00

08004608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b0cc      	sub	sp, #304	@ 0x130
 800460c:	af00      	add	r7, sp, #0
 800460e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004612:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004616:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004618:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	60da      	str	r2, [r3, #12]
 8004626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004628:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800462c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004630:	4618      	mov	r0, r3
 8004632:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004636:	461a      	mov	r2, r3
 8004638:	2100      	movs	r1, #0
 800463a:	f011 fced 	bl	8016018 <memset>
  if(hi2c->Instance==I2C1)
 800463e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004642:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a33      	ldr	r2, [pc, #204]	@ (8004718 <HAL_I2C_MspInit+0x110>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d15e      	bne.n	800470e <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004650:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004654:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004658:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004664:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004668:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800466c:	2200      	movs	r2, #0
 800466e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004672:	f107 0310 	add.w	r3, r7, #16
 8004676:	4618      	mov	r0, r3
 8004678:	f005 fbc0 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8004682:	f7ff ff7b 	bl	800457c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004686:	4b25      	ldr	r3, [pc, #148]	@ (800471c <HAL_I2C_MspInit+0x114>)
 8004688:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800468c:	4a23      	ldr	r2, [pc, #140]	@ (800471c <HAL_I2C_MspInit+0x114>)
 800468e:	f043 0302 	orr.w	r3, r3, #2
 8004692:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004696:	4b21      	ldr	r3, [pc, #132]	@ (800471c <HAL_I2C_MspInit+0x114>)
 8004698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800469c:	f003 0202 	and.w	r2, r3, #2
 80046a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80046a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80046ae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80046b2:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80046b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80046b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046bc:	2312      	movs	r3, #18
 80046be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c8:	2300      	movs	r3, #0
 80046ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046ce:	2304      	movs	r3, #4
 80046d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80046d8:	4619      	mov	r1, r3
 80046da:	4811      	ldr	r0, [pc, #68]	@ (8004720 <HAL_I2C_MspInit+0x118>)
 80046dc:	f001 faaa 	bl	8005c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046e0:	4b0e      	ldr	r3, [pc, #56]	@ (800471c <HAL_I2C_MspInit+0x114>)
 80046e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046e6:	4a0d      	ldr	r2, [pc, #52]	@ (800471c <HAL_I2C_MspInit+0x114>)
 80046e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046ec:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80046f0:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <HAL_I2C_MspInit+0x114>)
 80046f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046f6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80046fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80046fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8004708:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800470c:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800470e:	bf00      	nop
 8004710:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40005400 	.word	0x40005400
 800471c:	44020c00 	.word	0x44020c00
 8004720:	42020400 	.word	0x42020400

08004724 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b0c6      	sub	sp, #280	@ 0x118
 8004728:	af00      	add	r7, sp, #0
 800472a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800472e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004732:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004734:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800473c:	4618      	mov	r0, r3
 800473e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004742:	461a      	mov	r2, r3
 8004744:	2100      	movs	r1, #0
 8004746:	f011 fc67 	bl	8016018 <memset>
  if(hrng->Instance==RNG)
 800474a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800474e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1d      	ldr	r2, [pc, #116]	@ (80047cc <HAL_RNG_MspInit+0xa8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d131      	bne.n	80047c0 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800475c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004760:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8004764:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8004770:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004778:	2200      	movs	r2, #0
 800477a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800477e:	f107 0310 	add.w	r3, r7, #16
 8004782:	4618      	mov	r0, r3
 8004784:	f005 fb3a 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 800478e:	f7ff fef5 	bl	800457c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004792:	4b0f      	ldr	r3, [pc, #60]	@ (80047d0 <HAL_RNG_MspInit+0xac>)
 8004794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004798:	4a0d      	ldr	r2, [pc, #52]	@ (80047d0 <HAL_RNG_MspInit+0xac>)
 800479a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800479e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047a2:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <HAL_RNG_MspInit+0xac>)
 80047a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047a8:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80047ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80047b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80047ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80047be:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80047c0:	bf00      	nop
 80047c2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	420c0800 	.word	0x420c0800
 80047d0:	44020c00 	.word	0x44020c00

080047d4 <HAL_RNG_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspDeInit(RNG_HandleTypeDef* hrng)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a08      	ldr	r2, [pc, #32]	@ (8004804 <HAL_RNG_MspDeInit+0x30>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d107      	bne.n	80047f6 <HAL_RNG_MspDeInit+0x22>
  {
  /* USER CODE BEGIN RNG_MspDeInit 0 */

  /* USER CODE END RNG_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RNG_CLK_DISABLE();
 80047e6:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <HAL_RNG_MspDeInit+0x34>)
 80047e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047ec:	4a06      	ldr	r2, [pc, #24]	@ (8004808 <HAL_RNG_MspDeInit+0x34>)
 80047ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }

}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	420c0800 	.word	0x420c0800
 8004808:	44020c00 	.word	0x44020c00

0800480c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b0c6      	sub	sp, #280	@ 0x118
 8004810:	af00      	add	r7, sp, #0
 8004812:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004816:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800481a:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800481c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004824:	4618      	mov	r0, r3
 8004826:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800482a:	461a      	mov	r2, r3
 800482c:	2100      	movs	r1, #0
 800482e:	f011 fbf3 	bl	8016018 <memset>
  if(hrtc->Instance==RTC)
 8004832:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004836:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a21      	ldr	r2, [pc, #132]	@ (80048c4 <HAL_RTC_MspInit+0xb8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d13a      	bne.n	80048ba <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004844:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004848:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 800484c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004858:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800485c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004864:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004868:	f107 0310 	add.w	r3, r7, #16
 800486c:	4618      	mov	r0, r3
 800486e:	f005 fac5 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8004878:	f7ff fe80 	bl	800457c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800487c:	4b12      	ldr	r3, [pc, #72]	@ (80048c8 <HAL_RTC_MspInit+0xbc>)
 800487e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004882:	4a11      	ldr	r2, [pc, #68]	@ (80048c8 <HAL_RTC_MspInit+0xbc>)
 8004884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004888:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800488c:	4b0e      	ldr	r3, [pc, #56]	@ (80048c8 <HAL_RTC_MspInit+0xbc>)
 800488e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004892:	4a0d      	ldr	r2, [pc, #52]	@ (80048c8 <HAL_RTC_MspInit+0xbc>)
 8004894:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004898:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800489c:	4b0a      	ldr	r3, [pc, #40]	@ (80048c8 <HAL_RTC_MspInit+0xbc>)
 800489e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048a2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80048a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048b8:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80048ba:	bf00      	nop
 80048bc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	44007800 	.word	0x44007800
 80048c8:	44020c00 	.word	0x44020c00

080048cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b0ce      	sub	sp, #312	@ 0x138
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80048d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80048da:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048dc:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80048f0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80048f4:	4618      	mov	r0, r3
 80048f6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80048fa:	461a      	mov	r2, r3
 80048fc:	2100      	movs	r1, #0
 80048fe:	f011 fb8b 	bl	8016018 <memset>
  if(hspi->Instance==SPI1)
 8004902:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004906:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a60      	ldr	r2, [pc, #384]	@ (8004a90 <HAL_SPI_MspInit+0x1c4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	f040 80b7 	bne.w	8004a84 <HAL_SPI_MspInit+0x1b8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004916:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800491a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800491e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800492a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800492e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004932:	2200      	movs	r2, #0
 8004934:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004938:	f107 0318 	add.w	r3, r7, #24
 800493c:	4618      	mov	r0, r3
 800493e:	f005 fa5d 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8004948:	f7ff fe18 	bl	800457c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800494c:	4b51      	ldr	r3, [pc, #324]	@ (8004a94 <HAL_SPI_MspInit+0x1c8>)
 800494e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004952:	4a50      	ldr	r2, [pc, #320]	@ (8004a94 <HAL_SPI_MspInit+0x1c8>)
 8004954:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004958:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800495c:	4b4d      	ldr	r3, [pc, #308]	@ (8004a94 <HAL_SPI_MspInit+0x1c8>)
 800495e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004962:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004966:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800496a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004974:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004978:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800497a:	4b46      	ldr	r3, [pc, #280]	@ (8004a94 <HAL_SPI_MspInit+0x1c8>)
 800497c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004980:	4a44      	ldr	r2, [pc, #272]	@ (8004a94 <HAL_SPI_MspInit+0x1c8>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800498a:	4b42      	ldr	r3, [pc, #264]	@ (8004a94 <HAL_SPI_MspInit+0x1c8>)
 800498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004990:	f003 0201 	and.w	r2, r3, #1
 8004994:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004998:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80049a6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80049a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004a94 <HAL_SPI_MspInit+0x1c8>)
 80049aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ae:	4a39      	ldr	r2, [pc, #228]	@ (8004a94 <HAL_SPI_MspInit+0x1c8>)
 80049b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049b4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049b8:	4b36      	ldr	r3, [pc, #216]	@ (8004a94 <HAL_SPI_MspInit+0x1c8>)
 80049ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049be:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80049c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80049d4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004a94 <HAL_SPI_MspInit+0x1c8>)
 80049d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049dc:	4a2d      	ldr	r2, [pc, #180]	@ (8004a94 <HAL_SPI_MspInit+0x1c8>)
 80049de:	f043 0302 	orr.w	r3, r3, #2
 80049e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a94 <HAL_SPI_MspInit+0x1c8>)
 80049e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ec:	f003 0202 	and.w	r2, r3, #2
 80049f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80049fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004a02:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004a04:	2320      	movs	r3, #32
 8004a06:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a16:	2300      	movs	r3, #0
 8004a18:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a1c:	2305      	movs	r3, #5
 8004a1e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a22:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8004a26:	4619      	mov	r1, r3
 8004a28:	481b      	ldr	r0, [pc, #108]	@ (8004a98 <HAL_SPI_MspInit+0x1cc>)
 8004a2a:	f001 f903 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a36:	2302      	movs	r3, #2
 8004a38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a42:	2300      	movs	r3, #0
 8004a44:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a48:	2305      	movs	r3, #5
 8004a4a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a4e:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8004a52:	4619      	mov	r1, r3
 8004a54:	4811      	ldr	r0, [pc, #68]	@ (8004a9c <HAL_SPI_MspInit+0x1d0>)
 8004a56:	f001 f8ed 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004a5a:	2320      	movs	r3, #32
 8004a5c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a60:	2302      	movs	r3, #2
 8004a62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a72:	2305      	movs	r3, #5
 8004a74:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a78:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4808      	ldr	r0, [pc, #32]	@ (8004aa0 <HAL_SPI_MspInit+0x1d4>)
 8004a80:	f001 f8d8 	bl	8005c34 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004a84:	bf00      	nop
 8004a86:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40013000 	.word	0x40013000
 8004a94:	44020c00 	.word	0x44020c00
 8004a98:	42020000 	.word	0x42020000
 8004a9c:	42021800 	.word	0x42021800
 8004aa0:	42020400 	.word	0x42020400

08004aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b0d0      	sub	sp, #320	@ 0x140
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004aae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004ab2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	605a      	str	r2, [r3, #4]
 8004abe:	609a      	str	r2, [r3, #8]
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ac4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004ac8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004acc:	4618      	mov	r0, r3
 8004ace:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	f011 fa9f 	bl	8016018 <memset>
  if(huart->Instance==USART2)
 8004ada:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004ade:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a7c      	ldr	r2, [pc, #496]	@ (8004cd8 <HAL_UART_MspInit+0x234>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	f040 808a 	bne.w	8004c02 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004aee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004af2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004af6:	f04f 0202 	mov.w	r2, #2
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004b06:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b0e:	f107 0320 	add.w	r3, r7, #32
 8004b12:	4618      	mov	r0, r3
 8004b14:	f005 f972 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8004b1e:	f7ff fd2d 	bl	800457c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b22:	4b6e      	ldr	r3, [pc, #440]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b28:	4a6c      	ldr	r2, [pc, #432]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b2e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004b32:	4b6a      	ldr	r3, [pc, #424]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b38:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8004b3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004b40:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004b4a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004b4e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b50:	4b62      	ldr	r3, [pc, #392]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b56:	4a61      	ldr	r2, [pc, #388]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b60:	4b5e      	ldr	r3, [pc, #376]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b66:	f003 0201 	and.w	r2, r3, #1
 8004b6a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004b6e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004b78:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004b7c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b7e:	4b57      	ldr	r3, [pc, #348]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b84:	4a55      	ldr	r2, [pc, #340]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004b86:	f043 0308 	orr.w	r3, r3, #8
 8004b8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b8e:	4b53      	ldr	r3, [pc, #332]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b94:	f003 0208 	and.w	r2, r3, #8
 8004b98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004b9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004ba6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004baa:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004bac:	2308      	movs	r3, #8
 8004bae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bc4:	2307      	movs	r3, #7
 8004bc6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bca:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4843      	ldr	r0, [pc, #268]	@ (8004ce0 <HAL_UART_MspInit+0x23c>)
 8004bd2:	f001 f82f 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004bd6:	2320      	movs	r3, #32
 8004bd8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004bee:	2307      	movs	r3, #7
 8004bf0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bf4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	483a      	ldr	r0, [pc, #232]	@ (8004ce4 <HAL_UART_MspInit+0x240>)
 8004bfc:	f001 f81a 	bl	8005c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004c00:	e065      	b.n	8004cce <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 8004c02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004c06:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a36      	ldr	r2, [pc, #216]	@ (8004ce8 <HAL_UART_MspInit+0x244>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d15c      	bne.n	8004cce <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004c14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004c18:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8004c1c:	f04f 0220 	mov.w	r2, #32
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8004c28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004c2c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004c30:	2200      	movs	r2, #0
 8004c32:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c34:	f107 0320 	add.w	r3, r7, #32
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f005 f8df 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8004c44:	f7ff fc9a 	bl	800457c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004c48:	4b24      	ldr	r3, [pc, #144]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c4e:	4a23      	ldr	r2, [pc, #140]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004c50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c54:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004c58:	4b20      	ldr	r3, [pc, #128]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c5e:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8004c62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004c66:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004c70:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004c74:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c76:	4b19      	ldr	r3, [pc, #100]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c7c:	4a17      	ldr	r2, [pc, #92]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004c7e:	f043 0304 	orr.w	r3, r3, #4
 8004c82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c86:	4b15      	ldr	r3, [pc, #84]	@ (8004cdc <HAL_UART_MspInit+0x238>)
 8004c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c8c:	f003 0204 	and.w	r2, r3, #4
 8004c90:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004c94:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8004c9e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004ca2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ca4:	23c0      	movs	r3, #192	@ 0xc0
 8004ca6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004caa:	2302      	movs	r3, #2
 8004cac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8004cbc:	2307      	movs	r3, #7
 8004cbe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cc2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4808      	ldr	r0, [pc, #32]	@ (8004cec <HAL_UART_MspInit+0x248>)
 8004cca:	f000 ffb3 	bl	8005c34 <HAL_GPIO_Init>
}
 8004cce:	bf00      	nop
 8004cd0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40004400 	.word	0x40004400
 8004cdc:	44020c00 	.word	0x44020c00
 8004ce0:	42020000 	.word	0x42020000
 8004ce4:	42020c00 	.word	0x42020c00
 8004ce8:	40006400 	.word	0x40006400
 8004cec:	42020800 	.word	0x42020800

08004cf0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b0c6      	sub	sp, #280	@ 0x118
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004cfa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004cfe:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2100      	movs	r1, #0
 8004d12:	f011 f981 	bl	8016018 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8004d16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a22      	ldr	r2, [pc, #136]	@ (8004dac <HAL_PCD_MspInit+0xbc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d13b      	bne.n	8004da0 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004d28:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d2c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0310 	mov.w	r3, #16
 8004d38:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004d3c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d44:	2230      	movs	r2, #48	@ 0x30
 8004d46:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d4a:	f107 0310 	add.w	r3, r7, #16
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f005 f854 	bl	8009dfc <HAL_RCCEx_PeriphCLKConfig>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8004d5a:	f7ff fc0f 	bl	800457c <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8004d5e:	f004 f8c3 	bl	8008ee8 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004d62:	4b13      	ldr	r3, [pc, #76]	@ (8004db0 <HAL_PCD_MspInit+0xc0>)
 8004d64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d68:	4a11      	ldr	r2, [pc, #68]	@ (8004db0 <HAL_PCD_MspInit+0xc0>)
 8004d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d6e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004d72:	4b0f      	ldr	r3, [pc, #60]	@ (8004db0 <HAL_PCD_MspInit+0xc0>)
 8004d74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d78:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8004d7c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004d8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004d8e:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8004d90:	2200      	movs	r2, #0
 8004d92:	2100      	movs	r1, #0
 8004d94:	204a      	movs	r0, #74	@ 0x4a
 8004d96:	f000 fd9d 	bl	80058d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8004d9a:	204a      	movs	r0, #74	@ 0x4a
 8004d9c:	f000 fdb4 	bl	8005908 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8004da0:	bf00      	nop
 8004da2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40016000 	.word	0x40016000
 8004db0:	44020c00 	.word	0x44020c00

08004db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <NMI_Handler+0x4>

08004dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dc0:	bf00      	nop
 8004dc2:	e7fd      	b.n	8004dc0 <HardFault_Handler+0x4>

08004dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dc8:	bf00      	nop
 8004dca:	e7fd      	b.n	8004dc8 <MemManage_Handler+0x4>

08004dcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dd0:	bf00      	nop
 8004dd2:	e7fd      	b.n	8004dd0 <BusFault_Handler+0x4>

08004dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dd8:	bf00      	nop
 8004dda:	e7fd      	b.n	8004dd8 <UsageFault_Handler+0x4>

08004ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004de0:	bf00      	nop
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dea:	b480      	push	{r7}
 8004dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dee:	bf00      	nop
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e0a:	f000 fc1f 	bl	800564c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8004e16:	2000      	movs	r0, #0
 8004e18:	f000 fa78 	bl	800530c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8004e1c:	bf00      	nop
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8004e24:	4802      	ldr	r0, [pc, #8]	@ (8004e30 <USB_DRD_FS_IRQHandler+0x10>)
 8004e26:	f002 fcf0 	bl	800780a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	2000264c 	.word	0x2000264c

08004e34 <HASH_IRQHandler>:

/**
  * @brief This function handles HASH global interrupt.
  */
void HASH_IRQHandler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_IRQn 0 */

  /* USER CODE END HASH_IRQn 0 */
  HAL_HASH_IRQHandler(&hhash);
 8004e38:	4802      	ldr	r0, [pc, #8]	@ (8004e44 <HASH_IRQHandler+0x10>)
 8004e3a:	f001 fa85 	bl	8006348 <HAL_HASH_IRQHandler>
  /* USER CODE BEGIN HASH_IRQn 1 */

  /* USER CODE END HASH_IRQn 1 */
}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200023bc 	.word	0x200023bc

08004e48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	e00a      	b.n	8004e70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e5a:	f3af 8000 	nop.w
 8004e5e:	4601      	mov	r1, r0
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	60ba      	str	r2, [r7, #8]
 8004e66:	b2ca      	uxtb	r2, r1
 8004e68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	dbf0      	blt.n	8004e5a <_read+0x12>
  }

  return len;
 8004e78:	687b      	ldr	r3, [r7, #4]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b086      	sub	sp, #24
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e8e:	2300      	movs	r3, #0
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e009      	b.n	8004ea8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	60ba      	str	r2, [r7, #8]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fabb 	bl	8005418 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	dbf1      	blt.n	8004e94 <_write+0x12>
  }
  return len;
 8004eb0:	687b      	ldr	r3, [r7, #4]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <_close>:

int _close(int file)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ee2:	605a      	str	r2, [r3, #4]
  return 0;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <_isatty>:

int _isatty(int file)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004efa:	2301      	movs	r3, #1
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f2c:	4a14      	ldr	r2, [pc, #80]	@ (8004f80 <_sbrk+0x5c>)
 8004f2e:	4b15      	ldr	r3, [pc, #84]	@ (8004f84 <_sbrk+0x60>)
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f38:	4b13      	ldr	r3, [pc, #76]	@ (8004f88 <_sbrk+0x64>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f40:	4b11      	ldr	r3, [pc, #68]	@ (8004f88 <_sbrk+0x64>)
 8004f42:	4a12      	ldr	r2, [pc, #72]	@ (8004f8c <_sbrk+0x68>)
 8004f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f46:	4b10      	ldr	r3, [pc, #64]	@ (8004f88 <_sbrk+0x64>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d207      	bcs.n	8004f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f54:	f011 f8be 	bl	80160d4 <__errno>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	220c      	movs	r2, #12
 8004f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f62:	e009      	b.n	8004f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f64:	4b08      	ldr	r3, [pc, #32]	@ (8004f88 <_sbrk+0x64>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f6a:	4b07      	ldr	r3, [pc, #28]	@ (8004f88 <_sbrk+0x64>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4413      	add	r3, r2
 8004f72:	4a05      	ldr	r2, [pc, #20]	@ (8004f88 <_sbrk+0x64>)
 8004f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f76:	68fb      	ldr	r3, [r7, #12]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	200a0000 	.word	0x200a0000
 8004f84:	00000500 	.word	0x00000500
 8004f88:	20002c0c 	.word	0x20002c0c
 8004f8c:	20013530 	.word	0x20013530

08004f90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004f96:	4b35      	ldr	r3, [pc, #212]	@ (800506c <SystemInit+0xdc>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9c:	4a33      	ldr	r2, [pc, #204]	@ (800506c <SystemInit+0xdc>)
 8004f9e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004fa2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8004fa6:	4b32      	ldr	r3, [pc, #200]	@ (8005070 <SystemInit+0xe0>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8004fac:	4b30      	ldr	r3, [pc, #192]	@ (8005070 <SystemInit+0xe0>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8005070 <SystemInit+0xe0>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8004fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8005070 <SystemInit+0xe0>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	492c      	ldr	r1, [pc, #176]	@ (8005070 <SystemInit+0xe0>)
 8004fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8005074 <SystemInit+0xe4>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8004fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8005070 <SystemInit+0xe0>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8004fca:	4b29      	ldr	r3, [pc, #164]	@ (8005070 <SystemInit+0xe0>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8004fd0:	4b27      	ldr	r3, [pc, #156]	@ (8005070 <SystemInit+0xe0>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8004fd6:	4b26      	ldr	r3, [pc, #152]	@ (8005070 <SystemInit+0xe0>)
 8004fd8:	4a27      	ldr	r2, [pc, #156]	@ (8005078 <SystemInit+0xe8>)
 8004fda:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8004fdc:	4b24      	ldr	r3, [pc, #144]	@ (8005070 <SystemInit+0xe0>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8004fe2:	4b23      	ldr	r3, [pc, #140]	@ (8005070 <SystemInit+0xe0>)
 8004fe4:	4a24      	ldr	r2, [pc, #144]	@ (8005078 <SystemInit+0xe8>)
 8004fe6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8004fe8:	4b21      	ldr	r3, [pc, #132]	@ (8005070 <SystemInit+0xe0>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8004fee:	4b20      	ldr	r3, [pc, #128]	@ (8005070 <SystemInit+0xe0>)
 8004ff0:	4a21      	ldr	r2, [pc, #132]	@ (8005078 <SystemInit+0xe8>)
 8004ff2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8004ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8005070 <SystemInit+0xe0>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8004ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8005070 <SystemInit+0xe0>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8005070 <SystemInit+0xe0>)
 8005000:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005004:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8005006:	4b1a      	ldr	r3, [pc, #104]	@ (8005070 <SystemInit+0xe0>)
 8005008:	2200      	movs	r2, #0
 800500a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800500c:	4b17      	ldr	r3, [pc, #92]	@ (800506c <SystemInit+0xdc>)
 800500e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005012:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8005014:	4b19      	ldr	r3, [pc, #100]	@ (800507c <SystemInit+0xec>)
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800501c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8005024:	d003      	beq.n	800502e <SystemInit+0x9e>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800502c:	d117      	bne.n	800505e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800502e:	4b13      	ldr	r3, [pc, #76]	@ (800507c <SystemInit+0xec>)
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800503a:	4b10      	ldr	r3, [pc, #64]	@ (800507c <SystemInit+0xec>)
 800503c:	4a10      	ldr	r2, [pc, #64]	@ (8005080 <SystemInit+0xf0>)
 800503e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8005040:	4b0e      	ldr	r3, [pc, #56]	@ (800507c <SystemInit+0xec>)
 8005042:	4a10      	ldr	r2, [pc, #64]	@ (8005084 <SystemInit+0xf4>)
 8005044:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8005046:	4b0d      	ldr	r3, [pc, #52]	@ (800507c <SystemInit+0xec>)
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	4a0c      	ldr	r2, [pc, #48]	@ (800507c <SystemInit+0xec>)
 800504c:	f043 0302 	orr.w	r3, r3, #2
 8005050:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8005052:	4b0a      	ldr	r3, [pc, #40]	@ (800507c <SystemInit+0xec>)
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	4a09      	ldr	r2, [pc, #36]	@ (800507c <SystemInit+0xec>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	61d3      	str	r3, [r2, #28]
  }
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	e000ed00 	.word	0xe000ed00
 8005070:	44020c00 	.word	0x44020c00
 8005074:	eae2eae3 	.word	0xeae2eae3
 8005078:	01010280 	.word	0x01010280
 800507c:	40022000 	.word	0x40022000
 8005080:	08192a3b 	.word	0x08192a3b
 8005084:	4c5d6e7f 	.word	0x4c5d6e7f

08005088 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005088:	480d      	ldr	r0, [pc, #52]	@ (80050c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800508a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800508c:	f7ff ff80 	bl	8004f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005090:	480c      	ldr	r0, [pc, #48]	@ (80050c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005092:	490d      	ldr	r1, [pc, #52]	@ (80050c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005094:	4a0d      	ldr	r2, [pc, #52]	@ (80050cc <LoopForever+0xe>)
  movs r3, #0
 8005096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005098:	e002      	b.n	80050a0 <LoopCopyDataInit>

0800509a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800509a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800509c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800509e:	3304      	adds	r3, #4

080050a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050a4:	d3f9      	bcc.n	800509a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050a6:	4a0a      	ldr	r2, [pc, #40]	@ (80050d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80050a8:	4c0a      	ldr	r4, [pc, #40]	@ (80050d4 <LoopForever+0x16>)
  movs r3, #0
 80050aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050ac:	e001      	b.n	80050b2 <LoopFillZerobss>

080050ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050b0:	3204      	adds	r2, #4

080050b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050b4:	d3fb      	bcc.n	80050ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80050b6:	f011 f813 	bl	80160e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80050ba:	f7fe fe19 	bl	8003cf0 <main>

080050be <LoopForever>:

LoopForever:
    b LoopForever
 80050be:	e7fe      	b.n	80050be <LoopForever>
  ldr   r0, =_estack
 80050c0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80050c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050c8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80050cc:	08018ce4 	.word	0x08018ce4
  ldr r2, =_sbss
 80050d0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80050d4:	20013530 	.word	0x20013530

080050d8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80050d8:	e7fe      	b.n	80050d8 <ADC1_IRQHandler>
	...

080050dc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08c      	sub	sp, #48	@ 0x30
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d009      	beq.n	8005104 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d006      	beq.n	8005104 <BSP_LED_Init+0x28>
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d003      	beq.n	8005104 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80050fc:	f06f 0301 	mvn.w	r3, #1
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005102:	e055      	b.n	80051b0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d10f      	bne.n	800512a <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 800510a:	4b2c      	ldr	r3, [pc, #176]	@ (80051bc <BSP_LED_Init+0xe0>)
 800510c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005110:	4a2a      	ldr	r2, [pc, #168]	@ (80051bc <BSP_LED_Init+0xe0>)
 8005112:	f043 0320 	orr.w	r3, r3, #32
 8005116:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800511a:	4b28      	ldr	r3, [pc, #160]	@ (80051bc <BSP_LED_Init+0xe0>)
 800511c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	e021      	b.n	800516e <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10f      	bne.n	8005150 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8005130:	4b22      	ldr	r3, [pc, #136]	@ (80051bc <BSP_LED_Init+0xe0>)
 8005132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005136:	4a21      	ldr	r2, [pc, #132]	@ (80051bc <BSP_LED_Init+0xe0>)
 8005138:	f043 0302 	orr.w	r3, r3, #2
 800513c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005140:	4b1e      	ldr	r3, [pc, #120]	@ (80051bc <BSP_LED_Init+0xe0>)
 8005142:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	e00e      	b.n	800516e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8005150:	4b1a      	ldr	r3, [pc, #104]	@ (80051bc <BSP_LED_Init+0xe0>)
 8005152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005156:	4a19      	ldr	r2, [pc, #100]	@ (80051bc <BSP_LED_Init+0xe0>)
 8005158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800515c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005160:	4b16      	ldr	r3, [pc, #88]	@ (80051bc <BSP_LED_Init+0xe0>)
 8005162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	4a13      	ldr	r2, [pc, #76]	@ (80051c0 <BSP_LED_Init+0xe4>)
 8005172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005176:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005178:	2301      	movs	r3, #1
 800517a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800517c:	2300      	movs	r3, #0
 800517e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005180:	2303      	movs	r3, #3
 8005182:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	4a0f      	ldr	r2, [pc, #60]	@ (80051c4 <BSP_LED_Init+0xe8>)
 8005188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800518c:	f107 0218 	add.w	r2, r7, #24
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fd4e 	bl	8005c34 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	4a0a      	ldr	r2, [pc, #40]	@ (80051c4 <BSP_LED_Init+0xe8>)
 800519c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	4a07      	ldr	r2, [pc, #28]	@ (80051c0 <BSP_LED_Init+0xe4>)
 80051a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051a8:	2200      	movs	r2, #0
 80051aa:	4619      	mov	r1, r3
 80051ac:	f000 fe94 	bl	8005ed8 <HAL_GPIO_WritePin>
  }

  return ret;
 80051b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3730      	adds	r7, #48	@ 0x30
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	44020c00 	.word	0x44020c00
 80051c0:	08018c6c 	.word	0x08018c6c
 80051c4:	2000000c 	.word	0x2000000c

080051c8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d009      	beq.n	80051f0 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d006      	beq.n	80051f0 <BSP_LED_Toggle+0x28>
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d003      	beq.n	80051f0 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80051e8:	f06f 0301 	mvn.w	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	e00b      	b.n	8005208 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	4a08      	ldr	r2, [pc, #32]	@ (8005214 <BSP_LED_Toggle+0x4c>)
 80051f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	4907      	ldr	r1, [pc, #28]	@ (8005218 <BSP_LED_Toggle+0x50>)
 80051fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f000 fe80 	bl	8005f08 <HAL_GPIO_TogglePin>
  }

  return ret;
 8005208:	68fb      	ldr	r3, [r7, #12]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	2000000c 	.word	0x2000000c
 8005218:	08018c6c 	.word	0x08018c6c

0800521c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	460a      	mov	r2, r1
 8005226:	71fb      	strb	r3, [r7, #7]
 8005228:	4613      	mov	r3, r2
 800522a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800522c:	4b30      	ldr	r3, [pc, #192]	@ (80052f0 <BSP_PB_Init+0xd4>)
 800522e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005232:	4a2f      	ldr	r2, [pc, #188]	@ (80052f0 <BSP_PB_Init+0xd4>)
 8005234:	f043 0304 	orr.w	r3, r3, #4
 8005238:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800523c:	4b2c      	ldr	r3, [pc, #176]	@ (80052f0 <BSP_PB_Init+0xd4>)
 800523e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800524a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800524e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8005250:	2302      	movs	r3, #2
 8005252:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005254:	2302      	movs	r3, #2
 8005256:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005258:	79bb      	ldrb	r3, [r7, #6]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10c      	bne.n	8005278 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	4a23      	ldr	r2, [pc, #140]	@ (80052f4 <BSP_PB_Init+0xd8>)
 8005266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800526a:	f107 020c 	add.w	r2, r7, #12
 800526e:	4611      	mov	r1, r2
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fcdf 	bl	8005c34 <HAL_GPIO_Init>
 8005276:	e036      	b.n	80052e6 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005278:	4b1f      	ldr	r3, [pc, #124]	@ (80052f8 <BSP_PB_Init+0xdc>)
 800527a:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	4a1d      	ldr	r2, [pc, #116]	@ (80052f4 <BSP_PB_Init+0xd8>)
 8005280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005284:	f107 020c 	add.w	r2, r7, #12
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fcd2 	bl	8005c34 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8005290:	79fa      	ldrb	r2, [r7, #7]
 8005292:	4613      	mov	r3, r2
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4a18      	ldr	r2, [pc, #96]	@ (80052fc <BSP_PB_Init+0xe0>)
 800529c:	441a      	add	r2, r3
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	4917      	ldr	r1, [pc, #92]	@ (8005300 <BSP_PB_Init+0xe4>)
 80052a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80052a6:	4619      	mov	r1, r3
 80052a8:	4610      	mov	r0, r2
 80052aa:	f000 fc25 	bl	8005af8 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80052ae:	79fa      	ldrb	r2, [r7, #7]
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4a10      	ldr	r2, [pc, #64]	@ (80052fc <BSP_PB_Init+0xe0>)
 80052ba:	1898      	adds	r0, r3, r2
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	4a11      	ldr	r2, [pc, #68]	@ (8005304 <BSP_PB_Init+0xe8>)
 80052c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c4:	461a      	mov	r2, r3
 80052c6:	2100      	movs	r1, #0
 80052c8:	f000 fbea 	bl	8005aa0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80052cc:	2018      	movs	r0, #24
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	4a0d      	ldr	r2, [pc, #52]	@ (8005308 <BSP_PB_Init+0xec>)
 80052d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d6:	2200      	movs	r2, #0
 80052d8:	4619      	mov	r1, r3
 80052da:	f000 fafb 	bl	80058d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80052de:	2318      	movs	r3, #24
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 fb11 	bl	8005908 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	44020c00 	.word	0x44020c00
 80052f4:	20000018 	.word	0x20000018
 80052f8:	10110000 	.word	0x10110000
 80052fc:	20002c10 	.word	0x20002c10
 8005300:	08018c74 	.word	0x08018c74
 8005304:	2000001c 	.word	0x2000001c
 8005308:	20000020 	.word	0x20000020

0800530c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8005316:	79fa      	ldrb	r2, [r7, #7]
 8005318:	4613      	mov	r3, r2
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4a04      	ldr	r2, [pc, #16]	@ (8005334 <BSP_PB_IRQHandler+0x28>)
 8005322:	4413      	add	r3, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fbfb 	bl	8005b20 <HAL_EXTI_IRQHandler>
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20002c10 	.word	0x20002c10

08005338 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	4603      	mov	r3, r0
 8005340:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	6039      	str	r1, [r7, #0]
 800535a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005366:	f06f 0301 	mvn.w	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e018      	b.n	80053a0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	2294      	movs	r2, #148	@ 0x94
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	4a0d      	ldr	r2, [pc, #52]	@ (80053ac <BSP_COM_Init+0x5c>)
 8005378:	4413      	add	r3, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f000 f870 	bl	8005460 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	2294      	movs	r2, #148	@ 0x94
 8005384:	fb02 f303 	mul.w	r3, r2, r3
 8005388:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <BSP_COM_Init+0x5c>)
 800538a:	4413      	add	r3, r2
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f80e 	bl	80053b0 <MX_USART_Init>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800539a:	f06f 0303 	mvn.w	r3, #3
 800539e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80053a0:	68fb      	ldr	r3, [r7, #12]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20002c1c 	.word	0x20002c1c

080053b0 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80053ba:	4b16      	ldr	r3, [pc, #88]	@ (8005414 <MX_USART_Init+0x64>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	220c      	movs	r2, #12
 80053ce:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	895b      	ldrh	r3, [r3, #10]
 80053d4:	461a      	mov	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	891b      	ldrh	r3, [r3, #8]
 80053e6:	461a      	mov	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	899b      	ldrh	r3, [r3, #12]
 80053f0:	461a      	mov	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80053fc:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f00b f93c 	bl	8010682 <HAL_UART_Init>
 800540a:	4603      	mov	r3, r0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000008 	.word	0x20000008

08005418 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8005420:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <__io_putchar+0x30>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	2394      	movs	r3, #148	@ 0x94
 8005428:	fb02 f303 	mul.w	r3, r2, r3
 800542c:	4a07      	ldr	r2, [pc, #28]	@ (800544c <__io_putchar+0x34>)
 800542e:	1898      	adds	r0, r3, r2
 8005430:	1d39      	adds	r1, r7, #4
 8005432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005436:	2201      	movs	r2, #1
 8005438:	f00b f973 	bl	8010722 <HAL_UART_Transmit>
  return ch;
 800543c:	687b      	ldr	r3, [r7, #4]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20002cb0 	.word	0x20002cb0
 800544c:	20002c1c 	.word	0x20002c1c

08005450 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8005454:	2000      	movs	r0, #0
 8005456:	f7ff ff6f 	bl	8005338 <BSP_PB_Callback>
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	@ 0x28
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8005468:	4b27      	ldr	r3, [pc, #156]	@ (8005508 <COM1_MspInit+0xa8>)
 800546a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800546e:	4a26      	ldr	r2, [pc, #152]	@ (8005508 <COM1_MspInit+0xa8>)
 8005470:	f043 0308 	orr.w	r3, r3, #8
 8005474:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005478:	4b23      	ldr	r3, [pc, #140]	@ (8005508 <COM1_MspInit+0xa8>)
 800547a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8005486:	4b20      	ldr	r3, [pc, #128]	@ (8005508 <COM1_MspInit+0xa8>)
 8005488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800548c:	4a1e      	ldr	r2, [pc, #120]	@ (8005508 <COM1_MspInit+0xa8>)
 800548e:	f043 0308 	orr.w	r3, r3, #8
 8005492:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005496:	4b1c      	ldr	r3, [pc, #112]	@ (8005508 <COM1_MspInit+0xa8>)
 8005498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80054a4:	4b18      	ldr	r3, [pc, #96]	@ (8005508 <COM1_MspInit+0xa8>)
 80054a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054aa:	4a17      	ldr	r2, [pc, #92]	@ (8005508 <COM1_MspInit+0xa8>)
 80054ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054b0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80054b4:	4b14      	ldr	r3, [pc, #80]	@ (8005508 <COM1_MspInit+0xa8>)
 80054b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054be:	60bb      	str	r3, [r7, #8]
 80054c0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80054c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054c6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80054c8:	2302      	movs	r3, #2
 80054ca:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80054cc:	2302      	movs	r3, #2
 80054ce:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80054d0:	2301      	movs	r3, #1
 80054d2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80054d4:	2307      	movs	r3, #7
 80054d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80054d8:	f107 0314 	add.w	r3, r7, #20
 80054dc:	4619      	mov	r1, r3
 80054de:	480b      	ldr	r0, [pc, #44]	@ (800550c <COM1_MspInit+0xac>)
 80054e0:	f000 fba8 	bl	8005c34 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80054e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054e8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80054ea:	2302      	movs	r3, #2
 80054ec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80054ee:	2307      	movs	r3, #7
 80054f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80054f2:	f107 0314 	add.w	r3, r7, #20
 80054f6:	4619      	mov	r1, r3
 80054f8:	4804      	ldr	r0, [pc, #16]	@ (800550c <COM1_MspInit+0xac>)
 80054fa:	f000 fb9b 	bl	8005c34 <HAL_GPIO_Init>
}
 80054fe:	bf00      	nop
 8005500:	3728      	adds	r7, #40	@ 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	44020c00 	.word	0x44020c00
 800550c:	42020c00 	.word	0x42020c00

08005510 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005514:	2003      	movs	r0, #3
 8005516:	f000 f9d2 	bl	80058be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800551a:	f004 fae5 	bl	8009ae8 <HAL_RCC_GetSysClockFreq>
 800551e:	4602      	mov	r2, r0
 8005520:	4b0c      	ldr	r3, [pc, #48]	@ (8005554 <HAL_Init+0x44>)
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	490b      	ldr	r1, [pc, #44]	@ (8005558 <HAL_Init+0x48>)
 800552a:	5ccb      	ldrb	r3, [r1, r3]
 800552c:	fa22 f303 	lsr.w	r3, r2, r3
 8005530:	4a0a      	ldr	r2, [pc, #40]	@ (800555c <HAL_Init+0x4c>)
 8005532:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005534:	2004      	movs	r0, #4
 8005536:	f000 fa25 	bl	8005984 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800553a:	200f      	movs	r0, #15
 800553c:	f000 f810 	bl	8005560 <HAL_InitTick>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e002      	b.n	8005550 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800554a:	f7ff f81d 	bl	8004588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	bd80      	pop	{r7, pc}
 8005554:	44020c00 	.word	0x44020c00
 8005558:	08018c54 	.word	0x08018c54
 800555c:	20000004 	.word	0x20000004

08005560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800556c:	4b33      	ldr	r3, [pc, #204]	@ (800563c <HAL_InitTick+0xdc>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e05c      	b.n	8005632 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8005578:	4b31      	ldr	r3, [pc, #196]	@ (8005640 <HAL_InitTick+0xe0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b04      	cmp	r3, #4
 8005582:	d10c      	bne.n	800559e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8005584:	4b2f      	ldr	r3, [pc, #188]	@ (8005644 <HAL_InitTick+0xe4>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4b2c      	ldr	r3, [pc, #176]	@ (800563c <HAL_InitTick+0xdc>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	4619      	mov	r1, r3
 800558e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005592:	fbb3 f3f1 	udiv	r3, r3, r1
 8005596:	fbb2 f3f3 	udiv	r3, r2, r3
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	e037      	b.n	800560e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800559e:	f000 fa49 	bl	8005a34 <HAL_SYSTICK_GetCLKSourceConfig>
 80055a2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d023      	beq.n	80055f2 <HAL_InitTick+0x92>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d82d      	bhi.n	800560c <HAL_InitTick+0xac>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_InitTick+0x5e>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d00d      	beq.n	80055d8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80055bc:	e026      	b.n	800560c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80055be:	4b21      	ldr	r3, [pc, #132]	@ (8005644 <HAL_InitTick+0xe4>)
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	4b1e      	ldr	r3, [pc, #120]	@ (800563c <HAL_InitTick+0xdc>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	4619      	mov	r1, r3
 80055c8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80055cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80055d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d4:	60fb      	str	r3, [r7, #12]
        break;
 80055d6:	e01a      	b.n	800560e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80055d8:	4b18      	ldr	r3, [pc, #96]	@ (800563c <HAL_InitTick+0xdc>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80055e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80055e6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80055ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ee:	60fb      	str	r3, [r7, #12]
        break;
 80055f0:	e00d      	b.n	800560e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80055f2:	4b12      	ldr	r3, [pc, #72]	@ (800563c <HAL_InitTick+0xdc>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80055fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005600:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	60fb      	str	r3, [r7, #12]
        break;
 800560a:	e000      	b.n	800560e <HAL_InitTick+0xae>
        break;
 800560c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f996 	bl	8005940 <HAL_SYSTICK_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e009      	b.n	8005632 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800561e:	2200      	movs	r2, #0
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	f04f 30ff 	mov.w	r0, #4294967295
 8005626:	f000 f955 	bl	80058d4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800562a:	4a07      	ldr	r2, [pc, #28]	@ (8005648 <HAL_InitTick+0xe8>)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000028 	.word	0x20000028
 8005640:	e000e010 	.word	0xe000e010
 8005644:	20000004 	.word	0x20000004
 8005648:	20000024 	.word	0x20000024

0800564c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005650:	4b06      	ldr	r3, [pc, #24]	@ (800566c <HAL_IncTick+0x20>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <HAL_IncTick+0x24>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4413      	add	r3, r2
 800565c:	4a04      	ldr	r2, [pc, #16]	@ (8005670 <HAL_IncTick+0x24>)
 800565e:	6013      	str	r3, [r2, #0]
}
 8005660:	bf00      	nop
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	20000028 	.word	0x20000028
 8005670:	20002cb4 	.word	0x20002cb4

08005674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  return uwTick;
 8005678:	4b03      	ldr	r3, [pc, #12]	@ (8005688 <HAL_GetTick+0x14>)
 800567a:	681b      	ldr	r3, [r3, #0]
}
 800567c:	4618      	mov	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20002cb4 	.word	0x20002cb4

0800568c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005694:	f7ff ffee 	bl	8005674 <HAL_GetTick>
 8005698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d005      	beq.n	80056b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056a6:	4b0a      	ldr	r3, [pc, #40]	@ (80056d0 <HAL_Delay+0x44>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80056b2:	bf00      	nop
 80056b4:	f7ff ffde 	bl	8005674 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d8f7      	bhi.n	80056b4 <HAL_Delay+0x28>
  {
  }
}
 80056c4:	bf00      	nop
 80056c6:	bf00      	nop
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20000028 	.word	0x20000028

080056d4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80056d8:	4b03      	ldr	r3, [pc, #12]	@ (80056e8 <HAL_GetUIDw0+0x14>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	08fff800 	.word	0x08fff800

080056ec <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80056f0:	4b03      	ldr	r3, [pc, #12]	@ (8005700 <HAL_GetUIDw1+0x14>)
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	08fff804 	.word	0x08fff804

08005704 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005708:	4b03      	ldr	r3, [pc, #12]	@ (8005718 <HAL_GetUIDw2+0x14>)
 800570a:	681b      	ldr	r3, [r3, #0]
}
 800570c:	4618      	mov	r0, r3
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	08fff808 	.word	0x08fff808

0800571c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800572c:	4b0c      	ldr	r3, [pc, #48]	@ (8005760 <__NVIC_SetPriorityGrouping+0x44>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005738:	4013      	ands	r3, r2
 800573a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800574c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800574e:	4a04      	ldr	r2, [pc, #16]	@ (8005760 <__NVIC_SetPriorityGrouping+0x44>)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	60d3      	str	r3, [r2, #12]
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	e000ed00 	.word	0xe000ed00

08005764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005768:	4b04      	ldr	r3, [pc, #16]	@ (800577c <__NVIC_GetPriorityGrouping+0x18>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	0a1b      	lsrs	r3, r3, #8
 800576e:	f003 0307 	and.w	r3, r3, #7
}
 8005772:	4618      	mov	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	e000ed00 	.word	0xe000ed00

08005780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800578a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800578e:	2b00      	cmp	r3, #0
 8005790:	db0b      	blt.n	80057aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	f003 021f 	and.w	r2, r3, #31
 8005798:	4907      	ldr	r1, [pc, #28]	@ (80057b8 <__NVIC_EnableIRQ+0x38>)
 800579a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	2001      	movs	r0, #1
 80057a2:	fa00 f202 	lsl.w	r2, r0, r2
 80057a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	e000e100 	.word	0xe000e100

080057bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	db12      	blt.n	80057f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	f003 021f 	and.w	r2, r3, #31
 80057d4:	490a      	ldr	r1, [pc, #40]	@ (8005800 <__NVIC_DisableIRQ+0x44>)
 80057d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2001      	movs	r0, #1
 80057de:	fa00 f202 	lsl.w	r2, r0, r2
 80057e2:	3320      	adds	r3, #32
 80057e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80057e8:	f3bf 8f4f 	dsb	sy
}
 80057ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80057ee:	f3bf 8f6f 	isb	sy
}
 80057f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	e000e100 	.word	0xe000e100

08005804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	6039      	str	r1, [r7, #0]
 800580e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005814:	2b00      	cmp	r3, #0
 8005816:	db0a      	blt.n	800582e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	b2da      	uxtb	r2, r3
 800581c:	490c      	ldr	r1, [pc, #48]	@ (8005850 <__NVIC_SetPriority+0x4c>)
 800581e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005822:	0112      	lsls	r2, r2, #4
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	440b      	add	r3, r1
 8005828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800582c:	e00a      	b.n	8005844 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	b2da      	uxtb	r2, r3
 8005832:	4908      	ldr	r1, [pc, #32]	@ (8005854 <__NVIC_SetPriority+0x50>)
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	3b04      	subs	r3, #4
 800583c:	0112      	lsls	r2, r2, #4
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	440b      	add	r3, r1
 8005842:	761a      	strb	r2, [r3, #24]
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	e000e100 	.word	0xe000e100
 8005854:	e000ed00 	.word	0xe000ed00

08005858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	@ 0x24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f1c3 0307 	rsb	r3, r3, #7
 8005872:	2b04      	cmp	r3, #4
 8005874:	bf28      	it	cs
 8005876:	2304      	movcs	r3, #4
 8005878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	3304      	adds	r3, #4
 800587e:	2b06      	cmp	r3, #6
 8005880:	d902      	bls.n	8005888 <NVIC_EncodePriority+0x30>
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	3b03      	subs	r3, #3
 8005886:	e000      	b.n	800588a <NVIC_EncodePriority+0x32>
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800588c:	f04f 32ff 	mov.w	r2, #4294967295
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	43da      	mvns	r2, r3
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	401a      	ands	r2, r3
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058a0:	f04f 31ff 	mov.w	r1, #4294967295
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	fa01 f303 	lsl.w	r3, r1, r3
 80058aa:	43d9      	mvns	r1, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058b0:	4313      	orrs	r3, r2
         );
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3724      	adds	r7, #36	@ 0x24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff ff28 	bl	800571c <__NVIC_SetPriorityGrouping>
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80058e2:	f7ff ff3f 	bl	8005764 <__NVIC_GetPriorityGrouping>
 80058e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	6978      	ldr	r0, [r7, #20]
 80058ee:	f7ff ffb3 	bl	8005858 <NVIC_EncodePriority>
 80058f2:	4602      	mov	r2, r0
 80058f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058f8:	4611      	mov	r1, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ff82 	bl	8005804 <__NVIC_SetPriority>
}
 8005900:	bf00      	nop
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff ff32 	bl	8005780 <__NVIC_EnableIRQ>
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800592e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff ff42 	bl	80057bc <__NVIC_DisableIRQ>
}
 8005938:	bf00      	nop
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3b01      	subs	r3, #1
 800594c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005950:	d301      	bcc.n	8005956 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8005952:	2301      	movs	r3, #1
 8005954:	e00d      	b.n	8005972 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8005956:	4a0a      	ldr	r2, [pc, #40]	@ (8005980 <HAL_SYSTICK_Config+0x40>)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3b01      	subs	r3, #1
 800595c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800595e:	4b08      	ldr	r3, [pc, #32]	@ (8005980 <HAL_SYSTICK_Config+0x40>)
 8005960:	2200      	movs	r2, #0
 8005962:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8005964:	4b06      	ldr	r3, [pc, #24]	@ (8005980 <HAL_SYSTICK_Config+0x40>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a05      	ldr	r2, [pc, #20]	@ (8005980 <HAL_SYSTICK_Config+0x40>)
 800596a:	f043 0303 	orr.w	r3, r3, #3
 800596e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	e000e010 	.word	0xe000e010

08005984 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b04      	cmp	r3, #4
 8005990:	d844      	bhi.n	8005a1c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005992:	a201      	add	r2, pc, #4	@ (adr r2, 8005998 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005998:	080059bb 	.word	0x080059bb
 800599c:	080059d9 	.word	0x080059d9
 80059a0:	080059fb 	.word	0x080059fb
 80059a4:	08005a1d 	.word	0x08005a1d
 80059a8:	080059ad 	.word	0x080059ad
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80059ac:	4b1f      	ldr	r3, [pc, #124]	@ (8005a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059b2:	f043 0304 	orr.w	r3, r3, #4
 80059b6:	6013      	str	r3, [r2, #0]
      break;
 80059b8:	e031      	b.n	8005a1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80059ba:	4b1c      	ldr	r3, [pc, #112]	@ (8005a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a1b      	ldr	r2, [pc, #108]	@ (8005a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059c0:	f023 0304 	bic.w	r3, r3, #4
 80059c4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80059c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80059c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059cc:	4a18      	ldr	r2, [pc, #96]	@ (8005a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80059ce:	f023 030c 	bic.w	r3, r3, #12
 80059d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80059d6:	e022      	b.n	8005a1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80059d8:	4b14      	ldr	r3, [pc, #80]	@ (8005a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a13      	ldr	r2, [pc, #76]	@ (8005a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059de:	f023 0304 	bic.w	r3, r3, #4
 80059e2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80059e4:	4b12      	ldr	r3, [pc, #72]	@ (8005a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80059e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059ea:	f023 030c 	bic.w	r3, r3, #12
 80059ee:	4a10      	ldr	r2, [pc, #64]	@ (8005a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80059f0:	f043 0304 	orr.w	r3, r3, #4
 80059f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80059f8:	e011      	b.n	8005a1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80059fa:	4b0c      	ldr	r3, [pc, #48]	@ (8005a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a0b      	ldr	r2, [pc, #44]	@ (8005a2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005a00:	f023 0304 	bic.w	r3, r3, #4
 8005a04:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8005a06:	4b0a      	ldr	r3, [pc, #40]	@ (8005a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005a08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a0c:	f023 030c 	bic.w	r3, r3, #12
 8005a10:	4a07      	ldr	r2, [pc, #28]	@ (8005a30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005a12:	f043 0308 	orr.w	r3, r3, #8
 8005a16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005a1a:	e000      	b.n	8005a1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005a1c:	bf00      	nop
  }
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	e000e010 	.word	0xe000e010
 8005a30:	44020c00 	.word	0x44020c00

08005a34 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8005a3a:	4b17      	ldr	r3, [pc, #92]	@ (8005a98 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8005a46:	2304      	movs	r3, #4
 8005a48:	607b      	str	r3, [r7, #4]
 8005a4a:	e01e      	b.n	8005a8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8005a4c:	4b13      	ldr	r3, [pc, #76]	@ (8005a9c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8005a4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d00f      	beq.n	8005a7e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d80f      	bhi.n	8005a84 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d003      	beq.n	8005a78 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8005a70:	e008      	b.n	8005a84 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005a72:	2300      	movs	r3, #0
 8005a74:	607b      	str	r3, [r7, #4]
        break;
 8005a76:	e008      	b.n	8005a8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	607b      	str	r3, [r7, #4]
        break;
 8005a7c:	e005      	b.n	8005a8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	607b      	str	r3, [r7, #4]
        break;
 8005a82:	e002      	b.n	8005a8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8005a84:	2300      	movs	r3, #0
 8005a86:	607b      	str	r3, [r7, #4]
        break;
 8005a88:	bf00      	nop
    }
  }
  return systick_source;
 8005a8a:	687b      	ldr	r3, [r7, #4]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	e000e010 	.word	0xe000e010
 8005a9c:	44020c00 	.word	0x44020c00

08005aa0 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8005ab2:	7afb      	ldrb	r3, [r7, #11]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d011      	beq.n	8005adc <HAL_EXTI_RegisterCallback+0x3c>
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	dc13      	bgt.n	8005ae4 <HAL_EXTI_RegisterCallback+0x44>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_EXTI_RegisterCallback+0x26>
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d007      	beq.n	8005ad4 <HAL_EXTI_RegisterCallback+0x34>
 8005ac4:	e00e      	b.n	8005ae4 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	609a      	str	r2, [r3, #8]
      break;
 8005ad2:	e00a      	b.n	8005aea <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	605a      	str	r2, [r3, #4]
      break;
 8005ada:	e006      	b.n	8005aea <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	609a      	str	r2, [r3, #8]
      break;
 8005ae2:	e002      	b.n	8005aea <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae8:	bf00      	nop
  }

  return status;
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e003      	b.n	8005b14 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005b12:	2300      	movs	r3, #0
  }
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	0c1b      	lsrs	r3, r3, #16
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 031f 	and.w	r3, r3, #31
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	4b17      	ldr	r3, [pc, #92]	@ (8005ba8 <HAL_EXTI_IRQHandler+0x88>)
 8005b4a:	4413      	add	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4013      	ands	r3, r2
 8005b56:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d009      	beq.n	8005b72 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	4b0d      	ldr	r3, [pc, #52]	@ (8005bac <HAL_EXTI_IRQHandler+0x8c>)
 8005b78:	4413      	add	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4013      	ands	r3, r2
 8005b84:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d009      	beq.n	8005ba0 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	4798      	blx	r3
    }
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	4402200c 	.word	0x4402200c
 8005bac:	44022010 	.word	0x44022010

08005bb0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8005bba:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf0 <HAL_FLASH_Unlock+0x40>)
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00d      	beq.n	8005be2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Control Register access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf0 <HAL_FLASH_Unlock+0x40>)
 8005bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf4 <HAL_FLASH_Unlock+0x44>)
 8005bca:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8005bcc:	4b08      	ldr	r3, [pc, #32]	@ (8005bf0 <HAL_FLASH_Unlock+0x40>)
 8005bce:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf8 <HAL_FLASH_Unlock+0x48>)
 8005bd0:	605a      	str	r2, [r3, #4]

    /* Verify Flash CR is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) != 0U)
 8005bd2:	4b07      	ldr	r3, [pc, #28]	@ (8005bf0 <HAL_FLASH_Unlock+0x40>)
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8005be2:	79fb      	ldrb	r3, [r7, #7]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	40022000 	.word	0x40022000
 8005bf4:	45670123 	.word	0x45670123
 8005bf8:	cdef89ab 	.word	0xcdef89ab

08005bfc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Control Register access */
  SET_BIT(FLASH->NSCR, FLASH_CR_LOCK);
 8005c06:	4b0a      	ldr	r3, [pc, #40]	@ (8005c30 <HAL_FLASH_Lock+0x34>)
 8005c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0a:	4a09      	ldr	r2, [pc, #36]	@ (8005c30 <HAL_FLASH_Lock+0x34>)
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	6293      	str	r3, [r2, #40]	@ 0x28

  /* Verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_CR_LOCK) == 0U)
 8005c12:	4b07      	ldr	r3, [pc, #28]	@ (8005c30 <HAL_FLASH_Lock+0x34>)
 8005c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_FLASH_Lock+0x26>
  {
    status = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8005c22:	79fb      	ldrb	r3, [r7, #7]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	40022000 	.word	0x40022000

08005c34 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005c42:	e136      	b.n	8005eb2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	2101      	movs	r1, #1
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c50:	4013      	ands	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 8128 	beq.w	8005eac <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d003      	beq.n	8005c6c <HAL_GPIO_Init+0x38>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b12      	cmp	r3, #18
 8005c6a:	d125      	bne.n	8005cb8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	08da      	lsrs	r2, r3, #3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3208      	adds	r2, #8
 8005c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c78:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	220f      	movs	r2, #15
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f003 020f 	and.w	r2, r3, #15
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	08da      	lsrs	r2, r3, #3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3208      	adds	r2, #8
 8005cb2:	6979      	ldr	r1, [r7, #20]
 8005cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	2203      	movs	r2, #3
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f003 0203 	and.w	r2, r3, #3
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d00b      	beq.n	8005d0c <HAL_GPIO_Init+0xd8>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d007      	beq.n	8005d0c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d00:	2b11      	cmp	r3, #17
 8005d02:	d003      	beq.n	8005d0c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b12      	cmp	r3, #18
 8005d0a:	d130      	bne.n	8005d6e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	2203      	movs	r2, #3
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4013      	ands	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d42:	2201      	movs	r2, #1
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43db      	mvns	r3, r3
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	091b      	lsrs	r3, r3, #4
 8005d58:	f003 0201 	and.w	r2, r3, #1
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d017      	beq.n	8005da6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	2203      	movs	r2, #3
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43db      	mvns	r3, r3
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d07c      	beq.n	8005eac <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005db2:	4a47      	ldr	r2, [pc, #284]	@ (8005ed0 <HAL_GPIO_Init+0x29c>)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	089b      	lsrs	r3, r3, #2
 8005db8:	3318      	adds	r3, #24
 8005dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dbe:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	220f      	movs	r2, #15
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	0a9a      	lsrs	r2, r3, #10
 8005dda:	4b3e      	ldr	r3, [pc, #248]	@ (8005ed4 <HAL_GPIO_Init+0x2a0>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	f002 0203 	and.w	r2, r2, #3
 8005de4:	00d2      	lsls	r2, r2, #3
 8005de6:	4093      	lsls	r3, r2
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005dee:	4938      	ldr	r1, [pc, #224]	@ (8005ed0 <HAL_GPIO_Init+0x29c>)
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	089b      	lsrs	r3, r3, #2
 8005df4:	3318      	adds	r3, #24
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005dfc:	4b34      	ldr	r3, [pc, #208]	@ (8005ed0 <HAL_GPIO_Init+0x29c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005e20:	4a2b      	ldr	r2, [pc, #172]	@ (8005ed0 <HAL_GPIO_Init+0x29c>)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005e26:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed0 <HAL_GPIO_Init+0x29c>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	43db      	mvns	r3, r3
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4013      	ands	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8005e4a:	4a21      	ldr	r2, [pc, #132]	@ (8005ed0 <HAL_GPIO_Init+0x29c>)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005e50:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed0 <HAL_GPIO_Init+0x29c>)
 8005e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e56:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8005e76:	4a16      	ldr	r2, [pc, #88]	@ (8005ed0 <HAL_GPIO_Init+0x29c>)
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005e7e:	4b14      	ldr	r3, [pc, #80]	@ (8005ed0 <HAL_GPIO_Init+0x29c>)
 8005e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e84:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ed0 <HAL_GPIO_Init+0x29c>)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f47f aec1 	bne.w	8005c44 <HAL_GPIO_Init+0x10>
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	bf00      	nop
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	44022000 	.word	0x44022000
 8005ed4:	002f7f7f 	.word	0x002f7f7f

08005ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	807b      	strh	r3, [r7, #2]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ee8:	787b      	ldrb	r3, [r7, #1]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005eee:	887a      	ldrh	r2, [r7, #2]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ef4:	e002      	b.n	8005efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ef6:	887a      	ldrh	r2, [r7, #2]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f1a:	887a      	ldrh	r2, [r7, #2]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	041a      	lsls	r2, r3, #16
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	43d9      	mvns	r1, r3
 8005f26:	887b      	ldrh	r3, [r7, #2]
 8005f28:	400b      	ands	r3, r1
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	619a      	str	r2, [r3, #24]
}
 8005f30:	bf00      	nop
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e02a      	b.n	8005fa4 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fe fb18 	bl	8004598 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 8005f7e:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6812      	ldr	r2, [r2, #0]
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_HASH_DeInit>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_DeInit(HASH_HandleTypeDef *hhash)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the HASH handle allocation */
  if (hhash == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_HASH_DeInit+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e015      	b.n	8005fea <HAL_HASH_DeInit+0x3e>
  }

  /* Change the default HASH phase */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Reset HashInCount */
  hhash->HashInCount = 0U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	61da      	str	r2, [r3, #28]

  /* Reset multi buffers accumulation flag */
  hhash->Accumulation = 0U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DeInit the low level hardware */
  hhash->MspDeInitCallback(hhash);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_HASH_MspDeInit(hhash);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fe fb02 	bl	80045dc <HAL_HASH_MspDeInit>
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_RESET;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  __HAL_UNLOCK(hhash);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_HASH_Start_IT>:
  * @param  pOutBuffer pointer to the computed digest.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Start_IT(HASH_HandleTypeDef *hhash, const uint8_t *const pInBuffer, uint32_t Size,
                                    uint8_t *const pOutBuffer)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b086      	sub	sp, #24
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
 8005ffe:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_HASH_StateTypeDef temp_state;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_HASH_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e05c      	b.n	80060c4 <HAL_HASH_Start_IT+0xd2>
  }

  /* Check if peripheral is ready to start process or suspended */
  temp_state = hhash->State;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006010:	75bb      	strb	r3, [r7, #22]
  if ((temp_state == HAL_HASH_STATE_READY) || (temp_state == HAL_HASH_STATE_SUSPENDED))
 8006012:	7dbb      	ldrb	r3, [r7, #22]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d002      	beq.n	800601e <HAL_HASH_Start_IT+0x2c>
 8006018:	7dbb      	ldrb	r3, [r7, #22]
 800601a:	2b03      	cmp	r3, #3
 800601c:	d14f      	bne.n	80060be <HAL_HASH_Start_IT+0xcc>
  {
    /* Process Locked */
    __HAL_LOCK(hhash);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006024:	2b01      	cmp	r3, #1
 8006026:	d101      	bne.n	800602c <HAL_HASH_Start_IT+0x3a>
 8006028:	2302      	movs	r3, #2
 800602a:	e04b      	b.n	80060c4 <HAL_HASH_Start_IT+0xd2>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    if (hhash->State == HAL_HASH_STATE_READY)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d128      	bne.n	8006092 <HAL_HASH_Start_IT+0xa0>
    {
      /* Reset HashInCount and Initialize Size, pHashInBuffPtr and pHashOutBuffPtr parameters */
      hhash->HashInCount =  0U;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	61da      	str	r2, [r3, #28]
      hhash->pHashInBuffPtr = pInBuffer;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	615a      	str	r2, [r3, #20]
      hhash->pHashOutBuffPtr = pOutBuffer;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	619a      	str	r2, [r3, #24]
      hhash->Size = Size;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	621a      	str	r2, [r3, #32]

      /* Set HASH mode */
      CLEAR_BIT(hhash->Instance->CR, HASH_CR_MODE);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006066:	601a      	str	r2, [r3, #0]
      /* Reset the HASH processor core */
      MODIFY_REG(hhash->Instance->CR, HASH_CR_INIT, HASH_CR_INIT);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0204 	orr.w	r2, r2, #4
 8006076:	601a      	str	r2, [r3, #0]

      /* Configure the number of valid bits in last word of the message */
      MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (Size % 4U));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f023 011f 	bic.w	r1, r3, #31
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	00da      	lsls	r2, r3, #3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	609a      	str	r2, [r3, #8]
    }
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Set the phase */
    hhash->Phase = HAL_HASH_PHASE_PROCESS;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2202      	movs	r2, #2
 800609e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    /* Enable the specified HASH interrupt*/
    __HAL_HASH_ENABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6a1a      	ldr	r2, [r3, #32]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0203 	orr.w	r2, r2, #3
 80060b0:	621a      	str	r2, [r3, #32]

    status = HASH_WriteData_IT(hhash);
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fa8a 	bl	80065cc <HASH_WriteData_IT>
 80060b8:	4603      	mov	r3, r0
 80060ba:	75fb      	strb	r3, [r7, #23]
 80060bc:	e001      	b.n	80060c2 <HAL_HASH_Start_IT+0xd0>
  }
  else
  {
    status =  HAL_BUSY;
 80060be:	2302      	movs	r3, #2
 80060c0:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_HASH_HMAC_Start>:
  * @param  Timeout specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_HMAC_Start(HASH_HandleTypeDef *hhash, const uint8_t *const pInBuffer, uint32_t Size,
                                      uint8_t *const pOutBuffer, uint32_t Timeout)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
  uint32_t blocksize; /* Block size in bytes */

  /* Check the hash handle allocation */
  if (hhash == NULL)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_HASH_HMAC_Start+0x18>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e12d      	b.n	8006340 <HAL_HASH_HMAC_Start+0x274>
  }

  /* Check if peripheral is ready to start process */
  if (hhash->State == HAL_HASH_STATE_READY)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f040 8126 	bne.w	800633e <HAL_HASH_HMAC_Start+0x272>
  {

    /* Process Locked */
    __HAL_LOCK(hhash);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_HASH_HMAC_Start+0x34>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e11f      	b.n	8006340 <HAL_HASH_HMAC_Start+0x274>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Reset HASH Phase */
    hhash->Phase = HAL_HASH_PHASE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    /* Reset HashInCount and Initialize Size, pHashKeyBuffPtr, pHashInBuffPtr and pHashOutBuffPtr parameters */
    hhash->pHashInBuffPtr = pInBuffer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	615a      	str	r2, [r3, #20]
    hhash->pHashOutBuffPtr = pOutBuffer;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	619a      	str	r2, [r3, #24]
    hhash->pHashKeyBuffPtr =  hhash->Init.pKey;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	625a      	str	r2, [r3, #36]	@ 0x24
    hhash->HashInCount =  0U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	61da      	str	r2, [r3, #28]
    hhash->Size = Size;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	621a      	str	r2, [r3, #32]

    /* Check if key size is larger than block size of the algorithm, accordingly set LKEY and the other setting bits */
    if ((hhash->Init.Algorithm == HASH_ALGOSELECTION_SHA1) ||
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d009      	beq.n	8006154 <HAL_HASH_HMAC_Start+0x88>
        (hhash->Init.Algorithm == HASH_ALGOSELECTION_SHA224) ||
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	691b      	ldr	r3, [r3, #16]
    if ((hhash->Init.Algorithm == HASH_ALGOSELECTION_SHA1) ||
 8006144:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006148:	d004      	beq.n	8006154 <HAL_HASH_HMAC_Start+0x88>
        (hhash->Init.Algorithm == HASH_ALGOSELECTION_SHA256))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	691b      	ldr	r3, [r3, #16]
        (hhash->Init.Algorithm == HASH_ALGOSELECTION_SHA224) ||
 800614e:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006152:	d102      	bne.n	800615a <HAL_HASH_HMAC_Start+0x8e>
    {
      blocksize = BLOCK_64B;
 8006154:	2340      	movs	r3, #64	@ 0x40
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e001      	b.n	800615e <HAL_HASH_HMAC_Start+0x92>
    }
    else
    {
      blocksize = BLOCK_128B;
 800615a:	2380      	movs	r3, #128	@ 0x80
 800615c:	617b      	str	r3, [r7, #20]
    }
    if (hhash->Init.KeySize > blocksize)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	429a      	cmp	r2, r3
 8006166:	d20a      	bcs.n	800617e <HAL_HASH_HMAC_Start+0xb2>
    {
      MODIFY_REG(hhash->Instance->CR, HASH_CR_LKEY | HASH_CR_MODE | HASH_CR_INIT,
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	6812      	ldr	r2, [r2, #0]
 8006172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006176:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	e00b      	b.n	8006196 <HAL_HASH_HMAC_Start+0xca>
                 HASH_ALGOMODE_HMAC | HASH_LONGKEY | HASH_CR_INIT);
    }
    else
    {

      MODIFY_REG(hhash->Instance->CR, HASH_CR_LKEY | HASH_CR_MODE | HASH_CR_INIT,
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006188:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	6812      	ldr	r2, [r2, #0]
 8006190:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006194:	6013      	str	r3, [r2, #0]
                 HASH_ALGOMODE_HMAC | HASH_CR_INIT);
    }

    /* Configure the number of valid bits in last word of the Key */
    MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f023 011f 	bic.w	r1, r3, #31
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 0303 	and.w	r3, r3, #3
 80061a8:	00da      	lsls	r2, r3, #3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	609a      	str	r2, [r3, #8]


    /* Set the phase */
    hhash->Phase = HAL_HASH_PHASE_PROCESS;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* Write Key */
    HASH_WriteData(hhash, hhash->Init.pKey, hhash->Init.KeySize);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68d9      	ldr	r1, [r3, #12]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	461a      	mov	r2, r3
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f978 	bl	80064ba <HASH_WriteData>

    /* Start the Key padding then the Digest calculation */
    SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061d8:	609a      	str	r2, [r3, #8]

    /* Wait for BUSY flag to be cleared */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, Timeout) != HAL_OK)
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	2201      	movs	r2, #1
 80061de:	2108      	movs	r1, #8
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f001 f80b 	bl	80071fc <HASH_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_HASH_HMAC_Start+0x124>
    {
      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e0a7      	b.n	8006340 <HAL_HASH_HMAC_Start+0x274>
    }

    /* Configure the number of valid bits in last word of the message */
    MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (Size % 4U));
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f023 011f 	bic.w	r1, r3, #31
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	00da      	lsls	r2, r3, #3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	609a      	str	r2, [r3, #8]

    /* Write message */
    HASH_WriteData(hhash, pInBuffer, Size);
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f953 	bl	80064ba <HASH_WriteData>

    /* Start the message padding then the Digest calculation */
    SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006222:	609a      	str	r2, [r3, #8]

    /* Wait for BUSY flag to be cleared */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, Timeout) != HAL_OK)
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	2201      	movs	r2, #1
 8006228:	2108      	movs	r1, #8
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 ffe6 	bl	80071fc <HASH_WaitOnFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <HAL_HASH_HMAC_Start+0x16e>
    {
      return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e082      	b.n	8006340 <HAL_HASH_HMAC_Start+0x274>
    }
    /* Configure the number of valid bits in last word of the Key */
    MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f023 011f 	bic.w	r1, r3, #31
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	00da      	lsls	r2, r3, #3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	609a      	str	r2, [r3, #8]

    /* Write Key */
    HASH_WriteData(hhash, hhash->Init.pKey, hhash->Init.KeySize);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	68d9      	ldr	r1, [r3, #12]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	461a      	mov	r2, r3
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f92a 	bl	80064ba <HASH_WriteData>

    /* Start the Key padding then the Digest calculation */
    SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006274:	609a      	str	r2, [r3, #8]

    /* Wait for digest calculation completion status(DCIS) flag to be set */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	2200      	movs	r2, #0
 800627a:	2102      	movs	r1, #2
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 ffbd 	bl	80071fc <HASH_WaitOnFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <HAL_HASH_HMAC_Start+0x1c0>
    {
      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e059      	b.n	8006340 <HAL_HASH_HMAC_Start+0x274>
    }

    /* Read the message digest */
    HASH_GetDigest(hhash, pOutBuffer, HASH_DIGEST_LENGTH(hhash));
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d03d      	beq.n	8006316 <HAL_HASH_HMAC_Start+0x24a>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80062a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062a8:	d033      	beq.n	8006312 <HAL_HASH_HMAC_Start+0x246>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80062b4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80062b8:	d029      	beq.n	800630e <HAL_HASH_HMAC_Start+0x242>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80062c4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80062c8:	d01f      	beq.n	800630a <HAL_HASH_HMAC_Start+0x23e>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80062d4:	f5b3 1fd0 	cmp.w	r3, #1703936	@ 0x1a0000
 80062d8:	d015      	beq.n	8006306 <HAL_HASH_HMAC_Start+0x23a>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80062e4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80062e8:	d00b      	beq.n	8006302 <HAL_HASH_HMAC_Start+0x236>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80062f4:	f5b3 1ff0 	cmp.w	r3, #1966080	@ 0x1e0000
 80062f8:	d101      	bne.n	80062fe <HAL_HASH_HMAC_Start+0x232>
 80062fa:	2340      	movs	r3, #64	@ 0x40
 80062fc:	e00c      	b.n	8006318 <HAL_HASH_HMAC_Start+0x24c>
 80062fe:	2314      	movs	r3, #20
 8006300:	e00a      	b.n	8006318 <HAL_HASH_HMAC_Start+0x24c>
 8006302:	2320      	movs	r3, #32
 8006304:	e008      	b.n	8006318 <HAL_HASH_HMAC_Start+0x24c>
 8006306:	231c      	movs	r3, #28
 8006308:	e006      	b.n	8006318 <HAL_HASH_HMAC_Start+0x24c>
 800630a:	2330      	movs	r3, #48	@ 0x30
 800630c:	e004      	b.n	8006318 <HAL_HASH_HMAC_Start+0x24c>
 800630e:	2320      	movs	r3, #32
 8006310:	e002      	b.n	8006318 <HAL_HASH_HMAC_Start+0x24c>
 8006312:	231c      	movs	r3, #28
 8006314:	e000      	b.n	8006318 <HAL_HASH_HMAC_Start+0x24c>
 8006316:	2314      	movs	r3, #20
 8006318:	461a      	mov	r2, r3
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fc6d 	bl	8006bfc <HASH_GetDigest>

    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Change the HASH phase  */
    hhash->Phase = HAL_HASH_PHASE_READY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Return function status */
    return HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	e000      	b.n	8006340 <HAL_HASH_HMAC_Start+0x274>

  }
  else
  {
    return HAL_BUSY;
 800633e:	2302      	movs	r3, #2
  }
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_HASH_IRQHandler>:
  * @param hhash HASH handle.
  * @note  HAL_HASH_IRQHandler() handles interrupts in HMAC processing as well.
  * @retval None
  */
void HAL_HASH_IRQHandler(HASH_HandleTypeDef *hhash)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t itsource = hhash->Instance->IMR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	617b      	str	r3, [r7, #20]
  uint32_t itflag   = hhash->Instance->SR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	613b      	str	r3, [r7, #16]

  /* If digest is ready */
  if ((itflag & HASH_FLAG_DCIS) == HASH_FLAG_DCIS)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d062      	beq.n	8006430 <HAL_HASH_IRQHandler+0xe8>
  {
    /* Read the digest */
    HASH_GetDigest(hhash, hhash->pHashOutBuffPtr, HASH_DIGEST_LENGTH(hhash));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6999      	ldr	r1, [r3, #24]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d03d      	beq.n	80063f8 <HAL_HASH_IRQHandler+0xb0>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006386:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800638a:	d033      	beq.n	80063f4 <HAL_HASH_IRQHandler+0xac>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006396:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800639a:	d029      	beq.n	80063f0 <HAL_HASH_IRQHandler+0xa8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80063a6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80063aa:	d01f      	beq.n	80063ec <HAL_HASH_IRQHandler+0xa4>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80063b6:	f5b3 1fd0 	cmp.w	r3, #1703936	@ 0x1a0000
 80063ba:	d015      	beq.n	80063e8 <HAL_HASH_IRQHandler+0xa0>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80063c6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80063ca:	d00b      	beq.n	80063e4 <HAL_HASH_IRQHandler+0x9c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80063d6:	f5b3 1ff0 	cmp.w	r3, #1966080	@ 0x1e0000
 80063da:	d101      	bne.n	80063e0 <HAL_HASH_IRQHandler+0x98>
 80063dc:	2340      	movs	r3, #64	@ 0x40
 80063de:	e00c      	b.n	80063fa <HAL_HASH_IRQHandler+0xb2>
 80063e0:	2314      	movs	r3, #20
 80063e2:	e00a      	b.n	80063fa <HAL_HASH_IRQHandler+0xb2>
 80063e4:	2320      	movs	r3, #32
 80063e6:	e008      	b.n	80063fa <HAL_HASH_IRQHandler+0xb2>
 80063e8:	231c      	movs	r3, #28
 80063ea:	e006      	b.n	80063fa <HAL_HASH_IRQHandler+0xb2>
 80063ec:	2330      	movs	r3, #48	@ 0x30
 80063ee:	e004      	b.n	80063fa <HAL_HASH_IRQHandler+0xb2>
 80063f0:	2320      	movs	r3, #32
 80063f2:	e002      	b.n	80063fa <HAL_HASH_IRQHandler+0xb2>
 80063f4:	231c      	movs	r3, #28
 80063f6:	e000      	b.n	80063fa <HAL_HASH_IRQHandler+0xb2>
 80063f8:	2314      	movs	r3, #20
 80063fa:	461a      	mov	r2, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fbfd 	bl	8006bfc <HASH_GetDigest>

    /* Disable Interrupts */
    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6a1a      	ldr	r2, [r3, #32]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0203 	bic.w	r2, r2, #3
 8006410:	621a      	str	r2, [r3, #32]
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Reset HASH state machine */
    hhash->Phase = HAL_HASH_PHASE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    /* Call digest computation complete call back */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
    hhash->DgstCpltCallback(hhash);
#else
    HAL_HASH_DgstCpltCallback(hhash);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f823 	bl	8006476 <HAL_HASH_DgstCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

  }
  /* If Peripheral ready to accept new data */
  if ((itflag & HASH_FLAG_DINIS) == HASH_FLAG_DINIS)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00f      	beq.n	800645a <HAL_HASH_IRQHandler+0x112>
  {
    if ((itsource & HASH_IT_DINI) == HASH_IT_DINI)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <HAL_HASH_IRQHandler+0x112>
    {
      status = HASH_WriteData_IT(hhash);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f8c1 	bl	80065cc <HASH_WriteData_IT>
 800644a:	4603      	mov	r3, r0
 800644c:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_HASH_IRQHandler+0x112>
      {
        /* Call error callback */
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1)
        hhash->ErrorCallback(hhash);
#else
        HAL_HASH_ErrorCallback(hhash);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f818 	bl	800648a <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
      }
    }
  }
}
 800645a:	bf00      	nop
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_HASH_InCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_InCpltCallback(HASH_HandleTypeDef *hhash)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_InCpltCallback() can be implemented in the user file.
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <HAL_HASH_DgstCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_DgstCpltCallback(HASH_HandleTypeDef *hhash)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_DgstCpltCallback() can be implemented in the user file.
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_HASH_ErrorCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_ErrorCallback(HASH_HandleTypeDef *hhash)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_ErrorCallback() can be implemented in the user file.
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_HASH_GetState>:
  * @note   The API yields the current state of the handle (BUSY, READY,...).
  * @param  hhash HASH handle.
  * @retval HAL HASH state
  */
HAL_HASH_StateTypeDef HAL_HASH_GetState(const HASH_HandleTypeDef *hhash)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  return hhash->State;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80064ac:	b2db      	uxtb	r3, r3
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <HASH_WriteData>:
  * @param  pInBuffer pointer to input buffer.
  * @param  Size the size of input buffer in bytes.
  * @retval HAL status
  */
static void HASH_WriteData(HASH_HandleTypeDef *hhash, const uint8_t *pInBuffer, uint32_t Size)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b089      	sub	sp, #36	@ 0x24
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
  uint32_t buffercounter;
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	617b      	str	r3, [r7, #20]
  uint8_t tmp1;
  uint8_t tmp2;
  uint8_t tmp3;

  for (buffercounter = 0U; buffercounter < (Size / 4U) ; buffercounter++)
 80064ca:	2300      	movs	r3, #0
 80064cc:	61fb      	str	r3, [r7, #28]
 80064ce:	e010      	b.n	80064f2 <HASH_WriteData+0x38>
  {
    /* Write input data 4 bytes at a time */
    hhash->Instance->DIN = *(uint32_t *)inputaddr;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	461a      	mov	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6812      	ldr	r2, [r2, #0]
 80064da:	605a      	str	r2, [r3, #4]
    inputaddr += 4U;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	3304      	adds	r3, #4
 80064e0:	617b      	str	r3, [r7, #20]
    hhash->HashInCount += 4U;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	1d1a      	adds	r2, r3, #4
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	61da      	str	r2, [r3, #28]
  for (buffercounter = 0U; buffercounter < (Size / 4U) ; buffercounter++)
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	3301      	adds	r3, #1
 80064f0:	61fb      	str	r3, [r7, #28]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	089b      	lsrs	r3, r3, #2
 80064f6:	69fa      	ldr	r2, [r7, #28]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d3e9      	bcc.n	80064d0 <HASH_WriteData+0x16>
  }

  if ((Size % 4U) != 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d05c      	beq.n	80065c0 <HASH_WriteData+0x106>
  {
    if (hhash->Init.DataType == HASH_HALFWORD_SWAP)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b10      	cmp	r3, #16
 800650c:	d115      	bne.n	800653a <HASH_WriteData+0x80>
    {
      /* Write remaining input data */
      if ((Size % 4U) <= 2U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f003 0303 	and.w	r3, r3, #3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d804      	bhi.n	8006522 <HASH_WriteData+0x68>
      {
        hhash->Instance->DIN = (uint32_t) * (uint16_t *)inputaddr;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	881a      	ldrh	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	605a      	str	r2, [r3, #4]
      }
      if ((Size % 4U) == 3U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	2b03      	cmp	r3, #3
 800652a:	d144      	bne.n	80065b6 <HASH_WriteData+0xfc>
      {
        hhash->Instance->DIN = *(uint32_t *)inputaddr;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	461a      	mov	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6812      	ldr	r2, [r2, #0]
 8006536:	605a      	str	r2, [r3, #4]
 8006538:	e03d      	b.n	80065b6 <HASH_WriteData+0xfc>
      }
    }
    else if ((hhash->Init.DataType == HASH_BYTE_SWAP)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b20      	cmp	r3, #32
 8006540:	d003      	beq.n	800654a <HASH_WriteData+0x90>
             || (hhash->Init.DataType == HASH_BIT_SWAP))  /* byte swap or bit swap or */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b30      	cmp	r3, #48	@ 0x30
 8006548:	d12f      	bne.n	80065aa <HASH_WriteData+0xf0>
    {
      /* Write remaining input data */
      if ((Size % 4U) == 1U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f003 0303 	and.w	r3, r3, #3
 8006550:	2b01      	cmp	r3, #1
 8006552:	d104      	bne.n	800655e <HASH_WriteData+0xa4>
      {
        hhash->Instance->DIN = (uint32_t) * (uint8_t *)inputaddr;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	781a      	ldrb	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	605a      	str	r2, [r3, #4]
      }
      if ((Size % 4U) == 2U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d104      	bne.n	8006572 <HASH_WriteData+0xb8>
      {
        hhash->Instance->DIN = (uint32_t) * (uint16_t *)inputaddr;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	881a      	ldrh	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	605a      	str	r2, [r3, #4]
      }
      if ((Size % 4U) == 3U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	2b03      	cmp	r3, #3
 800657a:	d11c      	bne.n	80065b6 <HASH_WriteData+0xfc>
      {
        tmp1 = *(uint8_t *)inputaddr;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	76fb      	strb	r3, [r7, #27]
        tmp2 = *(((uint8_t *)inputaddr) + 1U);
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	3301      	adds	r3, #1
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	76bb      	strb	r3, [r7, #26]
        tmp3 = *(((uint8_t *)inputaddr) + 2U);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	3302      	adds	r3, #2
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	767b      	strb	r3, [r7, #25]
        hhash->Instance->DIN = ((uint32_t)tmp1) | ((uint32_t)tmp2 << 8U) | ((uint32_t)tmp3 << 16U);
 8006592:	7efa      	ldrb	r2, [r7, #27]
 8006594:	7ebb      	ldrb	r3, [r7, #26]
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	ea42 0103 	orr.w	r1, r2, r3
 800659c:	7e7b      	ldrb	r3, [r7, #25]
 800659e:	041a      	lsls	r2, r3, #16
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]
      if ((Size % 4U) == 3U)
 80065a8:	e005      	b.n	80065b6 <HASH_WriteData+0xfc>
      }
    }
    else
    {
      hhash->Instance->DIN = *(uint32_t *)inputaddr;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	461a      	mov	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	605a      	str	r2, [r3, #4]
    }
    hhash->HashInCount += 4U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	1d1a      	adds	r2, r3, #4
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	61da      	str	r2, [r3, #28]
  }
}
 80065c0:	bf00      	nop
 80065c2:	3724      	adds	r7, #36	@ 0x24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HASH_WriteData_IT>:
  * @brief  Feed the input buffer to the HASH peripheral in interruption mode.
  * @param  hhash HASH handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData_IT(HASH_HandleTypeDef *hhash)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t buffercounter;
  uint32_t count;
  __IO uint32_t keyaddr = (uint32_t)(hhash->pHashKeyBuffPtr);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d8:	613b      	str	r3, [r7, #16]
  __IO uint32_t inputaddr = (uint32_t)(hhash->pHashInBuffPtr);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	60fb      	str	r3, [r7, #12]
  uint32_t nbbytePartialHash  = (((hhash->Instance->SR) >> 16U) * 4U); /* Nb byte  to enter in HASH fifo to trig
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e6:	0c1b      	lsrs	r3, r3, #16
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	617b      	str	r3, [r7, #20]
                                                                      a partial HASH computation*/

  if (hhash->State == HAL_HASH_STATE_BUSY)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	f040 82ea 	bne.w	8006bce <HASH_WriteData_IT+0x602>
  {
    if ((hhash->Instance->CR & HASH_CR_MODE) == 0U)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006604:	2b00      	cmp	r3, #0
 8006606:	f040 80b3 	bne.w	8006770 <HASH_WriteData_IT+0x1a4>
      }
      else
      {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69da      	ldr	r2, [r3, #28]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	441a      	add	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	429a      	cmp	r2, r3
 8006618:	d258      	bcs.n	80066cc <HASH_WriteData_IT+0x100>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 800661a:	2300      	movs	r3, #0
 800661c:	61fb      	str	r3, [r7, #28]
 800661e:	e015      	b.n	800664c <HASH_WriteData_IT+0x80>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	461a      	mov	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6812      	ldr	r2, [r2, #0]
 800662a:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3304      	adds	r3, #4
 8006630:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	1d1a      	adds	r2, r3, #4
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	1d1a      	adds	r2, r3, #4
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	615a      	str	r2, [r3, #20]
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	3304      	adds	r3, #4
 800664a:	61fb      	str	r3, [r7, #28]
 800664c:	69fa      	ldr	r2, [r7, #28]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	429a      	cmp	r2, r3
 8006652:	d3e5      	bcc.n	8006620 <HASH_WriteData_IT+0x54>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8006654:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006658:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	3b01      	subs	r3, #1
 800665e:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d117      	bne.n	8006696 <HASH_WriteData_IT+0xca>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6a1a      	ldr	r2, [r3, #32]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0203 	bic.w	r2, r2, #3
 8006674:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800667a:	f043 0204 	orr.w	r2, r3, #4
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e2ad      	b.n	8006bf2 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0da      	beq.n	800665a <HASH_WriteData_IT+0x8e>
 80066a4:	e2a4      	b.n	8006bf0 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < hhash->Size)
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	461a      	mov	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6812      	ldr	r2, [r2, #0]
 80066b0:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3304      	adds	r3, #4
 80066b6:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	1d1a      	adds	r2, r3, #4
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	1d1a      	adds	r2, r3, #4
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	615a      	str	r2, [r3, #20]
          while ((hhash->HashInCount) < hhash->Size)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d3e6      	bcc.n	80066a6 <HASH_WriteData_IT+0xda>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
          /*Call registered Input complete callback*/
          hhash->InCpltCallback(hhash);
#else
          /*Call legacy weak Input complete callback*/
          HAL_HASH_InCpltCallback(hhash);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff fec2 	bl	8006462 <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
          if (hhash->Accumulation == 0U)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d138      	bne.n	8006758 <HASH_WriteData_IT+0x18c>
          {
            if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	f040 827d 	bne.w	8006bf0 <HASH_WriteData_IT+0x624>
            {
              /* Start the message padding then the Digest calculation */
              SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006704:	609a      	str	r2, [r3, #8]

              /* Wait for HASH_FLAG_DCIS flag to be set */
              count = HASH_TIMEOUTVALUE;
 8006706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800670a:	61bb      	str	r3, [r7, #24]
              do
              {
                count--;
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	3b01      	subs	r3, #1
 8006710:	61bb      	str	r3, [r7, #24]
                if (count == 0U)
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d117      	bne.n	8006748 <HASH_WriteData_IT+0x17c>
                {
                  /* Disable Interrupts */
                  __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6a1a      	ldr	r2, [r3, #32]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0203 	bic.w	r2, r2, #3
 8006726:	621a      	str	r2, [r3, #32]

                  /* Change state */
                  hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800672c:	f043 0204 	orr.w	r2, r3, #4
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	635a      	str	r2, [r3, #52]	@ 0x34
                  hhash->State = HAL_HASH_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                  __HAL_UNLOCK(hhash);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                  return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e254      	b.n	8006bf2 <HASH_WriteData_IT+0x626>
                }
              } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0da      	beq.n	800670c <HASH_WriteData_IT+0x140>
 8006756:	e24b      	b.n	8006bf0 <HASH_WriteData_IT+0x624>
            }
          }
          else
          {
            /* Reset multi buffers accumulation flag */
            hhash->Accumulation = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	63da      	str	r2, [r3, #60]	@ 0x3c
            /* Disable Interrupts */
            __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6a1a      	ldr	r2, [r3, #32]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0201 	bic.w	r2, r2, #1
 800676c:	621a      	str	r2, [r3, #32]
 800676e:	e23f      	b.n	8006bf0 <HASH_WriteData_IT+0x624>
      }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
    }
    else /*HMAC */
    {
      if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2) /* loading input*/
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006776:	2b04      	cmp	r3, #4
 8006778:	f040 80df 	bne.w	800693a <HASH_WriteData_IT+0x36e>
          __HAL_UNLOCK(hhash);
        }
        else
        {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
          if (hhash->Accumulation == 1U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d108      	bne.n	8006796 <HASH_WriteData_IT+0x1ca>
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 0U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 021f 	bic.w	r2, r2, #31
 8006792:	609a      	str	r2, [r3, #8]
 8006794:	e00d      	b.n	80067b2 <HASH_WriteData_IT+0x1e6>
          }
          else
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (hhash->Size % 4U));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f023 011f 	bic.w	r1, r3, #31
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f003 0303 	and.w	r3, r3, #3
 80067a8:	00da      	lsls	r2, r3, #3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	609a      	str	r2, [r3, #8]
          }
          if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69da      	ldr	r2, [r3, #28]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	441a      	add	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d258      	bcs.n	8006874 <HASH_WriteData_IT+0x2a8>
          {
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80067c2:	2300      	movs	r3, #0
 80067c4:	61fb      	str	r3, [r7, #28]
 80067c6:	e015      	b.n	80067f4 <HASH_WriteData_IT+0x228>
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	461a      	mov	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6812      	ldr	r2, [r2, #0]
 80067d2:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3304      	adds	r3, #4
 80067d8:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	1d1a      	adds	r2, r3, #4
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	1d1a      	adds	r2, r3, #4
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	615a      	str	r2, [r3, #20]
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	3304      	adds	r3, #4
 80067f2:	61fb      	str	r3, [r7, #28]
 80067f4:	69fa      	ldr	r2, [r7, #28]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d3e5      	bcc.n	80067c8 <HASH_WriteData_IT+0x1fc>
            }
            /* Wait for HASH_IT_DINI flag to be set */
            count = HASH_TIMEOUTVALUE;
 80067fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006800:	61bb      	str	r3, [r7, #24]
            do
            {
              count--;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	3b01      	subs	r3, #1
 8006806:	61bb      	str	r3, [r7, #24]
              if (count == 0U)
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d117      	bne.n	800683e <HASH_WriteData_IT+0x272>
              {
                /* Disable Interrupts */
                __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6a1a      	ldr	r2, [r3, #32]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0203 	bic.w	r2, r2, #3
 800681c:	621a      	str	r2, [r3, #32]

                /* Change state */
                hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006822:	f043 0204 	orr.w	r2, r3, #4
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	635a      	str	r2, [r3, #52]	@ 0x34
                hhash->State = HAL_HASH_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                __HAL_UNLOCK(hhash);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e1d9      	b.n	8006bf2 <HASH_WriteData_IT+0x626>
              }
            } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0da      	beq.n	8006802 <HASH_WriteData_IT+0x236>
 800684c:	e1d0      	b.n	8006bf0 <HASH_WriteData_IT+0x624>
          else
          {
            while ((hhash->HashInCount) < hhash->Size)
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	461a      	mov	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6812      	ldr	r2, [r2, #0]
 8006858:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3304      	adds	r3, #4
 800685e:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	1d1a      	adds	r2, r3, #4
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	1d1a      	adds	r2, r3, #4
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	615a      	str	r2, [r3, #20]
            while ((hhash->HashInCount) < hhash->Size)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69da      	ldr	r2, [r3, #28]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	429a      	cmp	r2, r3
 800687e:	d3e6      	bcc.n	800684e <HASH_WriteData_IT+0x282>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
            /*Call registered Input complete callback*/
            hhash->InCpltCallback(hhash);
#else
            /*Call legacy weak Input complete callback*/
            HAL_HASH_InCpltCallback(hhash);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff fdee 	bl	8006462 <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

            if (hhash->Accumulation == 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d143      	bne.n	8006916 <HASH_WriteData_IT+0x34a>
            {
              if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b01      	cmp	r3, #1
 800689a:	f040 81a9 	bne.w	8006bf0 <HASH_WriteData_IT+0x624>
              {
                /* Start the message padding then the Digest calculation */
                SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068ac:	609a      	str	r2, [r3, #8]

                /* Wait for HASH_FLAG_BUSY flag to be set */
                count = HASH_TIMEOUTVALUE;
 80068ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80068b2:	61bb      	str	r3, [r7, #24]
                do
                {
                  count--;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	61bb      	str	r3, [r7, #24]
                  if (count == 0U)
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d117      	bne.n	80068f0 <HASH_WriteData_IT+0x324>
                  {
                    /* Disable Interrupts */
                    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6a1a      	ldr	r2, [r3, #32]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0203 	bic.w	r2, r2, #3
 80068ce:	621a      	str	r2, [r3, #32]

                    /* Change state */
                    hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068d4:	f043 0204 	orr.w	r2, r3, #4
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	635a      	str	r2, [r3, #52]	@ 0x34
                    hhash->State = HAL_HASH_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    __HAL_UNLOCK(hhash);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e180      	b.n	8006bf2 <HASH_WriteData_IT+0x626>
                  }
                } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d0da      	beq.n	80068b4 <HASH_WriteData_IT+0x2e8>

                hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2205      	movs	r2, #5
 8006902:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                hhash->HashInCount = 0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	61da      	str	r2, [r3, #28]
                hhash->pHashKeyBuffPtr = hhash->Init.pKey;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	625a      	str	r2, [r3, #36]	@ 0x24
 8006914:	e16c      	b.n	8006bf0 <HASH_WriteData_IT+0x624>
            }

            else
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a1a      	ldr	r2, [r3, #32]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0203 	bic.w	r2, r2, #3
 8006924:	621a      	str	r2, [r3, #32]
              hhash->State = HAL_HASH_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	e15b      	b.n	8006bf2 <HASH_WriteData_IT+0x626>
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
        }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
      }

      else if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3)/* loading Key*/
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006940:	2b05      	cmp	r3, #5
 8006942:	f040 80a1 	bne.w	8006a88 <HASH_WriteData_IT+0x4bc>
      {

        /* Configure the number of valid bits in last word of the Key */
        MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f023 011f 	bic.w	r1, r3, #31
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 0303 	and.w	r3, r3, #3
 8006958:	00da      	lsls	r2, r3, #3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	609a      	str	r2, [r3, #8]

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69da      	ldr	r2, [r3, #28]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	441a      	add	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	429a      	cmp	r2, r3
 8006970:	d253      	bcs.n	8006a1a <HASH_WriteData_IT+0x44e>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	e015      	b.n	80069a4 <HASH_WriteData_IT+0x3d8>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6812      	ldr	r2, [r2, #0]
 8006982:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	3304      	adds	r3, #4
 8006988:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	1d1a      	adds	r2, r3, #4
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	1d1a      	adds	r2, r3, #4
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	3304      	adds	r3, #4
 80069a2:	61fb      	str	r3, [r7, #28]
 80069a4:	69fa      	ldr	r2, [r7, #28]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d3e5      	bcc.n	8006978 <HASH_WriteData_IT+0x3ac>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 80069ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80069b0:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d117      	bne.n	80069ee <HASH_WriteData_IT+0x422>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a1a      	ldr	r2, [r3, #32]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0203 	bic.w	r2, r2, #3
 80069cc:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d2:	f043 0204 	orr.w	r2, r3, #4
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e101      	b.n	8006bf2 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0da      	beq.n	80069b2 <HASH_WriteData_IT+0x3e6>
 80069fc:	e0f8      	b.n	8006bf0 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	461a      	mov	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6812      	ldr	r2, [r2, #0]
 8006a08:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	1d1a      	adds	r2, r3, #4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	61da      	str	r2, [r3, #28]
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	69da      	ldr	r2, [r3, #28]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d3eb      	bcc.n	80069fe <HASH_WriteData_IT+0x432>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a34:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_DCIS flag to be set */
          count = HASH_TIMEOUTVALUE;
 8006a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a3a:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d117      	bne.n	8006a78 <HASH_WriteData_IT+0x4ac>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6a1a      	ldr	r2, [r3, #32]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0203 	bic.w	r2, r2, #3
 8006a56:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5c:	f043 0204 	orr.w	r2, r3, #4
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e0bc      	b.n	8006bf2 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0da      	beq.n	8006a3c <HASH_WriteData_IT+0x470>
 8006a86:	e0b3      	b.n	8006bf0 <HASH_WriteData_IT+0x624>
        }
      }
      else  /*first step , loading key*/
      {

        hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	441a      	add	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d258      	bcs.n	8006b52 <HASH_WriteData_IT+0x586>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	e015      	b.n	8006ad2 <HASH_WriteData_IT+0x506>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6812      	ldr	r2, [r2, #0]
 8006ab0:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	1d1a      	adds	r2, r3, #4
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac6:	1d1a      	adds	r2, r3, #4
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d3e5      	bcc.n	8006aa6 <HASH_WriteData_IT+0x4da>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8006ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ade:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d117      	bne.n	8006b1c <HASH_WriteData_IT+0x550>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a1a      	ldr	r2, [r3, #32]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0203 	bic.w	r2, r2, #3
 8006afa:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b00:	f043 0204 	orr.w	r2, r3, #4
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e06a      	b.n	8006bf2 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0da      	beq.n	8006ae0 <HASH_WriteData_IT+0x514>
 8006b2a:	e061      	b.n	8006bf0 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	1d1a      	adds	r2, r3, #4
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	1d1a      	adds	r2, r3, #4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	625a      	str	r2, [r3, #36]	@ 0x24
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69da      	ldr	r2, [r3, #28]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d3e6      	bcc.n	8006b2c <HASH_WriteData_IT+0x560>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b6c:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_BUSY flag to be set */
          count = HASH_TIMEOUTVALUE;
 8006b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006b72:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d117      	bne.n	8006bb0 <HASH_WriteData_IT+0x5e4>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6a1a      	ldr	r2, [r3, #32]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0203 	bic.w	r2, r2, #3
 8006b8e:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b94:	f043 0204 	orr.w	r2, r3, #4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e020      	b.n	8006bf2 <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d0da      	beq.n	8006b74 <HASH_WriteData_IT+0x5a8>
          /*change Phase to step 2*/
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2204      	movs	r2, #4
 8006bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
          hhash->HashInCount = 0U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	61da      	str	r2, [r3, #28]
 8006bcc:	e010      	b.n	8006bf0 <HASH_WriteData_IT+0x624>
        }
      }
    }
  }
  else if ((hhash->State == HAL_HASH_STATE_SUSPENDED))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d101      	bne.n	8006bde <HASH_WriteData_IT+0x612>
  {
    return HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e009      	b.n	8006bf2 <HASH_WriteData_IT+0x626>
  }
  else
  {
    /* Busy error code field */
    hhash->ErrorCode |= HAL_HASH_ERROR_BUSY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be2:	f043 0201 	orr.w	r2, r3, #1
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
    /*Call registered error callback*/
    hhash->ErrorCallback(hhash);
#else
    /*Call legacy weak error callback*/
    HAL_HASH_ErrorCallback(hhash);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff fc4d 	bl	800648a <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3720      	adds	r7, #32
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
	...

08006bfc <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(const HASH_HandleTypeDef *hhash, const uint8_t *pMsgDigest, uint8_t Size)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b0b7      	sub	sp, #220	@ 0xdc
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	71fb      	strb	r3, [r7, #7]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  switch (Size)
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	2b30      	cmp	r3, #48	@ 0x30
 8006c14:	dc44      	bgt.n	8006ca0 <HASH_GetDigest+0xa4>
 8006c16:	2b14      	cmp	r3, #20
 8006c18:	f2c0 82e7 	blt.w	80071ea <HASH_GetDigest+0x5ee>
 8006c1c:	3b14      	subs	r3, #20
 8006c1e:	2b1c      	cmp	r3, #28
 8006c20:	f200 82e3 	bhi.w	80071ea <HASH_GetDigest+0x5ee>
 8006c24:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <HASH_GetDigest+0x30>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006ca9 	.word	0x08006ca9
 8006c30:	080071eb 	.word	0x080071eb
 8006c34:	080071eb 	.word	0x080071eb
 8006c38:	080071eb 	.word	0x080071eb
 8006c3c:	080071eb 	.word	0x080071eb
 8006c40:	080071eb 	.word	0x080071eb
 8006c44:	080071eb 	.word	0x080071eb
 8006c48:	080071eb 	.word	0x080071eb
 8006c4c:	08006d41 	.word	0x08006d41
 8006c50:	080071eb 	.word	0x080071eb
 8006c54:	080071eb 	.word	0x080071eb
 8006c58:	080071eb 	.word	0x080071eb
 8006c5c:	08006e15 	.word	0x08006e15
 8006c60:	080071eb 	.word	0x080071eb
 8006c64:	080071eb 	.word	0x080071eb
 8006c68:	080071eb 	.word	0x080071eb
 8006c6c:	080071eb 	.word	0x080071eb
 8006c70:	080071eb 	.word	0x080071eb
 8006c74:	080071eb 	.word	0x080071eb
 8006c78:	080071eb 	.word	0x080071eb
 8006c7c:	080071eb 	.word	0x080071eb
 8006c80:	080071eb 	.word	0x080071eb
 8006c84:	080071eb 	.word	0x080071eb
 8006c88:	080071eb 	.word	0x080071eb
 8006c8c:	080071eb 	.word	0x080071eb
 8006c90:	080071eb 	.word	0x080071eb
 8006c94:	080071eb 	.word	0x080071eb
 8006c98:	080071eb 	.word	0x080071eb
 8006c9c:	08006f07 	.word	0x08006f07
 8006ca0:	2b40      	cmp	r3, #64	@ 0x40
 8006ca2:	f000 81d1 	beq.w	8007048 <HASH_GetDigest+0x44c>
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);

      break;
#endif /* defined(HASH_ALGOSELECTION_SHA512)*/
    default:
      break;
 8006ca6:	e2a0      	b.n	80071ea <HASH_GetDigest+0x5ee>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68da      	ldr	r2, [r3, #12]
 8006cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cb2:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
  return __builtin_bswap32(value);
 8006cb6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006cba:	ba12      	rev	r2, r2
 8006cbc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cd2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006cd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006cda:	ba12      	rev	r2, r2
 8006cdc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006cde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695a      	ldr	r2, [r3, #20]
 8006cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cf2:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8006cf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006cfa:	ba12      	rev	r2, r2
 8006cfc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d02:	3304      	adds	r3, #4
 8006d04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d12:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8006d16:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8006d1a:	ba12      	rev	r2, r2
 8006d1c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d22:	3304      	adds	r3, #4
 8006d24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69da      	ldr	r2, [r3, #28]
 8006d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d32:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8006d36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d3a:	ba12      	rev	r2, r2
 8006d3c:	601a      	str	r2, [r3, #0]
      break;
 8006d3e:	e255      	b.n	80071ec <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006d4e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8006d52:	ba12      	rev	r2, r2
 8006d54:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d72:	ba12      	rev	r2, r2
 8006d74:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695a      	ldr	r2, [r3, #20]
 8006d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d8a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006d92:	ba12      	rev	r2, r2
 8006d94:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006d96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006daa:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8006dae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006db2:	ba12      	rev	r2, r2
 8006db4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dba:	3304      	adds	r3, #4
 8006dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69da      	ldr	r2, [r3, #28]
 8006dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dca:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dd2:	ba12      	rev	r2, r2
 8006dd4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dda:	3304      	adds	r3, #4
 8006ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8006de0:	4b98      	ldr	r3, [pc, #608]	@ (8007044 <HASH_GetDigest+0x448>)
 8006de2:	695a      	ldr	r2, [r3, #20]
 8006de4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006de8:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8006dec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006df0:	ba12      	rev	r2, r2
 8006df2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006df4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006df8:	3304      	adds	r3, #4
 8006dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8006dfe:	4b91      	ldr	r3, [pc, #580]	@ (8007044 <HASH_GetDigest+0x448>)
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e06:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8006e0e:	ba12      	rev	r2, r2
 8006e10:	601a      	str	r2, [r3, #0]
      break;
 8006e12:	e1eb      	b.n	80071ec <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e1e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006e22:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006e26:	ba12      	rev	r2, r2
 8006e28:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e2e:	3304      	adds	r3, #4
 8006e30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	691a      	ldr	r2, [r3, #16]
 8006e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e3e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8006e42:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006e46:	ba12      	rev	r2, r2
 8006e48:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e4e:	3304      	adds	r3, #4
 8006e50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695a      	ldr	r2, [r3, #20]
 8006e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e5e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e62:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8006e66:	ba12      	rev	r2, r2
 8006e68:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e6e:	3304      	adds	r3, #4
 8006e70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8006e82:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8006e86:	ba12      	rev	r2, r2
 8006e88:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e8e:	3304      	adds	r3, #4
 8006e90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69da      	ldr	r2, [r3, #28]
 8006e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ea6:	ba12      	rev	r2, r2
 8006ea8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eae:	3304      	adds	r3, #4
 8006eb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8006eb4:	4b63      	ldr	r3, [pc, #396]	@ (8007044 <HASH_GetDigest+0x448>)
 8006eb6:	695a      	ldr	r2, [r3, #20]
 8006eb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ebc:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8006ec0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006ec4:	ba12      	rev	r2, r2
 8006ec6:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006ec8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ecc:	3304      	adds	r3, #4
 8006ece:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8006ed2:	4b5c      	ldr	r3, [pc, #368]	@ (8007044 <HASH_GetDigest+0x448>)
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eda:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006ede:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8006ee2:	ba12      	rev	r2, r2
 8006ee4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006eea:	3304      	adds	r3, #4
 8006eec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8006ef0:	4b54      	ldr	r3, [pc, #336]	@ (8007044 <HASH_GetDigest+0x448>)
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ef8:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8006efc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8006f00:	ba12      	rev	r2, r2
 8006f02:	601a      	str	r2, [r3, #0]
      break;
 8006f04:	e172      	b.n	80071ec <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f10:	657a      	str	r2, [r7, #84]	@ 0x54
 8006f12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f14:	ba12      	rev	r2, r2
 8006f16:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006f18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006f2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f30:	ba12      	rev	r2, r2
 8006f32:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f38:	3304      	adds	r3, #4
 8006f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f48:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006f4a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006f4c:	ba12      	rev	r2, r2
 8006f4e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f54:	3304      	adds	r3, #4
 8006f56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	699a      	ldr	r2, [r3, #24]
 8006f60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f64:	663a      	str	r2, [r7, #96]	@ 0x60
 8006f66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f68:	ba12      	rev	r2, r2
 8006f6a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006f6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f70:	3304      	adds	r3, #4
 8006f72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f80:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f82:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f84:	ba12      	rev	r2, r2
 8006f86:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8006f92:	4b2c      	ldr	r3, [pc, #176]	@ (8007044 <HASH_GetDigest+0x448>)
 8006f94:	695a      	ldr	r2, [r3, #20]
 8006f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f9a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006f9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006f9e:	ba12      	rev	r2, r2
 8006fa0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8006fac:	4b25      	ldr	r3, [pc, #148]	@ (8007044 <HASH_GetDigest+0x448>)
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fb4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006fb6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006fb8:	ba12      	rev	r2, r2
 8006fba:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8006fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8007044 <HASH_GetDigest+0x448>)
 8006fc8:	69da      	ldr	r2, [r3, #28]
 8006fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fce:	673a      	str	r2, [r7, #112]	@ 0x70
 8006fd0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006fd2:	ba12      	rev	r2, r2
 8006fd4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fda:	3304      	adds	r3, #4
 8006fdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 8006fe0:	4b18      	ldr	r3, [pc, #96]	@ (8007044 <HASH_GetDigest+0x448>)
 8006fe2:	6a1a      	ldr	r2, [r3, #32]
 8006fe4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fe8:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006fec:	ba12      	rev	r2, r2
 8006fee:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8006ff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 8006ffa:	4b12      	ldr	r3, [pc, #72]	@ (8007044 <HASH_GetDigest+0x448>)
 8006ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007002:	67ba      	str	r2, [r7, #120]	@ 0x78
 8007004:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007006:	ba12      	rev	r2, r2
 8007008:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800700a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800700e:	3304      	adds	r3, #4
 8007010:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 8007014:	4b0b      	ldr	r3, [pc, #44]	@ (8007044 <HASH_GetDigest+0x448>)
 8007016:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800701c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800701e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007020:	ba12      	rev	r2, r2
 8007022:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007024:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007028:	3304      	adds	r3, #4
 800702a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 800702e:	4b05      	ldr	r3, [pc, #20]	@ (8007044 <HASH_GetDigest+0x448>)
 8007030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007036:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800703a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800703e:	ba12      	rev	r2, r2
 8007040:	601a      	str	r2, [r3, #0]
      break;
 8007042:	e0d3      	b.n	80071ec <HASH_GetDigest+0x5f0>
 8007044:	420c0710 	.word	0x420c0710
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007052:	617a      	str	r2, [r7, #20]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	ba12      	rev	r2, r2
 8007058:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800705a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800705e:	3304      	adds	r3, #4
 8007060:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691a      	ldr	r2, [r3, #16]
 800706a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800706e:	61ba      	str	r2, [r7, #24]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	ba12      	rev	r2, r2
 8007074:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800707a:	3304      	adds	r3, #4
 800707c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695a      	ldr	r2, [r3, #20]
 8007086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800708a:	61fa      	str	r2, [r7, #28]
 800708c:	69fa      	ldr	r2, [r7, #28]
 800708e:	ba12      	rev	r2, r2
 8007090:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007096:	3304      	adds	r3, #4
 8007098:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070a6:	623a      	str	r2, [r7, #32]
 80070a8:	6a3a      	ldr	r2, [r7, #32]
 80070aa:	ba12      	rev	r2, r2
 80070ac:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80070ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070b2:	3304      	adds	r3, #4
 80070b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	69da      	ldr	r2, [r3, #28]
 80070be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80070c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c6:	ba12      	rev	r2, r2
 80070c8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80070ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070ce:	3304      	adds	r3, #4
 80070d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 80070d4:	4b48      	ldr	r3, [pc, #288]	@ (80071f8 <HASH_GetDigest+0x5fc>)
 80070d6:	695a      	ldr	r2, [r3, #20]
 80070d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80070de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070e0:	ba12      	rev	r2, r2
 80070e2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80070e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070e8:	3304      	adds	r3, #4
 80070ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 80070ee:	4b42      	ldr	r3, [pc, #264]	@ (80071f8 <HASH_GetDigest+0x5fc>)
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070fa:	ba12      	rev	r2, r2
 80070fc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80070fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007102:	3304      	adds	r3, #4
 8007104:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8007108:	4b3b      	ldr	r3, [pc, #236]	@ (80071f8 <HASH_GetDigest+0x5fc>)
 800710a:	69da      	ldr	r2, [r3, #28]
 800710c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007110:	633a      	str	r2, [r7, #48]	@ 0x30
 8007112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007114:	ba12      	rev	r2, r2
 8007116:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007118:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800711c:	3304      	adds	r3, #4
 800711e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 8007122:	4b35      	ldr	r3, [pc, #212]	@ (80071f8 <HASH_GetDigest+0x5fc>)
 8007124:	6a1a      	ldr	r2, [r3, #32]
 8007126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800712a:	637a      	str	r2, [r7, #52]	@ 0x34
 800712c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800712e:	ba12      	rev	r2, r2
 8007130:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007136:	3304      	adds	r3, #4
 8007138:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 800713c:	4b2e      	ldr	r3, [pc, #184]	@ (80071f8 <HASH_GetDigest+0x5fc>)
 800713e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007140:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007144:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007146:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007148:	ba12      	rev	r2, r2
 800714a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800714c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007150:	3304      	adds	r3, #4
 8007152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 8007156:	4b28      	ldr	r3, [pc, #160]	@ (80071f8 <HASH_GetDigest+0x5fc>)
 8007158:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800715a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800715e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007160:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007162:	ba12      	rev	r2, r2
 8007164:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800716a:	3304      	adds	r3, #4
 800716c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 8007170:	4b21      	ldr	r3, [pc, #132]	@ (80071f8 <HASH_GetDigest+0x5fc>)
 8007172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007174:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007178:	643a      	str	r2, [r7, #64]	@ 0x40
 800717a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800717c:	ba12      	rev	r2, r2
 800717e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8007180:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007184:	3304      	adds	r3, #4
 8007186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[12]);
 800718a:	4b1b      	ldr	r3, [pc, #108]	@ (80071f8 <HASH_GetDigest+0x5fc>)
 800718c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800718e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007192:	647a      	str	r2, [r7, #68]	@ 0x44
 8007194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007196:	ba12      	rev	r2, r2
 8007198:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800719a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800719e:	3304      	adds	r3, #4
 80071a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[13]);
 80071a4:	4b14      	ldr	r3, [pc, #80]	@ (80071f8 <HASH_GetDigest+0x5fc>)
 80071a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071ac:	64ba      	str	r2, [r7, #72]	@ 0x48
 80071ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071b0:	ba12      	rev	r2, r2
 80071b2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80071b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071b8:	3304      	adds	r3, #4
 80071ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[14]);
 80071be:	4b0e      	ldr	r3, [pc, #56]	@ (80071f8 <HASH_GetDigest+0x5fc>)
 80071c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80071c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071ca:	ba12      	rev	r2, r2
 80071cc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80071ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071d2:	3304      	adds	r3, #4
 80071d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);
 80071d8:	4b07      	ldr	r3, [pc, #28]	@ (80071f8 <HASH_GetDigest+0x5fc>)
 80071da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071e0:	653a      	str	r2, [r7, #80]	@ 0x50
 80071e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80071e4:	ba12      	rev	r2, r2
 80071e6:	601a      	str	r2, [r3, #0]
      break;
 80071e8:	e000      	b.n	80071ec <HASH_GetDigest+0x5f0>
      break;
 80071ea:	bf00      	nop
  }
}
 80071ec:	bf00      	nop
 80071ee:	37dc      	adds	r7, #220	@ 0xdc
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	420c0710 	.word	0x420c0710

080071fc <HASH_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WaitOnFlagUntilTimeout(HASH_HandleTypeDef *hhash, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Timeout)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	4613      	mov	r3, r2
 800720a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 800720c:	f7fe fa32 	bl	8005674 <HAL_GetTick>
 8007210:	6178      	str	r0, [r7, #20]

  while (__HAL_HASH_GET_FLAG(hhash, Flag) == Status)
 8007212:	e01e      	b.n	8007252 <HASH_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721a:	d01a      	beq.n	8007252 <HASH_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800721c:	f7fe fa2a 	bl	8005674 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d302      	bcc.n	8007232 <HASH_WaitOnFlagUntilTimeout+0x36>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10f      	bne.n	8007252 <HASH_WaitOnFlagUntilTimeout+0x56>
      {
        /* Set State to Ready to be able to restart later on */
        hhash->State  = HAL_HASH_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800723e:	f043 0204 	orr.w	r2, r3, #4
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	635a      	str	r2, [r3, #52]	@ 0x34
        /* Process Unlocked */
        __HAL_UNLOCK(hhash);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e01f      	b.n	8007292 <HASH_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_HASH_GET_FLAG(hhash, Flag) == Status)
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b08      	cmp	r3, #8
 8007256:	d90c      	bls.n	8007272 <HASH_WaitOnFlagUntilTimeout+0x76>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	4013      	ands	r3, r2
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	429a      	cmp	r2, r3
 8007266:	bf0c      	ite	eq
 8007268:	2301      	moveq	r3, #1
 800726a:	2300      	movne	r3, #0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	461a      	mov	r2, r3
 8007270:	e00b      	b.n	800728a <HASH_WaitOnFlagUntilTimeout+0x8e>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4013      	ands	r3, r2
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	bf0c      	ite	eq
 8007282:	2301      	moveq	r3, #1
 8007284:	2300      	movne	r3, #0
 8007286:	b2db      	uxtb	r3, r3
 8007288:	461a      	mov	r2, r3
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	429a      	cmp	r2, r3
 800728e:	d0c1      	beq.n	8007214 <HASH_WaitOnFlagUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e08d      	b.n	80073c8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d106      	bne.n	80072c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7fd f9a1 	bl	8004608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2224      	movs	r2, #36	@ 0x24
 80072ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f022 0201 	bic.w	r2, r2, #1
 80072dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80072ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d107      	bne.n	8007314 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007310:	609a      	str	r2, [r3, #8]
 8007312:	e006      	b.n	8007322 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007320:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d108      	bne.n	800733c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007338:	605a      	str	r2, [r3, #4]
 800733a:	e007      	b.n	800734c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800734a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6812      	ldr	r2, [r2, #0]
 8007356:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800735a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800735e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800736e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691a      	ldr	r2, [r3, #16]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69d9      	ldr	r1, [r3, #28]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1a      	ldr	r2, [r3, #32]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f042 0201 	orr.w	r2, r2, #1
 80073a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	d138      	bne.n	8007458 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e032      	b.n	800745a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2224      	movs	r2, #36	@ 0x24
 8007400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0201 	bic.w	r2, r2, #1
 8007412:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007422:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6819      	ldr	r1, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2220      	movs	r2, #32
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	e000      	b.n	800745a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007458:	2302      	movs	r3, #2
  }
}
 800745a:	4618      	mov	r0, r3
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007466:	b480      	push	{r7}
 8007468:	b085      	sub	sp, #20
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b20      	cmp	r3, #32
 800747a:	d139      	bne.n	80074f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007486:	2302      	movs	r3, #2
 8007488:	e033      	b.n	80074f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2224      	movs	r2, #36	@ 0x24
 8007496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0201 	bic.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80074b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2220      	movs	r2, #32
 80074e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	e000      	b.n	80074f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80074f0:	2302      	movs	r3, #2
  }
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3714      	adds	r7, #20
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800750a:	230a      	movs	r3, #10
 800750c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800750e:	e002      	b.n	8007516 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3b01      	subs	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f9      	bne.n	8007510 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800751c:	887b      	ldrh	r3, [r7, #2]
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007524:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	b29b      	uxth	r3, r3
 800752e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007532:	b29b      	uxth	r3, r3
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800754c:	230a      	movs	r3, #10
 800754e:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8007550:	e002      	b.n	8007558 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3b01      	subs	r3, #1
 8007556:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f9      	bne.n	8007552 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800755e:	887b      	ldrh	r3, [r7, #2]
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007566:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	0c1b      	lsrs	r3, r3, #16
 800756e:	b29b      	uxth	r3, r3
 8007570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007574:	b29b      	uxth	r3, r3
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	460b      	mov	r3, r1
 800758c:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800758e:	230a      	movs	r3, #10
 8007590:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8007592:	e002      	b.n	800759a <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3b01      	subs	r3, #1
 8007598:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1f9      	bne.n	8007594 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80075a0:	887b      	ldrh	r3, [r7, #2]
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	0c1b      	lsrs	r3, r3, #16
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075b6:	b29b      	uxth	r3, r3
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e0f3      	b.n	80077be <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7fd fb80 	bl	8004cf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2203      	movs	r2, #3
 80075f4:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f009 fe88 	bl	8011312 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6818      	ldr	r0, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	7c1a      	ldrb	r2, [r3, #16]
 800760a:	f88d 2000 	strb.w	r2, [sp]
 800760e:	3304      	adds	r3, #4
 8007610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007612:	f009 fe4c 	bl	80112ae <USB_CoreInit>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e0ca      	b.n	80077be <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2100      	movs	r1, #0
 800762e:	4618      	mov	r0, r3
 8007630:	f009 fe84 	bl	801133c <USB_SetCurrentMode>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d005      	beq.n	8007646 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2202      	movs	r2, #2
 800763e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e0bb      	b.n	80077be <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]
 800764a:	e03f      	b.n	80076cc <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800764c:	7bfa      	ldrb	r2, [r7, #15]
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	4613      	mov	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	440b      	add	r3, r1
 800765a:	3315      	adds	r3, #21
 800765c:	2201      	movs	r2, #1
 800765e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007660:	7bfa      	ldrb	r2, [r7, #15]
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	4613      	mov	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	440b      	add	r3, r1
 800766e:	3314      	adds	r3, #20
 8007670:	7bfa      	ldrb	r2, [r7, #15]
 8007672:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007674:	7bfa      	ldrb	r2, [r7, #15]
 8007676:	6879      	ldr	r1, [r7, #4]
 8007678:	4613      	mov	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	4413      	add	r3, r2
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	440b      	add	r3, r1
 8007682:	3317      	adds	r3, #23
 8007684:	2200      	movs	r2, #0
 8007686:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007688:	7bfa      	ldrb	r2, [r7, #15]
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	440b      	add	r3, r1
 8007696:	3324      	adds	r3, #36	@ 0x24
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800769c:	7bfa      	ldrb	r2, [r7, #15]
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	440b      	add	r3, r1
 80076aa:	3328      	adds	r3, #40	@ 0x28
 80076ac:	2200      	movs	r2, #0
 80076ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	00db      	lsls	r3, r3, #3
 80076be:	440b      	add	r3, r1
 80076c0:	3304      	adds	r3, #4
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	3301      	adds	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	791b      	ldrb	r3, [r3, #4]
 80076d0:	7bfa      	ldrb	r2, [r7, #15]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d3ba      	bcc.n	800764c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]
 80076da:	e044      	b.n	8007766 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80076dc:	7bfa      	ldrb	r2, [r7, #15]
 80076de:	6879      	ldr	r1, [r7, #4]
 80076e0:	4613      	mov	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	00db      	lsls	r3, r3, #3
 80076e8:	440b      	add	r3, r1
 80076ea:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80076ee:	2200      	movs	r2, #0
 80076f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80076f2:	7bfa      	ldrb	r2, [r7, #15]
 80076f4:	6879      	ldr	r1, [r7, #4]
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	00db      	lsls	r3, r3, #3
 80076fe:	440b      	add	r3, r1
 8007700:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007704:	7bfa      	ldrb	r2, [r7, #15]
 8007706:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007708:	7bfa      	ldrb	r2, [r7, #15]
 800770a:	6879      	ldr	r1, [r7, #4]
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	440b      	add	r3, r1
 8007716:	f203 1357 	addw	r3, r3, #343	@ 0x157
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800771e:	7bfa      	ldrb	r2, [r7, #15]
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	440b      	add	r3, r1
 800772c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007734:	7bfa      	ldrb	r2, [r7, #15]
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	4613      	mov	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	440b      	add	r3, r1
 8007742:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007746:	2200      	movs	r2, #0
 8007748:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800774a:	7bfa      	ldrb	r2, [r7, #15]
 800774c:	6879      	ldr	r1, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	440b      	add	r3, r1
 8007758:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	3301      	adds	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	791b      	ldrb	r3, [r3, #4]
 800776a:	7bfa      	ldrb	r2, [r7, #15]
 800776c:	429a      	cmp	r2, r3
 800776e:	d3b5      	bcc.n	80076dc <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	7c1a      	ldrb	r2, [r3, #16]
 8007778:	f88d 2000 	strb.w	r2, [sp]
 800777c:	3304      	adds	r3, #4
 800777e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007780:	f009 fdff 	bl	8011382 <USB_DevInit>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d005      	beq.n	8007796 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2202      	movs	r2, #2
 800778e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e013      	b.n	80077be <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	7b1b      	ldrb	r3, [r3, #12]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d102      	bne.n	80077b2 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 fb6c 	bl	8008e8a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f00b fc58 	bl	801306c <USB_DevDisconnect>

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d101      	bne.n	80077dc <HAL_PCD_Start+0x16>
 80077d8:	2302      	movs	r3, #2
 80077da:	e012      	b.n	8007802 <HAL_PCD_Start+0x3c>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f009 fd7e 	bl	80112ea <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f00b fc29 	bl	801304a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4618      	mov	r0, r3
 8007818:	f00b fc39 	bl	801308e <USB_ReadInterrupts>
 800781c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 faf3 	bl	8007e14 <PCD_EP_ISR_Handler>

    return;
 800782e:	e0de      	b.n	80079ee <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007836:	2b00      	cmp	r3, #0
 8007838:	d010      	beq.n	800785c <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8007848:	400b      	ands	r3, r1
 800784a:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f00c fc88 	bl	8014162 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007852:	2100      	movs	r1, #0
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f8e1 	bl	8007a1c <HAL_PCD_SetAddress>

    return;
 800785a:	e0c8      	b.n	80079ee <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d009      	beq.n	800787a <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8007874:	400b      	ands	r3, r1
 8007876:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8007878:	e0b9      	b.n	80079ee <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d009      	beq.n	8007898 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8007892:	400b      	ands	r3, r1
 8007894:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8007896:	e0aa      	b.n	80079ee <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d029      	beq.n	80078f6 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0204 	bic.w	r2, r2, #4
 80078b0:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0208 	bic.w	r2, r2, #8
 80078c0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d107      	bne.n	80078dc <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80078d4:	2100      	movs	r1, #0
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 faf9 	bl	8008ece <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f893 	bl	8007a08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80078f0:	400b      	ands	r3, r1
 80078f2:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80078f4:	e07b      	b.n	80079ee <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01c      	beq.n	800793a <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0208 	orr.w	r2, r2, #8
 800790e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 800791e:	400b      	ands	r3, r1
 8007920:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f042 0204 	orr.w	r2, r2, #4
 8007930:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f85e 	bl	80079f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007938:	e059      	b.n	80079ee <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007940:	2b00      	cmp	r3, #0
 8007942:	d033      	beq.n	80079ac <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8007952:	400b      	ands	r3, r1
 8007954:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 800795c:	2b00      	cmp	r3, #0
 800795e:	d121      	bne.n	80079a4 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0204 	orr.w	r2, r2, #4
 800796e:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0208 	orr.w	r2, r2, #8
 800797e:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800798e:	089b      	lsrs	r3, r3, #2
 8007990:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800799a:	2101      	movs	r1, #1
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 fa96 	bl	8008ece <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80079a2:	e024      	b.n	80079ee <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f825 	bl	80079f4 <HAL_PCD_SuspendCallback>
    return;
 80079aa:	e020      	b.n	80079ee <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00c      	beq.n	80079d0 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 80079c4:	400b      	ands	r3, r1
 80079c6:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f00c fbbc 	bl	8014146 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80079ce:	e00e      	b.n	80079ee <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d009      	beq.n	80079ee <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80079e8:	400b      	ands	r3, r1
 80079ea:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80079ec:	bf00      	nop
  }
}
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d101      	bne.n	8007a36 <HAL_PCD_SetAddress+0x1a>
 8007a32:	2302      	movs	r3, #2
 8007a34:	e012      	b.n	8007a5c <HAL_PCD_SetAddress+0x40>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	78fa      	ldrb	r2, [r7, #3]
 8007a42:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	78fa      	ldrb	r2, [r7, #3]
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f00b fae9 	bl	8013024 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	4608      	mov	r0, r1
 8007a6e:	4611      	mov	r1, r2
 8007a70:	461a      	mov	r2, r3
 8007a72:	4603      	mov	r3, r0
 8007a74:	70fb      	strb	r3, [r7, #3]
 8007a76:	460b      	mov	r3, r1
 8007a78:	803b      	strh	r3, [r7, #0]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da0f      	bge.n	8007aaa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	f003 0207 	and.w	r2, r3, #7
 8007a90:	4613      	mov	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4413      	add	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	3310      	adds	r3, #16
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	705a      	strb	r2, [r3, #1]
 8007aa8:	e00f      	b.n	8007aca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	f003 0207 	and.w	r2, r3, #7
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	4413      	add	r3, r2
 8007ac0:	3304      	adds	r3, #4
 8007ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007aca:	78fb      	ldrb	r3, [r7, #3]
 8007acc:	f003 0307 	and.w	r3, r3, #7
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007ad6:	883b      	ldrh	r3, [r7, #0]
 8007ad8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	78ba      	ldrb	r2, [r7, #2]
 8007ae4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007ae6:	78bb      	ldrb	r3, [r7, #2]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d102      	bne.n	8007af2 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_PCD_EP_Open+0x9c>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e00e      	b.n	8007b1e <HAL_PCD_EP_Open+0xba>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68f9      	ldr	r1, [r7, #12]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f009 fc5a 	bl	80113c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8007b1c:	7afb      	ldrb	r3, [r7, #11]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	da0f      	bge.n	8007b5a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	f003 0207 	and.w	r2, r3, #7
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	3310      	adds	r3, #16
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	3304      	adds	r3, #4
 8007b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2201      	movs	r2, #1
 8007b56:	705a      	strb	r2, [r3, #1]
 8007b58:	e00f      	b.n	8007b7a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b5a:	78fb      	ldrb	r3, [r7, #3]
 8007b5c:	f003 0207 	and.w	r2, r3, #7
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	4413      	add	r3, r2
 8007b70:	3304      	adds	r3, #4
 8007b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b7a:	78fb      	ldrb	r3, [r7, #3]
 8007b7c:	f003 0307 	and.w	r3, r3, #7
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d101      	bne.n	8007b94 <HAL_PCD_EP_Close+0x6e>
 8007b90:	2302      	movs	r3, #2
 8007b92:	e00e      	b.n	8007bb2 <HAL_PCD_EP_Close+0x8c>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68f9      	ldr	r1, [r7, #12]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f009 ff70 	bl	8011a88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b086      	sub	sp, #24
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bca:	7afb      	ldrb	r3, [r7, #11]
 8007bcc:	f003 0207 	and.w	r2, r3, #7
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4413      	add	r3, r2
 8007be0:	3304      	adds	r3, #4
 8007be2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6979      	ldr	r1, [r7, #20]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f00a f8c4 	bl	8011d9c <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	460b      	mov	r3, r1
 8007c28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	f003 0207 	and.w	r2, r3, #7
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	440b      	add	r3, r1
 8007c3c:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8007c40:	681b      	ldr	r3, [r3, #0]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b086      	sub	sp, #24
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	603b      	str	r3, [r7, #0]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	f003 0207 	and.w	r2, r3, #7
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	00db      	lsls	r3, r3, #3
 8007c6c:	3310      	adds	r3, #16
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4413      	add	r3, r2
 8007c72:	3304      	adds	r3, #4
 8007c74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2200      	movs	r2, #0
 8007c94:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c9c:	7afb      	ldrb	r3, [r7, #11]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6979      	ldr	r1, [r7, #20]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f00a f874 	bl	8011d9c <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	f003 0307 	and.w	r3, r3, #7
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7912      	ldrb	r2, [r2, #4]
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d901      	bls.n	8007cdc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e040      	b.n	8007d5e <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007cdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	da0f      	bge.n	8007d04 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	f003 0207 	and.w	r2, r3, #7
 8007cea:	4613      	mov	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	3310      	adds	r3, #16
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	705a      	strb	r2, [r3, #1]
 8007d02:	e00d      	b.n	8007d20 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	4413      	add	r3, r2
 8007d16:	3304      	adds	r3, #4
 8007d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_PCD_EP_SetStall+0x82>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e00e      	b.n	8007d5e <HAL_PCD_EP_SetStall+0xa0>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68f9      	ldr	r1, [r7, #12]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f00b f88e 	bl	8012e70 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	f003 030f 	and.w	r3, r3, #15
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	7912      	ldrb	r2, [r2, #4]
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d901      	bls.n	8007d84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e042      	b.n	8007e0a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	da0f      	bge.n	8007dac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	f003 0207 	and.w	r2, r3, #7
 8007d92:	4613      	mov	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	3310      	adds	r3, #16
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4413      	add	r3, r2
 8007da0:	3304      	adds	r3, #4
 8007da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	705a      	strb	r2, [r3, #1]
 8007daa:	e00f      	b.n	8007dcc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dac:	78fb      	ldrb	r3, [r7, #3]
 8007dae:	f003 0207 	and.w	r2, r3, #7
 8007db2:	4613      	mov	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	00db      	lsls	r3, r3, #3
 8007dba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dd2:	78fb      	ldrb	r3, [r7, #3]
 8007dd4:	f003 0307 	and.w	r3, r3, #7
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d101      	bne.n	8007dec <HAL_PCD_EP_ClrStall+0x86>
 8007de8:	2302      	movs	r3, #2
 8007dea:	e00e      	b.n	8007e0a <HAL_PCD_EP_ClrStall+0xa4>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68f9      	ldr	r1, [r7, #12]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f00b f87e 	bl	8012efc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08e      	sub	sp, #56	@ 0x38
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007e1c:	e326      	b.n	800846c <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e24:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8007e26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8007e32:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f040 8124 	bne.w	8008084 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007e3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e3e:	f003 0310 	and.w	r3, r3, #16
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d13e      	bne.n	8007ec4 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	4b89      	ldr	r3, [pc, #548]	@ (8008074 <PCD_EP_ISR_Handler+0x260>)
 8007e4e:	4013      	ands	r3, r2
 8007e50:	60bb      	str	r3, [r7, #8]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e5c:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3314      	adds	r3, #20
 8007e62:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007e6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	0c1b      	lsrs	r3, r3, #16
 8007e76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e80:	695a      	ldr	r2, [r3, #20]
 8007e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	441a      	add	r2, r3
 8007e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f00c f93f 	bl	8014112 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	7c5b      	ldrb	r3, [r3, #17]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 82e6 	beq.w	800846c <PCD_EP_ISR_Handler+0x658>
 8007ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f040 82e1 	bne.w	800846c <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	7c5b      	ldrb	r3, [r3, #17]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	745a      	strb	r2, [r3, #17]
 8007ec2:	e2d3      	b.n	800846c <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007eca:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007ed4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007ed6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d027      	beq.n	8007f2e <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4610      	mov	r0, r2
 8007eea:	f7ff fb08 	bl	80074fe <PCD_GET_EP_RX_CNT>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6818      	ldr	r0, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8007f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f02:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f06:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	f00b f92f 	bl	801316c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	4b58      	ldr	r3, [pc, #352]	@ (8008078 <PCD_EP_ISR_Handler+0x264>)
 8007f16:	4013      	ands	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f24:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f00c f8c6 	bl	80140b8 <HAL_PCD_SetupStageCallback>
 8007f2c:	e29e      	b.n	800846c <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8007f2e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f280 829a 	bge.w	800846c <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8008078 <PCD_EP_ISR_Handler+0x264>)
 8007f40:	4013      	ands	r3, r2
 8007f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f4e:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f7ff facf 	bl	80074fe <PCD_GET_EP_RX_CNT>
 8007f60:	4603      	mov	r3, r0
 8007f62:	461a      	mov	r2, r3
 8007f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f66:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d019      	beq.n	8007fa4 <PCD_EP_ISR_Handler+0x190>
 8007f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d015      	beq.n	8007fa4 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f7e:	6959      	ldr	r1, [r3, #20]
 8007f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f82:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f86:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	f00b f8ef 	bl	801316c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f90:	695a      	ldr	r2, [r3, #20]
 8007f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	441a      	add	r2, r3
 8007f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f00c f89c 	bl	80140dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007fac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f040 825a 	bne.w	800846c <PCD_EP_ISR_Handler+0x658>
 8007fb8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007fba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007fbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007fc2:	f000 8253 	beq.w	800846c <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800807c <PCD_EP_ISR_Handler+0x268>)
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	4a2c      	ldr	r2, [pc, #176]	@ (800807c <PCD_EP_ISR_Handler+0x268>)
 8007fcc:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8007fd0:	6053      	str	r3, [r2, #4]
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <PCD_EP_ISR_Handler+0x1d4>
 8007fda:	4b28      	ldr	r3, [pc, #160]	@ (800807c <PCD_EP_ISR_Handler+0x268>)
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	4a27      	ldr	r2, [pc, #156]	@ (800807c <PCD_EP_ISR_Handler+0x268>)
 8007fe0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fe4:	6053      	str	r3, [r2, #4]
 8007fe6:	e02e      	b.n	8008046 <PCD_EP_ISR_Handler+0x232>
 8007fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fee:	d814      	bhi.n	800801a <PCD_EP_ISR_Handler+0x206>
 8007ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	085b      	lsrs	r3, r3, #1
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d002      	beq.n	800800a <PCD_EP_ISR_Handler+0x1f6>
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	3301      	adds	r3, #1
 8008008:	617b      	str	r3, [r7, #20]
 800800a:	4b1c      	ldr	r3, [pc, #112]	@ (800807c <PCD_EP_ISR_Handler+0x268>)
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	069b      	lsls	r3, r3, #26
 8008012:	491a      	ldr	r1, [pc, #104]	@ (800807c <PCD_EP_ISR_Handler+0x268>)
 8008014:	4313      	orrs	r3, r2
 8008016:	604b      	str	r3, [r1, #4]
 8008018:	e015      	b.n	8008046 <PCD_EP_ISR_Handler+0x232>
 800801a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	095b      	lsrs	r3, r3, #5
 8008020:	617b      	str	r3, [r7, #20]
 8008022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	2b00      	cmp	r3, #0
 800802c:	d102      	bne.n	8008034 <PCD_EP_ISR_Handler+0x220>
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	3b01      	subs	r3, #1
 8008032:	617b      	str	r3, [r7, #20]
 8008034:	4b11      	ldr	r3, [pc, #68]	@ (800807c <PCD_EP_ISR_Handler+0x268>)
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	069b      	lsls	r3, r3, #26
 800803c:	4313      	orrs	r3, r2
 800803e:	4a0f      	ldr	r2, [pc, #60]	@ (800807c <PCD_EP_ISR_Handler+0x268>)
 8008040:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008044:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4b0c      	ldr	r3, [pc, #48]	@ (8008080 <PCD_EP_ISR_Handler+0x26c>)
 800804e:	4013      	ands	r3, r2
 8008050:	613b      	str	r3, [r7, #16]
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008058:	613b      	str	r3, [r7, #16]
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008060:	613b      	str	r3, [r7, #16]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800806c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	e1fb      	b.n	800846c <PCD_EP_ISR_Handler+0x658>
 8008074:	07ff8f0f 	.word	0x07ff8f0f
 8008078:	07ff0f8f 	.word	0x07ff0f8f
 800807c:	40016400 	.word	0x40016400
 8008080:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	461a      	mov	r2, r3
 800808a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8008096:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800809a:	2b00      	cmp	r3, #0
 800809c:	f280 80bd 	bge.w	800821a <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	461a      	mov	r2, r3
 80080a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	4b9e      	ldr	r3, [pc, #632]	@ (800832c <PCD_EP_ISR_Handler+0x518>)
 80080b2:	4013      	ands	r3, r2
 80080b4:	61fb      	str	r3, [r7, #28]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	69fa      	ldr	r2, [r7, #28]
 80080c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80080ca:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80080cc:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	4413      	add	r3, r2
 80080e0:	3304      	adds	r3, #4
 80080e2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80080e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e6:	7b1b      	ldrb	r3, [r3, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d116      	bne.n	800811a <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	4619      	mov	r1, r3
 80080f6:	4610      	mov	r0, r2
 80080f8:	f7ff fa01 	bl	80074fe <PCD_GET_EP_RX_CNT>
 80080fc:	4603      	mov	r3, r0
 80080fe:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8008100:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008102:	2b00      	cmp	r3, #0
 8008104:	d067      	beq.n	80081d6 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6818      	ldr	r0, [r3, #0]
 800810a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800810c:	6959      	ldr	r1, [r3, #20]
 800810e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008110:	88da      	ldrh	r2, [r3, #6]
 8008112:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008114:	f00b f82a 	bl	801316c <USB_ReadPMA>
 8008118:	e05d      	b.n	80081d6 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800811a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800811c:	78db      	ldrb	r3, [r3, #3]
 800811e:	2b02      	cmp	r3, #2
 8008120:	d108      	bne.n	8008134 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008122:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008124:	461a      	mov	r2, r3
 8008126:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f9ad 	bl	8008488 <HAL_PCD_EP_DB_Receive>
 800812e:	4603      	mov	r3, r0
 8008130:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008132:	e050      	b.n	80081d6 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	461a      	mov	r2, r3
 800813a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	4b7a      	ldr	r3, [pc, #488]	@ (8008330 <PCD_EP_ISR_Handler+0x51c>)
 8008146:	4013      	ands	r3, r2
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	441a      	add	r2, r3
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800815e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008162:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	461a      	mov	r2, r3
 800816a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d016      	beq.n	80081aa <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f7ff f9da 	bl	8007540 <PCD_GET_EP_DBUF0_CNT>
 800818c:	4603      	mov	r3, r0
 800818e:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8008190:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d01f      	beq.n	80081d6 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6818      	ldr	r0, [r3, #0]
 800819a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800819c:	6959      	ldr	r1, [r3, #20]
 800819e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a0:	891a      	ldrh	r2, [r3, #8]
 80081a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081a4:	f00a ffe2 	bl	801316c <USB_ReadPMA>
 80081a8:	e015      	b.n	80081d6 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	4619      	mov	r1, r3
 80081b4:	4610      	mov	r0, r2
 80081b6:	f7ff f9e4 	bl	8007582 <PCD_GET_EP_DBUF1_CNT>
 80081ba:	4603      	mov	r3, r0
 80081bc:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80081be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d008      	beq.n	80081d6 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6818      	ldr	r0, [r3, #0]
 80081c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ca:	6959      	ldr	r1, [r3, #20]
 80081cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ce:	895a      	ldrh	r2, [r3, #10]
 80081d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081d2:	f00a ffcb 	bl	801316c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80081d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d8:	69da      	ldr	r2, [r3, #28]
 80081da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081dc:	441a      	add	r2, r3
 80081de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80081e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e4:	695a      	ldr	r2, [r3, #20]
 80081e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081e8:	441a      	add	r2, r3
 80081ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80081ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <PCD_EP_ISR_Handler+0x3ec>
 80081f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80081f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d206      	bcs.n	800820e <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f00b ff68 	bl	80140dc <HAL_PCD_DataOutStageCallback>
 800820c:	e005      	b.n	800821a <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008214:	4618      	mov	r0, r3
 8008216:	f009 fdc1 	bl	8011d9c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800821a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800821c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 8123 	beq.w	800846c <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8008226:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	3310      	adds	r3, #16
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	4413      	add	r3, r2
 8008238:	3304      	adds	r3, #4
 800823a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	461a      	mov	r2, r3
 8008242:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	4b39      	ldr	r3, [pc, #228]	@ (8008334 <PCD_EP_ISR_Handler+0x520>)
 800824e:	4013      	ands	r3, r2
 8008250:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008262:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008266:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800826a:	78db      	ldrb	r3, [r3, #3]
 800826c:	2b01      	cmp	r3, #1
 800826e:	f040 80b8 	bne.w	80083e2 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8008272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008274:	2200      	movs	r2, #0
 8008276:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827a:	7b1b      	ldrb	r3, [r3, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80a9 	beq.w	80083d4 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008282:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008288:	2b00      	cmp	r3, #0
 800828a:	d055      	beq.n	8008338 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800828c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d124      	bne.n	80082de <PCD_EP_ISR_Handler+0x4ca>
 8008294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800829e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	00db      	lsls	r3, r3, #3
 80082aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80082ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80082b2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80082c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80082d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80082d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	e07a      	b.n	80083d4 <PCD_EP_ISR_Handler+0x5c0>
 80082de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e0:	785b      	ldrb	r3, [r3, #1]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d176      	bne.n	80083d4 <PCD_EP_ISR_Handler+0x5c0>
 80082e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80082f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008300:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008304:	b292      	uxth	r2, r2
 8008306:	601a      	str	r2, [r3, #0]
 8008308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8008312:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8008316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008320:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008324:	6812      	ldr	r2, [r2, #0]
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	e054      	b.n	80083d4 <PCD_EP_ISR_Handler+0x5c0>
 800832a:	bf00      	nop
 800832c:	07ff0f8f 	.word	0x07ff0f8f
 8008330:	07ff8f8f 	.word	0x07ff8f8f
 8008334:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800833a:	785b      	ldrb	r3, [r3, #1]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d124      	bne.n	800838a <PCD_EP_ISR_Handler+0x576>
 8008340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800834a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800835a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800835e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008362:	605a      	str	r2, [r3, #4]
 8008364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800836e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	00db      	lsls	r3, r3, #3
 800837a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800837e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008382:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008386:	605a      	str	r2, [r3, #4]
 8008388:	e024      	b.n	80083d4 <PCD_EP_ISR_Handler+0x5c0>
 800838a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800838c:	785b      	ldrb	r3, [r3, #1]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d120      	bne.n	80083d4 <PCD_EP_ISR_Handler+0x5c0>
 8008392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800839c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80083b0:	b292      	uxth	r2, r2
 80083b2:	605a      	str	r2, [r3, #4]
 80083b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80083be:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80083c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80083d0:	6852      	ldr	r2, [r2, #4]
 80083d2:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80083d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f00b fe99 	bl	8014112 <HAL_PCD_DataInStageCallback>
 80083e0:	e044      	b.n	800846c <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80083e2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80083e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d139      	bne.n	8008460 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80083ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	0c1b      	lsrs	r3, r3, #16
 80083fe:	b29b      	uxth	r3, r3
 8008400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008404:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8008406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008408:	699a      	ldr	r2, [r3, #24]
 800840a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800840c:	429a      	cmp	r2, r3
 800840e:	d906      	bls.n	800841e <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8008410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008412:	699a      	ldr	r2, [r3, #24]
 8008414:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008416:	1ad2      	subs	r2, r2, r3
 8008418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800841a:	619a      	str	r2, [r3, #24]
 800841c:	e002      	b.n	8008424 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 800841e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008420:	2200      	movs	r2, #0
 8008422:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d106      	bne.n	800843a <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800842c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f00b fe6d 	bl	8014112 <HAL_PCD_DataInStageCallback>
 8008438:	e018      	b.n	800846c <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800843a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800843c:	695a      	ldr	r2, [r3, #20]
 800843e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008440:	441a      	add	r2, r3
 8008442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008444:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008448:	69da      	ldr	r2, [r3, #28]
 800844a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800844c:	441a      	add	r2, r3
 800844e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008450:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008458:	4618      	mov	r0, r3
 800845a:	f009 fc9f 	bl	8011d9c <USB_EPStartXfer>
 800845e:	e005      	b.n	800846c <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008460:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008462:	461a      	mov	r2, r3
 8008464:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f8e8 	bl	800863c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008472:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008476:	2b00      	cmp	r3, #0
 8008478:	f47f acd1 	bne.w	8007e1e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3738      	adds	r7, #56	@ 0x38
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop

08008488 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b08a      	sub	sp, #40	@ 0x28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	4613      	mov	r3, r2
 8008494:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d062      	beq.n	8008566 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	4619      	mov	r1, r3
 80084aa:	4610      	mov	r0, r2
 80084ac:	f7ff f848 	bl	8007540 <PCD_GET_EP_DBUF0_CNT>
 80084b0:	4603      	mov	r3, r0
 80084b2:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	699a      	ldr	r2, [r3, #24]
 80084b8:	8bfb      	ldrh	r3, [r7, #30]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d306      	bcc.n	80084cc <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	699a      	ldr	r2, [r3, #24]
 80084c2:	8bfb      	ldrh	r3, [r7, #30]
 80084c4:	1ad2      	subs	r2, r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	619a      	str	r2, [r3, #24]
 80084ca:	e002      	b.n	80084d2 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2200      	movs	r2, #0
 80084d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d11b      	bne.n	8008512 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	4b52      	ldr	r3, [pc, #328]	@ (8008634 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80084ec:	4013      	ands	r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084f6:	61bb      	str	r3, [r7, #24]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	461a      	mov	r2, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	441a      	add	r2, r3
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800850c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008510:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008512:	88fb      	ldrh	r3, [r7, #6]
 8008514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008518:	2b00      	cmp	r3, #0
 800851a:	d017      	beq.n	800854c <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	461a      	mov	r2, r3
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	4b42      	ldr	r3, [pc, #264]	@ (8008638 <HAL_PCD_EP_DB_Receive+0x1b0>)
 800852e:	4013      	ands	r3, r2
 8008530:	617b      	str	r3, [r7, #20]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	441a      	add	r2, r3
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008546:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800854a:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800854c:	8bfb      	ldrh	r3, [r7, #30]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d06b      	beq.n	800862a <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6959      	ldr	r1, [r3, #20]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	891a      	ldrh	r2, [r3, #8]
 800855e:	8bfb      	ldrh	r3, [r7, #30]
 8008560:	f00a fe04 	bl	801316c <USB_ReadPMA>
 8008564:	e061      	b.n	800862a <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	4619      	mov	r1, r3
 8008570:	4610      	mov	r0, r2
 8008572:	f7ff f806 	bl	8007582 <PCD_GET_EP_DBUF1_CNT>
 8008576:	4603      	mov	r3, r0
 8008578:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	699a      	ldr	r2, [r3, #24]
 800857e:	8bfb      	ldrh	r3, [r7, #30]
 8008580:	429a      	cmp	r2, r3
 8008582:	d306      	bcc.n	8008592 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	699a      	ldr	r2, [r3, #24]
 8008588:	8bfb      	ldrh	r3, [r7, #30]
 800858a:	1ad2      	subs	r2, r2, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	619a      	str	r2, [r3, #24]
 8008590:	e002      	b.n	8008598 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2200      	movs	r2, #0
 8008596:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d11b      	bne.n	80085d8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	4b20      	ldr	r3, [pc, #128]	@ (8008634 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80085b2:	4013      	ands	r3, r2
 80085b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80085bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	441a      	add	r2, r3
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085d6:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80085d8:	88fb      	ldrh	r3, [r7, #6]
 80085da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d117      	bne.n	8008612 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	4b11      	ldr	r3, [pc, #68]	@ (8008638 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	623b      	str	r3, [r7, #32]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	441a      	add	r2, r3
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800860c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008610:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8008612:	8bfb      	ldrh	r3, [r7, #30]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d008      	beq.n	800862a <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6818      	ldr	r0, [r3, #0]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	6959      	ldr	r1, [r3, #20]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	895a      	ldrh	r2, [r3, #10]
 8008624:	8bfb      	ldrh	r3, [r7, #30]
 8008626:	f00a fda1 	bl	801316c <USB_ReadPMA>
    }
  }

  return count;
 800862a:	8bfb      	ldrh	r3, [r7, #30]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3728      	adds	r7, #40	@ 0x28
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	07ffbf8f 	.word	0x07ffbf8f
 8008638:	07ff8f8f 	.word	0x07ff8f8f

0800863c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b08e      	sub	sp, #56	@ 0x38
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	4613      	mov	r3, r2
 8008648:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800864a:	88fb      	ldrh	r3, [r7, #6]
 800864c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 81d5 	beq.w	8008a00 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	4619      	mov	r1, r3
 8008660:	4610      	mov	r0, r2
 8008662:	f7fe ff6d 	bl	8007540 <PCD_GET_EP_DBUF0_CNT>
 8008666:	4603      	mov	r3, r0
 8008668:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	8bfb      	ldrh	r3, [r7, #30]
 8008670:	429a      	cmp	r2, r3
 8008672:	d906      	bls.n	8008682 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	699a      	ldr	r2, [r3, #24]
 8008678:	8bfb      	ldrh	r3, [r7, #30]
 800867a:	1ad2      	subs	r2, r2, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	619a      	str	r2, [r3, #24]
 8008680:	e002      	b.n	8008688 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2200      	movs	r2, #0
 8008686:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f040 80c1 	bne.w	8008814 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d124      	bne.n	80086e4 <HAL_PCD_EP_DB_Transmit+0xa8>
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80086a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80086b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80086b8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	00db      	lsls	r3, r3, #3
 80086c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80086c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80086d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80086dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	e024      	b.n	800872e <HAL_PCD_EP_DB_Transmit+0xf2>
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d120      	bne.n	800872e <HAL_PCD_EP_DB_Transmit+0xf2>
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	00db      	lsls	r3, r3, #3
 80086f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80086f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008706:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800870a:	b292      	uxth	r2, r2
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8008718:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	00db      	lsls	r3, r3, #3
 8008722:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008726:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800872a:	6812      	ldr	r2, [r2, #0]
 800872c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	785b      	ldrb	r3, [r3, #1]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d124      	bne.n	8008780 <HAL_PCD_EP_DB_Transmit+0x144>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	00db      	lsls	r3, r3, #3
 800873c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008740:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	00db      	lsls	r3, r3, #3
 800874c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008750:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008754:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008758:	605a      	str	r2, [r3, #4]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	00db      	lsls	r3, r3, #3
 8008760:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008764:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008774:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008778:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800877c:	605a      	str	r2, [r3, #4]
 800877e:	e024      	b.n	80087ca <HAL_PCD_EP_DB_Transmit+0x18e>
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d120      	bne.n	80087ca <HAL_PCD_EP_DB_Transmit+0x18e>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008792:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80087a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80087a6:	b292      	uxth	r2, r2
 80087a8:	605a      	str	r2, [r3, #4]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80087b4:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80087c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80087c6:	6852      	ldr	r2, [r2, #4]
 80087c8:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	4619      	mov	r1, r3
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f00b fc9e 	bl	8014112 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 82e5 	beq.w	8008dac <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4b8e      	ldr	r3, [pc, #568]	@ (8008a2c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80087f4:	4013      	ands	r3, r2
 80087f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	441a      	add	r2, r3
 8008806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008808:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800880c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008810:	6013      	str	r3, [r2, #0]
 8008812:	e2cb      	b.n	8008dac <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008814:	88fb      	ldrh	r3, [r7, #6]
 8008816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d017      	beq.n	800884e <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	4b7f      	ldr	r3, [pc, #508]	@ (8008a2c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8008830:	4013      	ands	r3, r2
 8008832:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	461a      	mov	r2, r3
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	441a      	add	r2, r3
 8008842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008844:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800884c:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008854:	2b01      	cmp	r3, #1
 8008856:	f040 82a9 	bne.w	8008dac <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	695a      	ldr	r2, [r3, #20]
 800885e:	8bfb      	ldrh	r3, [r7, #30]
 8008860:	441a      	add	r2, r3
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	69da      	ldr	r2, [r3, #28]
 800886a:	8bfb      	ldrh	r3, [r7, #30]
 800886c:	441a      	add	r2, r3
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	6a1a      	ldr	r2, [r3, #32]
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	429a      	cmp	r2, r3
 800887c:	d309      	bcc.n	8008892 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	6a1a      	ldr	r2, [r3, #32]
 8008888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888a:	1ad2      	subs	r2, r2, r3
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	621a      	str	r2, [r3, #32]
 8008890:	e014      	b.n	80088bc <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 800889a:	8bfb      	ldrh	r3, [r7, #30]
 800889c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80088a6:	e009      	b.n	80088bc <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	6a1b      	ldr	r3, [r3, #32]
 80088b4:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2200      	movs	r2, #0
 80088ba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d16a      	bne.n	800899a <HAL_PCD_EP_DB_Transmit+0x35e>
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	00db      	lsls	r3, r3, #3
 80088ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80088ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	00db      	lsls	r3, r3, #3
 80088da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80088de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80088e2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d112      	bne.n	8008914 <HAL_PCD_EP_DB_Transmit+0x2d8>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	00db      	lsls	r3, r3, #3
 80088f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80088f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	00db      	lsls	r3, r3, #3
 8008904:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008908:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800890c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	e06a      	b.n	80089ea <HAL_PCD_EP_DB_Transmit+0x3ae>
 8008914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008916:	2b3e      	cmp	r3, #62	@ 0x3e
 8008918:	d81e      	bhi.n	8008958 <HAL_PCD_EP_DB_Transmit+0x31c>
 800891a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891c:	085b      	lsrs	r3, r3, #1
 800891e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <HAL_PCD_EP_DB_Transmit+0x2f4>
 800892a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892c:	3301      	adds	r3, #1
 800892e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800893a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800893e:	6819      	ldr	r1, [r3, #0]
 8008940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008942:	069a      	lsls	r2, r3, #26
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	00db      	lsls	r3, r3, #3
 800894a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800894e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008952:	430a      	orrs	r2, r1
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	e048      	b.n	80089ea <HAL_PCD_EP_DB_Transmit+0x3ae>
 8008958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895a:	095b      	lsrs	r3, r3, #5
 800895c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800895e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008960:	f003 031f 	and.w	r3, r3, #31
 8008964:	2b00      	cmp	r3, #0
 8008966:	d102      	bne.n	800896e <HAL_PCD_EP_DB_Transmit+0x332>
 8008968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896a:	3b01      	subs	r3, #1
 800896c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	00db      	lsls	r3, r3, #3
 8008974:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008978:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008980:	069b      	lsls	r3, r3, #26
 8008982:	431a      	orrs	r2, r3
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800898e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008992:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	e027      	b.n	80089ea <HAL_PCD_EP_DB_Transmit+0x3ae>
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	785b      	ldrb	r3, [r3, #1]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d123      	bne.n	80089ea <HAL_PCD_EP_DB_Transmit+0x3ae>
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80089ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	00db      	lsls	r3, r3, #3
 80089b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80089bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80089c0:	b292      	uxth	r2, r2
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80089ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80089d2:	6819      	ldr	r1, [r3, #0]
 80089d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d6:	041a      	lsls	r2, r3, #16
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80089e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80089e6:	430a      	orrs	r2, r1
 80089e8:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	6959      	ldr	r1, [r3, #20]
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	891a      	ldrh	r2, [r3, #8]
 80089f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f00a fb56 	bl	80130aa <USB_WritePMA>
 80089fe:	e1d5      	b.n	8008dac <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	f7fe fdb9 	bl	8007582 <PCD_GET_EP_DBUF1_CNT>
 8008a10:	4603      	mov	r3, r0
 8008a12:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	699a      	ldr	r2, [r3, #24]
 8008a18:	8bfb      	ldrh	r3, [r7, #30]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d308      	bcc.n	8008a30 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	8bfb      	ldrh	r3, [r7, #30]
 8008a24:	1ad2      	subs	r2, r2, r3
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	619a      	str	r2, [r3, #24]
 8008a2a:	e004      	b.n	8008a36 <HAL_PCD_EP_DB_Transmit+0x3fa>
 8008a2c:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2200      	movs	r2, #0
 8008a34:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f040 80c1 	bne.w	8008bc2 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	785b      	ldrb	r3, [r3, #1]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d124      	bne.n	8008a92 <HAL_PCD_EP_DB_Transmit+0x456>
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	00db      	lsls	r3, r3, #3
 8008a5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008a66:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	00db      	lsls	r3, r3, #3
 8008a72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	00db      	lsls	r3, r3, #3
 8008a82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008a8a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	e024      	b.n	8008adc <HAL_PCD_EP_DB_Transmit+0x4a0>
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	785b      	ldrb	r3, [r3, #1]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d120      	bne.n	8008adc <HAL_PCD_EP_DB_Transmit+0x4a0>
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008aa4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ab4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008ab8:	b292      	uxth	r2, r2
 8008aba:	601a      	str	r2, [r3, #0]
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8008ac6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ad4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008ad8:	6812      	ldr	r2, [r2, #0]
 8008ada:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	785b      	ldrb	r3, [r3, #1]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d124      	bne.n	8008b2e <HAL_PCD_EP_DB_Transmit+0x4f2>
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	00db      	lsls	r3, r3, #3
 8008aea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008aee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	00db      	lsls	r3, r3, #3
 8008afa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008afe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008b02:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008b06:	605a      	str	r2, [r3, #4]
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	00db      	lsls	r3, r3, #3
 8008b1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008b26:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008b2a:	605a      	str	r2, [r3, #4]
 8008b2c:	e024      	b.n	8008b78 <HAL_PCD_EP_DB_Transmit+0x53c>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	785b      	ldrb	r3, [r3, #1]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d120      	bne.n	8008b78 <HAL_PCD_EP_DB_Transmit+0x53c>
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008b54:	b292      	uxth	r2, r2
 8008b56:	605a      	str	r2, [r3, #4]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8008b62:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008b74:	6852      	ldr	r2, [r2, #4]
 8008b76:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f00b fac7 	bl	8014112 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008b84:	88fb      	ldrh	r3, [r7, #6]
 8008b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f040 810e 	bne.w	8008dac <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	461a      	mov	r2, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	4b95      	ldr	r3, [pc, #596]	@ (8008df8 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	623b      	str	r3, [r7, #32]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	441a      	add	r2, r3
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	e0f4      	b.n	8008dac <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008bc2:	88fb      	ldrh	r3, [r7, #6]
 8008bc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d117      	bne.n	8008bfc <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	4b86      	ldr	r3, [pc, #536]	@ (8008df8 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8008bde:	4013      	ands	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	461a      	mov	r2, r3
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	441a      	add	r2, r3
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bfa:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	f040 80d2 	bne.w	8008dac <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	695a      	ldr	r2, [r3, #20]
 8008c0c:	8bfb      	ldrh	r3, [r7, #30]
 8008c0e:	441a      	add	r2, r3
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	69da      	ldr	r2, [r3, #28]
 8008c18:	8bfb      	ldrh	r3, [r7, #30]
 8008c1a:	441a      	add	r2, r3
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	6a1a      	ldr	r2, [r3, #32]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d309      	bcc.n	8008c40 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	6a1a      	ldr	r2, [r3, #32]
 8008c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c38:	1ad2      	subs	r2, r2, r3
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	621a      	str	r2, [r3, #32]
 8008c3e:	e014      	b.n	8008c6a <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d106      	bne.n	8008c56 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8008c48:	8bfb      	ldrh	r3, [r7, #30]
 8008c4a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008c54:	e009      	b.n	8008c6a <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d16a      	bne.n	8008d48 <HAL_PCD_EP_DB_Transmit+0x70c>
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008c7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008c8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008c90:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8008c94:	605a      	str	r2, [r3, #4]
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d112      	bne.n	8008cc2 <HAL_PCD_EP_DB_Transmit+0x686>
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ca6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008cb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008cba:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008cbe:	605a      	str	r2, [r3, #4]
 8008cc0:	e06a      	b.n	8008d98 <HAL_PCD_EP_DB_Transmit+0x75c>
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cc6:	d81e      	bhi.n	8008d06 <HAL_PCD_EP_DB_Transmit+0x6ca>
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cca:	085b      	lsrs	r3, r3, #1
 8008ccc:	61bb      	str	r3, [r7, #24]
 8008cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd0:	f003 0301 	and.w	r3, r3, #1
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <HAL_PCD_EP_DB_Transmit+0x6a2>
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	61bb      	str	r3, [r7, #24]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ce8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008cec:	6859      	ldr	r1, [r3, #4]
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	069a      	lsls	r2, r3, #26
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008cfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008d00:	430a      	orrs	r2, r1
 8008d02:	605a      	str	r2, [r3, #4]
 8008d04:	e048      	b.n	8008d98 <HAL_PCD_EP_DB_Transmit+0x75c>
 8008d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d08:	095b      	lsrs	r3, r3, #5
 8008d0a:	61bb      	str	r3, [r7, #24]
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0e:	f003 031f 	and.w	r3, r3, #31
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d102      	bne.n	8008d1c <HAL_PCD_EP_DB_Transmit+0x6e0>
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	61bb      	str	r3, [r7, #24]
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	00db      	lsls	r3, r3, #3
 8008d22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	069b      	lsls	r3, r3, #26
 8008d30:	431a      	orrs	r2, r3
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	00db      	lsls	r3, r3, #3
 8008d38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008d40:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008d44:	605a      	str	r2, [r3, #4]
 8008d46:	e027      	b.n	8008d98 <HAL_PCD_EP_DB_Transmit+0x75c>
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	785b      	ldrb	r3, [r3, #1]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d123      	bne.n	8008d98 <HAL_PCD_EP_DB_Transmit+0x75c>
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008d6e:	b292      	uxth	r2, r2
 8008d70:	605a      	str	r2, [r3, #4]
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008d80:	6859      	ldr	r1, [r3, #4]
 8008d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d84:	041a      	lsls	r2, r3, #16
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8008d94:	430a      	orrs	r2, r1
 8008d96:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	6959      	ldr	r1, [r3, #20]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	895a      	ldrh	r2, [r3, #10]
 8008da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	f00a f97f 	bl	80130aa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	461a      	mov	r2, r3
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8008dfc <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc4:	f083 0310 	eor.w	r3, r3, #16
 8008dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	f083 0320 	eor.w	r3, r3, #32
 8008dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	441a      	add	r2, r3
 8008de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3738      	adds	r7, #56	@ 0x38
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	07ff8f8f 	.word	0x07ff8f8f
 8008dfc:	07ff8fbf 	.word	0x07ff8fbf

08008e00 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	607b      	str	r3, [r7, #4]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	817b      	strh	r3, [r7, #10]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008e12:	897b      	ldrh	r3, [r7, #10]
 8008e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00c      	beq.n	8008e38 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e1e:	897b      	ldrh	r3, [r7, #10]
 8008e20:	f003 0207 	and.w	r2, r3, #7
 8008e24:	4613      	mov	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	3310      	adds	r3, #16
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	4413      	add	r3, r2
 8008e32:	3304      	adds	r3, #4
 8008e34:	617b      	str	r3, [r7, #20]
 8008e36:	e00a      	b.n	8008e4e <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008e38:	897a      	ldrh	r2, [r7, #10]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	4413      	add	r3, r2
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008e4e:	893b      	ldrh	r3, [r7, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d107      	bne.n	8008e64 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	2200      	movs	r2, #0
 8008e58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	80da      	strh	r2, [r3, #6]
 8008e62:	e00b      	b.n	8008e7c <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	2201      	movs	r2, #1
 8008e68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	0c1b      	lsrs	r3, r3, #16
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b085      	sub	sp, #20
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eac:	f043 0201 	orr.w	r2, r3, #1
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eb8:	f043 0202 	orr.w	r2, r3, #2
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008eda:	bf00      	nop
 8008edc:	370c      	adds	r7, #12
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
	...

08008ee8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8008eec:	4b05      	ldr	r3, [pc, #20]	@ (8008f04 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef0:	4a04      	ldr	r2, [pc, #16]	@ (8008f04 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008ef2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008ef6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8008ef8:	bf00      	nop
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	44020800 	.word	0x44020800

08008f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b088      	sub	sp, #32
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d102      	bne.n	8008f1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	f000 bc28 	b.w	800976c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f1c:	4b94      	ldr	r3, [pc, #592]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	f003 0318 	and.w	r3, r3, #24
 8008f24:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8008f26:	4b92      	ldr	r3, [pc, #584]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8008f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2a:	f003 0303 	and.w	r3, r3, #3
 8008f2e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0310 	and.w	r3, r3, #16
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d05b      	beq.n	8008ff4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	2b08      	cmp	r3, #8
 8008f40:	d005      	beq.n	8008f4e <HAL_RCC_OscConfig+0x46>
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	2b18      	cmp	r3, #24
 8008f46:	d114      	bne.n	8008f72 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d111      	bne.n	8008f72 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d102      	bne.n	8008f5c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f000 bc08 	b.w	800976c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8008f5c:	4b84      	ldr	r3, [pc, #528]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	041b      	lsls	r3, r3, #16
 8008f6a:	4981      	ldr	r1, [pc, #516]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8008f70:	e040      	b.n	8008ff4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d023      	beq.n	8008fc2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8008f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f86:	f7fc fb75 	bl	8005674 <HAL_GetTick>
 8008f8a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8008f8c:	e008      	b.n	8008fa0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8008f8e:	f7fc fb71 	bl	8005674 <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d901      	bls.n	8008fa0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e3e5      	b.n	800976c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8008fa0:	4b73      	ldr	r3, [pc, #460]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0f0      	beq.n	8008f8e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8008fac:	4b70      	ldr	r3, [pc, #448]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a1b      	ldr	r3, [r3, #32]
 8008fb8:	041b      	lsls	r3, r3, #16
 8008fba:	496d      	ldr	r1, [pc, #436]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	618b      	str	r3, [r1, #24]
 8008fc0:	e018      	b.n	8008ff4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008fc2:	4b6b      	ldr	r3, [pc, #428]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a6a      	ldr	r2, [pc, #424]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8008fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fce:	f7fc fb51 	bl	8005674 <HAL_GetTick>
 8008fd2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8008fd4:	e008      	b.n	8008fe8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8008fd6:	f7fc fb4d 	bl	8005674 <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d901      	bls.n	8008fe8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e3c1      	b.n	800976c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8008fe8:	4b61      	ldr	r3, [pc, #388]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1f0      	bne.n	8008fd6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 80a0 	beq.w	8009142 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	2b10      	cmp	r3, #16
 8009006:	d005      	beq.n	8009014 <HAL_RCC_OscConfig+0x10c>
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	2b18      	cmp	r3, #24
 800900c:	d109      	bne.n	8009022 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	2b03      	cmp	r3, #3
 8009012:	d106      	bne.n	8009022 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	f040 8092 	bne.w	8009142 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e3a4      	b.n	800976c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800902a:	d106      	bne.n	800903a <HAL_RCC_OscConfig+0x132>
 800902c:	4b50      	ldr	r3, [pc, #320]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a4f      	ldr	r2, [pc, #316]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	e058      	b.n	80090ec <HAL_RCC_OscConfig+0x1e4>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d112      	bne.n	8009068 <HAL_RCC_OscConfig+0x160>
 8009042:	4b4b      	ldr	r3, [pc, #300]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a4a      	ldr	r2, [pc, #296]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	4b48      	ldr	r3, [pc, #288]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a47      	ldr	r2, [pc, #284]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009054:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009058:	6013      	str	r3, [r2, #0]
 800905a:	4b45      	ldr	r3, [pc, #276]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a44      	ldr	r2, [pc, #272]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009060:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	e041      	b.n	80090ec <HAL_RCC_OscConfig+0x1e4>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009070:	d112      	bne.n	8009098 <HAL_RCC_OscConfig+0x190>
 8009072:	4b3f      	ldr	r3, [pc, #252]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a3e      	ldr	r2, [pc, #248]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	4b3c      	ldr	r3, [pc, #240]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a3b      	ldr	r2, [pc, #236]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009084:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009088:	6013      	str	r3, [r2, #0]
 800908a:	4b39      	ldr	r3, [pc, #228]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a38      	ldr	r2, [pc, #224]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	e029      	b.n	80090ec <HAL_RCC_OscConfig+0x1e4>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80090a0:	d112      	bne.n	80090c8 <HAL_RCC_OscConfig+0x1c0>
 80090a2:	4b33      	ldr	r3, [pc, #204]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a32      	ldr	r2, [pc, #200]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 80090a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090ac:	6013      	str	r3, [r2, #0]
 80090ae:	4b30      	ldr	r3, [pc, #192]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a2f      	ldr	r2, [pc, #188]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 80090b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	4b2d      	ldr	r3, [pc, #180]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a2c      	ldr	r2, [pc, #176]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 80090c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	e011      	b.n	80090ec <HAL_RCC_OscConfig+0x1e4>
 80090c8:	4b29      	ldr	r3, [pc, #164]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a28      	ldr	r2, [pc, #160]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 80090ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	4b26      	ldr	r3, [pc, #152]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a25      	ldr	r2, [pc, #148]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 80090da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	4b23      	ldr	r3, [pc, #140]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a22      	ldr	r2, [pc, #136]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 80090e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80090ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d013      	beq.n	800911c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f4:	f7fc fabe 	bl	8005674 <HAL_GetTick>
 80090f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090fa:	e008      	b.n	800910e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80090fc:	f7fc faba 	bl	8005674 <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	2b64      	cmp	r3, #100	@ 0x64
 8009108:	d901      	bls.n	800910e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e32e      	b.n	800976c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800910e:	4b18      	ldr	r3, [pc, #96]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d0f0      	beq.n	80090fc <HAL_RCC_OscConfig+0x1f4>
 800911a:	e012      	b.n	8009142 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800911c:	f7fc faaa 	bl	8005674 <HAL_GetTick>
 8009120:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009122:	e008      	b.n	8009136 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8009124:	f7fc faa6 	bl	8005674 <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	2b64      	cmp	r3, #100	@ 0x64
 8009130:	d901      	bls.n	8009136 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e31a      	b.n	800976c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009136:	4b0e      	ldr	r3, [pc, #56]	@ (8009170 <HAL_RCC_OscConfig+0x268>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1f0      	bne.n	8009124 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 809a 	beq.w	8009284 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d005      	beq.n	8009162 <HAL_RCC_OscConfig+0x25a>
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	2b18      	cmp	r3, #24
 800915a:	d149      	bne.n	80091f0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d146      	bne.n	80091f0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d104      	bne.n	8009174 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e2fe      	b.n	800976c <HAL_RCC_OscConfig+0x864>
 800916e:	bf00      	nop
 8009170:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d11c      	bne.n	80091b4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800917a:	4b9a      	ldr	r3, [pc, #616]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0218 	and.w	r2, r3, #24
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	429a      	cmp	r2, r3
 8009188:	d014      	beq.n	80091b4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800918a:	4b96      	ldr	r3, [pc, #600]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f023 0218 	bic.w	r2, r3, #24
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	4993      	ldr	r1, [pc, #588]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 8009198:	4313      	orrs	r3, r2
 800919a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800919c:	f000 fdd0 	bl	8009d40 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80091a0:	4b91      	ldr	r3, [pc, #580]	@ (80093e8 <HAL_RCC_OscConfig+0x4e0>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fc f9db 	bl	8005560 <HAL_InitTick>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e2db      	b.n	800976c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b4:	f7fc fa5e 	bl	8005674 <HAL_GetTick>
 80091b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091ba:	e008      	b.n	80091ce <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80091bc:	f7fc fa5a 	bl	8005674 <HAL_GetTick>
 80091c0:	4602      	mov	r2, r0
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d901      	bls.n	80091ce <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e2ce      	b.n	800976c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091ce:	4b85      	ldr	r3, [pc, #532]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0f0      	beq.n	80091bc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80091da:	4b82      	ldr	r3, [pc, #520]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	041b      	lsls	r3, r3, #16
 80091e8:	497e      	ldr	r1, [pc, #504]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80091ee:	e049      	b.n	8009284 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d02c      	beq.n	8009252 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80091f8:	4b7a      	ldr	r3, [pc, #488]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f023 0218 	bic.w	r2, r3, #24
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	4977      	ldr	r1, [pc, #476]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 8009206:	4313      	orrs	r3, r2
 8009208:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800920a:	4b76      	ldr	r3, [pc, #472]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a75      	ldr	r2, [pc, #468]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 8009210:	f043 0301 	orr.w	r3, r3, #1
 8009214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009216:	f7fc fa2d 	bl	8005674 <HAL_GetTick>
 800921a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800921c:	e008      	b.n	8009230 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800921e:	f7fc fa29 	bl	8005674 <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	2b02      	cmp	r3, #2
 800922a:	d901      	bls.n	8009230 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800922c:	2303      	movs	r3, #3
 800922e:	e29d      	b.n	800976c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009230:	4b6c      	ldr	r3, [pc, #432]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0302 	and.w	r3, r3, #2
 8009238:	2b00      	cmp	r3, #0
 800923a:	d0f0      	beq.n	800921e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800923c:	4b69      	ldr	r3, [pc, #420]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	041b      	lsls	r3, r3, #16
 800924a:	4966      	ldr	r1, [pc, #408]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 800924c:	4313      	orrs	r3, r2
 800924e:	610b      	str	r3, [r1, #16]
 8009250:	e018      	b.n	8009284 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009252:	4b64      	ldr	r3, [pc, #400]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a63      	ldr	r2, [pc, #396]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 8009258:	f023 0301 	bic.w	r3, r3, #1
 800925c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800925e:	f7fc fa09 	bl	8005674 <HAL_GetTick>
 8009262:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009264:	e008      	b.n	8009278 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8009266:	f7fc fa05 	bl	8005674 <HAL_GetTick>
 800926a:	4602      	mov	r2, r0
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	2b02      	cmp	r3, #2
 8009272:	d901      	bls.n	8009278 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e279      	b.n	800976c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009278:	4b5a      	ldr	r3, [pc, #360]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1f0      	bne.n	8009266 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 0308 	and.w	r3, r3, #8
 800928c:	2b00      	cmp	r3, #0
 800928e:	d03c      	beq.n	800930a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d01c      	beq.n	80092d2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009298:	4b52      	ldr	r3, [pc, #328]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 800929a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800929e:	4a51      	ldr	r2, [pc, #324]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80092a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092a8:	f7fc f9e4 	bl	8005674 <HAL_GetTick>
 80092ac:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80092ae:	e008      	b.n	80092c2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80092b0:	f7fc f9e0 	bl	8005674 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d901      	bls.n	80092c2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e254      	b.n	800976c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80092c2:	4b48      	ldr	r3, [pc, #288]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80092c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d0ef      	beq.n	80092b0 <HAL_RCC_OscConfig+0x3a8>
 80092d0:	e01b      	b.n	800930a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092d2:	4b44      	ldr	r3, [pc, #272]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80092d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092d8:	4a42      	ldr	r2, [pc, #264]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80092da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80092de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e2:	f7fc f9c7 	bl	8005674 <HAL_GetTick>
 80092e6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80092e8:	e008      	b.n	80092fc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80092ea:	f7fc f9c3 	bl	8005674 <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d901      	bls.n	80092fc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e237      	b.n	800976c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80092fc:	4b39      	ldr	r3, [pc, #228]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80092fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009302:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1ef      	bne.n	80092ea <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0304 	and.w	r3, r3, #4
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 80d2 	beq.w	80094bc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009318:	4b34      	ldr	r3, [pc, #208]	@ (80093ec <HAL_RCC_OscConfig+0x4e4>)
 800931a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	2b00      	cmp	r3, #0
 8009322:	d118      	bne.n	8009356 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8009324:	4b31      	ldr	r3, [pc, #196]	@ (80093ec <HAL_RCC_OscConfig+0x4e4>)
 8009326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009328:	4a30      	ldr	r2, [pc, #192]	@ (80093ec <HAL_RCC_OscConfig+0x4e4>)
 800932a:	f043 0301 	orr.w	r3, r3, #1
 800932e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009330:	f7fc f9a0 	bl	8005674 <HAL_GetTick>
 8009334:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009336:	e008      	b.n	800934a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009338:	f7fc f99c 	bl	8005674 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b02      	cmp	r3, #2
 8009344:	d901      	bls.n	800934a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e210      	b.n	800976c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800934a:	4b28      	ldr	r3, [pc, #160]	@ (80093ec <HAL_RCC_OscConfig+0x4e4>)
 800934c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0f0      	beq.n	8009338 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d108      	bne.n	8009370 <HAL_RCC_OscConfig+0x468>
 800935e:	4b21      	ldr	r3, [pc, #132]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 8009360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009364:	4a1f      	ldr	r2, [pc, #124]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 8009366:	f043 0301 	orr.w	r3, r3, #1
 800936a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800936e:	e074      	b.n	800945a <HAL_RCC_OscConfig+0x552>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d118      	bne.n	80093aa <HAL_RCC_OscConfig+0x4a2>
 8009378:	4b1a      	ldr	r3, [pc, #104]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 800937a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800937e:	4a19      	ldr	r2, [pc, #100]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009388:	4b16      	ldr	r3, [pc, #88]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 800938a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800938e:	4a15      	ldr	r2, [pc, #84]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 8009390:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009394:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009398:	4b12      	ldr	r3, [pc, #72]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 800939a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800939e:	4a11      	ldr	r2, [pc, #68]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80093a0:	f023 0304 	bic.w	r3, r3, #4
 80093a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80093a8:	e057      	b.n	800945a <HAL_RCC_OscConfig+0x552>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	2b05      	cmp	r3, #5
 80093b0:	d11e      	bne.n	80093f0 <HAL_RCC_OscConfig+0x4e8>
 80093b2:	4b0c      	ldr	r3, [pc, #48]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80093b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093b8:	4a0a      	ldr	r2, [pc, #40]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80093ba:	f043 0304 	orr.w	r3, r3, #4
 80093be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80093c2:	4b08      	ldr	r3, [pc, #32]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80093c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093c8:	4a06      	ldr	r2, [pc, #24]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80093ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80093d2:	4b04      	ldr	r3, [pc, #16]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80093d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093d8:	4a02      	ldr	r2, [pc, #8]	@ (80093e4 <HAL_RCC_OscConfig+0x4dc>)
 80093da:	f043 0301 	orr.w	r3, r3, #1
 80093de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80093e2:	e03a      	b.n	800945a <HAL_RCC_OscConfig+0x552>
 80093e4:	44020c00 	.word	0x44020c00
 80093e8:	20000024 	.word	0x20000024
 80093ec:	44020800 	.word	0x44020800
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	2b85      	cmp	r3, #133	@ 0x85
 80093f6:	d118      	bne.n	800942a <HAL_RCC_OscConfig+0x522>
 80093f8:	4ba2      	ldr	r3, [pc, #648]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 80093fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093fe:	4aa1      	ldr	r2, [pc, #644]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009400:	f043 0304 	orr.w	r3, r3, #4
 8009404:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009408:	4b9e      	ldr	r3, [pc, #632]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 800940a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800940e:	4a9d      	ldr	r2, [pc, #628]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009414:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009418:	4b9a      	ldr	r3, [pc, #616]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 800941a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800941e:	4a99      	ldr	r2, [pc, #612]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009420:	f043 0301 	orr.w	r3, r3, #1
 8009424:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009428:	e017      	b.n	800945a <HAL_RCC_OscConfig+0x552>
 800942a:	4b96      	ldr	r3, [pc, #600]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 800942c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009430:	4a94      	ldr	r2, [pc, #592]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009432:	f023 0301 	bic.w	r3, r3, #1
 8009436:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800943a:	4b92      	ldr	r3, [pc, #584]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 800943c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009440:	4a90      	ldr	r2, [pc, #576]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009442:	f023 0304 	bic.w	r3, r3, #4
 8009446:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800944a:	4b8e      	ldr	r3, [pc, #568]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 800944c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009450:	4a8c      	ldr	r2, [pc, #560]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009456:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d016      	beq.n	8009490 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009462:	f7fc f907 	bl	8005674 <HAL_GetTick>
 8009466:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009468:	e00a      	b.n	8009480 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800946a:	f7fc f903 	bl	8005674 <HAL_GetTick>
 800946e:	4602      	mov	r2, r0
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009478:	4293      	cmp	r3, r2
 800947a:	d901      	bls.n	8009480 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	e175      	b.n	800976c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009480:	4b80      	ldr	r3, [pc, #512]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009486:	f003 0302 	and.w	r3, r3, #2
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0ed      	beq.n	800946a <HAL_RCC_OscConfig+0x562>
 800948e:	e015      	b.n	80094bc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009490:	f7fc f8f0 	bl	8005674 <HAL_GetTick>
 8009494:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009496:	e00a      	b.n	80094ae <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009498:	f7fc f8ec 	bl	8005674 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d901      	bls.n	80094ae <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e15e      	b.n	800976c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80094ae:	4b75      	ldr	r3, [pc, #468]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 80094b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80094b4:	f003 0302 	and.w	r3, r3, #2
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1ed      	bne.n	8009498 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0320 	and.w	r3, r3, #32
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d036      	beq.n	8009536 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d019      	beq.n	8009504 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80094d0:	4b6c      	ldr	r3, [pc, #432]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a6b      	ldr	r2, [pc, #428]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 80094d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80094da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094dc:	f7fc f8ca 	bl	8005674 <HAL_GetTick>
 80094e0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80094e2:	e008      	b.n	80094f6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80094e4:	f7fc f8c6 	bl	8005674 <HAL_GetTick>
 80094e8:	4602      	mov	r2, r0
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d901      	bls.n	80094f6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e13a      	b.n	800976c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80094f6:	4b63      	ldr	r3, [pc, #396]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d0f0      	beq.n	80094e4 <HAL_RCC_OscConfig+0x5dc>
 8009502:	e018      	b.n	8009536 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009504:	4b5f      	ldr	r3, [pc, #380]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a5e      	ldr	r2, [pc, #376]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 800950a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800950e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009510:	f7fc f8b0 	bl	8005674 <HAL_GetTick>
 8009514:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009516:	e008      	b.n	800952a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8009518:	f7fc f8ac 	bl	8005674 <HAL_GetTick>
 800951c:	4602      	mov	r2, r0
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	2b02      	cmp	r3, #2
 8009524:	d901      	bls.n	800952a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e120      	b.n	800976c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800952a:	4b56      	ldr	r3, [pc, #344]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1f0      	bne.n	8009518 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 8115 	beq.w	800976a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	2b18      	cmp	r3, #24
 8009544:	f000 80af 	beq.w	80096a6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954c:	2b02      	cmp	r3, #2
 800954e:	f040 8086 	bne.w	800965e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8009552:	4b4c      	ldr	r3, [pc, #304]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a4b      	ldr	r2, [pc, #300]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009558:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800955c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800955e:	f7fc f889 	bl	8005674 <HAL_GetTick>
 8009562:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009564:	e008      	b.n	8009578 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8009566:	f7fc f885 	bl	8005674 <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	2b02      	cmp	r3, #2
 8009572:	d901      	bls.n	8009578 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e0f9      	b.n	800976c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009578:	4b42      	ldr	r3, [pc, #264]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1f0      	bne.n	8009566 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8009584:	4b3f      	ldr	r3, [pc, #252]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009588:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800958c:	f023 0303 	bic.w	r3, r3, #3
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009598:	0212      	lsls	r2, r2, #8
 800959a:	430a      	orrs	r2, r1
 800959c:	4939      	ldr	r1, [pc, #228]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 800959e:	4313      	orrs	r3, r2
 80095a0:	628b      	str	r3, [r1, #40]	@ 0x28
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095a6:	3b01      	subs	r3, #1
 80095a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b0:	3b01      	subs	r3, #1
 80095b2:	025b      	lsls	r3, r3, #9
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	431a      	orrs	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095bc:	3b01      	subs	r3, #1
 80095be:	041b      	lsls	r3, r3, #16
 80095c0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095c4:	431a      	orrs	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ca:	3b01      	subs	r3, #1
 80095cc:	061b      	lsls	r3, r3, #24
 80095ce:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80095d2:	492c      	ldr	r1, [pc, #176]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80095d8:	4b2a      	ldr	r3, [pc, #168]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 80095da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095dc:	4a29      	ldr	r2, [pc, #164]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 80095de:	f023 0310 	bic.w	r3, r3, #16
 80095e2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095e8:	4a26      	ldr	r2, [pc, #152]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 80095ea:	00db      	lsls	r3, r3, #3
 80095ec:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80095ee:	4b25      	ldr	r3, [pc, #148]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 80095f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f2:	4a24      	ldr	r2, [pc, #144]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 80095f4:	f043 0310 	orr.w	r3, r3, #16
 80095f8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80095fa:	4b22      	ldr	r3, [pc, #136]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 80095fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095fe:	f023 020c 	bic.w	r2, r3, #12
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009606:	491f      	ldr	r1, [pc, #124]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009608:	4313      	orrs	r3, r2
 800960a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800960c:	4b1d      	ldr	r3, [pc, #116]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 800960e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009610:	f023 0220 	bic.w	r2, r3, #32
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009618:	491a      	ldr	r1, [pc, #104]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 800961a:	4313      	orrs	r3, r2
 800961c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800961e:	4b19      	ldr	r3, [pc, #100]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009622:	4a18      	ldr	r2, [pc, #96]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009628:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800962a:	4b16      	ldr	r3, [pc, #88]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a15      	ldr	r2, [pc, #84]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009630:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009636:	f7fc f81d 	bl	8005674 <HAL_GetTick>
 800963a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800963c:	e008      	b.n	8009650 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800963e:	f7fc f819 	bl	8005674 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	2b02      	cmp	r3, #2
 800964a:	d901      	bls.n	8009650 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e08d      	b.n	800976c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009650:	4b0c      	ldr	r3, [pc, #48]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d0f0      	beq.n	800963e <HAL_RCC_OscConfig+0x736>
 800965c:	e085      	b.n	800976a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800965e:	4b09      	ldr	r3, [pc, #36]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a08      	ldr	r2, [pc, #32]	@ (8009684 <HAL_RCC_OscConfig+0x77c>)
 8009664:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800966a:	f7fc f803 	bl	8005674 <HAL_GetTick>
 800966e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009670:	e00a      	b.n	8009688 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8009672:	f7fb ffff 	bl	8005674 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	2b02      	cmp	r3, #2
 800967e:	d903      	bls.n	8009688 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e073      	b.n	800976c <HAL_RCC_OscConfig+0x864>
 8009684:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009688:	4b3a      	ldr	r3, [pc, #232]	@ (8009774 <HAL_RCC_OscConfig+0x86c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1ee      	bne.n	8009672 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009694:	4b37      	ldr	r3, [pc, #220]	@ (8009774 <HAL_RCC_OscConfig+0x86c>)
 8009696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009698:	4a36      	ldr	r2, [pc, #216]	@ (8009774 <HAL_RCC_OscConfig+0x86c>)
 800969a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800969e:	f023 0303 	bic.w	r3, r3, #3
 80096a2:	6293      	str	r3, [r2, #40]	@ 0x28
 80096a4:	e061      	b.n	800976a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80096a6:	4b33      	ldr	r3, [pc, #204]	@ (8009774 <HAL_RCC_OscConfig+0x86c>)
 80096a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096aa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80096ac:	4b31      	ldr	r3, [pc, #196]	@ (8009774 <HAL_RCC_OscConfig+0x86c>)
 80096ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096b0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d031      	beq.n	800971e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	f003 0203 	and.w	r2, r3, #3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d12a      	bne.n	800971e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	0a1b      	lsrs	r3, r3, #8
 80096cc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d122      	bne.n	800971e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096e2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d11a      	bne.n	800971e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	0a5b      	lsrs	r3, r3, #9
 80096ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d111      	bne.n	800971e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	0c1b      	lsrs	r3, r3, #16
 80096fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009706:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8009708:	429a      	cmp	r2, r3
 800970a:	d108      	bne.n	800971e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	0e1b      	lsrs	r3, r3, #24
 8009710:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009718:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800971a:	429a      	cmp	r2, r3
 800971c:	d001      	beq.n	8009722 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e024      	b.n	800976c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009722:	4b14      	ldr	r3, [pc, #80]	@ (8009774 <HAL_RCC_OscConfig+0x86c>)
 8009724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009726:	08db      	lsrs	r3, r3, #3
 8009728:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8009730:	429a      	cmp	r2, r3
 8009732:	d01a      	beq.n	800976a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8009734:	4b0f      	ldr	r3, [pc, #60]	@ (8009774 <HAL_RCC_OscConfig+0x86c>)
 8009736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009738:	4a0e      	ldr	r2, [pc, #56]	@ (8009774 <HAL_RCC_OscConfig+0x86c>)
 800973a:	f023 0310 	bic.w	r3, r3, #16
 800973e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009740:	f7fb ff98 	bl	8005674 <HAL_GetTick>
 8009744:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8009746:	bf00      	nop
 8009748:	f7fb ff94 	bl	8005674 <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	4293      	cmp	r3, r2
 8009752:	d0f9      	beq.n	8009748 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009758:	4a06      	ldr	r2, [pc, #24]	@ (8009774 <HAL_RCC_OscConfig+0x86c>)
 800975a:	00db      	lsls	r3, r3, #3
 800975c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800975e:	4b05      	ldr	r3, [pc, #20]	@ (8009774 <HAL_RCC_OscConfig+0x86c>)
 8009760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009762:	4a04      	ldr	r2, [pc, #16]	@ (8009774 <HAL_RCC_OscConfig+0x86c>)
 8009764:	f043 0310 	orr.w	r3, r3, #16
 8009768:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3720      	adds	r7, #32
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	44020c00 	.word	0x44020c00

08009778 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e19e      	b.n	8009aca <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800978c:	4b83      	ldr	r3, [pc, #524]	@ (800999c <HAL_RCC_ClockConfig+0x224>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 030f 	and.w	r3, r3, #15
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d910      	bls.n	80097bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800979a:	4b80      	ldr	r3, [pc, #512]	@ (800999c <HAL_RCC_ClockConfig+0x224>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f023 020f 	bic.w	r2, r3, #15
 80097a2:	497e      	ldr	r1, [pc, #504]	@ (800999c <HAL_RCC_ClockConfig+0x224>)
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097aa:	4b7c      	ldr	r3, [pc, #496]	@ (800999c <HAL_RCC_ClockConfig+0x224>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 030f 	and.w	r3, r3, #15
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d001      	beq.n	80097bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e186      	b.n	8009aca <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0310 	and.w	r3, r3, #16
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d012      	beq.n	80097ee <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	695a      	ldr	r2, [r3, #20]
 80097cc:	4b74      	ldr	r3, [pc, #464]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 80097ce:	6a1b      	ldr	r3, [r3, #32]
 80097d0:	0a1b      	lsrs	r3, r3, #8
 80097d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d909      	bls.n	80097ee <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80097da:	4b71      	ldr	r3, [pc, #452]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	021b      	lsls	r3, r3, #8
 80097e8:	496d      	ldr	r1, [pc, #436]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0308 	and.w	r3, r3, #8
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d012      	beq.n	8009820 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	691a      	ldr	r2, [r3, #16]
 80097fe:	4b68      	ldr	r3, [pc, #416]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	091b      	lsrs	r3, r3, #4
 8009804:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009808:	429a      	cmp	r2, r3
 800980a:	d909      	bls.n	8009820 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800980c:	4b64      	ldr	r3, [pc, #400]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 800980e:	6a1b      	ldr	r3, [r3, #32]
 8009810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	011b      	lsls	r3, r3, #4
 800981a:	4961      	ldr	r1, [pc, #388]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 800981c:	4313      	orrs	r3, r2
 800981e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0304 	and.w	r3, r3, #4
 8009828:	2b00      	cmp	r3, #0
 800982a:	d010      	beq.n	800984e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	4b5b      	ldr	r3, [pc, #364]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009838:	429a      	cmp	r2, r3
 800983a:	d908      	bls.n	800984e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800983c:	4b58      	ldr	r3, [pc, #352]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	4955      	ldr	r1, [pc, #340]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 800984a:	4313      	orrs	r3, r2
 800984c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	2b00      	cmp	r3, #0
 8009858:	d010      	beq.n	800987c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	689a      	ldr	r2, [r3, #8]
 800985e:	4b50      	ldr	r3, [pc, #320]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	f003 030f 	and.w	r3, r3, #15
 8009866:	429a      	cmp	r2, r3
 8009868:	d908      	bls.n	800987c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800986a:	4b4d      	ldr	r3, [pc, #308]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	f023 020f 	bic.w	r2, r3, #15
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	494a      	ldr	r1, [pc, #296]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 8009878:	4313      	orrs	r3, r2
 800987a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	f000 8093 	beq.w	80099b0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	2b03      	cmp	r3, #3
 8009890:	d107      	bne.n	80098a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009892:	4b43      	ldr	r3, [pc, #268]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d121      	bne.n	80098e2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e113      	b.n	8009aca <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d107      	bne.n	80098ba <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098aa:	4b3d      	ldr	r3, [pc, #244]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d115      	bne.n	80098e2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e107      	b.n	8009aca <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d107      	bne.n	80098d2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80098c2:	4b37      	ldr	r3, [pc, #220]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d109      	bne.n	80098e2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e0fb      	b.n	8009aca <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80098d2:	4b33      	ldr	r3, [pc, #204]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 0302 	and.w	r3, r3, #2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e0f3      	b.n	8009aca <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80098e2:	4b2f      	ldr	r3, [pc, #188]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	f023 0203 	bic.w	r2, r3, #3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	492c      	ldr	r1, [pc, #176]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 80098f0:	4313      	orrs	r3, r2
 80098f2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098f4:	f7fb febe 	bl	8005674 <HAL_GetTick>
 80098f8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	2b03      	cmp	r3, #3
 8009900:	d112      	bne.n	8009928 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009902:	e00a      	b.n	800991a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8009904:	f7fb feb6 	bl	8005674 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009912:	4293      	cmp	r3, r2
 8009914:	d901      	bls.n	800991a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8009916:	2303      	movs	r3, #3
 8009918:	e0d7      	b.n	8009aca <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800991a:	4b21      	ldr	r3, [pc, #132]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	f003 0318 	and.w	r3, r3, #24
 8009922:	2b18      	cmp	r3, #24
 8009924:	d1ee      	bne.n	8009904 <HAL_RCC_ClockConfig+0x18c>
 8009926:	e043      	b.n	80099b0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	2b02      	cmp	r3, #2
 800992e:	d112      	bne.n	8009956 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009930:	e00a      	b.n	8009948 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8009932:	f7fb fe9f 	bl	8005674 <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009940:	4293      	cmp	r3, r2
 8009942:	d901      	bls.n	8009948 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e0c0      	b.n	8009aca <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009948:	4b15      	ldr	r3, [pc, #84]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	f003 0318 	and.w	r3, r3, #24
 8009950:	2b10      	cmp	r3, #16
 8009952:	d1ee      	bne.n	8009932 <HAL_RCC_ClockConfig+0x1ba>
 8009954:	e02c      	b.n	80099b0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d122      	bne.n	80099a4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800995e:	e00a      	b.n	8009976 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8009960:	f7fb fe88 	bl	8005674 <HAL_GetTick>
 8009964:	4602      	mov	r2, r0
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800996e:	4293      	cmp	r3, r2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e0a9      	b.n	8009aca <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8009976:	4b0a      	ldr	r3, [pc, #40]	@ (80099a0 <HAL_RCC_ClockConfig+0x228>)
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	f003 0318 	and.w	r3, r3, #24
 800997e:	2b08      	cmp	r3, #8
 8009980:	d1ee      	bne.n	8009960 <HAL_RCC_ClockConfig+0x1e8>
 8009982:	e015      	b.n	80099b0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8009984:	f7fb fe76 	bl	8005674 <HAL_GetTick>
 8009988:	4602      	mov	r2, r0
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009992:	4293      	cmp	r3, r2
 8009994:	d906      	bls.n	80099a4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e097      	b.n	8009aca <HAL_RCC_ClockConfig+0x352>
 800999a:	bf00      	nop
 800999c:	40022000 	.word	0x40022000
 80099a0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80099a4:	4b4b      	ldr	r3, [pc, #300]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	f003 0318 	and.w	r3, r3, #24
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e9      	bne.n	8009984 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0302 	and.w	r3, r3, #2
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d010      	beq.n	80099de <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	689a      	ldr	r2, [r3, #8]
 80099c0:	4b44      	ldr	r3, [pc, #272]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	f003 030f 	and.w	r3, r3, #15
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d208      	bcs.n	80099de <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80099cc:	4b41      	ldr	r3, [pc, #260]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	f023 020f 	bic.w	r2, r3, #15
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	493e      	ldr	r1, [pc, #248]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80099de:	4b3e      	ldr	r3, [pc, #248]	@ (8009ad8 <HAL_RCC_ClockConfig+0x360>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 030f 	and.w	r3, r3, #15
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d210      	bcs.n	8009a0e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099ec:	4b3a      	ldr	r3, [pc, #232]	@ (8009ad8 <HAL_RCC_ClockConfig+0x360>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f023 020f 	bic.w	r2, r3, #15
 80099f4:	4938      	ldr	r1, [pc, #224]	@ (8009ad8 <HAL_RCC_ClockConfig+0x360>)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099fc:	4b36      	ldr	r3, [pc, #216]	@ (8009ad8 <HAL_RCC_ClockConfig+0x360>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 030f 	and.w	r3, r3, #15
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d001      	beq.n	8009a0e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e05d      	b.n	8009aca <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0304 	and.w	r3, r3, #4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d010      	beq.n	8009a3c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68da      	ldr	r2, [r3, #12]
 8009a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d208      	bcs.n	8009a3c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8009a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	4927      	ldr	r1, [pc, #156]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0308 	and.w	r3, r3, #8
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d012      	beq.n	8009a6e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	4b21      	ldr	r3, [pc, #132]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	091b      	lsrs	r3, r3, #4
 8009a52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d209      	bcs.n	8009a6e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8009a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	011b      	lsls	r3, r3, #4
 8009a68:	491a      	ldr	r1, [pc, #104]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f003 0310 	and.w	r3, r3, #16
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d012      	beq.n	8009aa0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	695a      	ldr	r2, [r3, #20]
 8009a7e:	4b15      	ldr	r3, [pc, #84]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	0a1b      	lsrs	r3, r3, #8
 8009a84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d209      	bcs.n	8009aa0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8009a8c:	4b11      	ldr	r3, [pc, #68]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 8009a8e:	6a1b      	ldr	r3, [r3, #32]
 8009a90:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	021b      	lsls	r3, r3, #8
 8009a9a:	490e      	ldr	r1, [pc, #56]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009aa0:	f000 f822 	bl	8009ae8 <HAL_RCC_GetSysClockFreq>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad4 <HAL_RCC_ClockConfig+0x35c>)
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	f003 030f 	and.w	r3, r3, #15
 8009aae:	490b      	ldr	r1, [pc, #44]	@ (8009adc <HAL_RCC_ClockConfig+0x364>)
 8009ab0:	5ccb      	ldrb	r3, [r1, r3]
 8009ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8009ae0 <HAL_RCC_ClockConfig+0x368>)
 8009ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009aba:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae4 <HAL_RCC_ClockConfig+0x36c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fb fd4e 	bl	8005560 <HAL_InitTick>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8009ac8:	7afb      	ldrb	r3, [r7, #11]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	44020c00 	.word	0x44020c00
 8009ad8:	40022000 	.word	0x40022000
 8009adc:	08018c54 	.word	0x08018c54
 8009ae0:	20000004 	.word	0x20000004
 8009ae4:	20000024 	.word	0x20000024

08009ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b089      	sub	sp, #36	@ 0x24
 8009aec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8009aee:	4b8c      	ldr	r3, [pc, #560]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	f003 0318 	and.w	r3, r3, #24
 8009af6:	2b08      	cmp	r3, #8
 8009af8:	d102      	bne.n	8009b00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009afa:	4b8a      	ldr	r3, [pc, #552]	@ (8009d24 <HAL_RCC_GetSysClockFreq+0x23c>)
 8009afc:	61fb      	str	r3, [r7, #28]
 8009afe:	e107      	b.n	8009d10 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009b00:	4b87      	ldr	r3, [pc, #540]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b02:	69db      	ldr	r3, [r3, #28]
 8009b04:	f003 0318 	and.w	r3, r3, #24
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d112      	bne.n	8009b32 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8009b0c:	4b84      	ldr	r3, [pc, #528]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0320 	and.w	r3, r3, #32
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d009      	beq.n	8009b2c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b18:	4b81      	ldr	r3, [pc, #516]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	08db      	lsrs	r3, r3, #3
 8009b1e:	f003 0303 	and.w	r3, r3, #3
 8009b22:	4a81      	ldr	r2, [pc, #516]	@ (8009d28 <HAL_RCC_GetSysClockFreq+0x240>)
 8009b24:	fa22 f303 	lsr.w	r3, r2, r3
 8009b28:	61fb      	str	r3, [r7, #28]
 8009b2a:	e0f1      	b.n	8009d10 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8009b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8009d28 <HAL_RCC_GetSysClockFreq+0x240>)
 8009b2e:	61fb      	str	r3, [r7, #28]
 8009b30:	e0ee      	b.n	8009d10 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009b32:	4b7b      	ldr	r3, [pc, #492]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	f003 0318 	and.w	r3, r3, #24
 8009b3a:	2b10      	cmp	r3, #16
 8009b3c:	d102      	bne.n	8009b44 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8009d2c <HAL_RCC_GetSysClockFreq+0x244>)
 8009b40:	61fb      	str	r3, [r7, #28]
 8009b42:	e0e5      	b.n	8009d10 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b44:	4b76      	ldr	r3, [pc, #472]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b46:	69db      	ldr	r3, [r3, #28]
 8009b48:	f003 0318 	and.w	r3, r3, #24
 8009b4c:	2b18      	cmp	r3, #24
 8009b4e:	f040 80dd 	bne.w	8009d0c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009b52:	4b73      	ldr	r3, [pc, #460]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b56:	f003 0303 	and.w	r3, r3, #3
 8009b5a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8009b5c:	4b70      	ldr	r3, [pc, #448]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b60:	0a1b      	lsrs	r3, r3, #8
 8009b62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b66:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009b68:	4b6d      	ldr	r3, [pc, #436]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b6c:	091b      	lsrs	r3, r3, #4
 8009b6e:	f003 0301 	and.w	r3, r3, #1
 8009b72:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8009b74:	4b6a      	ldr	r3, [pc, #424]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8009b78:	08db      	lsrs	r3, r3, #3
 8009b7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	fb02 f303 	mul.w	r3, r2, r3
 8009b84:	ee07 3a90 	vmov	s15, r3
 8009b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 80b7 	beq.w	8009d06 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d003      	beq.n	8009ba6 <HAL_RCC_GetSysClockFreq+0xbe>
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b03      	cmp	r3, #3
 8009ba2:	d056      	beq.n	8009c52 <HAL_RCC_GetSysClockFreq+0x16a>
 8009ba4:	e077      	b.n	8009c96 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8009ba6:	4b5e      	ldr	r3, [pc, #376]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 0320 	and.w	r3, r3, #32
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d02d      	beq.n	8009c0e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	08db      	lsrs	r3, r3, #3
 8009bb8:	f003 0303 	and.w	r3, r3, #3
 8009bbc:	4a5a      	ldr	r2, [pc, #360]	@ (8009d28 <HAL_RCC_GetSysClockFreq+0x240>)
 8009bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	ee07 3a90 	vmov	s15, r3
 8009bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bdc:	4b50      	ldr	r3, [pc, #320]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be4:	ee07 3a90 	vmov	s15, r3
 8009be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bec:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bf0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8009d30 <HAL_RCC_GetSysClockFreq+0x248>
 8009bf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009bf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c08:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8009c0c:	e065      	b.n	8009cda <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	ee07 3a90 	vmov	s15, r3
 8009c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c18:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8009d34 <HAL_RCC_GetSysClockFreq+0x24c>
 8009c1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c20:	4b3f      	ldr	r3, [pc, #252]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c28:	ee07 3a90 	vmov	s15, r3
 8009c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c30:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c34:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009d30 <HAL_RCC_GetSysClockFreq+0x248>
 8009c38:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c4c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8009c50:	e043      	b.n	8009cda <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	ee07 3a90 	vmov	s15, r3
 8009c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c5c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8009d38 <HAL_RCC_GetSysClockFreq+0x250>
 8009c60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c64:	4b2e      	ldr	r3, [pc, #184]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c6c:	ee07 3a90 	vmov	s15, r3
 8009c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c74:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c78:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8009d30 <HAL_RCC_GetSysClockFreq+0x248>
 8009c7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c80:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c88:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c90:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8009c94:	e021      	b.n	8009cda <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	ee07 3a90 	vmov	s15, r3
 8009c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ca0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009d3c <HAL_RCC_GetSysClockFreq+0x254>
 8009ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb0:	ee07 3a90 	vmov	s15, r3
 8009cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cbc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8009d30 <HAL_RCC_GetSysClockFreq+0x248>
 8009cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8009cd8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8009cda:	4b11      	ldr	r3, [pc, #68]	@ (8009d20 <HAL_RCC_GetSysClockFreq+0x238>)
 8009cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cde:	0a5b      	lsrs	r3, r3, #9
 8009ce0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	ee07 3a90 	vmov	s15, r3
 8009cee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009cf2:	edd7 6a06 	vldr	s13, [r7, #24]
 8009cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cfe:	ee17 3a90 	vmov	r3, s15
 8009d02:	61fb      	str	r3, [r7, #28]
 8009d04:	e004      	b.n	8009d10 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	61fb      	str	r3, [r7, #28]
 8009d0a:	e001      	b.n	8009d10 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8009d0c:	4b06      	ldr	r3, [pc, #24]	@ (8009d28 <HAL_RCC_GetSysClockFreq+0x240>)
 8009d0e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8009d10:	69fb      	ldr	r3, [r7, #28]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3724      	adds	r7, #36	@ 0x24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	44020c00 	.word	0x44020c00
 8009d24:	003d0900 	.word	0x003d0900
 8009d28:	03d09000 	.word	0x03d09000
 8009d2c:	007a1200 	.word	0x007a1200
 8009d30:	46000000 	.word	0x46000000
 8009d34:	4c742400 	.word	0x4c742400
 8009d38:	4af42400 	.word	0x4af42400
 8009d3c:	4a742400 	.word	0x4a742400

08009d40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8009d44:	f7ff fed0 	bl	8009ae8 <HAL_RCC_GetSysClockFreq>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	4b08      	ldr	r3, [pc, #32]	@ (8009d6c <HAL_RCC_GetHCLKFreq+0x2c>)
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8009d4e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8009d52:	4907      	ldr	r1, [pc, #28]	@ (8009d70 <HAL_RCC_GetHCLKFreq+0x30>)
 8009d54:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8009d56:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8009d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d5e:	4a05      	ldr	r2, [pc, #20]	@ (8009d74 <HAL_RCC_GetHCLKFreq+0x34>)
 8009d60:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8009d62:	4b04      	ldr	r3, [pc, #16]	@ (8009d74 <HAL_RCC_GetHCLKFreq+0x34>)
 8009d64:	681b      	ldr	r3, [r3, #0]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	44020c00 	.word	0x44020c00
 8009d70:	08018c54 	.word	0x08018c54
 8009d74:	20000004 	.word	0x20000004

08009d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8009d7c:	f7ff ffe0 	bl	8009d40 <HAL_RCC_GetHCLKFreq>
 8009d80:	4602      	mov	r2, r0
 8009d82:	4b06      	ldr	r3, [pc, #24]	@ (8009d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	091b      	lsrs	r3, r3, #4
 8009d88:	f003 0307 	and.w	r3, r3, #7
 8009d8c:	4904      	ldr	r1, [pc, #16]	@ (8009da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d8e:	5ccb      	ldrb	r3, [r1, r3]
 8009d90:	f003 031f 	and.w	r3, r3, #31
 8009d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	44020c00 	.word	0x44020c00
 8009da0:	08018c64 	.word	0x08018c64

08009da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8009da8:	f7ff ffca 	bl	8009d40 <HAL_RCC_GetHCLKFreq>
 8009dac:	4602      	mov	r2, r0
 8009dae:	4b06      	ldr	r3, [pc, #24]	@ (8009dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	0a1b      	lsrs	r3, r3, #8
 8009db4:	f003 0307 	and.w	r3, r3, #7
 8009db8:	4904      	ldr	r1, [pc, #16]	@ (8009dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8009dba:	5ccb      	ldrb	r3, [r1, r3]
 8009dbc:	f003 031f 	and.w	r3, r3, #31
 8009dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	44020c00 	.word	0x44020c00
 8009dcc:	08018c64 	.word	0x08018c64

08009dd0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8009dd4:	f7ff ffb4 	bl	8009d40 <HAL_RCC_GetHCLKFreq>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	4b06      	ldr	r3, [pc, #24]	@ (8009df4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	0b1b      	lsrs	r3, r3, #12
 8009de0:	f003 0307 	and.w	r3, r3, #7
 8009de4:	4904      	ldr	r1, [pc, #16]	@ (8009df8 <HAL_RCC_GetPCLK3Freq+0x28>)
 8009de6:	5ccb      	ldrb	r3, [r1, r3]
 8009de8:	f003 031f 	and.w	r3, r3, #31
 8009dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	44020c00 	.word	0x44020c00
 8009df8:	08018c64 	.word	0x08018c64

08009dfc <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e00:	b0d8      	sub	sp, #352	@ 0x160
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8009e20:	2500      	movs	r5, #0
 8009e22:	ea54 0305 	orrs.w	r3, r4, r5
 8009e26:	d00b      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8009e28:	4bcd      	ldr	r3, [pc, #820]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e2e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8009e32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e38:	4ac9      	ldr	r2, [pc, #804]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009e3a:	430b      	orrs	r3, r1
 8009e3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	f002 0801 	and.w	r8, r2, #1
 8009e4c:	f04f 0900 	mov.w	r9, #0
 8009e50:	ea58 0309 	orrs.w	r3, r8, r9
 8009e54:	d042      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8009e56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e5c:	2b05      	cmp	r3, #5
 8009e5e:	d823      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8009e60:	a201      	add	r2, pc, #4	@ (adr r2, 8009e68 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8009e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e66:	bf00      	nop
 8009e68:	08009eb1 	.word	0x08009eb1
 8009e6c:	08009e81 	.word	0x08009e81
 8009e70:	08009e95 	.word	0x08009e95
 8009e74:	08009eb1 	.word	0x08009eb1
 8009e78:	08009eb1 	.word	0x08009eb1
 8009e7c:	08009eb1 	.word	0x08009eb1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e84:	3308      	adds	r3, #8
 8009e86:	4618      	mov	r0, r3
 8009e88:	f004 fee0 	bl	800ec4c <RCCEx_PLL2_Config>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8009e92:	e00e      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009e98:	3330      	adds	r3, #48	@ 0x30
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f004 ff6e 	bl	800ed7c <RCCEx_PLL3_Config>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8009ea6:	e004      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009eae:	e000      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8009eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10c      	bne.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009eba:	4ba9      	ldr	r3, [pc, #676]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009ebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009ec0:	f023 0107 	bic.w	r1, r3, #7
 8009ec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eca:	4aa5      	ldr	r2, [pc, #660]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009ecc:	430b      	orrs	r3, r1
 8009ece:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009ed2:	e003      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009ed8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee4:	f002 0a02 	and.w	sl, r2, #2
 8009ee8:	f04f 0b00 	mov.w	fp, #0
 8009eec:	ea5a 030b 	orrs.w	r3, sl, fp
 8009ef0:	f000 8088 	beq.w	800a004 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8009ef4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009efa:	2b28      	cmp	r3, #40	@ 0x28
 8009efc:	d868      	bhi.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009efe:	a201      	add	r2, pc, #4	@ (adr r2, 8009f04 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009fd9 	.word	0x08009fd9
 8009f08:	08009fd1 	.word	0x08009fd1
 8009f0c:	08009fd1 	.word	0x08009fd1
 8009f10:	08009fd1 	.word	0x08009fd1
 8009f14:	08009fd1 	.word	0x08009fd1
 8009f18:	08009fd1 	.word	0x08009fd1
 8009f1c:	08009fd1 	.word	0x08009fd1
 8009f20:	08009fd1 	.word	0x08009fd1
 8009f24:	08009fa9 	.word	0x08009fa9
 8009f28:	08009fd1 	.word	0x08009fd1
 8009f2c:	08009fd1 	.word	0x08009fd1
 8009f30:	08009fd1 	.word	0x08009fd1
 8009f34:	08009fd1 	.word	0x08009fd1
 8009f38:	08009fd1 	.word	0x08009fd1
 8009f3c:	08009fd1 	.word	0x08009fd1
 8009f40:	08009fd1 	.word	0x08009fd1
 8009f44:	08009fbd 	.word	0x08009fbd
 8009f48:	08009fd1 	.word	0x08009fd1
 8009f4c:	08009fd1 	.word	0x08009fd1
 8009f50:	08009fd1 	.word	0x08009fd1
 8009f54:	08009fd1 	.word	0x08009fd1
 8009f58:	08009fd1 	.word	0x08009fd1
 8009f5c:	08009fd1 	.word	0x08009fd1
 8009f60:	08009fd1 	.word	0x08009fd1
 8009f64:	08009fd9 	.word	0x08009fd9
 8009f68:	08009fd1 	.word	0x08009fd1
 8009f6c:	08009fd1 	.word	0x08009fd1
 8009f70:	08009fd1 	.word	0x08009fd1
 8009f74:	08009fd1 	.word	0x08009fd1
 8009f78:	08009fd1 	.word	0x08009fd1
 8009f7c:	08009fd1 	.word	0x08009fd1
 8009f80:	08009fd1 	.word	0x08009fd1
 8009f84:	08009fd9 	.word	0x08009fd9
 8009f88:	08009fd1 	.word	0x08009fd1
 8009f8c:	08009fd1 	.word	0x08009fd1
 8009f90:	08009fd1 	.word	0x08009fd1
 8009f94:	08009fd1 	.word	0x08009fd1
 8009f98:	08009fd1 	.word	0x08009fd1
 8009f9c:	08009fd1 	.word	0x08009fd1
 8009fa0:	08009fd1 	.word	0x08009fd1
 8009fa4:	08009fd9 	.word	0x08009fd9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009fa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009fac:	3308      	adds	r3, #8
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f004 fe4c 	bl	800ec4c <RCCEx_PLL2_Config>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8009fba:	e00e      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009fc0:	3330      	adds	r3, #48	@ 0x30
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f004 feda 	bl	800ed7c <RCCEx_PLL3_Config>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8009fce:	e004      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8009fd6:	e000      	b.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8009fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10c      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8009fe2:	4b5f      	ldr	r3, [pc, #380]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009fe8:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009fec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ff2:	4a5b      	ldr	r2, [pc, #364]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8009ff4:	430b      	orrs	r3, r1
 8009ff6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8009ffa:	e003      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a000:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a004:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	f002 0304 	and.w	r3, r2, #4
 800a010:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800a014:	2300      	movs	r3, #0
 800a016:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800a01a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800a01e:	460b      	mov	r3, r1
 800a020:	4313      	orrs	r3, r2
 800a022:	d04e      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800a024:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a02a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a02e:	d02c      	beq.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800a030:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800a034:	d825      	bhi.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a03a:	d028      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a03c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a040:	d81f      	bhi.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a042:	2bc0      	cmp	r3, #192	@ 0xc0
 800a044:	d025      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800a046:	2bc0      	cmp	r3, #192	@ 0xc0
 800a048:	d81b      	bhi.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a04a:	2b80      	cmp	r3, #128	@ 0x80
 800a04c:	d00f      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x272>
 800a04e:	2b80      	cmp	r3, #128	@ 0x80
 800a050:	d817      	bhi.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a052:	2b00      	cmp	r3, #0
 800a054:	d01f      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800a056:	2b40      	cmp	r3, #64	@ 0x40
 800a058:	d113      	bne.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a05a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a05e:	3308      	adds	r3, #8
 800a060:	4618      	mov	r0, r3
 800a062:	f004 fdf3 	bl	800ec4c <RCCEx_PLL2_Config>
 800a066:	4603      	mov	r3, r0
 800a068:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800a06c:	e014      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a06e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a072:	3330      	adds	r3, #48	@ 0x30
 800a074:	4618      	mov	r0, r3
 800a076:	f004 fe81 	bl	800ed7c <RCCEx_PLL3_Config>
 800a07a:	4603      	mov	r3, r0
 800a07c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800a080:	e00a      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a088:	e006      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a08a:	bf00      	nop
 800a08c:	e004      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a08e:	bf00      	nop
 800a090:	e002      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a092:	bf00      	nop
 800a094:	e000      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800a096:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a098:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10c      	bne.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a0a0:	4b2f      	ldr	r3, [pc, #188]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a0a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a0a6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a0aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a0ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0b0:	4a2b      	ldr	r2, [pc, #172]	@ (800a160 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a0b2:	430b      	orrs	r3, r1
 800a0b4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a0b8:	e003      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a0be:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a0c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	f002 0308 	and.w	r3, r2, #8
 800a0ce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800a0d8:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	d056      	beq.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800a0e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a0e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0e8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a0ec:	d031      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800a0ee:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a0f2:	d82a      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a0f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0f8:	d02d      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800a0fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0fe:	d824      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a100:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a104:	d029      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800a106:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a10a:	d81e      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a10c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a110:	d011      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800a112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a116:	d818      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d023      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800a11c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a120:	d113      	bne.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a122:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a126:	3308      	adds	r3, #8
 800a128:	4618      	mov	r0, r3
 800a12a:	f004 fd8f 	bl	800ec4c <RCCEx_PLL2_Config>
 800a12e:	4603      	mov	r3, r0
 800a130:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800a134:	e017      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a136:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a13a:	3330      	adds	r3, #48	@ 0x30
 800a13c:	4618      	mov	r0, r3
 800a13e:	f004 fe1d 	bl	800ed7c <RCCEx_PLL3_Config>
 800a142:	4603      	mov	r3, r0
 800a144:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800a148:	e00d      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a150:	e009      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800a152:	bf00      	nop
 800a154:	e007      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800a156:	bf00      	nop
 800a158:	e005      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800a15a:	bf00      	nop
 800a15c:	e003      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a15e:	bf00      	nop
 800a160:	44020c00 	.word	0x44020c00
        break;
 800a164:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a166:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10c      	bne.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a16e:	4bbb      	ldr	r3, [pc, #748]	@ (800a45c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a170:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a174:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800a178:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a17c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a17e:	4ab7      	ldr	r2, [pc, #732]	@ (800a45c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a180:	430b      	orrs	r3, r1
 800a182:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a186:	e003      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a188:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a18c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a190:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	f002 0310 	and.w	r3, r2, #16
 800a19c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800a1a6:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	d053      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800a1b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a1b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1b6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a1ba:	d031      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800a1bc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a1c0:	d82a      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a1c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1c6:	d02d      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a1c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1cc:	d824      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a1ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1d2:	d029      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800a1d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1d8:	d81e      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a1da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1de:	d011      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800a1e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1e4:	d818      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d020      	beq.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800a1ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1ee:	d113      	bne.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a1f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f004 fd28 	bl	800ec4c <RCCEx_PLL2_Config>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800a202:	e014      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a204:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a208:	3330      	adds	r3, #48	@ 0x30
 800a20a:	4618      	mov	r0, r3
 800a20c:	f004 fdb6 	bl	800ed7c <RCCEx_PLL3_Config>
 800a210:	4603      	mov	r3, r0
 800a212:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800a216:	e00a      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a21e:	e006      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800a220:	bf00      	nop
 800a222:	e004      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800a224:	bf00      	nop
 800a226:	e002      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800a228:	bf00      	nop
 800a22a:	e000      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800a22c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a22e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10c      	bne.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a236:	4b89      	ldr	r3, [pc, #548]	@ (800a45c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a238:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a23c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a240:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a246:	4a85      	ldr	r2, [pc, #532]	@ (800a45c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a248:	430b      	orrs	r3, r1
 800a24a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a24e:	e003      	b.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a250:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a254:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a260:	f002 0320 	and.w	r3, r2, #32
 800a264:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800a268:	2300      	movs	r3, #0
 800a26a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800a26e:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800a272:	460b      	mov	r3, r1
 800a274:	4313      	orrs	r3, r2
 800a276:	d053      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800a278:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a27c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a27e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a282:	d031      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800a284:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a288:	d82a      	bhi.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800a28a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a28e:	d02d      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800a290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a294:	d824      	bhi.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800a296:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a29a:	d029      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800a29c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a2a0:	d81e      	bhi.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800a2a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2a6:	d011      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800a2a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2ac:	d818      	bhi.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d020      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800a2b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2b6:	d113      	bne.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a2b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a2bc:	3308      	adds	r3, #8
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f004 fcc4 	bl	800ec4c <RCCEx_PLL2_Config>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800a2ca:	e014      	b.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a2cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a2d0:	3330      	adds	r3, #48	@ 0x30
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f004 fd52 	bl	800ed7c <RCCEx_PLL3_Config>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800a2de:	e00a      	b.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a2e6:	e006      	b.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800a2e8:	bf00      	nop
 800a2ea:	e004      	b.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800a2ec:	bf00      	nop
 800a2ee:	e002      	b.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800a2f0:	bf00      	nop
 800a2f2:	e000      	b.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800a2f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10c      	bne.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800a2fe:	4b57      	ldr	r3, [pc, #348]	@ (800a45c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a300:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a304:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 800a308:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a30c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a30e:	4a53      	ldr	r2, [pc, #332]	@ (800a45c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a310:	430b      	orrs	r3, r1
 800a312:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a316:	e003      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a318:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a31c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a320:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a328:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a32c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800a330:	2300      	movs	r3, #0
 800a332:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800a336:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800a33a:	460b      	mov	r3, r1
 800a33c:	4313      	orrs	r3, r2
 800a33e:	d053      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800a340:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a346:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a34a:	d031      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800a34c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a350:	d82a      	bhi.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a356:	d02d      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800a358:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a35c:	d824      	bhi.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a35e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a362:	d029      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a364:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a368:	d81e      	bhi.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a36a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a36e:	d011      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a370:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a374:	d818      	bhi.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a376:	2b00      	cmp	r3, #0
 800a378:	d020      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a37a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a37e:	d113      	bne.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a380:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a384:	3308      	adds	r3, #8
 800a386:	4618      	mov	r0, r3
 800a388:	f004 fc60 	bl	800ec4c <RCCEx_PLL2_Config>
 800a38c:	4603      	mov	r3, r0
 800a38e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800a392:	e014      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a394:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a398:	3330      	adds	r3, #48	@ 0x30
 800a39a:	4618      	mov	r0, r3
 800a39c:	f004 fcee 	bl	800ed7c <RCCEx_PLL3_Config>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800a3a6:	e00a      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a3ae:	e006      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a3b0:	bf00      	nop
 800a3b2:	e004      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a3b4:	bf00      	nop
 800a3b6:	e002      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a3b8:	bf00      	nop
 800a3ba:	e000      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800a3bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10c      	bne.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800a3c6:	4b25      	ldr	r3, [pc, #148]	@ (800a45c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a3c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a3cc:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 800a3d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a3d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3d6:	4a21      	ldr	r2, [pc, #132]	@ (800a45c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800a3d8:	430b      	orrs	r3, r1
 800a3da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a3de:	e003      	b.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a3e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a3e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a3f4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800a3fe:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800a402:	460b      	mov	r3, r1
 800a404:	4313      	orrs	r3, r2
 800a406:	d055      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800a408:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a40c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a40e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a412:	d033      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x680>
 800a414:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a418:	d82c      	bhi.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a41a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a41e:	d02f      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x684>
 800a420:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a424:	d826      	bhi.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a426:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a42a:	d02b      	beq.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800a42c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a430:	d820      	bhi.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a432:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a436:	d013      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a438:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a43c:	d81a      	bhi.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d022      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800a442:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a446:	d115      	bne.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a44c:	3308      	adds	r3, #8
 800a44e:	4618      	mov	r0, r3
 800a450:	f004 fbfc 	bl	800ec4c <RCCEx_PLL2_Config>
 800a454:	4603      	mov	r3, r0
 800a456:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800a45a:	e016      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800a45c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a460:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a464:	3330      	adds	r3, #48	@ 0x30
 800a466:	4618      	mov	r0, r3
 800a468:	f004 fc88 	bl	800ed7c <RCCEx_PLL3_Config>
 800a46c:	4603      	mov	r3, r0
 800a46e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800a472:	e00a      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a47a:	e006      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a47c:	bf00      	nop
 800a47e:	e004      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a480:	bf00      	nop
 800a482:	e002      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a484:	bf00      	nop
 800a486:	e000      	b.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800a488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a48a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d10c      	bne.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800a492:	4bbb      	ldr	r3, [pc, #748]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a494:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a498:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a49c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a4a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4a2:	4ab7      	ldr	r2, [pc, #732]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a4a4:	430b      	orrs	r3, r1
 800a4a6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a4aa:	e003      	b.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a4b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800a4b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800a4c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800a4ca:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	d053      	beq.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800a4d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a4d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4da:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a4de:	d031      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800a4e0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a4e4:	d82a      	bhi.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a4e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4ea:	d02d      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800a4ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4f0:	d824      	bhi.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a4f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4f6:	d029      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x750>
 800a4f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4fc:	d81e      	bhi.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a4fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a502:	d011      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800a504:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a508:	d818      	bhi.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d020      	beq.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800a50e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a512:	d113      	bne.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a514:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a518:	3308      	adds	r3, #8
 800a51a:	4618      	mov	r0, r3
 800a51c:	f004 fb96 	bl	800ec4c <RCCEx_PLL2_Config>
 800a520:	4603      	mov	r3, r0
 800a522:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800a526:	e014      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a528:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a52c:	3330      	adds	r3, #48	@ 0x30
 800a52e:	4618      	mov	r0, r3
 800a530:	f004 fc24 	bl	800ed7c <RCCEx_PLL3_Config>
 800a534:	4603      	mov	r3, r0
 800a536:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800a53a:	e00a      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a542:	e006      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a544:	bf00      	nop
 800a546:	e004      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a548:	bf00      	nop
 800a54a:	e002      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a54c:	bf00      	nop
 800a54e:	e000      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800a550:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a552:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10c      	bne.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800a55a:	4b89      	ldr	r3, [pc, #548]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a55c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a560:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a564:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a568:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a56a:	4a85      	ldr	r2, [pc, #532]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a56c:	430b      	orrs	r3, r1
 800a56e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a572:	e003      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a574:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a578:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800a57c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800a588:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800a58c:	2300      	movs	r3, #0
 800a58e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800a592:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800a596:	460b      	mov	r3, r1
 800a598:	4313      	orrs	r3, r2
 800a59a:	d055      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800a59c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5a4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a5a8:	d031      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x812>
 800a5aa:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a5ae:	d82a      	bhi.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a5b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5b4:	d02d      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800a5b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5ba:	d824      	bhi.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a5bc:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a5c0:	d029      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800a5c2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a5c6:	d81e      	bhi.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a5c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5cc:	d011      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800a5ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5d2:	d818      	bhi.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d020      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800a5d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5dc:	d113      	bne.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a5de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f004 fb31 	bl	800ec4c <RCCEx_PLL2_Config>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800a5f0:	e014      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a5f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a5f6:	3330      	adds	r3, #48	@ 0x30
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f004 fbbf 	bl	800ed7c <RCCEx_PLL3_Config>
 800a5fe:	4603      	mov	r3, r0
 800a600:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800a604:	e00a      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a60c:	e006      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a60e:	bf00      	nop
 800a610:	e004      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a612:	bf00      	nop
 800a614:	e002      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a616:	bf00      	nop
 800a618:	e000      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800a61a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a61c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10d      	bne.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800a624:	4b56      	ldr	r3, [pc, #344]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a626:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a62a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800a62e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a636:	4a52      	ldr	r2, [pc, #328]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a638:	430b      	orrs	r3, r1
 800a63a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a63e:	e003      	b.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a640:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a644:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800a648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a650:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800a654:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a658:	2300      	movs	r3, #0
 800a65a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a65e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a662:	460b      	mov	r3, r1
 800a664:	4313      	orrs	r3, r2
 800a666:	d044      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800a668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a66c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a670:	2b05      	cmp	r3, #5
 800a672:	d823      	bhi.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800a674:	a201      	add	r2, pc, #4	@ (adr r2, 800a67c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800a676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67a:	bf00      	nop
 800a67c:	0800a6c5 	.word	0x0800a6c5
 800a680:	0800a695 	.word	0x0800a695
 800a684:	0800a6a9 	.word	0x0800a6a9
 800a688:	0800a6c5 	.word	0x0800a6c5
 800a68c:	0800a6c5 	.word	0x0800a6c5
 800a690:	0800a6c5 	.word	0x0800a6c5
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a694:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a698:	3308      	adds	r3, #8
 800a69a:	4618      	mov	r0, r3
 800a69c:	f004 fad6 	bl	800ec4c <RCCEx_PLL2_Config>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800a6a6:	e00e      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a6a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6ac:	3330      	adds	r3, #48	@ 0x30
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f004 fb64 	bl	800ed7c <RCCEx_PLL3_Config>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800a6ba:	e004      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a6c2:	e000      	b.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800a6c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10d      	bne.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800a6ce:	4b2c      	ldr	r3, [pc, #176]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a6d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a6d4:	f023 0107 	bic.w	r1, r3, #7
 800a6d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6e0:	4a27      	ldr	r2, [pc, #156]	@ (800a780 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800a6e2:	430b      	orrs	r3, r1
 800a6e4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800a6e8:	e003      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a6ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800a6f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a6fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a702:	2300      	movs	r3, #0
 800a704:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a708:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a70c:	460b      	mov	r3, r1
 800a70e:	4313      	orrs	r3, r2
 800a710:	d04f      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800a712:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a71a:	2b50      	cmp	r3, #80	@ 0x50
 800a71c:	d029      	beq.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a71e:	2b50      	cmp	r3, #80	@ 0x50
 800a720:	d823      	bhi.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a722:	2b40      	cmp	r3, #64	@ 0x40
 800a724:	d027      	beq.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800a726:	2b40      	cmp	r3, #64	@ 0x40
 800a728:	d81f      	bhi.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a72a:	2b30      	cmp	r3, #48	@ 0x30
 800a72c:	d025      	beq.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a72e:	2b30      	cmp	r3, #48	@ 0x30
 800a730:	d81b      	bhi.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a732:	2b20      	cmp	r3, #32
 800a734:	d00f      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800a736:	2b20      	cmp	r3, #32
 800a738:	d817      	bhi.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d022      	beq.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800a73e:	2b10      	cmp	r3, #16
 800a740:	d113      	bne.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a742:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a746:	3308      	adds	r3, #8
 800a748:	4618      	mov	r0, r3
 800a74a:	f004 fa7f 	bl	800ec4c <RCCEx_PLL2_Config>
 800a74e:	4603      	mov	r3, r0
 800a750:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800a754:	e017      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a756:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a75a:	3330      	adds	r3, #48	@ 0x30
 800a75c:	4618      	mov	r0, r3
 800a75e:	f004 fb0d 	bl	800ed7c <RCCEx_PLL3_Config>
 800a762:	4603      	mov	r3, r0
 800a764:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800a768:	e00d      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a770:	e009      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800a772:	bf00      	nop
 800a774:	e007      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800a776:	bf00      	nop
 800a778:	e005      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800a77a:	bf00      	nop
 800a77c:	e003      	b.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800a77e:	bf00      	nop
 800a780:	44020c00 	.word	0x44020c00
        break;
 800a784:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a786:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10d      	bne.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800a78e:	4baf      	ldr	r3, [pc, #700]	@ (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a790:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a794:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800a798:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a79c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7a0:	4aaa      	ldr	r2, [pc, #680]	@ (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a7a2:	430b      	orrs	r3, r1
 800a7a4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800a7a8:	e003      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a7ae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a7b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a7be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a7c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	d055      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800a7d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a7d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7da:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a7de:	d031      	beq.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800a7e0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a7e4:	d82a      	bhi.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800a7e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7ea:	d02d      	beq.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800a7ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7f0:	d824      	bhi.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800a7f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a7f6:	d029      	beq.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800a7f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a7fc:	d81e      	bhi.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800a7fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a802:	d011      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800a804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a808:	d818      	bhi.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d020      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800a80e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a812:	d113      	bne.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a814:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a818:	3308      	adds	r3, #8
 800a81a:	4618      	mov	r0, r3
 800a81c:	f004 fa16 	bl	800ec4c <RCCEx_PLL2_Config>
 800a820:	4603      	mov	r3, r0
 800a822:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800a826:	e014      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a828:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a82c:	3330      	adds	r3, #48	@ 0x30
 800a82e:	4618      	mov	r0, r3
 800a830:	f004 faa4 	bl	800ed7c <RCCEx_PLL3_Config>
 800a834:	4603      	mov	r3, r0
 800a836:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800a83a:	e00a      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a842:	e006      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800a844:	bf00      	nop
 800a846:	e004      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800a848:	bf00      	nop
 800a84a:	e002      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800a84c:	bf00      	nop
 800a84e:	e000      	b.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800a850:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a852:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10d      	bne.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800a85a:	4b7c      	ldr	r3, [pc, #496]	@ (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a85c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a860:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a864:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a86c:	4a77      	ldr	r2, [pc, #476]	@ (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a86e:	430b      	orrs	r3, r1
 800a870:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a874:	e003      	b.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a876:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a87a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a87e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a886:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a88a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a88e:	2300      	movs	r3, #0
 800a890:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a894:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a898:	460b      	mov	r3, r1
 800a89a:	4313      	orrs	r3, r2
 800a89c:	d03d      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800a89e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a8aa:	d01b      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800a8ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a8b0:	d814      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800a8b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8b6:	d017      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800a8b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8bc:	d80e      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d014      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800a8c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8c6:	d109      	bne.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a8c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a8cc:	3330      	adds	r3, #48	@ 0x30
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f004 fa54 	bl	800ed7c <RCCEx_PLL3_Config>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800a8da:	e008      	b.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a8e2:	e004      	b.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800a8e4:	bf00      	nop
 800a8e6:	e002      	b.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800a8e8:	bf00      	nop
 800a8ea:	e000      	b.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800a8ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10d      	bne.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800a8f6:	4b55      	ldr	r3, [pc, #340]	@ (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a8f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a8fc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a900:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a908:	4a50      	ldr	r2, [pc, #320]	@ (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a90a:	430b      	orrs	r3, r1
 800a90c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a910:	e003      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a912:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a916:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a91a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a926:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a92a:	2300      	movs	r3, #0
 800a92c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a930:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a934:	460b      	mov	r3, r1
 800a936:	4313      	orrs	r3, r2
 800a938:	d03d      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800a93a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a93e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a942:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a946:	d01b      	beq.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800a948:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a94c:	d814      	bhi.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800a94e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a952:	d017      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800a954:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a958:	d80e      	bhi.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d014      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800a95e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a962:	d109      	bne.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a968:	3330      	adds	r3, #48	@ 0x30
 800a96a:	4618      	mov	r0, r3
 800a96c:	f004 fa06 	bl	800ed7c <RCCEx_PLL3_Config>
 800a970:	4603      	mov	r3, r0
 800a972:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800a976:	e008      	b.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800a97e:	e004      	b.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800a980:	bf00      	nop
 800a982:	e002      	b.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800a984:	bf00      	nop
 800a986:	e000      	b.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800a988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a98a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10d      	bne.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800a992:	4b2e      	ldr	r3, [pc, #184]	@ (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a994:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a998:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800a99c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a9a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a9a4:	4a29      	ldr	r2, [pc, #164]	@ (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800a9a6:	430b      	orrs	r3, r1
 800a9a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800a9ac:	e003      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800a9b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a9b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a9c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a9cc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	d040      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800a9d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800a9da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a9de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a9e2:	d01b      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800a9e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a9e8:	d814      	bhi.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800a9ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9ee:	d017      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a9f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9f4:	d80e      	bhi.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d014      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a9fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9fe:	d109      	bne.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aa00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa04:	3330      	adds	r3, #48	@ 0x30
 800aa06:	4618      	mov	r0, r3
 800aa08:	f004 f9b8 	bl	800ed7c <RCCEx_PLL3_Config>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800aa12:	e008      	b.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800aa1a:	e004      	b.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800aa1c:	bf00      	nop
 800aa1e:	e002      	b.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800aa20:	bf00      	nop
 800aa22:	e000      	b.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800aa24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d110      	bne.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800aa2e:	4b07      	ldr	r3, [pc, #28]	@ (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800aa30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aa34:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800aa38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa40:	4a02      	ldr	r2, [pc, #8]	@ (800aa4c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800aa42:	430b      	orrs	r3, r1
 800aa44:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800aa48:	e006      	b.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800aa4a:	bf00      	nop
 800aa4c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aa54:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aa58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa60:	2100      	movs	r1, #0
 800aa62:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800aa66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aa6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800aa72:	460b      	mov	r3, r1
 800aa74:	4313      	orrs	r3, r2
 800aa76:	d03d      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800aa78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aa7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa80:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800aa84:	d01b      	beq.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800aa86:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800aa8a:	d814      	bhi.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800aa8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa90:	d017      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800aa92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa96:	d80e      	bhi.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d014      	beq.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 800aa9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aaa0:	d109      	bne.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800aaa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aaa6:	3330      	adds	r3, #48	@ 0x30
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f004 f967 	bl	800ed7c <RCCEx_PLL3_Config>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800aab4:	e008      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800aabc:	e004      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800aabe:	bf00      	nop
 800aac0:	e002      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800aac2:	bf00      	nop
 800aac4:	e000      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800aac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aac8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10d      	bne.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800aad0:	4bbe      	ldr	r3, [pc, #760]	@ (800adcc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800aad2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aad6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800aada:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aade:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aae2:	4aba      	ldr	r2, [pc, #744]	@ (800adcc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800aae4:	430b      	orrs	r3, r1
 800aae6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800aaea:	e003      	b.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aaf0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800aaf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ab00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab04:	2300      	movs	r3, #0
 800ab06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ab0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4313      	orrs	r3, r2
 800ab12:	d035      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800ab14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab20:	d015      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800ab22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab26:	d80e      	bhi.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d012      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800ab2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab30:	d109      	bne.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ab32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab36:	3330      	adds	r3, #48	@ 0x30
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f004 f91f 	bl	800ed7c <RCCEx_PLL3_Config>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800ab44:	e006      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ab4c:	e002      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800ab4e:	bf00      	nop
 800ab50:	e000      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800ab52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab54:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10d      	bne.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800ab5c:	4b9b      	ldr	r3, [pc, #620]	@ (800adcc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ab5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab62:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800ab66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab6e:	4a97      	ldr	r2, [pc, #604]	@ (800adcc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ab70:	430b      	orrs	r3, r1
 800ab72:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800ab76:	e003      	b.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab78:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ab7c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ab80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab88:	2100      	movs	r1, #0
 800ab8a:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800ab8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab96:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	d00e      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800aba0:	4b8a      	ldr	r3, [pc, #552]	@ (800adcc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	4a89      	ldr	r2, [pc, #548]	@ (800adcc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800aba6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800abaa:	61d3      	str	r3, [r2, #28]
 800abac:	4b87      	ldr	r3, [pc, #540]	@ (800adcc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800abae:	69d9      	ldr	r1, [r3, #28]
 800abb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800abb4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800abb8:	4a84      	ldr	r2, [pc, #528]	@ (800adcc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800abba:	430b      	orrs	r3, r1
 800abbc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800abbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800abca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800abce:	2300      	movs	r3, #0
 800abd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800abd4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800abd8:	460b      	mov	r3, r1
 800abda:	4313      	orrs	r3, r2
 800abdc:	d055      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800abde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800abe2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800abe6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800abea:	d031      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 800abec:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800abf0:	d82a      	bhi.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800abf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abf6:	d02d      	beq.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800abf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abfc:	d824      	bhi.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800abfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac02:	d029      	beq.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800ac04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac08:	d81e      	bhi.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800ac0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac0e:	d011      	beq.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800ac10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac14:	d818      	bhi.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d020      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800ac1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac1e:	d113      	bne.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ac20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac24:	3308      	adds	r3, #8
 800ac26:	4618      	mov	r0, r3
 800ac28:	f004 f810 	bl	800ec4c <RCCEx_PLL2_Config>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800ac32:	e014      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ac34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac38:	3330      	adds	r3, #48	@ 0x30
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f004 f89e 	bl	800ed7c <RCCEx_PLL3_Config>
 800ac40:	4603      	mov	r3, r0
 800ac42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800ac46:	e00a      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ac4e:	e006      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800ac50:	bf00      	nop
 800ac52:	e004      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800ac54:	bf00      	nop
 800ac56:	e002      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800ac58:	bf00      	nop
 800ac5a:	e000      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800ac5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d10d      	bne.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800ac66:	4b59      	ldr	r3, [pc, #356]	@ (800adcc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ac68:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ac6c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800ac70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac78:	4a54      	ldr	r2, [pc, #336]	@ (800adcc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ac7a:	430b      	orrs	r3, r1
 800ac7c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800ac80:	e003      	b.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ac86:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ac8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac92:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ac96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aca0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800aca4:	460b      	mov	r3, r1
 800aca6:	4313      	orrs	r3, r2
 800aca8:	d055      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800acaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800acae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800acb2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800acb6:	d031      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800acb8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800acbc:	d82a      	bhi.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800acbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acc2:	d02d      	beq.n	800ad20 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800acc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acc8:	d824      	bhi.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800acca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800acce:	d029      	beq.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800acd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800acd4:	d81e      	bhi.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800acd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acda:	d011      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800acdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ace0:	d818      	bhi.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d020      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ace6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acea:	d113      	bne.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800acec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800acf0:	3308      	adds	r3, #8
 800acf2:	4618      	mov	r0, r3
 800acf4:	f003 ffaa 	bl	800ec4c <RCCEx_PLL2_Config>
 800acf8:	4603      	mov	r3, r0
 800acfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800acfe:	e014      	b.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ad00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad04:	3330      	adds	r3, #48	@ 0x30
 800ad06:	4618      	mov	r0, r3
 800ad08:	f004 f838 	bl	800ed7c <RCCEx_PLL3_Config>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800ad12:	e00a      	b.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ad1a:	e006      	b.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800ad1c:	bf00      	nop
 800ad1e:	e004      	b.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800ad20:	bf00      	nop
 800ad22:	e002      	b.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800ad24:	bf00      	nop
 800ad26:	e000      	b.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800ad28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10d      	bne.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800ad32:	4b26      	ldr	r3, [pc, #152]	@ (800adcc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ad34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ad38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ad3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ad44:	4a21      	ldr	r2, [pc, #132]	@ (800adcc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800ad46:	430b      	orrs	r3, r1
 800ad48:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800ad4c:	e003      	b.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ad52:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800ad56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5e:	2100      	movs	r1, #0
 800ad60:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800ad64:	f003 0320 	and.w	r3, r3, #32
 800ad68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ad70:	460b      	mov	r3, r1
 800ad72:	4313      	orrs	r3, r2
 800ad74:	d057      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800ad76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ad7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ad7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad82:	d033      	beq.n	800adec <HAL_RCCEx_PeriphCLKConfig+0xff0>
 800ad84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad88:	d82c      	bhi.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800ad8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad8e:	d02f      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800ad90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad94:	d826      	bhi.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800ad96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad9a:	d02b      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800ad9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ada0:	d820      	bhi.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800ada2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ada6:	d013      	beq.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ada8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adac:	d81a      	bhi.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d022      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800adb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adb6:	d115      	bne.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800adb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800adbc:	3308      	adds	r3, #8
 800adbe:	4618      	mov	r0, r3
 800adc0:	f003 ff44 	bl	800ec4c <RCCEx_PLL2_Config>
 800adc4:	4603      	mov	r3, r0
 800adc6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800adca:	e016      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800adcc:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800add0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800add4:	3330      	adds	r3, #48	@ 0x30
 800add6:	4618      	mov	r0, r3
 800add8:	f003 ffd0 	bl	800ed7c <RCCEx_PLL3_Config>
 800addc:	4603      	mov	r3, r0
 800adde:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800ade2:	e00a      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800adea:	e006      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800adec:	bf00      	nop
 800adee:	e004      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800adf0:	bf00      	nop
 800adf2:	e002      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800adf4:	bf00      	nop
 800adf6:	e000      	b.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800adf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adfa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10d      	bne.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800ae02:	4bbb      	ldr	r3, [pc, #748]	@ (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800ae04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ae08:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ae0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ae14:	4ab6      	ldr	r2, [pc, #728]	@ (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800ae16:	430b      	orrs	r3, r1
 800ae18:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800ae1c:	e003      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ae22:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800ae26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	2100      	movs	r1, #0
 800ae30:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800ae34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ae3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ae40:	460b      	mov	r3, r1
 800ae42:	4313      	orrs	r3, r2
 800ae44:	d055      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800ae46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ae4e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800ae52:	d031      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800ae54:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800ae58:	d82a      	bhi.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800ae5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae5e:	d02d      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 800ae60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae64:	d824      	bhi.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800ae66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae6a:	d029      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800ae6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ae70:	d81e      	bhi.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800ae72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae76:	d011      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800ae78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae7c:	d818      	bhi.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d020      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800ae82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae86:	d113      	bne.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ae88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ae8c:	3308      	adds	r3, #8
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f003 fedc 	bl	800ec4c <RCCEx_PLL2_Config>
 800ae94:	4603      	mov	r3, r0
 800ae96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800ae9a:	e014      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800ae9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aea0:	3330      	adds	r3, #48	@ 0x30
 800aea2:	4618      	mov	r0, r3
 800aea4:	f003 ff6a 	bl	800ed7c <RCCEx_PLL3_Config>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800aeae:	e00a      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800aeb6:	e006      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800aeb8:	bf00      	nop
 800aeba:	e004      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800aebc:	bf00      	nop
 800aebe:	e002      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800aec0:	bf00      	nop
 800aec2:	e000      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800aec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aec6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10d      	bne.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800aece:	4b88      	ldr	r3, [pc, #544]	@ (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800aed0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800aed4:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 800aed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aedc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aee0:	4a83      	ldr	r2, [pc, #524]	@ (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800aee2:	430b      	orrs	r3, r1
 800aee4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800aee8:	e003      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800aeee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800aef2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefa:	2100      	movs	r1, #0
 800aefc:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800af00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af08:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800af0c:	460b      	mov	r3, r1
 800af0e:	4313      	orrs	r3, r2
 800af10:	d055      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800af12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800af1a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800af1e:	d031      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800af20:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800af24:	d82a      	bhi.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800af26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af2a:	d02d      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800af2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af30:	d824      	bhi.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800af32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af36:	d029      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800af38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af3c:	d81e      	bhi.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800af3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af42:	d011      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800af44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af48:	d818      	bhi.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d020      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800af4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af52:	d113      	bne.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800af54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af58:	3308      	adds	r3, #8
 800af5a:	4618      	mov	r0, r3
 800af5c:	f003 fe76 	bl	800ec4c <RCCEx_PLL2_Config>
 800af60:	4603      	mov	r3, r0
 800af62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800af66:	e014      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800af68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800af6c:	3330      	adds	r3, #48	@ 0x30
 800af6e:	4618      	mov	r0, r3
 800af70:	f003 ff04 	bl	800ed7c <RCCEx_PLL3_Config>
 800af74:	4603      	mov	r3, r0
 800af76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800af7a:	e00a      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800af82:	e006      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800af84:	bf00      	nop
 800af86:	e004      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800af88:	bf00      	nop
 800af8a:	e002      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800af8c:	bf00      	nop
 800af8e:	e000      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800af90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10d      	bne.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800af9a:	4b55      	ldr	r3, [pc, #340]	@ (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800af9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800afa0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800afa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800afa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800afac:	4a50      	ldr	r2, [pc, #320]	@ (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800afae:	430b      	orrs	r3, r1
 800afb0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800afb4:	e003      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800afba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800afbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	2100      	movs	r1, #0
 800afc8:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800afcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800afd4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800afd8:	460b      	mov	r3, r1
 800afda:	4313      	orrs	r3, r2
 800afdc:	d055      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800afde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800afe2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800afe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afea:	d031      	beq.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800afec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aff0:	d82a      	bhi.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800aff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aff6:	d02d      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800aff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800affc:	d824      	bhi.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800affe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b002:	d029      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800b004:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b008:	d81e      	bhi.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800b00a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b00e:	d011      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800b010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b014:	d818      	bhi.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800b016:	2b00      	cmp	r3, #0
 800b018:	d020      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800b01a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b01e:	d113      	bne.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b020:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b024:	3308      	adds	r3, #8
 800b026:	4618      	mov	r0, r3
 800b028:	f003 fe10 	bl	800ec4c <RCCEx_PLL2_Config>
 800b02c:	4603      	mov	r3, r0
 800b02e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800b032:	e014      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b034:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b038:	3330      	adds	r3, #48	@ 0x30
 800b03a:	4618      	mov	r0, r3
 800b03c:	f003 fe9e 	bl	800ed7c <RCCEx_PLL3_Config>
 800b040:	4603      	mov	r3, r0
 800b042:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800b046:	e00a      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b04e:	e006      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b050:	bf00      	nop
 800b052:	e004      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b054:	bf00      	nop
 800b056:	e002      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b058:	bf00      	nop
 800b05a:	e000      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800b05c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b05e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10d      	bne.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800b066:	4b22      	ldr	r3, [pc, #136]	@ (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b068:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b06c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b070:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b074:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b078:	4a1d      	ldr	r2, [pc, #116]	@ (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b07a:	430b      	orrs	r3, r1
 800b07c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800b080:	e003      	b.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b082:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b086:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b08a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b096:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b09a:	2300      	movs	r3, #0
 800b09c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b0a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	d055      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800b0aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b0ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b0b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b0b6:	d035      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800b0b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b0bc:	d82e      	bhi.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800b0be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b0c2:	d031      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800b0c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b0c8:	d828      	bhi.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800b0ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0ce:	d01b      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800b0d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0d4:	d822      	bhi.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800b0da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0de:	d009      	beq.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800b0e0:	e01c      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0e2:	4b03      	ldr	r3, [pc, #12]	@ (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b0e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0e6:	4a02      	ldr	r2, [pc, #8]	@ (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800b0e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b0ec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b0ee:	e01c      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800b0f0:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b0f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b0f8:	3308      	adds	r3, #8
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f003 fda6 	bl	800ec4c <RCCEx_PLL2_Config>
 800b100:	4603      	mov	r3, r0
 800b102:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b106:	e010      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b108:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b10c:	3330      	adds	r3, #48	@ 0x30
 800b10e:	4618      	mov	r0, r3
 800b110:	f003 fe34 	bl	800ed7c <RCCEx_PLL3_Config>
 800b114:	4603      	mov	r3, r0
 800b116:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b11a:	e006      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b122:	e002      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800b124:	bf00      	nop
 800b126:	e000      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800b128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b12a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10d      	bne.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800b132:	4bc3      	ldr	r3, [pc, #780]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b138:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b13c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b140:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b144:	4abe      	ldr	r2, [pc, #760]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b146:	430b      	orrs	r3, r1
 800b148:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b14c:	e003      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b152:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800b156:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b162:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b166:	2300      	movs	r3, #0
 800b168:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b16c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b170:	460b      	mov	r3, r1
 800b172:	4313      	orrs	r3, r2
 800b174:	d051      	beq.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800b176:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b17a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b17e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b182:	d033      	beq.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800b184:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b188:	d82c      	bhi.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800b18a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b18e:	d02d      	beq.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800b190:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b194:	d826      	bhi.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800b196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b19a:	d019      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800b19c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1a0:	d820      	bhi.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d003      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800b1a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b1aa:	d007      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800b1ac:	e01a      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1ae:	4ba4      	ldr	r3, [pc, #656]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b2:	4aa3      	ldr	r2, [pc, #652]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b1b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1b8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b1ba:	e018      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b1bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b1c0:	3308      	adds	r3, #8
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f003 fd42 	bl	800ec4c <RCCEx_PLL2_Config>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b1ce:	e00e      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b1d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b1d4:	3330      	adds	r3, #48	@ 0x30
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f003 fdd0 	bl	800ed7c <RCCEx_PLL3_Config>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800b1e2:	e004      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b1ea:	e000      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800b1ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10d      	bne.n	800b212 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800b1f6:	4b92      	ldr	r3, [pc, #584]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b1f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1fc:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 800b200:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b204:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b208:	4a8d      	ldr	r2, [pc, #564]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b20a:	430b      	orrs	r3, r1
 800b20c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b210:	e003      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b212:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b216:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800b21a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b222:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b226:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b228:	2300      	movs	r3, #0
 800b22a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b22c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b230:	460b      	mov	r3, r1
 800b232:	4313      	orrs	r3, r2
 800b234:	d032      	beq.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800b236:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b23a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b23e:	2b05      	cmp	r3, #5
 800b240:	d80f      	bhi.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800b242:	2b03      	cmp	r3, #3
 800b244:	d211      	bcs.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800b246:	2b01      	cmp	r3, #1
 800b248:	d911      	bls.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d109      	bne.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b24e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b252:	3308      	adds	r3, #8
 800b254:	4618      	mov	r0, r3
 800b256:	f003 fcf9 	bl	800ec4c <RCCEx_PLL2_Config>
 800b25a:	4603      	mov	r3, r0
 800b25c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b260:	e006      	b.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b268:	e002      	b.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800b26a:	bf00      	nop
 800b26c:	e000      	b.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800b26e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b270:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10d      	bne.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800b278:	4b71      	ldr	r3, [pc, #452]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b27a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b27e:	f023 0107 	bic.w	r1, r3, #7
 800b282:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b286:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800b28a:	4a6d      	ldr	r2, [pc, #436]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b28c:	430b      	orrs	r3, r1
 800b28e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b292:	e003      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b294:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b298:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800b29c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	6739      	str	r1, [r7, #112]	@ 0x70
 800b2a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2ac:	677b      	str	r3, [r7, #116]	@ 0x74
 800b2ae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	d024      	beq.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800b2b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d005      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800b2c4:	2b08      	cmp	r3, #8
 800b2c6:	d005      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b2ce:	e002      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800b2d0:	bf00      	nop
 800b2d2:	e000      	b.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800b2d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10d      	bne.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800b2de:	4b58      	ldr	r3, [pc, #352]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b2e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b2e4:	f023 0108 	bic.w	r1, r3, #8
 800b2e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b2ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b2f0:	4a53      	ldr	r2, [pc, #332]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b2f2:	430b      	orrs	r3, r1
 800b2f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b2f8:	e003      	b.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b2fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b302:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b30e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b310:	2300      	movs	r3, #0
 800b312:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b314:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b318:	460b      	mov	r3, r1
 800b31a:	4313      	orrs	r3, r2
 800b31c:	f000 80b9 	beq.w	800b492 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800b320:	4b48      	ldr	r3, [pc, #288]	@ (800b444 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800b322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b324:	4a47      	ldr	r2, [pc, #284]	@ (800b444 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800b326:	f043 0301 	orr.w	r3, r3, #1
 800b32a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b32c:	f7fa f9a2 	bl	8005674 <HAL_GetTick>
 800b330:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800b334:	e00b      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b336:	f7fa f99d 	bl	8005674 <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	2b02      	cmp	r3, #2
 800b344:	d903      	bls.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800b346:	2303      	movs	r3, #3
 800b348:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b34c:	e005      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800b34e:	4b3d      	ldr	r3, [pc, #244]	@ (800b444 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800b350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b352:	f003 0301 	and.w	r3, r3, #1
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0ed      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800b35a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f040 8093 	bne.w	800b48a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b364:	4b36      	ldr	r3, [pc, #216]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b36a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b36e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800b372:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b376:	2b00      	cmp	r3, #0
 800b378:	d023      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800b37a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b37e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800b382:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b386:	4293      	cmp	r3, r2
 800b388:	d01b      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b38a:	4b2d      	ldr	r3, [pc, #180]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b38c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b390:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b394:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b398:	4b29      	ldr	r3, [pc, #164]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b39a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b39e:	4a28      	ldr	r2, [pc, #160]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b3a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b3a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b3a8:	4b25      	ldr	r3, [pc, #148]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b3aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3ae:	4a24      	ldr	r2, [pc, #144]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b3b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b3b8:	4a21      	ldr	r2, [pc, #132]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b3ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b3be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b3c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b3c6:	f003 0301 	and.w	r3, r3, #1
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d019      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3ce:	f7fa f951 	bl	8005674 <HAL_GetTick>
 800b3d2:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b3d6:	e00d      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3d8:	f7fa f94c 	bl	8005674 <HAL_GetTick>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b3e2:	1ad2      	subs	r2, r2, r3
 800b3e4:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d903      	bls.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800b3f2:	e006      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b3f4:	4b12      	ldr	r3, [pc, #72]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b3f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3fa:	f003 0302 	and.w	r3, r3, #2
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0ea      	beq.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800b402:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b406:	2b00      	cmp	r3, #0
 800b408:	d13a      	bne.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800b40a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b40e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b41a:	d115      	bne.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800b41c:	4b08      	ldr	r3, [pc, #32]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b41e:	69db      	ldr	r3, [r3, #28]
 800b420:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b424:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b428:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b42c:	091b      	lsrs	r3, r3, #4
 800b42e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b432:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800b436:	4a02      	ldr	r2, [pc, #8]	@ (800b440 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800b438:	430b      	orrs	r3, r1
 800b43a:	61d3      	str	r3, [r2, #28]
 800b43c:	e00a      	b.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800b43e:	bf00      	nop
 800b440:	44020c00 	.word	0x44020c00
 800b444:	44020800 	.word	0x44020800
 800b448:	4b9f      	ldr	r3, [pc, #636]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b44a:	69db      	ldr	r3, [r3, #28]
 800b44c:	4a9e      	ldr	r2, [pc, #632]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b44e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b452:	61d3      	str	r3, [r2, #28]
 800b454:	4b9c      	ldr	r3, [pc, #624]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b45a:	4a9b      	ldr	r2, [pc, #620]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b45c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b460:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b464:	4b98      	ldr	r3, [pc, #608]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b466:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800b46a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b46e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800b472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b476:	4a94      	ldr	r2, [pc, #592]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b478:	430b      	orrs	r3, r1
 800b47a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800b47e:	e008      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b480:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b484:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 800b488:	e003      	b.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b48a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b48e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b492:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800b49e:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	667b      	str	r3, [r7, #100]	@ 0x64
 800b4a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	d035      	beq.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800b4ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b4b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b4b6:	2b30      	cmp	r3, #48	@ 0x30
 800b4b8:	d014      	beq.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800b4ba:	2b30      	cmp	r3, #48	@ 0x30
 800b4bc:	d80e      	bhi.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800b4be:	2b20      	cmp	r3, #32
 800b4c0:	d012      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800b4c2:	2b20      	cmp	r3, #32
 800b4c4:	d80a      	bhi.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d010      	beq.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800b4ca:	2b10      	cmp	r3, #16
 800b4cc:	d106      	bne.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ce:	4b7e      	ldr	r3, [pc, #504]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b4d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d2:	4a7d      	ldr	r2, [pc, #500]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b4d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4d8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800b4da:	e008      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b4e2:	e004      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800b4e4:	bf00      	nop
 800b4e6:	e002      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800b4e8:	bf00      	nop
 800b4ea:	e000      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800b4ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10d      	bne.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800b4f6:	4b74      	ldr	r3, [pc, #464]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b4f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b4fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b500:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b504:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b508:	4a6f      	ldr	r2, [pc, #444]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b50a:	430b      	orrs	r3, r1
 800b50c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800b510:	e003      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b512:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b516:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b51a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b526:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b528:	2300      	movs	r3, #0
 800b52a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b52c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b530:	460b      	mov	r3, r1
 800b532:	4313      	orrs	r3, r2
 800b534:	d033      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800b536:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b53a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d002      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800b542:	2b40      	cmp	r3, #64	@ 0x40
 800b544:	d007      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800b546:	e010      	b.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b548:	4b5f      	ldr	r3, [pc, #380]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b54c:	4a5e      	ldr	r2, [pc, #376]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b54e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b552:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800b554:	e00d      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b556:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b55a:	3308      	adds	r3, #8
 800b55c:	4618      	mov	r0, r3
 800b55e:	f003 fb75 	bl	800ec4c <RCCEx_PLL2_Config>
 800b562:	4603      	mov	r3, r0
 800b564:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800b568:	e003      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b570:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b572:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10d      	bne.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800b57a:	4b53      	ldr	r3, [pc, #332]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b57c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b580:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800b584:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b588:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800b58c:	4a4e      	ldr	r2, [pc, #312]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b58e:	430b      	orrs	r3, r1
 800b590:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b594:	e003      	b.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b596:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b59a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800b59e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b5aa:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5b0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	d033      	beq.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800b5ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b5be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d002      	beq.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800b5c6:	2b80      	cmp	r3, #128	@ 0x80
 800b5c8:	d007      	beq.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800b5ca:	e010      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5cc:	4b3e      	ldr	r3, [pc, #248]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b5ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d0:	4a3d      	ldr	r2, [pc, #244]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b5d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b5d6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800b5d8:	e00d      	b.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b5da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b5de:	3308      	adds	r3, #8
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f003 fb33 	bl	800ec4c <RCCEx_PLL2_Config>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800b5ec:	e003      	b.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b5f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10d      	bne.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800b5fe:	4b32      	ldr	r3, [pc, #200]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b600:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b604:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800b608:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b60c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800b610:	4a2d      	ldr	r2, [pc, #180]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b612:	430b      	orrs	r3, r1
 800b614:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800b618:	e003      	b.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b61a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b61e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800b622:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800b62e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b630:	2300      	movs	r3, #0
 800b632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b634:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b638:	460b      	mov	r3, r1
 800b63a:	4313      	orrs	r3, r2
 800b63c:	d04a      	beq.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800b63e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b646:	2b04      	cmp	r3, #4
 800b648:	d827      	bhi.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800b64a:	a201      	add	r2, pc, #4	@ (adr r2, 800b650 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800b64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b650:	0800b665 	.word	0x0800b665
 800b654:	0800b673 	.word	0x0800b673
 800b658:	0800b687 	.word	0x0800b687
 800b65c:	0800b6a3 	.word	0x0800b6a3
 800b660:	0800b6a3 	.word	0x0800b6a3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b664:	4b18      	ldr	r3, [pc, #96]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b668:	4a17      	ldr	r2, [pc, #92]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b66a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b66e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800b670:	e018      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b672:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b676:	3308      	adds	r3, #8
 800b678:	4618      	mov	r0, r3
 800b67a:	f003 fae7 	bl	800ec4c <RCCEx_PLL2_Config>
 800b67e:	4603      	mov	r3, r0
 800b680:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800b684:	e00e      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b686:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b68a:	3330      	adds	r3, #48	@ 0x30
 800b68c:	4618      	mov	r0, r3
 800b68e:	f003 fb75 	bl	800ed7c <RCCEx_PLL3_Config>
 800b692:	4603      	mov	r3, r0
 800b694:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800b698:	e004      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b6a0:	e000      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800b6a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10f      	bne.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800b6ac:	4b06      	ldr	r3, [pc, #24]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b6ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b6b2:	f023 0107 	bic.w	r1, r3, #7
 800b6b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b6be:	4a02      	ldr	r2, [pc, #8]	@ (800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800b6c0:	430b      	orrs	r3, r1
 800b6c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b6c6:	e005      	b.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800b6c8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b6d0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800b6d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6dc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800b6e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	f000 8081 	beq.w	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800b6f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b6f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	d85f      	bhi.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800b6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b704 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800b700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b704:	0800b789 	.word	0x0800b789
 800b708:	0800b7bf 	.word	0x0800b7bf
 800b70c:	0800b7bf 	.word	0x0800b7bf
 800b710:	0800b7bf 	.word	0x0800b7bf
 800b714:	0800b7bf 	.word	0x0800b7bf
 800b718:	0800b7bf 	.word	0x0800b7bf
 800b71c:	0800b7bf 	.word	0x0800b7bf
 800b720:	0800b7bf 	.word	0x0800b7bf
 800b724:	0800b797 	.word	0x0800b797
 800b728:	0800b7bf 	.word	0x0800b7bf
 800b72c:	0800b7bf 	.word	0x0800b7bf
 800b730:	0800b7bf 	.word	0x0800b7bf
 800b734:	0800b7bf 	.word	0x0800b7bf
 800b738:	0800b7bf 	.word	0x0800b7bf
 800b73c:	0800b7bf 	.word	0x0800b7bf
 800b740:	0800b7bf 	.word	0x0800b7bf
 800b744:	0800b7ab 	.word	0x0800b7ab
 800b748:	0800b7bf 	.word	0x0800b7bf
 800b74c:	0800b7bf 	.word	0x0800b7bf
 800b750:	0800b7bf 	.word	0x0800b7bf
 800b754:	0800b7bf 	.word	0x0800b7bf
 800b758:	0800b7bf 	.word	0x0800b7bf
 800b75c:	0800b7bf 	.word	0x0800b7bf
 800b760:	0800b7bf 	.word	0x0800b7bf
 800b764:	0800b7c7 	.word	0x0800b7c7
 800b768:	0800b7bf 	.word	0x0800b7bf
 800b76c:	0800b7bf 	.word	0x0800b7bf
 800b770:	0800b7bf 	.word	0x0800b7bf
 800b774:	0800b7bf 	.word	0x0800b7bf
 800b778:	0800b7bf 	.word	0x0800b7bf
 800b77c:	0800b7bf 	.word	0x0800b7bf
 800b780:	0800b7bf 	.word	0x0800b7bf
 800b784:	0800b7c7 	.word	0x0800b7c7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b788:	4bab      	ldr	r3, [pc, #684]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b78a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b78c:	4aaa      	ldr	r2, [pc, #680]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b78e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b792:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800b794:	e018      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b796:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b79a:	3308      	adds	r3, #8
 800b79c:	4618      	mov	r0, r3
 800b79e:	f003 fa55 	bl	800ec4c <RCCEx_PLL2_Config>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800b7a8:	e00e      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b7aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7ae:	3330      	adds	r3, #48	@ 0x30
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f003 fae3 	bl	800ed7c <RCCEx_PLL3_Config>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800b7bc:	e004      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b7c4:	e000      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800b7c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10d      	bne.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800b7d0:	4b99      	ldr	r3, [pc, #612]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b7d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b7d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b7da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7e2:	4a95      	ldr	r2, [pc, #596]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b7e4:	430b      	orrs	r3, r1
 800b7e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b7ea:	e003      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b7f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800b7f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b800:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b802:	2300      	movs	r3, #0
 800b804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b806:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b80a:	460b      	mov	r3, r1
 800b80c:	4313      	orrs	r3, r2
 800b80e:	d04e      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800b810:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b81c:	d02e      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800b81e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b822:	d827      	bhi.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800b824:	2bc0      	cmp	r3, #192	@ 0xc0
 800b826:	d02b      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800b828:	2bc0      	cmp	r3, #192	@ 0xc0
 800b82a:	d823      	bhi.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800b82c:	2b80      	cmp	r3, #128	@ 0x80
 800b82e:	d017      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800b830:	2b80      	cmp	r3, #128	@ 0x80
 800b832:	d81f      	bhi.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800b834:	2b00      	cmp	r3, #0
 800b836:	d002      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800b838:	2b40      	cmp	r3, #64	@ 0x40
 800b83a:	d007      	beq.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 800b83c:	e01a      	b.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b83e:	4b7e      	ldr	r3, [pc, #504]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b842:	4a7d      	ldr	r2, [pc, #500]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b848:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800b84a:	e01a      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b84c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b850:	3308      	adds	r3, #8
 800b852:	4618      	mov	r0, r3
 800b854:	f003 f9fa 	bl	800ec4c <RCCEx_PLL2_Config>
 800b858:	4603      	mov	r3, r0
 800b85a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800b85e:	e010      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b864:	3330      	adds	r3, #48	@ 0x30
 800b866:	4618      	mov	r0, r3
 800b868:	f003 fa88 	bl	800ed7c <RCCEx_PLL3_Config>
 800b86c:	4603      	mov	r3, r0
 800b86e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800b872:	e006      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b87a:	e002      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800b87c:	bf00      	nop
 800b87e:	e000      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800b880:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b882:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10d      	bne.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800b88a:	4b6b      	ldr	r3, [pc, #428]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b88c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b890:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b894:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b89c:	4a66      	ldr	r2, [pc, #408]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b89e:	430b      	orrs	r3, r1
 800b8a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b8a4:	e003      	b.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b8aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800b8ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b8ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8bc:	2300      	movs	r3, #0
 800b8be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	d055      	beq.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800b8ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b8ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800b8d2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b8d6:	d031      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800b8d8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b8dc:	d82a      	bhi.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800b8de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8e2:	d02d      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800b8e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8e8:	d824      	bhi.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800b8ea:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b8ee:	d029      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800b8f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b8f4:	d81e      	bhi.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800b8f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8fa:	d011      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800b8fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b900:	d818      	bhi.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800b902:	2b00      	cmp	r3, #0
 800b904:	d020      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800b906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b90a:	d113      	bne.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b90c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b910:	3308      	adds	r3, #8
 800b912:	4618      	mov	r0, r3
 800b914:	f003 f99a 	bl	800ec4c <RCCEx_PLL2_Config>
 800b918:	4603      	mov	r3, r0
 800b91a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800b91e:	e014      	b.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b920:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b924:	3330      	adds	r3, #48	@ 0x30
 800b926:	4618      	mov	r0, r3
 800b928:	f003 fa28 	bl	800ed7c <RCCEx_PLL3_Config>
 800b92c:	4603      	mov	r3, r0
 800b92e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800b932:	e00a      	b.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800b93a:	e006      	b.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800b93c:	bf00      	nop
 800b93e:	e004      	b.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800b940:	bf00      	nop
 800b942:	e002      	b.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800b944:	bf00      	nop
 800b946:	e000      	b.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800b948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b94a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d10d      	bne.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800b952:	4b39      	ldr	r3, [pc, #228]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b958:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800b95c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b960:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800b964:	4a34      	ldr	r2, [pc, #208]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800b966:	430b      	orrs	r3, r1
 800b968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b96c:	e003      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b96e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800b972:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800b976:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b982:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b984:	2300      	movs	r3, #0
 800b986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b988:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b98c:	460b      	mov	r3, r1
 800b98e:	4313      	orrs	r3, r2
 800b990:	d058      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800b992:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b99a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b99e:	d031      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800b9a0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b9a4:	d82a      	bhi.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800b9a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9aa:	d02d      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 800b9ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9b0:	d824      	bhi.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800b9b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b9b6:	d029      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800b9b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b9bc:	d81e      	bhi.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800b9be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9c2:	d011      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800b9c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9c8:	d818      	bhi.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d020      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800b9ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9d2:	d113      	bne.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800b9d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b9d8:	3308      	adds	r3, #8
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f003 f936 	bl	800ec4c <RCCEx_PLL2_Config>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800b9e6:	e014      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800b9e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b9ec:	3330      	adds	r3, #48	@ 0x30
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f003 f9c4 	bl	800ed7c <RCCEx_PLL3_Config>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800b9fa:	e00a      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800ba02:	e006      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800ba04:	bf00      	nop
 800ba06:	e004      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800ba08:	bf00      	nop
 800ba0a:	e002      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800ba0c:	bf00      	nop
 800ba0e:	e000      	b.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800ba10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d110      	bne.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800ba1a:	4b07      	ldr	r3, [pc, #28]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800ba1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba20:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800ba24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba2c:	4902      	ldr	r1, [pc, #8]	@ (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800ba34:	e006      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800ba36:	bf00      	nop
 800ba38:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800ba40:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ba44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	6239      	str	r1, [r7, #32]
 800ba50:	f003 0301 	and.w	r3, r3, #1
 800ba54:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba56:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	d055      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800ba60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800ba64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba68:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ba6c:	d031      	beq.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800ba6e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ba72:	d82a      	bhi.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800ba74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba78:	d02d      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800ba7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba7e:	d824      	bhi.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800ba80:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800ba84:	d029      	beq.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800ba86:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800ba8a:	d81e      	bhi.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800ba8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba90:	d011      	beq.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800ba92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba96:	d818      	bhi.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d020      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 800ba9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800baa0:	d113      	bne.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800baa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800baa6:	3308      	adds	r3, #8
 800baa8:	4618      	mov	r0, r3
 800baaa:	f003 f8cf 	bl	800ec4c <RCCEx_PLL2_Config>
 800baae:	4603      	mov	r3, r0
 800bab0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bab4:	e014      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bab6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800baba:	3330      	adds	r3, #48	@ 0x30
 800babc:	4618      	mov	r0, r3
 800babe:	f003 f95d 	bl	800ed7c <RCCEx_PLL3_Config>
 800bac2:	4603      	mov	r3, r0
 800bac4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bac8:	e00a      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bad0:	e006      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800bad2:	bf00      	nop
 800bad4:	e004      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800bad6:	bf00      	nop
 800bad8:	e002      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800bada:	bf00      	nop
 800badc:	e000      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800bade:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bae0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10d      	bne.n	800bb04 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800bae8:	4b88      	ldr	r3, [pc, #544]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800baea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800baee:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800baf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800baf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bafa:	4984      	ldr	r1, [pc, #528]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bafc:	4313      	orrs	r3, r2
 800bafe:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800bb02:	e003      	b.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb04:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bb08:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bb0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb14:	2100      	movs	r1, #0
 800bb16:	61b9      	str	r1, [r7, #24]
 800bb18:	f003 0302 	and.w	r3, r3, #2
 800bb1c:	61fb      	str	r3, [r7, #28]
 800bb1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bb22:	460b      	mov	r3, r1
 800bb24:	4313      	orrs	r3, r2
 800bb26:	d03d      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800bb28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	d81c      	bhi.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800bb34:	a201      	add	r2, pc, #4	@ (adr r2, 800bb3c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800bb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3a:	bf00      	nop
 800bb3c:	0800bb77 	.word	0x0800bb77
 800bb40:	0800bb4d 	.word	0x0800bb4d
 800bb44:	0800bb5b 	.word	0x0800bb5b
 800bb48:	0800bb77 	.word	0x0800bb77
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb4c:	4b6f      	ldr	r3, [pc, #444]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bb4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb50:	4a6e      	ldr	r2, [pc, #440]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bb52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb56:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800bb58:	e00e      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bb5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb5e:	3308      	adds	r3, #8
 800bb60:	4618      	mov	r0, r3
 800bb62:	f003 f873 	bl	800ec4c <RCCEx_PLL2_Config>
 800bb66:	4603      	mov	r3, r0
 800bb68:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800bb6c:	e004      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bb74:	e000      	b.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800bb76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb78:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10d      	bne.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800bb80:	4b62      	ldr	r3, [pc, #392]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bb82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bb86:	f023 0203 	bic.w	r2, r3, #3
 800bb8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bb8e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bb92:	495e      	ldr	r1, [pc, #376]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bb94:	4313      	orrs	r3, r2
 800bb96:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bb9a:	e003      	b.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb9c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bba0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbac:	2100      	movs	r1, #0
 800bbae:	6139      	str	r1, [r7, #16]
 800bbb0:	f003 0304 	and.w	r3, r3, #4
 800bbb4:	617b      	str	r3, [r7, #20]
 800bbb6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	d03a      	beq.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800bbc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bbc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bbc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbcc:	d00e      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800bbce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbd2:	d815      	bhi.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d017      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800bbd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbdc:	d110      	bne.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbde:	4b4b      	ldr	r3, [pc, #300]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bbe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe2:	4a4a      	ldr	r2, [pc, #296]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bbe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbe8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800bbea:	e00e      	b.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800bbec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f003 f82a 	bl	800ec4c <RCCEx_PLL2_Config>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800bbfe:	e004      	b.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bc06:	e000      	b.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800bc08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d10d      	bne.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800bc12:	4b3e      	ldr	r3, [pc, #248]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bc14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bc18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bc1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bc24:	4939      	ldr	r1, [pc, #228]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bc26:	4313      	orrs	r3, r2
 800bc28:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800bc2c:	e003      	b.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bc32:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bc36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3e:	2100      	movs	r1, #0
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	f003 0310 	and.w	r3, r3, #16
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	d038      	beq.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800bc52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc56:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800bc5a:	2b30      	cmp	r3, #48	@ 0x30
 800bc5c:	d01b      	beq.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 800bc5e:	2b30      	cmp	r3, #48	@ 0x30
 800bc60:	d815      	bhi.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800bc62:	2b10      	cmp	r3, #16
 800bc64:	d002      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800bc66:	2b20      	cmp	r3, #32
 800bc68:	d007      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800bc6a:	e010      	b.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc6c:	4b27      	ldr	r3, [pc, #156]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc70:	4a26      	ldr	r2, [pc, #152]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bc72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc76:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800bc78:	e00e      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800bc7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bc7e:	3330      	adds	r3, #48	@ 0x30
 800bc80:	4618      	mov	r0, r3
 800bc82:	f003 f87b 	bl	800ed7c <RCCEx_PLL3_Config>
 800bc86:	4603      	mov	r3, r0
 800bc88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800bc8c:	e004      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800bc94:	e000      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800bc96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc98:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10d      	bne.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800bca0:	4b1a      	ldr	r3, [pc, #104]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bca2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bca6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bcaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bcae:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800bcb2:	4916      	ldr	r1, [pc, #88]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800bcba:	e003      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcbc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800bcc0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bcc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	2100      	movs	r1, #0
 800bcce:	6039      	str	r1, [r7, #0]
 800bcd0:	f003 0308 	and.w	r3, r3, #8
 800bcd4:	607b      	str	r3, [r7, #4]
 800bcd6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	d00c      	beq.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800bce0:	4b0a      	ldr	r3, [pc, #40]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bce6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bcea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800bcee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800bcf2:	4906      	ldr	r1, [pc, #24]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800bcfa:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800bd04:	46bd      	mov	sp, r7
 800bd06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd0a:	bf00      	nop
 800bd0c:	44020c00 	.word	0x44020c00

0800bd10 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b08b      	sub	sp, #44	@ 0x2c
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800bd18:	4bae      	ldr	r3, [pc, #696]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bd1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd20:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800bd22:	4bac      	ldr	r3, [pc, #688]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bd24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd26:	f003 0303 	and.w	r3, r3, #3
 800bd2a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800bd2c:	4ba9      	ldr	r3, [pc, #676]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bd2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd30:	0a1b      	lsrs	r3, r3, #8
 800bd32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd36:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800bd38:	4ba6      	ldr	r3, [pc, #664]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd3c:	091b      	lsrs	r3, r3, #4
 800bd3e:	f003 0301 	and.w	r3, r3, #1
 800bd42:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800bd44:	4ba3      	ldr	r3, [pc, #652]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bd46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd48:	08db      	lsrs	r3, r3, #3
 800bd4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd4e:	697a      	ldr	r2, [r7, #20]
 800bd50:	fb02 f303 	mul.w	r3, r2, r3
 800bd54:	ee07 3a90 	vmov	s15, r3
 800bd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd5c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f000 8126 	beq.w	800bfb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	2b03      	cmp	r3, #3
 800bd6c:	d053      	beq.n	800be16 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	2b03      	cmp	r3, #3
 800bd72:	d86f      	bhi.n	800be54 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d003      	beq.n	800bd82 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d02b      	beq.n	800bdd8 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800bd80:	e068      	b.n	800be54 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd82:	4b94      	ldr	r3, [pc, #592]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	08db      	lsrs	r3, r3, #3
 800bd88:	f003 0303 	and.w	r3, r3, #3
 800bd8c:	4a92      	ldr	r2, [pc, #584]	@ (800bfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800bd8e:	fa22 f303 	lsr.w	r3, r2, r3
 800bd92:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	ee07 3a90 	vmov	s15, r3
 800bd9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	ee07 3a90 	vmov	s15, r3
 800bda4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdac:	6a3b      	ldr	r3, [r7, #32]
 800bdae:	ee07 3a90 	vmov	s15, r3
 800bdb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb6:	ed97 6a04 	vldr	s12, [r7, #16]
 800bdba:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800bdbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800bdd6:	e068      	b.n	800beaa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	ee07 3a90 	vmov	s15, r3
 800bdde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800bfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800bde6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	ee07 3a90 	vmov	s15, r3
 800bdf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf4:	ed97 6a04 	vldr	s12, [r7, #16]
 800bdf8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800bdfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be10:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800be14:	e049      	b.n	800beaa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	ee07 3a90 	vmov	s15, r3
 800be1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be20:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800bfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 800be24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	ee07 3a90 	vmov	s15, r3
 800be2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be32:	ed97 6a04 	vldr	s12, [r7, #16]
 800be36:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800be3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800be52:	e02a      	b.n	800beaa <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800be54:	4b5f      	ldr	r3, [pc, #380]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	08db      	lsrs	r3, r3, #3
 800be5a:	f003 0303 	and.w	r3, r3, #3
 800be5e:	4a5e      	ldr	r2, [pc, #376]	@ (800bfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800be60:	fa22 f303 	lsr.w	r3, r2, r3
 800be64:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	ee07 3a90 	vmov	s15, r3
 800be6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	ee07 3a90 	vmov	s15, r3
 800be76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be7e:	6a3b      	ldr	r3, [r7, #32]
 800be80:	ee07 3a90 	vmov	s15, r3
 800be84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be88:	ed97 6a04 	vldr	s12, [r7, #16]
 800be8c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800bfdc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800be90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bea4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800bea8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800beaa:	4b4a      	ldr	r3, [pc, #296]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800beb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800beb6:	d121      	bne.n	800befc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800beb8:	4b46      	ldr	r3, [pc, #280]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800beba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d017      	beq.n	800bef4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bec4:	4b43      	ldr	r3, [pc, #268]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bec8:	0a5b      	lsrs	r3, r3, #9
 800beca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bece:	ee07 3a90 	vmov	s15, r3
 800bed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800bed6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800beda:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800bede:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800bee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beea:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	601a      	str	r2, [r3, #0]
 800bef2:	e006      	b.n	800bf02 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	601a      	str	r2, [r3, #0]
 800befa:	e002      	b.n	800bf02 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf02:	4b34      	ldr	r3, [pc, #208]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bf0e:	d121      	bne.n	800bf54 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800bf10:	4b30      	ldr	r3, [pc, #192]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bf12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d017      	beq.n	800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf1c:	4b2d      	ldr	r3, [pc, #180]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bf1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf20:	0c1b      	lsrs	r3, r3, #16
 800bf22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf26:	ee07 3a90 	vmov	s15, r3
 800bf2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800bf2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf32:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800bf36:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800bf3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf42:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	605a      	str	r2, [r3, #4]
 800bf4a:	e006      	b.n	800bf5a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	605a      	str	r2, [r3, #4]
 800bf52:	e002      	b.n	800bf5a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf5a:	4b1e      	ldr	r3, [pc, #120]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bf66:	d121      	bne.n	800bfac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800bf68:	4b1a      	ldr	r3, [pc, #104]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bf6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d017      	beq.n	800bfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800bf74:	4b17      	ldr	r3, [pc, #92]	@ (800bfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800bf76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf78:	0e1b      	lsrs	r3, r3, #24
 800bf7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf7e:	ee07 3a90 	vmov	s15, r3
 800bf82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800bf86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf8a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800bf8e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800bf92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf9a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bfa2:	e010      	b.n	800bfc6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	609a      	str	r2, [r3, #8]
}
 800bfaa:	e00c      	b.n	800bfc6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	609a      	str	r2, [r3, #8]
}
 800bfb2:	e008      	b.n	800bfc6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	609a      	str	r2, [r3, #8]
}
 800bfc6:	bf00      	nop
 800bfc8:	372c      	adds	r7, #44	@ 0x2c
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr
 800bfd2:	bf00      	nop
 800bfd4:	44020c00 	.word	0x44020c00
 800bfd8:	03d09000 	.word	0x03d09000
 800bfdc:	46000000 	.word	0x46000000
 800bfe0:	4a742400 	.word	0x4a742400
 800bfe4:	4af42400 	.word	0x4af42400

0800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b08b      	sub	sp, #44	@ 0x2c
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800bff0:	4bae      	ldr	r3, [pc, #696]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800bff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800bffa:	4bac      	ldr	r3, [pc, #688]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800bffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bffe:	f003 0303 	and.w	r3, r3, #3
 800c002:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800c004:	4ba9      	ldr	r3, [pc, #676]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c008:	0a1b      	lsrs	r3, r3, #8
 800c00a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c00e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800c010:	4ba6      	ldr	r3, [pc, #664]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c014:	091b      	lsrs	r3, r3, #4
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800c01c:	4ba3      	ldr	r3, [pc, #652]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c01e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c020:	08db      	lsrs	r3, r3, #3
 800c022:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c026:	697a      	ldr	r2, [r7, #20]
 800c028:	fb02 f303 	mul.w	r3, r2, r3
 800c02c:	ee07 3a90 	vmov	s15, r3
 800c030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c034:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f000 8126 	beq.w	800c28c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	2b03      	cmp	r3, #3
 800c044:	d053      	beq.n	800c0ee <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	2b03      	cmp	r3, #3
 800c04a:	d86f      	bhi.n	800c12c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d003      	beq.n	800c05a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	2b02      	cmp	r3, #2
 800c056:	d02b      	beq.n	800c0b0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800c058:	e068      	b.n	800c12c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c05a:	4b94      	ldr	r3, [pc, #592]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	08db      	lsrs	r3, r3, #3
 800c060:	f003 0303 	and.w	r3, r3, #3
 800c064:	4a92      	ldr	r2, [pc, #584]	@ (800c2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800c066:	fa22 f303 	lsr.w	r3, r2, r3
 800c06a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	ee07 3a90 	vmov	s15, r3
 800c072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	ee07 3a90 	vmov	s15, r3
 800c07c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	ee07 3a90 	vmov	s15, r3
 800c08a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c08e:	ed97 6a04 	vldr	s12, [r7, #16]
 800c092:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800c2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800c096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c09a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c09e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c0ae:	e068      	b.n	800c182 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	ee07 3a90 	vmov	s15, r3
 800c0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ba:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800c2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800c0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0c2:	6a3b      	ldr	r3, [r7, #32]
 800c0c4:	ee07 3a90 	vmov	s15, r3
 800c0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0cc:	ed97 6a04 	vldr	s12, [r7, #16]
 800c0d0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800c0d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c0ec:	e049      	b.n	800c182 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	ee07 3a90 	vmov	s15, r3
 800c0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800c2bc <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 800c0fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c100:	6a3b      	ldr	r3, [r7, #32]
 800c102:	ee07 3a90 	vmov	s15, r3
 800c106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c10a:	ed97 6a04 	vldr	s12, [r7, #16]
 800c10e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800c2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800c112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c11a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c126:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c12a:	e02a      	b.n	800c182 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c12c:	4b5f      	ldr	r3, [pc, #380]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	08db      	lsrs	r3, r3, #3
 800c132:	f003 0303 	and.w	r3, r3, #3
 800c136:	4a5e      	ldr	r2, [pc, #376]	@ (800c2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800c138:	fa22 f303 	lsr.w	r3, r2, r3
 800c13c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	ee07 3a90 	vmov	s15, r3
 800c144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	ee07 3a90 	vmov	s15, r3
 800c14e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c156:	6a3b      	ldr	r3, [r7, #32]
 800c158:	ee07 3a90 	vmov	s15, r3
 800c15c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c160:	ed97 6a04 	vldr	s12, [r7, #16]
 800c164:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800c2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800c168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c16c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c170:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c17c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c180:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c182:	4b4a      	ldr	r3, [pc, #296]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c18a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c18e:	d121      	bne.n	800c1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800c190:	4b46      	ldr	r3, [pc, #280]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d017      	beq.n	800c1cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c19c:	4b43      	ldr	r3, [pc, #268]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c19e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1a0:	0a5b      	lsrs	r3, r3, #9
 800c1a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1a6:	ee07 3a90 	vmov	s15, r3
 800c1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800c1ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1b2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800c1b6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c1ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1c2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	e006      	b.n	800c1da <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	601a      	str	r2, [r3, #0]
 800c1d2:	e002      	b.n	800c1da <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1da:	4b34      	ldr	r3, [pc, #208]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c1e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c1e6:	d121      	bne.n	800c22c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800c1e8:	4b30      	ldr	r3, [pc, #192]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c1ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d017      	beq.n	800c224 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c1f4:	4b2d      	ldr	r3, [pc, #180]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c1f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1f8:	0c1b      	lsrs	r3, r3, #16
 800c1fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1fe:	ee07 3a90 	vmov	s15, r3
 800c202:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800c206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c20a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800c20e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c21a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	605a      	str	r2, [r3, #4]
 800c222:	e006      	b.n	800c232 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	605a      	str	r2, [r3, #4]
 800c22a:	e002      	b.n	800c232 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c232:	4b1e      	ldr	r3, [pc, #120]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c23a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c23e:	d121      	bne.n	800c284 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800c240:	4b1a      	ldr	r3, [pc, #104]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c244:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d017      	beq.n	800c27c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800c24c:	4b17      	ldr	r3, [pc, #92]	@ (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800c24e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c250:	0e1b      	lsrs	r3, r3, #24
 800c252:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c256:	ee07 3a90 	vmov	s15, r3
 800c25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800c25e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c262:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800c266:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c26a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c26e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c272:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c27a:	e010      	b.n	800c29e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	609a      	str	r2, [r3, #8]
}
 800c282:	e00c      	b.n	800c29e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	609a      	str	r2, [r3, #8]
}
 800c28a:	e008      	b.n	800c29e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	609a      	str	r2, [r3, #8]
}
 800c29e:	bf00      	nop
 800c2a0:	372c      	adds	r7, #44	@ 0x2c
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	44020c00 	.word	0x44020c00
 800c2b0:	03d09000 	.word	0x03d09000
 800c2b4:	46000000 	.word	0x46000000
 800c2b8:	4a742400 	.word	0x4a742400
 800c2bc:	4af42400 	.word	0x4af42400

0800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b08b      	sub	sp, #44	@ 0x2c
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800c2c8:	4bae      	ldr	r3, [pc, #696]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c2ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800c2d2:	4bac      	ldr	r3, [pc, #688]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2d6:	f003 0303 	and.w	r3, r3, #3
 800c2da:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800c2dc:	4ba9      	ldr	r3, [pc, #676]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c2de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2e0:	0a1b      	lsrs	r3, r3, #8
 800c2e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c2e6:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800c2e8:	4ba6      	ldr	r3, [pc, #664]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c2ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ec:	091b      	lsrs	r3, r3, #4
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800c2f4:	4ba3      	ldr	r3, [pc, #652]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c2f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2f8:	08db      	lsrs	r3, r3, #3
 800c2fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	fb02 f303 	mul.w	r3, r2, r3
 800c304:	ee07 3a90 	vmov	s15, r3
 800c308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 8126 	beq.w	800c564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	2b03      	cmp	r3, #3
 800c31c:	d053      	beq.n	800c3c6 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	2b03      	cmp	r3, #3
 800c322:	d86f      	bhi.n	800c404 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	2b01      	cmp	r3, #1
 800c328:	d003      	beq.n	800c332 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d02b      	beq.n	800c388 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800c330:	e068      	b.n	800c404 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c332:	4b94      	ldr	r3, [pc, #592]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	08db      	lsrs	r3, r3, #3
 800c338:	f003 0303 	and.w	r3, r3, #3
 800c33c:	4a92      	ldr	r2, [pc, #584]	@ (800c588 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800c33e:	fa22 f303 	lsr.w	r3, r2, r3
 800c342:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	ee07 3a90 	vmov	s15, r3
 800c34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	ee07 3a90 	vmov	s15, r3
 800c354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c35c:	6a3b      	ldr	r3, [r7, #32]
 800c35e:	ee07 3a90 	vmov	s15, r3
 800c362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c366:	ed97 6a04 	vldr	s12, [r7, #16]
 800c36a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800c58c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800c36e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c37a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c382:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c386:	e068      	b.n	800c45a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c392:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800c590 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800c396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c39a:	6a3b      	ldr	r3, [r7, #32]
 800c39c:	ee07 3a90 	vmov	s15, r3
 800c3a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3a4:	ed97 6a04 	vldr	s12, [r7, #16]
 800c3a8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c58c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800c3ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c3c4:	e049      	b.n	800c45a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	ee07 3a90 	vmov	s15, r3
 800c3cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800c594 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 800c3d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	ee07 3a90 	vmov	s15, r3
 800c3de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3e2:	ed97 6a04 	vldr	s12, [r7, #16]
 800c3e6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800c58c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800c3ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800c402:	e02a      	b.n	800c45a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c404:	4b5f      	ldr	r3, [pc, #380]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	08db      	lsrs	r3, r3, #3
 800c40a:	f003 0303 	and.w	r3, r3, #3
 800c40e:	4a5e      	ldr	r2, [pc, #376]	@ (800c588 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800c410:	fa22 f303 	lsr.w	r3, r2, r3
 800c414:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	ee07 3a90 	vmov	s15, r3
 800c41c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	ee07 3a90 	vmov	s15, r3
 800c426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	ee07 3a90 	vmov	s15, r3
 800c434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c438:	ed97 6a04 	vldr	s12, [r7, #16]
 800c43c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800c58c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800c440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c448:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c44c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c450:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c454:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800c458:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c45a:	4b4a      	ldr	r3, [pc, #296]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c466:	d121      	bne.n	800c4ac <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800c468:	4b46      	ldr	r3, [pc, #280]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c46a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c46c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c470:	2b00      	cmp	r3, #0
 800c472:	d017      	beq.n	800c4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c474:	4b43      	ldr	r3, [pc, #268]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c478:	0a5b      	lsrs	r3, r3, #9
 800c47a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c47e:	ee07 3a90 	vmov	s15, r3
 800c482:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800c486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c48a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800c48e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c49a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	601a      	str	r2, [r3, #0]
 800c4a2:	e006      	b.n	800c4b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	601a      	str	r2, [r3, #0]
 800c4aa:	e002      	b.n	800c4b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4b2:	4b34      	ldr	r3, [pc, #208]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4be:	d121      	bne.n	800c504 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800c4c0:	4b30      	ldr	r3, [pc, #192]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d017      	beq.n	800c4fc <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c4cc:	4b2d      	ldr	r3, [pc, #180]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c4ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4d0:	0c1b      	lsrs	r3, r3, #16
 800c4d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4d6:	ee07 3a90 	vmov	s15, r3
 800c4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800c4de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800c4e6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4f2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	605a      	str	r2, [r3, #4]
 800c4fa:	e006      	b.n	800c50a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	605a      	str	r2, [r3, #4]
 800c502:	e002      	b.n	800c50a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c50a:	4b1e      	ldr	r3, [pc, #120]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c516:	d121      	bne.n	800c55c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800c518:	4b1a      	ldr	r3, [pc, #104]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c51c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c520:	2b00      	cmp	r3, #0
 800c522:	d017      	beq.n	800c554 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800c524:	4b17      	ldr	r3, [pc, #92]	@ (800c584 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800c526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c528:	0e1b      	lsrs	r3, r3, #24
 800c52a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c52e:	ee07 3a90 	vmov	s15, r3
 800c532:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800c536:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c53a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800c53e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800c542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c54a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800c552:	e010      	b.n	800c576 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	609a      	str	r2, [r3, #8]
}
 800c55a:	e00c      	b.n	800c576 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	609a      	str	r2, [r3, #8]
}
 800c562:	e008      	b.n	800c576 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2200      	movs	r2, #0
 800c56e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	609a      	str	r2, [r3, #8]
}
 800c576:	bf00      	nop
 800c578:	372c      	adds	r7, #44	@ 0x2c
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	44020c00 	.word	0x44020c00
 800c588:	03d09000 	.word	0x03d09000
 800c58c:	46000000 	.word	0x46000000
 800c590:	4a742400 	.word	0x4a742400
 800c594:	4af42400 	.word	0x4af42400

0800c598 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c598:	b590      	push	{r4, r7, lr}
 800c59a:	b08f      	sub	sp, #60	@ 0x3c
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800c5a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c5a6:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800c5aa:	4321      	orrs	r1, r4
 800c5ac:	d150      	bne.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c5ae:	4b26      	ldr	r3, [pc, #152]	@ (800c648 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c5b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c5b8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800c5ba:	4b23      	ldr	r3, [pc, #140]	@ (800c648 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c5bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5c0:	f003 0302 	and.w	r3, r3, #2
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	d108      	bne.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5ce:	d104      	bne.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800c5d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5d6:	f002 bb2a 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800c5da:	4b1b      	ldr	r3, [pc, #108]	@ (800c648 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c5dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c5e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c5e8:	d108      	bne.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5f0:	d104      	bne.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800c5f2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c5f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5f8:	f002 bb19 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800c5fc:	4b12      	ldr	r3, [pc, #72]	@ (800c648 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c604:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c608:	d119      	bne.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800c60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c610:	d115      	bne.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800c612:	4b0d      	ldr	r3, [pc, #52]	@ (800c648 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c614:	69db      	ldr	r3, [r3, #28]
 800c616:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800c61a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c61e:	d30a      	bcc.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800c620:	4b09      	ldr	r3, [pc, #36]	@ (800c648 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c622:	69db      	ldr	r3, [r3, #28]
 800c624:	0a1b      	lsrs	r3, r3, #8
 800c626:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c62a:	4a08      	ldr	r2, [pc, #32]	@ (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800c62c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c630:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800c632:	f002 bafc 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800c636:	2300      	movs	r3, #0
 800c638:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800c63a:	f002 baf8 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800c63e:	2300      	movs	r3, #0
 800c640:	637b      	str	r3, [r7, #52]	@ 0x34
 800c642:	f002 baf4 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800c646:	bf00      	nop
 800c648:	44020c00 	.word	0x44020c00
 800c64c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800c650:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c654:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800c658:	ea50 0104 	orrs.w	r1, r0, r4
 800c65c:	f001 8275 	beq.w	800db4a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800c660:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c664:	2801      	cmp	r0, #1
 800c666:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800c66a:	f082 82dd 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c66e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c672:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800c676:	ea50 0104 	orrs.w	r1, r0, r4
 800c67a:	f001 816c 	beq.w	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800c67e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c682:	2801      	cmp	r0, #1
 800c684:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800c688:	f082 82ce 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c68c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c690:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800c694:	ea50 0104 	orrs.w	r1, r0, r4
 800c698:	f001 8602 	beq.w	800e2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800c69c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6a0:	2801      	cmp	r0, #1
 800c6a2:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800c6a6:	f082 82bf 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c6aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6ae:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800c6b2:	ea50 0104 	orrs.w	r1, r0, r4
 800c6b6:	f001 854c 	beq.w	800e152 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800c6ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6be:	2801      	cmp	r0, #1
 800c6c0:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800c6c4:	f082 82b0 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c6c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6cc:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800c6d0:	ea50 0104 	orrs.w	r1, r0, r4
 800c6d4:	f001 849e 	beq.w	800e014 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800c6d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6dc:	2801      	cmp	r0, #1
 800c6de:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800c6e2:	f082 82a1 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c6e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6ea:	f1a1 0420 	sub.w	r4, r1, #32
 800c6ee:	ea50 0104 	orrs.w	r1, r0, r4
 800c6f2:	f001 83e8 	beq.w	800dec6 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800c6f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6fa:	2801      	cmp	r0, #1
 800c6fc:	f171 0120 	sbcs.w	r1, r1, #32
 800c700:	f082 8292 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c704:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c708:	f1a1 0410 	sub.w	r4, r1, #16
 800c70c:	ea50 0104 	orrs.w	r1, r0, r4
 800c710:	f002 8256 	beq.w	800ebc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800c714:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c718:	2801      	cmp	r0, #1
 800c71a:	f171 0110 	sbcs.w	r1, r1, #16
 800c71e:	f082 8283 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c722:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c726:	f1a1 0408 	sub.w	r4, r1, #8
 800c72a:	ea50 0104 	orrs.w	r1, r0, r4
 800c72e:	f002 81cc 	beq.w	800eaca <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800c732:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c736:	2801      	cmp	r0, #1
 800c738:	f171 0108 	sbcs.w	r1, r1, #8
 800c73c:	f082 8274 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c740:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c744:	1f0c      	subs	r4, r1, #4
 800c746:	ea50 0104 	orrs.w	r1, r0, r4
 800c74a:	f001 8648 	beq.w	800e3de <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800c74e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c752:	2801      	cmp	r0, #1
 800c754:	f171 0104 	sbcs.w	r1, r1, #4
 800c758:	f082 8266 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c75c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c760:	1e8c      	subs	r4, r1, #2
 800c762:	ea50 0104 	orrs.w	r1, r0, r4
 800c766:	f002 8143 	beq.w	800e9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800c76a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c76e:	2801      	cmp	r0, #1
 800c770:	f171 0102 	sbcs.w	r1, r1, #2
 800c774:	f082 8258 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c77c:	1e4c      	subs	r4, r1, #1
 800c77e:	ea50 0104 	orrs.w	r1, r0, r4
 800c782:	f002 80ce 	beq.w	800e922 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800c786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c78a:	2801      	cmp	r0, #1
 800c78c:	f171 0101 	sbcs.w	r1, r1, #1
 800c790:	f082 824a 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c794:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c798:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800c79c:	4321      	orrs	r1, r4
 800c79e:	f002 8059 	beq.w	800e854 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800c7a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7a6:	4cd9      	ldr	r4, [pc, #868]	@ (800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800c7a8:	42a0      	cmp	r0, r4
 800c7aa:	f171 0100 	sbcs.w	r1, r1, #0
 800c7ae:	f082 823b 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c7b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7b6:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800c7ba:	4321      	orrs	r1, r4
 800c7bc:	f001 87d9 	beq.w	800e772 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800c7c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7c4:	4cd2      	ldr	r4, [pc, #840]	@ (800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800c7c6:	42a0      	cmp	r0, r4
 800c7c8:	f171 0100 	sbcs.w	r1, r1, #0
 800c7cc:	f082 822c 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c7d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7d4:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800c7d8:	4321      	orrs	r1, r4
 800c7da:	f001 8751 	beq.w	800e680 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800c7de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7e2:	4ccc      	ldr	r4, [pc, #816]	@ (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800c7e4:	42a0      	cmp	r0, r4
 800c7e6:	f171 0100 	sbcs.w	r1, r1, #0
 800c7ea:	f082 821d 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c7ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c7f2:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800c7f6:	4321      	orrs	r1, r4
 800c7f8:	f001 869a 	beq.w	800e530 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800c7fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c800:	4cc5      	ldr	r4, [pc, #788]	@ (800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800c802:	42a0      	cmp	r0, r4
 800c804:	f171 0100 	sbcs.w	r1, r1, #0
 800c808:	f082 820e 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c80c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c810:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800c814:	4321      	orrs	r1, r4
 800c816:	f001 8612 	beq.w	800e43e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800c81a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c81e:	4cbf      	ldr	r4, [pc, #764]	@ (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800c820:	42a0      	cmp	r0, r4
 800c822:	f171 0100 	sbcs.w	r1, r1, #0
 800c826:	f082 81ff 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c82a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c82e:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800c832:	4321      	orrs	r1, r4
 800c834:	f002 817e 	beq.w	800eb34 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800c838:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c83c:	4cb8      	ldr	r4, [pc, #736]	@ (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800c83e:	42a0      	cmp	r0, r4
 800c840:	f171 0100 	sbcs.w	r1, r1, #0
 800c844:	f082 81f0 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c84c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 800c850:	4321      	orrs	r1, r4
 800c852:	f000 829e 	beq.w	800cd92 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800c856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c85a:	4cb2      	ldr	r4, [pc, #712]	@ (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c85c:	42a0      	cmp	r0, r4
 800c85e:	f171 0100 	sbcs.w	r1, r1, #0
 800c862:	f082 81e1 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c86a:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800c86e:	4321      	orrs	r1, r4
 800c870:	f000 826d 	beq.w	800cd4e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800c874:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c878:	4cab      	ldr	r4, [pc, #684]	@ (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c87a:	42a0      	cmp	r0, r4
 800c87c:	f171 0100 	sbcs.w	r1, r1, #0
 800c880:	f082 81d2 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c884:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c888:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800c88c:	4321      	orrs	r1, r4
 800c88e:	f001 800d 	beq.w	800d8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800c892:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c896:	4ca5      	ldr	r4, [pc, #660]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c898:	42a0      	cmp	r0, r4
 800c89a:	f171 0100 	sbcs.w	r1, r1, #0
 800c89e:	f082 81c3 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c8a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8a6:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 800c8aa:	4321      	orrs	r1, r4
 800c8ac:	f000 81d0 	beq.w	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800c8b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8b4:	4c9e      	ldr	r4, [pc, #632]	@ (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800c8b6:	42a0      	cmp	r0, r4
 800c8b8:	f171 0100 	sbcs.w	r1, r1, #0
 800c8bc:	f082 81b4 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c8c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8c4:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 800c8c8:	4321      	orrs	r1, r4
 800c8ca:	f000 8142 	beq.w	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800c8ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8d2:	4c98      	ldr	r4, [pc, #608]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800c8d4:	42a0      	cmp	r0, r4
 800c8d6:	f171 0100 	sbcs.w	r1, r1, #0
 800c8da:	f082 81a5 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c8de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8e2:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800c8e6:	4321      	orrs	r1, r4
 800c8e8:	f001 824e 	beq.w	800dd88 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800c8ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c8f0:	4c91      	ldr	r4, [pc, #580]	@ (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800c8f2:	42a0      	cmp	r0, r4
 800c8f4:	f171 0100 	sbcs.w	r1, r1, #0
 800c8f8:	f082 8196 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c8fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c900:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800c904:	4321      	orrs	r1, r4
 800c906:	f001 8197 	beq.w	800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800c90a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c90e:	4c8b      	ldr	r4, [pc, #556]	@ (800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800c910:	42a0      	cmp	r0, r4
 800c912:	f171 0100 	sbcs.w	r1, r1, #0
 800c916:	f082 8187 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c91a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c91e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800c922:	4321      	orrs	r1, r4
 800c924:	f001 8154 	beq.w	800dbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800c928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c92c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800c930:	f171 0100 	sbcs.w	r1, r1, #0
 800c934:	f082 8178 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c93c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800c940:	4321      	orrs	r1, r4
 800c942:	f001 80b7 	beq.w	800dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800c946:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c94a:	f248 0401 	movw	r4, #32769	@ 0x8001
 800c94e:	42a0      	cmp	r0, r4
 800c950:	f171 0100 	sbcs.w	r1, r1, #0
 800c954:	f082 8168 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c95c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800c960:	4321      	orrs	r1, r4
 800c962:	f001 8064 	beq.w	800da2e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800c966:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c96a:	f244 0401 	movw	r4, #16385	@ 0x4001
 800c96e:	42a0      	cmp	r0, r4
 800c970:	f171 0100 	sbcs.w	r1, r1, #0
 800c974:	f082 8158 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c97c:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800c980:	4321      	orrs	r1, r4
 800c982:	f001 8011 	beq.w	800d9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800c986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c98a:	f242 0401 	movw	r4, #8193	@ 0x2001
 800c98e:	42a0      	cmp	r0, r4
 800c990:	f171 0100 	sbcs.w	r1, r1, #0
 800c994:	f082 8148 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c998:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c99c:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800c9a0:	4321      	orrs	r1, r4
 800c9a2:	f000 871e 	beq.w	800d7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800c9a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9aa:	f241 0401 	movw	r4, #4097	@ 0x1001
 800c9ae:	42a0      	cmp	r0, r4
 800c9b0:	f171 0100 	sbcs.w	r1, r1, #0
 800c9b4:	f082 8138 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c9b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9bc:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800c9c0:	4321      	orrs	r1, r4
 800c9c2:	f000 86a8 	beq.w	800d716 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800c9c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9ca:	f640 0401 	movw	r4, #2049	@ 0x801
 800c9ce:	42a0      	cmp	r0, r4
 800c9d0:	f171 0100 	sbcs.w	r1, r1, #0
 800c9d4:	f082 8128 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c9d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9dc:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800c9e0:	4321      	orrs	r1, r4
 800c9e2:	f000 8632 	beq.w	800d64a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800c9e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9ea:	f240 4401 	movw	r4, #1025	@ 0x401
 800c9ee:	42a0      	cmp	r0, r4
 800c9f0:	f171 0100 	sbcs.w	r1, r1, #0
 800c9f4:	f082 8118 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800c9f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c9fc:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800ca00:	4321      	orrs	r1, r4
 800ca02:	f000 85b0 	beq.w	800d566 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800ca06:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca0a:	f240 2401 	movw	r4, #513	@ 0x201
 800ca0e:	42a0      	cmp	r0, r4
 800ca10:	f171 0100 	sbcs.w	r1, r1, #0
 800ca14:	f082 8108 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ca18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca1c:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800ca20:	4321      	orrs	r1, r4
 800ca22:	f000 8535 	beq.w	800d490 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800ca26:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca2a:	f240 1401 	movw	r4, #257	@ 0x101
 800ca2e:	42a0      	cmp	r0, r4
 800ca30:	f171 0100 	sbcs.w	r1, r1, #0
 800ca34:	f082 80f8 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ca38:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca3c:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800ca40:	4321      	orrs	r1, r4
 800ca42:	f000 84ba 	beq.w	800d3ba <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800ca46:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca4a:	2881      	cmp	r0, #129	@ 0x81
 800ca4c:	f171 0100 	sbcs.w	r1, r1, #0
 800ca50:	f082 80ea 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ca54:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca58:	2821      	cmp	r0, #33	@ 0x21
 800ca5a:	f171 0100 	sbcs.w	r1, r1, #0
 800ca5e:	d26f      	bcs.n	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ca60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca64:	4301      	orrs	r1, r0
 800ca66:	f002 80df 	beq.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ca6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ca6e:	1e42      	subs	r2, r0, #1
 800ca70:	f141 33ff 	adc.w	r3, r1, #4294967295
 800ca74:	2a20      	cmp	r2, #32
 800ca76:	f173 0100 	sbcs.w	r1, r3, #0
 800ca7a:	f082 80d5 	bcs.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ca7e:	2a1f      	cmp	r2, #31
 800ca80:	f202 80d2 	bhi.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800ca84:	a101      	add	r1, pc, #4	@ (adr r1, 800ca8c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800ca86:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ca8a:	bf00      	nop
 800ca8c:	0800cded 	.word	0x0800cded
 800ca90:	0800ceb9 	.word	0x0800ceb9
 800ca94:	0800ec29 	.word	0x0800ec29
 800ca98:	0800cf79 	.word	0x0800cf79
 800ca9c:	0800ec29 	.word	0x0800ec29
 800caa0:	0800ec29 	.word	0x0800ec29
 800caa4:	0800ec29 	.word	0x0800ec29
 800caa8:	0800d049 	.word	0x0800d049
 800caac:	0800ec29 	.word	0x0800ec29
 800cab0:	0800ec29 	.word	0x0800ec29
 800cab4:	0800ec29 	.word	0x0800ec29
 800cab8:	0800ec29 	.word	0x0800ec29
 800cabc:	0800ec29 	.word	0x0800ec29
 800cac0:	0800ec29 	.word	0x0800ec29
 800cac4:	0800ec29 	.word	0x0800ec29
 800cac8:	0800d12b 	.word	0x0800d12b
 800cacc:	0800ec29 	.word	0x0800ec29
 800cad0:	0800ec29 	.word	0x0800ec29
 800cad4:	0800ec29 	.word	0x0800ec29
 800cad8:	0800ec29 	.word	0x0800ec29
 800cadc:	0800ec29 	.word	0x0800ec29
 800cae0:	0800ec29 	.word	0x0800ec29
 800cae4:	0800ec29 	.word	0x0800ec29
 800cae8:	0800ec29 	.word	0x0800ec29
 800caec:	0800ec29 	.word	0x0800ec29
 800caf0:	0800ec29 	.word	0x0800ec29
 800caf4:	0800ec29 	.word	0x0800ec29
 800caf8:	0800ec29 	.word	0x0800ec29
 800cafc:	0800ec29 	.word	0x0800ec29
 800cb00:	0800ec29 	.word	0x0800ec29
 800cb04:	0800ec29 	.word	0x0800ec29
 800cb08:	0800d201 	.word	0x0800d201
 800cb0c:	80000001 	.word	0x80000001
 800cb10:	40000001 	.word	0x40000001
 800cb14:	20000001 	.word	0x20000001
 800cb18:	10000001 	.word	0x10000001
 800cb1c:	08000001 	.word	0x08000001
 800cb20:	04000001 	.word	0x04000001
 800cb24:	00800001 	.word	0x00800001
 800cb28:	00400001 	.word	0x00400001
 800cb2c:	00200001 	.word	0x00200001
 800cb30:	00100001 	.word	0x00100001
 800cb34:	00080001 	.word	0x00080001
 800cb38:	00040001 	.word	0x00040001
 800cb3c:	00020001 	.word	0x00020001
 800cb40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb44:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800cb48:	430b      	orrs	r3, r1
 800cb4a:	f000 83c4 	beq.w	800d2d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800cb4e:	f002 b86b 	b.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800cb52:	4ba1      	ldr	r3, [pc, #644]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cb54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cb58:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cb5c:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cb64:	d036      	beq.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800cb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cb6c:	d86b      	bhi.n	800cc46 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cb74:	d02b      	beq.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800cb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cb7c:	d863      	bhi.n	800cc46 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb84:	d01b      	beq.n	800cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb8c:	d85b      	bhi.n	800cc46 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d004      	beq.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800cb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb9a:	d008      	beq.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 800cb9c:	e053      	b.n	800cc46 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb9e:	f107 0320 	add.w	r3, r7, #32
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7ff f8b4 	bl	800bd10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbaa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cbac:	e04e      	b.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbae:	f107 0314 	add.w	r3, r7, #20
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7ff fa18 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cbbc:	e046      	b.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbbe:	f107 0308 	add.w	r3, r7, #8
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7ff fb7c 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cbcc:	e03e      	b.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cbce:	4b83      	ldr	r3, [pc, #524]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800cbd0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cbd2:	e03b      	b.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbd4:	4b80      	ldr	r3, [pc, #512]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cbd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cbda:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800cbde:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbe0:	4b7d      	ldr	r3, [pc, #500]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f003 0302 	and.w	r3, r3, #2
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d10c      	bne.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800cbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d109      	bne.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cbf2:	4b79      	ldr	r3, [pc, #484]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	08db      	lsrs	r3, r3, #3
 800cbf8:	f003 0303 	and.w	r3, r3, #3
 800cbfc:	4a78      	ldr	r2, [pc, #480]	@ (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800cbfe:	fa22 f303 	lsr.w	r3, r2, r3
 800cc02:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc04:	e01e      	b.n	800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc06:	4b74      	ldr	r3, [pc, #464]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cc0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc12:	d106      	bne.n	800cc22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc1a:	d102      	bne.n	800cc22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cc1c:	4b71      	ldr	r3, [pc, #452]	@ (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800cc1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc20:	e010      	b.n	800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc22:	4b6d      	ldr	r3, [pc, #436]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc2e:	d106      	bne.n	800cc3e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 800cc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc36:	d102      	bne.n	800cc3e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cc38:	4b6b      	ldr	r3, [pc, #428]	@ (800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800cc3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc3c:	e002      	b.n	800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800cc42:	e003      	b.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800cc44:	e002      	b.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800cc46:	2300      	movs	r3, #0
 800cc48:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cc4a:	bf00      	nop
          }
        }
        break;
 800cc4c:	f001 bfef 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800cc50:	4b61      	ldr	r3, [pc, #388]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cc52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cc56:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800cc5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc62:	d036      	beq.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800cc64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc6a:	d86b      	bhi.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800cc72:	d02b      	beq.n	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800cc74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc76:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800cc7a:	d863      	bhi.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800cc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc82:	d01b      	beq.n	800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc8a:	d85b      	bhi.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d004      	beq.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800cc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800cc98:	d008      	beq.n	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800cc9a:	e053      	b.n	800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc9c:	f107 0320 	add.w	r3, r7, #32
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7ff f835 	bl	800bd10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ccaa:	e04e      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccac:	f107 0314 	add.w	r3, r7, #20
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7ff f999 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ccba:	e046      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccbc:	f107 0308 	add.w	r3, r7, #8
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7ff fafd 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ccca:	e03e      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cccc:	4b43      	ldr	r3, [pc, #268]	@ (800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ccce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ccd0:	e03b      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccd2:	4b41      	ldr	r3, [pc, #260]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ccd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ccd8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ccdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccde:	4b3e      	ldr	r3, [pc, #248]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f003 0302 	and.w	r3, r3, #2
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d10c      	bne.n	800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800ccea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d109      	bne.n	800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ccf0:	4b39      	ldr	r3, [pc, #228]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	08db      	lsrs	r3, r3, #3
 800ccf6:	f003 0303 	and.w	r3, r3, #3
 800ccfa:	4a39      	ldr	r2, [pc, #228]	@ (800cde0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800ccfc:	fa22 f303 	lsr.w	r3, r2, r3
 800cd00:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd02:	e01e      	b.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd04:	4b34      	ldr	r3, [pc, #208]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cd0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd10:	d106      	bne.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cd12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd18:	d102      	bne.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cd1a:	4b32      	ldr	r3, [pc, #200]	@ (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800cd1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd1e:	e010      	b.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd20:	4b2d      	ldr	r3, [pc, #180]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd2c:	d106      	bne.n	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800cd2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd34:	d102      	bne.n	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cd36:	4b2c      	ldr	r3, [pc, #176]	@ (800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800cd38:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd3a:	e002      	b.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800cd40:	e003      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800cd42:	e002      	b.n	800cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800cd44:	2300      	movs	r3, #0
 800cd46:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cd48:	bf00      	nop
          }
        }
        break;
 800cd4a:	f001 bf70 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800cd4e:	4b22      	ldr	r3, [pc, #136]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cd50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cd54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd58:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d108      	bne.n	800cd72 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd60:	f107 0320 	add.w	r3, r7, #32
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fe ffd3 	bl	800bd10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cd6e:	f001 bf5e 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800cd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd74:	2b40      	cmp	r3, #64	@ 0x40
 800cd76:	d108      	bne.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd78:	f107 0314 	add.w	r3, r7, #20
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7ff f933 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd86:	f001 bf52 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cd8e:	f001 bf4e 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800cd92:	4b11      	ldr	r3, [pc, #68]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800cd94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800cd98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd9c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d108      	bne.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cda4:	f107 0320 	add.w	r3, r7, #32
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7fe ffb1 	bl	800bd10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800cdb2:	f001 bf3c 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb8:	2b80      	cmp	r3, #128	@ 0x80
 800cdba:	d108      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdbc:	f107 0314 	add.w	r3, r7, #20
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff f911 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cdca:	f001 bf30 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cdd2:	f001 bf2c 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cdd6:	bf00      	nop
 800cdd8:	44020c00 	.word	0x44020c00
 800cddc:	00bb8000 	.word	0x00bb8000
 800cde0:	03d09000 	.word	0x03d09000
 800cde4:	003d0900 	.word	0x003d0900
 800cde8:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800cdec:	4b9d      	ldr	r3, [pc, #628]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800cdee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cdf2:	f003 0307 	and.w	r3, r3, #7
 800cdf6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800cdf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d104      	bne.n	800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800cdfe:	f7fc ffd1 	bl	8009da4 <HAL_RCC_GetPCLK2Freq>
 800ce02:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ce04:	f001 bf13 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800ce08:	4b96      	ldr	r3, [pc, #600]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce14:	d10a      	bne.n	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800ce16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d107      	bne.n	800ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce1c:	f107 0314 	add.w	r3, r7, #20
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7ff f8e1 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce2a:	e043      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800ce2c:	4b8d      	ldr	r3, [pc, #564]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce38:	d10a      	bne.n	800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d107      	bne.n	800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce40:	f107 0308 	add.w	r3, r7, #8
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7ff fa3b 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce4e:	e031      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800ce50:	4b84      	ldr	r3, [pc, #528]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f003 0302 	and.w	r3, r3, #2
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	d10c      	bne.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800ce5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	d109      	bne.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ce62:	4b80      	ldr	r3, [pc, #512]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	08db      	lsrs	r3, r3, #3
 800ce68:	f003 0303 	and.w	r3, r3, #3
 800ce6c:	4a7e      	ldr	r2, [pc, #504]	@ (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800ce6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ce72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce74:	e01e      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800ce76:	4b7b      	ldr	r3, [pc, #492]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ce7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce82:	d105      	bne.n	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800ce84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce86:	2b04      	cmp	r3, #4
 800ce88:	d102      	bne.n	800ce90 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800ce8a:	4b78      	ldr	r3, [pc, #480]	@ (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800ce8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce8e:	e011      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800ce90:	4b74      	ldr	r3, [pc, #464]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ce92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce96:	f003 0302 	and.w	r3, r3, #2
 800ce9a:	2b02      	cmp	r3, #2
 800ce9c:	d106      	bne.n	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800ce9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea0:	2b05      	cmp	r3, #5
 800cea2:	d103      	bne.n	800ceac <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800cea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cea8:	637b      	str	r3, [r7, #52]	@ 0x34
 800ceaa:	e003      	b.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 800ceac:	2300      	movs	r3, #0
 800ceae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ceb0:	f001 bebd 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ceb4:	f001 bebb 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ceb8:	4b6a      	ldr	r3, [pc, #424]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ceba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cebe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cec2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800cec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d104      	bne.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ceca:	f7fc ff55 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800cece:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800ced0:	f001 bead 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800ced4:	4b63      	ldr	r3, [pc, #396]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cedc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cee0:	d10a      	bne.n	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800cee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee4:	2b08      	cmp	r3, #8
 800cee6:	d107      	bne.n	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cee8:	f107 0314 	add.w	r3, r7, #20
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7ff f87b 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cef6:	e03d      	b.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800cef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefa:	2b10      	cmp	r3, #16
 800cefc:	d108      	bne.n	800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cefe:	f107 0308 	add.w	r3, r7, #8
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7ff f9dc 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf0c:	f001 be8f 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800cf10:	4b54      	ldr	r3, [pc, #336]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f003 0302 	and.w	r3, r3, #2
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d10c      	bne.n	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800cf1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1e:	2b18      	cmp	r3, #24
 800cf20:	d109      	bne.n	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cf22:	4b50      	ldr	r3, [pc, #320]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	08db      	lsrs	r3, r3, #3
 800cf28:	f003 0303 	and.w	r3, r3, #3
 800cf2c:	4a4e      	ldr	r2, [pc, #312]	@ (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800cf2e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf32:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf34:	e01e      	b.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800cf36:	4b4b      	ldr	r3, [pc, #300]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf42:	d105      	bne.n	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cf44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf46:	2b20      	cmp	r3, #32
 800cf48:	d102      	bne.n	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800cf4a:	4b48      	ldr	r3, [pc, #288]	@ (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800cf4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf4e:	e011      	b.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800cf50:	4b44      	ldr	r3, [pc, #272]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800cf52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cf56:	f003 0302 	and.w	r3, r3, #2
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	d106      	bne.n	800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800cf5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf60:	2b28      	cmp	r3, #40	@ 0x28
 800cf62:	d103      	bne.n	800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800cf64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf68:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf6a:	e003      	b.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cf70:	f001 be5d 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800cf74:	f001 be5b 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800cf78:	4b3a      	ldr	r3, [pc, #232]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800cf7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800cf7e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800cf82:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800cf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d104      	bne.n	800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800cf8a:	f7fc fef5 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800cf8e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800cf90:	f001 be4d 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800cf94:	4b33      	ldr	r3, [pc, #204]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cfa0:	d10a      	bne.n	800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800cfa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa4:	2b40      	cmp	r3, #64	@ 0x40
 800cfa6:	d107      	bne.n	800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfa8:	f107 0314 	add.w	r3, r7, #20
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7ff f81b 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfb6:	e045      	b.n	800d044 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800cfb8:	4b2a      	ldr	r3, [pc, #168]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfc4:	d10a      	bne.n	800cfdc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc8:	2b80      	cmp	r3, #128	@ 0x80
 800cfca:	d107      	bne.n	800cfdc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfcc:	f107 0308 	add.w	r3, r7, #8
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff f975 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfda:	e033      	b.n	800d044 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800cfdc:	4b21      	ldr	r3, [pc, #132]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f003 0302 	and.w	r3, r3, #2
 800cfe4:	2b02      	cmp	r3, #2
 800cfe6:	d10c      	bne.n	800d002 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800cfe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfea:	2bc0      	cmp	r3, #192	@ 0xc0
 800cfec:	d109      	bne.n	800d002 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cfee:	4b1d      	ldr	r3, [pc, #116]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	08db      	lsrs	r3, r3, #3
 800cff4:	f003 0303 	and.w	r3, r3, #3
 800cff8:	4a1b      	ldr	r2, [pc, #108]	@ (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800cffa:	fa22 f303 	lsr.w	r3, r2, r3
 800cffe:	637b      	str	r3, [r7, #52]	@ 0x34
 800d000:	e020      	b.n	800d044 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800d002:	4b18      	ldr	r3, [pc, #96]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d00a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d00e:	d106      	bne.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800d010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d016:	d102      	bne.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800d018:	4b14      	ldr	r3, [pc, #80]	@ (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800d01a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d01c:	e012      	b.n	800d044 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800d01e:	4b11      	ldr	r3, [pc, #68]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d024:	f003 0302 	and.w	r3, r3, #2
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d107      	bne.n	800d03c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800d02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800d032:	d103      	bne.n	800d03c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800d034:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d038:	637b      	str	r3, [r7, #52]	@ 0x34
 800d03a:	e003      	b.n	800d044 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800d03c:	2300      	movs	r3, #0
 800d03e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d040:	f001 bdf5 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d044:	f001 bdf3 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800d048:	4b06      	ldr	r3, [pc, #24]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800d04a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d04e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800d052:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800d054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d056:	2b00      	cmp	r3, #0
 800d058:	d10a      	bne.n	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d05a:	f7fc fe8d 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800d05e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800d060:	f001 bde5 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d064:	44020c00 	.word	0x44020c00
 800d068:	03d09000 	.word	0x03d09000
 800d06c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800d070:	4ba0      	ldr	r3, [pc, #640]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d078:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d07c:	d10b      	bne.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800d07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d084:	d107      	bne.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d086:	f107 0314 	add.w	r3, r7, #20
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fe ffac 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	637b      	str	r3, [r7, #52]	@ 0x34
 800d094:	e047      	b.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800d096:	4b97      	ldr	r3, [pc, #604]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d09e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0a2:	d10b      	bne.n	800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0aa:	d107      	bne.n	800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0ac:	f107 0308 	add.w	r3, r7, #8
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7ff f905 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0ba:	e034      	b.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800d0bc:	4b8d      	ldr	r3, [pc, #564]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	f003 0302 	and.w	r3, r3, #2
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d10d      	bne.n	800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800d0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ca:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d0ce:	d109      	bne.n	800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d0d0:	4b88      	ldr	r3, [pc, #544]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	08db      	lsrs	r3, r3, #3
 800d0d6:	f003 0303 	and.w	r3, r3, #3
 800d0da:	4a87      	ldr	r2, [pc, #540]	@ (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800d0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800d0e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0e2:	e020      	b.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800d0e4:	4b83      	ldr	r3, [pc, #524]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d0ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0f0:	d106      	bne.n	800d100 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d0f8:	d102      	bne.n	800d100 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800d0fa:	4b80      	ldr	r3, [pc, #512]	@ (800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800d0fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0fe:	e012      	b.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800d100:	4b7c      	ldr	r3, [pc, #496]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d106:	f003 0302 	and.w	r3, r3, #2
 800d10a:	2b02      	cmp	r3, #2
 800d10c:	d107      	bne.n	800d11e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800d10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d110:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800d114:	d103      	bne.n	800d11e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800d116:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d11c:	e003      	b.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800d11e:	2300      	movs	r3, #0
 800d120:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d122:	f001 bd84 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d126:	f001 bd82 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800d12a:	4b72      	ldr	r3, [pc, #456]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d12c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d130:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d134:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800d136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d104      	bne.n	800d146 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d13c:	f7fc fe1c 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800d140:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800d142:	f001 bd74 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800d146:	4b6b      	ldr	r3, [pc, #428]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d14e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d152:	d10b      	bne.n	800d16c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800d154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d15a:	d107      	bne.n	800d16c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d15c:	f107 0314 	add.w	r3, r7, #20
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe ff41 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	637b      	str	r3, [r7, #52]	@ 0x34
 800d16a:	e047      	b.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800d16c:	4b61      	ldr	r3, [pc, #388]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d178:	d10b      	bne.n	800d192 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800d17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d17c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d180:	d107      	bne.n	800d192 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d182:	f107 0308 	add.w	r3, r7, #8
 800d186:	4618      	mov	r0, r3
 800d188:	f7ff f89a 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d190:	e034      	b.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800d192:	4b58      	ldr	r3, [pc, #352]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f003 0302 	and.w	r3, r3, #2
 800d19a:	2b02      	cmp	r3, #2
 800d19c:	d10d      	bne.n	800d1ba <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800d19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d1a4:	d109      	bne.n	800d1ba <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d1a6:	4b53      	ldr	r3, [pc, #332]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	08db      	lsrs	r3, r3, #3
 800d1ac:	f003 0303 	and.w	r3, r3, #3
 800d1b0:	4a51      	ldr	r2, [pc, #324]	@ (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800d1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800d1b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1b8:	e020      	b.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800d1ba:	4b4e      	ldr	r3, [pc, #312]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d1c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1c6:	d106      	bne.n	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800d1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d1ce:	d102      	bne.n	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800d1d0:	4b4a      	ldr	r3, [pc, #296]	@ (800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800d1d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1d4:	e012      	b.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800d1d6:	4b47      	ldr	r3, [pc, #284]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d1d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d1dc:	f003 0302 	and.w	r3, r3, #2
 800d1e0:	2b02      	cmp	r3, #2
 800d1e2:	d107      	bne.n	800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800d1e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d1ea:	d103      	bne.n	800d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800d1ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1f2:	e003      	b.n	800d1fc <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d1f8:	f001 bd19 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d1fc:	f001 bd17 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800d200:	4b3c      	ldr	r3, [pc, #240]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d206:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800d20a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800d20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d104      	bne.n	800d21c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d212:	f7fc fdb1 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800d216:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800d218:	f001 bd09 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800d21c:	4b35      	ldr	r3, [pc, #212]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d228:	d10b      	bne.n	800d242 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800d22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d22c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d230:	d107      	bne.n	800d242 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d232:	f107 0314 	add.w	r3, r7, #20
 800d236:	4618      	mov	r0, r3
 800d238:	f7fe fed6 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d240:	e047      	b.n	800d2d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800d242:	4b2c      	ldr	r3, [pc, #176]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d24a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d24e:	d10b      	bne.n	800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800d250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d256:	d107      	bne.n	800d268 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d258:	f107 0308 	add.w	r3, r7, #8
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff f82f 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	637b      	str	r3, [r7, #52]	@ 0x34
 800d266:	e034      	b.n	800d2d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800d268:	4b22      	ldr	r3, [pc, #136]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f003 0302 	and.w	r3, r3, #2
 800d270:	2b02      	cmp	r3, #2
 800d272:	d10d      	bne.n	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800d274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d276:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800d27a:	d109      	bne.n	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d27c:	4b1d      	ldr	r3, [pc, #116]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	08db      	lsrs	r3, r3, #3
 800d282:	f003 0303 	and.w	r3, r3, #3
 800d286:	4a1c      	ldr	r2, [pc, #112]	@ (800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800d288:	fa22 f303 	lsr.w	r3, r2, r3
 800d28c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d28e:	e020      	b.n	800d2d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800d290:	4b18      	ldr	r3, [pc, #96]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d29c:	d106      	bne.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800d29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2a4:	d102      	bne.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800d2a6:	4b15      	ldr	r3, [pc, #84]	@ (800d2fc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800d2a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2aa:	e012      	b.n	800d2d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800d2ac:	4b11      	ldr	r3, [pc, #68]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d2ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d2b2:	f003 0302 	and.w	r3, r3, #2
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	d107      	bne.n	800d2ca <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2bc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800d2c0:	d103      	bne.n	800d2ca <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800d2c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2c8:	e003      	b.n	800d2d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d2ce:	f001 bcae 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d2d2:	f001 bcac 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800d2d6:	4b07      	ldr	r3, [pc, #28]	@ (800d2f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800d2d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d2dc:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800d2e0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800d2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10b      	bne.n	800d300 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d2e8:	f7fc fd46 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800d2ec:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800d2ee:	f001 bc9e 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d2f2:	bf00      	nop
 800d2f4:	44020c00 	.word	0x44020c00
 800d2f8:	03d09000 	.word	0x03d09000
 800d2fc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800d300:	4ba0      	ldr	r3, [pc, #640]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d308:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d30c:	d10b      	bne.n	800d326 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800d30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d310:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d314:	d107      	bne.n	800d326 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d316:	f107 0314 	add.w	r3, r7, #20
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fe fe64 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d320:	69bb      	ldr	r3, [r7, #24]
 800d322:	637b      	str	r3, [r7, #52]	@ 0x34
 800d324:	e047      	b.n	800d3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800d326:	4b97      	ldr	r3, [pc, #604]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d32e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d332:	d10b      	bne.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800d334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d336:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d33a:	d107      	bne.n	800d34c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d33c:	f107 0308 	add.w	r3, r7, #8
 800d340:	4618      	mov	r0, r3
 800d342:	f7fe ffbd 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	637b      	str	r3, [r7, #52]	@ 0x34
 800d34a:	e034      	b.n	800d3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800d34c:	4b8d      	ldr	r3, [pc, #564]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f003 0302 	and.w	r3, r3, #2
 800d354:	2b02      	cmp	r3, #2
 800d356:	d10d      	bne.n	800d374 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800d358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d35a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d35e:	d109      	bne.n	800d374 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d360:	4b88      	ldr	r3, [pc, #544]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	08db      	lsrs	r3, r3, #3
 800d366:	f003 0303 	and.w	r3, r3, #3
 800d36a:	4a87      	ldr	r2, [pc, #540]	@ (800d588 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800d36c:	fa22 f303 	lsr.w	r3, r2, r3
 800d370:	637b      	str	r3, [r7, #52]	@ 0x34
 800d372:	e020      	b.n	800d3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800d374:	4b83      	ldr	r3, [pc, #524]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d37c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d380:	d106      	bne.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800d382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d384:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d388:	d102      	bne.n	800d390 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800d38a:	4b80      	ldr	r3, [pc, #512]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800d38c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d38e:	e012      	b.n	800d3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800d390:	4b7c      	ldr	r3, [pc, #496]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d396:	f003 0302 	and.w	r3, r3, #2
 800d39a:	2b02      	cmp	r3, #2
 800d39c:	d107      	bne.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800d39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800d3a4:	d103      	bne.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800d3a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d3aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3ac:	e003      	b.n	800d3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3b2:	f001 bc3c 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d3b6:	f001 bc3a 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800d3ba:	4b72      	ldr	r3, [pc, #456]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d3bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d3c0:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800d3c4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800d3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d104      	bne.n	800d3d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d3cc:	f7fc fcd4 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800d3d0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800d3d2:	f001 bc2c 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800d3d6:	4b6b      	ldr	r3, [pc, #428]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3e2:	d10b      	bne.n	800d3fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800d3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d3ea:	d107      	bne.n	800d3fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3ec:	f107 0314 	add.w	r3, r7, #20
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7fe fdf9 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3fa:	e047      	b.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800d3fc:	4b61      	ldr	r3, [pc, #388]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d408:	d10b      	bne.n	800d422 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800d40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d410:	d107      	bne.n	800d422 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d412:	f107 0308 	add.w	r3, r7, #8
 800d416:	4618      	mov	r0, r3
 800d418:	f7fe ff52 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d420:	e034      	b.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800d422:	4b58      	ldr	r3, [pc, #352]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f003 0302 	and.w	r3, r3, #2
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	d10d      	bne.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800d42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d430:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d434:	d109      	bne.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d436:	4b53      	ldr	r3, [pc, #332]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	08db      	lsrs	r3, r3, #3
 800d43c:	f003 0303 	and.w	r3, r3, #3
 800d440:	4a51      	ldr	r2, [pc, #324]	@ (800d588 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800d442:	fa22 f303 	lsr.w	r3, r2, r3
 800d446:	637b      	str	r3, [r7, #52]	@ 0x34
 800d448:	e020      	b.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800d44a:	4b4e      	ldr	r3, [pc, #312]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d456:	d106      	bne.n	800d466 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800d458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d45a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d45e:	d102      	bne.n	800d466 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800d460:	4b4a      	ldr	r3, [pc, #296]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800d462:	637b      	str	r3, [r7, #52]	@ 0x34
 800d464:	e012      	b.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800d466:	4b47      	ldr	r3, [pc, #284]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d46c:	f003 0302 	and.w	r3, r3, #2
 800d470:	2b02      	cmp	r3, #2
 800d472:	d107      	bne.n	800d484 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800d474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d476:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800d47a:	d103      	bne.n	800d484 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800d47c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d480:	637b      	str	r3, [r7, #52]	@ 0x34
 800d482:	e003      	b.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800d484:	2300      	movs	r3, #0
 800d486:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d488:	f001 bbd1 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d48c:	f001 bbcf 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800d490:	4b3c      	ldr	r3, [pc, #240]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d492:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d496:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d49a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800d49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d104      	bne.n	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d4a2:	f7fc fc69 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800d4a6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800d4a8:	f001 bbc1 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800d4ac:	4b35      	ldr	r3, [pc, #212]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d4b8:	d10b      	bne.n	800d4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d4c0:	d107      	bne.n	800d4d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4c2:	f107 0314 	add.w	r3, r7, #20
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7fe fd8e 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4d0:	e047      	b.n	800d562 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800d4d2:	4b2c      	ldr	r3, [pc, #176]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d4da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d4de:	d10b      	bne.n	800d4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4e6:	d107      	bne.n	800d4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4e8:	f107 0308 	add.w	r3, r7, #8
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fe fee7 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4f6:	e034      	b.n	800d562 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800d4f8:	4b22      	ldr	r3, [pc, #136]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f003 0302 	and.w	r3, r3, #2
 800d500:	2b02      	cmp	r3, #2
 800d502:	d10d      	bne.n	800d520 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800d504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d506:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d50a:	d109      	bne.n	800d520 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d50c:	4b1d      	ldr	r3, [pc, #116]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	08db      	lsrs	r3, r3, #3
 800d512:	f003 0303 	and.w	r3, r3, #3
 800d516:	4a1c      	ldr	r2, [pc, #112]	@ (800d588 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800d518:	fa22 f303 	lsr.w	r3, r2, r3
 800d51c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d51e:	e020      	b.n	800d562 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800d520:	4b18      	ldr	r3, [pc, #96]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d52c:	d106      	bne.n	800d53c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800d52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d530:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d534:	d102      	bne.n	800d53c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800d536:	4b15      	ldr	r3, [pc, #84]	@ (800d58c <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800d538:	637b      	str	r3, [r7, #52]	@ 0x34
 800d53a:	e012      	b.n	800d562 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800d53c:	4b11      	ldr	r3, [pc, #68]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d53e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d542:	f003 0302 	and.w	r3, r3, #2
 800d546:	2b02      	cmp	r3, #2
 800d548:	d107      	bne.n	800d55a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800d54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d54c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d550:	d103      	bne.n	800d55a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800d552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d556:	637b      	str	r3, [r7, #52]	@ 0x34
 800d558:	e003      	b.n	800d562 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800d55a:	2300      	movs	r3, #0
 800d55c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d55e:	f001 bb66 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d562:	f001 bb64 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800d566:	4b07      	ldr	r3, [pc, #28]	@ (800d584 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800d568:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d56c:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800d570:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800d572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d574:	2b00      	cmp	r3, #0
 800d576:	d10b      	bne.n	800d590 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d578:	f7fc fbfe 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800d57c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800d57e:	f001 bb56 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d582:	bf00      	nop
 800d584:	44020c00 	.word	0x44020c00
 800d588:	03d09000 	.word	0x03d09000
 800d58c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800d590:	4ba1      	ldr	r3, [pc, #644]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d59c:	d10b      	bne.n	800d5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800d59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5a4:	d107      	bne.n	800d5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5a6:	f107 0314 	add.w	r3, r7, #20
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fe fd1c 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5b4:	e047      	b.n	800d646 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800d5b6:	4b98      	ldr	r3, [pc, #608]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d5be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d5c2:	d10b      	bne.n	800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800d5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d5ca:	d107      	bne.n	800d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5cc:	f107 0308 	add.w	r3, r7, #8
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fe fe75 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5da:	e034      	b.n	800d646 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800d5dc:	4b8e      	ldr	r3, [pc, #568]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f003 0302 	and.w	r3, r3, #2
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	d10d      	bne.n	800d604 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800d5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ea:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d5ee:	d109      	bne.n	800d604 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d5f0:	4b89      	ldr	r3, [pc, #548]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	08db      	lsrs	r3, r3, #3
 800d5f6:	f003 0303 	and.w	r3, r3, #3
 800d5fa:	4a88      	ldr	r2, [pc, #544]	@ (800d81c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800d5fc:	fa22 f303 	lsr.w	r3, r2, r3
 800d600:	637b      	str	r3, [r7, #52]	@ 0x34
 800d602:	e020      	b.n	800d646 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800d604:	4b84      	ldr	r3, [pc, #528]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d60c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d610:	d106      	bne.n	800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800d612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d618:	d102      	bne.n	800d620 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800d61a:	4b81      	ldr	r3, [pc, #516]	@ (800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800d61c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d61e:	e012      	b.n	800d646 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800d620:	4b7d      	ldr	r3, [pc, #500]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d626:	f003 0302 	and.w	r3, r3, #2
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d107      	bne.n	800d63e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800d62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d630:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800d634:	d103      	bne.n	800d63e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800d636:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d63a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d63c:	e003      	b.n	800d646 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800d63e:	2300      	movs	r3, #0
 800d640:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d642:	f001 baf4 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d646:	f001 baf2 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800d64a:	4b73      	ldr	r3, [pc, #460]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d64c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d650:	f003 0307 	and.w	r3, r3, #7
 800d654:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800d656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d104      	bne.n	800d666 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d65c:	f7fc fb8c 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800d660:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800d662:	f001 bae4 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800d666:	4b6c      	ldr	r3, [pc, #432]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d66e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d672:	d10a      	bne.n	800d68a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800d674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d676:	2b01      	cmp	r3, #1
 800d678:	d107      	bne.n	800d68a <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d67a:	f107 0314 	add.w	r3, r7, #20
 800d67e:	4618      	mov	r0, r3
 800d680:	f7fe fcb2 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	637b      	str	r3, [r7, #52]	@ 0x34
 800d688:	e043      	b.n	800d712 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800d68a:	4b63      	ldr	r3, [pc, #396]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d696:	d10a      	bne.n	800d6ae <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800d698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d69a:	2b02      	cmp	r3, #2
 800d69c:	d107      	bne.n	800d6ae <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d69e:	f107 0308 	add.w	r3, r7, #8
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7fe fe0c 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6ac:	e031      	b.n	800d712 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800d6ae:	4b5a      	ldr	r3, [pc, #360]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f003 0302 	and.w	r3, r3, #2
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	d10c      	bne.n	800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800d6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6bc:	2b03      	cmp	r3, #3
 800d6be:	d109      	bne.n	800d6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d6c0:	4b55      	ldr	r3, [pc, #340]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	08db      	lsrs	r3, r3, #3
 800d6c6:	f003 0303 	and.w	r3, r3, #3
 800d6ca:	4a54      	ldr	r2, [pc, #336]	@ (800d81c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800d6cc:	fa22 f303 	lsr.w	r3, r2, r3
 800d6d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6d2:	e01e      	b.n	800d712 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800d6d4:	4b50      	ldr	r3, [pc, #320]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d6dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6e0:	d105      	bne.n	800d6ee <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e4:	2b04      	cmp	r3, #4
 800d6e6:	d102      	bne.n	800d6ee <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800d6e8:	4b4d      	ldr	r3, [pc, #308]	@ (800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800d6ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6ec:	e011      	b.n	800d712 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800d6ee:	4b4a      	ldr	r3, [pc, #296]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d6f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d6f4:	f003 0302 	and.w	r3, r3, #2
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	d106      	bne.n	800d70a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800d6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6fe:	2b05      	cmp	r3, #5
 800d700:	d103      	bne.n	800d70a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800d702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d706:	637b      	str	r3, [r7, #52]	@ 0x34
 800d708:	e003      	b.n	800d712 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800d70a:	2300      	movs	r3, #0
 800d70c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d70e:	f001 ba8e 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d712:	f001 ba8c 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800d716:	4b40      	ldr	r3, [pc, #256]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d718:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d71c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d720:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800d722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d724:	2b00      	cmp	r3, #0
 800d726:	d104      	bne.n	800d732 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d728:	f7fc fb26 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800d72c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800d72e:	f001 ba7e 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800d732:	4b39      	ldr	r3, [pc, #228]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d73a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d73e:	d10a      	bne.n	800d756 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800d740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d742:	2b10      	cmp	r3, #16
 800d744:	d107      	bne.n	800d756 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d746:	f107 0314 	add.w	r3, r7, #20
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe fc4c 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	637b      	str	r3, [r7, #52]	@ 0x34
 800d754:	e043      	b.n	800d7de <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800d756:	4b30      	ldr	r3, [pc, #192]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d75e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d762:	d10a      	bne.n	800d77a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800d764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d766:	2b20      	cmp	r3, #32
 800d768:	d107      	bne.n	800d77a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d76a:	f107 0308 	add.w	r3, r7, #8
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fe fda6 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	637b      	str	r3, [r7, #52]	@ 0x34
 800d778:	e031      	b.n	800d7de <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800d77a:	4b27      	ldr	r3, [pc, #156]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f003 0302 	and.w	r3, r3, #2
 800d782:	2b02      	cmp	r3, #2
 800d784:	d10c      	bne.n	800d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800d786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d788:	2b30      	cmp	r3, #48	@ 0x30
 800d78a:	d109      	bne.n	800d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d78c:	4b22      	ldr	r3, [pc, #136]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	08db      	lsrs	r3, r3, #3
 800d792:	f003 0303 	and.w	r3, r3, #3
 800d796:	4a21      	ldr	r2, [pc, #132]	@ (800d81c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800d798:	fa22 f303 	lsr.w	r3, r2, r3
 800d79c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d79e:	e01e      	b.n	800d7de <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800d7a0:	4b1d      	ldr	r3, [pc, #116]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d7a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7ac:	d105      	bne.n	800d7ba <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800d7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b0:	2b40      	cmp	r3, #64	@ 0x40
 800d7b2:	d102      	bne.n	800d7ba <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800d7b4:	4b1a      	ldr	r3, [pc, #104]	@ (800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800d7b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7b8:	e011      	b.n	800d7de <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800d7ba:	4b17      	ldr	r3, [pc, #92]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d7bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d7c0:	f003 0302 	and.w	r3, r3, #2
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d106      	bne.n	800d7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800d7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ca:	2b50      	cmp	r3, #80	@ 0x50
 800d7cc:	d103      	bne.n	800d7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800d7ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7d4:	e003      	b.n	800d7de <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7da:	f001 ba28 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d7de:	f001 ba26 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800d7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800d7e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d7e8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d7ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d104      	bne.n	800d7fe <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800d7f4:	f7fc faec 	bl	8009dd0 <HAL_RCC_GetPCLK3Freq>
 800d7f8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800d7fa:	f001 ba18 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800d7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d800:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d804:	d10e      	bne.n	800d824 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d806:	f107 0314 	add.w	r3, r7, #20
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7fe fbec 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d814:	f001 ba0b 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d818:	44020c00 	.word	0x44020c00
 800d81c:	03d09000 	.word	0x03d09000
 800d820:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800d824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d826:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d82a:	d108      	bne.n	800d83e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d82c:	f107 0308 	add.w	r3, r7, #8
 800d830:	4618      	mov	r0, r3
 800d832:	f7fe fd45 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d83a:	f001 b9f8 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800d83e:	4ba4      	ldr	r3, [pc, #656]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f003 0302 	and.w	r3, r3, #2
 800d846:	2b02      	cmp	r3, #2
 800d848:	d10d      	bne.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800d84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d850:	d109      	bne.n	800d866 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d852:	4b9f      	ldr	r3, [pc, #636]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	08db      	lsrs	r3, r3, #3
 800d858:	f003 0303 	and.w	r3, r3, #3
 800d85c:	4a9d      	ldr	r2, [pc, #628]	@ (800dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800d85e:	fa22 f303 	lsr.w	r3, r2, r3
 800d862:	637b      	str	r3, [r7, #52]	@ 0x34
 800d864:	e020      	b.n	800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800d866:	4b9a      	ldr	r3, [pc, #616]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d86e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d872:	d106      	bne.n	800d882 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800d874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d876:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d87a:	d102      	bne.n	800d882 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800d87c:	4b96      	ldr	r3, [pc, #600]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800d87e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d880:	e012      	b.n	800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800d882:	4b93      	ldr	r3, [pc, #588]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d888:	f003 0302 	and.w	r3, r3, #2
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	d107      	bne.n	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800d890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d892:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d896:	d103      	bne.n	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800d898:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d89c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d89e:	e003      	b.n	800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8a4:	f001 b9c3 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d8a8:	f001 b9c1 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800d8ac:	4b88      	ldr	r3, [pc, #544]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d8ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d8b2:	f003 0307 	and.w	r3, r3, #7
 800d8b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d104      	bne.n	800d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800d8be:	f7fc fa3f 	bl	8009d40 <HAL_RCC_GetHCLKFreq>
 800d8c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800d8c4:	f001 b9b3 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d104      	bne.n	800d8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800d8ce:	f7fc f90b 	bl	8009ae8 <HAL_RCC_GetSysClockFreq>
 800d8d2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800d8d4:	f001 b9ab 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8da:	2b02      	cmp	r3, #2
 800d8dc:	d108      	bne.n	800d8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d8de:	f107 0314 	add.w	r3, r7, #20
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fe fb80 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d8ec:	f001 b99f 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800d8f0:	4b77      	ldr	r3, [pc, #476]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d8fc:	d105      	bne.n	800d90a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d900:	2b03      	cmp	r3, #3
 800d902:	d102      	bne.n	800d90a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800d904:	4b75      	ldr	r3, [pc, #468]	@ (800dadc <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800d906:	637b      	str	r3, [r7, #52]	@ 0x34
 800d908:	e023      	b.n	800d952 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800d90a:	4b71      	ldr	r3, [pc, #452]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f003 0302 	and.w	r3, r3, #2
 800d912:	2b02      	cmp	r3, #2
 800d914:	d10c      	bne.n	800d930 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800d916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d918:	2b04      	cmp	r3, #4
 800d91a:	d109      	bne.n	800d930 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d91c:	4b6c      	ldr	r3, [pc, #432]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	08db      	lsrs	r3, r3, #3
 800d922:	f003 0303 	and.w	r3, r3, #3
 800d926:	4a6b      	ldr	r2, [pc, #428]	@ (800dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800d928:	fa22 f303 	lsr.w	r3, r2, r3
 800d92c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d92e:	e010      	b.n	800d952 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800d930:	4b67      	ldr	r3, [pc, #412]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d93c:	d105      	bne.n	800d94a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800d93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d940:	2b05      	cmp	r3, #5
 800d942:	d102      	bne.n	800d94a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800d944:	4b64      	ldr	r3, [pc, #400]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800d946:	637b      	str	r3, [r7, #52]	@ 0x34
 800d948:	e003      	b.n	800d952 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800d94a:	2300      	movs	r3, #0
 800d94c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d94e:	f001 b96e 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d952:	f001 b96c 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800d956:	4b5e      	ldr	r3, [pc, #376]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d95c:	f003 0308 	and.w	r3, r3, #8
 800d960:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800d962:	4b5b      	ldr	r3, [pc, #364]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d968:	f003 0302 	and.w	r3, r3, #2
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d106      	bne.n	800d97e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800d970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d972:	2b00      	cmp	r3, #0
 800d974:	d103      	bne.n	800d97e <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800d976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d97a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d97c:	e012      	b.n	800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800d97e:	4b54      	ldr	r3, [pc, #336]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d988:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d98c:	d106      	bne.n	800d99c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800d98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d990:	2b08      	cmp	r3, #8
 800d992:	d103      	bne.n	800d99c <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800d994:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d998:	637b      	str	r3, [r7, #52]	@ 0x34
 800d99a:	e003      	b.n	800d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800d99c:	2300      	movs	r3, #0
 800d99e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800d9a0:	f001 b945 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800d9a4:	f001 b943 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800d9a8:	4b49      	ldr	r3, [pc, #292]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d9aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d9ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d9b2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800d9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d104      	bne.n	800d9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800d9ba:	f7fc f9dd 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800d9be:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800d9c0:	f001 b935 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9ca:	d108      	bne.n	800d9de <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9cc:	f107 0308 	add.w	r3, r7, #8
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7fe fc75 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d9da:	f001 b928 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800d9de:	4b3c      	ldr	r3, [pc, #240]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f003 0302 	and.w	r3, r3, #2
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	d10d      	bne.n	800da06 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d9f0:	d109      	bne.n	800da06 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d9f2:	4b37      	ldr	r3, [pc, #220]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	08db      	lsrs	r3, r3, #3
 800d9f8:	f003 0303 	and.w	r3, r3, #3
 800d9fc:	4a35      	ldr	r2, [pc, #212]	@ (800dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800d9fe:	fa22 f303 	lsr.w	r3, r2, r3
 800da02:	637b      	str	r3, [r7, #52]	@ 0x34
 800da04:	e011      	b.n	800da2a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800da06:	4b32      	ldr	r3, [pc, #200]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da12:	d106      	bne.n	800da22 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800da14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800da1a:	d102      	bne.n	800da22 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800da1c:	4b2e      	ldr	r3, [pc, #184]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800da1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800da20:	e003      	b.n	800da2a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800da22:	2300      	movs	r3, #0
 800da24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da26:	f001 b902 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800da2a:	f001 b900 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800da2e:	4b28      	ldr	r3, [pc, #160]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800da30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800da34:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800da38:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800da3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d104      	bne.n	800da4a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800da40:	f7fc f99a 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800da44:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800da46:	f001 b8f2 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800da4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800da50:	d108      	bne.n	800da64 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da52:	f107 0308 	add.w	r3, r7, #8
 800da56:	4618      	mov	r0, r3
 800da58:	f7fe fc32 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800da60:	f001 b8e5 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800da64:	4b1a      	ldr	r3, [pc, #104]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f003 0302 	and.w	r3, r3, #2
 800da6c:	2b02      	cmp	r3, #2
 800da6e:	d10d      	bne.n	800da8c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800da70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da72:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800da76:	d109      	bne.n	800da8c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800da78:	4b15      	ldr	r3, [pc, #84]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	08db      	lsrs	r3, r3, #3
 800da7e:	f003 0303 	and.w	r3, r3, #3
 800da82:	4a14      	ldr	r2, [pc, #80]	@ (800dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800da84:	fa22 f303 	lsr.w	r3, r2, r3
 800da88:	637b      	str	r3, [r7, #52]	@ 0x34
 800da8a:	e011      	b.n	800dab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800da8c:	4b10      	ldr	r3, [pc, #64]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da98:	d106      	bne.n	800daa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800da9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da9c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800daa0:	d102      	bne.n	800daa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800daa2:	4b0d      	ldr	r3, [pc, #52]	@ (800dad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800daa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800daa6:	e003      	b.n	800dab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800daa8:	2300      	movs	r3, #0
 800daaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800daac:	f001 b8bf 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dab0:	f001 b8bd 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800dab4:	4b06      	ldr	r3, [pc, #24]	@ (800dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800dab6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800daba:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800dabe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800dac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d10c      	bne.n	800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800dac6:	f7fc f983 	bl	8009dd0 <HAL_RCC_GetPCLK3Freq>
 800daca:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800dacc:	f001 b8af 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dad0:	44020c00 	.word	0x44020c00
 800dad4:	03d09000 	.word	0x03d09000
 800dad8:	003d0900 	.word	0x003d0900
 800dadc:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800dae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dae6:	d108      	bne.n	800dafa <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dae8:	f107 0308 	add.w	r3, r7, #8
 800daec:	4618      	mov	r0, r3
 800daee:	f7fe fbe7 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800daf6:	f001 b89a 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800dafa:	4b9f      	ldr	r3, [pc, #636]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f003 0302 	and.w	r3, r3, #2
 800db02:	2b02      	cmp	r3, #2
 800db04:	d10d      	bne.n	800db22 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800db06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800db0c:	d109      	bne.n	800db22 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800db0e:	4b9a      	ldr	r3, [pc, #616]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	08db      	lsrs	r3, r3, #3
 800db14:	f003 0303 	and.w	r3, r3, #3
 800db18:	4a98      	ldr	r2, [pc, #608]	@ (800dd7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800db1a:	fa22 f303 	lsr.w	r3, r2, r3
 800db1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800db20:	e011      	b.n	800db46 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800db22:	4b95      	ldr	r3, [pc, #596]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800db2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db2e:	d106      	bne.n	800db3e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800db30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800db36:	d102      	bne.n	800db3e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800db38:	4b91      	ldr	r3, [pc, #580]	@ (800dd80 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800db3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800db3c:	e003      	b.n	800db46 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800db3e:	2300      	movs	r3, #0
 800db40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db42:	f001 b874 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800db46:	f001 b872 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800db4a:	4b8b      	ldr	r3, [pc, #556]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800db4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800db50:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800db54:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800db56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d104      	bne.n	800db66 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800db5c:	f7fc f938 	bl	8009dd0 <HAL_RCC_GetPCLK3Freq>
 800db60:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800db62:	f001 b864 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800db66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db6c:	d108      	bne.n	800db80 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db6e:	f107 0308 	add.w	r3, r7, #8
 800db72:	4618      	mov	r0, r3
 800db74:	f7fe fba4 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800db7c:	f001 b857 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800db80:	4b7d      	ldr	r3, [pc, #500]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f003 0302 	and.w	r3, r3, #2
 800db88:	2b02      	cmp	r3, #2
 800db8a:	d10d      	bne.n	800dba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800db8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800db92:	d109      	bne.n	800dba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800db94:	4b78      	ldr	r3, [pc, #480]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	08db      	lsrs	r3, r3, #3
 800db9a:	f003 0303 	and.w	r3, r3, #3
 800db9e:	4a77      	ldr	r2, [pc, #476]	@ (800dd7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800dba0:	fa22 f303 	lsr.w	r3, r2, r3
 800dba4:	637b      	str	r3, [r7, #52]	@ 0x34
 800dba6:	e011      	b.n	800dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800dba8:	4b73      	ldr	r3, [pc, #460]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dbb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbb4:	d106      	bne.n	800dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800dbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800dbbc:	d102      	bne.n	800dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800dbbe:	4b70      	ldr	r3, [pc, #448]	@ (800dd80 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800dbc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbc2:	e003      	b.n	800dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dbc8:	f001 b831 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dbcc:	f001 b82f 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800dbd0:	4b69      	ldr	r3, [pc, #420]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dbd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dbd6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800dbda:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800dbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d104      	bne.n	800dbec <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800dbe2:	f7fc f8c9 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800dbe6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800dbe8:	f001 b821 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800dbec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dbf2:	d108      	bne.n	800dc06 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbf4:	f107 0308 	add.w	r3, r7, #8
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fe fb61 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc02:	f001 b814 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800dc06:	4b5c      	ldr	r3, [pc, #368]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f003 0302 	and.w	r3, r3, #2
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d10e      	bne.n	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800dc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc18:	d10a      	bne.n	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dc1a:	4b57      	ldr	r3, [pc, #348]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	08db      	lsrs	r3, r3, #3
 800dc20:	f003 0303 	and.w	r3, r3, #3
 800dc24:	4a55      	ldr	r2, [pc, #340]	@ (800dd7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800dc26:	fa22 f303 	lsr.w	r3, r2, r3
 800dc2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc2c:	f000 bfff 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800dc30:	2300      	movs	r3, #0
 800dc32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800dc34:	f000 bffb 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800dc38:	4b4f      	ldr	r3, [pc, #316]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dc3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800dc3e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dc42:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc46:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800dc4a:	d056      	beq.n	800dcfa <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800dc4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800dc52:	f200 808b 	bhi.w	800dd6c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800dc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc5c:	d03e      	beq.n	800dcdc <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800dc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc64:	f200 8082 	bhi.w	800dd6c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800dc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dc6e:	d027      	beq.n	800dcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800dc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dc76:	d879      	bhi.n	800dd6c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800dc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc7e:	d017      	beq.n	800dcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800dc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc86:	d871      	bhi.n	800dd6c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800dc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d004      	beq.n	800dc98 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800dc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc94:	d004      	beq.n	800dca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800dc96:	e069      	b.n	800dd6c <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800dc98:	f7fc f89a 	bl	8009dd0 <HAL_RCC_GetPCLK3Freq>
 800dc9c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800dc9e:	e068      	b.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dca0:	f107 0314 	add.w	r3, r7, #20
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7fe f99f 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800dcae:	e060      	b.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcb0:	f107 0308 	add.w	r3, r7, #8
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fe fb03 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800dcbe:	e058      	b.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800dcc0:	4b2d      	ldr	r3, [pc, #180]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dcc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dcc6:	f003 0302 	and.w	r3, r3, #2
 800dcca:	2b02      	cmp	r3, #2
 800dccc:	d103      	bne.n	800dcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800dcce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dcd2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800dcd4:	e04d      	b.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800dcda:	e04a      	b.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800dcdc:	4b26      	ldr	r3, [pc, #152]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dcde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800dce2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dce6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dcea:	d103      	bne.n	800dcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800dcec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800dcf0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800dcf2:	e03e      	b.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800dcf8:	e03b      	b.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dcfa:	4b1f      	ldr	r3, [pc, #124]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dcfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800dd00:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800dd04:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dd06:	4b1c      	ldr	r3, [pc, #112]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f003 0302 	and.w	r3, r3, #2
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	d10c      	bne.n	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800dd12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d109      	bne.n	800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dd18:	4b17      	ldr	r3, [pc, #92]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	08db      	lsrs	r3, r3, #3
 800dd1e:	f003 0303 	and.w	r3, r3, #3
 800dd22:	4a16      	ldr	r2, [pc, #88]	@ (800dd7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800dd24:	fa22 f303 	lsr.w	r3, r2, r3
 800dd28:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd2a:	e01e      	b.n	800dd6a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dd2c:	4b12      	ldr	r3, [pc, #72]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dd34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd38:	d106      	bne.n	800dd48 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800dd3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd40:	d102      	bne.n	800dd48 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800dd42:	4b0f      	ldr	r3, [pc, #60]	@ (800dd80 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800dd44:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd46:	e010      	b.n	800dd6a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dd48:	4b0b      	ldr	r3, [pc, #44]	@ (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dd54:	d106      	bne.n	800dd64 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800dd56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dd5c:	d102      	bne.n	800dd64 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800dd5e:	4b09      	ldr	r3, [pc, #36]	@ (800dd84 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800dd60:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd62:	e002      	b.n	800dd6a <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800dd64:	2300      	movs	r3, #0
 800dd66:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800dd68:	e003      	b.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800dd6a:	e002      	b.n	800dd72 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800dd70:	bf00      	nop
          }
        }
        break;
 800dd72:	f000 bf5c 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800dd76:	bf00      	nop
 800dd78:	44020c00 	.word	0x44020c00
 800dd7c:	03d09000 	.word	0x03d09000
 800dd80:	003d0900 	.word	0x003d0900
 800dd84:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800dd88:	4b9e      	ldr	r3, [pc, #632]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800dd8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800dd8e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800dd92:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd96:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800dd9a:	d056      	beq.n	800de4a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800dd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd9e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800dda2:	f200 808b 	bhi.w	800debc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800dda6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ddac:	d03e      	beq.n	800de2c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800ddae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ddb4:	f200 8082 	bhi.w	800debc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800ddb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ddbe:	d027      	beq.n	800de10 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800ddc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ddc6:	d879      	bhi.n	800debc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800ddc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddce:	d017      	beq.n	800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800ddd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ddd6:	d871      	bhi.n	800debc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800ddd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d004      	beq.n	800dde8 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800ddde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dde4:	d004      	beq.n	800ddf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800dde6:	e069      	b.n	800debc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800dde8:	f7fb ffc6 	bl	8009d78 <HAL_RCC_GetPCLK1Freq>
 800ddec:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ddee:	e068      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddf0:	f107 0314 	add.w	r3, r7, #20
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fe f8f7 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ddfe:	e060      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de00:	f107 0308 	add.w	r3, r7, #8
 800de04:	4618      	mov	r0, r3
 800de06:	f7fe fa5b 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800de0e:	e058      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800de10:	4b7c      	ldr	r3, [pc, #496]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800de12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800de16:	f003 0302 	and.w	r3, r3, #2
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	d103      	bne.n	800de26 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800de1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800de22:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800de24:	e04d      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800de26:	2300      	movs	r3, #0
 800de28:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800de2a:	e04a      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800de2c:	4b75      	ldr	r3, [pc, #468]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800de2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800de32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de3a:	d103      	bne.n	800de44 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800de3c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800de40:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800de42:	e03e      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800de44:	2300      	movs	r3, #0
 800de46:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800de48:	e03b      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800de4a:	4b6e      	ldr	r3, [pc, #440]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800de4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800de50:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800de54:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800de56:	4b6b      	ldr	r3, [pc, #428]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f003 0302 	and.w	r3, r3, #2
 800de5e:	2b02      	cmp	r3, #2
 800de60:	d10c      	bne.n	800de7c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800de62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de64:	2b00      	cmp	r3, #0
 800de66:	d109      	bne.n	800de7c <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800de68:	4b66      	ldr	r3, [pc, #408]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	08db      	lsrs	r3, r3, #3
 800de6e:	f003 0303 	and.w	r3, r3, #3
 800de72:	4a65      	ldr	r2, [pc, #404]	@ (800e008 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800de74:	fa22 f303 	lsr.w	r3, r2, r3
 800de78:	637b      	str	r3, [r7, #52]	@ 0x34
 800de7a:	e01e      	b.n	800deba <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800de7c:	4b61      	ldr	r3, [pc, #388]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800de84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de88:	d106      	bne.n	800de98 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800de8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de90:	d102      	bne.n	800de98 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800de92:	4b5e      	ldr	r3, [pc, #376]	@ (800e00c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800de94:	637b      	str	r3, [r7, #52]	@ 0x34
 800de96:	e010      	b.n	800deba <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800de98:	4b5a      	ldr	r3, [pc, #360]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dea0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dea4:	d106      	bne.n	800deb4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800dea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dea8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800deac:	d102      	bne.n	800deb4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800deae:	4b58      	ldr	r3, [pc, #352]	@ (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800deb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800deb2:	e002      	b.n	800deba <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800deb4:	2300      	movs	r3, #0
 800deb6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800deb8:	e003      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800deba:	e002      	b.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800debc:	2300      	movs	r3, #0
 800debe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800dec0:	bf00      	nop
          }
        }
        break;
 800dec2:	f000 beb4 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800dec6:	4b4f      	ldr	r3, [pc, #316]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800dec8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800decc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ded0:	633b      	str	r3, [r7, #48]	@ 0x30
 800ded2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ded8:	d056      	beq.n	800df88 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800deda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dedc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dee0:	f200 808b 	bhi.w	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800dee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800deea:	d03e      	beq.n	800df6a <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800deec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800def2:	f200 8082 	bhi.w	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800def6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800defc:	d027      	beq.n	800df4e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800defe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800df04:	d879      	bhi.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800df06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df0c:	d017      	beq.n	800df3e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800df0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df14:	d871      	bhi.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800df16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d004      	beq.n	800df26 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800df1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df22:	d004      	beq.n	800df2e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800df24:	e069      	b.n	800dffa <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800df26:	f7fb ff53 	bl	8009dd0 <HAL_RCC_GetPCLK3Freq>
 800df2a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800df2c:	e068      	b.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df2e:	f107 0314 	add.w	r3, r7, #20
 800df32:	4618      	mov	r0, r3
 800df34:	f7fe f858 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800df3c:	e060      	b.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df3e:	f107 0308 	add.w	r3, r7, #8
 800df42:	4618      	mov	r0, r3
 800df44:	f7fe f9bc 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800df4c:	e058      	b.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800df4e:	4b2d      	ldr	r3, [pc, #180]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800df50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df54:	f003 0302 	and.w	r3, r3, #2
 800df58:	2b02      	cmp	r3, #2
 800df5a:	d103      	bne.n	800df64 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800df5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800df60:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800df62:	e04d      	b.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800df64:	2300      	movs	r3, #0
 800df66:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800df68:	e04a      	b.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800df6a:	4b26      	ldr	r3, [pc, #152]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800df6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800df70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800df78:	d103      	bne.n	800df82 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800df7a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800df7e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800df80:	e03e      	b.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800df82:	2300      	movs	r3, #0
 800df84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800df86:	e03b      	b.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800df88:	4b1e      	ldr	r3, [pc, #120]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800df8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800df8e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800df92:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800df94:	4b1b      	ldr	r3, [pc, #108]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f003 0302 	and.w	r3, r3, #2
 800df9c:	2b02      	cmp	r3, #2
 800df9e:	d10c      	bne.n	800dfba <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800dfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d109      	bne.n	800dfba <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800dfa6:	4b17      	ldr	r3, [pc, #92]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	08db      	lsrs	r3, r3, #3
 800dfac:	f003 0303 	and.w	r3, r3, #3
 800dfb0:	4a15      	ldr	r2, [pc, #84]	@ (800e008 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800dfb2:	fa22 f303 	lsr.w	r3, r2, r3
 800dfb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfb8:	e01e      	b.n	800dff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dfba:	4b12      	ldr	r3, [pc, #72]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dfc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dfc6:	d106      	bne.n	800dfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800dfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfce:	d102      	bne.n	800dfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800dfd0:	4b0e      	ldr	r3, [pc, #56]	@ (800e00c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800dfd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfd4:	e010      	b.n	800dff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dfd6:	4b0b      	ldr	r3, [pc, #44]	@ (800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dfde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dfe2:	d106      	bne.n	800dff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800dfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dfea:	d102      	bne.n	800dff2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800dfec:	4b08      	ldr	r3, [pc, #32]	@ (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800dfee:	637b      	str	r3, [r7, #52]	@ 0x34
 800dff0:	e002      	b.n	800dff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800dff2:	2300      	movs	r3, #0
 800dff4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800dff6:	e003      	b.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800dff8:	e002      	b.n	800e000 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800dffa:	2300      	movs	r3, #0
 800dffc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800dffe:	bf00      	nop
          }
        }
        break;
 800e000:	f000 be15 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e004:	44020c00 	.word	0x44020c00
 800e008:	03d09000 	.word	0x03d09000
 800e00c:	003d0900 	.word	0x003d0900
 800e010:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800e014:	4b9e      	ldr	r3, [pc, #632]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e016:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e01a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800e01e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e022:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800e026:	d056      	beq.n	800e0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800e028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e02a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800e02e:	f200 808b 	bhi.w	800e148 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800e032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e038:	d03e      	beq.n	800e0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800e03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e03c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e040:	f200 8082 	bhi.w	800e148 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800e044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e046:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e04a:	d027      	beq.n	800e09c <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800e04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e04e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e052:	d879      	bhi.n	800e148 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800e054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e056:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e05a:	d017      	beq.n	800e08c <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800e05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e062:	d871      	bhi.n	800e148 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800e064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e066:	2b00      	cmp	r3, #0
 800e068:	d004      	beq.n	800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800e06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e06c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e070:	d004      	beq.n	800e07c <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800e072:	e069      	b.n	800e148 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800e074:	f7fb feac 	bl	8009dd0 <HAL_RCC_GetPCLK3Freq>
 800e078:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800e07a:	e068      	b.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e07c:	f107 0314 	add.w	r3, r7, #20
 800e080:	4618      	mov	r0, r3
 800e082:	f7fd ffb1 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e08a:	e060      	b.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e08c:	f107 0308 	add.w	r3, r7, #8
 800e090:	4618      	mov	r0, r3
 800e092:	f7fe f915 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e09a:	e058      	b.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e09c:	4b7c      	ldr	r3, [pc, #496]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e09e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e0a2:	f003 0302 	and.w	r3, r3, #2
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	d103      	bne.n	800e0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800e0aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e0ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e0b0:	e04d      	b.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e0b6:	e04a      	b.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800e0b8:	4b75      	ldr	r3, [pc, #468]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e0ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e0be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e0c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e0c6:	d103      	bne.n	800e0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800e0c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e0cc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e0ce:	e03e      	b.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e0d4:	e03b      	b.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e0d6:	4b6e      	ldr	r3, [pc, #440]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e0d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e0dc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e0e2:	4b6b      	ldr	r3, [pc, #428]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f003 0302 	and.w	r3, r3, #2
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	d10c      	bne.n	800e108 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800e0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d109      	bne.n	800e108 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e0f4:	4b66      	ldr	r3, [pc, #408]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	08db      	lsrs	r3, r3, #3
 800e0fa:	f003 0303 	and.w	r3, r3, #3
 800e0fe:	4a65      	ldr	r2, [pc, #404]	@ (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800e100:	fa22 f303 	lsr.w	r3, r2, r3
 800e104:	637b      	str	r3, [r7, #52]	@ 0x34
 800e106:	e01e      	b.n	800e146 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e108:	4b61      	ldr	r3, [pc, #388]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e114:	d106      	bne.n	800e124 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800e116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e11c:	d102      	bne.n	800e124 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e11e:	4b5e      	ldr	r3, [pc, #376]	@ (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800e120:	637b      	str	r3, [r7, #52]	@ 0x34
 800e122:	e010      	b.n	800e146 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e124:	4b5a      	ldr	r3, [pc, #360]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e12c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e130:	d106      	bne.n	800e140 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800e132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e138:	d102      	bne.n	800e140 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e13a:	4b58      	ldr	r3, [pc, #352]	@ (800e29c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800e13c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e13e:	e002      	b.n	800e146 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e140:	2300      	movs	r3, #0
 800e142:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e144:	e003      	b.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800e146:	e002      	b.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800e148:	2300      	movs	r3, #0
 800e14a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e14c:	bf00      	nop
          }
        }
        break;
 800e14e:	f000 bd6e 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800e152:	4b4f      	ldr	r3, [pc, #316]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e154:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e158:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800e15c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e160:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e164:	d056      	beq.n	800e214 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800e166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e168:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800e16c:	f200 808b 	bhi.w	800e286 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800e170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e172:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e176:	d03e      	beq.n	800e1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800e178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e17e:	f200 8082 	bhi.w	800e286 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800e182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e184:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e188:	d027      	beq.n	800e1da <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800e18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e18c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e190:	d879      	bhi.n	800e286 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800e192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e194:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e198:	d017      	beq.n	800e1ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800e19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e19c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e1a0:	d871      	bhi.n	800e286 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d004      	beq.n	800e1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e1ae:	d004      	beq.n	800e1ba <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800e1b0:	e069      	b.n	800e286 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800e1b2:	f7fb fe0d 	bl	8009dd0 <HAL_RCC_GetPCLK3Freq>
 800e1b6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800e1b8:	e068      	b.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1ba:	f107 0314 	add.w	r3, r7, #20
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fd ff12 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e1c8:	e060      	b.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1ca:	f107 0308 	add.w	r3, r7, #8
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7fe f876 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e1d8:	e058      	b.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e1da:	4b2d      	ldr	r3, [pc, #180]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e1dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e1e0:	f003 0302 	and.w	r3, r3, #2
 800e1e4:	2b02      	cmp	r3, #2
 800e1e6:	d103      	bne.n	800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800e1e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e1ec:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e1ee:	e04d      	b.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e1f4:	e04a      	b.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800e1f6:	4b26      	ldr	r3, [pc, #152]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e1f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e1fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e200:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e204:	d103      	bne.n	800e20e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800e206:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e20a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e20c:	e03e      	b.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800e20e:	2300      	movs	r3, #0
 800e210:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e212:	e03b      	b.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e214:	4b1e      	ldr	r3, [pc, #120]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e21a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e21e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e220:	4b1b      	ldr	r3, [pc, #108]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f003 0302 	and.w	r3, r3, #2
 800e228:	2b02      	cmp	r3, #2
 800e22a:	d10c      	bne.n	800e246 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800e22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d109      	bne.n	800e246 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e232:	4b17      	ldr	r3, [pc, #92]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	08db      	lsrs	r3, r3, #3
 800e238:	f003 0303 	and.w	r3, r3, #3
 800e23c:	4a15      	ldr	r2, [pc, #84]	@ (800e294 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800e23e:	fa22 f303 	lsr.w	r3, r2, r3
 800e242:	637b      	str	r3, [r7, #52]	@ 0x34
 800e244:	e01e      	b.n	800e284 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e246:	4b12      	ldr	r3, [pc, #72]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e24e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e252:	d106      	bne.n	800e262 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800e254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e25a:	d102      	bne.n	800e262 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e25c:	4b0e      	ldr	r3, [pc, #56]	@ (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800e25e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e260:	e010      	b.n	800e284 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e262:	4b0b      	ldr	r3, [pc, #44]	@ (800e290 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e26a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e26e:	d106      	bne.n	800e27e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800e270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e272:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e276:	d102      	bne.n	800e27e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e278:	4b08      	ldr	r3, [pc, #32]	@ (800e29c <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800e27a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e27c:	e002      	b.n	800e284 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e282:	e003      	b.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800e284:	e002      	b.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800e286:	2300      	movs	r3, #0
 800e288:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e28a:	bf00      	nop
          }
        }
        break;
 800e28c:	f000 bccf 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e290:	44020c00 	.word	0x44020c00
 800e294:	03d09000 	.word	0x03d09000
 800e298:	003d0900 	.word	0x003d0900
 800e29c:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800e2a0:	4b9e      	ldr	r3, [pc, #632]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e2a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e2a6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800e2aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e2b2:	d056      	beq.n	800e362 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800e2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e2ba:	f200 808b 	bhi.w	800e3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800e2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2c4:	d03e      	beq.n	800e344 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800e2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2cc:	f200 8082 	bhi.w	800e3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800e2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e2d6:	d027      	beq.n	800e328 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800e2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e2de:	d879      	bhi.n	800e3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800e2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e2e6:	d017      	beq.n	800e318 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800e2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e2ee:	d871      	bhi.n	800e3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800e2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d004      	beq.n	800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800e2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2fc:	d004      	beq.n	800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800e2fe:	e069      	b.n	800e3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800e300:	f7fb fd66 	bl	8009dd0 <HAL_RCC_GetPCLK3Freq>
 800e304:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800e306:	e068      	b.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e308:	f107 0314 	add.w	r3, r7, #20
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fd fe6b 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e316:	e060      	b.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e318:	f107 0308 	add.w	r3, r7, #8
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fd ffcf 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e326:	e058      	b.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800e328:	4b7c      	ldr	r3, [pc, #496]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e32a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e32e:	f003 0302 	and.w	r3, r3, #2
 800e332:	2b02      	cmp	r3, #2
 800e334:	d103      	bne.n	800e33e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800e336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e33a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e33c:	e04d      	b.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800e33e:	2300      	movs	r3, #0
 800e340:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e342:	e04a      	b.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800e344:	4b75      	ldr	r3, [pc, #468]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e34a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e34e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e352:	d103      	bne.n	800e35c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800e354:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e358:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800e35a:	e03e      	b.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800e35c:	2300      	movs	r3, #0
 800e35e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e360:	e03b      	b.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e362:	4b6e      	ldr	r3, [pc, #440]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e368:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e36c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e36e:	4b6b      	ldr	r3, [pc, #428]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f003 0302 	and.w	r3, r3, #2
 800e376:	2b02      	cmp	r3, #2
 800e378:	d10c      	bne.n	800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800e37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d109      	bne.n	800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e380:	4b66      	ldr	r3, [pc, #408]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	08db      	lsrs	r3, r3, #3
 800e386:	f003 0303 	and.w	r3, r3, #3
 800e38a:	4a65      	ldr	r2, [pc, #404]	@ (800e520 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800e38c:	fa22 f303 	lsr.w	r3, r2, r3
 800e390:	637b      	str	r3, [r7, #52]	@ 0x34
 800e392:	e01e      	b.n	800e3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e394:	4b61      	ldr	r3, [pc, #388]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e39c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3a0:	d106      	bne.n	800e3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800e3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3a8:	d102      	bne.n	800e3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e3aa:	4b5e      	ldr	r3, [pc, #376]	@ (800e524 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800e3ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3ae:	e010      	b.n	800e3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e3b0:	4b5a      	ldr	r3, [pc, #360]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e3bc:	d106      	bne.n	800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800e3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e3c4:	d102      	bne.n	800e3cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e3c6:	4b58      	ldr	r3, [pc, #352]	@ (800e528 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800e3c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3ca:	e002      	b.n	800e3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e3d0:	e003      	b.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800e3d2:	e002      	b.n	800e3da <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e3d8:	bf00      	nop
          }
        }
        break;
 800e3da:	f000 bc28 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e3de:	4b4f      	ldr	r3, [pc, #316]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e3e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e3e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e3e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800e3ea:	4b4c      	ldr	r3, [pc, #304]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e3f6:	d106      	bne.n	800e406 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800e3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d103      	bne.n	800e406 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800e3fe:	4b4a      	ldr	r3, [pc, #296]	@ (800e528 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800e400:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800e402:	f000 bc14 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800e406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e40c:	d108      	bne.n	800e420 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e40e:	f107 0320 	add.w	r3, r7, #32
 800e412:	4618      	mov	r0, r3
 800e414:	f7fd fc7c 	bl	800bd10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e41a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e41c:	f000 bc07 	b.w	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800e420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e426:	d107      	bne.n	800e438 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e428:	f107 0314 	add.w	r3, r7, #20
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fd fddb 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e436:	e3fa      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800e438:	2300      	movs	r3, #0
 800e43a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e43c:	e3f7      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800e43e:	4b37      	ldr	r3, [pc, #220]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e444:	f003 0307 	and.w	r3, r3, #7
 800e448:	633b      	str	r3, [r7, #48]	@ 0x30
 800e44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44c:	2b04      	cmp	r3, #4
 800e44e:	d861      	bhi.n	800e514 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800e450:	a201      	add	r2, pc, #4	@ (adr r2, 800e458 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800e452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e456:	bf00      	nop
 800e458:	0800e46d 	.word	0x0800e46d
 800e45c:	0800e47d 	.word	0x0800e47d
 800e460:	0800e48d 	.word	0x0800e48d
 800e464:	0800e49d 	.word	0x0800e49d
 800e468:	0800e4a3 	.word	0x0800e4a3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e46c:	f107 0320 	add.w	r3, r7, #32
 800e470:	4618      	mov	r0, r3
 800e472:	f7fd fc4d 	bl	800bd10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800e476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e478:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e47a:	e04e      	b.n	800e51a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e47c:	f107 0314 	add.w	r3, r7, #20
 800e480:	4618      	mov	r0, r3
 800e482:	f7fd fdb1 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e48a:	e046      	b.n	800e51a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e48c:	f107 0308 	add.w	r3, r7, #8
 800e490:	4618      	mov	r0, r3
 800e492:	f7fd ff15 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e49a:	e03e      	b.n	800e51a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800e49c:	4b23      	ldr	r3, [pc, #140]	@ (800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800e49e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e4a0:	e03b      	b.n	800e51a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e4a2:	4b1e      	ldr	r3, [pc, #120]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e4a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e4a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e4ae:	4b1b      	ldr	r3, [pc, #108]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f003 0302 	and.w	r3, r3, #2
 800e4b6:	2b02      	cmp	r3, #2
 800e4b8:	d10c      	bne.n	800e4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800e4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d109      	bne.n	800e4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e4c0:	4b16      	ldr	r3, [pc, #88]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	08db      	lsrs	r3, r3, #3
 800e4c6:	f003 0303 	and.w	r3, r3, #3
 800e4ca:	4a15      	ldr	r2, [pc, #84]	@ (800e520 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800e4cc:	fa22 f303 	lsr.w	r3, r2, r3
 800e4d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e4d2:	e01e      	b.n	800e512 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e4d4:	4b11      	ldr	r3, [pc, #68]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e4dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e4e0:	d106      	bne.n	800e4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800e4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4e8:	d102      	bne.n	800e4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e4ea:	4b0e      	ldr	r3, [pc, #56]	@ (800e524 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800e4ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800e4ee:	e010      	b.n	800e512 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800e51c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e4f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e4fc:	d106      	bne.n	800e50c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800e4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e500:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e504:	d102      	bne.n	800e50c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e506:	4b08      	ldr	r3, [pc, #32]	@ (800e528 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800e508:	637b      	str	r3, [r7, #52]	@ 0x34
 800e50a:	e002      	b.n	800e512 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e50c:	2300      	movs	r3, #0
 800e50e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e510:	e003      	b.n	800e51a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800e512:	e002      	b.n	800e51a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800e514:	2300      	movs	r3, #0
 800e516:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e518:	bf00      	nop
          }
        }
        break;
 800e51a:	e388      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e51c:	44020c00 	.word	0x44020c00
 800e520:	03d09000 	.word	0x03d09000
 800e524:	003d0900 	.word	0x003d0900
 800e528:	007a1200 	.word	0x007a1200
 800e52c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800e530:	4ba9      	ldr	r3, [pc, #676]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e53a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e53e:	2b20      	cmp	r3, #32
 800e540:	f200 809a 	bhi.w	800e678 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800e544:	a201      	add	r2, pc, #4	@ (adr r2, 800e54c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800e546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e54a:	bf00      	nop
 800e54c:	0800e5d1 	.word	0x0800e5d1
 800e550:	0800e679 	.word	0x0800e679
 800e554:	0800e679 	.word	0x0800e679
 800e558:	0800e679 	.word	0x0800e679
 800e55c:	0800e679 	.word	0x0800e679
 800e560:	0800e679 	.word	0x0800e679
 800e564:	0800e679 	.word	0x0800e679
 800e568:	0800e679 	.word	0x0800e679
 800e56c:	0800e5e1 	.word	0x0800e5e1
 800e570:	0800e679 	.word	0x0800e679
 800e574:	0800e679 	.word	0x0800e679
 800e578:	0800e679 	.word	0x0800e679
 800e57c:	0800e679 	.word	0x0800e679
 800e580:	0800e679 	.word	0x0800e679
 800e584:	0800e679 	.word	0x0800e679
 800e588:	0800e679 	.word	0x0800e679
 800e58c:	0800e5f1 	.word	0x0800e5f1
 800e590:	0800e679 	.word	0x0800e679
 800e594:	0800e679 	.word	0x0800e679
 800e598:	0800e679 	.word	0x0800e679
 800e59c:	0800e679 	.word	0x0800e679
 800e5a0:	0800e679 	.word	0x0800e679
 800e5a4:	0800e679 	.word	0x0800e679
 800e5a8:	0800e679 	.word	0x0800e679
 800e5ac:	0800e601 	.word	0x0800e601
 800e5b0:	0800e679 	.word	0x0800e679
 800e5b4:	0800e679 	.word	0x0800e679
 800e5b8:	0800e679 	.word	0x0800e679
 800e5bc:	0800e679 	.word	0x0800e679
 800e5c0:	0800e679 	.word	0x0800e679
 800e5c4:	0800e679 	.word	0x0800e679
 800e5c8:	0800e679 	.word	0x0800e679
 800e5cc:	0800e607 	.word	0x0800e607
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e5d0:	f107 0320 	add.w	r3, r7, #32
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7fd fb9b 	bl	800bd10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800e5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e5de:	e04e      	b.n	800e67e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5e0:	f107 0314 	add.w	r3, r7, #20
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fd fcff 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e5ee:	e046      	b.n	800e67e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5f0:	f107 0308 	add.w	r3, r7, #8
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7fd fe63 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e5fe:	e03e      	b.n	800e67e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800e600:	4b76      	ldr	r3, [pc, #472]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800e602:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e604:	e03b      	b.n	800e67e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e606:	4b74      	ldr	r3, [pc, #464]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e60c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e610:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e612:	4b71      	ldr	r3, [pc, #452]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f003 0302 	and.w	r3, r3, #2
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	d10c      	bne.n	800e638 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800e61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e620:	2b00      	cmp	r3, #0
 800e622:	d109      	bne.n	800e638 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e624:	4b6c      	ldr	r3, [pc, #432]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	08db      	lsrs	r3, r3, #3
 800e62a:	f003 0303 	and.w	r3, r3, #3
 800e62e:	4a6c      	ldr	r2, [pc, #432]	@ (800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800e630:	fa22 f303 	lsr.w	r3, r2, r3
 800e634:	637b      	str	r3, [r7, #52]	@ 0x34
 800e636:	e01e      	b.n	800e676 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e638:	4b67      	ldr	r3, [pc, #412]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e644:	d106      	bne.n	800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800e646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e64c:	d102      	bne.n	800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e64e:	4b65      	ldr	r3, [pc, #404]	@ (800e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800e650:	637b      	str	r3, [r7, #52]	@ 0x34
 800e652:	e010      	b.n	800e676 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e654:	4b60      	ldr	r3, [pc, #384]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e65c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e660:	d106      	bne.n	800e670 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800e662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e668:	d102      	bne.n	800e670 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e66a:	4b5f      	ldr	r3, [pc, #380]	@ (800e7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800e66c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e66e:	e002      	b.n	800e676 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e670:	2300      	movs	r3, #0
 800e672:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e674:	e003      	b.n	800e67e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800e676:	e002      	b.n	800e67e <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800e678:	2300      	movs	r3, #0
 800e67a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e67c:	bf00      	nop
          }
        }
        break;
 800e67e:	e2d6      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800e680:	4b55      	ldr	r3, [pc, #340]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e686:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800e68a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e68e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e692:	d031      	beq.n	800e6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800e694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e69a:	d866      	bhi.n	800e76a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800e69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e69e:	2bc0      	cmp	r3, #192	@ 0xc0
 800e6a0:	d027      	beq.n	800e6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800e6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a4:	2bc0      	cmp	r3, #192	@ 0xc0
 800e6a6:	d860      	bhi.n	800e76a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800e6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6aa:	2b80      	cmp	r3, #128	@ 0x80
 800e6ac:	d019      	beq.n	800e6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b0:	2b80      	cmp	r3, #128	@ 0x80
 800e6b2:	d85a      	bhi.n	800e76a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800e6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d003      	beq.n	800e6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800e6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6bc:	2b40      	cmp	r3, #64	@ 0x40
 800e6be:	d008      	beq.n	800e6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800e6c0:	e053      	b.n	800e76a <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e6c2:	f107 0320 	add.w	r3, r7, #32
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fd fb22 	bl	800bd10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800e6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e6d0:	e04e      	b.n	800e770 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6d2:	f107 0314 	add.w	r3, r7, #20
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fd fc86 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e6e0:	e046      	b.n	800e770 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6e2:	f107 0308 	add.w	r3, r7, #8
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fd fdea 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e6f0:	e03e      	b.n	800e770 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800e6f2:	4b3a      	ldr	r3, [pc, #232]	@ (800e7dc <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800e6f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e6f6:	e03b      	b.n	800e770 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e6f8:	4b37      	ldr	r3, [pc, #220]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e6fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e6fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800e702:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e704:	4b34      	ldr	r3, [pc, #208]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f003 0302 	and.w	r3, r3, #2
 800e70c:	2b02      	cmp	r3, #2
 800e70e:	d10c      	bne.n	800e72a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800e710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e712:	2b00      	cmp	r3, #0
 800e714:	d109      	bne.n	800e72a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e716:	4b30      	ldr	r3, [pc, #192]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	08db      	lsrs	r3, r3, #3
 800e71c:	f003 0303 	and.w	r3, r3, #3
 800e720:	4a2f      	ldr	r2, [pc, #188]	@ (800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800e722:	fa22 f303 	lsr.w	r3, r2, r3
 800e726:	637b      	str	r3, [r7, #52]	@ 0x34
 800e728:	e01e      	b.n	800e768 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e72a:	4b2b      	ldr	r3, [pc, #172]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e736:	d106      	bne.n	800e746 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800e738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e73a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e73e:	d102      	bne.n	800e746 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800e740:	4b28      	ldr	r3, [pc, #160]	@ (800e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800e742:	637b      	str	r3, [r7, #52]	@ 0x34
 800e744:	e010      	b.n	800e768 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e746:	4b24      	ldr	r3, [pc, #144]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e74e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e752:	d106      	bne.n	800e762 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800e754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e75a:	d102      	bne.n	800e762 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800e75c:	4b22      	ldr	r3, [pc, #136]	@ (800e7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800e75e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e760:	e002      	b.n	800e768 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800e762:	2300      	movs	r3, #0
 800e764:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800e766:	e003      	b.n	800e770 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800e768:	e002      	b.n	800e770 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800e76a:	2300      	movs	r3, #0
 800e76c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e76e:	bf00      	nop
          }
        }
        break;
 800e770:	e25d      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800e772:	4b19      	ldr	r3, [pc, #100]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e778:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800e77c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800e77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e780:	2b00      	cmp	r3, #0
 800e782:	d103      	bne.n	800e78c <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800e784:	f7fb fb0e 	bl	8009da4 <HAL_RCC_GetPCLK2Freq>
 800e788:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800e78a:	e250      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800e78c:	4b12      	ldr	r3, [pc, #72]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e798:	d10b      	bne.n	800e7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800e79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e79c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7a0:	d107      	bne.n	800e7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7a2:	f107 0314 	add.w	r3, r7, #20
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7fd fc1e 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7b0:	e04f      	b.n	800e852 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800e7b2:	4b09      	ldr	r3, [pc, #36]	@ (800e7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e7ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7be:	d115      	bne.n	800e7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800e7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e7c6:	d111      	bne.n	800e7ec <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e7c8:	f107 0308 	add.w	r3, r7, #8
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fd fd77 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7d6:	e03c      	b.n	800e852 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800e7d8:	44020c00 	.word	0x44020c00
 800e7dc:	00bb8000 	.word	0x00bb8000
 800e7e0:	03d09000 	.word	0x03d09000
 800e7e4:	003d0900 	.word	0x003d0900
 800e7e8:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800e7ec:	4b94      	ldr	r3, [pc, #592]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f003 0302 	and.w	r3, r3, #2
 800e7f4:	2b02      	cmp	r3, #2
 800e7f6:	d10d      	bne.n	800e814 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e7fe:	d109      	bne.n	800e814 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e800:	4b8f      	ldr	r3, [pc, #572]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	08db      	lsrs	r3, r3, #3
 800e806:	f003 0303 	and.w	r3, r3, #3
 800e80a:	4a8e      	ldr	r2, [pc, #568]	@ (800ea44 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800e80c:	fa22 f303 	lsr.w	r3, r2, r3
 800e810:	637b      	str	r3, [r7, #52]	@ 0x34
 800e812:	e01e      	b.n	800e852 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800e814:	4b8a      	ldr	r3, [pc, #552]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e81c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e820:	d106      	bne.n	800e830 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800e822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e828:	d102      	bne.n	800e830 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800e82a:	4b87      	ldr	r3, [pc, #540]	@ (800ea48 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800e82c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e82e:	e010      	b.n	800e852 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800e830:	4b83      	ldr	r3, [pc, #524]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e838:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e83c:	d106      	bne.n	800e84c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800e83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e840:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800e844:	d102      	bne.n	800e84c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800e846:	4b81      	ldr	r3, [pc, #516]	@ (800ea4c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800e848:	637b      	str	r3, [r7, #52]	@ 0x34
 800e84a:	e002      	b.n	800e852 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800e84c:	2300      	movs	r3, #0
 800e84e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e850:	e1ed      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e852:	e1ec      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800e854:	4b7a      	ldr	r3, [pc, #488]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e85a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800e85e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800e860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e862:	2b00      	cmp	r3, #0
 800e864:	d103      	bne.n	800e86e <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800e866:	f7fb fab3 	bl	8009dd0 <HAL_RCC_GetPCLK3Freq>
 800e86a:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800e86c:	e1df      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800e86e:	4b74      	ldr	r3, [pc, #464]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e87a:	d10b      	bne.n	800e894 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800e87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e87e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e882:	d107      	bne.n	800e894 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e884:	f107 0314 	add.w	r3, r7, #20
 800e888:	4618      	mov	r0, r3
 800e88a:	f7fd fbad 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e88e:	69bb      	ldr	r3, [r7, #24]
 800e890:	637b      	str	r3, [r7, #52]	@ 0x34
 800e892:	e045      	b.n	800e920 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800e894:	4b6a      	ldr	r3, [pc, #424]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e89c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e8a0:	d10b      	bne.n	800e8ba <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800e8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e8a8:	d107      	bne.n	800e8ba <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8aa:	f107 0308 	add.w	r3, r7, #8
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fd fd06 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8b8:	e032      	b.n	800e920 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800e8ba:	4b61      	ldr	r3, [pc, #388]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f003 0302 	and.w	r3, r3, #2
 800e8c2:	2b02      	cmp	r3, #2
 800e8c4:	d10d      	bne.n	800e8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800e8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e8cc:	d109      	bne.n	800e8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e8ce:	4b5c      	ldr	r3, [pc, #368]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	08db      	lsrs	r3, r3, #3
 800e8d4:	f003 0303 	and.w	r3, r3, #3
 800e8d8:	4a5a      	ldr	r2, [pc, #360]	@ (800ea44 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800e8da:	fa22 f303 	lsr.w	r3, r2, r3
 800e8de:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8e0:	e01e      	b.n	800e920 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800e8e2:	4b57      	ldr	r3, [pc, #348]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e8ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8ee:	d106      	bne.n	800e8fe <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800e8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e8f6:	d102      	bne.n	800e8fe <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800e8f8:	4b53      	ldr	r3, [pc, #332]	@ (800ea48 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800e8fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8fc:	e010      	b.n	800e920 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800e8fe:	4b50      	ldr	r3, [pc, #320]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e90a:	d106      	bne.n	800e91a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800e90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e90e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e912:	d102      	bne.n	800e91a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800e914:	4b4d      	ldr	r3, [pc, #308]	@ (800ea4c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800e916:	637b      	str	r3, [r7, #52]	@ 0x34
 800e918:	e002      	b.n	800e920 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800e91a:	2300      	movs	r3, #0
 800e91c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e91e:	e186      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e920:	e185      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e922:	4b47      	ldr	r3, [pc, #284]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e928:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800e92c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800e92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e930:	2b00      	cmp	r3, #0
 800e932:	d103      	bne.n	800e93c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800e934:	f7fb fa36 	bl	8009da4 <HAL_RCC_GetPCLK2Freq>
 800e938:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800e93a:	e178      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800e93c:	4b40      	ldr	r3, [pc, #256]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e944:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e948:	d10b      	bne.n	800e962 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800e94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e94c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e950:	d107      	bne.n	800e962 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e952:	f107 0314 	add.w	r3, r7, #20
 800e956:	4618      	mov	r0, r3
 800e958:	f7fd fb46 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e960:	e045      	b.n	800e9ee <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800e962:	4b37      	ldr	r3, [pc, #220]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e96a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e96e:	d10b      	bne.n	800e988 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800e970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e976:	d107      	bne.n	800e988 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e978:	f107 0308 	add.w	r3, r7, #8
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7fd fc9f 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	637b      	str	r3, [r7, #52]	@ 0x34
 800e986:	e032      	b.n	800e9ee <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800e988:	4b2d      	ldr	r3, [pc, #180]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f003 0302 	and.w	r3, r3, #2
 800e990:	2b02      	cmp	r3, #2
 800e992:	d10d      	bne.n	800e9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800e994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e996:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800e99a:	d109      	bne.n	800e9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800e99c:	4b28      	ldr	r3, [pc, #160]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	08db      	lsrs	r3, r3, #3
 800e9a2:	f003 0303 	and.w	r3, r3, #3
 800e9a6:	4a27      	ldr	r2, [pc, #156]	@ (800ea44 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800e9a8:	fa22 f303 	lsr.w	r3, r2, r3
 800e9ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9ae:	e01e      	b.n	800e9ee <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800e9b0:	4b23      	ldr	r3, [pc, #140]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e9b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9bc:	d106      	bne.n	800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800e9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e9c4:	d102      	bne.n	800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800e9c6:	4b20      	ldr	r3, [pc, #128]	@ (800ea48 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800e9c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9ca:	e010      	b.n	800e9ee <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800e9cc:	4b1c      	ldr	r3, [pc, #112]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e9d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e9d8:	d106      	bne.n	800e9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800e9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9dc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800e9e0:	d102      	bne.n	800e9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800e9e2:	4b1a      	ldr	r3, [pc, #104]	@ (800ea4c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800e9e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9e6:	e002      	b.n	800e9ee <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800e9ec:	e11f      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800e9ee:	e11e      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800e9f0:	4b13      	ldr	r3, [pc, #76]	@ (800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800e9f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800e9f6:	f003 0303 	and.w	r3, r3, #3
 800e9fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9fe:	2b03      	cmp	r3, #3
 800ea00:	d85f      	bhi.n	800eac2 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800ea02:	a201      	add	r2, pc, #4	@ (adr r2, 800ea08 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800ea04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea08:	0800ea19 	.word	0x0800ea19
 800ea0c:	0800ea21 	.word	0x0800ea21
 800ea10:	0800ea31 	.word	0x0800ea31
 800ea14:	0800ea51 	.word	0x0800ea51

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800ea18:	f7fb f992 	bl	8009d40 <HAL_RCC_GetHCLKFreq>
 800ea1c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ea1e:	e053      	b.n	800eac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea20:	f107 0320 	add.w	r3, r7, #32
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7fd f973 	bl	800bd10 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ea2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea2c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ea2e:	e04b      	b.n	800eac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea30:	f107 0314 	add.w	r3, r7, #20
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fd fad7 	bl	800bfe8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ea3e:	e043      	b.n	800eac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800ea40:	44020c00 	.word	0x44020c00
 800ea44:	03d09000 	.word	0x03d09000
 800ea48:	003d0900 	.word	0x003d0900
 800ea4c:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ea50:	4b79      	ldr	r3, [pc, #484]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ea52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ea56:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ea5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ea5c:	4b76      	ldr	r3, [pc, #472]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f003 0302 	and.w	r3, r3, #2
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	d10c      	bne.n	800ea82 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800ea68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d109      	bne.n	800ea82 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ea6e:	4b72      	ldr	r3, [pc, #456]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	08db      	lsrs	r3, r3, #3
 800ea74:	f003 0303 	and.w	r3, r3, #3
 800ea78:	4a70      	ldr	r2, [pc, #448]	@ (800ec3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800ea7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ea7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea80:	e01e      	b.n	800eac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ea82:	4b6d      	ldr	r3, [pc, #436]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ea8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea8e:	d106      	bne.n	800ea9e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800ea90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea96:	d102      	bne.n	800ea9e <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ea98:	4b69      	ldr	r3, [pc, #420]	@ (800ec40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800ea9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea9c:	e010      	b.n	800eac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ea9e:	4b66      	ldr	r3, [pc, #408]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eaa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eaaa:	d106      	bne.n	800eaba <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800eaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eab2:	d102      	bne.n	800eaba <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800eab4:	4b63      	ldr	r3, [pc, #396]	@ (800ec44 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800eab6:	637b      	str	r3, [r7, #52]	@ 0x34
 800eab8:	e002      	b.n	800eac0 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800eaba:	2300      	movs	r3, #0
 800eabc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800eabe:	e003      	b.n	800eac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800eac0:	e002      	b.n	800eac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800eac2:	2300      	movs	r3, #0
 800eac4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800eac6:	bf00      	nop
          }
        }
        break;
 800eac8:	e0b1      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800eaca:	4b5b      	ldr	r3, [pc, #364]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800eacc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ead0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ead4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800ead6:	4b58      	ldr	r3, [pc, #352]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ead8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eadc:	f003 0302 	and.w	r3, r3, #2
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	d106      	bne.n	800eaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800eae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d103      	bne.n	800eaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800eaea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eaee:	637b      	str	r3, [r7, #52]	@ 0x34
 800eaf0:	e01f      	b.n	800eb32 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800eaf2:	4b51      	ldr	r3, [pc, #324]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800eaf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eaf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eafc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eb00:	d106      	bne.n	800eb10 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800eb02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb04:	2b40      	cmp	r3, #64	@ 0x40
 800eb06:	d103      	bne.n	800eb10 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800eb08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800eb0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb0e:	e010      	b.n	800eb32 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800eb10:	4b49      	ldr	r3, [pc, #292]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eb18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eb1c:	d106      	bne.n	800eb2c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800eb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb20:	2b80      	cmp	r3, #128	@ 0x80
 800eb22:	d103      	bne.n	800eb2c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800eb24:	f248 0312 	movw	r3, #32786	@ 0x8012
 800eb28:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb2a:	e002      	b.n	800eb32 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800eb30:	e07d      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800eb32:	e07c      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800eb34:	4b40      	ldr	r3, [pc, #256]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800eb36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800eb3a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800eb3e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800eb40:	4b3d      	ldr	r3, [pc, #244]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eb48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb4c:	d105      	bne.n	800eb5a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800eb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d102      	bne.n	800eb5a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800eb54:	4b3c      	ldr	r3, [pc, #240]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800eb56:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb58:	e031      	b.n	800ebbe <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800eb5a:	4b37      	ldr	r3, [pc, #220]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eb62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eb66:	d10a      	bne.n	800eb7e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800eb68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb6a:	2b10      	cmp	r3, #16
 800eb6c:	d107      	bne.n	800eb7e <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb6e:	f107 0320 	add.w	r3, r7, #32
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fd f8cc 	bl	800bd10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb7c:	e01f      	b.n	800ebbe <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800eb7e:	4b2e      	ldr	r3, [pc, #184]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800eb80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eb84:	f003 0302 	and.w	r3, r3, #2
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	d106      	bne.n	800eb9a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800eb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb8e:	2b20      	cmp	r3, #32
 800eb90:	d103      	bne.n	800eb9a <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800eb92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800eb96:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb98:	e011      	b.n	800ebbe <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800eb9a:	4b27      	ldr	r3, [pc, #156]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800eb9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800eba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eba8:	d106      	bne.n	800ebb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebac:	2b30      	cmp	r3, #48	@ 0x30
 800ebae:	d103      	bne.n	800ebb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800ebb0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ebb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ebb6:	e002      	b.n	800ebbe <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800ebbc:	e037      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ebbe:	e036      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800ebc0:	4b1d      	ldr	r3, [pc, #116]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ebc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ebc6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ebca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebce:	2b10      	cmp	r3, #16
 800ebd0:	d107      	bne.n	800ebe2 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ebd2:	f107 0320 	add.w	r3, r7, #32
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fd f89a 	bl	800bd10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ebdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebde:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ebe0:	e025      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800ebe2:	4b15      	ldr	r3, [pc, #84]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ebea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ebee:	d10a      	bne.n	800ec06 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800ebf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf2:	2b20      	cmp	r3, #32
 800ebf4:	d107      	bne.n	800ec06 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebf6:	f107 0308 	add.w	r3, r7, #8
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7fd fb60 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec04:	e00f      	b.n	800ec26 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800ec06:	4b0c      	ldr	r3, [pc, #48]	@ (800ec38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ec0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ec12:	d105      	bne.n	800ec20 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800ec14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec16:	2b30      	cmp	r3, #48	@ 0x30
 800ec18:	d102      	bne.n	800ec20 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800ec1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800ec1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec1e:	e002      	b.n	800ec26 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800ec20:	2300      	movs	r3, #0
 800ec22:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800ec24:	e003      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ec26:	e002      	b.n	800ec2e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ec2c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800ec2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	373c      	adds	r7, #60	@ 0x3c
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd90      	pop	{r4, r7, pc}
 800ec38:	44020c00 	.word	0x44020c00
 800ec3c:	03d09000 	.word	0x03d09000
 800ec40:	003d0900 	.word	0x003d0900
 800ec44:	007a1200 	.word	0x007a1200
 800ec48:	02dc6c00 	.word	0x02dc6c00

0800ec4c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800ec54:	4b48      	ldr	r3, [pc, #288]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4a47      	ldr	r2, [pc, #284]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ec5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ec5e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ec60:	f7f6 fd08 	bl	8005674 <HAL_GetTick>
 800ec64:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ec66:	e008      	b.n	800ec7a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ec68:	f7f6 fd04 	bl	8005674 <HAL_GetTick>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d901      	bls.n	800ec7a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ec76:	2303      	movs	r3, #3
 800ec78:	e07a      	b.n	800ed70 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ec7a:	4b3f      	ldr	r3, [pc, #252]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d1f0      	bne.n	800ec68 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800ec86:	4b3c      	ldr	r3, [pc, #240]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ec88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec8a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ec8e:	f023 0303 	bic.w	r3, r3, #3
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	6811      	ldr	r1, [r2, #0]
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	6852      	ldr	r2, [r2, #4]
 800ec9a:	0212      	lsls	r2, r2, #8
 800ec9c:	430a      	orrs	r2, r1
 800ec9e:	4936      	ldr	r1, [pc, #216]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800eca0:	4313      	orrs	r3, r2
 800eca2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	689b      	ldr	r3, [r3, #8]
 800eca8:	3b01      	subs	r3, #1
 800ecaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	68db      	ldr	r3, [r3, #12]
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	025b      	lsls	r3, r3, #9
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	431a      	orrs	r2, r3
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	691b      	ldr	r3, [r3, #16]
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	041b      	lsls	r3, r3, #16
 800ecc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ecc6:	431a      	orrs	r2, r3
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	695b      	ldr	r3, [r3, #20]
 800eccc:	3b01      	subs	r3, #1
 800ecce:	061b      	lsls	r3, r3, #24
 800ecd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ecd4:	4928      	ldr	r1, [pc, #160]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800ecda:	4b27      	ldr	r3, [pc, #156]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ecdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecde:	f023 020c 	bic.w	r2, r3, #12
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	699b      	ldr	r3, [r3, #24]
 800ece6:	4924      	ldr	r1, [pc, #144]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ece8:	4313      	orrs	r3, r2
 800ecea:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800ecec:	4b22      	ldr	r3, [pc, #136]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ecee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecf0:	f023 0220 	bic.w	r2, r3, #32
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	69db      	ldr	r3, [r3, #28]
 800ecf8:	491f      	ldr	r1, [pc, #124]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ecfa:	4313      	orrs	r3, r2
 800ecfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800ecfe:	4b1e      	ldr	r3, [pc, #120]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ed00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed06:	491c      	ldr	r1, [pc, #112]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ed08:	4313      	orrs	r3, r2
 800ed0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800ed0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ed0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed10:	4a19      	ldr	r2, [pc, #100]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ed12:	f023 0310 	bic.w	r3, r3, #16
 800ed16:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800ed18:	4b17      	ldr	r3, [pc, #92]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ed1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ed20:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	6a12      	ldr	r2, [r2, #32]
 800ed28:	00d2      	lsls	r2, r2, #3
 800ed2a:	4913      	ldr	r1, [pc, #76]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800ed30:	4b11      	ldr	r3, [pc, #68]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ed32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed34:	4a10      	ldr	r2, [pc, #64]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ed36:	f043 0310 	orr.w	r3, r3, #16
 800ed3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800ed3c:	4b0e      	ldr	r3, [pc, #56]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a0d      	ldr	r2, [pc, #52]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ed42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ed46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ed48:	f7f6 fc94 	bl	8005674 <HAL_GetTick>
 800ed4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ed4e:	e008      	b.n	800ed62 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ed50:	f7f6 fc90 	bl	8005674 <HAL_GetTick>
 800ed54:	4602      	mov	r2, r0
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	2b02      	cmp	r3, #2
 800ed5c:	d901      	bls.n	800ed62 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800ed5e:	2303      	movs	r3, #3
 800ed60:	e006      	b.n	800ed70 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ed62:	4b05      	ldr	r3, [pc, #20]	@ (800ed78 <RCCEx_PLL2_Config+0x12c>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d0f0      	beq.n	800ed50 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800ed6e:	2300      	movs	r3, #0

}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3710      	adds	r7, #16
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	44020c00 	.word	0x44020c00

0800ed7c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800ed84:	4b48      	ldr	r3, [pc, #288]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4a47      	ldr	r2, [pc, #284]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ed8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ed8e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ed90:	f7f6 fc70 	bl	8005674 <HAL_GetTick>
 800ed94:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ed96:	e008      	b.n	800edaa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ed98:	f7f6 fc6c 	bl	8005674 <HAL_GetTick>
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	1ad3      	subs	r3, r2, r3
 800eda2:	2b02      	cmp	r3, #2
 800eda4:	d901      	bls.n	800edaa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800eda6:	2303      	movs	r3, #3
 800eda8:	e07a      	b.n	800eea0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800edaa:	4b3f      	ldr	r3, [pc, #252]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d1f0      	bne.n	800ed98 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800edb6:	4b3c      	ldr	r3, [pc, #240]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800edb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800edbe:	f023 0303 	bic.w	r3, r3, #3
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	6811      	ldr	r1, [r2, #0]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	6852      	ldr	r2, [r2, #4]
 800edca:	0212      	lsls	r2, r2, #8
 800edcc:	430a      	orrs	r2, r1
 800edce:	4936      	ldr	r1, [pc, #216]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800edd0:	4313      	orrs	r3, r2
 800edd2:	630b      	str	r3, [r1, #48]	@ 0x30
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	689b      	ldr	r3, [r3, #8]
 800edd8:	3b01      	subs	r3, #1
 800edda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	3b01      	subs	r3, #1
 800ede4:	025b      	lsls	r3, r3, #9
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	431a      	orrs	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	691b      	ldr	r3, [r3, #16]
 800edee:	3b01      	subs	r3, #1
 800edf0:	041b      	lsls	r3, r3, #16
 800edf2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800edf6:	431a      	orrs	r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	695b      	ldr	r3, [r3, #20]
 800edfc:	3b01      	subs	r3, #1
 800edfe:	061b      	lsls	r3, r3, #24
 800ee00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ee04:	4928      	ldr	r1, [pc, #160]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee06:	4313      	orrs	r3, r2
 800ee08:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ee0a:	4b27      	ldr	r3, [pc, #156]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee0e:	f023 020c 	bic.w	r2, r3, #12
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	699b      	ldr	r3, [r3, #24]
 800ee16:	4924      	ldr	r1, [pc, #144]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800ee1c:	4b22      	ldr	r3, [pc, #136]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee20:	f023 0220 	bic.w	r2, r3, #32
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	69db      	ldr	r3, [r3, #28]
 800ee28:	491f      	ldr	r1, [pc, #124]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ee2e:	4b1e      	ldr	r3, [pc, #120]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee36:	491c      	ldr	r1, [pc, #112]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800ee3c:	4b1a      	ldr	r3, [pc, #104]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee40:	4a19      	ldr	r2, [pc, #100]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee42:	f023 0310 	bic.w	r3, r3, #16
 800ee46:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800ee48:	4b17      	ldr	r3, [pc, #92]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ee4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ee50:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ee54:	687a      	ldr	r2, [r7, #4]
 800ee56:	6a12      	ldr	r2, [r2, #32]
 800ee58:	00d2      	lsls	r2, r2, #3
 800ee5a:	4913      	ldr	r1, [pc, #76]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee5c:	4313      	orrs	r3, r2
 800ee5e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800ee60:	4b11      	ldr	r3, [pc, #68]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee64:	4a10      	ldr	r2, [pc, #64]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee66:	f043 0310 	orr.w	r3, r3, #16
 800ee6a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800ee6c:	4b0e      	ldr	r3, [pc, #56]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a0d      	ldr	r2, [pc, #52]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ee76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ee78:	f7f6 fbfc 	bl	8005674 <HAL_GetTick>
 800ee7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ee7e:	e008      	b.n	800ee92 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ee80:	f7f6 fbf8 	bl	8005674 <HAL_GetTick>
 800ee84:	4602      	mov	r2, r0
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	1ad3      	subs	r3, r2, r3
 800ee8a:	2b02      	cmp	r3, #2
 800ee8c:	d901      	bls.n	800ee92 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800ee8e:	2303      	movs	r3, #3
 800ee90:	e006      	b.n	800eea0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ee92:	4b05      	ldr	r3, [pc, #20]	@ (800eea8 <RCCEx_PLL3_Config+0x12c>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d0f0      	beq.n	800ee80 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800ee9e:	2300      	movs	r3, #0
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3710      	adds	r7, #16
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	44020c00 	.word	0x44020c00

0800eeac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d101      	bne.n	800eebe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800eeba:	2301      	movs	r3, #1
 800eebc:	e08c      	b.n	800efd8 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	7a5b      	ldrb	r3, [r3, #9]
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d105      	bne.n	800eed4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2200      	movs	r2, #0
 800eecc:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7f5 fc28 	bl	8004724 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2202      	movs	r2, #2
 800eed8:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f022 0204 	bic.w	r2, r2, #4
 800eee8:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6859      	ldr	r1, [r3, #4]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	4b3b      	ldr	r3, [pc, #236]	@ (800efe0 <HAL_RNG_Init+0x134>)
 800eef4:	430b      	orrs	r3, r1
 800eef6:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800ef00:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4a37      	ldr	r2, [pc, #220]	@ (800efe4 <HAL_RNG_Init+0x138>)
 800ef08:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800ef18:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ef1a:	f7f6 fbab 	bl	8005674 <HAL_GetTick>
 800ef1e:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800ef20:	e016      	b.n	800ef50 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ef22:	f7f6 fba7 	bl	8005674 <HAL_GetTick>
 800ef26:	4602      	mov	r2, r0
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	1ad3      	subs	r3, r2, r3
 800ef2c:	2b04      	cmp	r3, #4
 800ef2e:	d90f      	bls.n	800ef50 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ef3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef3e:	d107      	bne.n	800ef50 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2201      	movs	r2, #1
 800ef44:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2202      	movs	r2, #2
 800ef4a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	e043      	b.n	800efd8 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ef5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef5e:	d0e0      	beq.n	800ef22 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	f042 0204 	orr.w	r2, r2, #4
 800ef6e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef7a:	2b40      	cmp	r3, #64	@ 0x40
 800ef7c:	d104      	bne.n	800ef88 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2204      	movs	r2, #4
 800ef82:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800ef84:	2301      	movs	r3, #1
 800ef86:	e027      	b.n	800efd8 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800ef88:	f7f6 fb74 	bl	8005674 <HAL_GetTick>
 800ef8c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800ef8e:	e015      	b.n	800efbc <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ef90:	f7f6 fb70 	bl	8005674 <HAL_GetTick>
 800ef94:	4602      	mov	r2, r0
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	1ad3      	subs	r3, r2, r3
 800ef9a:	2b04      	cmp	r3, #4
 800ef9c:	d90e      	bls.n	800efbc <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	f003 0301 	and.w	r3, r3, #1
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d007      	beq.n	800efbc <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2204      	movs	r2, #4
 800efb0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2202      	movs	r2, #2
 800efb6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800efb8:	2301      	movs	r3, #1
 800efba:	e00d      	b.n	800efd8 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	f003 0301 	and.w	r3, r3, #1
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d1e2      	bne.n	800ef90 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2201      	movs	r2, #1
 800efce:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800efd6:	2300      	movs	r3, #0
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3710      	adds	r7, #16
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	40f00e00 	.word	0x40f00e00
 800efe4:	0003af66 	.word	0x0003af66

0800efe8 <HAL_RNG_DeInit>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_DeInit(RNG_HandleTypeDef *hrng)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d101      	bne.n	800effa <HAL_RNG_DeInit+0x12>
  {
    return HAL_ERROR;
 800eff6:	2301      	movs	r3, #1
 800eff8:	e056      	b.n	800f0a8 <HAL_RNG_DeInit+0xc0>
  }

  /* Clear Clock Error Detection bit when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, RNG_CED_ENABLE | RNG_CR_CONDRST);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f004:	f023 0320 	bic.w	r3, r3, #32
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	6812      	ldr	r2, [r2, #0]
 800f00c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f010:	6013      	str	r3, [r2, #0]

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800f020:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f022:	f7f6 fb27 	bl	8005674 <HAL_GetTick>
 800f026:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800f028:	e019      	b.n	800f05e <HAL_RNG_DeInit+0x76>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f02a:	f7f6 fb23 	bl	8005674 <HAL_GetTick>
 800f02e:	4602      	mov	r2, r0
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	1ad3      	subs	r3, r2, r3
 800f034:	2b04      	cmp	r3, #4
 800f036:	d912      	bls.n	800f05e <HAL_RNG_DeInit+0x76>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f046:	d10a      	bne.n	800f05e <HAL_RNG_DeInit+0x76>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2201      	movs	r2, #1
 800f04c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2202      	movs	r2, #2
 800f052:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 800f05a:	2301      	movs	r3, #1
 800f05c:	e024      	b.n	800f0a8 <HAL_RNG_DeInit+0xc0>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f06c:	d0dd      	beq.n	800f02a <HAL_RNG_DeInit+0x42>
      }
    }
  }

  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f022 020c 	bic.w	r2, r2, #12
 800f07c:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	685a      	ldr	r2, [r3, #4]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f08c:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7f5 fba0 	bl	80047d4 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	60da      	str	r2, [r3, #12]

  /* Release Lock */
  __HAL_UNLOCK(hrng);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	721a      	strb	r2, [r3, #8]

  /* Return the function status */
  return HAL_OK;
 800f0a6:	2300      	movs	r3, #0
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3710      	adds	r7, #16
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	7a1b      	ldrb	r3, [r3, #8]
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	d101      	bne.n	800f0ca <HAL_RNG_GenerateRandomNumber+0x1a>
 800f0c6:	2302      	movs	r3, #2
 800f0c8:	e068      	b.n	800f19c <HAL_RNG_GenerateRandomNumber+0xec>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	7a5b      	ldrb	r3, [r3, #9]
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d157      	bne.n	800f18a <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2202      	movs	r2, #2
 800f0de:	725a      	strb	r2, [r3, #9]
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0ea:	2b40      	cmp	r3, #64	@ 0x40
 800f0ec:	d10f      	bne.n	800f10e <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2208      	movs	r2, #8
 800f0f2:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f000 f85f 	bl	800f1b8 <RNG_RecoverSeedError>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800f0fe:	7bfb      	ldrb	r3, [r7, #15]
 800f100:	2b01      	cmp	r3, #1
 800f102:	d104      	bne.n	800f10e <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2220      	movs	r2, #32
 800f108:	60da      	str	r2, [r3, #12]
        return status;
 800f10a:	7bfb      	ldrb	r3, [r7, #15]
 800f10c:	e046      	b.n	800f19c <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800f10e:	f7f6 fab1 	bl	8005674 <HAL_GetTick>
 800f112:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f114:	e018      	b.n	800f148 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800f116:	f7f6 faad 	bl	8005674 <HAL_GetTick>
 800f11a:	4602      	mov	r2, r0
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	2b04      	cmp	r3, #4
 800f122:	d911      	bls.n	800f148 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	f003 0301 	and.w	r3, r3, #1
 800f12e:	2b01      	cmp	r3, #1
 800f130:	d00a      	beq.n	800f148 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2201      	movs	r2, #1
 800f136:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2202      	movs	r2, #2
 800f13c:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2200      	movs	r2, #0
 800f142:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800f144:	2301      	movs	r3, #1
 800f146:	e029      	b.n	800f19c <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	f003 0301 	and.w	r3, r3, #1
 800f152:	2b01      	cmp	r3, #1
 800f154:	d1df      	bne.n	800f116 <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	689a      	ldr	r2, [r3, #8]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	611a      	str	r2, [r3, #16]
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f16a:	2b40      	cmp	r3, #64	@ 0x40
 800f16c:	d105      	bne.n	800f17a <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2208      	movs	r2, #8
 800f172:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800f174:	2301      	movs	r3, #1
 800f176:	73fb      	strb	r3, [r7, #15]
 800f178:	e003      	b.n	800f182 <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	691a      	ldr	r2, [r3, #16]
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	601a      	str	r2, [r3, #0]
    }
    hrng->State = HAL_RNG_STATE_READY;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2201      	movs	r2, #1
 800f186:	725a      	strb	r2, [r3, #9]
 800f188:	e004      	b.n	800f194 <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2204      	movs	r2, #4
 800f18e:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800f190:	2301      	movs	r3, #1
 800f192:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	721a      	strb	r2, [r3, #8]

  return status;
 800f19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800f1ac:	bf00      	nop
 800f1ae:	370c      	adds	r7, #12
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr

0800f1b8 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	f003 0304 	and.w	r3, r3, #4
 800f1ce:	2b04      	cmp	r3, #4
 800f1d0:	d008      	beq.n	800f1e4 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	685a      	ldr	r2, [r3, #4]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f1e0:	605a      	str	r2, [r3, #4]
 800f1e2:	e05f      	b.n	800f2a4 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800f1f2:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800f202:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800f204:	2304      	movs	r3, #4
 800f206:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	3b01      	subs	r3, #1
 800f20c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d110      	bne.n	800f236 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2201      	movs	r2, #1
 800f218:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	f043 0202 	orr.w	r2, r3, #2
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2200      	movs	r2, #0
 800f22a:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f7ff ffb9 	bl	800f1a4 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800f232:	2301      	movs	r3, #1
 800f234:	e03d      	b.n	800f2b2 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f244:	d0e0      	beq.n	800f208 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f250:	2b40      	cmp	r3, #64	@ 0x40
 800f252:	d107      	bne.n	800f264 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	685a      	ldr	r2, [r3, #4]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f262:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800f264:	2304      	movs	r3, #4
 800f266:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	3b01      	subs	r3, #1
 800f26c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d110      	bne.n	800f296 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2201      	movs	r2, #1
 800f278:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	f043 0202 	orr.w	r2, r3, #2
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2200      	movs	r2, #0
 800f28a:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7ff ff89 	bl	800f1a4 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800f292:	2301      	movs	r3, #1
 800f294:	e00d      	b.n	800f2b2 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	f003 0304 	and.w	r3, r3, #4
 800f2a0:	2b04      	cmp	r3, #4
 800f2a2:	d0e1      	beq.n	800f268 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	f023 0208 	bic.w	r2, r3, #8
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3710      	adds	r7, #16
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
	...

0800f2bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d071      	beq.n	800f3b2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d106      	bne.n	800f2e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2200      	movs	r2, #0
 800f2de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7f5 fa92 	bl	800480c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2202      	movs	r2, #2
 800f2ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800f2f0:	4b32      	ldr	r3, [pc, #200]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	f003 0310 	and.w	r3, r3, #16
 800f2f8:	2b10      	cmp	r3, #16
 800f2fa:	d051      	beq.n	800f3a0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f2fc:	4b2f      	ldr	r3, [pc, #188]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f2fe:	22ca      	movs	r2, #202	@ 0xca
 800f300:	625a      	str	r2, [r3, #36]	@ 0x24
 800f302:	4b2e      	ldr	r3, [pc, #184]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f304:	2253      	movs	r2, #83	@ 0x53
 800f306:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f000 f9a3 	bl	800f654 <RTC_EnterInitMode>
 800f30e:	4603      	mov	r3, r0
 800f310:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800f312:	7bfb      	ldrb	r3, [r7, #15]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d13f      	bne.n	800f398 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800f318:	4b28      	ldr	r3, [pc, #160]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f31a:	699b      	ldr	r3, [r3, #24]
 800f31c:	4a27      	ldr	r2, [pc, #156]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f31e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800f322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f326:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800f328:	4b24      	ldr	r3, [pc, #144]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f32a:	699a      	ldr	r2, [r3, #24]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6859      	ldr	r1, [r3, #4]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	4319      	orrs	r1, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	699b      	ldr	r3, [r3, #24]
 800f33a:	430b      	orrs	r3, r1
 800f33c:	491f      	ldr	r1, [pc, #124]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f33e:	4313      	orrs	r3, r2
 800f340:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	68da      	ldr	r2, [r3, #12]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	041b      	lsls	r3, r3, #16
 800f34c:	491b      	ldr	r1, [pc, #108]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f34e:	4313      	orrs	r3, r2
 800f350:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800f352:	4b1a      	ldr	r3, [pc, #104]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f362:	430b      	orrs	r3, r1
 800f364:	4915      	ldr	r1, [pc, #84]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f366:	4313      	orrs	r3, r2
 800f368:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 f9ae 	bl	800f6cc <RTC_ExitInitMode>
 800f370:	4603      	mov	r3, r0
 800f372:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800f374:	7bfb      	ldrb	r3, [r7, #15]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d10e      	bne.n	800f398 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800f37a:	4b10      	ldr	r3, [pc, #64]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f37c:	699b      	ldr	r3, [r3, #24]
 800f37e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a19      	ldr	r1, [r3, #32]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	69db      	ldr	r3, [r3, #28]
 800f38a:	4319      	orrs	r1, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	695b      	ldr	r3, [r3, #20]
 800f390:	430b      	orrs	r3, r1
 800f392:	490a      	ldr	r1, [pc, #40]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f394:	4313      	orrs	r3, r2
 800f396:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f398:	4b08      	ldr	r3, [pc, #32]	@ (800f3bc <HAL_RTC_Init+0x100>)
 800f39a:	22ff      	movs	r2, #255	@ 0xff
 800f39c:	625a      	str	r2, [r3, #36]	@ 0x24
 800f39e:	e001      	b.n	800f3a4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800f3a4:	7bfb      	ldrb	r3, [r7, #15]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d103      	bne.n	800f3b2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800f3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	44007800 	.word	0x44007800

0800f3c0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f3c0:	b590      	push	{r4, r7, lr}
 800f3c2:	b087      	sub	sp, #28
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d101      	bne.n	800f3da <HAL_RTC_SetTime+0x1a>
 800f3d6:	2302      	movs	r3, #2
 800f3d8:	e07e      	b.n	800f4d8 <HAL_RTC_SetTime+0x118>
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2201      	movs	r2, #1
 800f3de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2202      	movs	r2, #2
 800f3e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f3ea:	4b3d      	ldr	r3, [pc, #244]	@ (800f4e0 <HAL_RTC_SetTime+0x120>)
 800f3ec:	22ca      	movs	r2, #202	@ 0xca
 800f3ee:	625a      	str	r2, [r3, #36]	@ 0x24
 800f3f0:	4b3b      	ldr	r3, [pc, #236]	@ (800f4e0 <HAL_RTC_SetTime+0x120>)
 800f3f2:	2253      	movs	r2, #83	@ 0x53
 800f3f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f3f6:	68f8      	ldr	r0, [r7, #12]
 800f3f8:	f000 f92c 	bl	800f654 <RTC_EnterInitMode>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f400:	7cfb      	ldrb	r3, [r7, #19]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d159      	bne.n	800f4ba <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800f406:	4b36      	ldr	r3, [pc, #216]	@ (800f4e0 <HAL_RTC_SetTime+0x120>)
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f40e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f412:	d04d      	beq.n	800f4b0 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d125      	bne.n	800f466 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800f41a:	4b31      	ldr	r3, [pc, #196]	@ (800f4e0 <HAL_RTC_SetTime+0x120>)
 800f41c:	699b      	ldr	r3, [r3, #24]
 800f41e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f422:	2b00      	cmp	r3, #0
 800f424:	d102      	bne.n	800f42c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	2200      	movs	r2, #0
 800f42a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	4618      	mov	r0, r3
 800f432:	f000 f989 	bl	800f748 <RTC_ByteToBcd2>
 800f436:	4603      	mov	r3, r0
 800f438:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	785b      	ldrb	r3, [r3, #1]
 800f43e:	4618      	mov	r0, r3
 800f440:	f000 f982 	bl	800f748 <RTC_ByteToBcd2>
 800f444:	4603      	mov	r3, r0
 800f446:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f448:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	789b      	ldrb	r3, [r3, #2]
 800f44e:	4618      	mov	r0, r3
 800f450:	f000 f97a 	bl	800f748 <RTC_ByteToBcd2>
 800f454:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f456:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	78db      	ldrb	r3, [r3, #3]
 800f45e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f460:	4313      	orrs	r3, r2
 800f462:	617b      	str	r3, [r7, #20]
 800f464:	e017      	b.n	800f496 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800f466:	4b1e      	ldr	r3, [pc, #120]	@ (800f4e0 <HAL_RTC_SetTime+0x120>)
 800f468:	699b      	ldr	r3, [r3, #24]
 800f46a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d102      	bne.n	800f478 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	2200      	movs	r2, #0
 800f476:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	785b      	ldrb	r3, [r3, #1]
 800f482:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f484:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800f486:	68ba      	ldr	r2, [r7, #8]
 800f488:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f48a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	78db      	ldrb	r3, [r3, #3]
 800f490:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f492:	4313      	orrs	r3, r2
 800f494:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800f496:	4a12      	ldr	r2, [pc, #72]	@ (800f4e0 <HAL_RTC_SetTime+0x120>)
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800f49e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800f4a2:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800f4a4:	4b0e      	ldr	r3, [pc, #56]	@ (800f4e0 <HAL_RTC_SetTime+0x120>)
 800f4a6:	699b      	ldr	r3, [r3, #24]
 800f4a8:	4a0d      	ldr	r2, [pc, #52]	@ (800f4e0 <HAL_RTC_SetTime+0x120>)
 800f4aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f4ae:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f4b0:	68f8      	ldr	r0, [r7, #12]
 800f4b2:	f000 f90b 	bl	800f6cc <RTC_ExitInitMode>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f4ba:	4b09      	ldr	r3, [pc, #36]	@ (800f4e0 <HAL_RTC_SetTime+0x120>)
 800f4bc:	22ff      	movs	r2, #255	@ 0xff
 800f4be:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800f4c0:	7cfb      	ldrb	r3, [r7, #19]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d103      	bne.n	800f4ce <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800f4d6:	7cfb      	ldrb	r3, [r7, #19]
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	371c      	adds	r7, #28
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd90      	pop	{r4, r7, pc}
 800f4e0:	44007800 	.word	0x44007800

0800f4e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f4e4:	b590      	push	{r4, r7, lr}
 800f4e6:	b087      	sub	sp, #28
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f4f6:	2b01      	cmp	r3, #1
 800f4f8:	d101      	bne.n	800f4fe <HAL_RTC_SetDate+0x1a>
 800f4fa:	2302      	movs	r3, #2
 800f4fc:	e071      	b.n	800f5e2 <HAL_RTC_SetDate+0xfe>
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2201      	movs	r2, #1
 800f502:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2202      	movs	r2, #2
 800f50a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d10e      	bne.n	800f532 <HAL_RTC_SetDate+0x4e>
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	785b      	ldrb	r3, [r3, #1]
 800f518:	f003 0310 	and.w	r3, r3, #16
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d008      	beq.n	800f532 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	785b      	ldrb	r3, [r3, #1]
 800f524:	f023 0310 	bic.w	r3, r3, #16
 800f528:	b2db      	uxtb	r3, r3
 800f52a:	330a      	adds	r3, #10
 800f52c:	b2da      	uxtb	r2, r3
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d11c      	bne.n	800f572 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	78db      	ldrb	r3, [r3, #3]
 800f53c:	4618      	mov	r0, r3
 800f53e:	f000 f903 	bl	800f748 <RTC_ByteToBcd2>
 800f542:	4603      	mov	r3, r0
 800f544:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	785b      	ldrb	r3, [r3, #1]
 800f54a:	4618      	mov	r0, r3
 800f54c:	f000 f8fc 	bl	800f748 <RTC_ByteToBcd2>
 800f550:	4603      	mov	r3, r0
 800f552:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800f554:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	789b      	ldrb	r3, [r3, #2]
 800f55a:	4618      	mov	r0, r3
 800f55c:	f000 f8f4 	bl	800f748 <RTC_ByteToBcd2>
 800f560:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f562:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800f56c:	4313      	orrs	r3, r2
 800f56e:	617b      	str	r3, [r7, #20]
 800f570:	e00e      	b.n	800f590 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	78db      	ldrb	r3, [r3, #3]
 800f576:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	785b      	ldrb	r3, [r3, #1]
 800f57c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800f57e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800f580:	68ba      	ldr	r2, [r7, #8]
 800f582:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800f584:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800f58c:	4313      	orrs	r3, r2
 800f58e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f590:	4b16      	ldr	r3, [pc, #88]	@ (800f5ec <HAL_RTC_SetDate+0x108>)
 800f592:	22ca      	movs	r2, #202	@ 0xca
 800f594:	625a      	str	r2, [r3, #36]	@ 0x24
 800f596:	4b15      	ldr	r3, [pc, #84]	@ (800f5ec <HAL_RTC_SetDate+0x108>)
 800f598:	2253      	movs	r2, #83	@ 0x53
 800f59a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f000 f859 	bl	800f654 <RTC_EnterInitMode>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f5a6:	7cfb      	ldrb	r3, [r7, #19]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10b      	bne.n	800f5c4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800f5ac:	4a0f      	ldr	r2, [pc, #60]	@ (800f5ec <HAL_RTC_SetDate+0x108>)
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f5b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f5b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f000 f886 	bl	800f6cc <RTC_ExitInitMode>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f5c4:	4b09      	ldr	r3, [pc, #36]	@ (800f5ec <HAL_RTC_SetDate+0x108>)
 800f5c6:	22ff      	movs	r2, #255	@ 0xff
 800f5c8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800f5ca:	7cfb      	ldrb	r3, [r7, #19]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d103      	bne.n	800f5d8 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800f5e0:	7cfb      	ldrb	r3, [r7, #19]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	371c      	adds	r7, #28
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd90      	pop	{r4, r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	44007800 	.word	0x44007800

0800f5f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800f5f8:	4b15      	ldr	r3, [pc, #84]	@ (800f650 <HAL_RTC_WaitForSynchro+0x60>)
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	4a14      	ldr	r2, [pc, #80]	@ (800f650 <HAL_RTC_WaitForSynchro+0x60>)
 800f5fe:	f023 0320 	bic.w	r3, r3, #32
 800f602:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800f604:	f7f6 f836 	bl	8005674 <HAL_GetTick>
 800f608:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800f60a:	e013      	b.n	800f634 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f60c:	f7f6 f832 	bl	8005674 <HAL_GetTick>
 800f610:	4602      	mov	r2, r0
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f61a:	d90b      	bls.n	800f634 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800f61c:	4b0c      	ldr	r3, [pc, #48]	@ (800f650 <HAL_RTC_WaitForSynchro+0x60>)
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	f003 0320 	and.w	r3, r3, #32
 800f624:	2b00      	cmp	r3, #0
 800f626:	d10c      	bne.n	800f642 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2203      	movs	r2, #3
 800f62c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800f630:	2303      	movs	r3, #3
 800f632:	e008      	b.n	800f646 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800f634:	4b06      	ldr	r3, [pc, #24]	@ (800f650 <HAL_RTC_WaitForSynchro+0x60>)
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	f003 0320 	and.w	r3, r3, #32
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d0e5      	beq.n	800f60c <HAL_RTC_WaitForSynchro+0x1c>
 800f640:	e000      	b.n	800f644 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800f642:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800f644:	2300      	movs	r3, #0
}
 800f646:	4618      	mov	r0, r3
 800f648:	3710      	adds	r7, #16
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	44007800 	.word	0x44007800

0800f654 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f65c:	2300      	movs	r3, #0
 800f65e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800f660:	4b19      	ldr	r3, [pc, #100]	@ (800f6c8 <RTC_EnterInitMode+0x74>)
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d128      	bne.n	800f6be <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800f66c:	4b16      	ldr	r3, [pc, #88]	@ (800f6c8 <RTC_EnterInitMode+0x74>)
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	4a15      	ldr	r2, [pc, #84]	@ (800f6c8 <RTC_EnterInitMode+0x74>)
 800f672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f676:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800f678:	f7f5 fffc 	bl	8005674 <HAL_GetTick>
 800f67c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f67e:	e013      	b.n	800f6a8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f680:	f7f5 fff8 	bl	8005674 <HAL_GetTick>
 800f684:	4602      	mov	r2, r0
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	1ad3      	subs	r3, r2, r3
 800f68a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f68e:	d90b      	bls.n	800f6a8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800f690:	4b0d      	ldr	r3, [pc, #52]	@ (800f6c8 <RTC_EnterInitMode+0x74>)
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d10f      	bne.n	800f6bc <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800f69c:	2303      	movs	r3, #3
 800f69e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2203      	movs	r2, #3
 800f6a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f6a8:	4b07      	ldr	r3, [pc, #28]	@ (800f6c8 <RTC_EnterInitMode+0x74>)
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d104      	bne.n	800f6be <RTC_EnterInitMode+0x6a>
 800f6b4:	7bfb      	ldrb	r3, [r7, #15]
 800f6b6:	2b03      	cmp	r3, #3
 800f6b8:	d1e2      	bne.n	800f680 <RTC_EnterInitMode+0x2c>
 800f6ba:	e000      	b.n	800f6be <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800f6bc:	bf00      	nop
        }
      }
    }
  }

  return status;
 800f6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3710      	adds	r7, #16
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	44007800 	.word	0x44007800

0800f6cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800f6d8:	4b1a      	ldr	r3, [pc, #104]	@ (800f744 <RTC_ExitInitMode+0x78>)
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	4a19      	ldr	r2, [pc, #100]	@ (800f744 <RTC_ExitInitMode+0x78>)
 800f6de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6e2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800f6e4:	4b17      	ldr	r3, [pc, #92]	@ (800f744 <RTC_ExitInitMode+0x78>)
 800f6e6:	699b      	ldr	r3, [r3, #24]
 800f6e8:	f003 0320 	and.w	r3, r3, #32
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d10c      	bne.n	800f70a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f7ff ff7d 	bl	800f5f0 <HAL_RTC_WaitForSynchro>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d01e      	beq.n	800f73a <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2203      	movs	r2, #3
 800f700:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800f704:	2303      	movs	r3, #3
 800f706:	73fb      	strb	r3, [r7, #15]
 800f708:	e017      	b.n	800f73a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800f70a:	4b0e      	ldr	r3, [pc, #56]	@ (800f744 <RTC_ExitInitMode+0x78>)
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	4a0d      	ldr	r2, [pc, #52]	@ (800f744 <RTC_ExitInitMode+0x78>)
 800f710:	f023 0320 	bic.w	r3, r3, #32
 800f714:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f7ff ff6a 	bl	800f5f0 <HAL_RTC_WaitForSynchro>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d005      	beq.n	800f72e <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2203      	movs	r2, #3
 800f726:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800f72a:	2303      	movs	r3, #3
 800f72c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800f72e:	4b05      	ldr	r3, [pc, #20]	@ (800f744 <RTC_ExitInitMode+0x78>)
 800f730:	699b      	ldr	r3, [r3, #24]
 800f732:	4a04      	ldr	r2, [pc, #16]	@ (800f744 <RTC_ExitInitMode+0x78>)
 800f734:	f043 0320 	orr.w	r3, r3, #32
 800f738:	6193      	str	r3, [r2, #24]
  }
  return status;
 800f73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3710      	adds	r7, #16
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}
 800f744:	44007800 	.word	0x44007800

0800f748 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f748:	b480      	push	{r7}
 800f74a:	b085      	sub	sp, #20
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	4603      	mov	r3, r0
 800f750:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800f752:	2300      	movs	r3, #0
 800f754:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800f756:	79fb      	ldrb	r3, [r7, #7]
 800f758:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800f75a:	e005      	b.n	800f768 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	3301      	adds	r3, #1
 800f760:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800f762:	7afb      	ldrb	r3, [r7, #11]
 800f764:	3b0a      	subs	r3, #10
 800f766:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800f768:	7afb      	ldrb	r3, [r7, #11]
 800f76a:	2b09      	cmp	r3, #9
 800f76c:	d8f6      	bhi.n	800f75c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	b2db      	uxtb	r3, r3
 800f772:	011b      	lsls	r3, r3, #4
 800f774:	b2da      	uxtb	r2, r3
 800f776:	7afb      	ldrb	r3, [r7, #11]
 800f778:	4313      	orrs	r3, r2
 800f77a:	b2db      	uxtb	r3, r3
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3714      	adds	r7, #20
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr

0800f788 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800f788:	b480      	push	{r7}
 800f78a:	b083      	sub	sp, #12
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	4910      	ldr	r1, [pc, #64]	@ (800f7dc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800f79c:	4313      	orrs	r3, r2
 800f79e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	689a      	ldr	r2, [r3, #8]
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	68db      	ldr	r3, [r3, #12]
 800f7a8:	431a      	orrs	r2, r3
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	699b      	ldr	r3, [r3, #24]
 800f7ae:	490c      	ldr	r1, [pc, #48]	@ (800f7e0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800f7b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f7e0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800f7b6:	6a1b      	ldr	r3, [r3, #32]
 800f7b8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	6919      	ldr	r1, [r3, #16]
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	695b      	ldr	r3, [r3, #20]
 800f7c4:	041b      	lsls	r3, r3, #16
 800f7c6:	430b      	orrs	r3, r1
 800f7c8:	4905      	ldr	r1, [pc, #20]	@ (800f7e0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800f7ca:	4313      	orrs	r3, r2
 800f7cc:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800f7ce:	2300      	movs	r3, #0
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	370c      	adds	r7, #12
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr
 800f7dc:	44007800 	.word	0x44007800
 800f7e0:	44007c00 	.word	0x44007c00

0800f7e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d101      	bne.n	800f7f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	e162      	b.n	800fabc <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a70      	ldr	r2, [pc, #448]	@ (800f9bc <HAL_SPI_Init+0x1d8>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d018      	beq.n	800f832 <HAL_SPI_Init+0x4e>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4a6e      	ldr	r2, [pc, #440]	@ (800f9c0 <HAL_SPI_Init+0x1dc>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d013      	beq.n	800f832 <HAL_SPI_Init+0x4e>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	4a6d      	ldr	r2, [pc, #436]	@ (800f9c4 <HAL_SPI_Init+0x1e0>)
 800f810:	4293      	cmp	r3, r2
 800f812:	d00e      	beq.n	800f832 <HAL_SPI_Init+0x4e>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	4a6b      	ldr	r2, [pc, #428]	@ (800f9c8 <HAL_SPI_Init+0x1e4>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d009      	beq.n	800f832 <HAL_SPI_Init+0x4e>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	4a6a      	ldr	r2, [pc, #424]	@ (800f9cc <HAL_SPI_Init+0x1e8>)
 800f824:	4293      	cmp	r3, r2
 800f826:	d004      	beq.n	800f832 <HAL_SPI_Init+0x4e>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	4a68      	ldr	r2, [pc, #416]	@ (800f9d0 <HAL_SPI_Init+0x1ec>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	e000      	b.n	800f834 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800f832:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2200      	movs	r2, #0
 800f838:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4a5f      	ldr	r2, [pc, #380]	@ (800f9bc <HAL_SPI_Init+0x1d8>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d018      	beq.n	800f876 <HAL_SPI_Init+0x92>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a5d      	ldr	r2, [pc, #372]	@ (800f9c0 <HAL_SPI_Init+0x1dc>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d013      	beq.n	800f876 <HAL_SPI_Init+0x92>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	4a5c      	ldr	r2, [pc, #368]	@ (800f9c4 <HAL_SPI_Init+0x1e0>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d00e      	beq.n	800f876 <HAL_SPI_Init+0x92>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4a5a      	ldr	r2, [pc, #360]	@ (800f9c8 <HAL_SPI_Init+0x1e4>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d009      	beq.n	800f876 <HAL_SPI_Init+0x92>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4a59      	ldr	r2, [pc, #356]	@ (800f9cc <HAL_SPI_Init+0x1e8>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d004      	beq.n	800f876 <HAL_SPI_Init+0x92>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a57      	ldr	r2, [pc, #348]	@ (800f9d0 <HAL_SPI_Init+0x1ec>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d105      	bne.n	800f882 <HAL_SPI_Init+0x9e>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	2b0f      	cmp	r3, #15
 800f87c:	d901      	bls.n	800f882 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800f87e:	2301      	movs	r3, #1
 800f880:	e11c      	b.n	800fabc <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 fee2 	bl	801064c <SPI_GetPacketSize>
 800f888:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	4a4b      	ldr	r2, [pc, #300]	@ (800f9bc <HAL_SPI_Init+0x1d8>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d018      	beq.n	800f8c6 <HAL_SPI_Init+0xe2>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4a49      	ldr	r2, [pc, #292]	@ (800f9c0 <HAL_SPI_Init+0x1dc>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d013      	beq.n	800f8c6 <HAL_SPI_Init+0xe2>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	4a48      	ldr	r2, [pc, #288]	@ (800f9c4 <HAL_SPI_Init+0x1e0>)
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d00e      	beq.n	800f8c6 <HAL_SPI_Init+0xe2>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4a46      	ldr	r2, [pc, #280]	@ (800f9c8 <HAL_SPI_Init+0x1e4>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d009      	beq.n	800f8c6 <HAL_SPI_Init+0xe2>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4a45      	ldr	r2, [pc, #276]	@ (800f9cc <HAL_SPI_Init+0x1e8>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d004      	beq.n	800f8c6 <HAL_SPI_Init+0xe2>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a43      	ldr	r2, [pc, #268]	@ (800f9d0 <HAL_SPI_Init+0x1ec>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d102      	bne.n	800f8cc <HAL_SPI_Init+0xe8>
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2b08      	cmp	r3, #8
 800f8ca:	d820      	bhi.n	800f90e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f8d0:	4a40      	ldr	r2, [pc, #256]	@ (800f9d4 <HAL_SPI_Init+0x1f0>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d018      	beq.n	800f908 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4a3f      	ldr	r2, [pc, #252]	@ (800f9d8 <HAL_SPI_Init+0x1f4>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d013      	beq.n	800f908 <HAL_SPI_Init+0x124>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4a3d      	ldr	r2, [pc, #244]	@ (800f9dc <HAL_SPI_Init+0x1f8>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d00e      	beq.n	800f908 <HAL_SPI_Init+0x124>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4a3c      	ldr	r2, [pc, #240]	@ (800f9e0 <HAL_SPI_Init+0x1fc>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d009      	beq.n	800f908 <HAL_SPI_Init+0x124>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a3a      	ldr	r2, [pc, #232]	@ (800f9e4 <HAL_SPI_Init+0x200>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d004      	beq.n	800f908 <HAL_SPI_Init+0x124>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	4a39      	ldr	r2, [pc, #228]	@ (800f9e8 <HAL_SPI_Init+0x204>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d104      	bne.n	800f912 <HAL_SPI_Init+0x12e>
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2b10      	cmp	r3, #16
 800f90c:	d901      	bls.n	800f912 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800f90e:	2301      	movs	r3, #1
 800f910:	e0d4      	b.n	800fabc <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d106      	bne.n	800f92c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f7f4 ffd0 	bl	80048cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2202      	movs	r2, #2
 800f930:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f022 0201 	bic.w	r2, r2, #1
 800f942:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	689b      	ldr	r3, [r3, #8]
 800f94a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800f94e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	699b      	ldr	r3, [r3, #24]
 800f954:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f958:	d119      	bne.n	800f98e <HAL_SPI_Init+0x1aa>
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f962:	d103      	bne.n	800f96c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d008      	beq.n	800f97e <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f970:	2b00      	cmp	r3, #0
 800f972:	d10c      	bne.n	800f98e <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f978:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f97c:	d107      	bne.n	800f98e <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f98c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f996:	2b00      	cmp	r3, #0
 800f998:	d028      	beq.n	800f9ec <HAL_SPI_Init+0x208>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	2b06      	cmp	r3, #6
 800f9a0:	d924      	bls.n	800f9ec <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	430a      	orrs	r2, r1
 800f9b6:	601a      	str	r2, [r3, #0]
 800f9b8:	e020      	b.n	800f9fc <HAL_SPI_Init+0x218>
 800f9ba:	bf00      	nop
 800f9bc:	40014c00 	.word	0x40014c00
 800f9c0:	50014c00 	.word	0x50014c00
 800f9c4:	44002000 	.word	0x44002000
 800f9c8:	54002000 	.word	0x54002000
 800f9cc:	40015000 	.word	0x40015000
 800f9d0:	50015000 	.word	0x50015000
 800f9d4:	40013000 	.word	0x40013000
 800f9d8:	50013000 	.word	0x50013000
 800f9dc:	40003800 	.word	0x40003800
 800f9e0:	50003800 	.word	0x50003800
 800f9e4:	40003c00 	.word	0x40003c00
 800f9e8:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f9fa:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	69da      	ldr	r2, [r3, #28]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa04:	431a      	orrs	r2, r3
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	431a      	orrs	r2, r3
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa0e:	ea42 0103 	orr.w	r1, r2, r3
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	68da      	ldr	r2, [r3, #12]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	430a      	orrs	r2, r1
 800fa1c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa26:	431a      	orrs	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa2c:	431a      	orrs	r2, r3
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	699b      	ldr	r3, [r3, #24]
 800fa32:	431a      	orrs	r2, r3
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	691b      	ldr	r3, [r3, #16]
 800fa38:	431a      	orrs	r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	695b      	ldr	r3, [r3, #20]
 800fa3e:	431a      	orrs	r2, r3
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6a1b      	ldr	r3, [r3, #32]
 800fa44:	431a      	orrs	r2, r3
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	431a      	orrs	r2, r3
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa50:	431a      	orrs	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	689b      	ldr	r3, [r3, #8]
 800fa56:	431a      	orrs	r2, r3
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fa5c:	431a      	orrs	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa62:	431a      	orrs	r2, r3
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fa68:	ea42 0103 	orr.w	r1, r2, r3
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	430a      	orrs	r2, r1
 800fa76:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	f022 0201 	bic.w	r2, r2, #1
 800fa86:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d00a      	beq.n	800faaa <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	430a      	orrs	r2, r1
 800faa8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2200      	movs	r2, #0
 800faae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2201      	movs	r2, #1
 800fab6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3710      	adds	r7, #16
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b088      	sub	sp, #32
 800fac8:	af02      	add	r7, sp, #8
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	603b      	str	r3, [r7, #0]
 800fad0:	4613      	mov	r3, r2
 800fad2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	3320      	adds	r3, #32
 800fada:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a92      	ldr	r2, [pc, #584]	@ (800fd2c <HAL_SPI_Transmit+0x268>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d012      	beq.n	800fb0c <HAL_SPI_Transmit+0x48>
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	4a91      	ldr	r2, [pc, #580]	@ (800fd30 <HAL_SPI_Transmit+0x26c>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d00d      	beq.n	800fb0c <HAL_SPI_Transmit+0x48>
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a8f      	ldr	r2, [pc, #572]	@ (800fd34 <HAL_SPI_Transmit+0x270>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d008      	beq.n	800fb0c <HAL_SPI_Transmit+0x48>
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	4a8e      	ldr	r2, [pc, #568]	@ (800fd38 <HAL_SPI_Transmit+0x274>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d003      	beq.n	800fb0c <HAL_SPI_Transmit+0x48>
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	4a8c      	ldr	r2, [pc, #560]	@ (800fd3c <HAL_SPI_Transmit+0x278>)
 800fb0a:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fb0c:	f7f5 fdb2 	bl	8005674 <HAL_GetTick>
 800fb10:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d001      	beq.n	800fb22 <HAL_SPI_Transmit+0x5e>
  {
    return HAL_BUSY;
 800fb1e:	2302      	movs	r3, #2
 800fb20:	e204      	b.n	800ff2c <HAL_SPI_Transmit+0x468>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d002      	beq.n	800fb2e <HAL_SPI_Transmit+0x6a>
 800fb28:	88fb      	ldrh	r3, [r7, #6]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d101      	bne.n	800fb32 <HAL_SPI_Transmit+0x6e>
  {
    return HAL_ERROR;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	e1fc      	b.n	800ff2c <HAL_SPI_Transmit+0x468>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d101      	bne.n	800fb40 <HAL_SPI_Transmit+0x7c>
 800fb3c:	2302      	movs	r3, #2
 800fb3e:	e1f5      	b.n	800ff2c <HAL_SPI_Transmit+0x468>
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2201      	movs	r2, #1
 800fb44:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	2203      	movs	r2, #3
 800fb4c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2200      	movs	r2, #0
 800fb54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	68ba      	ldr	r2, [r7, #8]
 800fb5c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	88fa      	ldrh	r2, [r7, #6]
 800fb62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	88fa      	ldrh	r2, [r7, #6]
 800fb6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2200      	movs	r2, #0
 800fb72:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2200      	movs	r2, #0
 800fb88:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	689b      	ldr	r3, [r3, #8]
 800fb94:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800fb98:	d108      	bne.n	800fbac <HAL_SPI_Transmit+0xe8>
  {
    SPI_1LINE_TX(hspi);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800fba8:	601a      	str	r2, [r3, #0]
 800fbaa:	e009      	b.n	800fbc0 <HAL_SPI_Transmit+0xfc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	68db      	ldr	r3, [r3, #12]
 800fbb2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800fbbe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	0c1b      	lsrs	r3, r3, #16
 800fbc8:	041b      	lsls	r3, r3, #16
 800fbca:	88f9      	ldrh	r1, [r7, #6]
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	6812      	ldr	r2, [r2, #0]
 800fbd0:	430b      	orrs	r3, r1
 800fbd2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	f042 0201 	orr.w	r2, r2, #1
 800fbe2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fbec:	d107      	bne.n	800fbfe <HAL_SPI_Transmit+0x13a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fbfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	68db      	ldr	r3, [r3, #12]
 800fc02:	2b0f      	cmp	r3, #15
 800fc04:	d965      	bls.n	800fcd2 <HAL_SPI_Transmit+0x20e>
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4a4d      	ldr	r2, [pc, #308]	@ (800fd40 <HAL_SPI_Transmit+0x27c>)
 800fc0c:	4293      	cmp	r3, r2
 800fc0e:	d059      	beq.n	800fcc4 <HAL_SPI_Transmit+0x200>
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4a4b      	ldr	r2, [pc, #300]	@ (800fd44 <HAL_SPI_Transmit+0x280>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d054      	beq.n	800fcc4 <HAL_SPI_Transmit+0x200>
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4a4a      	ldr	r2, [pc, #296]	@ (800fd48 <HAL_SPI_Transmit+0x284>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d04f      	beq.n	800fcc4 <HAL_SPI_Transmit+0x200>
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4a48      	ldr	r2, [pc, #288]	@ (800fd4c <HAL_SPI_Transmit+0x288>)
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d04a      	beq.n	800fcc4 <HAL_SPI_Transmit+0x200>
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	4a47      	ldr	r2, [pc, #284]	@ (800fd50 <HAL_SPI_Transmit+0x28c>)
 800fc34:	4293      	cmp	r3, r2
 800fc36:	d045      	beq.n	800fcc4 <HAL_SPI_Transmit+0x200>
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	4a45      	ldr	r2, [pc, #276]	@ (800fd54 <HAL_SPI_Transmit+0x290>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d147      	bne.n	800fcd2 <HAL_SPI_Transmit+0x20e>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fc42:	e03f      	b.n	800fcc4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	695b      	ldr	r3, [r3, #20]
 800fc4a:	f003 0302 	and.w	r3, r3, #2
 800fc4e:	2b02      	cmp	r3, #2
 800fc50:	d114      	bne.n	800fc7c <HAL_SPI_Transmit+0x1b8>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	6812      	ldr	r2, [r2, #0]
 800fc5c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc62:	1d1a      	adds	r2, r3, #4
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	3b01      	subs	r3, #1
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fc7a:	e023      	b.n	800fcc4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fc7c:	f7f5 fcfa 	bl	8005674 <HAL_GetTick>
 800fc80:	4602      	mov	r2, r0
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	1ad3      	subs	r3, r2, r3
 800fc86:	683a      	ldr	r2, [r7, #0]
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	d803      	bhi.n	800fc94 <HAL_SPI_Transmit+0x1d0>
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc92:	d102      	bne.n	800fc9a <HAL_SPI_Transmit+0x1d6>
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d114      	bne.n	800fcc4 <HAL_SPI_Transmit+0x200>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fc9a:	68f8      	ldr	r0, [r7, #12]
 800fc9c:	f000 fc08 	bl	80104b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fca6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800fcc0:	2303      	movs	r3, #3
 800fcc2:	e133      	b.n	800ff2c <HAL_SPI_Transmit+0x468>
    while (hspi->TxXferCount > 0UL)
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d1b9      	bne.n	800fc44 <HAL_SPI_Transmit+0x180>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800fcd0:	e106      	b.n	800fee0 <HAL_SPI_Transmit+0x41c>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	68db      	ldr	r3, [r3, #12]
 800fcd6:	2b07      	cmp	r3, #7
 800fcd8:	f240 80fb 	bls.w	800fed2 <HAL_SPI_Transmit+0x40e>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fcdc:	e074      	b.n	800fdc8 <HAL_SPI_Transmit+0x304>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	695b      	ldr	r3, [r3, #20]
 800fce4:	f003 0302 	and.w	r3, r3, #2
 800fce8:	2b02      	cmp	r3, #2
 800fcea:	d149      	bne.n	800fd80 <HAL_SPI_Transmit+0x2bc>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d92f      	bls.n	800fd58 <HAL_SPI_Transmit+0x294>
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d02b      	beq.n	800fd58 <HAL_SPI_Transmit+0x294>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	6812      	ldr	r2, [r2, #0]
 800fd0a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd10:	1d1a      	adds	r2, r3, #4
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	3b02      	subs	r3, #2
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fd28:	e04e      	b.n	800fdc8 <HAL_SPI_Transmit+0x304>
 800fd2a:	bf00      	nop
 800fd2c:	40014c00 	.word	0x40014c00
 800fd30:	50014c00 	.word	0x50014c00
 800fd34:	44002000 	.word	0x44002000
 800fd38:	54002000 	.word	0x54002000
 800fd3c:	40015000 	.word	0x40015000
 800fd40:	40013000 	.word	0x40013000
 800fd44:	50013000 	.word	0x50013000
 800fd48:	40003800 	.word	0x40003800
 800fd4c:	50003800 	.word	0x50003800
 800fd50:	40003c00 	.word	0x40003c00
 800fd54:	50003c00 	.word	0x50003c00
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd5c:	881a      	ldrh	r2, [r3, #0]
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fd66:	1c9a      	adds	r2, r3, #2
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	3b01      	subs	r3, #1
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fd7e:	e023      	b.n	800fdc8 <HAL_SPI_Transmit+0x304>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd80:	f7f5 fc78 	bl	8005674 <HAL_GetTick>
 800fd84:	4602      	mov	r2, r0
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	1ad3      	subs	r3, r2, r3
 800fd8a:	683a      	ldr	r2, [r7, #0]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d803      	bhi.n	800fd98 <HAL_SPI_Transmit+0x2d4>
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd96:	d102      	bne.n	800fd9e <HAL_SPI_Transmit+0x2da>
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d114      	bne.n	800fdc8 <HAL_SPI_Transmit+0x304>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f000 fb86 	bl	80104b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fdaa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800fdc4:	2303      	movs	r3, #3
 800fdc6:	e0b1      	b.n	800ff2c <HAL_SPI_Transmit+0x468>
    while (hspi->TxXferCount > 0UL)
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d184      	bne.n	800fcde <HAL_SPI_Transmit+0x21a>
 800fdd4:	e084      	b.n	800fee0 <HAL_SPI_Transmit+0x41c>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	695b      	ldr	r3, [r3, #20]
 800fddc:	f003 0302 	and.w	r3, r3, #2
 800fde0:	2b02      	cmp	r3, #2
 800fde2:	d152      	bne.n	800fe8a <HAL_SPI_Transmit+0x3c6>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	2b03      	cmp	r3, #3
 800fdee:	d918      	bls.n	800fe22 <HAL_SPI_Transmit+0x35e>
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdf4:	2b40      	cmp	r3, #64	@ 0x40
 800fdf6:	d914      	bls.n	800fe22 <HAL_SPI_Transmit+0x35e>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	6812      	ldr	r2, [r2, #0]
 800fe02:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe08:	1d1a      	adds	r2, r3, #4
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	3b04      	subs	r3, #4
 800fe18:	b29a      	uxth	r2, r3
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fe20:	e057      	b.n	800fed2 <HAL_SPI_Transmit+0x40e>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d917      	bls.n	800fe5e <HAL_SPI_Transmit+0x39a>
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d013      	beq.n	800fe5e <HAL_SPI_Transmit+0x39a>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe3a:	881a      	ldrh	r2, [r3, #0]
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe44:	1c9a      	adds	r2, r3, #2
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	3b02      	subs	r3, #2
 800fe54:	b29a      	uxth	r2, r3
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fe5c:	e039      	b.n	800fed2 <HAL_SPI_Transmit+0x40e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	3320      	adds	r3, #32
 800fe68:	7812      	ldrb	r2, [r2, #0]
 800fe6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe70:	1c5a      	adds	r2, r3, #1
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	3b01      	subs	r3, #1
 800fe80:	b29a      	uxth	r2, r3
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fe88:	e023      	b.n	800fed2 <HAL_SPI_Transmit+0x40e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fe8a:	f7f5 fbf3 	bl	8005674 <HAL_GetTick>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	1ad3      	subs	r3, r2, r3
 800fe94:	683a      	ldr	r2, [r7, #0]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d803      	bhi.n	800fea2 <HAL_SPI_Transmit+0x3de>
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fea0:	d102      	bne.n	800fea8 <HAL_SPI_Transmit+0x3e4>
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d114      	bne.n	800fed2 <HAL_SPI_Transmit+0x40e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	f000 fb01 	bl	80104b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800feb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2201      	movs	r2, #1
 800fec2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	2200      	movs	r2, #0
 800feca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800fece:	2303      	movs	r3, #3
 800fed0:	e02c      	b.n	800ff2c <HAL_SPI_Transmit+0x468>
    while (hspi->TxXferCount > 0UL)
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fed8:	b29b      	uxth	r3, r3
 800feda:	2b00      	cmp	r3, #0
 800fedc:	f47f af7b 	bne.w	800fdd6 <HAL_SPI_Transmit+0x312>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	9300      	str	r3, [sp, #0]
 800fee4:	683b      	ldr	r3, [r7, #0]
 800fee6:	2200      	movs	r2, #0
 800fee8:	2108      	movs	r1, #8
 800feea:	68f8      	ldr	r0, [r7, #12]
 800feec:	f000 fb80 	bl	80105f0 <SPI_WaitOnFlagUntilTimeout>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d007      	beq.n	800ff06 <HAL_SPI_Transmit+0x442>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fefc:	f043 0220 	orr.w	r2, r3, #32
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ff06:	68f8      	ldr	r0, [r7, #12]
 800ff08:	f000 fad2 	bl	80104b0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2201      	movs	r2, #1
 800ff10:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	2200      	movs	r2, #0
 800ff18:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d001      	beq.n	800ff2a <HAL_SPI_Transmit+0x466>
  {
    return HAL_ERROR;
 800ff26:	2301      	movs	r3, #1
 800ff28:	e000      	b.n	800ff2c <HAL_SPI_Transmit+0x468>
  }
  else
  {
    return HAL_OK;
 800ff2a:	2300      	movs	r3, #0
  }
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3718      	adds	r7, #24
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b088      	sub	sp, #32
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	603b      	str	r3, [r7, #0]
 800ff40:	4613      	mov	r3, r2
 800ff42:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff48:	095b      	lsrs	r3, r3, #5
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	3330      	adds	r3, #48	@ 0x30
 800ff56:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	4a92      	ldr	r2, [pc, #584]	@ (80101a8 <HAL_SPI_Receive+0x274>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d012      	beq.n	800ff88 <HAL_SPI_Receive+0x54>
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	4a91      	ldr	r2, [pc, #580]	@ (80101ac <HAL_SPI_Receive+0x278>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d00d      	beq.n	800ff88 <HAL_SPI_Receive+0x54>
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4a8f      	ldr	r2, [pc, #572]	@ (80101b0 <HAL_SPI_Receive+0x27c>)
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d008      	beq.n	800ff88 <HAL_SPI_Receive+0x54>
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	4a8e      	ldr	r2, [pc, #568]	@ (80101b4 <HAL_SPI_Receive+0x280>)
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	d003      	beq.n	800ff88 <HAL_SPI_Receive+0x54>
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	4a8c      	ldr	r2, [pc, #560]	@ (80101b8 <HAL_SPI_Receive+0x284>)
 800ff86:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ff88:	f7f5 fb74 	bl	8005674 <HAL_GetTick>
 800ff8c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800ff94:	b2db      	uxtb	r3, r3
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	d001      	beq.n	800ff9e <HAL_SPI_Receive+0x6a>
  {
    return HAL_BUSY;
 800ff9a:	2302      	movs	r3, #2
 800ff9c:	e284      	b.n	80104a8 <HAL_SPI_Receive+0x574>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d002      	beq.n	800ffaa <HAL_SPI_Receive+0x76>
 800ffa4:	88fb      	ldrh	r3, [r7, #6]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d101      	bne.n	800ffae <HAL_SPI_Receive+0x7a>
  {
    return HAL_ERROR;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	e27c      	b.n	80104a8 <HAL_SPI_Receive+0x574>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d101      	bne.n	800ffbc <HAL_SPI_Receive+0x88>
 800ffb8:	2302      	movs	r3, #2
 800ffba:	e275      	b.n	80104a8 <HAL_SPI_Receive+0x574>
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	2204      	movs	r2, #4
 800ffc8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	68ba      	ldr	r2, [r7, #8]
 800ffd8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	88fa      	ldrh	r2, [r7, #6]
 800ffde:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	88fa      	ldrh	r2, [r7, #6]
 800ffe6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2200      	movs	r2, #0
 800ffee:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2200      	movs	r2, #0
 800fff4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	2200      	movs	r2, #0
 800fffc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	2200      	movs	r2, #0
 8010004:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2200      	movs	r2, #0
 801000a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	689b      	ldr	r3, [r3, #8]
 8010010:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8010014:	d108      	bne.n	8010028 <HAL_SPI_Receive+0xf4>
  {
    SPI_1LINE_RX(hspi);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8010024:	601a      	str	r2, [r3, #0]
 8010026:	e009      	b.n	801003c <HAL_SPI_Receive+0x108>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801003a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	0c1b      	lsrs	r3, r3, #16
 8010044:	041b      	lsls	r3, r3, #16
 8010046:	88f9      	ldrh	r1, [r7, #6]
 8010048:	68fa      	ldr	r2, [r7, #12]
 801004a:	6812      	ldr	r2, [r2, #0]
 801004c:	430b      	orrs	r3, r1
 801004e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f042 0201 	orr.w	r2, r2, #1
 801005e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010068:	d107      	bne.n	801007a <HAL_SPI_Receive+0x146>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	681a      	ldr	r2, [r3, #0]
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010078:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	68db      	ldr	r3, [r3, #12]
 801007e:	2b0f      	cmp	r3, #15
 8010080:	f240 808b 	bls.w	801019a <HAL_SPI_Receive+0x266>
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	4a4c      	ldr	r2, [pc, #304]	@ (80101bc <HAL_SPI_Receive+0x288>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d07e      	beq.n	801018c <HAL_SPI_Receive+0x258>
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	4a4b      	ldr	r2, [pc, #300]	@ (80101c0 <HAL_SPI_Receive+0x28c>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d079      	beq.n	801018c <HAL_SPI_Receive+0x258>
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4a49      	ldr	r2, [pc, #292]	@ (80101c4 <HAL_SPI_Receive+0x290>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d074      	beq.n	801018c <HAL_SPI_Receive+0x258>
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	4a48      	ldr	r2, [pc, #288]	@ (80101c8 <HAL_SPI_Receive+0x294>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d06f      	beq.n	801018c <HAL_SPI_Receive+0x258>
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4a46      	ldr	r2, [pc, #280]	@ (80101cc <HAL_SPI_Receive+0x298>)
 80100b2:	4293      	cmp	r3, r2
 80100b4:	d06a      	beq.n	801018c <HAL_SPI_Receive+0x258>
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4a45      	ldr	r2, [pc, #276]	@ (80101d0 <HAL_SPI_Receive+0x29c>)
 80100bc:	4293      	cmp	r3, r2
 80100be:	d16c      	bne.n	801019a <HAL_SPI_Receive+0x266>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80100c0:	e064      	b.n	801018c <HAL_SPI_Receive+0x258>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	695b      	ldr	r3, [r3, #20]
 80100c8:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	695b      	ldr	r3, [r3, #20]
 80100d0:	f003 0301 	and.w	r3, r3, #1
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d114      	bne.n	8010102 <HAL_SPI_Receive+0x1ce>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80100e2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100e8:	1d1a      	adds	r2, r3, #4
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	3b01      	subs	r3, #1
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8010100:	e044      	b.n	801018c <HAL_SPI_Receive+0x258>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010108:	b29b      	uxth	r3, r3
 801010a:	8bfa      	ldrh	r2, [r7, #30]
 801010c:	429a      	cmp	r2, r3
 801010e:	d919      	bls.n	8010144 <HAL_SPI_Receive+0x210>
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010116:	2b00      	cmp	r3, #0
 8010118:	d014      	beq.n	8010144 <HAL_SPI_Receive+0x210>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010122:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010124:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801012a:	1d1a      	adds	r2, r3, #4
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010136:	b29b      	uxth	r3, r3
 8010138:	3b01      	subs	r3, #1
 801013a:	b29a      	uxth	r2, r3
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8010142:	e023      	b.n	801018c <HAL_SPI_Receive+0x258>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010144:	f7f5 fa96 	bl	8005674 <HAL_GetTick>
 8010148:	4602      	mov	r2, r0
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	683a      	ldr	r2, [r7, #0]
 8010150:	429a      	cmp	r2, r3
 8010152:	d803      	bhi.n	801015c <HAL_SPI_Receive+0x228>
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	f1b3 3fff 	cmp.w	r3, #4294967295
 801015a:	d102      	bne.n	8010162 <HAL_SPI_Receive+0x22e>
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d114      	bne.n	801018c <HAL_SPI_Receive+0x258>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	f000 f9a4 	bl	80104b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801016e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	2201      	movs	r2, #1
 801017c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2200      	movs	r2, #0
 8010184:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8010188:	2303      	movs	r3, #3
 801018a:	e18d      	b.n	80104a8 <HAL_SPI_Receive+0x574>
    while (hspi->RxXferCount > 0UL)
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010192:	b29b      	uxth	r3, r3
 8010194:	2b00      	cmp	r3, #0
 8010196:	d194      	bne.n	80100c2 <HAL_SPI_Receive+0x18e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8010198:	e173      	b.n	8010482 <HAL_SPI_Receive+0x54e>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	68db      	ldr	r3, [r3, #12]
 801019e:	2b07      	cmp	r3, #7
 80101a0:	f240 8168 	bls.w	8010474 <HAL_SPI_Receive+0x540>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80101a4:	e0a6      	b.n	80102f4 <HAL_SPI_Receive+0x3c0>
 80101a6:	bf00      	nop
 80101a8:	40014c00 	.word	0x40014c00
 80101ac:	50014c00 	.word	0x50014c00
 80101b0:	44002000 	.word	0x44002000
 80101b4:	54002000 	.word	0x54002000
 80101b8:	40015000 	.word	0x40015000
 80101bc:	40013000 	.word	0x40013000
 80101c0:	50013000 	.word	0x50013000
 80101c4:	40003800 	.word	0x40003800
 80101c8:	50003800 	.word	0x50003800
 80101cc:	40003c00 	.word	0x40003c00
 80101d0:	50003c00 	.word	0x50003c00
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	695b      	ldr	r3, [r3, #20]
 80101da:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	695b      	ldr	r3, [r3, #20]
 80101e2:	f003 0301 	and.w	r3, r3, #1
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d114      	bne.n	8010214 <HAL_SPI_Receive+0x2e0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101ee:	69ba      	ldr	r2, [r7, #24]
 80101f0:	8812      	ldrh	r2, [r2, #0]
 80101f2:	b292      	uxth	r2, r2
 80101f4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101fa:	1c9a      	adds	r2, r3, #2
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010206:	b29b      	uxth	r3, r3
 8010208:	3b01      	subs	r3, #1
 801020a:	b29a      	uxth	r2, r3
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8010212:	e06f      	b.n	80102f4 <HAL_SPI_Receive+0x3c0>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801021a:	b29b      	uxth	r3, r3
 801021c:	8bfa      	ldrh	r2, [r7, #30]
 801021e:	429a      	cmp	r2, r3
 8010220:	d924      	bls.n	801026c <HAL_SPI_Receive+0x338>
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010228:	2b00      	cmp	r3, #0
 801022a:	d01f      	beq.n	801026c <HAL_SPI_Receive+0x338>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010230:	69ba      	ldr	r2, [r7, #24]
 8010232:	8812      	ldrh	r2, [r2, #0]
 8010234:	b292      	uxth	r2, r2
 8010236:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801023c:	1c9a      	adds	r2, r3, #2
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010246:	69ba      	ldr	r2, [r7, #24]
 8010248:	8812      	ldrh	r2, [r2, #0]
 801024a:	b292      	uxth	r2, r2
 801024c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010252:	1c9a      	adds	r2, r3, #2
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801025e:	b29b      	uxth	r3, r3
 8010260:	3b02      	subs	r3, #2
 8010262:	b29a      	uxth	r2, r3
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 801026a:	e043      	b.n	80102f4 <HAL_SPI_Receive+0x3c0>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010272:	b29b      	uxth	r3, r3
 8010274:	2b01      	cmp	r3, #1
 8010276:	d119      	bne.n	80102ac <HAL_SPI_Receive+0x378>
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801027e:	2b00      	cmp	r3, #0
 8010280:	d014      	beq.n	80102ac <HAL_SPI_Receive+0x378>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010286:	69ba      	ldr	r2, [r7, #24]
 8010288:	8812      	ldrh	r2, [r2, #0]
 801028a:	b292      	uxth	r2, r2
 801028c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010292:	1c9a      	adds	r2, r3, #2
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801029e:	b29b      	uxth	r3, r3
 80102a0:	3b01      	subs	r3, #1
 80102a2:	b29a      	uxth	r2, r3
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80102aa:	e023      	b.n	80102f4 <HAL_SPI_Receive+0x3c0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80102ac:	f7f5 f9e2 	bl	8005674 <HAL_GetTick>
 80102b0:	4602      	mov	r2, r0
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	1ad3      	subs	r3, r2, r3
 80102b6:	683a      	ldr	r2, [r7, #0]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d803      	bhi.n	80102c4 <HAL_SPI_Receive+0x390>
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c2:	d102      	bne.n	80102ca <HAL_SPI_Receive+0x396>
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d114      	bne.n	80102f4 <HAL_SPI_Receive+0x3c0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80102ca:	68f8      	ldr	r0, [r7, #12]
 80102cc:	f000 f8f0 	bl	80104b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80102d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2201      	movs	r2, #1
 80102e4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	2200      	movs	r2, #0
 80102ec:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80102f0:	2303      	movs	r3, #3
 80102f2:	e0d9      	b.n	80104a8 <HAL_SPI_Receive+0x574>
    while (hspi->RxXferCount > 0UL)
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f47f af69 	bne.w	80101d4 <HAL_SPI_Receive+0x2a0>
 8010302:	e0be      	b.n	8010482 <HAL_SPI_Receive+0x54e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	695b      	ldr	r3, [r3, #20]
 801030a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	695b      	ldr	r3, [r3, #20]
 8010312:	f003 0301 	and.w	r3, r3, #1
 8010316:	2b01      	cmp	r3, #1
 8010318:	d117      	bne.n	801034a <HAL_SPI_Receive+0x416>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010326:	7812      	ldrb	r2, [r2, #0]
 8010328:	b2d2      	uxtb	r2, r2
 801032a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010330:	1c5a      	adds	r2, r3, #1
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801033c:	b29b      	uxth	r3, r3
 801033e:	3b01      	subs	r3, #1
 8010340:	b29a      	uxth	r2, r3
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8010348:	e094      	b.n	8010474 <HAL_SPI_Receive+0x540>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010350:	b29b      	uxth	r3, r3
 8010352:	8bfa      	ldrh	r2, [r7, #30]
 8010354:	429a      	cmp	r2, r3
 8010356:	d946      	bls.n	80103e6 <HAL_SPI_Receive+0x4b2>
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801035e:	2b00      	cmp	r3, #0
 8010360:	d041      	beq.n	80103e6 <HAL_SPI_Receive+0x4b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801036e:	7812      	ldrb	r2, [r2, #0]
 8010370:	b2d2      	uxtb	r2, r2
 8010372:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010378:	1c5a      	adds	r2, r3, #1
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801038a:	7812      	ldrb	r2, [r2, #0]
 801038c:	b2d2      	uxtb	r2, r2
 801038e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010394:	1c5a      	adds	r2, r3, #1
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103a6:	7812      	ldrb	r2, [r2, #0]
 80103a8:	b2d2      	uxtb	r2, r2
 80103aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103b0:	1c5a      	adds	r2, r3, #1
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103c2:	7812      	ldrb	r2, [r2, #0]
 80103c4:	b2d2      	uxtb	r2, r2
 80103c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103cc:	1c5a      	adds	r2, r3, #1
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80103d8:	b29b      	uxth	r3, r3
 80103da:	3b04      	subs	r3, #4
 80103dc:	b29a      	uxth	r2, r3
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80103e4:	e046      	b.n	8010474 <HAL_SPI_Receive+0x540>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	2b03      	cmp	r3, #3
 80103f0:	d81c      	bhi.n	801042c <HAL_SPI_Receive+0x4f8>
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d017      	beq.n	801042c <HAL_SPI_Receive+0x4f8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010408:	7812      	ldrb	r2, [r2, #0]
 801040a:	b2d2      	uxtb	r2, r2
 801040c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010412:	1c5a      	adds	r2, r3, #1
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801041e:	b29b      	uxth	r3, r3
 8010420:	3b01      	subs	r3, #1
 8010422:	b29a      	uxth	r2, r3
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 801042a:	e023      	b.n	8010474 <HAL_SPI_Receive+0x540>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801042c:	f7f5 f922 	bl	8005674 <HAL_GetTick>
 8010430:	4602      	mov	r2, r0
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	1ad3      	subs	r3, r2, r3
 8010436:	683a      	ldr	r2, [r7, #0]
 8010438:	429a      	cmp	r2, r3
 801043a:	d803      	bhi.n	8010444 <HAL_SPI_Receive+0x510>
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010442:	d102      	bne.n	801044a <HAL_SPI_Receive+0x516>
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d114      	bne.n	8010474 <HAL_SPI_Receive+0x540>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801044a:	68f8      	ldr	r0, [r7, #12]
 801044c:	f000 f830 	bl	80104b0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010456:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2201      	movs	r2, #1
 8010464:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2200      	movs	r2, #0
 801046c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8010470:	2303      	movs	r3, #3
 8010472:	e019      	b.n	80104a8 <HAL_SPI_Receive+0x574>
    while (hspi->RxXferCount > 0UL)
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801047a:	b29b      	uxth	r3, r3
 801047c:	2b00      	cmp	r3, #0
 801047e:	f47f af41 	bne.w	8010304 <HAL_SPI_Receive+0x3d0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010482:	68f8      	ldr	r0, [r7, #12]
 8010484:	f000 f814 	bl	80104b0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	2201      	movs	r2, #1
 801048c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2200      	movs	r2, #0
 8010494:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d001      	beq.n	80104a6 <HAL_SPI_Receive+0x572>
  {
    return HAL_ERROR;
 80104a2:	2301      	movs	r3, #1
 80104a4:	e000      	b.n	80104a8 <HAL_SPI_Receive+0x574>
  }
  else
  {
    return HAL_OK;
 80104a6:	2300      	movs	r3, #0
  }
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3720      	adds	r7, #32
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b085      	sub	sp, #20
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	695b      	ldr	r3, [r3, #20]
 80104be:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	699a      	ldr	r2, [r3, #24]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f042 0208 	orr.w	r2, r2, #8
 80104ce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	699a      	ldr	r2, [r3, #24]
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	f042 0210 	orr.w	r2, r2, #16
 80104de:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f022 0201 	bic.w	r2, r2, #1
 80104ee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	691b      	ldr	r3, [r3, #16]
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	6812      	ldr	r2, [r2, #0]
 80104fa:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80104fe:	f023 0303 	bic.w	r3, r3, #3
 8010502:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	689a      	ldr	r2, [r3, #8]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8010512:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 801051a:	b2db      	uxtb	r3, r3
 801051c:	2b04      	cmp	r3, #4
 801051e:	d014      	beq.n	801054a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f003 0320 	and.w	r3, r3, #32
 8010526:	2b00      	cmp	r3, #0
 8010528:	d00f      	beq.n	801054a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010530:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	699a      	ldr	r2, [r3, #24]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f042 0220 	orr.w	r2, r2, #32
 8010548:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8010550:	b2db      	uxtb	r3, r3
 8010552:	2b03      	cmp	r3, #3
 8010554:	d014      	beq.n	8010580 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801055c:	2b00      	cmp	r3, #0
 801055e:	d00f      	beq.n	8010580 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010566:	f043 0204 	orr.w	r2, r3, #4
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	699a      	ldr	r2, [r3, #24]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801057e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010586:	2b00      	cmp	r3, #0
 8010588:	d00f      	beq.n	80105aa <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010590:	f043 0201 	orr.w	r2, r3, #1
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	699a      	ldr	r2, [r3, #24]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80105a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d00f      	beq.n	80105d4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80105ba:	f043 0208 	orr.w	r2, r3, #8
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	699a      	ldr	r2, [r3, #24]
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80105d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2200      	movs	r2, #0
 80105d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80105e4:	bf00      	nop
 80105e6:	3714      	adds	r7, #20
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b084      	sub	sp, #16
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	60f8      	str	r0, [r7, #12]
 80105f8:	60b9      	str	r1, [r7, #8]
 80105fa:	603b      	str	r3, [r7, #0]
 80105fc:	4613      	mov	r3, r2
 80105fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010600:	e010      	b.n	8010624 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010602:	f7f5 f837 	bl	8005674 <HAL_GetTick>
 8010606:	4602      	mov	r2, r0
 8010608:	69bb      	ldr	r3, [r7, #24]
 801060a:	1ad3      	subs	r3, r2, r3
 801060c:	683a      	ldr	r2, [r7, #0]
 801060e:	429a      	cmp	r2, r3
 8010610:	d803      	bhi.n	801061a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010618:	d102      	bne.n	8010620 <SPI_WaitOnFlagUntilTimeout+0x30>
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d101      	bne.n	8010624 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010620:	2303      	movs	r3, #3
 8010622:	e00f      	b.n	8010644 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	695a      	ldr	r2, [r3, #20]
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	4013      	ands	r3, r2
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	429a      	cmp	r2, r3
 8010632:	bf0c      	ite	eq
 8010634:	2301      	moveq	r3, #1
 8010636:	2300      	movne	r3, #0
 8010638:	b2db      	uxtb	r3, r3
 801063a:	461a      	mov	r2, r3
 801063c:	79fb      	ldrb	r3, [r7, #7]
 801063e:	429a      	cmp	r2, r3
 8010640:	d0df      	beq.n	8010602 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010642:	2300      	movs	r3, #0
}
 8010644:	4618      	mov	r0, r3
 8010646:	3710      	adds	r7, #16
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801064c:	b480      	push	{r7}
 801064e:	b085      	sub	sp, #20
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010658:	095b      	lsrs	r3, r3, #5
 801065a:	3301      	adds	r3, #1
 801065c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	68db      	ldr	r3, [r3, #12]
 8010662:	3301      	adds	r3, #1
 8010664:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	3307      	adds	r3, #7
 801066a:	08db      	lsrs	r3, r3, #3
 801066c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801066e:	68bb      	ldr	r3, [r7, #8]
 8010670:	68fa      	ldr	r2, [r7, #12]
 8010672:	fb02 f303 	mul.w	r3, r2, r3
}
 8010676:	4618      	mov	r0, r3
 8010678:	3714      	adds	r7, #20
 801067a:	46bd      	mov	sp, r7
 801067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010680:	4770      	bx	lr

08010682 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b082      	sub	sp, #8
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d101      	bne.n	8010694 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010690:	2301      	movs	r3, #1
 8010692:	e042      	b.n	801071a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801069a:	2b00      	cmp	r3, #0
 801069c:	d106      	bne.n	80106ac <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2200      	movs	r2, #0
 80106a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f7f4 f9fc 	bl	8004aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2224      	movs	r2, #36	@ 0x24
 80106b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	f022 0201 	bic.w	r2, r2, #1
 80106c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d002      	beq.n	80106d2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f000 fab5 	bl	8010c3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 f8c4 	bl	8010860 <UART_SetConfig>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d101      	bne.n	80106e2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80106de:	2301      	movs	r3, #1
 80106e0:	e01b      	b.n	801071a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	685a      	ldr	r2, [r3, #4]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80106f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	689a      	ldr	r2, [r3, #8]
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010700:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f042 0201 	orr.w	r2, r2, #1
 8010710:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f000 fb34 	bl	8010d80 <UART_CheckIdleState>
 8010718:	4603      	mov	r3, r0
}
 801071a:	4618      	mov	r0, r3
 801071c:	3708      	adds	r7, #8
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}

08010722 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010722:	b580      	push	{r7, lr}
 8010724:	b08a      	sub	sp, #40	@ 0x28
 8010726:	af02      	add	r7, sp, #8
 8010728:	60f8      	str	r0, [r7, #12]
 801072a:	60b9      	str	r1, [r7, #8]
 801072c:	603b      	str	r3, [r7, #0]
 801072e:	4613      	mov	r3, r2
 8010730:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010738:	2b20      	cmp	r3, #32
 801073a:	f040 808b 	bne.w	8010854 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d002      	beq.n	801074a <HAL_UART_Transmit+0x28>
 8010744:	88fb      	ldrh	r3, [r7, #6]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d101      	bne.n	801074e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801074a:	2301      	movs	r3, #1
 801074c:	e083      	b.n	8010856 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010758:	2b80      	cmp	r3, #128	@ 0x80
 801075a:	d107      	bne.n	801076c <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	689a      	ldr	r2, [r3, #8]
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801076a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2200      	movs	r2, #0
 8010770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2221      	movs	r2, #33	@ 0x21
 8010778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801077c:	f7f4 ff7a 	bl	8005674 <HAL_GetTick>
 8010780:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	88fa      	ldrh	r2, [r7, #6]
 8010786:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	88fa      	ldrh	r2, [r7, #6]
 801078e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	689b      	ldr	r3, [r3, #8]
 8010796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801079a:	d108      	bne.n	80107ae <HAL_UART_Transmit+0x8c>
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	691b      	ldr	r3, [r3, #16]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d104      	bne.n	80107ae <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80107a4:	2300      	movs	r3, #0
 80107a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	61bb      	str	r3, [r7, #24]
 80107ac:	e003      	b.n	80107b6 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80107b2:	2300      	movs	r3, #0
 80107b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80107b6:	e030      	b.n	801081a <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	9300      	str	r3, [sp, #0]
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	2200      	movs	r2, #0
 80107c0:	2180      	movs	r1, #128	@ 0x80
 80107c2:	68f8      	ldr	r0, [r7, #12]
 80107c4:	f000 fb86 	bl	8010ed4 <UART_WaitOnFlagUntilTimeout>
 80107c8:	4603      	mov	r3, r0
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d005      	beq.n	80107da <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2220      	movs	r2, #32
 80107d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80107d6:	2303      	movs	r3, #3
 80107d8:	e03d      	b.n	8010856 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d10b      	bne.n	80107f8 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80107e0:	69bb      	ldr	r3, [r7, #24]
 80107e2:	881b      	ldrh	r3, [r3, #0]
 80107e4:	461a      	mov	r2, r3
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80107ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80107f0:	69bb      	ldr	r3, [r7, #24]
 80107f2:	3302      	adds	r3, #2
 80107f4:	61bb      	str	r3, [r7, #24]
 80107f6:	e007      	b.n	8010808 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	781a      	ldrb	r2, [r3, #0]
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010802:	69fb      	ldr	r3, [r7, #28]
 8010804:	3301      	adds	r3, #1
 8010806:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801080e:	b29b      	uxth	r3, r3
 8010810:	3b01      	subs	r3, #1
 8010812:	b29a      	uxth	r2, r3
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010820:	b29b      	uxth	r3, r3
 8010822:	2b00      	cmp	r3, #0
 8010824:	d1c8      	bne.n	80107b8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	9300      	str	r3, [sp, #0]
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	2200      	movs	r2, #0
 801082e:	2140      	movs	r1, #64	@ 0x40
 8010830:	68f8      	ldr	r0, [r7, #12]
 8010832:	f000 fb4f 	bl	8010ed4 <UART_WaitOnFlagUntilTimeout>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d005      	beq.n	8010848 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2220      	movs	r2, #32
 8010840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8010844:	2303      	movs	r3, #3
 8010846:	e006      	b.n	8010856 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2220      	movs	r2, #32
 801084c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8010850:	2300      	movs	r3, #0
 8010852:	e000      	b.n	8010856 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8010854:	2302      	movs	r3, #2
  }
}
 8010856:	4618      	mov	r0, r3
 8010858:	3720      	adds	r7, #32
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
	...

08010860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010864:	b094      	sub	sp, #80	@ 0x50
 8010866:	af00      	add	r7, sp, #0
 8010868:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801086a:	2300      	movs	r3, #0
 801086c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8010870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	4b78      	ldr	r3, [pc, #480]	@ (8010a58 <UART_SetConfig+0x1f8>)
 8010876:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801087a:	689a      	ldr	r2, [r3, #8]
 801087c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801087e:	691b      	ldr	r3, [r3, #16]
 8010880:	431a      	orrs	r2, r3
 8010882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010884:	695b      	ldr	r3, [r3, #20]
 8010886:	431a      	orrs	r2, r3
 8010888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801088a:	69db      	ldr	r3, [r3, #28]
 801088c:	4313      	orrs	r3, r2
 801088e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4971      	ldr	r1, [pc, #452]	@ (8010a5c <UART_SetConfig+0x1fc>)
 8010898:	4019      	ands	r1, r3
 801089a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108a0:	430b      	orrs	r3, r1
 80108a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80108ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b0:	68d9      	ldr	r1, [r3, #12]
 80108b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b4:	681a      	ldr	r2, [r3, #0]
 80108b6:	ea40 0301 	orr.w	r3, r0, r1
 80108ba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80108bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108be:	699b      	ldr	r3, [r3, #24]
 80108c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80108c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	4b64      	ldr	r3, [pc, #400]	@ (8010a58 <UART_SetConfig+0x1f8>)
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d009      	beq.n	80108e0 <UART_SetConfig+0x80>
 80108cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	4b63      	ldr	r3, [pc, #396]	@ (8010a60 <UART_SetConfig+0x200>)
 80108d2:	429a      	cmp	r2, r3
 80108d4:	d004      	beq.n	80108e0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80108d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d8:	6a1a      	ldr	r2, [r3, #32]
 80108da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108dc:	4313      	orrs	r3, r2
 80108de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80108e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	689b      	ldr	r3, [r3, #8]
 80108e6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80108ea:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80108ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108f4:	430b      	orrs	r3, r1
 80108f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80108f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108fe:	f023 000f 	bic.w	r0, r3, #15
 8010902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010904:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	ea40 0301 	orr.w	r3, r0, r1
 801090e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010912:	681a      	ldr	r2, [r3, #0]
 8010914:	4b53      	ldr	r3, [pc, #332]	@ (8010a64 <UART_SetConfig+0x204>)
 8010916:	429a      	cmp	r2, r3
 8010918:	d102      	bne.n	8010920 <UART_SetConfig+0xc0>
 801091a:	2301      	movs	r3, #1
 801091c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801091e:	e066      	b.n	80109ee <UART_SetConfig+0x18e>
 8010920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	4b50      	ldr	r3, [pc, #320]	@ (8010a68 <UART_SetConfig+0x208>)
 8010926:	429a      	cmp	r2, r3
 8010928:	d102      	bne.n	8010930 <UART_SetConfig+0xd0>
 801092a:	2302      	movs	r3, #2
 801092c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801092e:	e05e      	b.n	80109ee <UART_SetConfig+0x18e>
 8010930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	4b4d      	ldr	r3, [pc, #308]	@ (8010a6c <UART_SetConfig+0x20c>)
 8010936:	429a      	cmp	r2, r3
 8010938:	d102      	bne.n	8010940 <UART_SetConfig+0xe0>
 801093a:	2304      	movs	r3, #4
 801093c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801093e:	e056      	b.n	80109ee <UART_SetConfig+0x18e>
 8010940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	4b4a      	ldr	r3, [pc, #296]	@ (8010a70 <UART_SetConfig+0x210>)
 8010946:	429a      	cmp	r2, r3
 8010948:	d102      	bne.n	8010950 <UART_SetConfig+0xf0>
 801094a:	2308      	movs	r3, #8
 801094c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801094e:	e04e      	b.n	80109ee <UART_SetConfig+0x18e>
 8010950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	4b47      	ldr	r3, [pc, #284]	@ (8010a74 <UART_SetConfig+0x214>)
 8010956:	429a      	cmp	r2, r3
 8010958:	d102      	bne.n	8010960 <UART_SetConfig+0x100>
 801095a:	2310      	movs	r3, #16
 801095c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801095e:	e046      	b.n	80109ee <UART_SetConfig+0x18e>
 8010960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010962:	681a      	ldr	r2, [r3, #0]
 8010964:	4b44      	ldr	r3, [pc, #272]	@ (8010a78 <UART_SetConfig+0x218>)
 8010966:	429a      	cmp	r2, r3
 8010968:	d102      	bne.n	8010970 <UART_SetConfig+0x110>
 801096a:	2320      	movs	r3, #32
 801096c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801096e:	e03e      	b.n	80109ee <UART_SetConfig+0x18e>
 8010970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010972:	681a      	ldr	r2, [r3, #0]
 8010974:	4b41      	ldr	r3, [pc, #260]	@ (8010a7c <UART_SetConfig+0x21c>)
 8010976:	429a      	cmp	r2, r3
 8010978:	d102      	bne.n	8010980 <UART_SetConfig+0x120>
 801097a:	2340      	movs	r3, #64	@ 0x40
 801097c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801097e:	e036      	b.n	80109ee <UART_SetConfig+0x18e>
 8010980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	4b3e      	ldr	r3, [pc, #248]	@ (8010a80 <UART_SetConfig+0x220>)
 8010986:	429a      	cmp	r2, r3
 8010988:	d102      	bne.n	8010990 <UART_SetConfig+0x130>
 801098a:	2380      	movs	r3, #128	@ 0x80
 801098c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801098e:	e02e      	b.n	80109ee <UART_SetConfig+0x18e>
 8010990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	4b3b      	ldr	r3, [pc, #236]	@ (8010a84 <UART_SetConfig+0x224>)
 8010996:	429a      	cmp	r2, r3
 8010998:	d103      	bne.n	80109a2 <UART_SetConfig+0x142>
 801099a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801099e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80109a0:	e025      	b.n	80109ee <UART_SetConfig+0x18e>
 80109a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109a4:	681a      	ldr	r2, [r3, #0]
 80109a6:	4b38      	ldr	r3, [pc, #224]	@ (8010a88 <UART_SetConfig+0x228>)
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d103      	bne.n	80109b4 <UART_SetConfig+0x154>
 80109ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80109b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80109b2:	e01c      	b.n	80109ee <UART_SetConfig+0x18e>
 80109b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	4b34      	ldr	r3, [pc, #208]	@ (8010a8c <UART_SetConfig+0x22c>)
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d103      	bne.n	80109c6 <UART_SetConfig+0x166>
 80109be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80109c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80109c4:	e013      	b.n	80109ee <UART_SetConfig+0x18e>
 80109c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	4b31      	ldr	r3, [pc, #196]	@ (8010a90 <UART_SetConfig+0x230>)
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d103      	bne.n	80109d8 <UART_SetConfig+0x178>
 80109d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80109d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80109d6:	e00a      	b.n	80109ee <UART_SetConfig+0x18e>
 80109d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109da:	681a      	ldr	r2, [r3, #0]
 80109dc:	4b1e      	ldr	r3, [pc, #120]	@ (8010a58 <UART_SetConfig+0x1f8>)
 80109de:	429a      	cmp	r2, r3
 80109e0:	d103      	bne.n	80109ea <UART_SetConfig+0x18a>
 80109e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80109e8:	e001      	b.n	80109ee <UART_SetConfig+0x18e>
 80109ea:	2300      	movs	r3, #0
 80109ec:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80109ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109f0:	681a      	ldr	r2, [r3, #0]
 80109f2:	4b19      	ldr	r3, [pc, #100]	@ (8010a58 <UART_SetConfig+0x1f8>)
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d005      	beq.n	8010a04 <UART_SetConfig+0x1a4>
 80109f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	4b18      	ldr	r3, [pc, #96]	@ (8010a60 <UART_SetConfig+0x200>)
 80109fe:	429a      	cmp	r2, r3
 8010a00:	f040 8094 	bne.w	8010b2c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a06:	2200      	movs	r2, #0
 8010a08:	623b      	str	r3, [r7, #32]
 8010a0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8010a0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8010a10:	f7fb fdc2 	bl	800c598 <HAL_RCCEx_GetPeriphCLKFreq>
 8010a14:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8010a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	f000 80f7 	beq.w	8010c0c <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a22:	4a1c      	ldr	r2, [pc, #112]	@ (8010a94 <UART_SetConfig+0x234>)
 8010a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a28:	461a      	mov	r2, r3
 8010a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a30:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a34:	685a      	ldr	r2, [r3, #4]
 8010a36:	4613      	mov	r3, r2
 8010a38:	005b      	lsls	r3, r3, #1
 8010a3a:	4413      	add	r3, r2
 8010a3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d305      	bcc.n	8010a4e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010a48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d924      	bls.n	8010a98 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8010a4e:	2301      	movs	r3, #1
 8010a50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010a54:	e069      	b.n	8010b2a <UART_SetConfig+0x2ca>
 8010a56:	bf00      	nop
 8010a58:	44002400 	.word	0x44002400
 8010a5c:	cfff69f3 	.word	0xcfff69f3
 8010a60:	54002400 	.word	0x54002400
 8010a64:	40013800 	.word	0x40013800
 8010a68:	40004400 	.word	0x40004400
 8010a6c:	40004800 	.word	0x40004800
 8010a70:	40004c00 	.word	0x40004c00
 8010a74:	40005000 	.word	0x40005000
 8010a78:	40006400 	.word	0x40006400
 8010a7c:	40007800 	.word	0x40007800
 8010a80:	40007c00 	.word	0x40007c00
 8010a84:	40008000 	.word	0x40008000
 8010a88:	40006800 	.word	0x40006800
 8010a8c:	40006c00 	.word	0x40006c00
 8010a90:	40008400 	.word	0x40008400
 8010a94:	08018c78 	.word	0x08018c78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	61bb      	str	r3, [r7, #24]
 8010a9e:	61fa      	str	r2, [r7, #28]
 8010aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aa4:	4a64      	ldr	r2, [pc, #400]	@ (8010c38 <UART_SetConfig+0x3d8>)
 8010aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	2200      	movs	r2, #0
 8010aae:	613b      	str	r3, [r7, #16]
 8010ab0:	617a      	str	r2, [r7, #20]
 8010ab2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010ab6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8010aba:	f7ef fbe7 	bl	800028c <__aeabi_uldivmod>
 8010abe:	4602      	mov	r2, r0
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	4610      	mov	r0, r2
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	f04f 0200 	mov.w	r2, #0
 8010aca:	f04f 0300 	mov.w	r3, #0
 8010ace:	020b      	lsls	r3, r1, #8
 8010ad0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010ad4:	0202      	lsls	r2, r0, #8
 8010ad6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ad8:	6849      	ldr	r1, [r1, #4]
 8010ada:	0849      	lsrs	r1, r1, #1
 8010adc:	2000      	movs	r0, #0
 8010ade:	460c      	mov	r4, r1
 8010ae0:	4605      	mov	r5, r0
 8010ae2:	eb12 0804 	adds.w	r8, r2, r4
 8010ae6:	eb43 0905 	adc.w	r9, r3, r5
 8010aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aec:	685b      	ldr	r3, [r3, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	60bb      	str	r3, [r7, #8]
 8010af2:	60fa      	str	r2, [r7, #12]
 8010af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010af8:	4640      	mov	r0, r8
 8010afa:	4649      	mov	r1, r9
 8010afc:	f7ef fbc6 	bl	800028c <__aeabi_uldivmod>
 8010b00:	4602      	mov	r2, r0
 8010b02:	460b      	mov	r3, r1
 8010b04:	4613      	mov	r3, r2
 8010b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010b0e:	d308      	bcc.n	8010b22 <UART_SetConfig+0x2c2>
 8010b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010b16:	d204      	bcs.n	8010b22 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8010b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010b1e:	60da      	str	r2, [r3, #12]
 8010b20:	e003      	b.n	8010b2a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8010b22:	2301      	movs	r3, #1
 8010b24:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8010b28:	e070      	b.n	8010c0c <UART_SetConfig+0x3ac>
 8010b2a:	e06f      	b.n	8010c0c <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b2e:	69db      	ldr	r3, [r3, #28]
 8010b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010b34:	d13c      	bne.n	8010bb0 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b38:	2200      	movs	r2, #0
 8010b3a:	603b      	str	r3, [r7, #0]
 8010b3c:	607a      	str	r2, [r7, #4]
 8010b3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010b42:	f7fb fd29 	bl	800c598 <HAL_RCCEx_GetPeriphCLKFreq>
 8010b46:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d05e      	beq.n	8010c0c <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b52:	4a39      	ldr	r2, [pc, #228]	@ (8010c38 <UART_SetConfig+0x3d8>)
 8010b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b58:	461a      	mov	r2, r3
 8010b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b60:	005a      	lsls	r2, r3, #1
 8010b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	085b      	lsrs	r3, r3, #1
 8010b68:	441a      	add	r2, r3
 8010b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010b74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b76:	2b0f      	cmp	r3, #15
 8010b78:	d916      	bls.n	8010ba8 <UART_SetConfig+0x348>
 8010b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b80:	d212      	bcs.n	8010ba8 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	f023 030f 	bic.w	r3, r3, #15
 8010b8a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b8e:	085b      	lsrs	r3, r3, #1
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	f003 0307 	and.w	r3, r3, #7
 8010b96:	b29a      	uxth	r2, r3
 8010b98:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010b9a:	4313      	orrs	r3, r2
 8010b9c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8010b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010ba4:	60da      	str	r2, [r3, #12]
 8010ba6:	e031      	b.n	8010c0c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8010ba8:	2301      	movs	r3, #1
 8010baa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010bae:	e02d      	b.n	8010c0c <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	469a      	mov	sl, r3
 8010bb6:	4693      	mov	fp, r2
 8010bb8:	4650      	mov	r0, sl
 8010bba:	4659      	mov	r1, fp
 8010bbc:	f7fb fcec 	bl	800c598 <HAL_RCCEx_GetPeriphCLKFreq>
 8010bc0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8010bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d021      	beq.n	8010c0c <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8010c38 <UART_SetConfig+0x3d8>)
 8010bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010bd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8010bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	085b      	lsrs	r3, r3, #1
 8010be0:	441a      	add	r2, r3
 8010be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bee:	2b0f      	cmp	r3, #15
 8010bf0:	d909      	bls.n	8010c06 <UART_SetConfig+0x3a6>
 8010bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010bf8:	d205      	bcs.n	8010c06 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bfc:	b29a      	uxth	r2, r3
 8010bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	60da      	str	r2, [r3, #12]
 8010c04:	e002      	b.n	8010c0c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8010c06:	2301      	movs	r3, #1
 8010c08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c0e:	2201      	movs	r2, #1
 8010c10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c16:	2201      	movs	r2, #1
 8010c18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c1e:	2200      	movs	r2, #0
 8010c20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c24:	2200      	movs	r2, #0
 8010c26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010c28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3750      	adds	r7, #80	@ 0x50
 8010c30:	46bd      	mov	sp, r7
 8010c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010c36:	bf00      	nop
 8010c38:	08018c78 	.word	0x08018c78

08010c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b083      	sub	sp, #12
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c48:	f003 0308 	and.w	r3, r3, #8
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00a      	beq.n	8010c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	430a      	orrs	r2, r1
 8010c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c6a:	f003 0301 	and.w	r3, r3, #1
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d00a      	beq.n	8010c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	685b      	ldr	r3, [r3, #4]
 8010c78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	430a      	orrs	r2, r1
 8010c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c8c:	f003 0302 	and.w	r3, r3, #2
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00a      	beq.n	8010caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	430a      	orrs	r2, r1
 8010ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cae:	f003 0304 	and.w	r3, r3, #4
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d00a      	beq.n	8010ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	685b      	ldr	r3, [r3, #4]
 8010cbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	430a      	orrs	r2, r1
 8010cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cd0:	f003 0310 	and.w	r3, r3, #16
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00a      	beq.n	8010cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	689b      	ldr	r3, [r3, #8]
 8010cde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	430a      	orrs	r2, r1
 8010cec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cf2:	f003 0320 	and.w	r3, r3, #32
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d00a      	beq.n	8010d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	689b      	ldr	r3, [r3, #8]
 8010d00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	430a      	orrs	r2, r1
 8010d0e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d01a      	beq.n	8010d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	430a      	orrs	r2, r1
 8010d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010d3a:	d10a      	bne.n	8010d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	430a      	orrs	r2, r1
 8010d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d00a      	beq.n	8010d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	430a      	orrs	r2, r1
 8010d72:	605a      	str	r2, [r3, #4]
  }
}
 8010d74:	bf00      	nop
 8010d76:	370c      	adds	r7, #12
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr

08010d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b098      	sub	sp, #96	@ 0x60
 8010d84:	af02      	add	r7, sp, #8
 8010d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010d90:	f7f4 fc70 	bl	8005674 <HAL_GetTick>
 8010d94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f003 0308 	and.w	r3, r3, #8
 8010da0:	2b08      	cmp	r3, #8
 8010da2:	d12f      	bne.n	8010e04 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010da4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010da8:	9300      	str	r3, [sp, #0]
 8010daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010dac:	2200      	movs	r2, #0
 8010dae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f000 f88e 	bl	8010ed4 <UART_WaitOnFlagUntilTimeout>
 8010db8:	4603      	mov	r3, r0
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d022      	beq.n	8010e04 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc6:	e853 3f00 	ldrex	r3, [r3]
 8010dca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010dd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	461a      	mov	r2, r3
 8010dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8010dde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010de0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010de4:	e841 2300 	strex	r3, r2, [r1]
 8010de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d1e6      	bne.n	8010dbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2220      	movs	r2, #32
 8010df4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010e00:	2303      	movs	r3, #3
 8010e02:	e063      	b.n	8010ecc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f003 0304 	and.w	r3, r3, #4
 8010e0e:	2b04      	cmp	r3, #4
 8010e10:	d149      	bne.n	8010ea6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e12:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010e16:	9300      	str	r3, [sp, #0]
 8010e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f000 f857 	bl	8010ed4 <UART_WaitOnFlagUntilTimeout>
 8010e26:	4603      	mov	r3, r0
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d03c      	beq.n	8010ea6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e34:	e853 3f00 	ldrex	r3, [r3]
 8010e38:	623b      	str	r3, [r7, #32]
   return(result);
 8010e3a:	6a3b      	ldr	r3, [r7, #32]
 8010e3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	461a      	mov	r2, r3
 8010e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e52:	e841 2300 	strex	r3, r2, [r1]
 8010e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d1e6      	bne.n	8010e2c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	3308      	adds	r3, #8
 8010e64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	e853 3f00 	ldrex	r3, [r3]
 8010e6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	f023 0301 	bic.w	r3, r3, #1
 8010e74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	3308      	adds	r3, #8
 8010e7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e7e:	61fa      	str	r2, [r7, #28]
 8010e80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e82:	69b9      	ldr	r1, [r7, #24]
 8010e84:	69fa      	ldr	r2, [r7, #28]
 8010e86:	e841 2300 	strex	r3, r2, [r1]
 8010e8a:	617b      	str	r3, [r7, #20]
   return(result);
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d1e5      	bne.n	8010e5e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2220      	movs	r2, #32
 8010e96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ea2:	2303      	movs	r3, #3
 8010ea4:	e012      	b.n	8010ecc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2220      	movs	r2, #32
 8010eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2220      	movs	r2, #32
 8010eb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010eca:	2300      	movs	r3, #0
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3758      	adds	r7, #88	@ 0x58
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b084      	sub	sp, #16
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	60f8      	str	r0, [r7, #12]
 8010edc:	60b9      	str	r1, [r7, #8]
 8010ede:	603b      	str	r3, [r7, #0]
 8010ee0:	4613      	mov	r3, r2
 8010ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ee4:	e04f      	b.n	8010f86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010ee6:	69bb      	ldr	r3, [r7, #24]
 8010ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eec:	d04b      	beq.n	8010f86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010eee:	f7f4 fbc1 	bl	8005674 <HAL_GetTick>
 8010ef2:	4602      	mov	r2, r0
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	1ad3      	subs	r3, r2, r3
 8010ef8:	69ba      	ldr	r2, [r7, #24]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d302      	bcc.n	8010f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8010efe:	69bb      	ldr	r3, [r7, #24]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d101      	bne.n	8010f08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010f04:	2303      	movs	r3, #3
 8010f06:	e04e      	b.n	8010fa6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f003 0304 	and.w	r3, r3, #4
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d037      	beq.n	8010f86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	2b80      	cmp	r3, #128	@ 0x80
 8010f1a:	d034      	beq.n	8010f86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	2b40      	cmp	r3, #64	@ 0x40
 8010f20:	d031      	beq.n	8010f86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	69db      	ldr	r3, [r3, #28]
 8010f28:	f003 0308 	and.w	r3, r3, #8
 8010f2c:	2b08      	cmp	r3, #8
 8010f2e:	d110      	bne.n	8010f52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2208      	movs	r2, #8
 8010f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010f38:	68f8      	ldr	r0, [r7, #12]
 8010f3a:	f000 f838 	bl	8010fae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	2208      	movs	r2, #8
 8010f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010f4e:	2301      	movs	r3, #1
 8010f50:	e029      	b.n	8010fa6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	69db      	ldr	r3, [r3, #28]
 8010f58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010f60:	d111      	bne.n	8010f86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010f6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	f000 f81e 	bl	8010fae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2220      	movs	r2, #32
 8010f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010f82:	2303      	movs	r3, #3
 8010f84:	e00f      	b.n	8010fa6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	69da      	ldr	r2, [r3, #28]
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	4013      	ands	r3, r2
 8010f90:	68ba      	ldr	r2, [r7, #8]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	bf0c      	ite	eq
 8010f96:	2301      	moveq	r3, #1
 8010f98:	2300      	movne	r3, #0
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	79fb      	ldrb	r3, [r7, #7]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d0a0      	beq.n	8010ee6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010fa4:	2300      	movs	r3, #0
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3710      	adds	r7, #16
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}

08010fae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010fae:	b480      	push	{r7}
 8010fb0:	b095      	sub	sp, #84	@ 0x54
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fbe:	e853 3f00 	ldrex	r3, [r3]
 8010fc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8010fd6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010fda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010fdc:	e841 2300 	strex	r3, r2, [r1]
 8010fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d1e6      	bne.n	8010fb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	3308      	adds	r3, #8
 8010fee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ff0:	6a3b      	ldr	r3, [r7, #32]
 8010ff2:	e853 3f00 	ldrex	r3, [r3]
 8010ff6:	61fb      	str	r3, [r7, #28]
   return(result);
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010ffe:	f023 0301 	bic.w	r3, r3, #1
 8011002:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	3308      	adds	r3, #8
 801100a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801100c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801100e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011010:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011014:	e841 2300 	strex	r3, r2, [r1]
 8011018:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801101a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801101c:	2b00      	cmp	r3, #0
 801101e:	d1e3      	bne.n	8010fe8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011024:	2b01      	cmp	r3, #1
 8011026:	d118      	bne.n	801105a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	e853 3f00 	ldrex	r3, [r3]
 8011034:	60bb      	str	r3, [r7, #8]
   return(result);
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	f023 0310 	bic.w	r3, r3, #16
 801103c:	647b      	str	r3, [r7, #68]	@ 0x44
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	461a      	mov	r2, r3
 8011044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011046:	61bb      	str	r3, [r7, #24]
 8011048:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801104a:	6979      	ldr	r1, [r7, #20]
 801104c:	69ba      	ldr	r2, [r7, #24]
 801104e:	e841 2300 	strex	r3, r2, [r1]
 8011052:	613b      	str	r3, [r7, #16]
   return(result);
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d1e6      	bne.n	8011028 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2220      	movs	r2, #32
 801105e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2200      	movs	r2, #0
 8011066:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801106e:	bf00      	nop
 8011070:	3754      	adds	r7, #84	@ 0x54
 8011072:	46bd      	mov	sp, r7
 8011074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011078:	4770      	bx	lr

0801107a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801107a:	b480      	push	{r7}
 801107c:	b085      	sub	sp, #20
 801107e:	af00      	add	r7, sp, #0
 8011080:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011088:	2b01      	cmp	r3, #1
 801108a:	d101      	bne.n	8011090 <HAL_UARTEx_DisableFifoMode+0x16>
 801108c:	2302      	movs	r3, #2
 801108e:	e027      	b.n	80110e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2201      	movs	r2, #1
 8011094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2224      	movs	r2, #36	@ 0x24
 801109c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	681a      	ldr	r2, [r3, #0]
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	f022 0201 	bic.w	r2, r2, #1
 80110b6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80110be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2200      	movs	r2, #0
 80110c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	68fa      	ldr	r2, [r7, #12]
 80110cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2220      	movs	r2, #32
 80110d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2200      	movs	r2, #0
 80110da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80110de:	2300      	movs	r3, #0
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3714      	adds	r7, #20
 80110e4:	46bd      	mov	sp, r7
 80110e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ea:	4770      	bx	lr

080110ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d101      	bne.n	8011104 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011100:	2302      	movs	r3, #2
 8011102:	e02d      	b.n	8011160 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2201      	movs	r2, #1
 8011108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2224      	movs	r2, #36	@ 0x24
 8011110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	f022 0201 	bic.w	r2, r2, #1
 801112a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	689b      	ldr	r3, [r3, #8]
 8011132:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	683a      	ldr	r2, [r7, #0]
 801113c:	430a      	orrs	r2, r1
 801113e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f000 f84f 	bl	80111e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	68fa      	ldr	r2, [r7, #12]
 801114c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2220      	movs	r2, #32
 8011152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2200      	movs	r2, #0
 801115a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801115e:	2300      	movs	r3, #0
}
 8011160:	4618      	mov	r0, r3
 8011162:	3710      	adds	r7, #16
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011178:	2b01      	cmp	r3, #1
 801117a:	d101      	bne.n	8011180 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801117c:	2302      	movs	r3, #2
 801117e:	e02d      	b.n	80111dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2201      	movs	r2, #1
 8011184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2224      	movs	r2, #36	@ 0x24
 801118c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	f022 0201 	bic.w	r2, r2, #1
 80111a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	689b      	ldr	r3, [r3, #8]
 80111ae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	683a      	ldr	r2, [r7, #0]
 80111b8:	430a      	orrs	r2, r1
 80111ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f000 f811 	bl	80111e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	68fa      	ldr	r2, [r7, #12]
 80111c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2220      	movs	r2, #32
 80111ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2200      	movs	r2, #0
 80111d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80111da:	2300      	movs	r3, #0
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3710      	adds	r7, #16
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80111e4:	b480      	push	{r7}
 80111e6:	b085      	sub	sp, #20
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d108      	bne.n	8011206 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2201      	movs	r2, #1
 80111f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2201      	movs	r2, #1
 8011200:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011204:	e031      	b.n	801126a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011206:	2308      	movs	r3, #8
 8011208:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801120a:	2308      	movs	r3, #8
 801120c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	689b      	ldr	r3, [r3, #8]
 8011214:	0e5b      	lsrs	r3, r3, #25
 8011216:	b2db      	uxtb	r3, r3
 8011218:	f003 0307 	and.w	r3, r3, #7
 801121c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	689b      	ldr	r3, [r3, #8]
 8011224:	0f5b      	lsrs	r3, r3, #29
 8011226:	b2db      	uxtb	r3, r3
 8011228:	f003 0307 	and.w	r3, r3, #7
 801122c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801122e:	7bbb      	ldrb	r3, [r7, #14]
 8011230:	7b3a      	ldrb	r2, [r7, #12]
 8011232:	4911      	ldr	r1, [pc, #68]	@ (8011278 <UARTEx_SetNbDataToProcess+0x94>)
 8011234:	5c8a      	ldrb	r2, [r1, r2]
 8011236:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801123a:	7b3a      	ldrb	r2, [r7, #12]
 801123c:	490f      	ldr	r1, [pc, #60]	@ (801127c <UARTEx_SetNbDataToProcess+0x98>)
 801123e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011240:	fb93 f3f2 	sdiv	r3, r3, r2
 8011244:	b29a      	uxth	r2, r3
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801124c:	7bfb      	ldrb	r3, [r7, #15]
 801124e:	7b7a      	ldrb	r2, [r7, #13]
 8011250:	4909      	ldr	r1, [pc, #36]	@ (8011278 <UARTEx_SetNbDataToProcess+0x94>)
 8011252:	5c8a      	ldrb	r2, [r1, r2]
 8011254:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011258:	7b7a      	ldrb	r2, [r7, #13]
 801125a:	4908      	ldr	r1, [pc, #32]	@ (801127c <UARTEx_SetNbDataToProcess+0x98>)
 801125c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801125e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011262:	b29a      	uxth	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801126a:	bf00      	nop
 801126c:	3714      	adds	r7, #20
 801126e:	46bd      	mov	sp, r7
 8011270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011274:	4770      	bx	lr
 8011276:	bf00      	nop
 8011278:	08018c90 	.word	0x08018c90
 801127c:	08018c98 	.word	0x08018c98

08011280 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801128c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011298:	f043 0201 	orr.w	r2, r3, #1
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80112a0:	2300      	movs	r3, #0
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	370c      	adds	r7, #12
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr

080112ae <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 80112ae:	b084      	sub	sp, #16
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b084      	sub	sp, #16
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	f107 001c 	add.w	r0, r7, #28
 80112bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d101      	bne.n	80112ca <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 80112c6:	2301      	movs	r3, #1
 80112c8:	e008      	b.n	80112dc <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f7ff ffd8 	bl	8011280 <USB_CoreReset>
 80112d0:	4603      	mov	r3, r0
 80112d2:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2200      	movs	r2, #0
 80112d8:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 80112da:	7bfb      	ldrb	r3, [r7, #15]
}
 80112dc:	4618      	mov	r0, r3
 80112de:	3710      	adds	r7, #16
 80112e0:	46bd      	mov	sp, r7
 80112e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80112e6:	b004      	add	sp, #16
 80112e8:	4770      	bx	lr

080112ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80112ea:	b480      	push	{r7}
 80112ec:	b085      	sub	sp, #20
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2200      	movs	r2, #0
 80112f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80112f8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80112fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	68fa      	ldr	r2, [r7, #12]
 8011302:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011304:	2300      	movs	r3, #0
}
 8011306:	4618      	mov	r0, r3
 8011308:	3714      	adds	r7, #20
 801130a:	46bd      	mov	sp, r7
 801130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011310:	4770      	bx	lr

08011312 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8011312:	b480      	push	{r7}
 8011314:	b085      	sub	sp, #20
 8011316:	af00      	add	r7, sp, #0
 8011318:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801131a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 801131e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	43db      	mvns	r3, r3
 8011328:	401a      	ands	r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801132e:	2300      	movs	r3, #0
}
 8011330:	4618      	mov	r0, r3
 8011332:	3714      	adds	r7, #20
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr

0801133c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	460b      	mov	r3, r1
 8011346:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8011348:	78fb      	ldrb	r3, [r7, #3]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d106      	bne.n	801135c <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011352:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	641a      	str	r2, [r3, #64]	@ 0x40
 801135a:	e00b      	b.n	8011374 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 801135c:	78fb      	ldrb	r3, [r7, #3]
 801135e:	2b01      	cmp	r3, #1
 8011360:	d106      	bne.n	8011370 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011366:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	641a      	str	r2, [r3, #64]	@ 0x40
 801136e:	e001      	b.n	8011374 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8011370:	2301      	movs	r3, #1
 8011372:	e000      	b.n	8011376 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8011374:	2300      	movs	r3, #0
}
 8011376:	4618      	mov	r0, r3
 8011378:	370c      	adds	r7, #12
 801137a:	46bd      	mov	sp, r7
 801137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011380:	4770      	bx	lr

08011382 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8011382:	b084      	sub	sp, #16
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	f107 001c 	add.w	r0, r7, #28
 8011390:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2201      	movs	r2, #1
 8011398:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801139e:	f023 0201 	bic.w	r2, r3, #1
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 80113a6:	2100      	movs	r1, #0
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f7ff ffc7 	bl	801133c <USB_SetCurrentMode>
 80113ae:	4603      	mov	r3, r0
 80113b0:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2200      	movs	r2, #0
 80113b6:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 80113b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3710      	adds	r7, #16
 80113be:	46bd      	mov	sp, r7
 80113c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80113c4:	b004      	add	sp, #16
 80113c6:	4770      	bx	lr

080113c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b09f      	sub	sp, #124	@ 0x7c
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80113d2:	2300      	movs	r3, #0
 80113d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80113d8:	687a      	ldr	r2, [r7, #4]
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	009b      	lsls	r3, r3, #2
 80113e0:	4413      	add	r3, r2
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	4ba0      	ldr	r3, [pc, #640]	@ (8011668 <USB_ActivateEndpoint+0x2a0>)
 80113e6:	4013      	ands	r3, r2
 80113e8:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	78db      	ldrb	r3, [r3, #3]
 80113ee:	2b03      	cmp	r3, #3
 80113f0:	d819      	bhi.n	8011426 <USB_ActivateEndpoint+0x5e>
 80113f2:	a201      	add	r2, pc, #4	@ (adr r2, 80113f8 <USB_ActivateEndpoint+0x30>)
 80113f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f8:	08011409 	.word	0x08011409
 80113fc:	0801141d 	.word	0x0801141d
 8011400:	0801142f 	.word	0x0801142f
 8011404:	08011413 	.word	0x08011413
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011408:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801140a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801140e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8011410:	e00e      	b.n	8011430 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8011412:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011414:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8011418:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 801141a:	e009      	b.n	8011430 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801141c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801141e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011422:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8011424:	e004      	b.n	8011430 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 8011426:	2301      	movs	r3, #1
 8011428:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 801142c:	e000      	b.n	8011430 <USB_ActivateEndpoint+0x68>
      break;
 801142e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8011430:	687a      	ldr	r2, [r7, #4]
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	441a      	add	r2, r3
 801143a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801143c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011444:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8011446:	687a      	ldr	r2, [r7, #4]
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	4413      	add	r3, r2
 8011450:	681a      	ldr	r2, [r3, #0]
 8011452:	4b86      	ldr	r3, [pc, #536]	@ (801166c <USB_ActivateEndpoint+0x2a4>)
 8011454:	4013      	ands	r3, r2
 8011456:	683a      	ldr	r2, [r7, #0]
 8011458:	7812      	ldrb	r2, [r2, #0]
 801145a:	4313      	orrs	r3, r2
 801145c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	441a      	add	r2, r3
 8011468:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801146a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801146e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011472:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	7b1b      	ldrb	r3, [r3, #12]
 8011478:	2b00      	cmp	r3, #0
 801147a:	f040 8177 	bne.w	801176c <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	785b      	ldrb	r3, [r3, #1]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d079      	beq.n	801157a <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	00db      	lsls	r3, r3, #3
 801148c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011490:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011494:	681a      	ldr	r2, [r3, #0]
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	781b      	ldrb	r3, [r3, #0]
 801149a:	00db      	lsls	r3, r3, #3
 801149c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80114a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80114a4:	0c12      	lsrs	r2, r2, #16
 80114a6:	0412      	lsls	r2, r2, #16
 80114a8:	601a      	str	r2, [r3, #0]
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	00db      	lsls	r3, r3, #3
 80114b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80114b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80114b8:	6819      	ldr	r1, [r3, #0]
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	88db      	ldrh	r3, [r3, #6]
 80114be:	089b      	lsrs	r3, r3, #2
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	009a      	lsls	r2, r3, #2
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	00db      	lsls	r3, r3, #3
 80114ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80114ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80114d2:	430a      	orrs	r2, r1
 80114d4:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80114d6:	687a      	ldr	r2, [r7, #4]
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	781b      	ldrb	r3, [r3, #0]
 80114dc:	009b      	lsls	r3, r3, #2
 80114de:	4413      	add	r3, r2
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	61bb      	str	r3, [r7, #24]
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d013      	beq.n	8011516 <USB_ActivateEndpoint+0x14e>
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	009b      	lsls	r3, r3, #2
 80114f6:	4413      	add	r3, r2
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	4b5c      	ldr	r3, [pc, #368]	@ (801166c <USB_ActivateEndpoint+0x2a4>)
 80114fc:	4013      	ands	r3, r2
 80114fe:	617b      	str	r3, [r7, #20]
 8011500:	687a      	ldr	r2, [r7, #4]
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	009b      	lsls	r3, r3, #2
 8011508:	441a      	add	r2, r3
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011510:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011514:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	78db      	ldrb	r3, [r3, #3]
 801151a:	2b01      	cmp	r3, #1
 801151c:	d018      	beq.n	8011550 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801151e:	687a      	ldr	r2, [r7, #4]
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	781b      	ldrb	r3, [r3, #0]
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	4413      	add	r3, r2
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	4b51      	ldr	r3, [pc, #324]	@ (8011670 <USB_ActivateEndpoint+0x2a8>)
 801152c:	4013      	ands	r3, r2
 801152e:	60fb      	str	r3, [r7, #12]
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	f083 0320 	eor.w	r3, r3, #32
 8011536:	60fb      	str	r3, [r7, #12]
 8011538:	687a      	ldr	r2, [r7, #4]
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	441a      	add	r2, r3
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801154c:	6013      	str	r3, [r2, #0]
 801154e:	e28c      	b.n	8011a6a <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	009b      	lsls	r3, r3, #2
 8011558:	4413      	add	r3, r2
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	4b44      	ldr	r3, [pc, #272]	@ (8011670 <USB_ActivateEndpoint+0x2a8>)
 801155e:	4013      	ands	r3, r2
 8011560:	613b      	str	r3, [r7, #16]
 8011562:	687a      	ldr	r2, [r7, #4]
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	441a      	add	r2, r3
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011576:	6013      	str	r3, [r2, #0]
 8011578:	e277      	b.n	8011a6a <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	00db      	lsls	r3, r3, #3
 8011580:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011584:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011588:	685a      	ldr	r2, [r3, #4]
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	00db      	lsls	r3, r3, #3
 8011590:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011594:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011598:	0c12      	lsrs	r2, r2, #16
 801159a:	0412      	lsls	r2, r2, #16
 801159c:	605a      	str	r2, [r3, #4]
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	00db      	lsls	r3, r3, #3
 80115a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80115a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80115ac:	6859      	ldr	r1, [r3, #4]
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	88db      	ldrh	r3, [r3, #6]
 80115b2:	089b      	lsrs	r3, r3, #2
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	009a      	lsls	r2, r3, #2
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	00db      	lsls	r3, r3, #3
 80115be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80115c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80115c6:	430a      	orrs	r2, r1
 80115c8:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	00db      	lsls	r3, r3, #3
 80115d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80115d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80115d8:	685a      	ldr	r2, [r3, #4]
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	781b      	ldrb	r3, [r3, #0]
 80115de:	00db      	lsls	r3, r3, #3
 80115e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80115e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80115e8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80115ec:	605a      	str	r2, [r3, #4]
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	691b      	ldr	r3, [r3, #16]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d112      	bne.n	801161c <USB_ActivateEndpoint+0x254>
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	00db      	lsls	r3, r3, #3
 80115fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011600:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011604:	685a      	ldr	r2, [r3, #4]
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	781b      	ldrb	r3, [r3, #0]
 801160a:	00db      	lsls	r3, r3, #3
 801160c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011610:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011614:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8011618:	605a      	str	r2, [r3, #4]
 801161a:	e04d      	b.n	80116b8 <USB_ActivateEndpoint+0x2f0>
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	691b      	ldr	r3, [r3, #16]
 8011620:	2b3e      	cmp	r3, #62	@ 0x3e
 8011622:	d827      	bhi.n	8011674 <USB_ActivateEndpoint+0x2ac>
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	691b      	ldr	r3, [r3, #16]
 8011628:	085b      	lsrs	r3, r3, #1
 801162a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	691b      	ldr	r3, [r3, #16]
 8011630:	f003 0301 	and.w	r3, r3, #1
 8011634:	2b00      	cmp	r3, #0
 8011636:	d002      	beq.n	801163e <USB_ActivateEndpoint+0x276>
 8011638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801163a:	3301      	adds	r3, #1
 801163c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	00db      	lsls	r3, r3, #3
 8011644:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011648:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801164c:	6859      	ldr	r1, [r3, #4]
 801164e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011650:	069a      	lsls	r2, r3, #26
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	00db      	lsls	r3, r3, #3
 8011658:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801165c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011660:	430a      	orrs	r2, r1
 8011662:	605a      	str	r2, [r3, #4]
 8011664:	e028      	b.n	80116b8 <USB_ActivateEndpoint+0x2f0>
 8011666:	bf00      	nop
 8011668:	07ff898f 	.word	0x07ff898f
 801166c:	07ff8f8f 	.word	0x07ff8f8f
 8011670:	07ff8fbf 	.word	0x07ff8fbf
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	095b      	lsrs	r3, r3, #5
 801167a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	691b      	ldr	r3, [r3, #16]
 8011680:	f003 031f 	and.w	r3, r3, #31
 8011684:	2b00      	cmp	r3, #0
 8011686:	d102      	bne.n	801168e <USB_ActivateEndpoint+0x2c6>
 8011688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801168a:	3b01      	subs	r3, #1
 801168c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	00db      	lsls	r3, r3, #3
 8011694:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011698:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801169c:	685a      	ldr	r2, [r3, #4]
 801169e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116a0:	069b      	lsls	r3, r3, #26
 80116a2:	431a      	orrs	r2, r3
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	00db      	lsls	r3, r3, #3
 80116aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80116ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80116b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80116b6:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	009b      	lsls	r3, r3, #2
 80116c0:	4413      	add	r3, r2
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80116c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d013      	beq.n	80116f8 <USB_ActivateEndpoint+0x330>
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	683b      	ldr	r3, [r7, #0]
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	009b      	lsls	r3, r3, #2
 80116d8:	4413      	add	r3, r2
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	4b9c      	ldr	r3, [pc, #624]	@ (8011950 <USB_ActivateEndpoint+0x588>)
 80116de:	4013      	ands	r3, r2
 80116e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	009b      	lsls	r3, r3, #2
 80116ea:	441a      	add	r2, r3
 80116ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80116f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116f6:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d11c      	bne.n	801173a <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011700:	687a      	ldr	r2, [r7, #4]
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	009b      	lsls	r3, r3, #2
 8011708:	4413      	add	r3, r2
 801170a:	681a      	ldr	r2, [r3, #0]
 801170c:	4b91      	ldr	r3, [pc, #580]	@ (8011954 <USB_ActivateEndpoint+0x58c>)
 801170e:	4013      	ands	r3, r2
 8011710:	61fb      	str	r3, [r7, #28]
 8011712:	69fb      	ldr	r3, [r7, #28]
 8011714:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011718:	61fb      	str	r3, [r7, #28]
 801171a:	69fb      	ldr	r3, [r7, #28]
 801171c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011720:	61fb      	str	r3, [r7, #28]
 8011722:	687a      	ldr	r2, [r7, #4]
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	009b      	lsls	r3, r3, #2
 801172a:	441a      	add	r2, r3
 801172c:	69fb      	ldr	r3, [r7, #28]
 801172e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011736:	6013      	str	r3, [r2, #0]
 8011738:	e197      	b.n	8011a6a <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	009b      	lsls	r3, r3, #2
 8011742:	4413      	add	r3, r2
 8011744:	681a      	ldr	r2, [r3, #0]
 8011746:	4b83      	ldr	r3, [pc, #524]	@ (8011954 <USB_ActivateEndpoint+0x58c>)
 8011748:	4013      	ands	r3, r2
 801174a:	623b      	str	r3, [r7, #32]
 801174c:	6a3b      	ldr	r3, [r7, #32]
 801174e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011752:	623b      	str	r3, [r7, #32]
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	009b      	lsls	r3, r3, #2
 801175c:	441a      	add	r2, r3
 801175e:	6a3b      	ldr	r3, [r7, #32]
 8011760:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011768:	6013      	str	r3, [r2, #0]
 801176a:	e17e      	b.n	8011a6a <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	78db      	ldrb	r3, [r3, #3]
 8011770:	2b02      	cmp	r3, #2
 8011772:	d114      	bne.n	801179e <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	4413      	add	r3, r2
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	4b73      	ldr	r3, [pc, #460]	@ (8011950 <USB_ActivateEndpoint+0x588>)
 8011782:	4013      	ands	r3, r2
 8011784:	663b      	str	r3, [r7, #96]	@ 0x60
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	009b      	lsls	r3, r3, #2
 801178e:	441a      	add	r2, r3
 8011790:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011792:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801179a:	6013      	str	r3, [r2, #0]
 801179c:	e013      	b.n	80117c6 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	4413      	add	r3, r2
 80117a8:	681a      	ldr	r2, [r3, #0]
 80117aa:	4b6b      	ldr	r3, [pc, #428]	@ (8011958 <USB_ActivateEndpoint+0x590>)
 80117ac:	4013      	ands	r3, r2
 80117ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	009b      	lsls	r3, r3, #2
 80117b8:	441a      	add	r2, r3
 80117ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80117bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80117c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117c4:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	781b      	ldrb	r3, [r3, #0]
 80117ca:	00db      	lsls	r3, r3, #3
 80117cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80117d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80117d4:	681a      	ldr	r2, [r3, #0]
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	781b      	ldrb	r3, [r3, #0]
 80117da:	00db      	lsls	r3, r3, #3
 80117dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80117e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80117e4:	0c12      	lsrs	r2, r2, #16
 80117e6:	0412      	lsls	r2, r2, #16
 80117e8:	601a      	str	r2, [r3, #0]
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	00db      	lsls	r3, r3, #3
 80117f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80117f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80117f8:	6819      	ldr	r1, [r3, #0]
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	891b      	ldrh	r3, [r3, #8]
 80117fe:	089b      	lsrs	r3, r3, #2
 8011800:	b29b      	uxth	r3, r3
 8011802:	009a      	lsls	r2, r3, #2
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	781b      	ldrb	r3, [r3, #0]
 8011808:	00db      	lsls	r3, r3, #3
 801180a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801180e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011812:	430a      	orrs	r2, r1
 8011814:	601a      	str	r2, [r3, #0]
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	00db      	lsls	r3, r3, #3
 801181c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011820:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011824:	685a      	ldr	r2, [r3, #4]
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	00db      	lsls	r3, r3, #3
 801182c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011830:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011834:	0c12      	lsrs	r2, r2, #16
 8011836:	0412      	lsls	r2, r2, #16
 8011838:	605a      	str	r2, [r3, #4]
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011844:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011848:	6859      	ldr	r1, [r3, #4]
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	895b      	ldrh	r3, [r3, #10]
 801184e:	089b      	lsrs	r3, r3, #2
 8011850:	b29b      	uxth	r3, r3
 8011852:	009a      	lsls	r2, r3, #2
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	00db      	lsls	r3, r3, #3
 801185a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801185e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011862:	430a      	orrs	r2, r1
 8011864:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	785b      	ldrb	r3, [r3, #1]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d178      	bne.n	8011960 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	009b      	lsls	r3, r3, #2
 8011876:	4413      	add	r3, r2
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	643b      	str	r3, [r7, #64]	@ 0x40
 801187c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801187e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011882:	2b00      	cmp	r3, #0
 8011884:	d013      	beq.n	80118ae <USB_ActivateEndpoint+0x4e6>
 8011886:	687a      	ldr	r2, [r7, #4]
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	009b      	lsls	r3, r3, #2
 801188e:	4413      	add	r3, r2
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	4b2f      	ldr	r3, [pc, #188]	@ (8011950 <USB_ActivateEndpoint+0x588>)
 8011894:	4013      	ands	r3, r2
 8011896:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011898:	687a      	ldr	r2, [r7, #4]
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	009b      	lsls	r3, r3, #2
 80118a0:	441a      	add	r2, r3
 80118a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80118a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118ac:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80118ae:	687a      	ldr	r2, [r7, #4]
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	009b      	lsls	r3, r3, #2
 80118b6:	4413      	add	r3, r2
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80118bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d013      	beq.n	80118ee <USB_ActivateEndpoint+0x526>
 80118c6:	687a      	ldr	r2, [r7, #4]
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	781b      	ldrb	r3, [r3, #0]
 80118cc:	009b      	lsls	r3, r3, #2
 80118ce:	4413      	add	r3, r2
 80118d0:	681a      	ldr	r2, [r3, #0]
 80118d2:	4b1f      	ldr	r3, [pc, #124]	@ (8011950 <USB_ActivateEndpoint+0x588>)
 80118d4:	4013      	ands	r3, r2
 80118d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	441a      	add	r2, r3
 80118e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80118ec:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	009b      	lsls	r3, r3, #2
 80118f6:	4413      	add	r3, r2
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	4b16      	ldr	r3, [pc, #88]	@ (8011954 <USB_ActivateEndpoint+0x58c>)
 80118fc:	4013      	ands	r3, r2
 80118fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8011900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011902:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011906:	633b      	str	r3, [r7, #48]	@ 0x30
 8011908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801190a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801190e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011910:	687a      	ldr	r2, [r7, #4]
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	009b      	lsls	r3, r3, #2
 8011918:	441a      	add	r2, r3
 801191a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801191c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011924:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	4413      	add	r3, r2
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	4b0a      	ldr	r3, [pc, #40]	@ (801195c <USB_ActivateEndpoint+0x594>)
 8011934:	4013      	ands	r3, r2
 8011936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011938:	687a      	ldr	r2, [r7, #4]
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	781b      	ldrb	r3, [r3, #0]
 801193e:	009b      	lsls	r3, r3, #2
 8011940:	441a      	add	r2, r3
 8011942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801194c:	6013      	str	r3, [r2, #0]
 801194e:	e08c      	b.n	8011a6a <USB_ActivateEndpoint+0x6a2>
 8011950:	07ff8f8f 	.word	0x07ff8f8f
 8011954:	07ffbf8f 	.word	0x07ffbf8f
 8011958:	07ff8e8f 	.word	0x07ff8e8f
 801195c:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	009b      	lsls	r3, r3, #2
 8011968:	4413      	add	r3, r2
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801196e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011970:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011974:	2b00      	cmp	r3, #0
 8011976:	d013      	beq.n	80119a0 <USB_ActivateEndpoint+0x5d8>
 8011978:	687a      	ldr	r2, [r7, #4]
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	009b      	lsls	r3, r3, #2
 8011980:	4413      	add	r3, r2
 8011982:	681a      	ldr	r2, [r3, #0]
 8011984:	4b3d      	ldr	r3, [pc, #244]	@ (8011a7c <USB_ActivateEndpoint+0x6b4>)
 8011986:	4013      	ands	r3, r2
 8011988:	65bb      	str	r3, [r7, #88]	@ 0x58
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	441a      	add	r2, r3
 8011994:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011996:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801199a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801199e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80119a0:	687a      	ldr	r2, [r7, #4]
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	009b      	lsls	r3, r3, #2
 80119a8:	4413      	add	r3, r2
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80119ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80119b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d013      	beq.n	80119e0 <USB_ActivateEndpoint+0x618>
 80119b8:	687a      	ldr	r2, [r7, #4]
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	781b      	ldrb	r3, [r3, #0]
 80119be:	009b      	lsls	r3, r3, #2
 80119c0:	4413      	add	r3, r2
 80119c2:	681a      	ldr	r2, [r3, #0]
 80119c4:	4b2d      	ldr	r3, [pc, #180]	@ (8011a7c <USB_ActivateEndpoint+0x6b4>)
 80119c6:	4013      	ands	r3, r2
 80119c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80119ca:	687a      	ldr	r2, [r7, #4]
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	441a      	add	r2, r3
 80119d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80119da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80119de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	78db      	ldrb	r3, [r3, #3]
 80119e4:	2b01      	cmp	r3, #1
 80119e6:	d018      	beq.n	8011a1a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80119e8:	687a      	ldr	r2, [r7, #4]
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	009b      	lsls	r3, r3, #2
 80119f0:	4413      	add	r3, r2
 80119f2:	681a      	ldr	r2, [r3, #0]
 80119f4:	4b22      	ldr	r3, [pc, #136]	@ (8011a80 <USB_ActivateEndpoint+0x6b8>)
 80119f6:	4013      	ands	r3, r2
 80119f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80119fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80119fc:	f083 0320 	eor.w	r3, r3, #32
 8011a00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	441a      	add	r2, r3
 8011a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a16:	6013      	str	r3, [r2, #0]
 8011a18:	e013      	b.n	8011a42 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	009b      	lsls	r3, r3, #2
 8011a22:	4413      	add	r3, r2
 8011a24:	681a      	ldr	r2, [r3, #0]
 8011a26:	4b16      	ldr	r3, [pc, #88]	@ (8011a80 <USB_ActivateEndpoint+0x6b8>)
 8011a28:	4013      	ands	r3, r2
 8011a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	009b      	lsls	r3, r3, #2
 8011a34:	441a      	add	r2, r3
 8011a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a40:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011a42:	687a      	ldr	r2, [r7, #4]
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	009b      	lsls	r3, r3, #2
 8011a4a:	4413      	add	r3, r2
 8011a4c:	681a      	ldr	r2, [r3, #0]
 8011a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8011a84 <USB_ActivateEndpoint+0x6bc>)
 8011a50:	4013      	ands	r3, r2
 8011a52:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	441a      	add	r2, r3
 8011a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a68:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011a6a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	377c      	adds	r7, #124	@ 0x7c
 8011a72:	46bd      	mov	sp, r7
 8011a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a78:	4770      	bx	lr
 8011a7a:	bf00      	nop
 8011a7c:	07ff8f8f 	.word	0x07ff8f8f
 8011a80:	07ff8fbf 	.word	0x07ff8fbf
 8011a84:	07ffbf8f 	.word	0x07ffbf8f

08011a88 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	b097      	sub	sp, #92	@ 0x5c
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
 8011a90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	7b1b      	ldrb	r3, [r3, #12]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d16d      	bne.n	8011b76 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	785b      	ldrb	r3, [r3, #1]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d034      	beq.n	8011b0c <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011aa2:	687a      	ldr	r2, [r7, #4]
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	781b      	ldrb	r3, [r3, #0]
 8011aa8:	009b      	lsls	r3, r3, #2
 8011aaa:	4413      	add	r3, r2
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	613b      	str	r3, [r7, #16]
 8011ab0:	693b      	ldr	r3, [r7, #16]
 8011ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d013      	beq.n	8011ae2 <USB_DeactivateEndpoint+0x5a>
 8011aba:	687a      	ldr	r2, [r7, #4]
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	009b      	lsls	r3, r3, #2
 8011ac2:	4413      	add	r3, r2
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8011c7c <USB_DeactivateEndpoint+0x1f4>)
 8011ac8:	4013      	ands	r3, r2
 8011aca:	60fb      	str	r3, [r7, #12]
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	009b      	lsls	r3, r3, #2
 8011ad4:	441a      	add	r2, r3
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011adc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011ae0:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	009b      	lsls	r3, r3, #2
 8011aea:	4413      	add	r3, r2
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	4b64      	ldr	r3, [pc, #400]	@ (8011c80 <USB_DeactivateEndpoint+0x1f8>)
 8011af0:	4013      	ands	r3, r2
 8011af2:	60bb      	str	r3, [r7, #8]
 8011af4:	687a      	ldr	r2, [r7, #4]
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	781b      	ldrb	r3, [r3, #0]
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	441a      	add	r2, r3
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b08:	6013      	str	r3, [r2, #0]
 8011b0a:	e139      	b.n	8011d80 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011b0c:	687a      	ldr	r2, [r7, #4]
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	781b      	ldrb	r3, [r3, #0]
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	4413      	add	r3, r2
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	61fb      	str	r3, [r7, #28]
 8011b1a:	69fb      	ldr	r3, [r7, #28]
 8011b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d013      	beq.n	8011b4c <USB_DeactivateEndpoint+0xc4>
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	4413      	add	r3, r2
 8011b2e:	681a      	ldr	r2, [r3, #0]
 8011b30:	4b52      	ldr	r3, [pc, #328]	@ (8011c7c <USB_DeactivateEndpoint+0x1f4>)
 8011b32:	4013      	ands	r3, r2
 8011b34:	61bb      	str	r3, [r7, #24]
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	009b      	lsls	r3, r3, #2
 8011b3e:	441a      	add	r2, r3
 8011b40:	69bb      	ldr	r3, [r7, #24]
 8011b42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b4a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011b4c:	687a      	ldr	r2, [r7, #4]
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4413      	add	r3, r2
 8011b56:	681a      	ldr	r2, [r3, #0]
 8011b58:	4b4a      	ldr	r3, [pc, #296]	@ (8011c84 <USB_DeactivateEndpoint+0x1fc>)
 8011b5a:	4013      	ands	r3, r2
 8011b5c:	617b      	str	r3, [r7, #20]
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	441a      	add	r2, r3
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b72:	6013      	str	r3, [r2, #0]
 8011b74:	e104      	b.n	8011d80 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	785b      	ldrb	r3, [r3, #1]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	f040 8084 	bne.w	8011c88 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011b80:	687a      	ldr	r2, [r7, #4]
 8011b82:	683b      	ldr	r3, [r7, #0]
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	009b      	lsls	r3, r3, #2
 8011b88:	4413      	add	r3, r2
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d013      	beq.n	8011bc0 <USB_DeactivateEndpoint+0x138>
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	009b      	lsls	r3, r3, #2
 8011ba0:	4413      	add	r3, r2
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	4b35      	ldr	r3, [pc, #212]	@ (8011c7c <USB_DeactivateEndpoint+0x1f4>)
 8011ba6:	4013      	ands	r3, r2
 8011ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8011baa:	687a      	ldr	r2, [r7, #4]
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	441a      	add	r2, r3
 8011bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bbe:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011bc0:	687a      	ldr	r2, [r7, #4]
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	009b      	lsls	r3, r3, #2
 8011bc8:	4413      	add	r3, r2
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8011bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d013      	beq.n	8011c00 <USB_DeactivateEndpoint+0x178>
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	009b      	lsls	r3, r3, #2
 8011be0:	4413      	add	r3, r2
 8011be2:	681a      	ldr	r2, [r3, #0]
 8011be4:	4b25      	ldr	r3, [pc, #148]	@ (8011c7c <USB_DeactivateEndpoint+0x1f4>)
 8011be6:	4013      	ands	r3, r2
 8011be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	781b      	ldrb	r3, [r3, #0]
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	441a      	add	r2, r3
 8011bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011bfe:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011c00:	687a      	ldr	r2, [r7, #4]
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	009b      	lsls	r3, r3, #2
 8011c08:	4413      	add	r3, r2
 8011c0a:	681a      	ldr	r2, [r3, #0]
 8011c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8011c7c <USB_DeactivateEndpoint+0x1f4>)
 8011c0e:	4013      	ands	r3, r2
 8011c10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	009b      	lsls	r3, r3, #2
 8011c1a:	441a      	add	r2, r3
 8011c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011c26:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011c28:	687a      	ldr	r2, [r7, #4]
 8011c2a:	683b      	ldr	r3, [r7, #0]
 8011c2c:	781b      	ldrb	r3, [r3, #0]
 8011c2e:	009b      	lsls	r3, r3, #2
 8011c30:	4413      	add	r3, r2
 8011c32:	681a      	ldr	r2, [r3, #0]
 8011c34:	4b13      	ldr	r3, [pc, #76]	@ (8011c84 <USB_DeactivateEndpoint+0x1fc>)
 8011c36:	4013      	ands	r3, r2
 8011c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c3a:	687a      	ldr	r2, [r7, #4]
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	009b      	lsls	r3, r3, #2
 8011c42:	441a      	add	r2, r3
 8011c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c4e:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011c50:	687a      	ldr	r2, [r7, #4]
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	781b      	ldrb	r3, [r3, #0]
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	4413      	add	r3, r2
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	4b08      	ldr	r3, [pc, #32]	@ (8011c80 <USB_DeactivateEndpoint+0x1f8>)
 8011c5e:	4013      	ands	r3, r2
 8011c60:	623b      	str	r3, [r7, #32]
 8011c62:	687a      	ldr	r2, [r7, #4]
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	009b      	lsls	r3, r3, #2
 8011c6a:	441a      	add	r2, r3
 8011c6c:	6a3b      	ldr	r3, [r7, #32]
 8011c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c76:	6013      	str	r3, [r2, #0]
 8011c78:	e082      	b.n	8011d80 <USB_DeactivateEndpoint+0x2f8>
 8011c7a:	bf00      	nop
 8011c7c:	07ff8f8f 	.word	0x07ff8f8f
 8011c80:	07ff8fbf 	.word	0x07ff8fbf
 8011c84:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	4413      	add	r3, r2
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	657b      	str	r3, [r7, #84]	@ 0x54
 8011c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d013      	beq.n	8011cc8 <USB_DeactivateEndpoint+0x240>
 8011ca0:	687a      	ldr	r2, [r7, #4]
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	781b      	ldrb	r3, [r3, #0]
 8011ca6:	009b      	lsls	r3, r3, #2
 8011ca8:	4413      	add	r3, r2
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	4b38      	ldr	r3, [pc, #224]	@ (8011d90 <USB_DeactivateEndpoint+0x308>)
 8011cae:	4013      	ands	r3, r2
 8011cb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8011cb2:	687a      	ldr	r2, [r7, #4]
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	009b      	lsls	r3, r3, #2
 8011cba:	441a      	add	r2, r3
 8011cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cc6:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011cc8:	687a      	ldr	r2, [r7, #4]
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	009b      	lsls	r3, r3, #2
 8011cd0:	4413      	add	r3, r2
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d013      	beq.n	8011d08 <USB_DeactivateEndpoint+0x280>
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	009b      	lsls	r3, r3, #2
 8011ce8:	4413      	add	r3, r2
 8011cea:	681a      	ldr	r2, [r3, #0]
 8011cec:	4b28      	ldr	r3, [pc, #160]	@ (8011d90 <USB_DeactivateEndpoint+0x308>)
 8011cee:	4013      	ands	r3, r2
 8011cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	441a      	add	r2, r3
 8011cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011d06:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011d08:	687a      	ldr	r2, [r7, #4]
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	009b      	lsls	r3, r3, #2
 8011d10:	4413      	add	r3, r2
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	4b1e      	ldr	r3, [pc, #120]	@ (8011d90 <USB_DeactivateEndpoint+0x308>)
 8011d16:	4013      	ands	r3, r2
 8011d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d1a:	687a      	ldr	r2, [r7, #4]
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	009b      	lsls	r3, r3, #2
 8011d22:	441a      	add	r2, r3
 8011d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d2e:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011d30:	687a      	ldr	r2, [r7, #4]
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	009b      	lsls	r3, r3, #2
 8011d38:	4413      	add	r3, r2
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	4b15      	ldr	r3, [pc, #84]	@ (8011d94 <USB_DeactivateEndpoint+0x30c>)
 8011d3e:	4013      	ands	r3, r2
 8011d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	441a      	add	r2, r3
 8011d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d56:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011d58:	687a      	ldr	r2, [r7, #4]
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	009b      	lsls	r3, r3, #2
 8011d60:	4413      	add	r3, r2
 8011d62:	681a      	ldr	r2, [r3, #0]
 8011d64:	4b0c      	ldr	r3, [pc, #48]	@ (8011d98 <USB_DeactivateEndpoint+0x310>)
 8011d66:	4013      	ands	r3, r2
 8011d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	009b      	lsls	r3, r3, #2
 8011d72:	441a      	add	r2, r3
 8011d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d7e:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011d80:	2300      	movs	r3, #0
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	375c      	adds	r7, #92	@ 0x5c
 8011d86:	46bd      	mov	sp, r7
 8011d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8c:	4770      	bx	lr
 8011d8e:	bf00      	nop
 8011d90:	07ff8f8f 	.word	0x07ff8f8f
 8011d94:	07ff8fbf 	.word	0x07ff8fbf
 8011d98:	07ffbf8f 	.word	0x07ffbf8f

08011d9c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b096      	sub	sp, #88	@ 0x58
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	785b      	ldrb	r3, [r3, #1]
 8011daa:	2b01      	cmp	r3, #1
 8011dac:	f040 84ed 	bne.w	801278a <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	699a      	ldr	r2, [r3, #24]
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	691b      	ldr	r3, [r3, #16]
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d903      	bls.n	8011dc4 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	691b      	ldr	r3, [r3, #16]
 8011dc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8011dc2:	e002      	b.n	8011dca <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	699b      	ldr	r3, [r3, #24]
 8011dc8:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	7b1b      	ldrb	r3, [r3, #12]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d12e      	bne.n	8011e30 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	6959      	ldr	r1, [r3, #20]
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	88da      	ldrh	r2, [r3, #6]
 8011dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ddc:	b29b      	uxth	r3, r3
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f001 f963 	bl	80130aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	00db      	lsls	r3, r3, #3
 8011dea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011dee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	00db      	lsls	r3, r3, #3
 8011dfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011dfe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011e02:	b292      	uxth	r2, r2
 8011e04:	601a      	str	r2, [r3, #0]
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	00db      	lsls	r3, r3, #3
 8011e0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011e10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011e14:	6819      	ldr	r1, [r3, #0]
 8011e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e18:	041a      	lsls	r2, r3, #16
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	00db      	lsls	r3, r3, #3
 8011e20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011e24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011e28:	430a      	orrs	r2, r1
 8011e2a:	601a      	str	r2, [r3, #0]
 8011e2c:	f000 bc90 	b.w	8012750 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	78db      	ldrb	r3, [r3, #3]
 8011e34:	2b02      	cmp	r3, #2
 8011e36:	f040 8332 	bne.w	801249e <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	6a1a      	ldr	r2, [r3, #32]
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	691b      	ldr	r3, [r3, #16]
 8011e42:	429a      	cmp	r2, r3
 8011e44:	f240 82e4 	bls.w	8012410 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011e48:	687a      	ldr	r2, [r7, #4]
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	781b      	ldrb	r3, [r3, #0]
 8011e4e:	009b      	lsls	r3, r3, #2
 8011e50:	4413      	add	r3, r2
 8011e52:	681a      	ldr	r2, [r3, #0]
 8011e54:	4ba4      	ldr	r3, [pc, #656]	@ (80120e8 <USB_EPStartXfer+0x34c>)
 8011e56:	4013      	ands	r3, r2
 8011e58:	613b      	str	r3, [r7, #16]
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	441a      	add	r2, r3
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e6e:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	6a1a      	ldr	r2, [r3, #32]
 8011e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e76:	1ad2      	subs	r2, r2, r3
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011e7c:	687a      	ldr	r2, [r7, #4]
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	009b      	lsls	r3, r3, #2
 8011e84:	4413      	add	r3, r2
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	f000 8161 	beq.w	8012154 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	785b      	ldrb	r3, [r3, #1]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d16a      	bne.n	8011f70 <USB_EPStartXfer+0x1d4>
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	00db      	lsls	r3, r3, #3
 8011ea0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011ea4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011ea8:	685a      	ldr	r2, [r3, #4]
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	781b      	ldrb	r3, [r3, #0]
 8011eae:	00db      	lsls	r3, r3, #3
 8011eb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011eb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011eb8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8011ebc:	605a      	str	r2, [r3, #4]
 8011ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d112      	bne.n	8011eea <USB_EPStartXfer+0x14e>
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	00db      	lsls	r3, r3, #3
 8011eca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011ece:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011ed2:	685a      	ldr	r2, [r3, #4]
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	00db      	lsls	r3, r3, #3
 8011eda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011ede:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011ee2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8011ee6:	605a      	str	r2, [r3, #4]
 8011ee8:	e06a      	b.n	8011fc0 <USB_EPStartXfer+0x224>
 8011eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011eec:	2b3e      	cmp	r3, #62	@ 0x3e
 8011eee:	d81e      	bhi.n	8011f2e <USB_EPStartXfer+0x192>
 8011ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ef2:	085b      	lsrs	r3, r3, #1
 8011ef4:	653b      	str	r3, [r7, #80]	@ 0x50
 8011ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ef8:	f003 0301 	and.w	r3, r3, #1
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d002      	beq.n	8011f06 <USB_EPStartXfer+0x16a>
 8011f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f02:	3301      	adds	r3, #1
 8011f04:	653b      	str	r3, [r7, #80]	@ 0x50
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	781b      	ldrb	r3, [r3, #0]
 8011f0a:	00db      	lsls	r3, r3, #3
 8011f0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011f10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011f14:	6859      	ldr	r1, [r3, #4]
 8011f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f18:	069a      	lsls	r2, r3, #26
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	00db      	lsls	r3, r3, #3
 8011f20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011f24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011f28:	430a      	orrs	r2, r1
 8011f2a:	605a      	str	r2, [r3, #4]
 8011f2c:	e048      	b.n	8011fc0 <USB_EPStartXfer+0x224>
 8011f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f30:	095b      	lsrs	r3, r3, #5
 8011f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8011f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f36:	f003 031f 	and.w	r3, r3, #31
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d102      	bne.n	8011f44 <USB_EPStartXfer+0x1a8>
 8011f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f40:	3b01      	subs	r3, #1
 8011f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	00db      	lsls	r3, r3, #3
 8011f4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011f4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011f52:	685a      	ldr	r2, [r3, #4]
 8011f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f56:	069b      	lsls	r3, r3, #26
 8011f58:	431a      	orrs	r2, r3
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	00db      	lsls	r3, r3, #3
 8011f60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011f64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011f68:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8011f6c:	605a      	str	r2, [r3, #4]
 8011f6e:	e027      	b.n	8011fc0 <USB_EPStartXfer+0x224>
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	785b      	ldrb	r3, [r3, #1]
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	d123      	bne.n	8011fc0 <USB_EPStartXfer+0x224>
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	00db      	lsls	r3, r3, #3
 8011f7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011f82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011f86:	685a      	ldr	r2, [r3, #4]
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	781b      	ldrb	r3, [r3, #0]
 8011f8c:	00db      	lsls	r3, r3, #3
 8011f8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011f92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011f96:	b292      	uxth	r2, r2
 8011f98:	605a      	str	r2, [r3, #4]
 8011f9a:	683b      	ldr	r3, [r7, #0]
 8011f9c:	781b      	ldrb	r3, [r3, #0]
 8011f9e:	00db      	lsls	r3, r3, #3
 8011fa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011fa4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011fa8:	6859      	ldr	r1, [r3, #4]
 8011faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fac:	041a      	lsls	r2, r3, #16
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	00db      	lsls	r3, r3, #3
 8011fb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011fb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8011fbc:	430a      	orrs	r2, r1
 8011fbe:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	895b      	ldrh	r3, [r3, #10]
 8011fc4:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	6959      	ldr	r1, [r3, #20]
 8011fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fcc:	b29b      	uxth	r3, r3
 8011fce:	8b7a      	ldrh	r2, [r7, #26]
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f001 f86a 	bl	80130aa <USB_WritePMA>
            ep->xfer_buff += len;
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	695a      	ldr	r2, [r3, #20]
 8011fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fdc:	441a      	add	r2, r3
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	6a1a      	ldr	r2, [r3, #32]
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	691b      	ldr	r3, [r3, #16]
 8011fea:	429a      	cmp	r2, r3
 8011fec:	d906      	bls.n	8011ffc <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	6a1a      	ldr	r2, [r3, #32]
 8011ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ff4:	1ad2      	subs	r2, r2, r3
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	621a      	str	r2, [r3, #32]
 8011ffa:	e005      	b.n	8012008 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	6a1b      	ldr	r3, [r3, #32]
 8012000:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	2200      	movs	r2, #0
 8012006:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	785b      	ldrb	r3, [r3, #1]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d16d      	bne.n	80120ec <USB_EPStartXfer+0x350>
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	781b      	ldrb	r3, [r3, #0]
 8012014:	00db      	lsls	r3, r3, #3
 8012016:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801201a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801201e:	681a      	ldr	r2, [r3, #0]
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	00db      	lsls	r3, r3, #3
 8012026:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801202a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801202e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8012032:	601a      	str	r2, [r3, #0]
 8012034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012036:	2b00      	cmp	r3, #0
 8012038:	d112      	bne.n	8012060 <USB_EPStartXfer+0x2c4>
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	00db      	lsls	r3, r3, #3
 8012040:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012044:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	00db      	lsls	r3, r3, #3
 8012050:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012054:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012058:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801205c:	601a      	str	r2, [r3, #0]
 801205e:	e06d      	b.n	801213c <USB_EPStartXfer+0x3a0>
 8012060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012062:	2b3e      	cmp	r3, #62	@ 0x3e
 8012064:	d81e      	bhi.n	80120a4 <USB_EPStartXfer+0x308>
 8012066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012068:	085b      	lsrs	r3, r3, #1
 801206a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801206c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801206e:	f003 0301 	and.w	r3, r3, #1
 8012072:	2b00      	cmp	r3, #0
 8012074:	d002      	beq.n	801207c <USB_EPStartXfer+0x2e0>
 8012076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012078:	3301      	adds	r3, #1
 801207a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	00db      	lsls	r3, r3, #3
 8012082:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012086:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801208a:	6819      	ldr	r1, [r3, #0]
 801208c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801208e:	069a      	lsls	r2, r3, #26
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	00db      	lsls	r3, r3, #3
 8012096:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801209a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801209e:	430a      	orrs	r2, r1
 80120a0:	601a      	str	r2, [r3, #0]
 80120a2:	e04b      	b.n	801213c <USB_EPStartXfer+0x3a0>
 80120a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80120a6:	095b      	lsrs	r3, r3, #5
 80120a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80120aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80120ac:	f003 031f 	and.w	r3, r3, #31
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d102      	bne.n	80120ba <USB_EPStartXfer+0x31e>
 80120b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120b6:	3b01      	subs	r3, #1
 80120b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	781b      	ldrb	r3, [r3, #0]
 80120be:	00db      	lsls	r3, r3, #3
 80120c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80120c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80120c8:	681a      	ldr	r2, [r3, #0]
 80120ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120cc:	069b      	lsls	r3, r3, #26
 80120ce:	431a      	orrs	r2, r3
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	781b      	ldrb	r3, [r3, #0]
 80120d4:	00db      	lsls	r3, r3, #3
 80120d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80120da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80120de:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80120e2:	601a      	str	r2, [r3, #0]
 80120e4:	e02a      	b.n	801213c <USB_EPStartXfer+0x3a0>
 80120e6:	bf00      	nop
 80120e8:	07ff8f8f 	.word	0x07ff8f8f
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	785b      	ldrb	r3, [r3, #1]
 80120f0:	2b01      	cmp	r3, #1
 80120f2:	d123      	bne.n	801213c <USB_EPStartXfer+0x3a0>
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	00db      	lsls	r3, r3, #3
 80120fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80120fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012102:	681a      	ldr	r2, [r3, #0]
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	00db      	lsls	r3, r3, #3
 801210a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801210e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012112:	b292      	uxth	r2, r2
 8012114:	601a      	str	r2, [r3, #0]
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	00db      	lsls	r3, r3, #3
 801211c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012120:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012124:	6819      	ldr	r1, [r3, #0]
 8012126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012128:	041a      	lsls	r2, r3, #16
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	00db      	lsls	r3, r3, #3
 8012130:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012134:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012138:	430a      	orrs	r2, r1
 801213a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	891b      	ldrh	r3, [r3, #8]
 8012140:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	6959      	ldr	r1, [r3, #20]
 8012146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012148:	b29b      	uxth	r3, r3
 801214a:	8b7a      	ldrh	r2, [r7, #26]
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f000 ffac 	bl	80130aa <USB_WritePMA>
 8012152:	e2fd      	b.n	8012750 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	785b      	ldrb	r3, [r3, #1]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d16a      	bne.n	8012232 <USB_EPStartXfer+0x496>
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	781b      	ldrb	r3, [r3, #0]
 8012160:	00db      	lsls	r3, r3, #3
 8012162:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012166:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	00db      	lsls	r3, r3, #3
 8012172:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012176:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801217a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 801217e:	601a      	str	r2, [r3, #0]
 8012180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012182:	2b00      	cmp	r3, #0
 8012184:	d112      	bne.n	80121ac <USB_EPStartXfer+0x410>
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	781b      	ldrb	r3, [r3, #0]
 801218a:	00db      	lsls	r3, r3, #3
 801218c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012190:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012194:	681a      	ldr	r2, [r3, #0]
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	00db      	lsls	r3, r3, #3
 801219c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80121a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80121a4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80121a8:	601a      	str	r2, [r3, #0]
 80121aa:	e06a      	b.n	8012282 <USB_EPStartXfer+0x4e6>
 80121ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80121b0:	d81e      	bhi.n	80121f0 <USB_EPStartXfer+0x454>
 80121b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121b4:	085b      	lsrs	r3, r3, #1
 80121b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80121b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121ba:	f003 0301 	and.w	r3, r3, #1
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d002      	beq.n	80121c8 <USB_EPStartXfer+0x42c>
 80121c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80121c4:	3301      	adds	r3, #1
 80121c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	781b      	ldrb	r3, [r3, #0]
 80121cc:	00db      	lsls	r3, r3, #3
 80121ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80121d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80121d6:	6819      	ldr	r1, [r3, #0]
 80121d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80121da:	069a      	lsls	r2, r3, #26
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	00db      	lsls	r3, r3, #3
 80121e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80121e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80121ea:	430a      	orrs	r2, r1
 80121ec:	601a      	str	r2, [r3, #0]
 80121ee:	e048      	b.n	8012282 <USB_EPStartXfer+0x4e6>
 80121f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121f2:	095b      	lsrs	r3, r3, #5
 80121f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80121f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121f8:	f003 031f 	and.w	r3, r3, #31
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d102      	bne.n	8012206 <USB_EPStartXfer+0x46a>
 8012200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012202:	3b01      	subs	r3, #1
 8012204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	00db      	lsls	r3, r3, #3
 801220c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012210:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012214:	681a      	ldr	r2, [r3, #0]
 8012216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012218:	069b      	lsls	r3, r3, #26
 801221a:	431a      	orrs	r2, r3
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	00db      	lsls	r3, r3, #3
 8012222:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012226:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801222a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801222e:	601a      	str	r2, [r3, #0]
 8012230:	e027      	b.n	8012282 <USB_EPStartXfer+0x4e6>
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	785b      	ldrb	r3, [r3, #1]
 8012236:	2b01      	cmp	r3, #1
 8012238:	d123      	bne.n	8012282 <USB_EPStartXfer+0x4e6>
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	00db      	lsls	r3, r3, #3
 8012240:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012244:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012248:	681a      	ldr	r2, [r3, #0]
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	00db      	lsls	r3, r3, #3
 8012250:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012254:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012258:	b292      	uxth	r2, r2
 801225a:	601a      	str	r2, [r3, #0]
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	781b      	ldrb	r3, [r3, #0]
 8012260:	00db      	lsls	r3, r3, #3
 8012262:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012266:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801226a:	6819      	ldr	r1, [r3, #0]
 801226c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801226e:	041a      	lsls	r2, r3, #16
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	00db      	lsls	r3, r3, #3
 8012276:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801227a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801227e:	430a      	orrs	r2, r1
 8012280:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	891b      	ldrh	r3, [r3, #8]
 8012286:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	6959      	ldr	r1, [r3, #20]
 801228c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801228e:	b29b      	uxth	r3, r3
 8012290:	8b7a      	ldrh	r2, [r7, #26]
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f000 ff09 	bl	80130aa <USB_WritePMA>
            ep->xfer_buff += len;
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	695a      	ldr	r2, [r3, #20]
 801229c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801229e:	441a      	add	r2, r3
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	6a1a      	ldr	r2, [r3, #32]
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	691b      	ldr	r3, [r3, #16]
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d906      	bls.n	80122be <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	6a1a      	ldr	r2, [r3, #32]
 80122b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80122b6:	1ad2      	subs	r2, r2, r3
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	621a      	str	r2, [r3, #32]
 80122bc:	e005      	b.n	80122ca <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	6a1b      	ldr	r3, [r3, #32]
 80122c2:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	2200      	movs	r2, #0
 80122c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	785b      	ldrb	r3, [r3, #1]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d16a      	bne.n	80123a8 <USB_EPStartXfer+0x60c>
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	781b      	ldrb	r3, [r3, #0]
 80122d6:	00db      	lsls	r3, r3, #3
 80122d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80122dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80122e0:	685a      	ldr	r2, [r3, #4]
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	781b      	ldrb	r3, [r3, #0]
 80122e6:	00db      	lsls	r3, r3, #3
 80122e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80122ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80122f0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80122f4:	605a      	str	r2, [r3, #4]
 80122f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d112      	bne.n	8012322 <USB_EPStartXfer+0x586>
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	00db      	lsls	r3, r3, #3
 8012302:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012306:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801230a:	685a      	ldr	r2, [r3, #4]
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	00db      	lsls	r3, r3, #3
 8012312:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012316:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801231a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801231e:	605a      	str	r2, [r3, #4]
 8012320:	e06a      	b.n	80123f8 <USB_EPStartXfer+0x65c>
 8012322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012324:	2b3e      	cmp	r3, #62	@ 0x3e
 8012326:	d81e      	bhi.n	8012366 <USB_EPStartXfer+0x5ca>
 8012328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801232a:	085b      	lsrs	r3, r3, #1
 801232c:	647b      	str	r3, [r7, #68]	@ 0x44
 801232e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012330:	f003 0301 	and.w	r3, r3, #1
 8012334:	2b00      	cmp	r3, #0
 8012336:	d002      	beq.n	801233e <USB_EPStartXfer+0x5a2>
 8012338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801233a:	3301      	adds	r3, #1
 801233c:	647b      	str	r3, [r7, #68]	@ 0x44
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	00db      	lsls	r3, r3, #3
 8012344:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012348:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801234c:	6859      	ldr	r1, [r3, #4]
 801234e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012350:	069a      	lsls	r2, r3, #26
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	00db      	lsls	r3, r3, #3
 8012358:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801235c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012360:	430a      	orrs	r2, r1
 8012362:	605a      	str	r2, [r3, #4]
 8012364:	e048      	b.n	80123f8 <USB_EPStartXfer+0x65c>
 8012366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012368:	095b      	lsrs	r3, r3, #5
 801236a:	647b      	str	r3, [r7, #68]	@ 0x44
 801236c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801236e:	f003 031f 	and.w	r3, r3, #31
 8012372:	2b00      	cmp	r3, #0
 8012374:	d102      	bne.n	801237c <USB_EPStartXfer+0x5e0>
 8012376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012378:	3b01      	subs	r3, #1
 801237a:	647b      	str	r3, [r7, #68]	@ 0x44
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	00db      	lsls	r3, r3, #3
 8012382:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012386:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801238a:	685a      	ldr	r2, [r3, #4]
 801238c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801238e:	069b      	lsls	r3, r3, #26
 8012390:	431a      	orrs	r2, r3
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	781b      	ldrb	r3, [r3, #0]
 8012396:	00db      	lsls	r3, r3, #3
 8012398:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801239c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80123a0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80123a4:	605a      	str	r2, [r3, #4]
 80123a6:	e027      	b.n	80123f8 <USB_EPStartXfer+0x65c>
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	785b      	ldrb	r3, [r3, #1]
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	d123      	bne.n	80123f8 <USB_EPStartXfer+0x65c>
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	00db      	lsls	r3, r3, #3
 80123b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80123ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80123be:	685a      	ldr	r2, [r3, #4]
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	00db      	lsls	r3, r3, #3
 80123c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80123ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80123ce:	b292      	uxth	r2, r2
 80123d0:	605a      	str	r2, [r3, #4]
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	00db      	lsls	r3, r3, #3
 80123d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80123dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80123e0:	6859      	ldr	r1, [r3, #4]
 80123e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123e4:	041a      	lsls	r2, r3, #16
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	00db      	lsls	r3, r3, #3
 80123ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80123f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80123f4:	430a      	orrs	r2, r1
 80123f6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	895b      	ldrh	r3, [r3, #10]
 80123fc:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	6959      	ldr	r1, [r3, #20]
 8012402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012404:	b29b      	uxth	r3, r3
 8012406:	8b7a      	ldrh	r2, [r7, #26]
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 fe4e 	bl	80130aa <USB_WritePMA>
 801240e:	e19f      	b.n	8012750 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	6a1b      	ldr	r3, [r3, #32]
 8012414:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012416:	687a      	ldr	r2, [r7, #4]
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	781b      	ldrb	r3, [r3, #0]
 801241c:	009b      	lsls	r3, r3, #2
 801241e:	4413      	add	r3, r2
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	4ba0      	ldr	r3, [pc, #640]	@ (80126a4 <USB_EPStartXfer+0x908>)
 8012424:	4013      	ands	r3, r2
 8012426:	617b      	str	r3, [r7, #20]
 8012428:	687a      	ldr	r2, [r7, #4]
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	009b      	lsls	r3, r3, #2
 8012430:	441a      	add	r2, r3
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801243c:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	00db      	lsls	r3, r3, #3
 8012444:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012448:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801244c:	681a      	ldr	r2, [r3, #0]
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	00db      	lsls	r3, r3, #3
 8012454:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012458:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801245c:	b292      	uxth	r2, r2
 801245e:	601a      	str	r2, [r3, #0]
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	00db      	lsls	r3, r3, #3
 8012466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801246a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801246e:	6819      	ldr	r1, [r3, #0]
 8012470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012472:	041a      	lsls	r2, r3, #16
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	781b      	ldrb	r3, [r3, #0]
 8012478:	00db      	lsls	r3, r3, #3
 801247a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801247e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012482:	430a      	orrs	r2, r1
 8012484:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	891b      	ldrh	r3, [r3, #8]
 801248a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	6959      	ldr	r1, [r3, #20]
 8012490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012492:	b29b      	uxth	r3, r3
 8012494:	8b7a      	ldrh	r2, [r7, #26]
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f000 fe07 	bl	80130aa <USB_WritePMA>
 801249c:	e158      	b.n	8012750 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	6a1a      	ldr	r2, [r3, #32]
 80124a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124a4:	1ad2      	subs	r2, r2, r3
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80124aa:	687a      	ldr	r2, [r7, #4]
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	009b      	lsls	r3, r3, #2
 80124b2:	4413      	add	r3, r2
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	f000 80a3 	beq.w	8012606 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	785b      	ldrb	r3, [r3, #1]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d16a      	bne.n	801259e <USB_EPStartXfer+0x802>
 80124c8:	683b      	ldr	r3, [r7, #0]
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	00db      	lsls	r3, r3, #3
 80124ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80124d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80124d6:	685a      	ldr	r2, [r3, #4]
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	00db      	lsls	r3, r3, #3
 80124de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80124e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80124e6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80124ea:	605a      	str	r2, [r3, #4]
 80124ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d112      	bne.n	8012518 <USB_EPStartXfer+0x77c>
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	00db      	lsls	r3, r3, #3
 80124f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80124fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012500:	685a      	ldr	r2, [r3, #4]
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	00db      	lsls	r3, r3, #3
 8012508:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801250c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012510:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012514:	605a      	str	r2, [r3, #4]
 8012516:	e06a      	b.n	80125ee <USB_EPStartXfer+0x852>
 8012518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801251a:	2b3e      	cmp	r3, #62	@ 0x3e
 801251c:	d81e      	bhi.n	801255c <USB_EPStartXfer+0x7c0>
 801251e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012520:	085b      	lsrs	r3, r3, #1
 8012522:	643b      	str	r3, [r7, #64]	@ 0x40
 8012524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012526:	f003 0301 	and.w	r3, r3, #1
 801252a:	2b00      	cmp	r3, #0
 801252c:	d002      	beq.n	8012534 <USB_EPStartXfer+0x798>
 801252e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012530:	3301      	adds	r3, #1
 8012532:	643b      	str	r3, [r7, #64]	@ 0x40
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	00db      	lsls	r3, r3, #3
 801253a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801253e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012542:	6859      	ldr	r1, [r3, #4]
 8012544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012546:	069a      	lsls	r2, r3, #26
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	00db      	lsls	r3, r3, #3
 801254e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012552:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012556:	430a      	orrs	r2, r1
 8012558:	605a      	str	r2, [r3, #4]
 801255a:	e048      	b.n	80125ee <USB_EPStartXfer+0x852>
 801255c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801255e:	095b      	lsrs	r3, r3, #5
 8012560:	643b      	str	r3, [r7, #64]	@ 0x40
 8012562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012564:	f003 031f 	and.w	r3, r3, #31
 8012568:	2b00      	cmp	r3, #0
 801256a:	d102      	bne.n	8012572 <USB_EPStartXfer+0x7d6>
 801256c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801256e:	3b01      	subs	r3, #1
 8012570:	643b      	str	r3, [r7, #64]	@ 0x40
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	781b      	ldrb	r3, [r3, #0]
 8012576:	00db      	lsls	r3, r3, #3
 8012578:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801257c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012580:	685a      	ldr	r2, [r3, #4]
 8012582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012584:	069b      	lsls	r3, r3, #26
 8012586:	431a      	orrs	r2, r3
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	00db      	lsls	r3, r3, #3
 801258e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012592:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012596:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801259a:	605a      	str	r2, [r3, #4]
 801259c:	e027      	b.n	80125ee <USB_EPStartXfer+0x852>
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	785b      	ldrb	r3, [r3, #1]
 80125a2:	2b01      	cmp	r3, #1
 80125a4:	d123      	bne.n	80125ee <USB_EPStartXfer+0x852>
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	00db      	lsls	r3, r3, #3
 80125ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80125b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80125b4:	685a      	ldr	r2, [r3, #4]
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	00db      	lsls	r3, r3, #3
 80125bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80125c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80125c4:	b292      	uxth	r2, r2
 80125c6:	605a      	str	r2, [r3, #4]
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	00db      	lsls	r3, r3, #3
 80125ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80125d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80125d6:	6859      	ldr	r1, [r3, #4]
 80125d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125da:	041a      	lsls	r2, r3, #16
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	00db      	lsls	r3, r3, #3
 80125e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80125e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80125ea:	430a      	orrs	r2, r1
 80125ec:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	895b      	ldrh	r3, [r3, #10]
 80125f2:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	6959      	ldr	r1, [r3, #20]
 80125f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	8b7a      	ldrh	r2, [r7, #26]
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f000 fd53 	bl	80130aa <USB_WritePMA>
 8012604:	e0a4      	b.n	8012750 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	785b      	ldrb	r3, [r3, #1]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d16d      	bne.n	80126ea <USB_EPStartXfer+0x94e>
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	00db      	lsls	r3, r3, #3
 8012614:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012618:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801261c:	681a      	ldr	r2, [r3, #0]
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	781b      	ldrb	r3, [r3, #0]
 8012622:	00db      	lsls	r3, r3, #3
 8012624:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012628:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801262c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8012630:	601a      	str	r2, [r3, #0]
 8012632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012634:	2b00      	cmp	r3, #0
 8012636:	d112      	bne.n	801265e <USB_EPStartXfer+0x8c2>
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	00db      	lsls	r3, r3, #3
 801263e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012642:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012646:	681a      	ldr	r2, [r3, #0]
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	00db      	lsls	r3, r3, #3
 801264e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012652:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012656:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801265a:	601a      	str	r2, [r3, #0]
 801265c:	e06d      	b.n	801273a <USB_EPStartXfer+0x99e>
 801265e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012660:	2b3e      	cmp	r3, #62	@ 0x3e
 8012662:	d821      	bhi.n	80126a8 <USB_EPStartXfer+0x90c>
 8012664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012666:	085b      	lsrs	r3, r3, #1
 8012668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801266a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801266c:	f003 0301 	and.w	r3, r3, #1
 8012670:	2b00      	cmp	r3, #0
 8012672:	d002      	beq.n	801267a <USB_EPStartXfer+0x8de>
 8012674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012676:	3301      	adds	r3, #1
 8012678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	00db      	lsls	r3, r3, #3
 8012680:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012684:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012688:	6819      	ldr	r1, [r3, #0]
 801268a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801268c:	069a      	lsls	r2, r3, #26
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	00db      	lsls	r3, r3, #3
 8012694:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012698:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801269c:	430a      	orrs	r2, r1
 801269e:	601a      	str	r2, [r3, #0]
 80126a0:	e04b      	b.n	801273a <USB_EPStartXfer+0x99e>
 80126a2:	bf00      	nop
 80126a4:	07ff8e8f 	.word	0x07ff8e8f
 80126a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126aa:	095b      	lsrs	r3, r3, #5
 80126ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126b0:	f003 031f 	and.w	r3, r3, #31
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d102      	bne.n	80126be <USB_EPStartXfer+0x922>
 80126b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126ba:	3b01      	subs	r3, #1
 80126bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	00db      	lsls	r3, r3, #3
 80126c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80126c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126d0:	069b      	lsls	r3, r3, #26
 80126d2:	431a      	orrs	r2, r3
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	781b      	ldrb	r3, [r3, #0]
 80126d8:	00db      	lsls	r3, r3, #3
 80126da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80126de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80126e2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80126e6:	601a      	str	r2, [r3, #0]
 80126e8:	e027      	b.n	801273a <USB_EPStartXfer+0x99e>
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	785b      	ldrb	r3, [r3, #1]
 80126ee:	2b01      	cmp	r3, #1
 80126f0:	d123      	bne.n	801273a <USB_EPStartXfer+0x99e>
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	781b      	ldrb	r3, [r3, #0]
 80126f6:	00db      	lsls	r3, r3, #3
 80126f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80126fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	781b      	ldrb	r3, [r3, #0]
 8012706:	00db      	lsls	r3, r3, #3
 8012708:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801270c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012710:	b292      	uxth	r2, r2
 8012712:	601a      	str	r2, [r3, #0]
 8012714:	683b      	ldr	r3, [r7, #0]
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	00db      	lsls	r3, r3, #3
 801271a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801271e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012722:	6819      	ldr	r1, [r3, #0]
 8012724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012726:	041a      	lsls	r2, r3, #16
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	00db      	lsls	r3, r3, #3
 801272e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012732:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012736:	430a      	orrs	r2, r1
 8012738:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	891b      	ldrh	r3, [r3, #8]
 801273e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	6959      	ldr	r1, [r3, #20]
 8012744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012746:	b29b      	uxth	r3, r3
 8012748:	8b7a      	ldrh	r2, [r7, #26]
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 fcad 	bl	80130aa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012750:	687a      	ldr	r2, [r7, #4]
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	009b      	lsls	r3, r3, #2
 8012758:	4413      	add	r3, r2
 801275a:	681a      	ldr	r2, [r3, #0]
 801275c:	4b8b      	ldr	r3, [pc, #556]	@ (801298c <USB_EPStartXfer+0xbf0>)
 801275e:	4013      	ands	r3, r2
 8012760:	60fb      	str	r3, [r7, #12]
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	f083 0310 	eor.w	r3, r3, #16
 8012768:	60fb      	str	r3, [r7, #12]
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	f083 0320 	eor.w	r3, r3, #32
 8012770:	60fb      	str	r3, [r7, #12]
 8012772:	687a      	ldr	r2, [r7, #4]
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	009b      	lsls	r3, r3, #2
 801277a:	441a      	add	r2, r3
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012786:	6013      	str	r3, [r2, #0]
 8012788:	e36b      	b.n	8012e62 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	7b1b      	ldrb	r3, [r3, #12]
 801278e:	2b00      	cmp	r3, #0
 8012790:	f040 8081 	bne.w	8012896 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	699a      	ldr	r2, [r3, #24]
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	691b      	ldr	r3, [r3, #16]
 801279c:	429a      	cmp	r2, r3
 801279e:	d909      	bls.n	80127b4 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	691b      	ldr	r3, [r3, #16]
 80127a4:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	699a      	ldr	r2, [r3, #24]
 80127aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127ac:	1ad2      	subs	r2, r2, r3
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	619a      	str	r2, [r3, #24]
 80127b2:	e005      	b.n	80127c0 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	699b      	ldr	r3, [r3, #24]
 80127b8:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	2200      	movs	r2, #0
 80127be:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	00db      	lsls	r3, r3, #3
 80127c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80127ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80127ce:	685a      	ldr	r2, [r3, #4]
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	00db      	lsls	r3, r3, #3
 80127d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80127da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80127de:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80127e2:	605a      	str	r2, [r3, #4]
 80127e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d112      	bne.n	8012810 <USB_EPStartXfer+0xa74>
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	781b      	ldrb	r3, [r3, #0]
 80127ee:	00db      	lsls	r3, r3, #3
 80127f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80127f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80127f8:	685a      	ldr	r2, [r3, #4]
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	00db      	lsls	r3, r3, #3
 8012800:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012804:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012808:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801280c:	605a      	str	r2, [r3, #4]
 801280e:	e30c      	b.n	8012e2a <USB_EPStartXfer+0x108e>
 8012810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012812:	2b3e      	cmp	r3, #62	@ 0x3e
 8012814:	d81e      	bhi.n	8012854 <USB_EPStartXfer+0xab8>
 8012816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012818:	085b      	lsrs	r3, r3, #1
 801281a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801281c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801281e:	f003 0301 	and.w	r3, r3, #1
 8012822:	2b00      	cmp	r3, #0
 8012824:	d002      	beq.n	801282c <USB_EPStartXfer+0xa90>
 8012826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012828:	3301      	adds	r3, #1
 801282a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	00db      	lsls	r3, r3, #3
 8012832:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012836:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801283a:	6859      	ldr	r1, [r3, #4]
 801283c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801283e:	069a      	lsls	r2, r3, #26
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	00db      	lsls	r3, r3, #3
 8012846:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801284a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801284e:	430a      	orrs	r2, r1
 8012850:	605a      	str	r2, [r3, #4]
 8012852:	e2ea      	b.n	8012e2a <USB_EPStartXfer+0x108e>
 8012854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012856:	095b      	lsrs	r3, r3, #5
 8012858:	63bb      	str	r3, [r7, #56]	@ 0x38
 801285a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801285c:	f003 031f 	and.w	r3, r3, #31
 8012860:	2b00      	cmp	r3, #0
 8012862:	d102      	bne.n	801286a <USB_EPStartXfer+0xace>
 8012864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012866:	3b01      	subs	r3, #1
 8012868:	63bb      	str	r3, [r7, #56]	@ 0x38
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	00db      	lsls	r3, r3, #3
 8012870:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012874:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012878:	685a      	ldr	r2, [r3, #4]
 801287a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801287c:	069b      	lsls	r3, r3, #26
 801287e:	431a      	orrs	r2, r3
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	00db      	lsls	r3, r3, #3
 8012886:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801288a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801288e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012892:	605a      	str	r2, [r3, #4]
 8012894:	e2c9      	b.n	8012e2a <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	78db      	ldrb	r3, [r3, #3]
 801289a:	2b02      	cmp	r3, #2
 801289c:	f040 8176 	bne.w	8012b8c <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	785b      	ldrb	r3, [r3, #1]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d173      	bne.n	8012990 <USB_EPStartXfer+0xbf4>
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	00db      	lsls	r3, r3, #3
 80128ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80128b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	00db      	lsls	r3, r3, #3
 80128be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80128c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80128c6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80128ca:	601a      	str	r2, [r3, #0]
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	691b      	ldr	r3, [r3, #16]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d112      	bne.n	80128fa <USB_EPStartXfer+0xb5e>
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	00db      	lsls	r3, r3, #3
 80128da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80128de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80128e2:	681a      	ldr	r2, [r3, #0]
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	00db      	lsls	r3, r3, #3
 80128ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80128ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80128f2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80128f6:	601a      	str	r2, [r3, #0]
 80128f8:	e073      	b.n	80129e2 <USB_EPStartXfer+0xc46>
 80128fa:	683b      	ldr	r3, [r7, #0]
 80128fc:	691b      	ldr	r3, [r3, #16]
 80128fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8012900:	d820      	bhi.n	8012944 <USB_EPStartXfer+0xba8>
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	691b      	ldr	r3, [r3, #16]
 8012906:	085b      	lsrs	r3, r3, #1
 8012908:	637b      	str	r3, [r7, #52]	@ 0x34
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	691b      	ldr	r3, [r3, #16]
 801290e:	f003 0301 	and.w	r3, r3, #1
 8012912:	2b00      	cmp	r3, #0
 8012914:	d002      	beq.n	801291c <USB_EPStartXfer+0xb80>
 8012916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012918:	3301      	adds	r3, #1
 801291a:	637b      	str	r3, [r7, #52]	@ 0x34
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	00db      	lsls	r3, r3, #3
 8012922:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012926:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801292a:	6819      	ldr	r1, [r3, #0]
 801292c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801292e:	069a      	lsls	r2, r3, #26
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	00db      	lsls	r3, r3, #3
 8012936:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801293a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801293e:	430a      	orrs	r2, r1
 8012940:	601a      	str	r2, [r3, #0]
 8012942:	e04e      	b.n	80129e2 <USB_EPStartXfer+0xc46>
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	691b      	ldr	r3, [r3, #16]
 8012948:	095b      	lsrs	r3, r3, #5
 801294a:	637b      	str	r3, [r7, #52]	@ 0x34
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	691b      	ldr	r3, [r3, #16]
 8012950:	f003 031f 	and.w	r3, r3, #31
 8012954:	2b00      	cmp	r3, #0
 8012956:	d102      	bne.n	801295e <USB_EPStartXfer+0xbc2>
 8012958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801295a:	3b01      	subs	r3, #1
 801295c:	637b      	str	r3, [r7, #52]	@ 0x34
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	00db      	lsls	r3, r3, #3
 8012964:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012968:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 801296c:	681a      	ldr	r2, [r3, #0]
 801296e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012970:	069b      	lsls	r3, r3, #26
 8012972:	431a      	orrs	r2, r3
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	781b      	ldrb	r3, [r3, #0]
 8012978:	00db      	lsls	r3, r3, #3
 801297a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801297e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012982:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012986:	601a      	str	r2, [r3, #0]
 8012988:	e02b      	b.n	80129e2 <USB_EPStartXfer+0xc46>
 801298a:	bf00      	nop
 801298c:	07ff8fbf 	.word	0x07ff8fbf
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	785b      	ldrb	r3, [r3, #1]
 8012994:	2b01      	cmp	r3, #1
 8012996:	d124      	bne.n	80129e2 <USB_EPStartXfer+0xc46>
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	781b      	ldrb	r3, [r3, #0]
 801299c:	00db      	lsls	r3, r3, #3
 801299e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80129a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80129a6:	681a      	ldr	r2, [r3, #0]
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	00db      	lsls	r3, r3, #3
 80129ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80129b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80129b6:	b292      	uxth	r2, r2
 80129b8:	601a      	str	r2, [r3, #0]
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	781b      	ldrb	r3, [r3, #0]
 80129be:	00db      	lsls	r3, r3, #3
 80129c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80129c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80129c8:	6819      	ldr	r1, [r3, #0]
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	691b      	ldr	r3, [r3, #16]
 80129ce:	041a      	lsls	r2, r3, #16
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	00db      	lsls	r3, r3, #3
 80129d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80129da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80129de:	430a      	orrs	r2, r1
 80129e0:	601a      	str	r2, [r3, #0]
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	785b      	ldrb	r3, [r3, #1]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d170      	bne.n	8012acc <USB_EPStartXfer+0xd30>
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	00db      	lsls	r3, r3, #3
 80129f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80129f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80129f8:	685a      	ldr	r2, [r3, #4]
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	781b      	ldrb	r3, [r3, #0]
 80129fe:	00db      	lsls	r3, r3, #3
 8012a00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012a04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012a08:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8012a0c:	605a      	str	r2, [r3, #4]
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	691b      	ldr	r3, [r3, #16]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d112      	bne.n	8012a3c <USB_EPStartXfer+0xca0>
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	00db      	lsls	r3, r3, #3
 8012a1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012a20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012a24:	685a      	ldr	r2, [r3, #4]
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	00db      	lsls	r3, r3, #3
 8012a2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012a30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012a34:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012a38:	605a      	str	r2, [r3, #4]
 8012a3a:	e070      	b.n	8012b1e <USB_EPStartXfer+0xd82>
 8012a3c:	683b      	ldr	r3, [r7, #0]
 8012a3e:	691b      	ldr	r3, [r3, #16]
 8012a40:	2b3e      	cmp	r3, #62	@ 0x3e
 8012a42:	d820      	bhi.n	8012a86 <USB_EPStartXfer+0xcea>
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	691b      	ldr	r3, [r3, #16]
 8012a48:	085b      	lsrs	r3, r3, #1
 8012a4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	691b      	ldr	r3, [r3, #16]
 8012a50:	f003 0301 	and.w	r3, r3, #1
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d002      	beq.n	8012a5e <USB_EPStartXfer+0xcc2>
 8012a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	781b      	ldrb	r3, [r3, #0]
 8012a62:	00db      	lsls	r3, r3, #3
 8012a64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012a68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012a6c:	6859      	ldr	r1, [r3, #4]
 8012a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a70:	069a      	lsls	r2, r3, #26
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	781b      	ldrb	r3, [r3, #0]
 8012a76:	00db      	lsls	r3, r3, #3
 8012a78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012a7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012a80:	430a      	orrs	r2, r1
 8012a82:	605a      	str	r2, [r3, #4]
 8012a84:	e04b      	b.n	8012b1e <USB_EPStartXfer+0xd82>
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	691b      	ldr	r3, [r3, #16]
 8012a8a:	095b      	lsrs	r3, r3, #5
 8012a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	691b      	ldr	r3, [r3, #16]
 8012a92:	f003 031f 	and.w	r3, r3, #31
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d102      	bne.n	8012aa0 <USB_EPStartXfer+0xd04>
 8012a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a9c:	3b01      	subs	r3, #1
 8012a9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	00db      	lsls	r3, r3, #3
 8012aa6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012aaa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012aae:	685a      	ldr	r2, [r3, #4]
 8012ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ab2:	069b      	lsls	r3, r3, #26
 8012ab4:	431a      	orrs	r2, r3
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	00db      	lsls	r3, r3, #3
 8012abc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012ac0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012ac4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012ac8:	605a      	str	r2, [r3, #4]
 8012aca:	e028      	b.n	8012b1e <USB_EPStartXfer+0xd82>
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	785b      	ldrb	r3, [r3, #1]
 8012ad0:	2b01      	cmp	r3, #1
 8012ad2:	d124      	bne.n	8012b1e <USB_EPStartXfer+0xd82>
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	00db      	lsls	r3, r3, #3
 8012ada:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012ade:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012ae2:	685a      	ldr	r2, [r3, #4]
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	00db      	lsls	r3, r3, #3
 8012aea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012aee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012af2:	b292      	uxth	r2, r2
 8012af4:	605a      	str	r2, [r3, #4]
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	00db      	lsls	r3, r3, #3
 8012afc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012b00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012b04:	6859      	ldr	r1, [r3, #4]
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	691b      	ldr	r3, [r3, #16]
 8012b0a:	041a      	lsls	r2, r3, #16
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	00db      	lsls	r3, r3, #3
 8012b12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012b16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012b1a:	430a      	orrs	r2, r1
 8012b1c:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	69db      	ldr	r3, [r3, #28]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	f000 8181 	beq.w	8012e2a <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8012b28:	687a      	ldr	r2, [r7, #4]
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	781b      	ldrb	r3, [r3, #0]
 8012b2e:	009b      	lsls	r3, r3, #2
 8012b30:	4413      	add	r3, r2
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012b36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d004      	beq.n	8012b4a <USB_EPStartXfer+0xdae>
 8012b40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d10b      	bne.n	8012b62 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012b4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	f040 816a 	bne.w	8012e2a <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012b56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f040 8164 	bne.w	8012e2a <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012b62:	687a      	ldr	r2, [r7, #4]
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	4413      	add	r3, r2
 8012b6c:	681a      	ldr	r2, [r3, #0]
 8012b6e:	4b98      	ldr	r3, [pc, #608]	@ (8012dd0 <USB_EPStartXfer+0x1034>)
 8012b70:	4013      	ands	r3, r2
 8012b72:	623b      	str	r3, [r7, #32]
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	781b      	ldrb	r3, [r3, #0]
 8012b7a:	009b      	lsls	r3, r3, #2
 8012b7c:	441a      	add	r2, r3
 8012b7e:	6a3b      	ldr	r3, [r7, #32]
 8012b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012b88:	6013      	str	r3, [r2, #0]
 8012b8a:	e14e      	b.n	8012e2a <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	78db      	ldrb	r3, [r3, #3]
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	f040 8148 	bne.w	8012e26 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	699a      	ldr	r2, [r3, #24]
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	691b      	ldr	r3, [r3, #16]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d909      	bls.n	8012bb6 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	691b      	ldr	r3, [r3, #16]
 8012ba6:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	699a      	ldr	r2, [r3, #24]
 8012bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012bae:	1ad2      	subs	r2, r2, r3
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	619a      	str	r2, [r3, #24]
 8012bb4:	e005      	b.n	8012bc2 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	699b      	ldr	r3, [r3, #24]
 8012bba:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	785b      	ldrb	r3, [r3, #1]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d16a      	bne.n	8012ca0 <USB_EPStartXfer+0xf04>
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	781b      	ldrb	r3, [r3, #0]
 8012bce:	00db      	lsls	r3, r3, #3
 8012bd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012bd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	00db      	lsls	r3, r3, #3
 8012be0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012be4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012be8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8012bec:	601a      	str	r2, [r3, #0]
 8012bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d112      	bne.n	8012c1a <USB_EPStartXfer+0xe7e>
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	00db      	lsls	r3, r3, #3
 8012bfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012bfe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	00db      	lsls	r3, r3, #3
 8012c0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012c0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012c12:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012c16:	601a      	str	r2, [r3, #0]
 8012c18:	e06a      	b.n	8012cf0 <USB_EPStartXfer+0xf54>
 8012c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8012c1e:	d81e      	bhi.n	8012c5e <USB_EPStartXfer+0xec2>
 8012c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c22:	085b      	lsrs	r3, r3, #1
 8012c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c28:	f003 0301 	and.w	r3, r3, #1
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d002      	beq.n	8012c36 <USB_EPStartXfer+0xe9a>
 8012c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c32:	3301      	adds	r3, #1
 8012c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	781b      	ldrb	r3, [r3, #0]
 8012c3a:	00db      	lsls	r3, r3, #3
 8012c3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012c40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012c44:	6819      	ldr	r1, [r3, #0]
 8012c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c48:	069a      	lsls	r2, r3, #26
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	00db      	lsls	r3, r3, #3
 8012c50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012c54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012c58:	430a      	orrs	r2, r1
 8012c5a:	601a      	str	r2, [r3, #0]
 8012c5c:	e048      	b.n	8012cf0 <USB_EPStartXfer+0xf54>
 8012c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c60:	095b      	lsrs	r3, r3, #5
 8012c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c66:	f003 031f 	and.w	r3, r3, #31
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d102      	bne.n	8012c74 <USB_EPStartXfer+0xed8>
 8012c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c70:	3b01      	subs	r3, #1
 8012c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	00db      	lsls	r3, r3, #3
 8012c7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012c7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012c82:	681a      	ldr	r2, [r3, #0]
 8012c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c86:	069b      	lsls	r3, r3, #26
 8012c88:	431a      	orrs	r2, r3
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	00db      	lsls	r3, r3, #3
 8012c90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012c94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012c98:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012c9c:	601a      	str	r2, [r3, #0]
 8012c9e:	e027      	b.n	8012cf0 <USB_EPStartXfer+0xf54>
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	785b      	ldrb	r3, [r3, #1]
 8012ca4:	2b01      	cmp	r3, #1
 8012ca6:	d123      	bne.n	8012cf0 <USB_EPStartXfer+0xf54>
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	00db      	lsls	r3, r3, #3
 8012cae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012cb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012cb6:	681a      	ldr	r2, [r3, #0]
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	00db      	lsls	r3, r3, #3
 8012cbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012cc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012cc6:	b292      	uxth	r2, r2
 8012cc8:	601a      	str	r2, [r3, #0]
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	00db      	lsls	r3, r3, #3
 8012cd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012cd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012cd8:	6819      	ldr	r1, [r3, #0]
 8012cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012cdc:	041a      	lsls	r2, r3, #16
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	00db      	lsls	r3, r3, #3
 8012ce4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012ce8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012cec:	430a      	orrs	r2, r1
 8012cee:	601a      	str	r2, [r3, #0]
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	785b      	ldrb	r3, [r3, #1]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d16d      	bne.n	8012dd4 <USB_EPStartXfer+0x1038>
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	781b      	ldrb	r3, [r3, #0]
 8012cfc:	00db      	lsls	r3, r3, #3
 8012cfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012d02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012d06:	685a      	ldr	r2, [r3, #4]
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	00db      	lsls	r3, r3, #3
 8012d0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012d12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012d16:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8012d1a:	605a      	str	r2, [r3, #4]
 8012d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d112      	bne.n	8012d48 <USB_EPStartXfer+0xfac>
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	00db      	lsls	r3, r3, #3
 8012d28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012d2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012d30:	685a      	ldr	r2, [r3, #4]
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	00db      	lsls	r3, r3, #3
 8012d38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012d3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012d40:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012d44:	605a      	str	r2, [r3, #4]
 8012d46:	e070      	b.n	8012e2a <USB_EPStartXfer+0x108e>
 8012d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8012d4c:	d81e      	bhi.n	8012d8c <USB_EPStartXfer+0xff0>
 8012d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d50:	085b      	lsrs	r3, r3, #1
 8012d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d56:	f003 0301 	and.w	r3, r3, #1
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d002      	beq.n	8012d64 <USB_EPStartXfer+0xfc8>
 8012d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d60:	3301      	adds	r3, #1
 8012d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	00db      	lsls	r3, r3, #3
 8012d6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012d6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012d72:	6859      	ldr	r1, [r3, #4]
 8012d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d76:	069a      	lsls	r2, r3, #26
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	00db      	lsls	r3, r3, #3
 8012d7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012d82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012d86:	430a      	orrs	r2, r1
 8012d88:	605a      	str	r2, [r3, #4]
 8012d8a:	e04e      	b.n	8012e2a <USB_EPStartXfer+0x108e>
 8012d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d8e:	095b      	lsrs	r3, r3, #5
 8012d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d94:	f003 031f 	and.w	r3, r3, #31
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d102      	bne.n	8012da2 <USB_EPStartXfer+0x1006>
 8012d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d9e:	3b01      	subs	r3, #1
 8012da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	781b      	ldrb	r3, [r3, #0]
 8012da6:	00db      	lsls	r3, r3, #3
 8012da8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012dac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012db0:	685a      	ldr	r2, [r3, #4]
 8012db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012db4:	069b      	lsls	r3, r3, #26
 8012db6:	431a      	orrs	r2, r3
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	00db      	lsls	r3, r3, #3
 8012dbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012dc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012dc6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8012dca:	605a      	str	r2, [r3, #4]
 8012dcc:	e02d      	b.n	8012e2a <USB_EPStartXfer+0x108e>
 8012dce:	bf00      	nop
 8012dd0:	07ff8f8f 	.word	0x07ff8f8f
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	785b      	ldrb	r3, [r3, #1]
 8012dd8:	2b01      	cmp	r3, #1
 8012dda:	d126      	bne.n	8012e2a <USB_EPStartXfer+0x108e>
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	781b      	ldrb	r3, [r3, #0]
 8012de0:	00db      	lsls	r3, r3, #3
 8012de2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012de6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012dea:	685a      	ldr	r2, [r3, #4]
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	781b      	ldrb	r3, [r3, #0]
 8012df0:	00db      	lsls	r3, r3, #3
 8012df2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012df6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012dfa:	b292      	uxth	r2, r2
 8012dfc:	605a      	str	r2, [r3, #4]
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	781b      	ldrb	r3, [r3, #0]
 8012e02:	00db      	lsls	r3, r3, #3
 8012e04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012e08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012e0c:	6859      	ldr	r1, [r3, #4]
 8012e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e10:	041a      	lsls	r2, r3, #16
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	00db      	lsls	r3, r3, #3
 8012e18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8012e1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8012e20:	430a      	orrs	r2, r1
 8012e22:	605a      	str	r2, [r3, #4]
 8012e24:	e001      	b.n	8012e2a <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 8012e26:	2301      	movs	r3, #1
 8012e28:	e01c      	b.n	8012e64 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012e2a:	687a      	ldr	r2, [r7, #4]
 8012e2c:	683b      	ldr	r3, [r7, #0]
 8012e2e:	781b      	ldrb	r3, [r3, #0]
 8012e30:	009b      	lsls	r3, r3, #2
 8012e32:	4413      	add	r3, r2
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	4b0d      	ldr	r3, [pc, #52]	@ (8012e6c <USB_EPStartXfer+0x10d0>)
 8012e38:	4013      	ands	r3, r2
 8012e3a:	61fb      	str	r3, [r7, #28]
 8012e3c:	69fb      	ldr	r3, [r7, #28]
 8012e3e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012e42:	61fb      	str	r3, [r7, #28]
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012e4a:	61fb      	str	r3, [r7, #28]
 8012e4c:	687a      	ldr	r2, [r7, #4]
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	781b      	ldrb	r3, [r3, #0]
 8012e52:	009b      	lsls	r3, r3, #2
 8012e54:	441a      	add	r2, r3
 8012e56:	69fb      	ldr	r3, [r7, #28]
 8012e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012e62:	2300      	movs	r3, #0
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	3758      	adds	r7, #88	@ 0x58
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}
 8012e6c:	07ffbf8f 	.word	0x07ffbf8f

08012e70 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8012e70:	b480      	push	{r7}
 8012e72:	b085      	sub	sp, #20
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
 8012e78:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	785b      	ldrb	r3, [r3, #1]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d018      	beq.n	8012eb4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012e82:	687a      	ldr	r2, [r7, #4]
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	781b      	ldrb	r3, [r3, #0]
 8012e88:	009b      	lsls	r3, r3, #2
 8012e8a:	4413      	add	r3, r2
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	4b19      	ldr	r3, [pc, #100]	@ (8012ef4 <USB_EPSetStall+0x84>)
 8012e90:	4013      	ands	r3, r2
 8012e92:	60bb      	str	r3, [r7, #8]
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	f083 0310 	eor.w	r3, r3, #16
 8012e9a:	60bb      	str	r3, [r7, #8]
 8012e9c:	687a      	ldr	r2, [r7, #4]
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	009b      	lsls	r3, r3, #2
 8012ea4:	441a      	add	r2, r3
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012eb0:	6013      	str	r3, [r2, #0]
 8012eb2:	e017      	b.n	8012ee4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012eb4:	687a      	ldr	r2, [r7, #4]
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	009b      	lsls	r3, r3, #2
 8012ebc:	4413      	add	r3, r2
 8012ebe:	681a      	ldr	r2, [r3, #0]
 8012ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8012ef8 <USB_EPSetStall+0x88>)
 8012ec2:	4013      	ands	r3, r2
 8012ec4:	60fb      	str	r3, [r7, #12]
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012ecc:	60fb      	str	r3, [r7, #12]
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	009b      	lsls	r3, r3, #2
 8012ed6:	441a      	add	r2, r3
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ee2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012ee4:	2300      	movs	r3, #0
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3714      	adds	r7, #20
 8012eea:	46bd      	mov	sp, r7
 8012eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef0:	4770      	bx	lr
 8012ef2:	bf00      	nop
 8012ef4:	07ff8fbf 	.word	0x07ff8fbf
 8012ef8:	07ffbf8f 	.word	0x07ffbf8f

08012efc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8012efc:	b480      	push	{r7}
 8012efe:	b089      	sub	sp, #36	@ 0x24
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	7b1b      	ldrb	r3, [r3, #12]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d17c      	bne.n	8013008 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	785b      	ldrb	r3, [r3, #1]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d03c      	beq.n	8012f90 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012f16:	687a      	ldr	r2, [r7, #4]
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	009b      	lsls	r3, r3, #2
 8012f1e:	4413      	add	r3, r2
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	613b      	str	r3, [r7, #16]
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d013      	beq.n	8012f56 <USB_EPClearStall+0x5a>
 8012f2e:	687a      	ldr	r2, [r7, #4]
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	009b      	lsls	r3, r3, #2
 8012f36:	4413      	add	r3, r2
 8012f38:	681a      	ldr	r2, [r3, #0]
 8012f3a:	4b37      	ldr	r3, [pc, #220]	@ (8013018 <USB_EPClearStall+0x11c>)
 8012f3c:	4013      	ands	r3, r2
 8012f3e:	60fb      	str	r3, [r7, #12]
 8012f40:	687a      	ldr	r2, [r7, #4]
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	009b      	lsls	r3, r3, #2
 8012f48:	441a      	add	r2, r3
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012f50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012f54:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	78db      	ldrb	r3, [r3, #3]
 8012f5a:	2b01      	cmp	r3, #1
 8012f5c:	d054      	beq.n	8013008 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012f5e:	687a      	ldr	r2, [r7, #4]
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	009b      	lsls	r3, r3, #2
 8012f66:	4413      	add	r3, r2
 8012f68:	681a      	ldr	r2, [r3, #0]
 8012f6a:	4b2c      	ldr	r3, [pc, #176]	@ (801301c <USB_EPClearStall+0x120>)
 8012f6c:	4013      	ands	r3, r2
 8012f6e:	60bb      	str	r3, [r7, #8]
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	f083 0320 	eor.w	r3, r3, #32
 8012f76:	60bb      	str	r3, [r7, #8]
 8012f78:	687a      	ldr	r2, [r7, #4]
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	781b      	ldrb	r3, [r3, #0]
 8012f7e:	009b      	lsls	r3, r3, #2
 8012f80:	441a      	add	r2, r3
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f8c:	6013      	str	r3, [r2, #0]
 8012f8e:	e03b      	b.n	8013008 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012f90:	687a      	ldr	r2, [r7, #4]
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	009b      	lsls	r3, r3, #2
 8012f98:	4413      	add	r3, r2
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	61fb      	str	r3, [r7, #28]
 8012f9e:	69fb      	ldr	r3, [r7, #28]
 8012fa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d013      	beq.n	8012fd0 <USB_EPClearStall+0xd4>
 8012fa8:	687a      	ldr	r2, [r7, #4]
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	781b      	ldrb	r3, [r3, #0]
 8012fae:	009b      	lsls	r3, r3, #2
 8012fb0:	4413      	add	r3, r2
 8012fb2:	681a      	ldr	r2, [r3, #0]
 8012fb4:	4b18      	ldr	r3, [pc, #96]	@ (8013018 <USB_EPClearStall+0x11c>)
 8012fb6:	4013      	ands	r3, r2
 8012fb8:	61bb      	str	r3, [r7, #24]
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	781b      	ldrb	r3, [r3, #0]
 8012fc0:	009b      	lsls	r3, r3, #2
 8012fc2:	441a      	add	r2, r3
 8012fc4:	69bb      	ldr	r3, [r7, #24]
 8012fc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012fce:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012fd0:	687a      	ldr	r2, [r7, #4]
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	009b      	lsls	r3, r3, #2
 8012fd8:	4413      	add	r3, r2
 8012fda:	681a      	ldr	r2, [r3, #0]
 8012fdc:	4b10      	ldr	r3, [pc, #64]	@ (8013020 <USB_EPClearStall+0x124>)
 8012fde:	4013      	ands	r3, r2
 8012fe0:	617b      	str	r3, [r7, #20]
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012fe8:	617b      	str	r3, [r7, #20]
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012ff0:	617b      	str	r3, [r7, #20]
 8012ff2:	687a      	ldr	r2, [r7, #4]
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	009b      	lsls	r3, r3, #2
 8012ffa:	441a      	add	r2, r3
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013006:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8013008:	2300      	movs	r3, #0
}
 801300a:	4618      	mov	r0, r3
 801300c:	3724      	adds	r7, #36	@ 0x24
 801300e:	46bd      	mov	sp, r7
 8013010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013014:	4770      	bx	lr
 8013016:	bf00      	nop
 8013018:	07ff8f8f 	.word	0x07ff8f8f
 801301c:	07ff8fbf 	.word	0x07ff8fbf
 8013020:	07ffbf8f 	.word	0x07ffbf8f

08013024 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8013024:	b480      	push	{r7}
 8013026:	b083      	sub	sp, #12
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	460b      	mov	r3, r1
 801302e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8013030:	78fb      	ldrb	r3, [r7, #3]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d102      	bne.n	801303c <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	2280      	movs	r2, #128	@ 0x80
 801303a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801303c:	2300      	movs	r3, #0
}
 801303e:	4618      	mov	r0, r3
 8013040:	370c      	adds	r7, #12
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr

0801304a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 801304a:	b480      	push	{r7}
 801304c:	b083      	sub	sp, #12
 801304e:	af00      	add	r7, sp, #0
 8013050:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013056:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 801305e:	2300      	movs	r3, #0
}
 8013060:	4618      	mov	r0, r3
 8013062:	370c      	adds	r7, #12
 8013064:	46bd      	mov	sp, r7
 8013066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306a:	4770      	bx	lr

0801306c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 801306c:	b480      	push	{r7}
 801306e:	b083      	sub	sp, #12
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013078:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8013080:	2300      	movs	r3, #0
}
 8013082:	4618      	mov	r0, r3
 8013084:	370c      	adds	r7, #12
 8013086:	46bd      	mov	sp, r7
 8013088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308c:	4770      	bx	lr

0801308e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 801308e:	b480      	push	{r7}
 8013090:	b085      	sub	sp, #20
 8013092:	af00      	add	r7, sp, #0
 8013094:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801309a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801309c:	68fb      	ldr	r3, [r7, #12]
}
 801309e:	4618      	mov	r0, r3
 80130a0:	3714      	adds	r7, #20
 80130a2:	46bd      	mov	sp, r7
 80130a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a8:	4770      	bx	lr

080130aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80130aa:	b480      	push	{r7}
 80130ac:	b08b      	sub	sp, #44	@ 0x2c
 80130ae:	af00      	add	r7, sp, #0
 80130b0:	60f8      	str	r0, [r7, #12]
 80130b2:	60b9      	str	r1, [r7, #8]
 80130b4:	4611      	mov	r1, r2
 80130b6:	461a      	mov	r2, r3
 80130b8:	460b      	mov	r3, r1
 80130ba:	80fb      	strh	r3, [r7, #6]
 80130bc:	4613      	mov	r3, r2
 80130be:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80130c0:	88bb      	ldrh	r3, [r7, #4]
 80130c2:	3303      	adds	r3, #3
 80130c4:	089b      	lsrs	r3, r3, #2
 80130c6:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80130c8:	88bb      	ldrh	r3, [r7, #4]
 80130ca:	f003 0303 	and.w	r3, r3, #3
 80130ce:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 80130d4:	8afb      	ldrh	r3, [r7, #22]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d002      	beq.n	80130e0 <USB_WritePMA+0x36>
  {
    NbWords--;
 80130da:	69bb      	ldr	r3, [r7, #24]
 80130dc:	3b01      	subs	r3, #1
 80130de:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80130e0:	88fb      	ldrh	r3, [r7, #6]
 80130e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80130e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80130ea:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 80130ec:	69bb      	ldr	r3, [r7, #24]
 80130ee:	623b      	str	r3, [r7, #32]
 80130f0:	e015      	b.n	801311e <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	681a      	ldr	r2, [r3, #0]
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	601a      	str	r2, [r3, #0]
    pdwVal++;
 80130fa:	69fb      	ldr	r3, [r7, #28]
 80130fc:	3304      	adds	r3, #4
 80130fe:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8013100:	693b      	ldr	r3, [r7, #16]
 8013102:	3301      	adds	r3, #1
 8013104:	613b      	str	r3, [r7, #16]
    pBuf++;
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	3301      	adds	r3, #1
 801310a:	613b      	str	r3, [r7, #16]
    pBuf++;
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	3301      	adds	r3, #1
 8013110:	613b      	str	r3, [r7, #16]
    pBuf++;
 8013112:	693b      	ldr	r3, [r7, #16]
 8013114:	3301      	adds	r3, #1
 8013116:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8013118:	6a3b      	ldr	r3, [r7, #32]
 801311a:	3b01      	subs	r3, #1
 801311c:	623b      	str	r3, [r7, #32]
 801311e:	6a3b      	ldr	r3, [r7, #32]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d1e6      	bne.n	80130f2 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8013124:	8afb      	ldrh	r3, [r7, #22]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d01a      	beq.n	8013160 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 801312a:	2300      	movs	r3, #0
 801312c:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 801312e:	693b      	ldr	r3, [r7, #16]
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	461a      	mov	r2, r3
 8013134:	6a3b      	ldr	r3, [r7, #32]
 8013136:	00db      	lsls	r3, r3, #3
 8013138:	fa02 f303 	lsl.w	r3, r2, r3
 801313c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801313e:	4313      	orrs	r3, r2
 8013140:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 8013142:	6a3b      	ldr	r3, [r7, #32]
 8013144:	3301      	adds	r3, #1
 8013146:	623b      	str	r3, [r7, #32]
      pBuf++;
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	3301      	adds	r3, #1
 801314c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 801314e:	8afb      	ldrh	r3, [r7, #22]
 8013150:	3b01      	subs	r3, #1
 8013152:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 8013154:	8afb      	ldrh	r3, [r7, #22]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d1e9      	bne.n	801312e <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 801315a:	69fb      	ldr	r3, [r7, #28]
 801315c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801315e:	601a      	str	r2, [r3, #0]
  }
}
 8013160:	bf00      	nop
 8013162:	372c      	adds	r7, #44	@ 0x2c
 8013164:	46bd      	mov	sp, r7
 8013166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316a:	4770      	bx	lr

0801316c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801316c:	b480      	push	{r7}
 801316e:	b08b      	sub	sp, #44	@ 0x2c
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	4611      	mov	r1, r2
 8013178:	461a      	mov	r2, r3
 801317a:	460b      	mov	r3, r1
 801317c:	80fb      	strh	r3, [r7, #6]
 801317e:	4613      	mov	r3, r2
 8013180:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8013182:	88bb      	ldrh	r3, [r7, #4]
 8013184:	3303      	adds	r3, #3
 8013186:	089b      	lsrs	r3, r3, #2
 8013188:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 801318a:	88bb      	ldrh	r3, [r7, #4]
 801318c:	f003 0303 	and.w	r3, r3, #3
 8013190:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 8013192:	68bb      	ldr	r3, [r7, #8]
 8013194:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8013196:	88fb      	ldrh	r3, [r7, #6]
 8013198:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801319c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80131a0:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 80131a2:	8b7b      	ldrh	r3, [r7, #26]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d002      	beq.n	80131ae <USB_ReadPMA+0x42>
  {
    NbWords--;
 80131a8:	69fb      	ldr	r3, [r7, #28]
 80131aa:	3b01      	subs	r3, #1
 80131ac:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 80131ae:	69fb      	ldr	r3, [r7, #28]
 80131b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80131b2:	e015      	b.n	80131e0 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 80131b4:	6a3b      	ldr	r3, [r7, #32]
 80131b6:	681a      	ldr	r2, [r3, #0]
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	601a      	str	r2, [r3, #0]

    pdwVal++;
 80131bc:	6a3b      	ldr	r3, [r7, #32]
 80131be:	3304      	adds	r3, #4
 80131c0:	623b      	str	r3, [r7, #32]
    pBuf++;
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	3301      	adds	r3, #1
 80131c6:	617b      	str	r3, [r7, #20]
    pBuf++;
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	3301      	adds	r3, #1
 80131cc:	617b      	str	r3, [r7, #20]
    pBuf++;
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	3301      	adds	r3, #1
 80131d2:	617b      	str	r3, [r7, #20]
    pBuf++;
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	3301      	adds	r3, #1
 80131d8:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 80131da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131dc:	3b01      	subs	r3, #1
 80131de:	627b      	str	r3, [r7, #36]	@ 0x24
 80131e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d1e6      	bne.n	80131b4 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 80131e6:	8b7b      	ldrh	r3, [r7, #26]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d017      	beq.n	801321c <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 80131ec:	6a3b      	ldr	r3, [r7, #32]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 80131f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131f4:	b2db      	uxtb	r3, r3
 80131f6:	00db      	lsls	r3, r3, #3
 80131f8:	693a      	ldr	r2, [r7, #16]
 80131fa:	fa22 f303 	lsr.w	r3, r2, r3
 80131fe:	b2da      	uxtb	r2, r3
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	701a      	strb	r2, [r3, #0]
      count++;
 8013204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013206:	3301      	adds	r3, #1
 8013208:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	3301      	adds	r3, #1
 801320e:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8013210:	8b7b      	ldrh	r3, [r7, #26]
 8013212:	3b01      	subs	r3, #1
 8013214:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 8013216:	8b7b      	ldrh	r3, [r7, #26]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d1ea      	bne.n	80131f2 <USB_ReadPMA+0x86>
  }
}
 801321c:	bf00      	nop
 801321e:	372c      	adds	r7, #44	@ 0x2c
 8013220:	46bd      	mov	sp, r7
 8013222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013226:	4770      	bx	lr

08013228 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b084      	sub	sp, #16
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
 8013230:	460b      	mov	r3, r1
 8013232:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013234:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8013238:	f001 f8fa 	bl	8014430 <USBD_static_malloc>
 801323c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d109      	bne.n	8013258 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	32b0      	adds	r2, #176	@ 0xb0
 801324e:	2100      	movs	r1, #0
 8013250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013254:	2302      	movs	r3, #2
 8013256:	e0d4      	b.n	8013402 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013258:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801325c:	2100      	movs	r1, #0
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f002 feda 	bl	8016018 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	32b0      	adds	r2, #176	@ 0xb0
 801326e:	68f9      	ldr	r1, [r7, #12]
 8013270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	32b0      	adds	r2, #176	@ 0xb0
 801327e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	7c1b      	ldrb	r3, [r3, #16]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d138      	bne.n	8013302 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013290:	4b5e      	ldr	r3, [pc, #376]	@ (801340c <USBD_CDC_Init+0x1e4>)
 8013292:	7819      	ldrb	r1, [r3, #0]
 8013294:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013298:	2202      	movs	r2, #2
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f000 ffcf 	bl	801423e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80132a0:	4b5a      	ldr	r3, [pc, #360]	@ (801340c <USBD_CDC_Init+0x1e4>)
 80132a2:	781b      	ldrb	r3, [r3, #0]
 80132a4:	f003 020f 	and.w	r2, r3, #15
 80132a8:	6879      	ldr	r1, [r7, #4]
 80132aa:	4613      	mov	r3, r2
 80132ac:	009b      	lsls	r3, r3, #2
 80132ae:	4413      	add	r3, r2
 80132b0:	009b      	lsls	r3, r3, #2
 80132b2:	440b      	add	r3, r1
 80132b4:	3324      	adds	r3, #36	@ 0x24
 80132b6:	2201      	movs	r2, #1
 80132b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80132ba:	4b55      	ldr	r3, [pc, #340]	@ (8013410 <USBD_CDC_Init+0x1e8>)
 80132bc:	7819      	ldrb	r1, [r3, #0]
 80132be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80132c2:	2202      	movs	r2, #2
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 ffba 	bl	801423e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80132ca:	4b51      	ldr	r3, [pc, #324]	@ (8013410 <USBD_CDC_Init+0x1e8>)
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	f003 020f 	and.w	r2, r3, #15
 80132d2:	6879      	ldr	r1, [r7, #4]
 80132d4:	4613      	mov	r3, r2
 80132d6:	009b      	lsls	r3, r3, #2
 80132d8:	4413      	add	r3, r2
 80132da:	009b      	lsls	r3, r3, #2
 80132dc:	440b      	add	r3, r1
 80132de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80132e2:	2201      	movs	r2, #1
 80132e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80132e6:	4b4b      	ldr	r3, [pc, #300]	@ (8013414 <USBD_CDC_Init+0x1ec>)
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	f003 020f 	and.w	r2, r3, #15
 80132ee:	6879      	ldr	r1, [r7, #4]
 80132f0:	4613      	mov	r3, r2
 80132f2:	009b      	lsls	r3, r3, #2
 80132f4:	4413      	add	r3, r2
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	440b      	add	r3, r1
 80132fa:	3326      	adds	r3, #38	@ 0x26
 80132fc:	2210      	movs	r2, #16
 80132fe:	801a      	strh	r2, [r3, #0]
 8013300:	e035      	b.n	801336e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013302:	4b42      	ldr	r3, [pc, #264]	@ (801340c <USBD_CDC_Init+0x1e4>)
 8013304:	7819      	ldrb	r1, [r3, #0]
 8013306:	2340      	movs	r3, #64	@ 0x40
 8013308:	2202      	movs	r2, #2
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f000 ff97 	bl	801423e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013310:	4b3e      	ldr	r3, [pc, #248]	@ (801340c <USBD_CDC_Init+0x1e4>)
 8013312:	781b      	ldrb	r3, [r3, #0]
 8013314:	f003 020f 	and.w	r2, r3, #15
 8013318:	6879      	ldr	r1, [r7, #4]
 801331a:	4613      	mov	r3, r2
 801331c:	009b      	lsls	r3, r3, #2
 801331e:	4413      	add	r3, r2
 8013320:	009b      	lsls	r3, r3, #2
 8013322:	440b      	add	r3, r1
 8013324:	3324      	adds	r3, #36	@ 0x24
 8013326:	2201      	movs	r2, #1
 8013328:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801332a:	4b39      	ldr	r3, [pc, #228]	@ (8013410 <USBD_CDC_Init+0x1e8>)
 801332c:	7819      	ldrb	r1, [r3, #0]
 801332e:	2340      	movs	r3, #64	@ 0x40
 8013330:	2202      	movs	r2, #2
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f000 ff83 	bl	801423e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013338:	4b35      	ldr	r3, [pc, #212]	@ (8013410 <USBD_CDC_Init+0x1e8>)
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	f003 020f 	and.w	r2, r3, #15
 8013340:	6879      	ldr	r1, [r7, #4]
 8013342:	4613      	mov	r3, r2
 8013344:	009b      	lsls	r3, r3, #2
 8013346:	4413      	add	r3, r2
 8013348:	009b      	lsls	r3, r3, #2
 801334a:	440b      	add	r3, r1
 801334c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013350:	2201      	movs	r2, #1
 8013352:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013354:	4b2f      	ldr	r3, [pc, #188]	@ (8013414 <USBD_CDC_Init+0x1ec>)
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	f003 020f 	and.w	r2, r3, #15
 801335c:	6879      	ldr	r1, [r7, #4]
 801335e:	4613      	mov	r3, r2
 8013360:	009b      	lsls	r3, r3, #2
 8013362:	4413      	add	r3, r2
 8013364:	009b      	lsls	r3, r3, #2
 8013366:	440b      	add	r3, r1
 8013368:	3326      	adds	r3, #38	@ 0x26
 801336a:	2210      	movs	r2, #16
 801336c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801336e:	4b29      	ldr	r3, [pc, #164]	@ (8013414 <USBD_CDC_Init+0x1ec>)
 8013370:	7819      	ldrb	r1, [r3, #0]
 8013372:	2308      	movs	r3, #8
 8013374:	2203      	movs	r2, #3
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f000 ff61 	bl	801423e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801337c:	4b25      	ldr	r3, [pc, #148]	@ (8013414 <USBD_CDC_Init+0x1ec>)
 801337e:	781b      	ldrb	r3, [r3, #0]
 8013380:	f003 020f 	and.w	r2, r3, #15
 8013384:	6879      	ldr	r1, [r7, #4]
 8013386:	4613      	mov	r3, r2
 8013388:	009b      	lsls	r3, r3, #2
 801338a:	4413      	add	r3, r2
 801338c:	009b      	lsls	r3, r3, #2
 801338e:	440b      	add	r3, r1
 8013390:	3324      	adds	r3, #36	@ 0x24
 8013392:	2201      	movs	r2, #1
 8013394:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	2200      	movs	r2, #0
 801339a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	33b0      	adds	r3, #176	@ 0xb0
 80133a8:	009b      	lsls	r3, r3, #2
 80133aa:	4413      	add	r3, r2
 80133ac:	685b      	ldr	r3, [r3, #4]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	2200      	movs	r2, #0
 80133b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	2200      	movs	r2, #0
 80133be:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d101      	bne.n	80133d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80133cc:	2302      	movs	r3, #2
 80133ce:	e018      	b.n	8013402 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	7c1b      	ldrb	r3, [r3, #16]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d10a      	bne.n	80133ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80133d8:	4b0d      	ldr	r3, [pc, #52]	@ (8013410 <USBD_CDC_Init+0x1e8>)
 80133da:	7819      	ldrb	r1, [r3, #0]
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80133e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f000 fff4 	bl	80143d4 <USBD_LL_PrepareReceive>
 80133ec:	e008      	b.n	8013400 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80133ee:	4b08      	ldr	r3, [pc, #32]	@ (8013410 <USBD_CDC_Init+0x1e8>)
 80133f0:	7819      	ldrb	r1, [r3, #0]
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80133f8:	2340      	movs	r3, #64	@ 0x40
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f000 ffea 	bl	80143d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013400:	2300      	movs	r3, #0
}
 8013402:	4618      	mov	r0, r3
 8013404:	3710      	adds	r7, #16
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
 801340a:	bf00      	nop
 801340c:	200000b3 	.word	0x200000b3
 8013410:	200000b4 	.word	0x200000b4
 8013414:	200000b5 	.word	0x200000b5

08013418 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b082      	sub	sp, #8
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	460b      	mov	r3, r1
 8013422:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013424:	4b3a      	ldr	r3, [pc, #232]	@ (8013510 <USBD_CDC_DeInit+0xf8>)
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	4619      	mov	r1, r3
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f000 ff27 	bl	801427e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013430:	4b37      	ldr	r3, [pc, #220]	@ (8013510 <USBD_CDC_DeInit+0xf8>)
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	f003 020f 	and.w	r2, r3, #15
 8013438:	6879      	ldr	r1, [r7, #4]
 801343a:	4613      	mov	r3, r2
 801343c:	009b      	lsls	r3, r3, #2
 801343e:	4413      	add	r3, r2
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	440b      	add	r3, r1
 8013444:	3324      	adds	r3, #36	@ 0x24
 8013446:	2200      	movs	r2, #0
 8013448:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801344a:	4b32      	ldr	r3, [pc, #200]	@ (8013514 <USBD_CDC_DeInit+0xfc>)
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	4619      	mov	r1, r3
 8013450:	6878      	ldr	r0, [r7, #4]
 8013452:	f000 ff14 	bl	801427e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013456:	4b2f      	ldr	r3, [pc, #188]	@ (8013514 <USBD_CDC_DeInit+0xfc>)
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	f003 020f 	and.w	r2, r3, #15
 801345e:	6879      	ldr	r1, [r7, #4]
 8013460:	4613      	mov	r3, r2
 8013462:	009b      	lsls	r3, r3, #2
 8013464:	4413      	add	r3, r2
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	440b      	add	r3, r1
 801346a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801346e:	2200      	movs	r2, #0
 8013470:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013472:	4b29      	ldr	r3, [pc, #164]	@ (8013518 <USBD_CDC_DeInit+0x100>)
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	4619      	mov	r1, r3
 8013478:	6878      	ldr	r0, [r7, #4]
 801347a:	f000 ff00 	bl	801427e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801347e:	4b26      	ldr	r3, [pc, #152]	@ (8013518 <USBD_CDC_DeInit+0x100>)
 8013480:	781b      	ldrb	r3, [r3, #0]
 8013482:	f003 020f 	and.w	r2, r3, #15
 8013486:	6879      	ldr	r1, [r7, #4]
 8013488:	4613      	mov	r3, r2
 801348a:	009b      	lsls	r3, r3, #2
 801348c:	4413      	add	r3, r2
 801348e:	009b      	lsls	r3, r3, #2
 8013490:	440b      	add	r3, r1
 8013492:	3324      	adds	r3, #36	@ 0x24
 8013494:	2200      	movs	r2, #0
 8013496:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8013498:	4b1f      	ldr	r3, [pc, #124]	@ (8013518 <USBD_CDC_DeInit+0x100>)
 801349a:	781b      	ldrb	r3, [r3, #0]
 801349c:	f003 020f 	and.w	r2, r3, #15
 80134a0:	6879      	ldr	r1, [r7, #4]
 80134a2:	4613      	mov	r3, r2
 80134a4:	009b      	lsls	r3, r3, #2
 80134a6:	4413      	add	r3, r2
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	440b      	add	r3, r1
 80134ac:	3326      	adds	r3, #38	@ 0x26
 80134ae:	2200      	movs	r2, #0
 80134b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	32b0      	adds	r2, #176	@ 0xb0
 80134bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d01f      	beq.n	8013504 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134ca:	687a      	ldr	r2, [r7, #4]
 80134cc:	33b0      	adds	r3, #176	@ 0xb0
 80134ce:	009b      	lsls	r3, r3, #2
 80134d0:	4413      	add	r3, r2
 80134d2:	685b      	ldr	r3, [r3, #4]
 80134d4:	685b      	ldr	r3, [r3, #4]
 80134d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	32b0      	adds	r2, #176	@ 0xb0
 80134e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134e6:	4618      	mov	r0, r3
 80134e8:	f000 ffb0 	bl	801444c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	32b0      	adds	r2, #176	@ 0xb0
 80134f6:	2100      	movs	r1, #0
 80134f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	2200      	movs	r2, #0
 8013500:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013504:	2300      	movs	r3, #0
}
 8013506:	4618      	mov	r0, r3
 8013508:	3708      	adds	r7, #8
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}
 801350e:	bf00      	nop
 8013510:	200000b3 	.word	0x200000b3
 8013514:	200000b4 	.word	0x200000b4
 8013518:	200000b5 	.word	0x200000b5

0801351c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b086      	sub	sp, #24
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
 8013524:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	32b0      	adds	r2, #176	@ 0xb0
 8013530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013534:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013536:	2300      	movs	r3, #0
 8013538:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801353a:	2300      	movs	r3, #0
 801353c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801353e:	2300      	movs	r3, #0
 8013540:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013542:	693b      	ldr	r3, [r7, #16]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d101      	bne.n	801354c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013548:	2303      	movs	r3, #3
 801354a:	e0bf      	b.n	80136cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013554:	2b00      	cmp	r3, #0
 8013556:	d050      	beq.n	80135fa <USBD_CDC_Setup+0xde>
 8013558:	2b20      	cmp	r3, #32
 801355a:	f040 80af 	bne.w	80136bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	88db      	ldrh	r3, [r3, #6]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d03a      	beq.n	80135dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	b25b      	sxtb	r3, r3
 801356c:	2b00      	cmp	r3, #0
 801356e:	da1b      	bge.n	80135a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	33b0      	adds	r3, #176	@ 0xb0
 801357a:	009b      	lsls	r3, r3, #2
 801357c:	4413      	add	r3, r2
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	689b      	ldr	r3, [r3, #8]
 8013582:	683a      	ldr	r2, [r7, #0]
 8013584:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013586:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013588:	683a      	ldr	r2, [r7, #0]
 801358a:	88d2      	ldrh	r2, [r2, #6]
 801358c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	88db      	ldrh	r3, [r3, #6]
 8013592:	2b07      	cmp	r3, #7
 8013594:	bf28      	it	cs
 8013596:	2307      	movcs	r3, #7
 8013598:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	89fa      	ldrh	r2, [r7, #14]
 801359e:	4619      	mov	r1, r3
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f002 fa46 	bl	8015a32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80135a6:	e090      	b.n	80136ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	785a      	ldrb	r2, [r3, #1]
 80135ac:	693b      	ldr	r3, [r7, #16]
 80135ae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	88db      	ldrh	r3, [r3, #6]
 80135b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80135b8:	d803      	bhi.n	80135c2 <USBD_CDC_Setup+0xa6>
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	88db      	ldrh	r3, [r3, #6]
 80135be:	b2da      	uxtb	r2, r3
 80135c0:	e000      	b.n	80135c4 <USBD_CDC_Setup+0xa8>
 80135c2:	2240      	movs	r2, #64	@ 0x40
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80135ca:	6939      	ldr	r1, [r7, #16]
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80135d2:	461a      	mov	r2, r3
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	f002 fa58 	bl	8015a8a <USBD_CtlPrepareRx>
      break;
 80135da:	e076      	b.n	80136ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80135e2:	687a      	ldr	r2, [r7, #4]
 80135e4:	33b0      	adds	r3, #176	@ 0xb0
 80135e6:	009b      	lsls	r3, r3, #2
 80135e8:	4413      	add	r3, r2
 80135ea:	685b      	ldr	r3, [r3, #4]
 80135ec:	689b      	ldr	r3, [r3, #8]
 80135ee:	683a      	ldr	r2, [r7, #0]
 80135f0:	7850      	ldrb	r0, [r2, #1]
 80135f2:	2200      	movs	r2, #0
 80135f4:	6839      	ldr	r1, [r7, #0]
 80135f6:	4798      	blx	r3
      break;
 80135f8:	e067      	b.n	80136ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	785b      	ldrb	r3, [r3, #1]
 80135fe:	2b0b      	cmp	r3, #11
 8013600:	d851      	bhi.n	80136a6 <USBD_CDC_Setup+0x18a>
 8013602:	a201      	add	r2, pc, #4	@ (adr r2, 8013608 <USBD_CDC_Setup+0xec>)
 8013604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013608:	08013639 	.word	0x08013639
 801360c:	080136b5 	.word	0x080136b5
 8013610:	080136a7 	.word	0x080136a7
 8013614:	080136a7 	.word	0x080136a7
 8013618:	080136a7 	.word	0x080136a7
 801361c:	080136a7 	.word	0x080136a7
 8013620:	080136a7 	.word	0x080136a7
 8013624:	080136a7 	.word	0x080136a7
 8013628:	080136a7 	.word	0x080136a7
 801362c:	080136a7 	.word	0x080136a7
 8013630:	08013663 	.word	0x08013663
 8013634:	0801368d 	.word	0x0801368d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801363e:	b2db      	uxtb	r3, r3
 8013640:	2b03      	cmp	r3, #3
 8013642:	d107      	bne.n	8013654 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013644:	f107 030a 	add.w	r3, r7, #10
 8013648:	2202      	movs	r2, #2
 801364a:	4619      	mov	r1, r3
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f002 f9f0 	bl	8015a32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013652:	e032      	b.n	80136ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013654:	6839      	ldr	r1, [r7, #0]
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f002 f86d 	bl	8015736 <USBD_CtlError>
            ret = USBD_FAIL;
 801365c:	2303      	movs	r3, #3
 801365e:	75fb      	strb	r3, [r7, #23]
          break;
 8013660:	e02b      	b.n	80136ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013668:	b2db      	uxtb	r3, r3
 801366a:	2b03      	cmp	r3, #3
 801366c:	d107      	bne.n	801367e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801366e:	f107 030d 	add.w	r3, r7, #13
 8013672:	2201      	movs	r2, #1
 8013674:	4619      	mov	r1, r3
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f002 f9db 	bl	8015a32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801367c:	e01d      	b.n	80136ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801367e:	6839      	ldr	r1, [r7, #0]
 8013680:	6878      	ldr	r0, [r7, #4]
 8013682:	f002 f858 	bl	8015736 <USBD_CtlError>
            ret = USBD_FAIL;
 8013686:	2303      	movs	r3, #3
 8013688:	75fb      	strb	r3, [r7, #23]
          break;
 801368a:	e016      	b.n	80136ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013692:	b2db      	uxtb	r3, r3
 8013694:	2b03      	cmp	r3, #3
 8013696:	d00f      	beq.n	80136b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013698:	6839      	ldr	r1, [r7, #0]
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f002 f84b 	bl	8015736 <USBD_CtlError>
            ret = USBD_FAIL;
 80136a0:	2303      	movs	r3, #3
 80136a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80136a4:	e008      	b.n	80136b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80136a6:	6839      	ldr	r1, [r7, #0]
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f002 f844 	bl	8015736 <USBD_CtlError>
          ret = USBD_FAIL;
 80136ae:	2303      	movs	r3, #3
 80136b0:	75fb      	strb	r3, [r7, #23]
          break;
 80136b2:	e002      	b.n	80136ba <USBD_CDC_Setup+0x19e>
          break;
 80136b4:	bf00      	nop
 80136b6:	e008      	b.n	80136ca <USBD_CDC_Setup+0x1ae>
          break;
 80136b8:	bf00      	nop
      }
      break;
 80136ba:	e006      	b.n	80136ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80136bc:	6839      	ldr	r1, [r7, #0]
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f002 f839 	bl	8015736 <USBD_CtlError>
      ret = USBD_FAIL;
 80136c4:	2303      	movs	r3, #3
 80136c6:	75fb      	strb	r3, [r7, #23]
      break;
 80136c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80136ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80136cc:	4618      	mov	r0, r3
 80136ce:	3718      	adds	r7, #24
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	460b      	mov	r3, r1
 80136de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80136e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	32b0      	adds	r2, #176	@ 0xb0
 80136f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d101      	bne.n	80136fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80136fa:	2303      	movs	r3, #3
 80136fc:	e065      	b.n	80137ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	32b0      	adds	r2, #176	@ 0xb0
 8013708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801370c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801370e:	78fb      	ldrb	r3, [r7, #3]
 8013710:	f003 020f 	and.w	r2, r3, #15
 8013714:	6879      	ldr	r1, [r7, #4]
 8013716:	4613      	mov	r3, r2
 8013718:	009b      	lsls	r3, r3, #2
 801371a:	4413      	add	r3, r2
 801371c:	009b      	lsls	r3, r3, #2
 801371e:	440b      	add	r3, r1
 8013720:	3318      	adds	r3, #24
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d02f      	beq.n	8013788 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013728:	78fb      	ldrb	r3, [r7, #3]
 801372a:	f003 020f 	and.w	r2, r3, #15
 801372e:	6879      	ldr	r1, [r7, #4]
 8013730:	4613      	mov	r3, r2
 8013732:	009b      	lsls	r3, r3, #2
 8013734:	4413      	add	r3, r2
 8013736:	009b      	lsls	r3, r3, #2
 8013738:	440b      	add	r3, r1
 801373a:	3318      	adds	r3, #24
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	78fb      	ldrb	r3, [r7, #3]
 8013740:	f003 010f 	and.w	r1, r3, #15
 8013744:	68f8      	ldr	r0, [r7, #12]
 8013746:	460b      	mov	r3, r1
 8013748:	009b      	lsls	r3, r3, #2
 801374a:	440b      	add	r3, r1
 801374c:	00db      	lsls	r3, r3, #3
 801374e:	4403      	add	r3, r0
 8013750:	3324      	adds	r3, #36	@ 0x24
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	fbb2 f1f3 	udiv	r1, r2, r3
 8013758:	fb01 f303 	mul.w	r3, r1, r3
 801375c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801375e:	2b00      	cmp	r3, #0
 8013760:	d112      	bne.n	8013788 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013762:	78fb      	ldrb	r3, [r7, #3]
 8013764:	f003 020f 	and.w	r2, r3, #15
 8013768:	6879      	ldr	r1, [r7, #4]
 801376a:	4613      	mov	r3, r2
 801376c:	009b      	lsls	r3, r3, #2
 801376e:	4413      	add	r3, r2
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	440b      	add	r3, r1
 8013774:	3318      	adds	r3, #24
 8013776:	2200      	movs	r2, #0
 8013778:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801377a:	78f9      	ldrb	r1, [r7, #3]
 801377c:	2300      	movs	r3, #0
 801377e:	2200      	movs	r2, #0
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f000 fe0c 	bl	801439e <USBD_LL_Transmit>
 8013786:	e01f      	b.n	80137c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	2200      	movs	r2, #0
 801378c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013796:	687a      	ldr	r2, [r7, #4]
 8013798:	33b0      	adds	r3, #176	@ 0xb0
 801379a:	009b      	lsls	r3, r3, #2
 801379c:	4413      	add	r3, r2
 801379e:	685b      	ldr	r3, [r3, #4]
 80137a0:	691b      	ldr	r3, [r3, #16]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d010      	beq.n	80137c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80137ac:	687a      	ldr	r2, [r7, #4]
 80137ae:	33b0      	adds	r3, #176	@ 0xb0
 80137b0:	009b      	lsls	r3, r3, #2
 80137b2:	4413      	add	r3, r2
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	691b      	ldr	r3, [r3, #16]
 80137b8:	68ba      	ldr	r2, [r7, #8]
 80137ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80137be:	68ba      	ldr	r2, [r7, #8]
 80137c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80137c4:	78fa      	ldrb	r2, [r7, #3]
 80137c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80137c8:	2300      	movs	r3, #0
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3710      	adds	r7, #16
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}

080137d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80137d2:	b580      	push	{r7, lr}
 80137d4:	b084      	sub	sp, #16
 80137d6:	af00      	add	r7, sp, #0
 80137d8:	6078      	str	r0, [r7, #4]
 80137da:	460b      	mov	r3, r1
 80137dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	32b0      	adds	r2, #176	@ 0xb0
 80137e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	32b0      	adds	r2, #176	@ 0xb0
 80137f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d101      	bne.n	8013804 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013800:	2303      	movs	r3, #3
 8013802:	e01a      	b.n	801383a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013804:	78fb      	ldrb	r3, [r7, #3]
 8013806:	4619      	mov	r1, r3
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f000 fdfe 	bl	801440a <USBD_LL_GetRxDataSize>
 801380e:	4602      	mov	r2, r0
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801381c:	687a      	ldr	r2, [r7, #4]
 801381e:	33b0      	adds	r3, #176	@ 0xb0
 8013820:	009b      	lsls	r3, r3, #2
 8013822:	4413      	add	r3, r2
 8013824:	685b      	ldr	r3, [r3, #4]
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	68fa      	ldr	r2, [r7, #12]
 801382a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801382e:	68fa      	ldr	r2, [r7, #12]
 8013830:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013834:	4611      	mov	r1, r2
 8013836:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013838:	2300      	movs	r3, #0
}
 801383a:	4618      	mov	r0, r3
 801383c:	3710      	adds	r7, #16
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}

08013842 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013842:	b580      	push	{r7, lr}
 8013844:	b084      	sub	sp, #16
 8013846:	af00      	add	r7, sp, #0
 8013848:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	32b0      	adds	r2, #176	@ 0xb0
 8013854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013858:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d101      	bne.n	8013864 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013860:	2303      	movs	r3, #3
 8013862:	e024      	b.n	80138ae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801386a:	687a      	ldr	r2, [r7, #4]
 801386c:	33b0      	adds	r3, #176	@ 0xb0
 801386e:	009b      	lsls	r3, r3, #2
 8013870:	4413      	add	r3, r2
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d019      	beq.n	80138ac <USBD_CDC_EP0_RxReady+0x6a>
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801387e:	2bff      	cmp	r3, #255	@ 0xff
 8013880:	d014      	beq.n	80138ac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013888:	687a      	ldr	r2, [r7, #4]
 801388a:	33b0      	adds	r3, #176	@ 0xb0
 801388c:	009b      	lsls	r3, r3, #2
 801388e:	4413      	add	r3, r2
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	689b      	ldr	r3, [r3, #8]
 8013894:	68fa      	ldr	r2, [r7, #12]
 8013896:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801389a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801389c:	68fa      	ldr	r2, [r7, #12]
 801389e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80138a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	22ff      	movs	r2, #255	@ 0xff
 80138a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80138ac:	2300      	movs	r3, #0
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3710      	adds	r7, #16
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}
	...

080138b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b086      	sub	sp, #24
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80138c0:	2182      	movs	r1, #130	@ 0x82
 80138c2:	4818      	ldr	r0, [pc, #96]	@ (8013924 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80138c4:	f001 f901 	bl	8014aca <USBD_GetEpDesc>
 80138c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80138ca:	2101      	movs	r1, #1
 80138cc:	4815      	ldr	r0, [pc, #84]	@ (8013924 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80138ce:	f001 f8fc 	bl	8014aca <USBD_GetEpDesc>
 80138d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80138d4:	2181      	movs	r1, #129	@ 0x81
 80138d6:	4813      	ldr	r0, [pc, #76]	@ (8013924 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80138d8:	f001 f8f7 	bl	8014aca <USBD_GetEpDesc>
 80138dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d002      	beq.n	80138ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	2210      	movs	r2, #16
 80138e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80138ea:	693b      	ldr	r3, [r7, #16]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d006      	beq.n	80138fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	2200      	movs	r2, #0
 80138f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80138f8:	711a      	strb	r2, [r3, #4]
 80138fa:	2200      	movs	r2, #0
 80138fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d006      	beq.n	8013912 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	2200      	movs	r2, #0
 8013908:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801390c:	711a      	strb	r2, [r3, #4]
 801390e:	2200      	movs	r2, #0
 8013910:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	2243      	movs	r2, #67	@ 0x43
 8013916:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013918:	4b02      	ldr	r3, [pc, #8]	@ (8013924 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801391a:	4618      	mov	r0, r3
 801391c:	3718      	adds	r7, #24
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	20000070 	.word	0x20000070

08013928 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b086      	sub	sp, #24
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013930:	2182      	movs	r1, #130	@ 0x82
 8013932:	4818      	ldr	r0, [pc, #96]	@ (8013994 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013934:	f001 f8c9 	bl	8014aca <USBD_GetEpDesc>
 8013938:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801393a:	2101      	movs	r1, #1
 801393c:	4815      	ldr	r0, [pc, #84]	@ (8013994 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801393e:	f001 f8c4 	bl	8014aca <USBD_GetEpDesc>
 8013942:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013944:	2181      	movs	r1, #129	@ 0x81
 8013946:	4813      	ldr	r0, [pc, #76]	@ (8013994 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013948:	f001 f8bf 	bl	8014aca <USBD_GetEpDesc>
 801394c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d002      	beq.n	801395a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	2210      	movs	r2, #16
 8013958:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d006      	beq.n	801396e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	2200      	movs	r2, #0
 8013964:	711a      	strb	r2, [r3, #4]
 8013966:	2200      	movs	r2, #0
 8013968:	f042 0202 	orr.w	r2, r2, #2
 801396c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d006      	beq.n	8013982 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	2200      	movs	r2, #0
 8013978:	711a      	strb	r2, [r3, #4]
 801397a:	2200      	movs	r2, #0
 801397c:	f042 0202 	orr.w	r2, r2, #2
 8013980:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2243      	movs	r2, #67	@ 0x43
 8013986:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013988:	4b02      	ldr	r3, [pc, #8]	@ (8013994 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801398a:	4618      	mov	r0, r3
 801398c:	3718      	adds	r7, #24
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}
 8013992:	bf00      	nop
 8013994:	20000070 	.word	0x20000070

08013998 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b086      	sub	sp, #24
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80139a0:	2182      	movs	r1, #130	@ 0x82
 80139a2:	4818      	ldr	r0, [pc, #96]	@ (8013a04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80139a4:	f001 f891 	bl	8014aca <USBD_GetEpDesc>
 80139a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80139aa:	2101      	movs	r1, #1
 80139ac:	4815      	ldr	r0, [pc, #84]	@ (8013a04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80139ae:	f001 f88c 	bl	8014aca <USBD_GetEpDesc>
 80139b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80139b4:	2181      	movs	r1, #129	@ 0x81
 80139b6:	4813      	ldr	r0, [pc, #76]	@ (8013a04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80139b8:	f001 f887 	bl	8014aca <USBD_GetEpDesc>
 80139bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80139be:	697b      	ldr	r3, [r7, #20]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d002      	beq.n	80139ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	2210      	movs	r2, #16
 80139c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d006      	beq.n	80139de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80139d0:	693b      	ldr	r3, [r7, #16]
 80139d2:	2200      	movs	r2, #0
 80139d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80139d8:	711a      	strb	r2, [r3, #4]
 80139da:	2200      	movs	r2, #0
 80139dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d006      	beq.n	80139f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2200      	movs	r2, #0
 80139e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80139ec:	711a      	strb	r2, [r3, #4]
 80139ee:	2200      	movs	r2, #0
 80139f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2243      	movs	r2, #67	@ 0x43
 80139f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80139f8:	4b02      	ldr	r3, [pc, #8]	@ (8013a04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	3718      	adds	r7, #24
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}
 8013a02:	bf00      	nop
 8013a04:	20000070 	.word	0x20000070

08013a08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b083      	sub	sp, #12
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	220a      	movs	r2, #10
 8013a14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013a16:	4b03      	ldr	r3, [pc, #12]	@ (8013a24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	370c      	adds	r7, #12
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a22:	4770      	bx	lr
 8013a24:	2000002c 	.word	0x2000002c

08013a28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013a28:	b480      	push	{r7}
 8013a2a:	b083      	sub	sp, #12
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
 8013a30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d101      	bne.n	8013a3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013a38:	2303      	movs	r3, #3
 8013a3a:	e009      	b.n	8013a50 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013a42:	687a      	ldr	r2, [r7, #4]
 8013a44:	33b0      	adds	r3, #176	@ 0xb0
 8013a46:	009b      	lsls	r3, r3, #2
 8013a48:	4413      	add	r3, r2
 8013a4a:	683a      	ldr	r2, [r7, #0]
 8013a4c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013a4e:	2300      	movs	r3, #0
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	370c      	adds	r7, #12
 8013a54:	46bd      	mov	sp, r7
 8013a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5a:	4770      	bx	lr

08013a5c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013a5c:	b480      	push	{r7}
 8013a5e:	b087      	sub	sp, #28
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	60f8      	str	r0, [r7, #12]
 8013a64:	60b9      	str	r1, [r7, #8]
 8013a66:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	32b0      	adds	r2, #176	@ 0xb0
 8013a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a76:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013a78:	697b      	ldr	r3, [r7, #20]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d101      	bne.n	8013a82 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013a7e:	2303      	movs	r3, #3
 8013a80:	e008      	b.n	8013a94 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	68ba      	ldr	r2, [r7, #8]
 8013a86:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8013a8a:	697b      	ldr	r3, [r7, #20]
 8013a8c:	687a      	ldr	r2, [r7, #4]
 8013a8e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013a92:	2300      	movs	r3, #0
}
 8013a94:	4618      	mov	r0, r3
 8013a96:	371c      	adds	r7, #28
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9e:	4770      	bx	lr

08013aa0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013aa0:	b480      	push	{r7}
 8013aa2:	b085      	sub	sp, #20
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	32b0      	adds	r2, #176	@ 0xb0
 8013ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ab8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d101      	bne.n	8013ac4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013ac0:	2303      	movs	r3, #3
 8013ac2:	e004      	b.n	8013ace <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	683a      	ldr	r2, [r7, #0]
 8013ac8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8013acc:	2300      	movs	r3, #0
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3714      	adds	r7, #20
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad8:	4770      	bx	lr
	...

08013adc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b084      	sub	sp, #16
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	32b0      	adds	r2, #176	@ 0xb0
 8013aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013af2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013af4:	2301      	movs	r3, #1
 8013af6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d101      	bne.n	8013b02 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013afe:	2303      	movs	r3, #3
 8013b00:	e025      	b.n	8013b4e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d11f      	bne.n	8013b4c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	2201      	movs	r2, #1
 8013b10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013b14:	4b10      	ldr	r3, [pc, #64]	@ (8013b58 <USBD_CDC_TransmitPacket+0x7c>)
 8013b16:	781b      	ldrb	r3, [r3, #0]
 8013b18:	f003 020f 	and.w	r2, r3, #15
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	4613      	mov	r3, r2
 8013b26:	009b      	lsls	r3, r3, #2
 8013b28:	4413      	add	r3, r2
 8013b2a:	009b      	lsls	r3, r3, #2
 8013b2c:	4403      	add	r3, r0
 8013b2e:	3318      	adds	r3, #24
 8013b30:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013b32:	4b09      	ldr	r3, [pc, #36]	@ (8013b58 <USBD_CDC_TransmitPacket+0x7c>)
 8013b34:	7819      	ldrb	r1, [r3, #0]
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f000 fc2b 	bl	801439e <USBD_LL_Transmit>

    ret = USBD_OK;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3710      	adds	r7, #16
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}
 8013b56:	bf00      	nop
 8013b58:	200000b3 	.word	0x200000b3

08013b5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b084      	sub	sp, #16
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	32b0      	adds	r2, #176	@ 0xb0
 8013b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b72:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	32b0      	adds	r2, #176	@ 0xb0
 8013b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d101      	bne.n	8013b8a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013b86:	2303      	movs	r3, #3
 8013b88:	e018      	b.n	8013bbc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	7c1b      	ldrb	r3, [r3, #16]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d10a      	bne.n	8013ba8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013b92:	4b0c      	ldr	r3, [pc, #48]	@ (8013bc4 <USBD_CDC_ReceivePacket+0x68>)
 8013b94:	7819      	ldrb	r1, [r3, #0]
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013ba0:	6878      	ldr	r0, [r7, #4]
 8013ba2:	f000 fc17 	bl	80143d4 <USBD_LL_PrepareReceive>
 8013ba6:	e008      	b.n	8013bba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013ba8:	4b06      	ldr	r3, [pc, #24]	@ (8013bc4 <USBD_CDC_ReceivePacket+0x68>)
 8013baa:	7819      	ldrb	r1, [r3, #0]
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013bb2:	2340      	movs	r3, #64	@ 0x40
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f000 fc0d 	bl	80143d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013bba:	2300      	movs	r3, #0
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3710      	adds	r7, #16
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}
 8013bc4:	200000b4 	.word	0x200000b4

08013bc8 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013bcc:	2200      	movs	r2, #0
 8013bce:	4905      	ldr	r1, [pc, #20]	@ (8013be4 <TEMPLATE_Init+0x1c>)
 8013bd0:	4805      	ldr	r0, [pc, #20]	@ (8013be8 <TEMPLATE_Init+0x20>)
 8013bd2:	f7ff ff43 	bl	8013a5c <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013bd6:	4905      	ldr	r1, [pc, #20]	@ (8013bec <TEMPLATE_Init+0x24>)
 8013bd8:	4803      	ldr	r0, [pc, #12]	@ (8013be8 <TEMPLATE_Init+0x20>)
 8013bda:	f7ff ff61 	bl	8013aa0 <USBD_CDC_SetRxBuffer>
      return (0);
 8013bde:	2300      	movs	r3, #0
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	bd80      	pop	{r7, pc}
 8013be4:	20002eb8 	.word	0x20002eb8
 8013be8:	20002930 	.word	0x20002930
 8013bec:	20002cb8 	.word	0x20002cb8

08013bf0 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 8013bf4:	2300      	movs	r3, #0
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfe:	4770      	bx	lr

08013c00 <USB_Transmit>:

uint8_t USB_Transmit(uint8_t *data, uint32_t len)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b0a4      	sub	sp, #144	@ 0x90
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
 8013c08:	6039      	str	r1, [r7, #0]
    uint32_t offset = 0;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const uint32_t bytesPerLine = 16;
 8013c10:	2310      	movs	r3, #16
 8013c12:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (offset < len)
 8013c14:	e0a4      	b.n	8013d60 <USB_Transmit+0x160>
    {
        uint16_t chunk_len = ((len - offset) >= CDC_BLOCK_SIZE) ? CDC_BLOCK_SIZE : (len - offset);
 8013c16:	683a      	ldr	r2, [r7, #0]
 8013c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c1c:	1ad3      	subs	r3, r2, r3
 8013c1e:	2b40      	cmp	r3, #64	@ 0x40
 8013c20:	bf28      	it	cs
 8013c22:	2340      	movcs	r3, #64	@ 0x40
 8013c24:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        tx_complete = 0;
 8013c28:	4b53      	ldr	r3, [pc, #332]	@ (8013d78 <USB_Transmit+0x178>)
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	701a      	strb	r2, [r3, #0]
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &data[offset], chunk_len);
 8013c2e:	687a      	ldr	r2, [r7, #4]
 8013c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c34:	4413      	add	r3, r2
 8013c36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8013c3a:	4619      	mov	r1, r3
 8013c3c:	484f      	ldr	r0, [pc, #316]	@ (8013d7c <USB_Transmit+0x17c>)
 8013c3e:	f7ff ff0d 	bl	8013a5c <USBD_CDC_SetTxBuffer>

        // Log in 32-byte lines
        uint32_t printed = 0;
 8013c42:	2300      	movs	r3, #0
 8013c44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 8013c48:	e056      	b.n	8013cf8 <USB_Transmit+0xf8>
        {
            uint32_t lineLen = ((chunk_len - printed) > bytesPerLine) ? bytesPerLine : (chunk_len - printed);
 8013c4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8013c4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013c52:	1ad3      	subs	r3, r2, r3
 8013c54:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8013c56:	4293      	cmp	r3, r2
 8013c58:	bf28      	it	cs
 8013c5a:	4613      	movcs	r3, r2
 8013c5c:	673b      	str	r3, [r7, #112]	@ 0x70
            char log_line[BYTES_PER_LINE * 3 + 1] = {0};
 8013c5e:	2300      	movs	r3, #0
 8013c60:	60bb      	str	r3, [r7, #8]
 8013c62:	f107 030c 	add.w	r3, r7, #12
 8013c66:	225d      	movs	r2, #93	@ 0x5d
 8013c68:	2100      	movs	r1, #0
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f002 f9d4 	bl	8016018 <memset>
            char *ptr = log_line;
 8013c70:	f107 0308 	add.w	r3, r7, #8
 8013c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            for (uint32_t i = 0; i < lineLen; i++)
 8013c78:	2300      	movs	r3, #0
 8013c7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013c7e:	e01c      	b.n	8013cba <USB_Transmit+0xba>
            {
                ptr += snprintf(ptr, 4, "%02X ", data[offset + printed + i]);
 8013c80:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013c88:	441a      	add	r2, r3
 8013c8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013c8e:	4413      	add	r3, r2
 8013c90:	687a      	ldr	r2, [r7, #4]
 8013c92:	4413      	add	r3, r2
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	4a3a      	ldr	r2, [pc, #232]	@ (8013d80 <USB_Transmit+0x180>)
 8013c98:	2104      	movs	r1, #4
 8013c9a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8013c9e:	f002 f8db 	bl	8015e58 <sniprintf>
 8013ca2:	4603      	mov	r3, r0
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013caa:	4413      	add	r3, r2
 8013cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            for (uint32_t i = 0; i < lineLen; i++)
 8013cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013cb4:	3301      	adds	r3, #1
 8013cb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013cba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013cbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d3dd      	bcc.n	8013c80 <USB_Transmit+0x80>
            }

            if (printed == 0)
 8013cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d108      	bne.n	8013cde <USB_Transmit+0xde>
            {
                log_info("USB Tx [%d bytes]: %s", chunk_len, log_line);
 8013ccc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8013cd0:	f107 0208 	add.w	r2, r7, #8
 8013cd4:	4619      	mov	r1, r3
 8013cd6:	482b      	ldr	r0, [pc, #172]	@ (8013d84 <USB_Transmit+0x184>)
 8013cd8:	f7ef ffbc 	bl	8003c54 <log_info>
 8013cdc:	e006      	b.n	8013cec <USB_Transmit+0xec>
            }
            else
            {
                log_info("%19s%s", "", log_line);
 8013cde:	f107 0308 	add.w	r3, r7, #8
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	4928      	ldr	r1, [pc, #160]	@ (8013d88 <USB_Transmit+0x188>)
 8013ce6:	4829      	ldr	r0, [pc, #164]	@ (8013d8c <USB_Transmit+0x18c>)
 8013ce8:	f7ef ffb4 	bl	8003c54 <log_info>
            }

            printed += lineLen;
 8013cec:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013cf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013cf2:	4413      	add	r3, r2
 8013cf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 8013cf8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8013cfc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d3a2      	bcc.n	8013c4a <USB_Transmit+0x4a>
        }

        if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 8013d04:	481d      	ldr	r0, [pc, #116]	@ (8013d7c <USB_Transmit+0x17c>)
 8013d06:	f7ff fee9 	bl	8013adc <USBD_CDC_TransmitPacket>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d001      	beq.n	8013d14 <USB_Transmit+0x114>
        {
            return USBD_FAIL;
 8013d10:	2303      	movs	r3, #3
 8013d12:	e02c      	b.n	8013d6e <USB_Transmit+0x16e>
        }

        uint32_t timeout = 10000;
 8013d14:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013d18:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (tx_complete == 0 && timeout--);
 8013d1a:	bf00      	nop
 8013d1c:	4b16      	ldr	r3, [pc, #88]	@ (8013d78 <USB_Transmit+0x178>)
 8013d1e:	781b      	ldrb	r3, [r3, #0]
 8013d20:	b2db      	uxtb	r3, r3
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d104      	bne.n	8013d30 <USB_Transmit+0x130>
 8013d26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d28:	1e5a      	subs	r2, r3, #1
 8013d2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d1f5      	bne.n	8013d1c <USB_Transmit+0x11c>
        if (timeout == 0)
 8013d30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d104      	bne.n	8013d40 <USB_Transmit+0x140>
        {
            log_error("USB TX Timeout");
 8013d36:	4816      	ldr	r0, [pc, #88]	@ (8013d90 <USB_Transmit+0x190>)
 8013d38:	f7ef ffc0 	bl	8003cbc <log_error>
            return USBD_FAIL;
 8013d3c:	2303      	movs	r3, #3
 8013d3e:	e016      	b.n	8013d6e <USB_Transmit+0x16e>
        }

        offset += chunk_len;
 8013d40:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8013d44:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013d48:	4413      	add	r3, r2
 8013d4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (volatile int i = 0; i < 200; i++);
 8013d4e:	2300      	movs	r3, #0
 8013d50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013d52:	e002      	b.n	8013d5a <USB_Transmit+0x15a>
 8013d54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013d56:	3301      	adds	r3, #1
 8013d58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013d5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8013d5e:	ddf9      	ble.n	8013d54 <USB_Transmit+0x154>
    while (offset < len)
 8013d60:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	429a      	cmp	r2, r3
 8013d68:	f4ff af55 	bcc.w	8013c16 <USB_Transmit+0x16>
    }

    return USBD_OK;
 8013d6c:	2300      	movs	r3, #0
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3790      	adds	r7, #144	@ 0x90
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	200000b6 	.word	0x200000b6
 8013d7c:	20002930 	.word	0x20002930
 8013d80:	08018aa0 	.word	0x08018aa0
 8013d84:	08018aa8 	.word	0x08018aa8
 8013d88:	08018ac0 	.word	0x08018ac0
 8013d8c:	08018ac4 	.word	0x08018ac4
 8013d90:	08018acc 	.word	0x08018acc

08013d94 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8013d94:	b480      	push	{r7}
 8013d96:	b083      	sub	sp, #12
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	6039      	str	r1, [r7, #0]
 8013d9e:	71fb      	strb	r3, [r7, #7]
 8013da0:	4613      	mov	r3, r2
 8013da2:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 8013da4:	79fb      	ldrb	r3, [r7, #7]
 8013da6:	2b23      	cmp	r3, #35	@ 0x23
 8013da8:	f200 8098 	bhi.w	8013edc <TEMPLATE_Control+0x148>
 8013dac:	a201      	add	r2, pc, #4	@ (adr r2, 8013db4 <TEMPLATE_Control+0x20>)
 8013dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013db2:	bf00      	nop
 8013db4:	08013edd 	.word	0x08013edd
 8013db8:	08013edd 	.word	0x08013edd
 8013dbc:	08013edd 	.word	0x08013edd
 8013dc0:	08013edd 	.word	0x08013edd
 8013dc4:	08013edd 	.word	0x08013edd
 8013dc8:	08013edd 	.word	0x08013edd
 8013dcc:	08013edd 	.word	0x08013edd
 8013dd0:	08013edd 	.word	0x08013edd
 8013dd4:	08013edd 	.word	0x08013edd
 8013dd8:	08013edd 	.word	0x08013edd
 8013ddc:	08013edd 	.word	0x08013edd
 8013de0:	08013edd 	.word	0x08013edd
 8013de4:	08013edd 	.word	0x08013edd
 8013de8:	08013edd 	.word	0x08013edd
 8013dec:	08013edd 	.word	0x08013edd
 8013df0:	08013edd 	.word	0x08013edd
 8013df4:	08013edd 	.word	0x08013edd
 8013df8:	08013edd 	.word	0x08013edd
 8013dfc:	08013edd 	.word	0x08013edd
 8013e00:	08013edd 	.word	0x08013edd
 8013e04:	08013edd 	.word	0x08013edd
 8013e08:	08013edd 	.word	0x08013edd
 8013e0c:	08013edd 	.word	0x08013edd
 8013e10:	08013edd 	.word	0x08013edd
 8013e14:	08013edd 	.word	0x08013edd
 8013e18:	08013edd 	.word	0x08013edd
 8013e1c:	08013edd 	.word	0x08013edd
 8013e20:	08013edd 	.word	0x08013edd
 8013e24:	08013edd 	.word	0x08013edd
 8013e28:	08013edd 	.word	0x08013edd
 8013e2c:	08013edd 	.word	0x08013edd
 8013e30:	08013edd 	.word	0x08013edd
 8013e34:	08013e45 	.word	0x08013e45
 8013e38:	08013e89 	.word	0x08013e89
 8013e3c:	08013edd 	.word	0x08013edd
 8013e40:	08013edd 	.word	0x08013edd
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	781b      	ldrb	r3, [r3, #0]
 8013e48:	461a      	mov	r2, r3
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	3301      	adds	r3, #1
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	021b      	lsls	r3, r3, #8
 8013e52:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	3302      	adds	r3, #2
 8013e58:	781b      	ldrb	r3, [r3, #0]
 8013e5a:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8013e5c:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	3303      	adds	r3, #3
 8013e62:	781b      	ldrb	r3, [r3, #0]
 8013e64:	061b      	lsls	r3, r3, #24
 8013e66:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8013e68:	461a      	mov	r2, r3
 8013e6a:	4b20      	ldr	r3, [pc, #128]	@ (8013eec <TEMPLATE_Control+0x158>)
 8013e6c:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	791a      	ldrb	r2, [r3, #4]
 8013e72:	4b1e      	ldr	r3, [pc, #120]	@ (8013eec <TEMPLATE_Control+0x158>)
 8013e74:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	795a      	ldrb	r2, [r3, #5]
 8013e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8013eec <TEMPLATE_Control+0x158>)
 8013e7c:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	799a      	ldrb	r2, [r3, #6]
 8013e82:	4b1a      	ldr	r3, [pc, #104]	@ (8013eec <TEMPLATE_Control+0x158>)
 8013e84:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 8013e86:	e02a      	b.n	8013ede <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 8013e88:	4b18      	ldr	r3, [pc, #96]	@ (8013eec <TEMPLATE_Control+0x158>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	b2da      	uxtb	r2, r3
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8013e92:	4b16      	ldr	r3, [pc, #88]	@ (8013eec <TEMPLATE_Control+0x158>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	0a1a      	lsrs	r2, r3, #8
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	3301      	adds	r3, #1
 8013e9c:	b2d2      	uxtb	r2, r2
 8013e9e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8013ea0:	4b12      	ldr	r3, [pc, #72]	@ (8013eec <TEMPLATE_Control+0x158>)
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	0c1a      	lsrs	r2, r3, #16
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	3302      	adds	r3, #2
 8013eaa:	b2d2      	uxtb	r2, r2
 8013eac:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8013eae:	4b0f      	ldr	r3, [pc, #60]	@ (8013eec <TEMPLATE_Control+0x158>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	0e1a      	lsrs	r2, r3, #24
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	3303      	adds	r3, #3
 8013eb8:	b2d2      	uxtb	r2, r2
 8013eba:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	3304      	adds	r3, #4
 8013ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8013eec <TEMPLATE_Control+0x158>)
 8013ec2:	7912      	ldrb	r2, [r2, #4]
 8013ec4:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	3305      	adds	r3, #5
 8013eca:	4a08      	ldr	r2, [pc, #32]	@ (8013eec <TEMPLATE_Control+0x158>)
 8013ecc:	7952      	ldrb	r2, [r2, #5]
 8013ece:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	3306      	adds	r3, #6
 8013ed4:	4a05      	ldr	r2, [pc, #20]	@ (8013eec <TEMPLATE_Control+0x158>)
 8013ed6:	7992      	ldrb	r2, [r2, #6]
 8013ed8:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 8013eda:	e000      	b.n	8013ede <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 8013edc:	bf00      	nop
  }

  return (0);
 8013ede:	2300      	movs	r3, #0
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	370c      	adds	r7, #12
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eea:	4770      	bx	lr
 8013eec:	200000cc 	.word	0x200000cc

08013ef0 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 8013ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ef4:	b08b      	sub	sp, #44	@ 0x2c
 8013ef6:	af00      	add	r7, sp, #0
 8013ef8:	6078      	str	r0, [r7, #4]
 8013efa:	6039      	str	r1, [r7, #0]
 8013efc:	466b      	mov	r3, sp
 8013efe:	461e      	mov	r6, r3
    const uint32_t bytesPerLine = 16;
 8013f00:	2310      	movs	r3, #16
 8013f02:	61bb      	str	r3, [r7, #24]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 8013f04:	69ba      	ldr	r2, [r7, #24]
 8013f06:	4613      	mov	r3, r2
 8013f08:	005b      	lsls	r3, r3, #1
 8013f0a:	4413      	add	r3, r2
 8013f0c:	617b      	str	r3, [r7, #20]
 8013f0e:	69ba      	ldr	r2, [r7, #24]
 8013f10:	4613      	mov	r3, r2
 8013f12:	005b      	lsls	r3, r3, #1
 8013f14:	4413      	add	r3, r2
 8013f16:	3301      	adds	r3, #1
 8013f18:	2200      	movs	r2, #0
 8013f1a:	4698      	mov	r8, r3
 8013f1c:	4691      	mov	r9, r2
 8013f1e:	f04f 0200 	mov.w	r2, #0
 8013f22:	f04f 0300 	mov.w	r3, #0
 8013f26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013f2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8013f2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8013f32:	69ba      	ldr	r2, [r7, #24]
 8013f34:	4613      	mov	r3, r2
 8013f36:	005b      	lsls	r3, r3, #1
 8013f38:	4413      	add	r3, r2
 8013f3a:	3301      	adds	r3, #1
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	461c      	mov	r4, r3
 8013f40:	4615      	mov	r5, r2
 8013f42:	f04f 0200 	mov.w	r2, #0
 8013f46:	f04f 0300 	mov.w	r3, #0
 8013f4a:	00eb      	lsls	r3, r5, #3
 8013f4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013f50:	00e2      	lsls	r2, r4, #3
 8013f52:	69ba      	ldr	r2, [r7, #24]
 8013f54:	4613      	mov	r3, r2
 8013f56:	005b      	lsls	r3, r3, #1
 8013f58:	4413      	add	r3, r2
 8013f5a:	3301      	adds	r3, #1
 8013f5c:	3307      	adds	r3, #7
 8013f5e:	08db      	lsrs	r3, r3, #3
 8013f60:	00db      	lsls	r3, r3, #3
 8013f62:	ebad 0d03 	sub.w	sp, sp, r3
 8013f66:	466b      	mov	r3, sp
 8013f68:	3300      	adds	r3, #0
 8013f6a:	613b      	str	r3, [r7, #16]
    uint32_t totalLen = *Len;
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	60fb      	str	r3, [r7, #12]
    uint32_t printed = 0;
 8013f72:	2300      	movs	r3, #0
 8013f74:	627b      	str	r3, [r7, #36]	@ 0x24

    if (*Len > CDC_DATA_FS_MAX_PACKET_SIZE) {
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	2b40      	cmp	r3, #64	@ 0x40
 8013f7c:	d944      	bls.n	8014008 <TEMPLATE_Receive+0x118>
        *Len = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	2240      	movs	r2, #64	@ 0x40
 8013f82:	601a      	str	r2, [r3, #0]
    }

    while (printed < *Len)
 8013f84:	e040      	b.n	8014008 <TEMPLATE_Receive+0x118>
    {
        uint32_t lineLen = ((*Len - printed) > bytesPerLine) ? bytesPerLine : (*Len - printed);
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	681a      	ldr	r2, [r3, #0]
 8013f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f8c:	1ad3      	subs	r3, r2, r3
 8013f8e:	69ba      	ldr	r2, [r7, #24]
 8013f90:	4293      	cmp	r3, r2
 8013f92:	bf28      	it	cs
 8013f94:	4613      	movcs	r3, r2
 8013f96:	60bb      	str	r3, [r7, #8]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 8013f98:	69ba      	ldr	r2, [r7, #24]
 8013f9a:	4613      	mov	r3, r2
 8013f9c:	005b      	lsls	r3, r3, #1
 8013f9e:	4413      	add	r3, r2
        memset(hexLine, 0, sizeof(hexLine));
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	461a      	mov	r2, r3
 8013fa4:	2100      	movs	r1, #0
 8013fa6:	6938      	ldr	r0, [r7, #16]
 8013fa8:	f002 f836 	bl	8016018 <memset>
        char *ptr = hexLine;
 8013fac:	693b      	ldr	r3, [r7, #16]
 8013fae:	623b      	str	r3, [r7, #32]

        for (uint32_t i = 0; i < lineLen; ++i)
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	61fb      	str	r3, [r7, #28]
 8013fb4:	e012      	b.n	8013fdc <TEMPLATE_Receive+0xec>
        {
            ptr += snprintf(ptr, 4, "%02X ", Buf[printed + i]);
 8013fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013fb8:	69fb      	ldr	r3, [r7, #28]
 8013fba:	4413      	add	r3, r2
 8013fbc:	687a      	ldr	r2, [r7, #4]
 8013fbe:	4413      	add	r3, r2
 8013fc0:	781b      	ldrb	r3, [r3, #0]
 8013fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8014078 <TEMPLATE_Receive+0x188>)
 8013fc4:	2104      	movs	r1, #4
 8013fc6:	6a38      	ldr	r0, [r7, #32]
 8013fc8:	f001 ff46 	bl	8015e58 <sniprintf>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	461a      	mov	r2, r3
 8013fd0:	6a3b      	ldr	r3, [r7, #32]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	623b      	str	r3, [r7, #32]
        for (uint32_t i = 0; i < lineLen; ++i)
 8013fd6:	69fb      	ldr	r3, [r7, #28]
 8013fd8:	3301      	adds	r3, #1
 8013fda:	61fb      	str	r3, [r7, #28]
 8013fdc:	69fa      	ldr	r2, [r7, #28]
 8013fde:	68bb      	ldr	r3, [r7, #8]
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d3e8      	bcc.n	8013fb6 <TEMPLATE_Receive+0xc6>
        }

        if (printed == 0)
 8013fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d105      	bne.n	8013ff6 <TEMPLATE_Receive+0x106>
        {
            // First line includes logger message
            log_info("USB Rx [%lu bytes]: %s", totalLen, hexLine);
 8013fea:	693a      	ldr	r2, [r7, #16]
 8013fec:	68f9      	ldr	r1, [r7, #12]
 8013fee:	4823      	ldr	r0, [pc, #140]	@ (801407c <TEMPLATE_Receive+0x18c>)
 8013ff0:	f7ef fe30 	bl	8003c54 <log_info>
 8013ff4:	e004      	b.n	8014000 <TEMPLATE_Receive+0x110>
        }
        else
        {
            // Subsequent lines have 26-space indent
            log_info("%19s%s", "", hexLine);
 8013ff6:	693a      	ldr	r2, [r7, #16]
 8013ff8:	4921      	ldr	r1, [pc, #132]	@ (8014080 <TEMPLATE_Receive+0x190>)
 8013ffa:	4822      	ldr	r0, [pc, #136]	@ (8014084 <TEMPLATE_Receive+0x194>)
 8013ffc:	f7ef fe2a 	bl	8003c54 <log_info>
        }

        printed += lineLen;
 8014000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	4413      	add	r3, r2
 8014006:	627b      	str	r3, [r7, #36]	@ 0x24
    while (printed < *Len)
 8014008:	683b      	ldr	r3, [r7, #0]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801400e:	429a      	cmp	r2, r3
 8014010:	d3b9      	bcc.n	8013f86 <TEMPLATE_Receive+0x96>
    }

    // Copy to usb_rx_buffer if space permits
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	681a      	ldr	r2, [r3, #0]
 8014016:	4b1c      	ldr	r3, [pc, #112]	@ (8014088 <TEMPLATE_Receive+0x198>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	4413      	add	r3, r2
 801401c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014020:	d215      	bcs.n	801404e <TEMPLATE_Receive+0x15e>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 8014022:	4b19      	ldr	r3, [pc, #100]	@ (8014088 <TEMPLATE_Receive+0x198>)
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	4a19      	ldr	r2, [pc, #100]	@ (801408c <TEMPLATE_Receive+0x19c>)
 8014028:	1898      	adds	r0, r3, r2
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	461a      	mov	r2, r3
 8014030:	6879      	ldr	r1, [r7, #4]
 8014032:	f002 f87c 	bl	801612e <memcpy>
        usb_rx_index += *Len;
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	681a      	ldr	r2, [r3, #0]
 801403a:	4b13      	ldr	r3, [pc, #76]	@ (8014088 <TEMPLATE_Receive+0x198>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	4413      	add	r3, r2
 8014040:	4a11      	ldr	r2, [pc, #68]	@ (8014088 <TEMPLATE_Receive+0x198>)
 8014042:	6013      	str	r3, [r2, #0]
        log_error("USB buffer overflow");
        return USBD_FAIL;
    }

    // If this was the last packet
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	2b3f      	cmp	r3, #63	@ 0x3f
 801404a:	d80b      	bhi.n	8014064 <TEMPLATE_Receive+0x174>
 801404c:	e007      	b.n	801405e <TEMPLATE_Receive+0x16e>
        usb_rx_index = 0;
 801404e:	4b0e      	ldr	r3, [pc, #56]	@ (8014088 <TEMPLATE_Receive+0x198>)
 8014050:	2200      	movs	r2, #0
 8014052:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 8014054:	480e      	ldr	r0, [pc, #56]	@ (8014090 <TEMPLATE_Receive+0x1a0>)
 8014056:	f7ef fe31 	bl	8003cbc <log_error>
        return USBD_FAIL;
 801405a:	2303      	movs	r3, #3
 801405c:	e006      	b.n	801406c <TEMPLATE_Receive+0x17c>
    {
        usb_rx_complete = true;
 801405e:	4b0d      	ldr	r3, [pc, #52]	@ (8014094 <TEMPLATE_Receive+0x1a4>)
 8014060:	2201      	movs	r2, #1
 8014062:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014064:	480c      	ldr	r0, [pc, #48]	@ (8014098 <TEMPLATE_Receive+0x1a8>)
 8014066:	f7ff fd79 	bl	8013b5c <USBD_CDC_ReceivePacket>
    return USBD_OK;
 801406a:	2300      	movs	r3, #0
 801406c:	46b5      	mov	sp, r6
}
 801406e:	4618      	mov	r0, r3
 8014070:	372c      	adds	r7, #44	@ 0x2c
 8014072:	46bd      	mov	sp, r7
 8014074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014078:	08018aa0 	.word	0x08018aa0
 801407c:	08018adc 	.word	0x08018adc
 8014080:	08018ac0 	.word	0x08018ac0
 8014084:	08018ac4 	.word	0x08018ac4
 8014088:	200130b8 	.word	0x200130b8
 801408c:	200030b8 	.word	0x200030b8
 8014090:	08018af4 	.word	0x08018af4
 8014094:	200130bc 	.word	0x200130bc
 8014098:	20002930 	.word	0x20002930

0801409c <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801409c:	b480      	push	{r7}
 801409e:	b085      	sub	sp, #20
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	60f8      	str	r0, [r7, #12]
 80140a4:	60b9      	str	r1, [r7, #8]
 80140a6:	4613      	mov	r3, r2
 80140a8:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 80140aa:	2300      	movs	r3, #0

}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3714      	adds	r7, #20
 80140b0:	46bd      	mov	sp, r7
 80140b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b6:	4770      	bx	lr

080140b8 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80140b8:	b580      	push	{r7, lr}
 80140ba:	b082      	sub	sp, #8
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80140cc:	4619      	mov	r1, r3
 80140ce:	4610      	mov	r0, r2
 80140d0:	f000 faa5 	bl	801461e <USBD_LL_SetupStage>
}
 80140d4:	bf00      	nop
 80140d6:	3708      	adds	r7, #8
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}

080140dc <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b082      	sub	sp, #8
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	460b      	mov	r3, r1
 80140e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 80140ee:	78fa      	ldrb	r2, [r7, #3]
 80140f0:	6879      	ldr	r1, [r7, #4]
 80140f2:	4613      	mov	r3, r2
 80140f4:	009b      	lsls	r3, r3, #2
 80140f6:	4413      	add	r3, r2
 80140f8:	00db      	lsls	r3, r3, #3
 80140fa:	440b      	add	r3, r1
 80140fc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8014100:	681a      	ldr	r2, [r3, #0]
 8014102:	78fb      	ldrb	r3, [r7, #3]
 8014104:	4619      	mov	r1, r3
 8014106:	f000 fadf 	bl	80146c8 <USBD_LL_DataOutStage>
}
 801410a:	bf00      	nop
 801410c:	3708      	adds	r7, #8
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}

08014112 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8014112:	b580      	push	{r7, lr}
 8014114:	b082      	sub	sp, #8
 8014116:	af00      	add	r7, sp, #0
 8014118:	6078      	str	r0, [r7, #4]
 801411a:	460b      	mov	r3, r1
 801411c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8014124:	78fa      	ldrb	r2, [r7, #3]
 8014126:	6879      	ldr	r1, [r7, #4]
 8014128:	4613      	mov	r3, r2
 801412a:	009b      	lsls	r3, r3, #2
 801412c:	4413      	add	r3, r2
 801412e:	00db      	lsls	r3, r3, #3
 8014130:	440b      	add	r3, r1
 8014132:	3328      	adds	r3, #40	@ 0x28
 8014134:	681a      	ldr	r2, [r3, #0]
 8014136:	78fb      	ldrb	r3, [r7, #3]
 8014138:	4619      	mov	r1, r3
 801413a:	f000 fb78 	bl	801482e <USBD_LL_DataInStage>
}
 801413e:	bf00      	nop
 8014140:	3708      	adds	r7, #8
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}

08014146 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8014146:	b580      	push	{r7, lr}
 8014148:	b082      	sub	sp, #8
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8014154:	4618      	mov	r0, r3
 8014156:	f000 fc7e 	bl	8014a56 <USBD_LL_SOF>
}
 801415a:	bf00      	nop
 801415c:	3708      	adds	r7, #8
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}

08014162 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8014162:	b580      	push	{r7, lr}
 8014164:	b084      	sub	sp, #16
 8014166:	af00      	add	r7, sp, #0
 8014168:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801416a:	2301      	movs	r3, #1
 801416c:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	79db      	ldrb	r3, [r3, #7]
 8014172:	2b02      	cmp	r3, #2
 8014174:	d001      	beq.n	801417a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014176:	f7f0 fa01 	bl	800457c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8014180:	7bfa      	ldrb	r2, [r7, #15]
 8014182:	4611      	mov	r1, r2
 8014184:	4618      	mov	r0, r3
 8014186:	f000 fc56 	bl	8014a36 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8014190:	4618      	mov	r0, r3
 8014192:	f000 fbfe 	bl	8014992 <USBD_LL_Reset>
}
 8014196:	bf00      	nop
 8014198:	3710      	adds	r7, #16
 801419a:	46bd      	mov	sp, r7
 801419c:	bd80      	pop	{r7, pc}
	...

080141a0 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	4a19      	ldr	r2, [pc, #100]	@ (8014210 <USBD_LL_Init+0x70>)
 80141ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80141b6:	2340      	movs	r3, #64	@ 0x40
 80141b8:	2200      	movs	r2, #0
 80141ba:	2100      	movs	r1, #0
 80141bc:	f7f4 fe20 	bl	8008e00 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80141c6:	2380      	movs	r3, #128	@ 0x80
 80141c8:	2200      	movs	r2, #0
 80141ca:	2180      	movs	r1, #128	@ 0x80
 80141cc:	f7f4 fe18 	bl	8008e00 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80141d6:	23c0      	movs	r3, #192	@ 0xc0
 80141d8:	2200      	movs	r2, #0
 80141da:	2181      	movs	r1, #129	@ 0x81
 80141dc:	f7f4 fe10 	bl	8008e00 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80141e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80141ea:	2200      	movs	r2, #0
 80141ec:	2101      	movs	r1, #1
 80141ee:	f7f4 fe07 	bl	8008e00 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80141f8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80141fc:	2200      	movs	r2, #0
 80141fe:	2182      	movs	r1, #130	@ 0x82
 8014200:	f7f4 fdfe 	bl	8008e00 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 8014204:	2300      	movs	r3, #0
}
 8014206:	4618      	mov	r0, r3
 8014208:	3708      	adds	r7, #8
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	2000264c 	.word	0x2000264c

08014214 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b084      	sub	sp, #16
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014222:	4618      	mov	r0, r3
 8014224:	f7f3 facf 	bl	80077c6 <HAL_PCD_Start>
 8014228:	4603      	mov	r3, r0
 801422a:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 801422c:	7bfb      	ldrb	r3, [r7, #15]
 801422e:	4618      	mov	r0, r3
 8014230:	f000 f916 	bl	8014460 <USBD_Get_USB_Status>
 8014234:	4603      	mov	r3, r0
}
 8014236:	4618      	mov	r0, r3
 8014238:	3710      	adds	r7, #16
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}

0801423e <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 801423e:	b580      	push	{r7, lr}
 8014240:	b084      	sub	sp, #16
 8014242:	af00      	add	r7, sp, #0
 8014244:	6078      	str	r0, [r7, #4]
 8014246:	4608      	mov	r0, r1
 8014248:	4611      	mov	r1, r2
 801424a:	461a      	mov	r2, r3
 801424c:	4603      	mov	r3, r0
 801424e:	70fb      	strb	r3, [r7, #3]
 8014250:	460b      	mov	r3, r1
 8014252:	70bb      	strb	r3, [r7, #2]
 8014254:	4613      	mov	r3, r2
 8014256:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801425e:	78bb      	ldrb	r3, [r7, #2]
 8014260:	883a      	ldrh	r2, [r7, #0]
 8014262:	78f9      	ldrb	r1, [r7, #3]
 8014264:	f7f3 fbfe 	bl	8007a64 <HAL_PCD_EP_Open>
 8014268:	4603      	mov	r3, r0
 801426a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 801426c:	7bfb      	ldrb	r3, [r7, #15]
 801426e:	4618      	mov	r0, r3
 8014270:	f000 f8f6 	bl	8014460 <USBD_Get_USB_Status>
 8014274:	4603      	mov	r3, r0
}
 8014276:	4618      	mov	r0, r3
 8014278:	3710      	adds	r7, #16
 801427a:	46bd      	mov	sp, r7
 801427c:	bd80      	pop	{r7, pc}

0801427e <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801427e:	b580      	push	{r7, lr}
 8014280:	b084      	sub	sp, #16
 8014282:	af00      	add	r7, sp, #0
 8014284:	6078      	str	r0, [r7, #4]
 8014286:	460b      	mov	r3, r1
 8014288:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014290:	78fa      	ldrb	r2, [r7, #3]
 8014292:	4611      	mov	r1, r2
 8014294:	4618      	mov	r0, r3
 8014296:	f7f3 fc46 	bl	8007b26 <HAL_PCD_EP_Close>
 801429a:	4603      	mov	r3, r0
 801429c:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 801429e:	7bfb      	ldrb	r3, [r7, #15]
 80142a0:	4618      	mov	r0, r3
 80142a2:	f000 f8dd 	bl	8014460 <USBD_Get_USB_Status>
 80142a6:	4603      	mov	r3, r0
}
 80142a8:	4618      	mov	r0, r3
 80142aa:	3710      	adds	r7, #16
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}

080142b0 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b084      	sub	sp, #16
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	460b      	mov	r3, r1
 80142ba:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80142c2:	78fa      	ldrb	r2, [r7, #3]
 80142c4:	4611      	mov	r1, r2
 80142c6:	4618      	mov	r0, r3
 80142c8:	f7f3 fcf9 	bl	8007cbe <HAL_PCD_EP_SetStall>
 80142cc:	4603      	mov	r3, r0
 80142ce:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 80142d0:	7bfb      	ldrb	r3, [r7, #15]
 80142d2:	4618      	mov	r0, r3
 80142d4:	f000 f8c4 	bl	8014460 <USBD_Get_USB_Status>
 80142d8:	4603      	mov	r3, r0
}
 80142da:	4618      	mov	r0, r3
 80142dc:	3710      	adds	r7, #16
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}

080142e2 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 80142e2:	b580      	push	{r7, lr}
 80142e4:	b084      	sub	sp, #16
 80142e6:	af00      	add	r7, sp, #0
 80142e8:	6078      	str	r0, [r7, #4]
 80142ea:	460b      	mov	r3, r1
 80142ec:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80142f4:	78fa      	ldrb	r2, [r7, #3]
 80142f6:	4611      	mov	r1, r2
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7f3 fd34 	bl	8007d66 <HAL_PCD_EP_ClrStall>
 80142fe:	4603      	mov	r3, r0
 8014300:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8014302:	7bfb      	ldrb	r3, [r7, #15]
 8014304:	4618      	mov	r0, r3
 8014306:	f000 f8ab 	bl	8014460 <USBD_Get_USB_Status>
 801430a:	4603      	mov	r3, r0
}
 801430c:	4618      	mov	r0, r3
 801430e:	3710      	adds	r7, #16
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}

08014314 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014314:	b480      	push	{r7}
 8014316:	b085      	sub	sp, #20
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	460b      	mov	r3, r1
 801431e:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014326:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 8014328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801432c:	2b00      	cmp	r3, #0
 801432e:	da0b      	bge.n	8014348 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014330:	78fb      	ldrb	r3, [r7, #3]
 8014332:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014336:	68f9      	ldr	r1, [r7, #12]
 8014338:	4613      	mov	r3, r2
 801433a:	009b      	lsls	r3, r3, #2
 801433c:	4413      	add	r3, r2
 801433e:	00db      	lsls	r3, r3, #3
 8014340:	440b      	add	r3, r1
 8014342:	3316      	adds	r3, #22
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	e00b      	b.n	8014360 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014348:	78fb      	ldrb	r3, [r7, #3]
 801434a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801434e:	68f9      	ldr	r1, [r7, #12]
 8014350:	4613      	mov	r3, r2
 8014352:	009b      	lsls	r3, r3, #2
 8014354:	4413      	add	r3, r2
 8014356:	00db      	lsls	r3, r3, #3
 8014358:	440b      	add	r3, r1
 801435a:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 801435e:	781b      	ldrb	r3, [r3, #0]
      }
}
 8014360:	4618      	mov	r0, r3
 8014362:	3714      	adds	r7, #20
 8014364:	46bd      	mov	sp, r7
 8014366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436a:	4770      	bx	lr

0801436c <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b084      	sub	sp, #16
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
 8014374:	460b      	mov	r3, r1
 8014376:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801437e:	78fa      	ldrb	r2, [r7, #3]
 8014380:	4611      	mov	r1, r2
 8014382:	4618      	mov	r0, r3
 8014384:	f7f3 fb4a 	bl	8007a1c <HAL_PCD_SetAddress>
 8014388:	4603      	mov	r3, r0
 801438a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 801438c:	7bfb      	ldrb	r3, [r7, #15]
 801438e:	4618      	mov	r0, r3
 8014390:	f000 f866 	bl	8014460 <USBD_Get_USB_Status>
 8014394:	4603      	mov	r3, r0
}
 8014396:	4618      	mov	r0, r3
 8014398:	3710      	adds	r7, #16
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}

0801439e <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 801439e:	b580      	push	{r7, lr}
 80143a0:	b086      	sub	sp, #24
 80143a2:	af00      	add	r7, sp, #0
 80143a4:	60f8      	str	r0, [r7, #12]
 80143a6:	607a      	str	r2, [r7, #4]
 80143a8:	603b      	str	r3, [r7, #0]
 80143aa:	460b      	mov	r3, r1
 80143ac:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80143b4:	7af9      	ldrb	r1, [r7, #11]
 80143b6:	683b      	ldr	r3, [r7, #0]
 80143b8:	687a      	ldr	r2, [r7, #4]
 80143ba:	f7f3 fc48 	bl	8007c4e <HAL_PCD_EP_Transmit>
 80143be:	4603      	mov	r3, r0
 80143c0:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 80143c2:	7dfb      	ldrb	r3, [r7, #23]
 80143c4:	4618      	mov	r0, r3
 80143c6:	f000 f84b 	bl	8014460 <USBD_Get_USB_Status>
 80143ca:	4603      	mov	r3, r0
}
 80143cc:	4618      	mov	r0, r3
 80143ce:	3718      	adds	r7, #24
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}

080143d4 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b086      	sub	sp, #24
 80143d8:	af00      	add	r7, sp, #0
 80143da:	60f8      	str	r0, [r7, #12]
 80143dc:	607a      	str	r2, [r7, #4]
 80143de:	603b      	str	r3, [r7, #0]
 80143e0:	460b      	mov	r3, r1
 80143e2:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80143ea:	7af9      	ldrb	r1, [r7, #11]
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	687a      	ldr	r2, [r7, #4]
 80143f0:	f7f3 fbe3 	bl	8007bba <HAL_PCD_EP_Receive>
 80143f4:	4603      	mov	r3, r0
 80143f6:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 80143f8:	7dfb      	ldrb	r3, [r7, #23]
 80143fa:	4618      	mov	r0, r3
 80143fc:	f000 f830 	bl	8014460 <USBD_Get_USB_Status>
 8014400:	4603      	mov	r3, r0
}
 8014402:	4618      	mov	r0, r3
 8014404:	3718      	adds	r7, #24
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}

0801440a <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801440a:	b580      	push	{r7, lr}
 801440c:	b082      	sub	sp, #8
 801440e:	af00      	add	r7, sp, #0
 8014410:	6078      	str	r0, [r7, #4]
 8014412:	460b      	mov	r3, r1
 8014414:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801441c:	78fa      	ldrb	r2, [r7, #3]
 801441e:	4611      	mov	r1, r2
 8014420:	4618      	mov	r0, r3
 8014422:	f7f3 fbfc 	bl	8007c1e <HAL_PCD_EP_GetRxCount>
 8014426:	4603      	mov	r3, r0
}
 8014428:	4618      	mov	r0, r3
 801442a:	3708      	adds	r7, #8
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}

08014430 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 8014430:	b480      	push	{r7}
 8014432:	b083      	sub	sp, #12
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 8014438:	4b03      	ldr	r3, [pc, #12]	@ (8014448 <USBD_static_malloc+0x18>)
}
 801443a:	4618      	mov	r0, r3
 801443c:	370c      	adds	r7, #12
 801443e:	46bd      	mov	sp, r7
 8014440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014444:	4770      	bx	lr
 8014446:	bf00      	nop
 8014448:	200130c0 	.word	0x200130c0

0801444c <USBD_static_free>:

void USBD_static_free(void *p)
{
 801444c:	b480      	push	{r7}
 801444e:	b083      	sub	sp, #12
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 8014454:	bf00      	nop
 8014456:	370c      	adds	r7, #12
 8014458:	46bd      	mov	sp, r7
 801445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445e:	4770      	bx	lr

08014460 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014460:	b480      	push	{r7}
 8014462:	b085      	sub	sp, #20
 8014464:	af00      	add	r7, sp, #0
 8014466:	4603      	mov	r3, r0
 8014468:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 801446a:	2300      	movs	r3, #0
 801446c:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 801446e:	79fb      	ldrb	r3, [r7, #7]
 8014470:	2b03      	cmp	r3, #3
 8014472:	d817      	bhi.n	80144a4 <USBD_Get_USB_Status+0x44>
 8014474:	a201      	add	r2, pc, #4	@ (adr r2, 801447c <USBD_Get_USB_Status+0x1c>)
 8014476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801447a:	bf00      	nop
 801447c:	0801448d 	.word	0x0801448d
 8014480:	08014493 	.word	0x08014493
 8014484:	08014499 	.word	0x08014499
 8014488:	0801449f 	.word	0x0801449f
      {
      case HAL_OK :
             usb_status = USBD_OK;
 801448c:	2300      	movs	r3, #0
 801448e:	73fb      	strb	r3, [r7, #15]
             break;
 8014490:	e00b      	b.n	80144aa <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 8014492:	2303      	movs	r3, #3
 8014494:	73fb      	strb	r3, [r7, #15]
             break;
 8014496:	e008      	b.n	80144aa <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 8014498:	2301      	movs	r3, #1
 801449a:	73fb      	strb	r3, [r7, #15]
             break;
 801449c:	e005      	b.n	80144aa <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 801449e:	2303      	movs	r3, #3
 80144a0:	73fb      	strb	r3, [r7, #15]
             break;
 80144a2:	e002      	b.n	80144aa <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 80144a4:	2303      	movs	r3, #3
 80144a6:	73fb      	strb	r3, [r7, #15]
             break;
 80144a8:	bf00      	nop
      }
      return usb_status;
 80144aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80144ac:	4618      	mov	r0, r3
 80144ae:	3714      	adds	r7, #20
 80144b0:	46bd      	mov	sp, r7
 80144b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b6:	4770      	bx	lr

080144b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b086      	sub	sp, #24
 80144bc:	af00      	add	r7, sp, #0
 80144be:	60f8      	str	r0, [r7, #12]
 80144c0:	60b9      	str	r1, [r7, #8]
 80144c2:	4613      	mov	r3, r2
 80144c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d101      	bne.n	80144d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80144cc:	2303      	movs	r3, #3
 80144ce:	e01f      	b.n	8014510 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	2200      	movs	r2, #0
 80144d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	2200      	movs	r2, #0
 80144dc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2200      	movs	r2, #0
 80144e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d003      	beq.n	80144f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	68ba      	ldr	r2, [r7, #8]
 80144f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	2201      	movs	r2, #1
 80144fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	79fa      	ldrb	r2, [r7, #7]
 8014502:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014504:	68f8      	ldr	r0, [r7, #12]
 8014506:	f7ff fe4b 	bl	80141a0 <USBD_LL_Init>
 801450a:	4603      	mov	r3, r0
 801450c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801450e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014510:	4618      	mov	r0, r3
 8014512:	3718      	adds	r7, #24
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}

08014518 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014522:	2300      	movs	r3, #0
 8014524:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d101      	bne.n	8014530 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801452c:	2303      	movs	r3, #3
 801452e:	e025      	b.n	801457c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	683a      	ldr	r2, [r7, #0]
 8014534:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	32ae      	adds	r2, #174	@ 0xae
 8014542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014548:	2b00      	cmp	r3, #0
 801454a:	d00f      	beq.n	801456c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	32ae      	adds	r2, #174	@ 0xae
 8014556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801455c:	f107 020e 	add.w	r2, r7, #14
 8014560:	4610      	mov	r0, r2
 8014562:	4798      	blx	r3
 8014564:	4602      	mov	r2, r0
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014572:	1c5a      	adds	r2, r3, #1
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801457a:	2300      	movs	r3, #0
}
 801457c:	4618      	mov	r0, r3
 801457e:	3710      	adds	r7, #16
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}

08014584 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b082      	sub	sp, #8
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	f7ff fe41 	bl	8014214 <USBD_LL_Start>
 8014592:	4603      	mov	r3, r0
}
 8014594:	4618      	mov	r0, r3
 8014596:	3708      	adds	r7, #8
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}

0801459c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801459c:	b480      	push	{r7}
 801459e:	b083      	sub	sp, #12
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80145a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	370c      	adds	r7, #12
 80145aa:	46bd      	mov	sp, r7
 80145ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b0:	4770      	bx	lr

080145b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145b2:	b580      	push	{r7, lr}
 80145b4:	b084      	sub	sp, #16
 80145b6:	af00      	add	r7, sp, #0
 80145b8:	6078      	str	r0, [r7, #4]
 80145ba:	460b      	mov	r3, r1
 80145bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80145be:	2300      	movs	r3, #0
 80145c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d009      	beq.n	80145e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	78fa      	ldrb	r2, [r7, #3]
 80145d6:	4611      	mov	r1, r2
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	4798      	blx	r3
 80145dc:	4603      	mov	r3, r0
 80145de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80145e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3710      	adds	r7, #16
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}

080145ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145ea:	b580      	push	{r7, lr}
 80145ec:	b084      	sub	sp, #16
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	6078      	str	r0, [r7, #4]
 80145f2:	460b      	mov	r3, r1
 80145f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80145f6:	2300      	movs	r3, #0
 80145f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	78fa      	ldrb	r2, [r7, #3]
 8014604:	4611      	mov	r1, r2
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	4798      	blx	r3
 801460a:	4603      	mov	r3, r0
 801460c:	2b00      	cmp	r3, #0
 801460e:	d001      	beq.n	8014614 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014610:	2303      	movs	r3, #3
 8014612:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014614:	7bfb      	ldrb	r3, [r7, #15]
}
 8014616:	4618      	mov	r0, r3
 8014618:	3710      	adds	r7, #16
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}

0801461e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801461e:	b580      	push	{r7, lr}
 8014620:	b084      	sub	sp, #16
 8014622:	af00      	add	r7, sp, #0
 8014624:	6078      	str	r0, [r7, #4]
 8014626:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801462e:	6839      	ldr	r1, [r7, #0]
 8014630:	4618      	mov	r0, r3
 8014632:	f001 f846 	bl	80156c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2201      	movs	r2, #1
 801463a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8014644:	461a      	mov	r2, r3
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8014652:	f003 031f 	and.w	r3, r3, #31
 8014656:	2b02      	cmp	r3, #2
 8014658:	d01a      	beq.n	8014690 <USBD_LL_SetupStage+0x72>
 801465a:	2b02      	cmp	r3, #2
 801465c:	d822      	bhi.n	80146a4 <USBD_LL_SetupStage+0x86>
 801465e:	2b00      	cmp	r3, #0
 8014660:	d002      	beq.n	8014668 <USBD_LL_SetupStage+0x4a>
 8014662:	2b01      	cmp	r3, #1
 8014664:	d00a      	beq.n	801467c <USBD_LL_SetupStage+0x5e>
 8014666:	e01d      	b.n	80146a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801466e:	4619      	mov	r1, r3
 8014670:	6878      	ldr	r0, [r7, #4]
 8014672:	f000 fa9d 	bl	8014bb0 <USBD_StdDevReq>
 8014676:	4603      	mov	r3, r0
 8014678:	73fb      	strb	r3, [r7, #15]
      break;
 801467a:	e020      	b.n	80146be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014682:	4619      	mov	r1, r3
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f000 fb05 	bl	8014c94 <USBD_StdItfReq>
 801468a:	4603      	mov	r3, r0
 801468c:	73fb      	strb	r3, [r7, #15]
      break;
 801468e:	e016      	b.n	80146be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8014696:	4619      	mov	r1, r3
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f000 fb67 	bl	8014d6c <USBD_StdEPReq>
 801469e:	4603      	mov	r3, r0
 80146a0:	73fb      	strb	r3, [r7, #15]
      break;
 80146a2:	e00c      	b.n	80146be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80146aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80146ae:	b2db      	uxtb	r3, r3
 80146b0:	4619      	mov	r1, r3
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7ff fdfc 	bl	80142b0 <USBD_LL_StallEP>
 80146b8:	4603      	mov	r3, r0
 80146ba:	73fb      	strb	r3, [r7, #15]
      break;
 80146bc:	bf00      	nop
  }

  return ret;
 80146be:	7bfb      	ldrb	r3, [r7, #15]
}
 80146c0:	4618      	mov	r0, r3
 80146c2:	3710      	adds	r7, #16
 80146c4:	46bd      	mov	sp, r7
 80146c6:	bd80      	pop	{r7, pc}

080146c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b086      	sub	sp, #24
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	60f8      	str	r0, [r7, #12]
 80146d0:	460b      	mov	r3, r1
 80146d2:	607a      	str	r2, [r7, #4]
 80146d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80146d6:	2300      	movs	r3, #0
 80146d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80146da:	7afb      	ldrb	r3, [r7, #11]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d16e      	bne.n	80147be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80146e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80146ee:	2b03      	cmp	r3, #3
 80146f0:	f040 8098 	bne.w	8014824 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	689a      	ldr	r2, [r3, #8]
 80146f8:	693b      	ldr	r3, [r7, #16]
 80146fa:	68db      	ldr	r3, [r3, #12]
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d913      	bls.n	8014728 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	689a      	ldr	r2, [r3, #8]
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	1ad2      	subs	r2, r2, r3
 801470a:	693b      	ldr	r3, [r7, #16]
 801470c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801470e:	693b      	ldr	r3, [r7, #16]
 8014710:	68da      	ldr	r2, [r3, #12]
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	689b      	ldr	r3, [r3, #8]
 8014716:	4293      	cmp	r3, r2
 8014718:	bf28      	it	cs
 801471a:	4613      	movcs	r3, r2
 801471c:	461a      	mov	r2, r3
 801471e:	6879      	ldr	r1, [r7, #4]
 8014720:	68f8      	ldr	r0, [r7, #12]
 8014722:	f001 f9cf 	bl	8015ac4 <USBD_CtlContinueRx>
 8014726:	e07d      	b.n	8014824 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801472e:	f003 031f 	and.w	r3, r3, #31
 8014732:	2b02      	cmp	r3, #2
 8014734:	d014      	beq.n	8014760 <USBD_LL_DataOutStage+0x98>
 8014736:	2b02      	cmp	r3, #2
 8014738:	d81d      	bhi.n	8014776 <USBD_LL_DataOutStage+0xae>
 801473a:	2b00      	cmp	r3, #0
 801473c:	d002      	beq.n	8014744 <USBD_LL_DataOutStage+0x7c>
 801473e:	2b01      	cmp	r3, #1
 8014740:	d003      	beq.n	801474a <USBD_LL_DataOutStage+0x82>
 8014742:	e018      	b.n	8014776 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014744:	2300      	movs	r3, #0
 8014746:	75bb      	strb	r3, [r7, #22]
            break;
 8014748:	e018      	b.n	801477c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014750:	b2db      	uxtb	r3, r3
 8014752:	4619      	mov	r1, r3
 8014754:	68f8      	ldr	r0, [r7, #12]
 8014756:	f000 f99e 	bl	8014a96 <USBD_CoreFindIF>
 801475a:	4603      	mov	r3, r0
 801475c:	75bb      	strb	r3, [r7, #22]
            break;
 801475e:	e00d      	b.n	801477c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8014766:	b2db      	uxtb	r3, r3
 8014768:	4619      	mov	r1, r3
 801476a:	68f8      	ldr	r0, [r7, #12]
 801476c:	f000 f9a0 	bl	8014ab0 <USBD_CoreFindEP>
 8014770:	4603      	mov	r3, r0
 8014772:	75bb      	strb	r3, [r7, #22]
            break;
 8014774:	e002      	b.n	801477c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014776:	2300      	movs	r3, #0
 8014778:	75bb      	strb	r3, [r7, #22]
            break;
 801477a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801477c:	7dbb      	ldrb	r3, [r7, #22]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d119      	bne.n	80147b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014788:	b2db      	uxtb	r3, r3
 801478a:	2b03      	cmp	r3, #3
 801478c:	d113      	bne.n	80147b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801478e:	7dba      	ldrb	r2, [r7, #22]
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	32ae      	adds	r2, #174	@ 0xae
 8014794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014798:	691b      	ldr	r3, [r3, #16]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d00b      	beq.n	80147b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801479e:	7dba      	ldrb	r2, [r7, #22]
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80147a6:	7dba      	ldrb	r2, [r7, #22]
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	32ae      	adds	r2, #174	@ 0xae
 80147ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147b0:	691b      	ldr	r3, [r3, #16]
 80147b2:	68f8      	ldr	r0, [r7, #12]
 80147b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80147b6:	68f8      	ldr	r0, [r7, #12]
 80147b8:	f001 f995 	bl	8015ae6 <USBD_CtlSendStatus>
 80147bc:	e032      	b.n	8014824 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80147be:	7afb      	ldrb	r3, [r7, #11]
 80147c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80147c4:	b2db      	uxtb	r3, r3
 80147c6:	4619      	mov	r1, r3
 80147c8:	68f8      	ldr	r0, [r7, #12]
 80147ca:	f000 f971 	bl	8014ab0 <USBD_CoreFindEP>
 80147ce:	4603      	mov	r3, r0
 80147d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80147d2:	7dbb      	ldrb	r3, [r7, #22]
 80147d4:	2bff      	cmp	r3, #255	@ 0xff
 80147d6:	d025      	beq.n	8014824 <USBD_LL_DataOutStage+0x15c>
 80147d8:	7dbb      	ldrb	r3, [r7, #22]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d122      	bne.n	8014824 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80147e4:	b2db      	uxtb	r3, r3
 80147e6:	2b03      	cmp	r3, #3
 80147e8:	d117      	bne.n	801481a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80147ea:	7dba      	ldrb	r2, [r7, #22]
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	32ae      	adds	r2, #174	@ 0xae
 80147f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147f4:	699b      	ldr	r3, [r3, #24]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d00f      	beq.n	801481a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80147fa:	7dba      	ldrb	r2, [r7, #22]
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014802:	7dba      	ldrb	r2, [r7, #22]
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	32ae      	adds	r2, #174	@ 0xae
 8014808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801480c:	699b      	ldr	r3, [r3, #24]
 801480e:	7afa      	ldrb	r2, [r7, #11]
 8014810:	4611      	mov	r1, r2
 8014812:	68f8      	ldr	r0, [r7, #12]
 8014814:	4798      	blx	r3
 8014816:	4603      	mov	r3, r0
 8014818:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801481a:	7dfb      	ldrb	r3, [r7, #23]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d001      	beq.n	8014824 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014820:	7dfb      	ldrb	r3, [r7, #23]
 8014822:	e000      	b.n	8014826 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014824:	2300      	movs	r3, #0
}
 8014826:	4618      	mov	r0, r3
 8014828:	3718      	adds	r7, #24
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}

0801482e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801482e:	b580      	push	{r7, lr}
 8014830:	b086      	sub	sp, #24
 8014832:	af00      	add	r7, sp, #0
 8014834:	60f8      	str	r0, [r7, #12]
 8014836:	460b      	mov	r3, r1
 8014838:	607a      	str	r2, [r7, #4]
 801483a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801483c:	7afb      	ldrb	r3, [r7, #11]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d16f      	bne.n	8014922 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	3314      	adds	r3, #20
 8014846:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801484e:	2b02      	cmp	r3, #2
 8014850:	d15a      	bne.n	8014908 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	689a      	ldr	r2, [r3, #8]
 8014856:	693b      	ldr	r3, [r7, #16]
 8014858:	68db      	ldr	r3, [r3, #12]
 801485a:	429a      	cmp	r2, r3
 801485c:	d914      	bls.n	8014888 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	689a      	ldr	r2, [r3, #8]
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	68db      	ldr	r3, [r3, #12]
 8014866:	1ad2      	subs	r2, r2, r3
 8014868:	693b      	ldr	r3, [r7, #16]
 801486a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	689b      	ldr	r3, [r3, #8]
 8014870:	461a      	mov	r2, r3
 8014872:	6879      	ldr	r1, [r7, #4]
 8014874:	68f8      	ldr	r0, [r7, #12]
 8014876:	f001 f8f7 	bl	8015a68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801487a:	2300      	movs	r3, #0
 801487c:	2200      	movs	r2, #0
 801487e:	2100      	movs	r1, #0
 8014880:	68f8      	ldr	r0, [r7, #12]
 8014882:	f7ff fda7 	bl	80143d4 <USBD_LL_PrepareReceive>
 8014886:	e03f      	b.n	8014908 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014888:	693b      	ldr	r3, [r7, #16]
 801488a:	68da      	ldr	r2, [r3, #12]
 801488c:	693b      	ldr	r3, [r7, #16]
 801488e:	689b      	ldr	r3, [r3, #8]
 8014890:	429a      	cmp	r2, r3
 8014892:	d11c      	bne.n	80148ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014894:	693b      	ldr	r3, [r7, #16]
 8014896:	685a      	ldr	r2, [r3, #4]
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801489c:	429a      	cmp	r2, r3
 801489e:	d316      	bcc.n	80148ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80148a0:	693b      	ldr	r3, [r7, #16]
 80148a2:	685a      	ldr	r2, [r3, #4]
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d20f      	bcs.n	80148ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80148ae:	2200      	movs	r2, #0
 80148b0:	2100      	movs	r1, #0
 80148b2:	68f8      	ldr	r0, [r7, #12]
 80148b4:	f001 f8d8 	bl	8015a68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	2200      	movs	r2, #0
 80148bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80148c0:	2300      	movs	r3, #0
 80148c2:	2200      	movs	r2, #0
 80148c4:	2100      	movs	r1, #0
 80148c6:	68f8      	ldr	r0, [r7, #12]
 80148c8:	f7ff fd84 	bl	80143d4 <USBD_LL_PrepareReceive>
 80148cc:	e01c      	b.n	8014908 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80148d4:	b2db      	uxtb	r3, r3
 80148d6:	2b03      	cmp	r3, #3
 80148d8:	d10f      	bne.n	80148fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80148e0:	68db      	ldr	r3, [r3, #12]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d009      	beq.n	80148fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2200      	movs	r2, #0
 80148ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80148f4:	68db      	ldr	r3, [r3, #12]
 80148f6:	68f8      	ldr	r0, [r7, #12]
 80148f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80148fa:	2180      	movs	r1, #128	@ 0x80
 80148fc:	68f8      	ldr	r0, [r7, #12]
 80148fe:	f7ff fcd7 	bl	80142b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014902:	68f8      	ldr	r0, [r7, #12]
 8014904:	f001 f902 	bl	8015b0c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801490e:	2b00      	cmp	r3, #0
 8014910:	d03a      	beq.n	8014988 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014912:	68f8      	ldr	r0, [r7, #12]
 8014914:	f7ff fe42 	bl	801459c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	2200      	movs	r2, #0
 801491c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8014920:	e032      	b.n	8014988 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014922:	7afb      	ldrb	r3, [r7, #11]
 8014924:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014928:	b2db      	uxtb	r3, r3
 801492a:	4619      	mov	r1, r3
 801492c:	68f8      	ldr	r0, [r7, #12]
 801492e:	f000 f8bf 	bl	8014ab0 <USBD_CoreFindEP>
 8014932:	4603      	mov	r3, r0
 8014934:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014936:	7dfb      	ldrb	r3, [r7, #23]
 8014938:	2bff      	cmp	r3, #255	@ 0xff
 801493a:	d025      	beq.n	8014988 <USBD_LL_DataInStage+0x15a>
 801493c:	7dfb      	ldrb	r3, [r7, #23]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d122      	bne.n	8014988 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014948:	b2db      	uxtb	r3, r3
 801494a:	2b03      	cmp	r3, #3
 801494c:	d11c      	bne.n	8014988 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801494e:	7dfa      	ldrb	r2, [r7, #23]
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	32ae      	adds	r2, #174	@ 0xae
 8014954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014958:	695b      	ldr	r3, [r3, #20]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d014      	beq.n	8014988 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801495e:	7dfa      	ldrb	r2, [r7, #23]
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014966:	7dfa      	ldrb	r2, [r7, #23]
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	32ae      	adds	r2, #174	@ 0xae
 801496c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014970:	695b      	ldr	r3, [r3, #20]
 8014972:	7afa      	ldrb	r2, [r7, #11]
 8014974:	4611      	mov	r1, r2
 8014976:	68f8      	ldr	r0, [r7, #12]
 8014978:	4798      	blx	r3
 801497a:	4603      	mov	r3, r0
 801497c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801497e:	7dbb      	ldrb	r3, [r7, #22]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d001      	beq.n	8014988 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014984:	7dbb      	ldrb	r3, [r7, #22]
 8014986:	e000      	b.n	801498a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014988:	2300      	movs	r3, #0
}
 801498a:	4618      	mov	r0, r3
 801498c:	3718      	adds	r7, #24
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}

08014992 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014992:	b580      	push	{r7, lr}
 8014994:	b084      	sub	sp, #16
 8014996:	af00      	add	r7, sp, #0
 8014998:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801499a:	2300      	movs	r3, #0
 801499c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2201      	movs	r2, #1
 80149a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	2200      	movs	r2, #0
 80149aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2200      	movs	r2, #0
 80149b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2200      	movs	r2, #0
 80149b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2200      	movs	r2, #0
 80149c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d014      	beq.n	80149f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80149d4:	685b      	ldr	r3, [r3, #4]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d00e      	beq.n	80149f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	687a      	ldr	r2, [r7, #4]
 80149e4:	6852      	ldr	r2, [r2, #4]
 80149e6:	b2d2      	uxtb	r2, r2
 80149e8:	4611      	mov	r1, r2
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	4798      	blx	r3
 80149ee:	4603      	mov	r3, r0
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d001      	beq.n	80149f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80149f4:	2303      	movs	r3, #3
 80149f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80149f8:	2340      	movs	r3, #64	@ 0x40
 80149fa:	2200      	movs	r2, #0
 80149fc:	2100      	movs	r1, #0
 80149fe:	6878      	ldr	r0, [r7, #4]
 8014a00:	f7ff fc1d 	bl	801423e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2201      	movs	r2, #1
 8014a08:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2240      	movs	r2, #64	@ 0x40
 8014a10:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014a14:	2340      	movs	r3, #64	@ 0x40
 8014a16:	2200      	movs	r2, #0
 8014a18:	2180      	movs	r1, #128	@ 0x80
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f7ff fc0f 	bl	801423e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2201      	movs	r2, #1
 8014a24:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	2240      	movs	r2, #64	@ 0x40
 8014a2a:	621a      	str	r2, [r3, #32]

  return ret;
 8014a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	3710      	adds	r7, #16
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}

08014a36 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014a36:	b480      	push	{r7}
 8014a38:	b083      	sub	sp, #12
 8014a3a:	af00      	add	r7, sp, #0
 8014a3c:	6078      	str	r0, [r7, #4]
 8014a3e:	460b      	mov	r3, r1
 8014a40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	78fa      	ldrb	r2, [r7, #3]
 8014a46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014a48:	2300      	movs	r3, #0
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	370c      	adds	r7, #12
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a54:	4770      	bx	lr

08014a56 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014a56:	b580      	push	{r7, lr}
 8014a58:	b082      	sub	sp, #8
 8014a5a:	af00      	add	r7, sp, #0
 8014a5c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014a64:	b2db      	uxtb	r3, r3
 8014a66:	2b03      	cmp	r3, #3
 8014a68:	d110      	bne.n	8014a8c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d00b      	beq.n	8014a8c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014a7a:	69db      	ldr	r3, [r3, #28]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d005      	beq.n	8014a8c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014a86:	69db      	ldr	r3, [r3, #28]
 8014a88:	6878      	ldr	r0, [r7, #4]
 8014a8a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014a8c:	2300      	movs	r3, #0
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3708      	adds	r7, #8
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}

08014a96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014a96:	b480      	push	{r7}
 8014a98:	b083      	sub	sp, #12
 8014a9a:	af00      	add	r7, sp, #0
 8014a9c:	6078      	str	r0, [r7, #4]
 8014a9e:	460b      	mov	r3, r1
 8014aa0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014aa2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	370c      	adds	r7, #12
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aae:	4770      	bx	lr

08014ab0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014ab0:	b480      	push	{r7}
 8014ab2:	b083      	sub	sp, #12
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
 8014ab8:	460b      	mov	r3, r1
 8014aba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014abc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	370c      	adds	r7, #12
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac8:	4770      	bx	lr

08014aca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8014aca:	b580      	push	{r7, lr}
 8014acc:	b086      	sub	sp, #24
 8014ace:	af00      	add	r7, sp, #0
 8014ad0:	6078      	str	r0, [r7, #4]
 8014ad2:	460b      	mov	r3, r1
 8014ad4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	885b      	ldrh	r3, [r3, #2]
 8014ae6:	b29b      	uxth	r3, r3
 8014ae8:	68fa      	ldr	r2, [r7, #12]
 8014aea:	7812      	ldrb	r2, [r2, #0]
 8014aec:	4293      	cmp	r3, r2
 8014aee:	d91f      	bls.n	8014b30 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	781b      	ldrb	r3, [r3, #0]
 8014af4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014af6:	e013      	b.n	8014b20 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014af8:	f107 030a 	add.w	r3, r7, #10
 8014afc:	4619      	mov	r1, r3
 8014afe:	6978      	ldr	r0, [r7, #20]
 8014b00:	f000 f81b 	bl	8014b3a <USBD_GetNextDesc>
 8014b04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014b06:	697b      	ldr	r3, [r7, #20]
 8014b08:	785b      	ldrb	r3, [r3, #1]
 8014b0a:	2b05      	cmp	r3, #5
 8014b0c:	d108      	bne.n	8014b20 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014b12:	693b      	ldr	r3, [r7, #16]
 8014b14:	789b      	ldrb	r3, [r3, #2]
 8014b16:	78fa      	ldrb	r2, [r7, #3]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d008      	beq.n	8014b2e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	885b      	ldrh	r3, [r3, #2]
 8014b24:	b29a      	uxth	r2, r3
 8014b26:	897b      	ldrh	r3, [r7, #10]
 8014b28:	429a      	cmp	r2, r3
 8014b2a:	d8e5      	bhi.n	8014af8 <USBD_GetEpDesc+0x2e>
 8014b2c:	e000      	b.n	8014b30 <USBD_GetEpDesc+0x66>
          break;
 8014b2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014b30:	693b      	ldr	r3, [r7, #16]
}
 8014b32:	4618      	mov	r0, r3
 8014b34:	3718      	adds	r7, #24
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}

08014b3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014b3a:	b480      	push	{r7}
 8014b3c:	b085      	sub	sp, #20
 8014b3e:	af00      	add	r7, sp, #0
 8014b40:	6078      	str	r0, [r7, #4]
 8014b42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	881b      	ldrh	r3, [r3, #0]
 8014b4c:	68fa      	ldr	r2, [r7, #12]
 8014b4e:	7812      	ldrb	r2, [r2, #0]
 8014b50:	4413      	add	r3, r2
 8014b52:	b29a      	uxth	r2, r3
 8014b54:	683b      	ldr	r3, [r7, #0]
 8014b56:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	461a      	mov	r2, r3
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	4413      	add	r3, r2
 8014b62:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014b64:	68fb      	ldr	r3, [r7, #12]
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	3714      	adds	r7, #20
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b70:	4770      	bx	lr

08014b72 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014b72:	b480      	push	{r7}
 8014b74:	b087      	sub	sp, #28
 8014b76:	af00      	add	r7, sp, #0
 8014b78:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	781b      	ldrb	r3, [r3, #0]
 8014b82:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	3301      	adds	r3, #1
 8014b88:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014b8a:	697b      	ldr	r3, [r7, #20]
 8014b8c:	781b      	ldrb	r3, [r3, #0]
 8014b8e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014b90:	8a3b      	ldrh	r3, [r7, #16]
 8014b92:	021b      	lsls	r3, r3, #8
 8014b94:	b21a      	sxth	r2, r3
 8014b96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014b9a:	4313      	orrs	r3, r2
 8014b9c:	b21b      	sxth	r3, r3
 8014b9e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014ba0:	89fb      	ldrh	r3, [r7, #14]
}
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	371c      	adds	r7, #28
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bac:	4770      	bx	lr
	...

08014bb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b084      	sub	sp, #16
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
 8014bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014bbe:	683b      	ldr	r3, [r7, #0]
 8014bc0:	781b      	ldrb	r3, [r3, #0]
 8014bc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014bc6:	2b40      	cmp	r3, #64	@ 0x40
 8014bc8:	d005      	beq.n	8014bd6 <USBD_StdDevReq+0x26>
 8014bca:	2b40      	cmp	r3, #64	@ 0x40
 8014bcc:	d857      	bhi.n	8014c7e <USBD_StdDevReq+0xce>
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d00f      	beq.n	8014bf2 <USBD_StdDevReq+0x42>
 8014bd2:	2b20      	cmp	r3, #32
 8014bd4:	d153      	bne.n	8014c7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	32ae      	adds	r2, #174	@ 0xae
 8014be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014be4:	689b      	ldr	r3, [r3, #8]
 8014be6:	6839      	ldr	r1, [r7, #0]
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	4798      	blx	r3
 8014bec:	4603      	mov	r3, r0
 8014bee:	73fb      	strb	r3, [r7, #15]
      break;
 8014bf0:	e04a      	b.n	8014c88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	785b      	ldrb	r3, [r3, #1]
 8014bf6:	2b09      	cmp	r3, #9
 8014bf8:	d83b      	bhi.n	8014c72 <USBD_StdDevReq+0xc2>
 8014bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8014c00 <USBD_StdDevReq+0x50>)
 8014bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c00:	08014c55 	.word	0x08014c55
 8014c04:	08014c69 	.word	0x08014c69
 8014c08:	08014c73 	.word	0x08014c73
 8014c0c:	08014c5f 	.word	0x08014c5f
 8014c10:	08014c73 	.word	0x08014c73
 8014c14:	08014c33 	.word	0x08014c33
 8014c18:	08014c29 	.word	0x08014c29
 8014c1c:	08014c73 	.word	0x08014c73
 8014c20:	08014c4b 	.word	0x08014c4b
 8014c24:	08014c3d 	.word	0x08014c3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014c28:	6839      	ldr	r1, [r7, #0]
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f000 fa3c 	bl	80150a8 <USBD_GetDescriptor>
          break;
 8014c30:	e024      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014c32:	6839      	ldr	r1, [r7, #0]
 8014c34:	6878      	ldr	r0, [r7, #4]
 8014c36:	f000 fba1 	bl	801537c <USBD_SetAddress>
          break;
 8014c3a:	e01f      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014c3c:	6839      	ldr	r1, [r7, #0]
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f000 fbe0 	bl	8015404 <USBD_SetConfig>
 8014c44:	4603      	mov	r3, r0
 8014c46:	73fb      	strb	r3, [r7, #15]
          break;
 8014c48:	e018      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014c4a:	6839      	ldr	r1, [r7, #0]
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f000 fc83 	bl	8015558 <USBD_GetConfig>
          break;
 8014c52:	e013      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014c54:	6839      	ldr	r1, [r7, #0]
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f000 fcb4 	bl	80155c4 <USBD_GetStatus>
          break;
 8014c5c:	e00e      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014c5e:	6839      	ldr	r1, [r7, #0]
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f000 fce3 	bl	801562c <USBD_SetFeature>
          break;
 8014c66:	e009      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014c68:	6839      	ldr	r1, [r7, #0]
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f000 fd07 	bl	801567e <USBD_ClrFeature>
          break;
 8014c70:	e004      	b.n	8014c7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014c72:	6839      	ldr	r1, [r7, #0]
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f000 fd5e 	bl	8015736 <USBD_CtlError>
          break;
 8014c7a:	bf00      	nop
      }
      break;
 8014c7c:	e004      	b.n	8014c88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014c7e:	6839      	ldr	r1, [r7, #0]
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f000 fd58 	bl	8015736 <USBD_CtlError>
      break;
 8014c86:	bf00      	nop
  }

  return ret;
 8014c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3710      	adds	r7, #16
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}
 8014c92:	bf00      	nop

08014c94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b084      	sub	sp, #16
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
 8014c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	781b      	ldrb	r3, [r3, #0]
 8014ca6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014caa:	2b40      	cmp	r3, #64	@ 0x40
 8014cac:	d005      	beq.n	8014cba <USBD_StdItfReq+0x26>
 8014cae:	2b40      	cmp	r3, #64	@ 0x40
 8014cb0:	d852      	bhi.n	8014d58 <USBD_StdItfReq+0xc4>
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d001      	beq.n	8014cba <USBD_StdItfReq+0x26>
 8014cb6:	2b20      	cmp	r3, #32
 8014cb8:	d14e      	bne.n	8014d58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	3b01      	subs	r3, #1
 8014cc4:	2b02      	cmp	r3, #2
 8014cc6:	d840      	bhi.n	8014d4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014cc8:	683b      	ldr	r3, [r7, #0]
 8014cca:	889b      	ldrh	r3, [r3, #4]
 8014ccc:	b2db      	uxtb	r3, r3
 8014cce:	2b01      	cmp	r3, #1
 8014cd0:	d836      	bhi.n	8014d40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	889b      	ldrh	r3, [r3, #4]
 8014cd6:	b2db      	uxtb	r3, r3
 8014cd8:	4619      	mov	r1, r3
 8014cda:	6878      	ldr	r0, [r7, #4]
 8014cdc:	f7ff fedb 	bl	8014a96 <USBD_CoreFindIF>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014ce4:	7bbb      	ldrb	r3, [r7, #14]
 8014ce6:	2bff      	cmp	r3, #255	@ 0xff
 8014ce8:	d01d      	beq.n	8014d26 <USBD_StdItfReq+0x92>
 8014cea:	7bbb      	ldrb	r3, [r7, #14]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d11a      	bne.n	8014d26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014cf0:	7bba      	ldrb	r2, [r7, #14]
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	32ae      	adds	r2, #174	@ 0xae
 8014cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cfa:	689b      	ldr	r3, [r3, #8]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d00f      	beq.n	8014d20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014d00:	7bba      	ldrb	r2, [r7, #14]
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014d08:	7bba      	ldrb	r2, [r7, #14]
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	32ae      	adds	r2, #174	@ 0xae
 8014d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d12:	689b      	ldr	r3, [r3, #8]
 8014d14:	6839      	ldr	r1, [r7, #0]
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	4798      	blx	r3
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014d1e:	e004      	b.n	8014d2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014d20:	2303      	movs	r3, #3
 8014d22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014d24:	e001      	b.n	8014d2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014d26:	2303      	movs	r3, #3
 8014d28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	88db      	ldrh	r3, [r3, #6]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d110      	bne.n	8014d54 <USBD_StdItfReq+0xc0>
 8014d32:	7bfb      	ldrb	r3, [r7, #15]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d10d      	bne.n	8014d54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f000 fed4 	bl	8015ae6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014d3e:	e009      	b.n	8014d54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014d40:	6839      	ldr	r1, [r7, #0]
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f000 fcf7 	bl	8015736 <USBD_CtlError>
          break;
 8014d48:	e004      	b.n	8014d54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014d4a:	6839      	ldr	r1, [r7, #0]
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f000 fcf2 	bl	8015736 <USBD_CtlError>
          break;
 8014d52:	e000      	b.n	8014d56 <USBD_StdItfReq+0xc2>
          break;
 8014d54:	bf00      	nop
      }
      break;
 8014d56:	e004      	b.n	8014d62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014d58:	6839      	ldr	r1, [r7, #0]
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f000 fceb 	bl	8015736 <USBD_CtlError>
      break;
 8014d60:	bf00      	nop
  }

  return ret;
 8014d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d64:	4618      	mov	r0, r3
 8014d66:	3710      	adds	r7, #16
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}

08014d6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b084      	sub	sp, #16
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014d76:	2300      	movs	r3, #0
 8014d78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	889b      	ldrh	r3, [r3, #4]
 8014d7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	781b      	ldrb	r3, [r3, #0]
 8014d84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014d88:	2b40      	cmp	r3, #64	@ 0x40
 8014d8a:	d007      	beq.n	8014d9c <USBD_StdEPReq+0x30>
 8014d8c:	2b40      	cmp	r3, #64	@ 0x40
 8014d8e:	f200 817f 	bhi.w	8015090 <USBD_StdEPReq+0x324>
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d02a      	beq.n	8014dec <USBD_StdEPReq+0x80>
 8014d96:	2b20      	cmp	r3, #32
 8014d98:	f040 817a 	bne.w	8015090 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014d9c:	7bbb      	ldrb	r3, [r7, #14]
 8014d9e:	4619      	mov	r1, r3
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f7ff fe85 	bl	8014ab0 <USBD_CoreFindEP>
 8014da6:	4603      	mov	r3, r0
 8014da8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014daa:	7b7b      	ldrb	r3, [r7, #13]
 8014dac:	2bff      	cmp	r3, #255	@ 0xff
 8014dae:	f000 8174 	beq.w	801509a <USBD_StdEPReq+0x32e>
 8014db2:	7b7b      	ldrb	r3, [r7, #13]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	f040 8170 	bne.w	801509a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014dba:	7b7a      	ldrb	r2, [r7, #13]
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014dc2:	7b7a      	ldrb	r2, [r7, #13]
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	32ae      	adds	r2, #174	@ 0xae
 8014dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dcc:	689b      	ldr	r3, [r3, #8]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	f000 8163 	beq.w	801509a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014dd4:	7b7a      	ldrb	r2, [r7, #13]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	32ae      	adds	r2, #174	@ 0xae
 8014dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dde:	689b      	ldr	r3, [r3, #8]
 8014de0:	6839      	ldr	r1, [r7, #0]
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	4798      	blx	r3
 8014de6:	4603      	mov	r3, r0
 8014de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014dea:	e156      	b.n	801509a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	785b      	ldrb	r3, [r3, #1]
 8014df0:	2b03      	cmp	r3, #3
 8014df2:	d008      	beq.n	8014e06 <USBD_StdEPReq+0x9a>
 8014df4:	2b03      	cmp	r3, #3
 8014df6:	f300 8145 	bgt.w	8015084 <USBD_StdEPReq+0x318>
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	f000 809b 	beq.w	8014f36 <USBD_StdEPReq+0x1ca>
 8014e00:	2b01      	cmp	r3, #1
 8014e02:	d03c      	beq.n	8014e7e <USBD_StdEPReq+0x112>
 8014e04:	e13e      	b.n	8015084 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e0c:	b2db      	uxtb	r3, r3
 8014e0e:	2b02      	cmp	r3, #2
 8014e10:	d002      	beq.n	8014e18 <USBD_StdEPReq+0xac>
 8014e12:	2b03      	cmp	r3, #3
 8014e14:	d016      	beq.n	8014e44 <USBD_StdEPReq+0xd8>
 8014e16:	e02c      	b.n	8014e72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014e18:	7bbb      	ldrb	r3, [r7, #14]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d00d      	beq.n	8014e3a <USBD_StdEPReq+0xce>
 8014e1e:	7bbb      	ldrb	r3, [r7, #14]
 8014e20:	2b80      	cmp	r3, #128	@ 0x80
 8014e22:	d00a      	beq.n	8014e3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014e24:	7bbb      	ldrb	r3, [r7, #14]
 8014e26:	4619      	mov	r1, r3
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f7ff fa41 	bl	80142b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014e2e:	2180      	movs	r1, #128	@ 0x80
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f7ff fa3d 	bl	80142b0 <USBD_LL_StallEP>
 8014e36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014e38:	e020      	b.n	8014e7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014e3a:	6839      	ldr	r1, [r7, #0]
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f000 fc7a 	bl	8015736 <USBD_CtlError>
              break;
 8014e42:	e01b      	b.n	8014e7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	885b      	ldrh	r3, [r3, #2]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d10e      	bne.n	8014e6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014e4c:	7bbb      	ldrb	r3, [r7, #14]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d00b      	beq.n	8014e6a <USBD_StdEPReq+0xfe>
 8014e52:	7bbb      	ldrb	r3, [r7, #14]
 8014e54:	2b80      	cmp	r3, #128	@ 0x80
 8014e56:	d008      	beq.n	8014e6a <USBD_StdEPReq+0xfe>
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	88db      	ldrh	r3, [r3, #6]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d104      	bne.n	8014e6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014e60:	7bbb      	ldrb	r3, [r7, #14]
 8014e62:	4619      	mov	r1, r3
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f7ff fa23 	bl	80142b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f000 fe3b 	bl	8015ae6 <USBD_CtlSendStatus>

              break;
 8014e70:	e004      	b.n	8014e7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014e72:	6839      	ldr	r1, [r7, #0]
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f000 fc5e 	bl	8015736 <USBD_CtlError>
              break;
 8014e7a:	bf00      	nop
          }
          break;
 8014e7c:	e107      	b.n	801508e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014e84:	b2db      	uxtb	r3, r3
 8014e86:	2b02      	cmp	r3, #2
 8014e88:	d002      	beq.n	8014e90 <USBD_StdEPReq+0x124>
 8014e8a:	2b03      	cmp	r3, #3
 8014e8c:	d016      	beq.n	8014ebc <USBD_StdEPReq+0x150>
 8014e8e:	e04b      	b.n	8014f28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014e90:	7bbb      	ldrb	r3, [r7, #14]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d00d      	beq.n	8014eb2 <USBD_StdEPReq+0x146>
 8014e96:	7bbb      	ldrb	r3, [r7, #14]
 8014e98:	2b80      	cmp	r3, #128	@ 0x80
 8014e9a:	d00a      	beq.n	8014eb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014e9c:	7bbb      	ldrb	r3, [r7, #14]
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f7ff fa05 	bl	80142b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014ea6:	2180      	movs	r1, #128	@ 0x80
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f7ff fa01 	bl	80142b0 <USBD_LL_StallEP>
 8014eae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014eb0:	e040      	b.n	8014f34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014eb2:	6839      	ldr	r1, [r7, #0]
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f000 fc3e 	bl	8015736 <USBD_CtlError>
              break;
 8014eba:	e03b      	b.n	8014f34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	885b      	ldrh	r3, [r3, #2]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d136      	bne.n	8014f32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014ec4:	7bbb      	ldrb	r3, [r7, #14]
 8014ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d004      	beq.n	8014ed8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014ece:	7bbb      	ldrb	r3, [r7, #14]
 8014ed0:	4619      	mov	r1, r3
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	f7ff fa05 	bl	80142e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f000 fe04 	bl	8015ae6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014ede:	7bbb      	ldrb	r3, [r7, #14]
 8014ee0:	4619      	mov	r1, r3
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	f7ff fde4 	bl	8014ab0 <USBD_CoreFindEP>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014eec:	7b7b      	ldrb	r3, [r7, #13]
 8014eee:	2bff      	cmp	r3, #255	@ 0xff
 8014ef0:	d01f      	beq.n	8014f32 <USBD_StdEPReq+0x1c6>
 8014ef2:	7b7b      	ldrb	r3, [r7, #13]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d11c      	bne.n	8014f32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014ef8:	7b7a      	ldrb	r2, [r7, #13]
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014f00:	7b7a      	ldrb	r2, [r7, #13]
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	32ae      	adds	r2, #174	@ 0xae
 8014f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f0a:	689b      	ldr	r3, [r3, #8]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d010      	beq.n	8014f32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014f10:	7b7a      	ldrb	r2, [r7, #13]
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	32ae      	adds	r2, #174	@ 0xae
 8014f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f1a:	689b      	ldr	r3, [r3, #8]
 8014f1c:	6839      	ldr	r1, [r7, #0]
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	4798      	blx	r3
 8014f22:	4603      	mov	r3, r0
 8014f24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014f26:	e004      	b.n	8014f32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014f28:	6839      	ldr	r1, [r7, #0]
 8014f2a:	6878      	ldr	r0, [r7, #4]
 8014f2c:	f000 fc03 	bl	8015736 <USBD_CtlError>
              break;
 8014f30:	e000      	b.n	8014f34 <USBD_StdEPReq+0x1c8>
              break;
 8014f32:	bf00      	nop
          }
          break;
 8014f34:	e0ab      	b.n	801508e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014f3c:	b2db      	uxtb	r3, r3
 8014f3e:	2b02      	cmp	r3, #2
 8014f40:	d002      	beq.n	8014f48 <USBD_StdEPReq+0x1dc>
 8014f42:	2b03      	cmp	r3, #3
 8014f44:	d032      	beq.n	8014fac <USBD_StdEPReq+0x240>
 8014f46:	e097      	b.n	8015078 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014f48:	7bbb      	ldrb	r3, [r7, #14]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d007      	beq.n	8014f5e <USBD_StdEPReq+0x1f2>
 8014f4e:	7bbb      	ldrb	r3, [r7, #14]
 8014f50:	2b80      	cmp	r3, #128	@ 0x80
 8014f52:	d004      	beq.n	8014f5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014f54:	6839      	ldr	r1, [r7, #0]
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	f000 fbed 	bl	8015736 <USBD_CtlError>
                break;
 8014f5c:	e091      	b.n	8015082 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	da0b      	bge.n	8014f7e <USBD_StdEPReq+0x212>
 8014f66:	7bbb      	ldrb	r3, [r7, #14]
 8014f68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014f6c:	4613      	mov	r3, r2
 8014f6e:	009b      	lsls	r3, r3, #2
 8014f70:	4413      	add	r3, r2
 8014f72:	009b      	lsls	r3, r3, #2
 8014f74:	3310      	adds	r3, #16
 8014f76:	687a      	ldr	r2, [r7, #4]
 8014f78:	4413      	add	r3, r2
 8014f7a:	3304      	adds	r3, #4
 8014f7c:	e00b      	b.n	8014f96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014f7e:	7bbb      	ldrb	r3, [r7, #14]
 8014f80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014f84:	4613      	mov	r3, r2
 8014f86:	009b      	lsls	r3, r3, #2
 8014f88:	4413      	add	r3, r2
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014f90:	687a      	ldr	r2, [r7, #4]
 8014f92:	4413      	add	r3, r2
 8014f94:	3304      	adds	r3, #4
 8014f96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	2202      	movs	r2, #2
 8014fa2:	4619      	mov	r1, r3
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f000 fd44 	bl	8015a32 <USBD_CtlSendData>
              break;
 8014faa:	e06a      	b.n	8015082 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	da11      	bge.n	8014fd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014fb4:	7bbb      	ldrb	r3, [r7, #14]
 8014fb6:	f003 020f 	and.w	r2, r3, #15
 8014fba:	6879      	ldr	r1, [r7, #4]
 8014fbc:	4613      	mov	r3, r2
 8014fbe:	009b      	lsls	r3, r3, #2
 8014fc0:	4413      	add	r3, r2
 8014fc2:	009b      	lsls	r3, r3, #2
 8014fc4:	440b      	add	r3, r1
 8014fc6:	3324      	adds	r3, #36	@ 0x24
 8014fc8:	881b      	ldrh	r3, [r3, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d117      	bne.n	8014ffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014fce:	6839      	ldr	r1, [r7, #0]
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f000 fbb0 	bl	8015736 <USBD_CtlError>
                  break;
 8014fd6:	e054      	b.n	8015082 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014fd8:	7bbb      	ldrb	r3, [r7, #14]
 8014fda:	f003 020f 	and.w	r2, r3, #15
 8014fde:	6879      	ldr	r1, [r7, #4]
 8014fe0:	4613      	mov	r3, r2
 8014fe2:	009b      	lsls	r3, r3, #2
 8014fe4:	4413      	add	r3, r2
 8014fe6:	009b      	lsls	r3, r3, #2
 8014fe8:	440b      	add	r3, r1
 8014fea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014fee:	881b      	ldrh	r3, [r3, #0]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d104      	bne.n	8014ffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014ff4:	6839      	ldr	r1, [r7, #0]
 8014ff6:	6878      	ldr	r0, [r7, #4]
 8014ff8:	f000 fb9d 	bl	8015736 <USBD_CtlError>
                  break;
 8014ffc:	e041      	b.n	8015082 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015002:	2b00      	cmp	r3, #0
 8015004:	da0b      	bge.n	801501e <USBD_StdEPReq+0x2b2>
 8015006:	7bbb      	ldrb	r3, [r7, #14]
 8015008:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801500c:	4613      	mov	r3, r2
 801500e:	009b      	lsls	r3, r3, #2
 8015010:	4413      	add	r3, r2
 8015012:	009b      	lsls	r3, r3, #2
 8015014:	3310      	adds	r3, #16
 8015016:	687a      	ldr	r2, [r7, #4]
 8015018:	4413      	add	r3, r2
 801501a:	3304      	adds	r3, #4
 801501c:	e00b      	b.n	8015036 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801501e:	7bbb      	ldrb	r3, [r7, #14]
 8015020:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015024:	4613      	mov	r3, r2
 8015026:	009b      	lsls	r3, r3, #2
 8015028:	4413      	add	r3, r2
 801502a:	009b      	lsls	r3, r3, #2
 801502c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8015030:	687a      	ldr	r2, [r7, #4]
 8015032:	4413      	add	r3, r2
 8015034:	3304      	adds	r3, #4
 8015036:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015038:	7bbb      	ldrb	r3, [r7, #14]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d002      	beq.n	8015044 <USBD_StdEPReq+0x2d8>
 801503e:	7bbb      	ldrb	r3, [r7, #14]
 8015040:	2b80      	cmp	r3, #128	@ 0x80
 8015042:	d103      	bne.n	801504c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	2200      	movs	r2, #0
 8015048:	601a      	str	r2, [r3, #0]
 801504a:	e00e      	b.n	801506a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801504c:	7bbb      	ldrb	r3, [r7, #14]
 801504e:	4619      	mov	r1, r3
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f7ff f95f 	bl	8014314 <USBD_LL_IsStallEP>
 8015056:	4603      	mov	r3, r0
 8015058:	2b00      	cmp	r3, #0
 801505a:	d003      	beq.n	8015064 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801505c:	68bb      	ldr	r3, [r7, #8]
 801505e:	2201      	movs	r2, #1
 8015060:	601a      	str	r2, [r3, #0]
 8015062:	e002      	b.n	801506a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015064:	68bb      	ldr	r3, [r7, #8]
 8015066:	2200      	movs	r2, #0
 8015068:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	2202      	movs	r2, #2
 801506e:	4619      	mov	r1, r3
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f000 fcde 	bl	8015a32 <USBD_CtlSendData>
              break;
 8015076:	e004      	b.n	8015082 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015078:	6839      	ldr	r1, [r7, #0]
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f000 fb5b 	bl	8015736 <USBD_CtlError>
              break;
 8015080:	bf00      	nop
          }
          break;
 8015082:	e004      	b.n	801508e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015084:	6839      	ldr	r1, [r7, #0]
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f000 fb55 	bl	8015736 <USBD_CtlError>
          break;
 801508c:	bf00      	nop
      }
      break;
 801508e:	e005      	b.n	801509c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015090:	6839      	ldr	r1, [r7, #0]
 8015092:	6878      	ldr	r0, [r7, #4]
 8015094:	f000 fb4f 	bl	8015736 <USBD_CtlError>
      break;
 8015098:	e000      	b.n	801509c <USBD_StdEPReq+0x330>
      break;
 801509a:	bf00      	nop
  }

  return ret;
 801509c:	7bfb      	ldrb	r3, [r7, #15]
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3710      	adds	r7, #16
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
	...

080150a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b084      	sub	sp, #16
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80150b2:	2300      	movs	r3, #0
 80150b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80150b6:	2300      	movs	r3, #0
 80150b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80150ba:	2300      	movs	r3, #0
 80150bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	885b      	ldrh	r3, [r3, #2]
 80150c2:	0a1b      	lsrs	r3, r3, #8
 80150c4:	b29b      	uxth	r3, r3
 80150c6:	3b01      	subs	r3, #1
 80150c8:	2b06      	cmp	r3, #6
 80150ca:	f200 8128 	bhi.w	801531e <USBD_GetDescriptor+0x276>
 80150ce:	a201      	add	r2, pc, #4	@ (adr r2, 80150d4 <USBD_GetDescriptor+0x2c>)
 80150d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150d4:	080150f1 	.word	0x080150f1
 80150d8:	08015109 	.word	0x08015109
 80150dc:	08015149 	.word	0x08015149
 80150e0:	0801531f 	.word	0x0801531f
 80150e4:	0801531f 	.word	0x0801531f
 80150e8:	080152bf 	.word	0x080152bf
 80150ec:	080152eb 	.word	0x080152eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	687a      	ldr	r2, [r7, #4]
 80150fa:	7c12      	ldrb	r2, [r2, #16]
 80150fc:	f107 0108 	add.w	r1, r7, #8
 8015100:	4610      	mov	r0, r2
 8015102:	4798      	blx	r3
 8015104:	60f8      	str	r0, [r7, #12]
      break;
 8015106:	e112      	b.n	801532e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	7c1b      	ldrb	r3, [r3, #16]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d10d      	bne.n	801512c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015118:	f107 0208 	add.w	r2, r7, #8
 801511c:	4610      	mov	r0, r2
 801511e:	4798      	blx	r3
 8015120:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	3301      	adds	r3, #1
 8015126:	2202      	movs	r2, #2
 8015128:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801512a:	e100      	b.n	801532e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8015132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015134:	f107 0208 	add.w	r2, r7, #8
 8015138:	4610      	mov	r0, r2
 801513a:	4798      	blx	r3
 801513c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	3301      	adds	r3, #1
 8015142:	2202      	movs	r2, #2
 8015144:	701a      	strb	r2, [r3, #0]
      break;
 8015146:	e0f2      	b.n	801532e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	885b      	ldrh	r3, [r3, #2]
 801514c:	b2db      	uxtb	r3, r3
 801514e:	2b05      	cmp	r3, #5
 8015150:	f200 80ac 	bhi.w	80152ac <USBD_GetDescriptor+0x204>
 8015154:	a201      	add	r2, pc, #4	@ (adr r2, 801515c <USBD_GetDescriptor+0xb4>)
 8015156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801515a:	bf00      	nop
 801515c:	08015175 	.word	0x08015175
 8015160:	080151a9 	.word	0x080151a9
 8015164:	080151dd 	.word	0x080151dd
 8015168:	08015211 	.word	0x08015211
 801516c:	08015245 	.word	0x08015245
 8015170:	08015279 	.word	0x08015279
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801517a:	685b      	ldr	r3, [r3, #4]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d00b      	beq.n	8015198 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015186:	685b      	ldr	r3, [r3, #4]
 8015188:	687a      	ldr	r2, [r7, #4]
 801518a:	7c12      	ldrb	r2, [r2, #16]
 801518c:	f107 0108 	add.w	r1, r7, #8
 8015190:	4610      	mov	r0, r2
 8015192:	4798      	blx	r3
 8015194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015196:	e091      	b.n	80152bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015198:	6839      	ldr	r1, [r7, #0]
 801519a:	6878      	ldr	r0, [r7, #4]
 801519c:	f000 facb 	bl	8015736 <USBD_CtlError>
            err++;
 80151a0:	7afb      	ldrb	r3, [r7, #11]
 80151a2:	3301      	adds	r3, #1
 80151a4:	72fb      	strb	r3, [r7, #11]
          break;
 80151a6:	e089      	b.n	80152bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80151ae:	689b      	ldr	r3, [r3, #8]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d00b      	beq.n	80151cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80151ba:	689b      	ldr	r3, [r3, #8]
 80151bc:	687a      	ldr	r2, [r7, #4]
 80151be:	7c12      	ldrb	r2, [r2, #16]
 80151c0:	f107 0108 	add.w	r1, r7, #8
 80151c4:	4610      	mov	r0, r2
 80151c6:	4798      	blx	r3
 80151c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80151ca:	e077      	b.n	80152bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80151cc:	6839      	ldr	r1, [r7, #0]
 80151ce:	6878      	ldr	r0, [r7, #4]
 80151d0:	f000 fab1 	bl	8015736 <USBD_CtlError>
            err++;
 80151d4:	7afb      	ldrb	r3, [r7, #11]
 80151d6:	3301      	adds	r3, #1
 80151d8:	72fb      	strb	r3, [r7, #11]
          break;
 80151da:	e06f      	b.n	80152bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80151e2:	68db      	ldr	r3, [r3, #12]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d00b      	beq.n	8015200 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80151ee:	68db      	ldr	r3, [r3, #12]
 80151f0:	687a      	ldr	r2, [r7, #4]
 80151f2:	7c12      	ldrb	r2, [r2, #16]
 80151f4:	f107 0108 	add.w	r1, r7, #8
 80151f8:	4610      	mov	r0, r2
 80151fa:	4798      	blx	r3
 80151fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80151fe:	e05d      	b.n	80152bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015200:	6839      	ldr	r1, [r7, #0]
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f000 fa97 	bl	8015736 <USBD_CtlError>
            err++;
 8015208:	7afb      	ldrb	r3, [r7, #11]
 801520a:	3301      	adds	r3, #1
 801520c:	72fb      	strb	r3, [r7, #11]
          break;
 801520e:	e055      	b.n	80152bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015216:	691b      	ldr	r3, [r3, #16]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d00b      	beq.n	8015234 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015222:	691b      	ldr	r3, [r3, #16]
 8015224:	687a      	ldr	r2, [r7, #4]
 8015226:	7c12      	ldrb	r2, [r2, #16]
 8015228:	f107 0108 	add.w	r1, r7, #8
 801522c:	4610      	mov	r0, r2
 801522e:	4798      	blx	r3
 8015230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015232:	e043      	b.n	80152bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015234:	6839      	ldr	r1, [r7, #0]
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	f000 fa7d 	bl	8015736 <USBD_CtlError>
            err++;
 801523c:	7afb      	ldrb	r3, [r7, #11]
 801523e:	3301      	adds	r3, #1
 8015240:	72fb      	strb	r3, [r7, #11]
          break;
 8015242:	e03b      	b.n	80152bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801524a:	695b      	ldr	r3, [r3, #20]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d00b      	beq.n	8015268 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8015256:	695b      	ldr	r3, [r3, #20]
 8015258:	687a      	ldr	r2, [r7, #4]
 801525a:	7c12      	ldrb	r2, [r2, #16]
 801525c:	f107 0108 	add.w	r1, r7, #8
 8015260:	4610      	mov	r0, r2
 8015262:	4798      	blx	r3
 8015264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015266:	e029      	b.n	80152bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015268:	6839      	ldr	r1, [r7, #0]
 801526a:	6878      	ldr	r0, [r7, #4]
 801526c:	f000 fa63 	bl	8015736 <USBD_CtlError>
            err++;
 8015270:	7afb      	ldrb	r3, [r7, #11]
 8015272:	3301      	adds	r3, #1
 8015274:	72fb      	strb	r3, [r7, #11]
          break;
 8015276:	e021      	b.n	80152bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801527e:	699b      	ldr	r3, [r3, #24]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d00b      	beq.n	801529c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801528a:	699b      	ldr	r3, [r3, #24]
 801528c:	687a      	ldr	r2, [r7, #4]
 801528e:	7c12      	ldrb	r2, [r2, #16]
 8015290:	f107 0108 	add.w	r1, r7, #8
 8015294:	4610      	mov	r0, r2
 8015296:	4798      	blx	r3
 8015298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801529a:	e00f      	b.n	80152bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801529c:	6839      	ldr	r1, [r7, #0]
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f000 fa49 	bl	8015736 <USBD_CtlError>
            err++;
 80152a4:	7afb      	ldrb	r3, [r7, #11]
 80152a6:	3301      	adds	r3, #1
 80152a8:	72fb      	strb	r3, [r7, #11]
          break;
 80152aa:	e007      	b.n	80152bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80152ac:	6839      	ldr	r1, [r7, #0]
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f000 fa41 	bl	8015736 <USBD_CtlError>
          err++;
 80152b4:	7afb      	ldrb	r3, [r7, #11]
 80152b6:	3301      	adds	r3, #1
 80152b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80152ba:	bf00      	nop
      }
      break;
 80152bc:	e037      	b.n	801532e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	7c1b      	ldrb	r3, [r3, #16]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d109      	bne.n	80152da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80152ce:	f107 0208 	add.w	r2, r7, #8
 80152d2:	4610      	mov	r0, r2
 80152d4:	4798      	blx	r3
 80152d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80152d8:	e029      	b.n	801532e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80152da:	6839      	ldr	r1, [r7, #0]
 80152dc:	6878      	ldr	r0, [r7, #4]
 80152de:	f000 fa2a 	bl	8015736 <USBD_CtlError>
        err++;
 80152e2:	7afb      	ldrb	r3, [r7, #11]
 80152e4:	3301      	adds	r3, #1
 80152e6:	72fb      	strb	r3, [r7, #11]
      break;
 80152e8:	e021      	b.n	801532e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	7c1b      	ldrb	r3, [r3, #16]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d10d      	bne.n	801530e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80152f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152fa:	f107 0208 	add.w	r2, r7, #8
 80152fe:	4610      	mov	r0, r2
 8015300:	4798      	blx	r3
 8015302:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	3301      	adds	r3, #1
 8015308:	2207      	movs	r2, #7
 801530a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801530c:	e00f      	b.n	801532e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801530e:	6839      	ldr	r1, [r7, #0]
 8015310:	6878      	ldr	r0, [r7, #4]
 8015312:	f000 fa10 	bl	8015736 <USBD_CtlError>
        err++;
 8015316:	7afb      	ldrb	r3, [r7, #11]
 8015318:	3301      	adds	r3, #1
 801531a:	72fb      	strb	r3, [r7, #11]
      break;
 801531c:	e007      	b.n	801532e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801531e:	6839      	ldr	r1, [r7, #0]
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f000 fa08 	bl	8015736 <USBD_CtlError>
      err++;
 8015326:	7afb      	ldrb	r3, [r7, #11]
 8015328:	3301      	adds	r3, #1
 801532a:	72fb      	strb	r3, [r7, #11]
      break;
 801532c:	bf00      	nop
  }

  if (err != 0U)
 801532e:	7afb      	ldrb	r3, [r7, #11]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d11e      	bne.n	8015372 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	88db      	ldrh	r3, [r3, #6]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d016      	beq.n	801536a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801533c:	893b      	ldrh	r3, [r7, #8]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d00e      	beq.n	8015360 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	88da      	ldrh	r2, [r3, #6]
 8015346:	893b      	ldrh	r3, [r7, #8]
 8015348:	4293      	cmp	r3, r2
 801534a:	bf28      	it	cs
 801534c:	4613      	movcs	r3, r2
 801534e:	b29b      	uxth	r3, r3
 8015350:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015352:	893b      	ldrh	r3, [r7, #8]
 8015354:	461a      	mov	r2, r3
 8015356:	68f9      	ldr	r1, [r7, #12]
 8015358:	6878      	ldr	r0, [r7, #4]
 801535a:	f000 fb6a 	bl	8015a32 <USBD_CtlSendData>
 801535e:	e009      	b.n	8015374 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015360:	6839      	ldr	r1, [r7, #0]
 8015362:	6878      	ldr	r0, [r7, #4]
 8015364:	f000 f9e7 	bl	8015736 <USBD_CtlError>
 8015368:	e004      	b.n	8015374 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f000 fbbb 	bl	8015ae6 <USBD_CtlSendStatus>
 8015370:	e000      	b.n	8015374 <USBD_GetDescriptor+0x2cc>
    return;
 8015372:	bf00      	nop
  }
}
 8015374:	3710      	adds	r7, #16
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}
 801537a:	bf00      	nop

0801537c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b084      	sub	sp, #16
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	889b      	ldrh	r3, [r3, #4]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d131      	bne.n	80153f2 <USBD_SetAddress+0x76>
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	88db      	ldrh	r3, [r3, #6]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d12d      	bne.n	80153f2 <USBD_SetAddress+0x76>
 8015396:	683b      	ldr	r3, [r7, #0]
 8015398:	885b      	ldrh	r3, [r3, #2]
 801539a:	2b7f      	cmp	r3, #127	@ 0x7f
 801539c:	d829      	bhi.n	80153f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801539e:	683b      	ldr	r3, [r7, #0]
 80153a0:	885b      	ldrh	r3, [r3, #2]
 80153a2:	b2db      	uxtb	r3, r3
 80153a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80153a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80153b0:	b2db      	uxtb	r3, r3
 80153b2:	2b03      	cmp	r3, #3
 80153b4:	d104      	bne.n	80153c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80153b6:	6839      	ldr	r1, [r7, #0]
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f000 f9bc 	bl	8015736 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153be:	e01d      	b.n	80153fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	7bfa      	ldrb	r2, [r7, #15]
 80153c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80153c8:	7bfb      	ldrb	r3, [r7, #15]
 80153ca:	4619      	mov	r1, r3
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f7fe ffcd 	bl	801436c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80153d2:	6878      	ldr	r0, [r7, #4]
 80153d4:	f000 fb87 	bl	8015ae6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80153d8:	7bfb      	ldrb	r3, [r7, #15]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d004      	beq.n	80153e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2202      	movs	r2, #2
 80153e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153e6:	e009      	b.n	80153fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	2201      	movs	r2, #1
 80153ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153f0:	e004      	b.n	80153fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80153f2:	6839      	ldr	r1, [r7, #0]
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f000 f99e 	bl	8015736 <USBD_CtlError>
  }
}
 80153fa:	bf00      	nop
 80153fc:	bf00      	nop
 80153fe:	3710      	adds	r7, #16
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}

08015404 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b084      	sub	sp, #16
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
 801540c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801540e:	2300      	movs	r3, #0
 8015410:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	885b      	ldrh	r3, [r3, #2]
 8015416:	b2da      	uxtb	r2, r3
 8015418:	4b4e      	ldr	r3, [pc, #312]	@ (8015554 <USBD_SetConfig+0x150>)
 801541a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801541c:	4b4d      	ldr	r3, [pc, #308]	@ (8015554 <USBD_SetConfig+0x150>)
 801541e:	781b      	ldrb	r3, [r3, #0]
 8015420:	2b01      	cmp	r3, #1
 8015422:	d905      	bls.n	8015430 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015424:	6839      	ldr	r1, [r7, #0]
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f000 f985 	bl	8015736 <USBD_CtlError>
    return USBD_FAIL;
 801542c:	2303      	movs	r3, #3
 801542e:	e08c      	b.n	801554a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015436:	b2db      	uxtb	r3, r3
 8015438:	2b02      	cmp	r3, #2
 801543a:	d002      	beq.n	8015442 <USBD_SetConfig+0x3e>
 801543c:	2b03      	cmp	r3, #3
 801543e:	d029      	beq.n	8015494 <USBD_SetConfig+0x90>
 8015440:	e075      	b.n	801552e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015442:	4b44      	ldr	r3, [pc, #272]	@ (8015554 <USBD_SetConfig+0x150>)
 8015444:	781b      	ldrb	r3, [r3, #0]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d020      	beq.n	801548c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801544a:	4b42      	ldr	r3, [pc, #264]	@ (8015554 <USBD_SetConfig+0x150>)
 801544c:	781b      	ldrb	r3, [r3, #0]
 801544e:	461a      	mov	r2, r3
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015454:	4b3f      	ldr	r3, [pc, #252]	@ (8015554 <USBD_SetConfig+0x150>)
 8015456:	781b      	ldrb	r3, [r3, #0]
 8015458:	4619      	mov	r1, r3
 801545a:	6878      	ldr	r0, [r7, #4]
 801545c:	f7ff f8a9 	bl	80145b2 <USBD_SetClassConfig>
 8015460:	4603      	mov	r3, r0
 8015462:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015464:	7bfb      	ldrb	r3, [r7, #15]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d008      	beq.n	801547c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801546a:	6839      	ldr	r1, [r7, #0]
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f000 f962 	bl	8015736 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	2202      	movs	r2, #2
 8015476:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801547a:	e065      	b.n	8015548 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801547c:	6878      	ldr	r0, [r7, #4]
 801547e:	f000 fb32 	bl	8015ae6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2203      	movs	r2, #3
 8015486:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801548a:	e05d      	b.n	8015548 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801548c:	6878      	ldr	r0, [r7, #4]
 801548e:	f000 fb2a 	bl	8015ae6 <USBD_CtlSendStatus>
      break;
 8015492:	e059      	b.n	8015548 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015494:	4b2f      	ldr	r3, [pc, #188]	@ (8015554 <USBD_SetConfig+0x150>)
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d112      	bne.n	80154c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	2202      	movs	r2, #2
 80154a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80154a4:	4b2b      	ldr	r3, [pc, #172]	@ (8015554 <USBD_SetConfig+0x150>)
 80154a6:	781b      	ldrb	r3, [r3, #0]
 80154a8:	461a      	mov	r2, r3
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80154ae:	4b29      	ldr	r3, [pc, #164]	@ (8015554 <USBD_SetConfig+0x150>)
 80154b0:	781b      	ldrb	r3, [r3, #0]
 80154b2:	4619      	mov	r1, r3
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f7ff f898 	bl	80145ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	f000 fb13 	bl	8015ae6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80154c0:	e042      	b.n	8015548 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80154c2:	4b24      	ldr	r3, [pc, #144]	@ (8015554 <USBD_SetConfig+0x150>)
 80154c4:	781b      	ldrb	r3, [r3, #0]
 80154c6:	461a      	mov	r2, r3
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	685b      	ldr	r3, [r3, #4]
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d02a      	beq.n	8015526 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	685b      	ldr	r3, [r3, #4]
 80154d4:	b2db      	uxtb	r3, r3
 80154d6:	4619      	mov	r1, r3
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	f7ff f886 	bl	80145ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80154de:	4b1d      	ldr	r3, [pc, #116]	@ (8015554 <USBD_SetConfig+0x150>)
 80154e0:	781b      	ldrb	r3, [r3, #0]
 80154e2:	461a      	mov	r2, r3
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80154e8:	4b1a      	ldr	r3, [pc, #104]	@ (8015554 <USBD_SetConfig+0x150>)
 80154ea:	781b      	ldrb	r3, [r3, #0]
 80154ec:	4619      	mov	r1, r3
 80154ee:	6878      	ldr	r0, [r7, #4]
 80154f0:	f7ff f85f 	bl	80145b2 <USBD_SetClassConfig>
 80154f4:	4603      	mov	r3, r0
 80154f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80154f8:	7bfb      	ldrb	r3, [r7, #15]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d00f      	beq.n	801551e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80154fe:	6839      	ldr	r1, [r7, #0]
 8015500:	6878      	ldr	r0, [r7, #4]
 8015502:	f000 f918 	bl	8015736 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	685b      	ldr	r3, [r3, #4]
 801550a:	b2db      	uxtb	r3, r3
 801550c:	4619      	mov	r1, r3
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	f7ff f86b 	bl	80145ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2202      	movs	r2, #2
 8015518:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801551c:	e014      	b.n	8015548 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f000 fae1 	bl	8015ae6 <USBD_CtlSendStatus>
      break;
 8015524:	e010      	b.n	8015548 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015526:	6878      	ldr	r0, [r7, #4]
 8015528:	f000 fadd 	bl	8015ae6 <USBD_CtlSendStatus>
      break;
 801552c:	e00c      	b.n	8015548 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801552e:	6839      	ldr	r1, [r7, #0]
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f000 f900 	bl	8015736 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015536:	4b07      	ldr	r3, [pc, #28]	@ (8015554 <USBD_SetConfig+0x150>)
 8015538:	781b      	ldrb	r3, [r3, #0]
 801553a:	4619      	mov	r1, r3
 801553c:	6878      	ldr	r0, [r7, #4]
 801553e:	f7ff f854 	bl	80145ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015542:	2303      	movs	r3, #3
 8015544:	73fb      	strb	r3, [r7, #15]
      break;
 8015546:	bf00      	nop
  }

  return ret;
 8015548:	7bfb      	ldrb	r3, [r7, #15]
}
 801554a:	4618      	mov	r0, r3
 801554c:	3710      	adds	r7, #16
 801554e:	46bd      	mov	sp, r7
 8015550:	bd80      	pop	{r7, pc}
 8015552:	bf00      	nop
 8015554:	200132e0 	.word	0x200132e0

08015558 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015562:	683b      	ldr	r3, [r7, #0]
 8015564:	88db      	ldrh	r3, [r3, #6]
 8015566:	2b01      	cmp	r3, #1
 8015568:	d004      	beq.n	8015574 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801556a:	6839      	ldr	r1, [r7, #0]
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f000 f8e2 	bl	8015736 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015572:	e023      	b.n	80155bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801557a:	b2db      	uxtb	r3, r3
 801557c:	2b02      	cmp	r3, #2
 801557e:	dc02      	bgt.n	8015586 <USBD_GetConfig+0x2e>
 8015580:	2b00      	cmp	r3, #0
 8015582:	dc03      	bgt.n	801558c <USBD_GetConfig+0x34>
 8015584:	e015      	b.n	80155b2 <USBD_GetConfig+0x5a>
 8015586:	2b03      	cmp	r3, #3
 8015588:	d00b      	beq.n	80155a2 <USBD_GetConfig+0x4a>
 801558a:	e012      	b.n	80155b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	2200      	movs	r2, #0
 8015590:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	3308      	adds	r3, #8
 8015596:	2201      	movs	r2, #1
 8015598:	4619      	mov	r1, r3
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f000 fa49 	bl	8015a32 <USBD_CtlSendData>
        break;
 80155a0:	e00c      	b.n	80155bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	3304      	adds	r3, #4
 80155a6:	2201      	movs	r2, #1
 80155a8:	4619      	mov	r1, r3
 80155aa:	6878      	ldr	r0, [r7, #4]
 80155ac:	f000 fa41 	bl	8015a32 <USBD_CtlSendData>
        break;
 80155b0:	e004      	b.n	80155bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80155b2:	6839      	ldr	r1, [r7, #0]
 80155b4:	6878      	ldr	r0, [r7, #4]
 80155b6:	f000 f8be 	bl	8015736 <USBD_CtlError>
        break;
 80155ba:	bf00      	nop
}
 80155bc:	bf00      	nop
 80155be:	3708      	adds	r7, #8
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bd80      	pop	{r7, pc}

080155c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b082      	sub	sp, #8
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80155d4:	b2db      	uxtb	r3, r3
 80155d6:	3b01      	subs	r3, #1
 80155d8:	2b02      	cmp	r3, #2
 80155da:	d81e      	bhi.n	801561a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	88db      	ldrh	r3, [r3, #6]
 80155e0:	2b02      	cmp	r3, #2
 80155e2:	d004      	beq.n	80155ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80155e4:	6839      	ldr	r1, [r7, #0]
 80155e6:	6878      	ldr	r0, [r7, #4]
 80155e8:	f000 f8a5 	bl	8015736 <USBD_CtlError>
        break;
 80155ec:	e01a      	b.n	8015624 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	2201      	movs	r2, #1
 80155f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d005      	beq.n	801560a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	68db      	ldr	r3, [r3, #12]
 8015602:	f043 0202 	orr.w	r2, r3, #2
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	330c      	adds	r3, #12
 801560e:	2202      	movs	r2, #2
 8015610:	4619      	mov	r1, r3
 8015612:	6878      	ldr	r0, [r7, #4]
 8015614:	f000 fa0d 	bl	8015a32 <USBD_CtlSendData>
      break;
 8015618:	e004      	b.n	8015624 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801561a:	6839      	ldr	r1, [r7, #0]
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	f000 f88a 	bl	8015736 <USBD_CtlError>
      break;
 8015622:	bf00      	nop
  }
}
 8015624:	bf00      	nop
 8015626:	3708      	adds	r7, #8
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}

0801562c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b082      	sub	sp, #8
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
 8015634:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	885b      	ldrh	r3, [r3, #2]
 801563a:	2b01      	cmp	r3, #1
 801563c:	d107      	bne.n	801564e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	2201      	movs	r2, #1
 8015642:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	f000 fa4d 	bl	8015ae6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801564c:	e013      	b.n	8015676 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	885b      	ldrh	r3, [r3, #2]
 8015652:	2b02      	cmp	r3, #2
 8015654:	d10b      	bne.n	801566e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	889b      	ldrh	r3, [r3, #4]
 801565a:	0a1b      	lsrs	r3, r3, #8
 801565c:	b29b      	uxth	r3, r3
 801565e:	b2da      	uxtb	r2, r3
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015666:	6878      	ldr	r0, [r7, #4]
 8015668:	f000 fa3d 	bl	8015ae6 <USBD_CtlSendStatus>
}
 801566c:	e003      	b.n	8015676 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801566e:	6839      	ldr	r1, [r7, #0]
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f000 f860 	bl	8015736 <USBD_CtlError>
}
 8015676:	bf00      	nop
 8015678:	3708      	adds	r7, #8
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}

0801567e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801567e:	b580      	push	{r7, lr}
 8015680:	b082      	sub	sp, #8
 8015682:	af00      	add	r7, sp, #0
 8015684:	6078      	str	r0, [r7, #4]
 8015686:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801568e:	b2db      	uxtb	r3, r3
 8015690:	3b01      	subs	r3, #1
 8015692:	2b02      	cmp	r3, #2
 8015694:	d80b      	bhi.n	80156ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	885b      	ldrh	r3, [r3, #2]
 801569a:	2b01      	cmp	r3, #1
 801569c:	d10c      	bne.n	80156b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2200      	movs	r2, #0
 80156a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	f000 fa1d 	bl	8015ae6 <USBD_CtlSendStatus>
      }
      break;
 80156ac:	e004      	b.n	80156b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80156ae:	6839      	ldr	r1, [r7, #0]
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f000 f840 	bl	8015736 <USBD_CtlError>
      break;
 80156b6:	e000      	b.n	80156ba <USBD_ClrFeature+0x3c>
      break;
 80156b8:	bf00      	nop
  }
}
 80156ba:	bf00      	nop
 80156bc:	3708      	adds	r7, #8
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}

080156c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80156c2:	b580      	push	{r7, lr}
 80156c4:	b084      	sub	sp, #16
 80156c6:	af00      	add	r7, sp, #0
 80156c8:	6078      	str	r0, [r7, #4]
 80156ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80156cc:	683b      	ldr	r3, [r7, #0]
 80156ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	781a      	ldrb	r2, [r3, #0]
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	3301      	adds	r3, #1
 80156dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	781a      	ldrb	r2, [r3, #0]
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	3301      	adds	r3, #1
 80156ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80156ec:	68f8      	ldr	r0, [r7, #12]
 80156ee:	f7ff fa40 	bl	8014b72 <SWAPBYTE>
 80156f2:	4603      	mov	r3, r0
 80156f4:	461a      	mov	r2, r3
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	3301      	adds	r3, #1
 80156fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	3301      	adds	r3, #1
 8015704:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015706:	68f8      	ldr	r0, [r7, #12]
 8015708:	f7ff fa33 	bl	8014b72 <SWAPBYTE>
 801570c:	4603      	mov	r3, r0
 801570e:	461a      	mov	r2, r3
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	3301      	adds	r3, #1
 8015718:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	3301      	adds	r3, #1
 801571e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015720:	68f8      	ldr	r0, [r7, #12]
 8015722:	f7ff fa26 	bl	8014b72 <SWAPBYTE>
 8015726:	4603      	mov	r3, r0
 8015728:	461a      	mov	r2, r3
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	80da      	strh	r2, [r3, #6]
}
 801572e:	bf00      	nop
 8015730:	3710      	adds	r7, #16
 8015732:	46bd      	mov	sp, r7
 8015734:	bd80      	pop	{r7, pc}

08015736 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015736:	b580      	push	{r7, lr}
 8015738:	b082      	sub	sp, #8
 801573a:	af00      	add	r7, sp, #0
 801573c:	6078      	str	r0, [r7, #4]
 801573e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015740:	2180      	movs	r1, #128	@ 0x80
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f7fe fdb4 	bl	80142b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015748:	2100      	movs	r1, #0
 801574a:	6878      	ldr	r0, [r7, #4]
 801574c:	f7fe fdb0 	bl	80142b0 <USBD_LL_StallEP>
}
 8015750:	bf00      	nop
 8015752:	3708      	adds	r7, #8
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}

08015758 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b086      	sub	sp, #24
 801575c:	af00      	add	r7, sp, #0
 801575e:	60f8      	str	r0, [r7, #12]
 8015760:	60b9      	str	r1, [r7, #8]
 8015762:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015764:	2300      	movs	r3, #0
 8015766:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d036      	beq.n	80157dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015772:	6938      	ldr	r0, [r7, #16]
 8015774:	f000 f836 	bl	80157e4 <USBD_GetLen>
 8015778:	4603      	mov	r3, r0
 801577a:	3301      	adds	r3, #1
 801577c:	b29b      	uxth	r3, r3
 801577e:	005b      	lsls	r3, r3, #1
 8015780:	b29a      	uxth	r2, r3
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015786:	7dfb      	ldrb	r3, [r7, #23]
 8015788:	68ba      	ldr	r2, [r7, #8]
 801578a:	4413      	add	r3, r2
 801578c:	687a      	ldr	r2, [r7, #4]
 801578e:	7812      	ldrb	r2, [r2, #0]
 8015790:	701a      	strb	r2, [r3, #0]
  idx++;
 8015792:	7dfb      	ldrb	r3, [r7, #23]
 8015794:	3301      	adds	r3, #1
 8015796:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015798:	7dfb      	ldrb	r3, [r7, #23]
 801579a:	68ba      	ldr	r2, [r7, #8]
 801579c:	4413      	add	r3, r2
 801579e:	2203      	movs	r2, #3
 80157a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80157a2:	7dfb      	ldrb	r3, [r7, #23]
 80157a4:	3301      	adds	r3, #1
 80157a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80157a8:	e013      	b.n	80157d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80157aa:	7dfb      	ldrb	r3, [r7, #23]
 80157ac:	68ba      	ldr	r2, [r7, #8]
 80157ae:	4413      	add	r3, r2
 80157b0:	693a      	ldr	r2, [r7, #16]
 80157b2:	7812      	ldrb	r2, [r2, #0]
 80157b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80157b6:	693b      	ldr	r3, [r7, #16]
 80157b8:	3301      	adds	r3, #1
 80157ba:	613b      	str	r3, [r7, #16]
    idx++;
 80157bc:	7dfb      	ldrb	r3, [r7, #23]
 80157be:	3301      	adds	r3, #1
 80157c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80157c2:	7dfb      	ldrb	r3, [r7, #23]
 80157c4:	68ba      	ldr	r2, [r7, #8]
 80157c6:	4413      	add	r3, r2
 80157c8:	2200      	movs	r2, #0
 80157ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80157cc:	7dfb      	ldrb	r3, [r7, #23]
 80157ce:	3301      	adds	r3, #1
 80157d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80157d2:	693b      	ldr	r3, [r7, #16]
 80157d4:	781b      	ldrb	r3, [r3, #0]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d1e7      	bne.n	80157aa <USBD_GetString+0x52>
 80157da:	e000      	b.n	80157de <USBD_GetString+0x86>
    return;
 80157dc:	bf00      	nop
  }
}
 80157de:	3718      	adds	r7, #24
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80157e4:	b480      	push	{r7}
 80157e6:	b085      	sub	sp, #20
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80157ec:	2300      	movs	r3, #0
 80157ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80157f4:	e005      	b.n	8015802 <USBD_GetLen+0x1e>
  {
    len++;
 80157f6:	7bfb      	ldrb	r3, [r7, #15]
 80157f8:	3301      	adds	r3, #1
 80157fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	3301      	adds	r3, #1
 8015800:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015802:	68bb      	ldr	r3, [r7, #8]
 8015804:	781b      	ldrb	r3, [r3, #0]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d1f5      	bne.n	80157f6 <USBD_GetLen+0x12>
  }

  return len;
 801580a:	7bfb      	ldrb	r3, [r7, #15]
}
 801580c:	4618      	mov	r0, r3
 801580e:	3714      	adds	r7, #20
 8015810:	46bd      	mov	sp, r7
 8015812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015816:	4770      	bx	lr

08015818 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015818:	b480      	push	{r7}
 801581a:	b083      	sub	sp, #12
 801581c:	af00      	add	r7, sp, #0
 801581e:	4603      	mov	r3, r0
 8015820:	6039      	str	r1, [r7, #0]
 8015822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8015824:	683b      	ldr	r3, [r7, #0]
 8015826:	2212      	movs	r2, #18
 8015828:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 801582a:	4b03      	ldr	r3, [pc, #12]	@ (8015838 <USBD_Class_DeviceDescriptor+0x20>)
}
 801582c:	4618      	mov	r0, r3
 801582e:	370c      	adds	r7, #12
 8015830:	46bd      	mov	sp, r7
 8015832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015836:	4770      	bx	lr
 8015838:	200000f0 	.word	0x200000f0

0801583c <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801583c:	b480      	push	{r7}
 801583e:	b083      	sub	sp, #12
 8015840:	af00      	add	r7, sp, #0
 8015842:	4603      	mov	r3, r0
 8015844:	6039      	str	r1, [r7, #0]
 8015846:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 8015848:	683b      	ldr	r3, [r7, #0]
 801584a:	2204      	movs	r2, #4
 801584c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 801584e:	4b03      	ldr	r3, [pc, #12]	@ (801585c <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8015850:	4618      	mov	r0, r3
 8015852:	370c      	adds	r7, #12
 8015854:	46bd      	mov	sp, r7
 8015856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585a:	4770      	bx	lr
 801585c:	20000104 	.word	0x20000104

08015860 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b082      	sub	sp, #8
 8015864:	af00      	add	r7, sp, #0
 8015866:	4603      	mov	r3, r0
 8015868:	6039      	str	r1, [r7, #0]
 801586a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 801586c:	79fb      	ldrb	r3, [r7, #7]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d105      	bne.n	801587e <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8015872:	683a      	ldr	r2, [r7, #0]
 8015874:	4907      	ldr	r1, [pc, #28]	@ (8015894 <USBD_Class_ProductStrDescriptor+0x34>)
 8015876:	4808      	ldr	r0, [pc, #32]	@ (8015898 <USBD_Class_ProductStrDescriptor+0x38>)
 8015878:	f7ff ff6e 	bl	8015758 <USBD_GetString>
 801587c:	e004      	b.n	8015888 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 801587e:	683a      	ldr	r2, [r7, #0]
 8015880:	4904      	ldr	r1, [pc, #16]	@ (8015894 <USBD_Class_ProductStrDescriptor+0x34>)
 8015882:	4805      	ldr	r0, [pc, #20]	@ (8015898 <USBD_Class_ProductStrDescriptor+0x38>)
 8015884:	f7ff ff68 	bl	8015758 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015888:	4b02      	ldr	r3, [pc, #8]	@ (8015894 <USBD_Class_ProductStrDescriptor+0x34>)
}
 801588a:	4618      	mov	r0, r3
 801588c:	3708      	adds	r7, #8
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}
 8015892:	bf00      	nop
 8015894:	200132e4 	.word	0x200132e4
 8015898:	08018b08 	.word	0x08018b08

0801589c <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b082      	sub	sp, #8
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	4603      	mov	r3, r0
 80158a4:	6039      	str	r1, [r7, #0]
 80158a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80158a8:	683a      	ldr	r2, [r7, #0]
 80158aa:	4904      	ldr	r1, [pc, #16]	@ (80158bc <USBD_Class_ManufacturerStrDescriptor+0x20>)
 80158ac:	4804      	ldr	r0, [pc, #16]	@ (80158c0 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 80158ae:	f7ff ff53 	bl	8015758 <USBD_GetString>
  return USBD_StrDesc;
 80158b2:	4b02      	ldr	r3, [pc, #8]	@ (80158bc <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 80158b4:	4618      	mov	r0, r3
 80158b6:	3708      	adds	r7, #8
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd80      	pop	{r7, pc}
 80158bc:	200132e4 	.word	0x200132e4
 80158c0:	08018b20 	.word	0x08018b20

080158c4 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b082      	sub	sp, #8
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	4603      	mov	r3, r0
 80158cc:	6039      	str	r1, [r7, #0]
 80158ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	221a      	movs	r2, #26
 80158d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 80158d6:	f000 f843 	bl	8015960 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 80158da:	4b02      	ldr	r3, [pc, #8]	@ (80158e4 <USBD_Class_SerialStrDescriptor+0x20>)
}
 80158dc:	4618      	mov	r0, r3
 80158de:	3708      	adds	r7, #8
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}
 80158e4:	20000108 	.word	0x20000108

080158e8 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b082      	sub	sp, #8
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	4603      	mov	r3, r0
 80158f0:	6039      	str	r1, [r7, #0]
 80158f2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80158f4:	79fb      	ldrb	r3, [r7, #7]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d105      	bne.n	8015906 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80158fa:	683a      	ldr	r2, [r7, #0]
 80158fc:	4907      	ldr	r1, [pc, #28]	@ (801591c <USBD_Class_ConfigStrDescriptor+0x34>)
 80158fe:	4808      	ldr	r0, [pc, #32]	@ (8015920 <USBD_Class_ConfigStrDescriptor+0x38>)
 8015900:	f7ff ff2a 	bl	8015758 <USBD_GetString>
 8015904:	e004      	b.n	8015910 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8015906:	683a      	ldr	r2, [r7, #0]
 8015908:	4904      	ldr	r1, [pc, #16]	@ (801591c <USBD_Class_ConfigStrDescriptor+0x34>)
 801590a:	4805      	ldr	r0, [pc, #20]	@ (8015920 <USBD_Class_ConfigStrDescriptor+0x38>)
 801590c:	f7ff ff24 	bl	8015758 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015910:	4b02      	ldr	r3, [pc, #8]	@ (801591c <USBD_Class_ConfigStrDescriptor+0x34>)
}
 8015912:	4618      	mov	r0, r3
 8015914:	3708      	adds	r7, #8
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}
 801591a:	bf00      	nop
 801591c:	200132e4 	.word	0x200132e4
 8015920:	08018b34 	.word	0x08018b34

08015924 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b082      	sub	sp, #8
 8015928:	af00      	add	r7, sp, #0
 801592a:	4603      	mov	r3, r0
 801592c:	6039      	str	r1, [r7, #0]
 801592e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8015930:	79fb      	ldrb	r3, [r7, #7]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d105      	bne.n	8015942 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8015936:	683a      	ldr	r2, [r7, #0]
 8015938:	4907      	ldr	r1, [pc, #28]	@ (8015958 <USBD_Class_InterfaceStrDescriptor+0x34>)
 801593a:	4808      	ldr	r0, [pc, #32]	@ (801595c <USBD_Class_InterfaceStrDescriptor+0x38>)
 801593c:	f7ff ff0c 	bl	8015758 <USBD_GetString>
 8015940:	e004      	b.n	801594c <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8015942:	683a      	ldr	r2, [r7, #0]
 8015944:	4904      	ldr	r1, [pc, #16]	@ (8015958 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8015946:	4805      	ldr	r0, [pc, #20]	@ (801595c <USBD_Class_InterfaceStrDescriptor+0x38>)
 8015948:	f7ff ff06 	bl	8015758 <USBD_GetString>
  }
  return USBD_StrDesc;
 801594c:	4b02      	ldr	r3, [pc, #8]	@ (8015958 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 801594e:	4618      	mov	r0, r3
 8015950:	3708      	adds	r7, #8
 8015952:	46bd      	mov	sp, r7
 8015954:	bd80      	pop	{r7, pc}
 8015956:	bf00      	nop
 8015958:	200132e4 	.word	0x200132e4
 801595c:	08018b40 	.word	0x08018b40

08015960 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b084      	sub	sp, #16
 8015964:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 8015966:	4b0f      	ldr	r3, [pc, #60]	@ (80159a4 <Get_SerialNum+0x44>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 801596c:	4b0e      	ldr	r3, [pc, #56]	@ (80159a8 <Get_SerialNum+0x48>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8015972:	4b0e      	ldr	r3, [pc, #56]	@ (80159ac <Get_SerialNum+0x4c>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015978:	68fa      	ldr	r2, [r7, #12]
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	4413      	add	r3, r2
 801597e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d009      	beq.n	801599a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 8015986:	2208      	movs	r2, #8
 8015988:	4909      	ldr	r1, [pc, #36]	@ (80159b0 <Get_SerialNum+0x50>)
 801598a:	68f8      	ldr	r0, [r7, #12]
 801598c:	f000 f814 	bl	80159b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 8015990:	2204      	movs	r2, #4
 8015992:	4908      	ldr	r1, [pc, #32]	@ (80159b4 <Get_SerialNum+0x54>)
 8015994:	68b8      	ldr	r0, [r7, #8]
 8015996:	f000 f80f 	bl	80159b8 <IntToUnicode>
  }
}
 801599a:	bf00      	nop
 801599c:	3710      	adds	r7, #16
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}
 80159a2:	bf00      	nop
 80159a4:	08fff800 	.word	0x08fff800
 80159a8:	08fff804 	.word	0x08fff804
 80159ac:	08fff808 	.word	0x08fff808
 80159b0:	2000010a 	.word	0x2000010a
 80159b4:	2000011a 	.word	0x2000011a

080159b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 80159b8:	b480      	push	{r7}
 80159ba:	b087      	sub	sp, #28
 80159bc:	af00      	add	r7, sp, #0
 80159be:	60f8      	str	r0, [r7, #12]
 80159c0:	60b9      	str	r1, [r7, #8]
 80159c2:	4613      	mov	r3, r2
 80159c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 80159c6:	2300      	movs	r3, #0
 80159c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 80159ca:	2300      	movs	r3, #0
 80159cc:	75fb      	strb	r3, [r7, #23]
 80159ce:	e025      	b.n	8015a1c <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	0f1b      	lsrs	r3, r3, #28
 80159d4:	2b09      	cmp	r3, #9
 80159d6:	d80a      	bhi.n	80159ee <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	0f1b      	lsrs	r3, r3, #28
 80159dc:	b2da      	uxtb	r2, r3
 80159de:	7dfb      	ldrb	r3, [r7, #23]
 80159e0:	005b      	lsls	r3, r3, #1
 80159e2:	68b9      	ldr	r1, [r7, #8]
 80159e4:	440b      	add	r3, r1
 80159e6:	3230      	adds	r2, #48	@ 0x30
 80159e8:	b2d2      	uxtb	r2, r2
 80159ea:	701a      	strb	r2, [r3, #0]
 80159ec:	e009      	b.n	8015a02 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	0f1b      	lsrs	r3, r3, #28
 80159f2:	b2da      	uxtb	r2, r3
 80159f4:	7dfb      	ldrb	r3, [r7, #23]
 80159f6:	005b      	lsls	r3, r3, #1
 80159f8:	68b9      	ldr	r1, [r7, #8]
 80159fa:	440b      	add	r3, r1
 80159fc:	3237      	adds	r2, #55	@ 0x37
 80159fe:	b2d2      	uxtb	r2, r2
 8015a00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	011b      	lsls	r3, r3, #4
 8015a06:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8015a08:	7dfb      	ldrb	r3, [r7, #23]
 8015a0a:	005b      	lsls	r3, r3, #1
 8015a0c:	3301      	adds	r3, #1
 8015a0e:	68ba      	ldr	r2, [r7, #8]
 8015a10:	4413      	add	r3, r2
 8015a12:	2200      	movs	r2, #0
 8015a14:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 8015a16:	7dfb      	ldrb	r3, [r7, #23]
 8015a18:	3301      	adds	r3, #1
 8015a1a:	75fb      	strb	r3, [r7, #23]
 8015a1c:	7dfa      	ldrb	r2, [r7, #23]
 8015a1e:	79fb      	ldrb	r3, [r7, #7]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d3d5      	bcc.n	80159d0 <IntToUnicode+0x18>
  }
}
 8015a24:	bf00      	nop
 8015a26:	bf00      	nop
 8015a28:	371c      	adds	r7, #28
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a30:	4770      	bx	lr

08015a32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015a32:	b580      	push	{r7, lr}
 8015a34:	b084      	sub	sp, #16
 8015a36:	af00      	add	r7, sp, #0
 8015a38:	60f8      	str	r0, [r7, #12]
 8015a3a:	60b9      	str	r1, [r7, #8]
 8015a3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	2202      	movs	r2, #2
 8015a42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	687a      	ldr	r2, [r7, #4]
 8015a4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	687a      	ldr	r2, [r7, #4]
 8015a50:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	68ba      	ldr	r2, [r7, #8]
 8015a56:	2100      	movs	r1, #0
 8015a58:	68f8      	ldr	r0, [r7, #12]
 8015a5a:	f7fe fca0 	bl	801439e <USBD_LL_Transmit>

  return USBD_OK;
 8015a5e:	2300      	movs	r3, #0
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	3710      	adds	r7, #16
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd80      	pop	{r7, pc}

08015a68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b084      	sub	sp, #16
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	60f8      	str	r0, [r7, #12]
 8015a70:	60b9      	str	r1, [r7, #8]
 8015a72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	68ba      	ldr	r2, [r7, #8]
 8015a78:	2100      	movs	r1, #0
 8015a7a:	68f8      	ldr	r0, [r7, #12]
 8015a7c:	f7fe fc8f 	bl	801439e <USBD_LL_Transmit>

  return USBD_OK;
 8015a80:	2300      	movs	r3, #0
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	3710      	adds	r7, #16
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}

08015a8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015a8a:	b580      	push	{r7, lr}
 8015a8c:	b084      	sub	sp, #16
 8015a8e:	af00      	add	r7, sp, #0
 8015a90:	60f8      	str	r0, [r7, #12]
 8015a92:	60b9      	str	r1, [r7, #8]
 8015a94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	2203      	movs	r2, #3
 8015a9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	687a      	ldr	r2, [r7, #4]
 8015aa2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	687a      	ldr	r2, [r7, #4]
 8015aaa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	68ba      	ldr	r2, [r7, #8]
 8015ab2:	2100      	movs	r1, #0
 8015ab4:	68f8      	ldr	r0, [r7, #12]
 8015ab6:	f7fe fc8d 	bl	80143d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015aba:	2300      	movs	r3, #0
}
 8015abc:	4618      	mov	r0, r3
 8015abe:	3710      	adds	r7, #16
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}

08015ac4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b084      	sub	sp, #16
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	60f8      	str	r0, [r7, #12]
 8015acc:	60b9      	str	r1, [r7, #8]
 8015ace:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	68ba      	ldr	r2, [r7, #8]
 8015ad4:	2100      	movs	r1, #0
 8015ad6:	68f8      	ldr	r0, [r7, #12]
 8015ad8:	f7fe fc7c 	bl	80143d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015adc:	2300      	movs	r3, #0
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3710      	adds	r7, #16
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}

08015ae6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015ae6:	b580      	push	{r7, lr}
 8015ae8:	b082      	sub	sp, #8
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2204      	movs	r2, #4
 8015af2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015af6:	2300      	movs	r3, #0
 8015af8:	2200      	movs	r2, #0
 8015afa:	2100      	movs	r1, #0
 8015afc:	6878      	ldr	r0, [r7, #4]
 8015afe:	f7fe fc4e 	bl	801439e <USBD_LL_Transmit>

  return USBD_OK;
 8015b02:	2300      	movs	r3, #0
}
 8015b04:	4618      	mov	r0, r3
 8015b06:	3708      	adds	r7, #8
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bd80      	pop	{r7, pc}

08015b0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b082      	sub	sp, #8
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2205      	movs	r2, #5
 8015b18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	2200      	movs	r2, #0
 8015b20:	2100      	movs	r1, #0
 8015b22:	6878      	ldr	r0, [r7, #4]
 8015b24:	f7fe fc56 	bl	80143d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015b28:	2300      	movs	r3, #0
}
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	3708      	adds	r7, #8
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}
	...

08015b34 <malloc>:
 8015b34:	4b02      	ldr	r3, [pc, #8]	@ (8015b40 <malloc+0xc>)
 8015b36:	4601      	mov	r1, r0
 8015b38:	6818      	ldr	r0, [r3, #0]
 8015b3a:	f000 b82d 	b.w	8015b98 <_malloc_r>
 8015b3e:	bf00      	nop
 8015b40:	20000130 	.word	0x20000130

08015b44 <free>:
 8015b44:	4b02      	ldr	r3, [pc, #8]	@ (8015b50 <free+0xc>)
 8015b46:	4601      	mov	r1, r0
 8015b48:	6818      	ldr	r0, [r3, #0]
 8015b4a:	f000 bafd 	b.w	8016148 <_free_r>
 8015b4e:	bf00      	nop
 8015b50:	20000130 	.word	0x20000130

08015b54 <sbrk_aligned>:
 8015b54:	b570      	push	{r4, r5, r6, lr}
 8015b56:	4e0f      	ldr	r6, [pc, #60]	@ (8015b94 <sbrk_aligned+0x40>)
 8015b58:	460c      	mov	r4, r1
 8015b5a:	4605      	mov	r5, r0
 8015b5c:	6831      	ldr	r1, [r6, #0]
 8015b5e:	b911      	cbnz	r1, 8015b66 <sbrk_aligned+0x12>
 8015b60:	f000 fa96 	bl	8016090 <_sbrk_r>
 8015b64:	6030      	str	r0, [r6, #0]
 8015b66:	4621      	mov	r1, r4
 8015b68:	4628      	mov	r0, r5
 8015b6a:	f000 fa91 	bl	8016090 <_sbrk_r>
 8015b6e:	1c43      	adds	r3, r0, #1
 8015b70:	d103      	bne.n	8015b7a <sbrk_aligned+0x26>
 8015b72:	f04f 34ff 	mov.w	r4, #4294967295
 8015b76:	4620      	mov	r0, r4
 8015b78:	bd70      	pop	{r4, r5, r6, pc}
 8015b7a:	1cc4      	adds	r4, r0, #3
 8015b7c:	f024 0403 	bic.w	r4, r4, #3
 8015b80:	42a0      	cmp	r0, r4
 8015b82:	d0f8      	beq.n	8015b76 <sbrk_aligned+0x22>
 8015b84:	1a21      	subs	r1, r4, r0
 8015b86:	4628      	mov	r0, r5
 8015b88:	f000 fa82 	bl	8016090 <_sbrk_r>
 8015b8c:	3001      	adds	r0, #1
 8015b8e:	d1f2      	bne.n	8015b76 <sbrk_aligned+0x22>
 8015b90:	e7ef      	b.n	8015b72 <sbrk_aligned+0x1e>
 8015b92:	bf00      	nop
 8015b94:	200133e4 	.word	0x200133e4

08015b98 <_malloc_r>:
 8015b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b9c:	1ccd      	adds	r5, r1, #3
 8015b9e:	4606      	mov	r6, r0
 8015ba0:	f025 0503 	bic.w	r5, r5, #3
 8015ba4:	3508      	adds	r5, #8
 8015ba6:	2d0c      	cmp	r5, #12
 8015ba8:	bf38      	it	cc
 8015baa:	250c      	movcc	r5, #12
 8015bac:	2d00      	cmp	r5, #0
 8015bae:	db01      	blt.n	8015bb4 <_malloc_r+0x1c>
 8015bb0:	42a9      	cmp	r1, r5
 8015bb2:	d904      	bls.n	8015bbe <_malloc_r+0x26>
 8015bb4:	230c      	movs	r3, #12
 8015bb6:	6033      	str	r3, [r6, #0]
 8015bb8:	2000      	movs	r0, #0
 8015bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015c94 <_malloc_r+0xfc>
 8015bc2:	f000 f869 	bl	8015c98 <__malloc_lock>
 8015bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8015bca:	461c      	mov	r4, r3
 8015bcc:	bb44      	cbnz	r4, 8015c20 <_malloc_r+0x88>
 8015bce:	4629      	mov	r1, r5
 8015bd0:	4630      	mov	r0, r6
 8015bd2:	f7ff ffbf 	bl	8015b54 <sbrk_aligned>
 8015bd6:	1c43      	adds	r3, r0, #1
 8015bd8:	4604      	mov	r4, r0
 8015bda:	d158      	bne.n	8015c8e <_malloc_r+0xf6>
 8015bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8015be0:	4627      	mov	r7, r4
 8015be2:	2f00      	cmp	r7, #0
 8015be4:	d143      	bne.n	8015c6e <_malloc_r+0xd6>
 8015be6:	2c00      	cmp	r4, #0
 8015be8:	d04b      	beq.n	8015c82 <_malloc_r+0xea>
 8015bea:	6823      	ldr	r3, [r4, #0]
 8015bec:	4639      	mov	r1, r7
 8015bee:	4630      	mov	r0, r6
 8015bf0:	eb04 0903 	add.w	r9, r4, r3
 8015bf4:	f000 fa4c 	bl	8016090 <_sbrk_r>
 8015bf8:	4581      	cmp	r9, r0
 8015bfa:	d142      	bne.n	8015c82 <_malloc_r+0xea>
 8015bfc:	6821      	ldr	r1, [r4, #0]
 8015bfe:	4630      	mov	r0, r6
 8015c00:	1a6d      	subs	r5, r5, r1
 8015c02:	4629      	mov	r1, r5
 8015c04:	f7ff ffa6 	bl	8015b54 <sbrk_aligned>
 8015c08:	3001      	adds	r0, #1
 8015c0a:	d03a      	beq.n	8015c82 <_malloc_r+0xea>
 8015c0c:	6823      	ldr	r3, [r4, #0]
 8015c0e:	442b      	add	r3, r5
 8015c10:	6023      	str	r3, [r4, #0]
 8015c12:	f8d8 3000 	ldr.w	r3, [r8]
 8015c16:	685a      	ldr	r2, [r3, #4]
 8015c18:	bb62      	cbnz	r2, 8015c74 <_malloc_r+0xdc>
 8015c1a:	f8c8 7000 	str.w	r7, [r8]
 8015c1e:	e00f      	b.n	8015c40 <_malloc_r+0xa8>
 8015c20:	6822      	ldr	r2, [r4, #0]
 8015c22:	1b52      	subs	r2, r2, r5
 8015c24:	d420      	bmi.n	8015c68 <_malloc_r+0xd0>
 8015c26:	2a0b      	cmp	r2, #11
 8015c28:	d917      	bls.n	8015c5a <_malloc_r+0xc2>
 8015c2a:	1961      	adds	r1, r4, r5
 8015c2c:	42a3      	cmp	r3, r4
 8015c2e:	6025      	str	r5, [r4, #0]
 8015c30:	bf18      	it	ne
 8015c32:	6059      	strne	r1, [r3, #4]
 8015c34:	6863      	ldr	r3, [r4, #4]
 8015c36:	bf08      	it	eq
 8015c38:	f8c8 1000 	streq.w	r1, [r8]
 8015c3c:	5162      	str	r2, [r4, r5]
 8015c3e:	604b      	str	r3, [r1, #4]
 8015c40:	4630      	mov	r0, r6
 8015c42:	f000 f82f 	bl	8015ca4 <__malloc_unlock>
 8015c46:	f104 000b 	add.w	r0, r4, #11
 8015c4a:	1d23      	adds	r3, r4, #4
 8015c4c:	f020 0007 	bic.w	r0, r0, #7
 8015c50:	1ac2      	subs	r2, r0, r3
 8015c52:	bf1c      	itt	ne
 8015c54:	1a1b      	subne	r3, r3, r0
 8015c56:	50a3      	strne	r3, [r4, r2]
 8015c58:	e7af      	b.n	8015bba <_malloc_r+0x22>
 8015c5a:	6862      	ldr	r2, [r4, #4]
 8015c5c:	42a3      	cmp	r3, r4
 8015c5e:	bf0c      	ite	eq
 8015c60:	f8c8 2000 	streq.w	r2, [r8]
 8015c64:	605a      	strne	r2, [r3, #4]
 8015c66:	e7eb      	b.n	8015c40 <_malloc_r+0xa8>
 8015c68:	4623      	mov	r3, r4
 8015c6a:	6864      	ldr	r4, [r4, #4]
 8015c6c:	e7ae      	b.n	8015bcc <_malloc_r+0x34>
 8015c6e:	463c      	mov	r4, r7
 8015c70:	687f      	ldr	r7, [r7, #4]
 8015c72:	e7b6      	b.n	8015be2 <_malloc_r+0x4a>
 8015c74:	461a      	mov	r2, r3
 8015c76:	685b      	ldr	r3, [r3, #4]
 8015c78:	42a3      	cmp	r3, r4
 8015c7a:	d1fb      	bne.n	8015c74 <_malloc_r+0xdc>
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	6053      	str	r3, [r2, #4]
 8015c80:	e7de      	b.n	8015c40 <_malloc_r+0xa8>
 8015c82:	230c      	movs	r3, #12
 8015c84:	4630      	mov	r0, r6
 8015c86:	6033      	str	r3, [r6, #0]
 8015c88:	f000 f80c 	bl	8015ca4 <__malloc_unlock>
 8015c8c:	e794      	b.n	8015bb8 <_malloc_r+0x20>
 8015c8e:	6005      	str	r5, [r0, #0]
 8015c90:	e7d6      	b.n	8015c40 <_malloc_r+0xa8>
 8015c92:	bf00      	nop
 8015c94:	200133e8 	.word	0x200133e8

08015c98 <__malloc_lock>:
 8015c98:	4801      	ldr	r0, [pc, #4]	@ (8015ca0 <__malloc_lock+0x8>)
 8015c9a:	f000 ba46 	b.w	801612a <__retarget_lock_acquire_recursive>
 8015c9e:	bf00      	nop
 8015ca0:	2001352c 	.word	0x2001352c

08015ca4 <__malloc_unlock>:
 8015ca4:	4801      	ldr	r0, [pc, #4]	@ (8015cac <__malloc_unlock+0x8>)
 8015ca6:	f000 ba41 	b.w	801612c <__retarget_lock_release_recursive>
 8015caa:	bf00      	nop
 8015cac:	2001352c 	.word	0x2001352c

08015cb0 <std>:
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	b510      	push	{r4, lr}
 8015cb4:	4604      	mov	r4, r0
 8015cb6:	6083      	str	r3, [r0, #8]
 8015cb8:	8181      	strh	r1, [r0, #12]
 8015cba:	4619      	mov	r1, r3
 8015cbc:	6643      	str	r3, [r0, #100]	@ 0x64
 8015cbe:	81c2      	strh	r2, [r0, #14]
 8015cc0:	2208      	movs	r2, #8
 8015cc2:	6183      	str	r3, [r0, #24]
 8015cc4:	e9c0 3300 	strd	r3, r3, [r0]
 8015cc8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015ccc:	305c      	adds	r0, #92	@ 0x5c
 8015cce:	f000 f9a3 	bl	8016018 <memset>
 8015cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8015d08 <std+0x58>)
 8015cd4:	6224      	str	r4, [r4, #32]
 8015cd6:	6263      	str	r3, [r4, #36]	@ 0x24
 8015cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8015d0c <std+0x5c>)
 8015cda:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8015d10 <std+0x60>)
 8015cde:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8015d14 <std+0x64>)
 8015ce2:	6323      	str	r3, [r4, #48]	@ 0x30
 8015ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8015d18 <std+0x68>)
 8015ce6:	429c      	cmp	r4, r3
 8015ce8:	d006      	beq.n	8015cf8 <std+0x48>
 8015cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015cee:	4294      	cmp	r4, r2
 8015cf0:	d002      	beq.n	8015cf8 <std+0x48>
 8015cf2:	33d0      	adds	r3, #208	@ 0xd0
 8015cf4:	429c      	cmp	r4, r3
 8015cf6:	d105      	bne.n	8015d04 <std+0x54>
 8015cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d00:	f000 ba12 	b.w	8016128 <__retarget_lock_init_recursive>
 8015d04:	bd10      	pop	{r4, pc}
 8015d06:	bf00      	nop
 8015d08:	08015f01 	.word	0x08015f01
 8015d0c:	08015f23 	.word	0x08015f23
 8015d10:	08015f5b 	.word	0x08015f5b
 8015d14:	08015f7f 	.word	0x08015f7f
 8015d18:	200133ec 	.word	0x200133ec

08015d1c <stdio_exit_handler>:
 8015d1c:	4a02      	ldr	r2, [pc, #8]	@ (8015d28 <stdio_exit_handler+0xc>)
 8015d1e:	4903      	ldr	r1, [pc, #12]	@ (8015d2c <stdio_exit_handler+0x10>)
 8015d20:	4803      	ldr	r0, [pc, #12]	@ (8015d30 <stdio_exit_handler+0x14>)
 8015d22:	f000 b869 	b.w	8015df8 <_fwalk_sglue>
 8015d26:	bf00      	nop
 8015d28:	20000124 	.word	0x20000124
 8015d2c:	08016b3d 	.word	0x08016b3d
 8015d30:	20000134 	.word	0x20000134

08015d34 <cleanup_stdio>:
 8015d34:	6841      	ldr	r1, [r0, #4]
 8015d36:	4b0c      	ldr	r3, [pc, #48]	@ (8015d68 <cleanup_stdio+0x34>)
 8015d38:	4299      	cmp	r1, r3
 8015d3a:	b510      	push	{r4, lr}
 8015d3c:	4604      	mov	r4, r0
 8015d3e:	d001      	beq.n	8015d44 <cleanup_stdio+0x10>
 8015d40:	f000 fefc 	bl	8016b3c <_fflush_r>
 8015d44:	68a1      	ldr	r1, [r4, #8]
 8015d46:	4b09      	ldr	r3, [pc, #36]	@ (8015d6c <cleanup_stdio+0x38>)
 8015d48:	4299      	cmp	r1, r3
 8015d4a:	d002      	beq.n	8015d52 <cleanup_stdio+0x1e>
 8015d4c:	4620      	mov	r0, r4
 8015d4e:	f000 fef5 	bl	8016b3c <_fflush_r>
 8015d52:	68e1      	ldr	r1, [r4, #12]
 8015d54:	4b06      	ldr	r3, [pc, #24]	@ (8015d70 <cleanup_stdio+0x3c>)
 8015d56:	4299      	cmp	r1, r3
 8015d58:	d004      	beq.n	8015d64 <cleanup_stdio+0x30>
 8015d5a:	4620      	mov	r0, r4
 8015d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d60:	f000 beec 	b.w	8016b3c <_fflush_r>
 8015d64:	bd10      	pop	{r4, pc}
 8015d66:	bf00      	nop
 8015d68:	200133ec 	.word	0x200133ec
 8015d6c:	20013454 	.word	0x20013454
 8015d70:	200134bc 	.word	0x200134bc

08015d74 <global_stdio_init.part.0>:
 8015d74:	b510      	push	{r4, lr}
 8015d76:	4b0b      	ldr	r3, [pc, #44]	@ (8015da4 <global_stdio_init.part.0+0x30>)
 8015d78:	2104      	movs	r1, #4
 8015d7a:	4c0b      	ldr	r4, [pc, #44]	@ (8015da8 <global_stdio_init.part.0+0x34>)
 8015d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8015dac <global_stdio_init.part.0+0x38>)
 8015d7e:	4620      	mov	r0, r4
 8015d80:	601a      	str	r2, [r3, #0]
 8015d82:	2200      	movs	r2, #0
 8015d84:	f7ff ff94 	bl	8015cb0 <std>
 8015d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015d8c:	2201      	movs	r2, #1
 8015d8e:	2109      	movs	r1, #9
 8015d90:	f7ff ff8e 	bl	8015cb0 <std>
 8015d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015d98:	2202      	movs	r2, #2
 8015d9a:	2112      	movs	r1, #18
 8015d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015da0:	f7ff bf86 	b.w	8015cb0 <std>
 8015da4:	20013524 	.word	0x20013524
 8015da8:	200133ec 	.word	0x200133ec
 8015dac:	08015d1d 	.word	0x08015d1d

08015db0 <__sfp_lock_acquire>:
 8015db0:	4801      	ldr	r0, [pc, #4]	@ (8015db8 <__sfp_lock_acquire+0x8>)
 8015db2:	f000 b9ba 	b.w	801612a <__retarget_lock_acquire_recursive>
 8015db6:	bf00      	nop
 8015db8:	2001352d 	.word	0x2001352d

08015dbc <__sfp_lock_release>:
 8015dbc:	4801      	ldr	r0, [pc, #4]	@ (8015dc4 <__sfp_lock_release+0x8>)
 8015dbe:	f000 b9b5 	b.w	801612c <__retarget_lock_release_recursive>
 8015dc2:	bf00      	nop
 8015dc4:	2001352d 	.word	0x2001352d

08015dc8 <__sinit>:
 8015dc8:	b510      	push	{r4, lr}
 8015dca:	4604      	mov	r4, r0
 8015dcc:	f7ff fff0 	bl	8015db0 <__sfp_lock_acquire>
 8015dd0:	6a23      	ldr	r3, [r4, #32]
 8015dd2:	b11b      	cbz	r3, 8015ddc <__sinit+0x14>
 8015dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dd8:	f7ff bff0 	b.w	8015dbc <__sfp_lock_release>
 8015ddc:	4b04      	ldr	r3, [pc, #16]	@ (8015df0 <__sinit+0x28>)
 8015dde:	6223      	str	r3, [r4, #32]
 8015de0:	4b04      	ldr	r3, [pc, #16]	@ (8015df4 <__sinit+0x2c>)
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d1f5      	bne.n	8015dd4 <__sinit+0xc>
 8015de8:	f7ff ffc4 	bl	8015d74 <global_stdio_init.part.0>
 8015dec:	e7f2      	b.n	8015dd4 <__sinit+0xc>
 8015dee:	bf00      	nop
 8015df0:	08015d35 	.word	0x08015d35
 8015df4:	20013524 	.word	0x20013524

08015df8 <_fwalk_sglue>:
 8015df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015dfc:	4607      	mov	r7, r0
 8015dfe:	4688      	mov	r8, r1
 8015e00:	4614      	mov	r4, r2
 8015e02:	2600      	movs	r6, #0
 8015e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015e08:	f1b9 0901 	subs.w	r9, r9, #1
 8015e0c:	d505      	bpl.n	8015e1a <_fwalk_sglue+0x22>
 8015e0e:	6824      	ldr	r4, [r4, #0]
 8015e10:	2c00      	cmp	r4, #0
 8015e12:	d1f7      	bne.n	8015e04 <_fwalk_sglue+0xc>
 8015e14:	4630      	mov	r0, r6
 8015e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e1a:	89ab      	ldrh	r3, [r5, #12]
 8015e1c:	2b01      	cmp	r3, #1
 8015e1e:	d907      	bls.n	8015e30 <_fwalk_sglue+0x38>
 8015e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015e24:	3301      	adds	r3, #1
 8015e26:	d003      	beq.n	8015e30 <_fwalk_sglue+0x38>
 8015e28:	4629      	mov	r1, r5
 8015e2a:	4638      	mov	r0, r7
 8015e2c:	47c0      	blx	r8
 8015e2e:	4306      	orrs	r6, r0
 8015e30:	3568      	adds	r5, #104	@ 0x68
 8015e32:	e7e9      	b.n	8015e08 <_fwalk_sglue+0x10>

08015e34 <iprintf>:
 8015e34:	b40f      	push	{r0, r1, r2, r3}
 8015e36:	b507      	push	{r0, r1, r2, lr}
 8015e38:	4906      	ldr	r1, [pc, #24]	@ (8015e54 <iprintf+0x20>)
 8015e3a:	ab04      	add	r3, sp, #16
 8015e3c:	6808      	ldr	r0, [r1, #0]
 8015e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e42:	6881      	ldr	r1, [r0, #8]
 8015e44:	9301      	str	r3, [sp, #4]
 8015e46:	f000 fb4b 	bl	80164e0 <_vfiprintf_r>
 8015e4a:	b003      	add	sp, #12
 8015e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015e50:	b004      	add	sp, #16
 8015e52:	4770      	bx	lr
 8015e54:	20000130 	.word	0x20000130

08015e58 <sniprintf>:
 8015e58:	b40c      	push	{r2, r3}
 8015e5a:	4b18      	ldr	r3, [pc, #96]	@ (8015ebc <sniprintf+0x64>)
 8015e5c:	b530      	push	{r4, r5, lr}
 8015e5e:	1e0c      	subs	r4, r1, #0
 8015e60:	b09d      	sub	sp, #116	@ 0x74
 8015e62:	681d      	ldr	r5, [r3, #0]
 8015e64:	da08      	bge.n	8015e78 <sniprintf+0x20>
 8015e66:	238b      	movs	r3, #139	@ 0x8b
 8015e68:	f04f 30ff 	mov.w	r0, #4294967295
 8015e6c:	602b      	str	r3, [r5, #0]
 8015e6e:	b01d      	add	sp, #116	@ 0x74
 8015e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e74:	b002      	add	sp, #8
 8015e76:	4770      	bx	lr
 8015e78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015e7c:	9002      	str	r0, [sp, #8]
 8015e7e:	9006      	str	r0, [sp, #24]
 8015e80:	a902      	add	r1, sp, #8
 8015e82:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015e86:	bf14      	ite	ne
 8015e88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015e8c:	4623      	moveq	r3, r4
 8015e8e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015e90:	4628      	mov	r0, r5
 8015e92:	9304      	str	r3, [sp, #16]
 8015e94:	9307      	str	r3, [sp, #28]
 8015e96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015e9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015e9e:	ab21      	add	r3, sp, #132	@ 0x84
 8015ea0:	9301      	str	r3, [sp, #4]
 8015ea2:	f000 f9f7 	bl	8016294 <_svfiprintf_r>
 8015ea6:	1c43      	adds	r3, r0, #1
 8015ea8:	bfbc      	itt	lt
 8015eaa:	238b      	movlt	r3, #139	@ 0x8b
 8015eac:	602b      	strlt	r3, [r5, #0]
 8015eae:	2c00      	cmp	r4, #0
 8015eb0:	d0dd      	beq.n	8015e6e <sniprintf+0x16>
 8015eb2:	9b02      	ldr	r3, [sp, #8]
 8015eb4:	2200      	movs	r2, #0
 8015eb6:	701a      	strb	r2, [r3, #0]
 8015eb8:	e7d9      	b.n	8015e6e <sniprintf+0x16>
 8015eba:	bf00      	nop
 8015ebc:	20000130 	.word	0x20000130

08015ec0 <siprintf>:
 8015ec0:	b40e      	push	{r1, r2, r3}
 8015ec2:	b500      	push	{lr}
 8015ec4:	b09c      	sub	sp, #112	@ 0x70
 8015ec6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015eca:	ab1d      	add	r3, sp, #116	@ 0x74
 8015ecc:	9002      	str	r0, [sp, #8]
 8015ece:	9006      	str	r0, [sp, #24]
 8015ed0:	9107      	str	r1, [sp, #28]
 8015ed2:	9104      	str	r1, [sp, #16]
 8015ed4:	4808      	ldr	r0, [pc, #32]	@ (8015ef8 <siprintf+0x38>)
 8015ed6:	4909      	ldr	r1, [pc, #36]	@ (8015efc <siprintf+0x3c>)
 8015ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015edc:	9105      	str	r1, [sp, #20]
 8015ede:	a902      	add	r1, sp, #8
 8015ee0:	6800      	ldr	r0, [r0, #0]
 8015ee2:	9301      	str	r3, [sp, #4]
 8015ee4:	f000 f9d6 	bl	8016294 <_svfiprintf_r>
 8015ee8:	9b02      	ldr	r3, [sp, #8]
 8015eea:	2200      	movs	r2, #0
 8015eec:	701a      	strb	r2, [r3, #0]
 8015eee:	b01c      	add	sp, #112	@ 0x70
 8015ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ef4:	b003      	add	sp, #12
 8015ef6:	4770      	bx	lr
 8015ef8:	20000130 	.word	0x20000130
 8015efc:	ffff0208 	.word	0xffff0208

08015f00 <__sread>:
 8015f00:	b510      	push	{r4, lr}
 8015f02:	460c      	mov	r4, r1
 8015f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f08:	f000 f8b0 	bl	801606c <_read_r>
 8015f0c:	2800      	cmp	r0, #0
 8015f0e:	bfab      	itete	ge
 8015f10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015f12:	89a3      	ldrhlt	r3, [r4, #12]
 8015f14:	181b      	addge	r3, r3, r0
 8015f16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015f1a:	bfac      	ite	ge
 8015f1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015f1e:	81a3      	strhlt	r3, [r4, #12]
 8015f20:	bd10      	pop	{r4, pc}

08015f22 <__swrite>:
 8015f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f26:	461f      	mov	r7, r3
 8015f28:	898b      	ldrh	r3, [r1, #12]
 8015f2a:	4605      	mov	r5, r0
 8015f2c:	460c      	mov	r4, r1
 8015f2e:	05db      	lsls	r3, r3, #23
 8015f30:	4616      	mov	r6, r2
 8015f32:	d505      	bpl.n	8015f40 <__swrite+0x1e>
 8015f34:	2302      	movs	r3, #2
 8015f36:	2200      	movs	r2, #0
 8015f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f3c:	f000 f884 	bl	8016048 <_lseek_r>
 8015f40:	89a3      	ldrh	r3, [r4, #12]
 8015f42:	4632      	mov	r2, r6
 8015f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f48:	4628      	mov	r0, r5
 8015f4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015f4e:	81a3      	strh	r3, [r4, #12]
 8015f50:	463b      	mov	r3, r7
 8015f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f56:	f000 b8ab 	b.w	80160b0 <_write_r>

08015f5a <__sseek>:
 8015f5a:	b510      	push	{r4, lr}
 8015f5c:	460c      	mov	r4, r1
 8015f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f62:	f000 f871 	bl	8016048 <_lseek_r>
 8015f66:	1c43      	adds	r3, r0, #1
 8015f68:	89a3      	ldrh	r3, [r4, #12]
 8015f6a:	bf15      	itete	ne
 8015f6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015f6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015f72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015f76:	81a3      	strheq	r3, [r4, #12]
 8015f78:	bf18      	it	ne
 8015f7a:	81a3      	strhne	r3, [r4, #12]
 8015f7c:	bd10      	pop	{r4, pc}

08015f7e <__sclose>:
 8015f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f82:	f000 b851 	b.w	8016028 <_close_r>

08015f86 <_vsniprintf_r>:
 8015f86:	b530      	push	{r4, r5, lr}
 8015f88:	4614      	mov	r4, r2
 8015f8a:	b09b      	sub	sp, #108	@ 0x6c
 8015f8c:	4605      	mov	r5, r0
 8015f8e:	461a      	mov	r2, r3
 8015f90:	2c00      	cmp	r4, #0
 8015f92:	da05      	bge.n	8015fa0 <_vsniprintf_r+0x1a>
 8015f94:	238b      	movs	r3, #139	@ 0x8b
 8015f96:	6003      	str	r3, [r0, #0]
 8015f98:	f04f 30ff 	mov.w	r0, #4294967295
 8015f9c:	b01b      	add	sp, #108	@ 0x6c
 8015f9e:	bd30      	pop	{r4, r5, pc}
 8015fa0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015fa4:	9100      	str	r1, [sp, #0]
 8015fa6:	9104      	str	r1, [sp, #16]
 8015fa8:	4669      	mov	r1, sp
 8015faa:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015fae:	bf14      	ite	ne
 8015fb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015fb4:	4623      	moveq	r3, r4
 8015fb6:	9302      	str	r3, [sp, #8]
 8015fb8:	9305      	str	r3, [sp, #20]
 8015fba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015fbe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015fc2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015fc4:	f000 f966 	bl	8016294 <_svfiprintf_r>
 8015fc8:	1c43      	adds	r3, r0, #1
 8015fca:	bfbc      	itt	lt
 8015fcc:	238b      	movlt	r3, #139	@ 0x8b
 8015fce:	602b      	strlt	r3, [r5, #0]
 8015fd0:	2c00      	cmp	r4, #0
 8015fd2:	d0e3      	beq.n	8015f9c <_vsniprintf_r+0x16>
 8015fd4:	9b00      	ldr	r3, [sp, #0]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	701a      	strb	r2, [r3, #0]
 8015fda:	e7df      	b.n	8015f9c <_vsniprintf_r+0x16>

08015fdc <vsniprintf>:
 8015fdc:	b507      	push	{r0, r1, r2, lr}
 8015fde:	9300      	str	r3, [sp, #0]
 8015fe0:	4613      	mov	r3, r2
 8015fe2:	460a      	mov	r2, r1
 8015fe4:	4601      	mov	r1, r0
 8015fe6:	4803      	ldr	r0, [pc, #12]	@ (8015ff4 <vsniprintf+0x18>)
 8015fe8:	6800      	ldr	r0, [r0, #0]
 8015fea:	f7ff ffcc 	bl	8015f86 <_vsniprintf_r>
 8015fee:	b003      	add	sp, #12
 8015ff0:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ff4:	20000130 	.word	0x20000130

08015ff8 <memcmp>:
 8015ff8:	3901      	subs	r1, #1
 8015ffa:	4402      	add	r2, r0
 8015ffc:	b510      	push	{r4, lr}
 8015ffe:	4290      	cmp	r0, r2
 8016000:	d101      	bne.n	8016006 <memcmp+0xe>
 8016002:	2000      	movs	r0, #0
 8016004:	e005      	b.n	8016012 <memcmp+0x1a>
 8016006:	7803      	ldrb	r3, [r0, #0]
 8016008:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801600c:	42a3      	cmp	r3, r4
 801600e:	d001      	beq.n	8016014 <memcmp+0x1c>
 8016010:	1b18      	subs	r0, r3, r4
 8016012:	bd10      	pop	{r4, pc}
 8016014:	3001      	adds	r0, #1
 8016016:	e7f2      	b.n	8015ffe <memcmp+0x6>

08016018 <memset>:
 8016018:	4402      	add	r2, r0
 801601a:	4603      	mov	r3, r0
 801601c:	4293      	cmp	r3, r2
 801601e:	d100      	bne.n	8016022 <memset+0xa>
 8016020:	4770      	bx	lr
 8016022:	f803 1b01 	strb.w	r1, [r3], #1
 8016026:	e7f9      	b.n	801601c <memset+0x4>

08016028 <_close_r>:
 8016028:	b538      	push	{r3, r4, r5, lr}
 801602a:	2300      	movs	r3, #0
 801602c:	4d05      	ldr	r5, [pc, #20]	@ (8016044 <_close_r+0x1c>)
 801602e:	4604      	mov	r4, r0
 8016030:	4608      	mov	r0, r1
 8016032:	602b      	str	r3, [r5, #0]
 8016034:	f7ee ff41 	bl	8004eba <_close>
 8016038:	1c43      	adds	r3, r0, #1
 801603a:	d102      	bne.n	8016042 <_close_r+0x1a>
 801603c:	682b      	ldr	r3, [r5, #0]
 801603e:	b103      	cbz	r3, 8016042 <_close_r+0x1a>
 8016040:	6023      	str	r3, [r4, #0]
 8016042:	bd38      	pop	{r3, r4, r5, pc}
 8016044:	20013528 	.word	0x20013528

08016048 <_lseek_r>:
 8016048:	b538      	push	{r3, r4, r5, lr}
 801604a:	4604      	mov	r4, r0
 801604c:	4d06      	ldr	r5, [pc, #24]	@ (8016068 <_lseek_r+0x20>)
 801604e:	4608      	mov	r0, r1
 8016050:	4611      	mov	r1, r2
 8016052:	2200      	movs	r2, #0
 8016054:	602a      	str	r2, [r5, #0]
 8016056:	461a      	mov	r2, r3
 8016058:	f7ee ff56 	bl	8004f08 <_lseek>
 801605c:	1c43      	adds	r3, r0, #1
 801605e:	d102      	bne.n	8016066 <_lseek_r+0x1e>
 8016060:	682b      	ldr	r3, [r5, #0]
 8016062:	b103      	cbz	r3, 8016066 <_lseek_r+0x1e>
 8016064:	6023      	str	r3, [r4, #0]
 8016066:	bd38      	pop	{r3, r4, r5, pc}
 8016068:	20013528 	.word	0x20013528

0801606c <_read_r>:
 801606c:	b538      	push	{r3, r4, r5, lr}
 801606e:	4604      	mov	r4, r0
 8016070:	4d06      	ldr	r5, [pc, #24]	@ (801608c <_read_r+0x20>)
 8016072:	4608      	mov	r0, r1
 8016074:	4611      	mov	r1, r2
 8016076:	2200      	movs	r2, #0
 8016078:	602a      	str	r2, [r5, #0]
 801607a:	461a      	mov	r2, r3
 801607c:	f7ee fee4 	bl	8004e48 <_read>
 8016080:	1c43      	adds	r3, r0, #1
 8016082:	d102      	bne.n	801608a <_read_r+0x1e>
 8016084:	682b      	ldr	r3, [r5, #0]
 8016086:	b103      	cbz	r3, 801608a <_read_r+0x1e>
 8016088:	6023      	str	r3, [r4, #0]
 801608a:	bd38      	pop	{r3, r4, r5, pc}
 801608c:	20013528 	.word	0x20013528

08016090 <_sbrk_r>:
 8016090:	b538      	push	{r3, r4, r5, lr}
 8016092:	2300      	movs	r3, #0
 8016094:	4d05      	ldr	r5, [pc, #20]	@ (80160ac <_sbrk_r+0x1c>)
 8016096:	4604      	mov	r4, r0
 8016098:	4608      	mov	r0, r1
 801609a:	602b      	str	r3, [r5, #0]
 801609c:	f7ee ff42 	bl	8004f24 <_sbrk>
 80160a0:	1c43      	adds	r3, r0, #1
 80160a2:	d102      	bne.n	80160aa <_sbrk_r+0x1a>
 80160a4:	682b      	ldr	r3, [r5, #0]
 80160a6:	b103      	cbz	r3, 80160aa <_sbrk_r+0x1a>
 80160a8:	6023      	str	r3, [r4, #0]
 80160aa:	bd38      	pop	{r3, r4, r5, pc}
 80160ac:	20013528 	.word	0x20013528

080160b0 <_write_r>:
 80160b0:	b538      	push	{r3, r4, r5, lr}
 80160b2:	4604      	mov	r4, r0
 80160b4:	4d06      	ldr	r5, [pc, #24]	@ (80160d0 <_write_r+0x20>)
 80160b6:	4608      	mov	r0, r1
 80160b8:	4611      	mov	r1, r2
 80160ba:	2200      	movs	r2, #0
 80160bc:	602a      	str	r2, [r5, #0]
 80160be:	461a      	mov	r2, r3
 80160c0:	f7ee fedf 	bl	8004e82 <_write>
 80160c4:	1c43      	adds	r3, r0, #1
 80160c6:	d102      	bne.n	80160ce <_write_r+0x1e>
 80160c8:	682b      	ldr	r3, [r5, #0]
 80160ca:	b103      	cbz	r3, 80160ce <_write_r+0x1e>
 80160cc:	6023      	str	r3, [r4, #0]
 80160ce:	bd38      	pop	{r3, r4, r5, pc}
 80160d0:	20013528 	.word	0x20013528

080160d4 <__errno>:
 80160d4:	4b01      	ldr	r3, [pc, #4]	@ (80160dc <__errno+0x8>)
 80160d6:	6818      	ldr	r0, [r3, #0]
 80160d8:	4770      	bx	lr
 80160da:	bf00      	nop
 80160dc:	20000130 	.word	0x20000130

080160e0 <__libc_init_array>:
 80160e0:	b570      	push	{r4, r5, r6, lr}
 80160e2:	4d0d      	ldr	r5, [pc, #52]	@ (8016118 <__libc_init_array+0x38>)
 80160e4:	2600      	movs	r6, #0
 80160e6:	4c0d      	ldr	r4, [pc, #52]	@ (801611c <__libc_init_array+0x3c>)
 80160e8:	1b64      	subs	r4, r4, r5
 80160ea:	10a4      	asrs	r4, r4, #2
 80160ec:	42a6      	cmp	r6, r4
 80160ee:	d109      	bne.n	8016104 <__libc_init_array+0x24>
 80160f0:	4d0b      	ldr	r5, [pc, #44]	@ (8016120 <__libc_init_array+0x40>)
 80160f2:	2600      	movs	r6, #0
 80160f4:	4c0b      	ldr	r4, [pc, #44]	@ (8016124 <__libc_init_array+0x44>)
 80160f6:	f000 febf 	bl	8016e78 <_init>
 80160fa:	1b64      	subs	r4, r4, r5
 80160fc:	10a4      	asrs	r4, r4, #2
 80160fe:	42a6      	cmp	r6, r4
 8016100:	d105      	bne.n	801610e <__libc_init_array+0x2e>
 8016102:	bd70      	pop	{r4, r5, r6, pc}
 8016104:	f855 3b04 	ldr.w	r3, [r5], #4
 8016108:	3601      	adds	r6, #1
 801610a:	4798      	blx	r3
 801610c:	e7ee      	b.n	80160ec <__libc_init_array+0xc>
 801610e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016112:	3601      	adds	r6, #1
 8016114:	4798      	blx	r3
 8016116:	e7f2      	b.n	80160fe <__libc_init_array+0x1e>
 8016118:	08018cdc 	.word	0x08018cdc
 801611c:	08018cdc 	.word	0x08018cdc
 8016120:	08018cdc 	.word	0x08018cdc
 8016124:	08018ce0 	.word	0x08018ce0

08016128 <__retarget_lock_init_recursive>:
 8016128:	4770      	bx	lr

0801612a <__retarget_lock_acquire_recursive>:
 801612a:	4770      	bx	lr

0801612c <__retarget_lock_release_recursive>:
 801612c:	4770      	bx	lr

0801612e <memcpy>:
 801612e:	440a      	add	r2, r1
 8016130:	1e43      	subs	r3, r0, #1
 8016132:	4291      	cmp	r1, r2
 8016134:	d100      	bne.n	8016138 <memcpy+0xa>
 8016136:	4770      	bx	lr
 8016138:	b510      	push	{r4, lr}
 801613a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801613e:	4291      	cmp	r1, r2
 8016140:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016144:	d1f9      	bne.n	801613a <memcpy+0xc>
 8016146:	bd10      	pop	{r4, pc}

08016148 <_free_r>:
 8016148:	b538      	push	{r3, r4, r5, lr}
 801614a:	4605      	mov	r5, r0
 801614c:	2900      	cmp	r1, #0
 801614e:	d041      	beq.n	80161d4 <_free_r+0x8c>
 8016150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016154:	1f0c      	subs	r4, r1, #4
 8016156:	2b00      	cmp	r3, #0
 8016158:	bfb8      	it	lt
 801615a:	18e4      	addlt	r4, r4, r3
 801615c:	f7ff fd9c 	bl	8015c98 <__malloc_lock>
 8016160:	4a1d      	ldr	r2, [pc, #116]	@ (80161d8 <_free_r+0x90>)
 8016162:	6813      	ldr	r3, [r2, #0]
 8016164:	b933      	cbnz	r3, 8016174 <_free_r+0x2c>
 8016166:	6063      	str	r3, [r4, #4]
 8016168:	6014      	str	r4, [r2, #0]
 801616a:	4628      	mov	r0, r5
 801616c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016170:	f7ff bd98 	b.w	8015ca4 <__malloc_unlock>
 8016174:	42a3      	cmp	r3, r4
 8016176:	d908      	bls.n	801618a <_free_r+0x42>
 8016178:	6820      	ldr	r0, [r4, #0]
 801617a:	1821      	adds	r1, r4, r0
 801617c:	428b      	cmp	r3, r1
 801617e:	bf01      	itttt	eq
 8016180:	6819      	ldreq	r1, [r3, #0]
 8016182:	685b      	ldreq	r3, [r3, #4]
 8016184:	1809      	addeq	r1, r1, r0
 8016186:	6021      	streq	r1, [r4, #0]
 8016188:	e7ed      	b.n	8016166 <_free_r+0x1e>
 801618a:	461a      	mov	r2, r3
 801618c:	685b      	ldr	r3, [r3, #4]
 801618e:	b10b      	cbz	r3, 8016194 <_free_r+0x4c>
 8016190:	42a3      	cmp	r3, r4
 8016192:	d9fa      	bls.n	801618a <_free_r+0x42>
 8016194:	6811      	ldr	r1, [r2, #0]
 8016196:	1850      	adds	r0, r2, r1
 8016198:	42a0      	cmp	r0, r4
 801619a:	d10b      	bne.n	80161b4 <_free_r+0x6c>
 801619c:	6820      	ldr	r0, [r4, #0]
 801619e:	4401      	add	r1, r0
 80161a0:	1850      	adds	r0, r2, r1
 80161a2:	6011      	str	r1, [r2, #0]
 80161a4:	4283      	cmp	r3, r0
 80161a6:	d1e0      	bne.n	801616a <_free_r+0x22>
 80161a8:	6818      	ldr	r0, [r3, #0]
 80161aa:	685b      	ldr	r3, [r3, #4]
 80161ac:	4408      	add	r0, r1
 80161ae:	6053      	str	r3, [r2, #4]
 80161b0:	6010      	str	r0, [r2, #0]
 80161b2:	e7da      	b.n	801616a <_free_r+0x22>
 80161b4:	d902      	bls.n	80161bc <_free_r+0x74>
 80161b6:	230c      	movs	r3, #12
 80161b8:	602b      	str	r3, [r5, #0]
 80161ba:	e7d6      	b.n	801616a <_free_r+0x22>
 80161bc:	6820      	ldr	r0, [r4, #0]
 80161be:	1821      	adds	r1, r4, r0
 80161c0:	428b      	cmp	r3, r1
 80161c2:	bf02      	ittt	eq
 80161c4:	6819      	ldreq	r1, [r3, #0]
 80161c6:	685b      	ldreq	r3, [r3, #4]
 80161c8:	1809      	addeq	r1, r1, r0
 80161ca:	6063      	str	r3, [r4, #4]
 80161cc:	bf08      	it	eq
 80161ce:	6021      	streq	r1, [r4, #0]
 80161d0:	6054      	str	r4, [r2, #4]
 80161d2:	e7ca      	b.n	801616a <_free_r+0x22>
 80161d4:	bd38      	pop	{r3, r4, r5, pc}
 80161d6:	bf00      	nop
 80161d8:	200133e8 	.word	0x200133e8

080161dc <__ssputs_r>:
 80161dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161e0:	461f      	mov	r7, r3
 80161e2:	688e      	ldr	r6, [r1, #8]
 80161e4:	4682      	mov	sl, r0
 80161e6:	460c      	mov	r4, r1
 80161e8:	42be      	cmp	r6, r7
 80161ea:	4690      	mov	r8, r2
 80161ec:	680b      	ldr	r3, [r1, #0]
 80161ee:	d82d      	bhi.n	801624c <__ssputs_r+0x70>
 80161f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80161f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80161f8:	d026      	beq.n	8016248 <__ssputs_r+0x6c>
 80161fa:	6965      	ldr	r5, [r4, #20]
 80161fc:	6909      	ldr	r1, [r1, #16]
 80161fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016202:	eba3 0901 	sub.w	r9, r3, r1
 8016206:	1c7b      	adds	r3, r7, #1
 8016208:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801620c:	444b      	add	r3, r9
 801620e:	106d      	asrs	r5, r5, #1
 8016210:	429d      	cmp	r5, r3
 8016212:	bf38      	it	cc
 8016214:	461d      	movcc	r5, r3
 8016216:	0553      	lsls	r3, r2, #21
 8016218:	d527      	bpl.n	801626a <__ssputs_r+0x8e>
 801621a:	4629      	mov	r1, r5
 801621c:	f7ff fcbc 	bl	8015b98 <_malloc_r>
 8016220:	4606      	mov	r6, r0
 8016222:	b360      	cbz	r0, 801627e <__ssputs_r+0xa2>
 8016224:	464a      	mov	r2, r9
 8016226:	6921      	ldr	r1, [r4, #16]
 8016228:	f7ff ff81 	bl	801612e <memcpy>
 801622c:	89a3      	ldrh	r3, [r4, #12]
 801622e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016236:	81a3      	strh	r3, [r4, #12]
 8016238:	6126      	str	r6, [r4, #16]
 801623a:	444e      	add	r6, r9
 801623c:	6165      	str	r5, [r4, #20]
 801623e:	eba5 0509 	sub.w	r5, r5, r9
 8016242:	6026      	str	r6, [r4, #0]
 8016244:	463e      	mov	r6, r7
 8016246:	60a5      	str	r5, [r4, #8]
 8016248:	42be      	cmp	r6, r7
 801624a:	d900      	bls.n	801624e <__ssputs_r+0x72>
 801624c:	463e      	mov	r6, r7
 801624e:	4632      	mov	r2, r6
 8016250:	4641      	mov	r1, r8
 8016252:	6820      	ldr	r0, [r4, #0]
 8016254:	f000 fd2e 	bl	8016cb4 <memmove>
 8016258:	68a3      	ldr	r3, [r4, #8]
 801625a:	2000      	movs	r0, #0
 801625c:	1b9b      	subs	r3, r3, r6
 801625e:	60a3      	str	r3, [r4, #8]
 8016260:	6823      	ldr	r3, [r4, #0]
 8016262:	4433      	add	r3, r6
 8016264:	6023      	str	r3, [r4, #0]
 8016266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801626a:	462a      	mov	r2, r5
 801626c:	f000 fd4a 	bl	8016d04 <_realloc_r>
 8016270:	4606      	mov	r6, r0
 8016272:	2800      	cmp	r0, #0
 8016274:	d1e0      	bne.n	8016238 <__ssputs_r+0x5c>
 8016276:	6921      	ldr	r1, [r4, #16]
 8016278:	4650      	mov	r0, sl
 801627a:	f7ff ff65 	bl	8016148 <_free_r>
 801627e:	230c      	movs	r3, #12
 8016280:	f04f 30ff 	mov.w	r0, #4294967295
 8016284:	f8ca 3000 	str.w	r3, [sl]
 8016288:	89a3      	ldrh	r3, [r4, #12]
 801628a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801628e:	81a3      	strh	r3, [r4, #12]
 8016290:	e7e9      	b.n	8016266 <__ssputs_r+0x8a>
	...

08016294 <_svfiprintf_r>:
 8016294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016298:	4698      	mov	r8, r3
 801629a:	898b      	ldrh	r3, [r1, #12]
 801629c:	b09d      	sub	sp, #116	@ 0x74
 801629e:	4607      	mov	r7, r0
 80162a0:	061b      	lsls	r3, r3, #24
 80162a2:	460d      	mov	r5, r1
 80162a4:	4614      	mov	r4, r2
 80162a6:	d510      	bpl.n	80162ca <_svfiprintf_r+0x36>
 80162a8:	690b      	ldr	r3, [r1, #16]
 80162aa:	b973      	cbnz	r3, 80162ca <_svfiprintf_r+0x36>
 80162ac:	2140      	movs	r1, #64	@ 0x40
 80162ae:	f7ff fc73 	bl	8015b98 <_malloc_r>
 80162b2:	6028      	str	r0, [r5, #0]
 80162b4:	6128      	str	r0, [r5, #16]
 80162b6:	b930      	cbnz	r0, 80162c6 <_svfiprintf_r+0x32>
 80162b8:	230c      	movs	r3, #12
 80162ba:	603b      	str	r3, [r7, #0]
 80162bc:	f04f 30ff 	mov.w	r0, #4294967295
 80162c0:	b01d      	add	sp, #116	@ 0x74
 80162c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162c6:	2340      	movs	r3, #64	@ 0x40
 80162c8:	616b      	str	r3, [r5, #20]
 80162ca:	2300      	movs	r3, #0
 80162cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80162d0:	f04f 0901 	mov.w	r9, #1
 80162d4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8016478 <_svfiprintf_r+0x1e4>
 80162d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80162da:	2320      	movs	r3, #32
 80162dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80162e0:	2330      	movs	r3, #48	@ 0x30
 80162e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80162e6:	4623      	mov	r3, r4
 80162e8:	469a      	mov	sl, r3
 80162ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162ee:	b10a      	cbz	r2, 80162f4 <_svfiprintf_r+0x60>
 80162f0:	2a25      	cmp	r2, #37	@ 0x25
 80162f2:	d1f9      	bne.n	80162e8 <_svfiprintf_r+0x54>
 80162f4:	ebba 0b04 	subs.w	fp, sl, r4
 80162f8:	d00b      	beq.n	8016312 <_svfiprintf_r+0x7e>
 80162fa:	465b      	mov	r3, fp
 80162fc:	4622      	mov	r2, r4
 80162fe:	4629      	mov	r1, r5
 8016300:	4638      	mov	r0, r7
 8016302:	f7ff ff6b 	bl	80161dc <__ssputs_r>
 8016306:	3001      	adds	r0, #1
 8016308:	f000 80a7 	beq.w	801645a <_svfiprintf_r+0x1c6>
 801630c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801630e:	445a      	add	r2, fp
 8016310:	9209      	str	r2, [sp, #36]	@ 0x24
 8016312:	f89a 3000 	ldrb.w	r3, [sl]
 8016316:	2b00      	cmp	r3, #0
 8016318:	f000 809f 	beq.w	801645a <_svfiprintf_r+0x1c6>
 801631c:	2300      	movs	r3, #0
 801631e:	f04f 32ff 	mov.w	r2, #4294967295
 8016322:	f10a 0a01 	add.w	sl, sl, #1
 8016326:	9304      	str	r3, [sp, #16]
 8016328:	9307      	str	r3, [sp, #28]
 801632a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801632e:	931a      	str	r3, [sp, #104]	@ 0x68
 8016330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016334:	4654      	mov	r4, sl
 8016336:	2205      	movs	r2, #5
 8016338:	484f      	ldr	r0, [pc, #316]	@ (8016478 <_svfiprintf_r+0x1e4>)
 801633a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801633e:	f000 fcd3 	bl	8016ce8 <memchr>
 8016342:	9a04      	ldr	r2, [sp, #16]
 8016344:	b9d8      	cbnz	r0, 801637e <_svfiprintf_r+0xea>
 8016346:	06d0      	lsls	r0, r2, #27
 8016348:	bf44      	itt	mi
 801634a:	2320      	movmi	r3, #32
 801634c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016350:	0711      	lsls	r1, r2, #28
 8016352:	bf44      	itt	mi
 8016354:	232b      	movmi	r3, #43	@ 0x2b
 8016356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801635a:	f89a 3000 	ldrb.w	r3, [sl]
 801635e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016360:	d015      	beq.n	801638e <_svfiprintf_r+0xfa>
 8016362:	9a07      	ldr	r2, [sp, #28]
 8016364:	4654      	mov	r4, sl
 8016366:	2000      	movs	r0, #0
 8016368:	f04f 0c0a 	mov.w	ip, #10
 801636c:	4621      	mov	r1, r4
 801636e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016372:	3b30      	subs	r3, #48	@ 0x30
 8016374:	2b09      	cmp	r3, #9
 8016376:	d94b      	bls.n	8016410 <_svfiprintf_r+0x17c>
 8016378:	b1b0      	cbz	r0, 80163a8 <_svfiprintf_r+0x114>
 801637a:	9207      	str	r2, [sp, #28]
 801637c:	e014      	b.n	80163a8 <_svfiprintf_r+0x114>
 801637e:	eba0 0308 	sub.w	r3, r0, r8
 8016382:	46a2      	mov	sl, r4
 8016384:	fa09 f303 	lsl.w	r3, r9, r3
 8016388:	4313      	orrs	r3, r2
 801638a:	9304      	str	r3, [sp, #16]
 801638c:	e7d2      	b.n	8016334 <_svfiprintf_r+0xa0>
 801638e:	9b03      	ldr	r3, [sp, #12]
 8016390:	1d19      	adds	r1, r3, #4
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	2b00      	cmp	r3, #0
 8016396:	9103      	str	r1, [sp, #12]
 8016398:	bfbb      	ittet	lt
 801639a:	425b      	neglt	r3, r3
 801639c:	f042 0202 	orrlt.w	r2, r2, #2
 80163a0:	9307      	strge	r3, [sp, #28]
 80163a2:	9307      	strlt	r3, [sp, #28]
 80163a4:	bfb8      	it	lt
 80163a6:	9204      	strlt	r2, [sp, #16]
 80163a8:	7823      	ldrb	r3, [r4, #0]
 80163aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80163ac:	d10a      	bne.n	80163c4 <_svfiprintf_r+0x130>
 80163ae:	7863      	ldrb	r3, [r4, #1]
 80163b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80163b2:	d132      	bne.n	801641a <_svfiprintf_r+0x186>
 80163b4:	9b03      	ldr	r3, [sp, #12]
 80163b6:	3402      	adds	r4, #2
 80163b8:	1d1a      	adds	r2, r3, #4
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80163c0:	9203      	str	r2, [sp, #12]
 80163c2:	9305      	str	r3, [sp, #20]
 80163c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016488 <_svfiprintf_r+0x1f4>
 80163c8:	2203      	movs	r2, #3
 80163ca:	7821      	ldrb	r1, [r4, #0]
 80163cc:	4650      	mov	r0, sl
 80163ce:	f000 fc8b 	bl	8016ce8 <memchr>
 80163d2:	b138      	cbz	r0, 80163e4 <_svfiprintf_r+0x150>
 80163d4:	eba0 000a 	sub.w	r0, r0, sl
 80163d8:	2240      	movs	r2, #64	@ 0x40
 80163da:	9b04      	ldr	r3, [sp, #16]
 80163dc:	3401      	adds	r4, #1
 80163de:	4082      	lsls	r2, r0
 80163e0:	4313      	orrs	r3, r2
 80163e2:	9304      	str	r3, [sp, #16]
 80163e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163e8:	2206      	movs	r2, #6
 80163ea:	4824      	ldr	r0, [pc, #144]	@ (801647c <_svfiprintf_r+0x1e8>)
 80163ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80163f0:	f000 fc7a 	bl	8016ce8 <memchr>
 80163f4:	2800      	cmp	r0, #0
 80163f6:	d036      	beq.n	8016466 <_svfiprintf_r+0x1d2>
 80163f8:	4b21      	ldr	r3, [pc, #132]	@ (8016480 <_svfiprintf_r+0x1ec>)
 80163fa:	bb1b      	cbnz	r3, 8016444 <_svfiprintf_r+0x1b0>
 80163fc:	9b03      	ldr	r3, [sp, #12]
 80163fe:	3307      	adds	r3, #7
 8016400:	f023 0307 	bic.w	r3, r3, #7
 8016404:	3308      	adds	r3, #8
 8016406:	9303      	str	r3, [sp, #12]
 8016408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801640a:	4433      	add	r3, r6
 801640c:	9309      	str	r3, [sp, #36]	@ 0x24
 801640e:	e76a      	b.n	80162e6 <_svfiprintf_r+0x52>
 8016410:	fb0c 3202 	mla	r2, ip, r2, r3
 8016414:	460c      	mov	r4, r1
 8016416:	2001      	movs	r0, #1
 8016418:	e7a8      	b.n	801636c <_svfiprintf_r+0xd8>
 801641a:	2300      	movs	r3, #0
 801641c:	3401      	adds	r4, #1
 801641e:	f04f 0c0a 	mov.w	ip, #10
 8016422:	4619      	mov	r1, r3
 8016424:	9305      	str	r3, [sp, #20]
 8016426:	4620      	mov	r0, r4
 8016428:	f810 2b01 	ldrb.w	r2, [r0], #1
 801642c:	3a30      	subs	r2, #48	@ 0x30
 801642e:	2a09      	cmp	r2, #9
 8016430:	d903      	bls.n	801643a <_svfiprintf_r+0x1a6>
 8016432:	2b00      	cmp	r3, #0
 8016434:	d0c6      	beq.n	80163c4 <_svfiprintf_r+0x130>
 8016436:	9105      	str	r1, [sp, #20]
 8016438:	e7c4      	b.n	80163c4 <_svfiprintf_r+0x130>
 801643a:	fb0c 2101 	mla	r1, ip, r1, r2
 801643e:	4604      	mov	r4, r0
 8016440:	2301      	movs	r3, #1
 8016442:	e7f0      	b.n	8016426 <_svfiprintf_r+0x192>
 8016444:	ab03      	add	r3, sp, #12
 8016446:	462a      	mov	r2, r5
 8016448:	a904      	add	r1, sp, #16
 801644a:	4638      	mov	r0, r7
 801644c:	9300      	str	r3, [sp, #0]
 801644e:	4b0d      	ldr	r3, [pc, #52]	@ (8016484 <_svfiprintf_r+0x1f0>)
 8016450:	f3af 8000 	nop.w
 8016454:	1c42      	adds	r2, r0, #1
 8016456:	4606      	mov	r6, r0
 8016458:	d1d6      	bne.n	8016408 <_svfiprintf_r+0x174>
 801645a:	89ab      	ldrh	r3, [r5, #12]
 801645c:	065b      	lsls	r3, r3, #25
 801645e:	f53f af2d 	bmi.w	80162bc <_svfiprintf_r+0x28>
 8016462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016464:	e72c      	b.n	80162c0 <_svfiprintf_r+0x2c>
 8016466:	ab03      	add	r3, sp, #12
 8016468:	462a      	mov	r2, r5
 801646a:	a904      	add	r1, sp, #16
 801646c:	4638      	mov	r0, r7
 801646e:	9300      	str	r3, [sp, #0]
 8016470:	4b04      	ldr	r3, [pc, #16]	@ (8016484 <_svfiprintf_r+0x1f0>)
 8016472:	f000 f9bf 	bl	80167f4 <_printf_i>
 8016476:	e7ed      	b.n	8016454 <_svfiprintf_r+0x1c0>
 8016478:	08018ca0 	.word	0x08018ca0
 801647c:	08018caa 	.word	0x08018caa
 8016480:	00000000 	.word	0x00000000
 8016484:	080161dd 	.word	0x080161dd
 8016488:	08018ca6 	.word	0x08018ca6

0801648c <__sfputc_r>:
 801648c:	6893      	ldr	r3, [r2, #8]
 801648e:	3b01      	subs	r3, #1
 8016490:	2b00      	cmp	r3, #0
 8016492:	6093      	str	r3, [r2, #8]
 8016494:	b410      	push	{r4}
 8016496:	da08      	bge.n	80164aa <__sfputc_r+0x1e>
 8016498:	6994      	ldr	r4, [r2, #24]
 801649a:	42a3      	cmp	r3, r4
 801649c:	db01      	blt.n	80164a2 <__sfputc_r+0x16>
 801649e:	290a      	cmp	r1, #10
 80164a0:	d103      	bne.n	80164aa <__sfputc_r+0x1e>
 80164a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164a6:	f000 bb71 	b.w	8016b8c <__swbuf_r>
 80164aa:	6813      	ldr	r3, [r2, #0]
 80164ac:	1c58      	adds	r0, r3, #1
 80164ae:	6010      	str	r0, [r2, #0]
 80164b0:	4608      	mov	r0, r1
 80164b2:	7019      	strb	r1, [r3, #0]
 80164b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164b8:	4770      	bx	lr

080164ba <__sfputs_r>:
 80164ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164bc:	4606      	mov	r6, r0
 80164be:	460f      	mov	r7, r1
 80164c0:	4614      	mov	r4, r2
 80164c2:	18d5      	adds	r5, r2, r3
 80164c4:	42ac      	cmp	r4, r5
 80164c6:	d101      	bne.n	80164cc <__sfputs_r+0x12>
 80164c8:	2000      	movs	r0, #0
 80164ca:	e007      	b.n	80164dc <__sfputs_r+0x22>
 80164cc:	463a      	mov	r2, r7
 80164ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164d2:	4630      	mov	r0, r6
 80164d4:	f7ff ffda 	bl	801648c <__sfputc_r>
 80164d8:	1c43      	adds	r3, r0, #1
 80164da:	d1f3      	bne.n	80164c4 <__sfputs_r+0xa>
 80164dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080164e0 <_vfiprintf_r>:
 80164e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e4:	460d      	mov	r5, r1
 80164e6:	b09d      	sub	sp, #116	@ 0x74
 80164e8:	4614      	mov	r4, r2
 80164ea:	4698      	mov	r8, r3
 80164ec:	4606      	mov	r6, r0
 80164ee:	b118      	cbz	r0, 80164f8 <_vfiprintf_r+0x18>
 80164f0:	6a03      	ldr	r3, [r0, #32]
 80164f2:	b90b      	cbnz	r3, 80164f8 <_vfiprintf_r+0x18>
 80164f4:	f7ff fc68 	bl	8015dc8 <__sinit>
 80164f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80164fa:	07d9      	lsls	r1, r3, #31
 80164fc:	d405      	bmi.n	801650a <_vfiprintf_r+0x2a>
 80164fe:	89ab      	ldrh	r3, [r5, #12]
 8016500:	059a      	lsls	r2, r3, #22
 8016502:	d402      	bmi.n	801650a <_vfiprintf_r+0x2a>
 8016504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016506:	f7ff fe10 	bl	801612a <__retarget_lock_acquire_recursive>
 801650a:	89ab      	ldrh	r3, [r5, #12]
 801650c:	071b      	lsls	r3, r3, #28
 801650e:	d501      	bpl.n	8016514 <_vfiprintf_r+0x34>
 8016510:	692b      	ldr	r3, [r5, #16]
 8016512:	b99b      	cbnz	r3, 801653c <_vfiprintf_r+0x5c>
 8016514:	4629      	mov	r1, r5
 8016516:	4630      	mov	r0, r6
 8016518:	f000 fb76 	bl	8016c08 <__swsetup_r>
 801651c:	b170      	cbz	r0, 801653c <_vfiprintf_r+0x5c>
 801651e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016520:	07dc      	lsls	r4, r3, #31
 8016522:	d504      	bpl.n	801652e <_vfiprintf_r+0x4e>
 8016524:	f04f 30ff 	mov.w	r0, #4294967295
 8016528:	b01d      	add	sp, #116	@ 0x74
 801652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801652e:	89ab      	ldrh	r3, [r5, #12]
 8016530:	0598      	lsls	r0, r3, #22
 8016532:	d4f7      	bmi.n	8016524 <_vfiprintf_r+0x44>
 8016534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016536:	f7ff fdf9 	bl	801612c <__retarget_lock_release_recursive>
 801653a:	e7f3      	b.n	8016524 <_vfiprintf_r+0x44>
 801653c:	2300      	movs	r3, #0
 801653e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016542:	f04f 0901 	mov.w	r9, #1
 8016546:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 80166fc <_vfiprintf_r+0x21c>
 801654a:	9309      	str	r3, [sp, #36]	@ 0x24
 801654c:	2320      	movs	r3, #32
 801654e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016552:	2330      	movs	r3, #48	@ 0x30
 8016554:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016558:	4623      	mov	r3, r4
 801655a:	469a      	mov	sl, r3
 801655c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016560:	b10a      	cbz	r2, 8016566 <_vfiprintf_r+0x86>
 8016562:	2a25      	cmp	r2, #37	@ 0x25
 8016564:	d1f9      	bne.n	801655a <_vfiprintf_r+0x7a>
 8016566:	ebba 0b04 	subs.w	fp, sl, r4
 801656a:	d00b      	beq.n	8016584 <_vfiprintf_r+0xa4>
 801656c:	465b      	mov	r3, fp
 801656e:	4622      	mov	r2, r4
 8016570:	4629      	mov	r1, r5
 8016572:	4630      	mov	r0, r6
 8016574:	f7ff ffa1 	bl	80164ba <__sfputs_r>
 8016578:	3001      	adds	r0, #1
 801657a:	f000 80a7 	beq.w	80166cc <_vfiprintf_r+0x1ec>
 801657e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016580:	445a      	add	r2, fp
 8016582:	9209      	str	r2, [sp, #36]	@ 0x24
 8016584:	f89a 3000 	ldrb.w	r3, [sl]
 8016588:	2b00      	cmp	r3, #0
 801658a:	f000 809f 	beq.w	80166cc <_vfiprintf_r+0x1ec>
 801658e:	2300      	movs	r3, #0
 8016590:	f04f 32ff 	mov.w	r2, #4294967295
 8016594:	f10a 0a01 	add.w	sl, sl, #1
 8016598:	9304      	str	r3, [sp, #16]
 801659a:	9307      	str	r3, [sp, #28]
 801659c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80165a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80165a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80165a6:	4654      	mov	r4, sl
 80165a8:	2205      	movs	r2, #5
 80165aa:	4854      	ldr	r0, [pc, #336]	@ (80166fc <_vfiprintf_r+0x21c>)
 80165ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165b0:	f000 fb9a 	bl	8016ce8 <memchr>
 80165b4:	9a04      	ldr	r2, [sp, #16]
 80165b6:	b9d8      	cbnz	r0, 80165f0 <_vfiprintf_r+0x110>
 80165b8:	06d1      	lsls	r1, r2, #27
 80165ba:	bf44      	itt	mi
 80165bc:	2320      	movmi	r3, #32
 80165be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80165c2:	0713      	lsls	r3, r2, #28
 80165c4:	bf44      	itt	mi
 80165c6:	232b      	movmi	r3, #43	@ 0x2b
 80165c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80165cc:	f89a 3000 	ldrb.w	r3, [sl]
 80165d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80165d2:	d015      	beq.n	8016600 <_vfiprintf_r+0x120>
 80165d4:	9a07      	ldr	r2, [sp, #28]
 80165d6:	4654      	mov	r4, sl
 80165d8:	2000      	movs	r0, #0
 80165da:	f04f 0c0a 	mov.w	ip, #10
 80165de:	4621      	mov	r1, r4
 80165e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80165e4:	3b30      	subs	r3, #48	@ 0x30
 80165e6:	2b09      	cmp	r3, #9
 80165e8:	d94b      	bls.n	8016682 <_vfiprintf_r+0x1a2>
 80165ea:	b1b0      	cbz	r0, 801661a <_vfiprintf_r+0x13a>
 80165ec:	9207      	str	r2, [sp, #28]
 80165ee:	e014      	b.n	801661a <_vfiprintf_r+0x13a>
 80165f0:	eba0 0308 	sub.w	r3, r0, r8
 80165f4:	46a2      	mov	sl, r4
 80165f6:	fa09 f303 	lsl.w	r3, r9, r3
 80165fa:	4313      	orrs	r3, r2
 80165fc:	9304      	str	r3, [sp, #16]
 80165fe:	e7d2      	b.n	80165a6 <_vfiprintf_r+0xc6>
 8016600:	9b03      	ldr	r3, [sp, #12]
 8016602:	1d19      	adds	r1, r3, #4
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	2b00      	cmp	r3, #0
 8016608:	9103      	str	r1, [sp, #12]
 801660a:	bfbb      	ittet	lt
 801660c:	425b      	neglt	r3, r3
 801660e:	f042 0202 	orrlt.w	r2, r2, #2
 8016612:	9307      	strge	r3, [sp, #28]
 8016614:	9307      	strlt	r3, [sp, #28]
 8016616:	bfb8      	it	lt
 8016618:	9204      	strlt	r2, [sp, #16]
 801661a:	7823      	ldrb	r3, [r4, #0]
 801661c:	2b2e      	cmp	r3, #46	@ 0x2e
 801661e:	d10a      	bne.n	8016636 <_vfiprintf_r+0x156>
 8016620:	7863      	ldrb	r3, [r4, #1]
 8016622:	2b2a      	cmp	r3, #42	@ 0x2a
 8016624:	d132      	bne.n	801668c <_vfiprintf_r+0x1ac>
 8016626:	9b03      	ldr	r3, [sp, #12]
 8016628:	3402      	adds	r4, #2
 801662a:	1d1a      	adds	r2, r3, #4
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016632:	9203      	str	r2, [sp, #12]
 8016634:	9305      	str	r3, [sp, #20]
 8016636:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801670c <_vfiprintf_r+0x22c>
 801663a:	2203      	movs	r2, #3
 801663c:	7821      	ldrb	r1, [r4, #0]
 801663e:	4650      	mov	r0, sl
 8016640:	f000 fb52 	bl	8016ce8 <memchr>
 8016644:	b138      	cbz	r0, 8016656 <_vfiprintf_r+0x176>
 8016646:	eba0 000a 	sub.w	r0, r0, sl
 801664a:	2240      	movs	r2, #64	@ 0x40
 801664c:	9b04      	ldr	r3, [sp, #16]
 801664e:	3401      	adds	r4, #1
 8016650:	4082      	lsls	r2, r0
 8016652:	4313      	orrs	r3, r2
 8016654:	9304      	str	r3, [sp, #16]
 8016656:	f814 1b01 	ldrb.w	r1, [r4], #1
 801665a:	2206      	movs	r2, #6
 801665c:	4828      	ldr	r0, [pc, #160]	@ (8016700 <_vfiprintf_r+0x220>)
 801665e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016662:	f000 fb41 	bl	8016ce8 <memchr>
 8016666:	2800      	cmp	r0, #0
 8016668:	d03f      	beq.n	80166ea <_vfiprintf_r+0x20a>
 801666a:	4b26      	ldr	r3, [pc, #152]	@ (8016704 <_vfiprintf_r+0x224>)
 801666c:	bb1b      	cbnz	r3, 80166b6 <_vfiprintf_r+0x1d6>
 801666e:	9b03      	ldr	r3, [sp, #12]
 8016670:	3307      	adds	r3, #7
 8016672:	f023 0307 	bic.w	r3, r3, #7
 8016676:	3308      	adds	r3, #8
 8016678:	9303      	str	r3, [sp, #12]
 801667a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801667c:	443b      	add	r3, r7
 801667e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016680:	e76a      	b.n	8016558 <_vfiprintf_r+0x78>
 8016682:	fb0c 3202 	mla	r2, ip, r2, r3
 8016686:	460c      	mov	r4, r1
 8016688:	2001      	movs	r0, #1
 801668a:	e7a8      	b.n	80165de <_vfiprintf_r+0xfe>
 801668c:	2300      	movs	r3, #0
 801668e:	3401      	adds	r4, #1
 8016690:	f04f 0c0a 	mov.w	ip, #10
 8016694:	4619      	mov	r1, r3
 8016696:	9305      	str	r3, [sp, #20]
 8016698:	4620      	mov	r0, r4
 801669a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801669e:	3a30      	subs	r2, #48	@ 0x30
 80166a0:	2a09      	cmp	r2, #9
 80166a2:	d903      	bls.n	80166ac <_vfiprintf_r+0x1cc>
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d0c6      	beq.n	8016636 <_vfiprintf_r+0x156>
 80166a8:	9105      	str	r1, [sp, #20]
 80166aa:	e7c4      	b.n	8016636 <_vfiprintf_r+0x156>
 80166ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80166b0:	4604      	mov	r4, r0
 80166b2:	2301      	movs	r3, #1
 80166b4:	e7f0      	b.n	8016698 <_vfiprintf_r+0x1b8>
 80166b6:	ab03      	add	r3, sp, #12
 80166b8:	462a      	mov	r2, r5
 80166ba:	a904      	add	r1, sp, #16
 80166bc:	4630      	mov	r0, r6
 80166be:	9300      	str	r3, [sp, #0]
 80166c0:	4b11      	ldr	r3, [pc, #68]	@ (8016708 <_vfiprintf_r+0x228>)
 80166c2:	f3af 8000 	nop.w
 80166c6:	4607      	mov	r7, r0
 80166c8:	1c78      	adds	r0, r7, #1
 80166ca:	d1d6      	bne.n	801667a <_vfiprintf_r+0x19a>
 80166cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80166ce:	07d9      	lsls	r1, r3, #31
 80166d0:	d405      	bmi.n	80166de <_vfiprintf_r+0x1fe>
 80166d2:	89ab      	ldrh	r3, [r5, #12]
 80166d4:	059a      	lsls	r2, r3, #22
 80166d6:	d402      	bmi.n	80166de <_vfiprintf_r+0x1fe>
 80166d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80166da:	f7ff fd27 	bl	801612c <__retarget_lock_release_recursive>
 80166de:	89ab      	ldrh	r3, [r5, #12]
 80166e0:	065b      	lsls	r3, r3, #25
 80166e2:	f53f af1f 	bmi.w	8016524 <_vfiprintf_r+0x44>
 80166e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80166e8:	e71e      	b.n	8016528 <_vfiprintf_r+0x48>
 80166ea:	ab03      	add	r3, sp, #12
 80166ec:	462a      	mov	r2, r5
 80166ee:	a904      	add	r1, sp, #16
 80166f0:	4630      	mov	r0, r6
 80166f2:	9300      	str	r3, [sp, #0]
 80166f4:	4b04      	ldr	r3, [pc, #16]	@ (8016708 <_vfiprintf_r+0x228>)
 80166f6:	f000 f87d 	bl	80167f4 <_printf_i>
 80166fa:	e7e4      	b.n	80166c6 <_vfiprintf_r+0x1e6>
 80166fc:	08018ca0 	.word	0x08018ca0
 8016700:	08018caa 	.word	0x08018caa
 8016704:	00000000 	.word	0x00000000
 8016708:	080164bb 	.word	0x080164bb
 801670c:	08018ca6 	.word	0x08018ca6

08016710 <_printf_common>:
 8016710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016714:	4616      	mov	r6, r2
 8016716:	4698      	mov	r8, r3
 8016718:	688a      	ldr	r2, [r1, #8]
 801671a:	4607      	mov	r7, r0
 801671c:	690b      	ldr	r3, [r1, #16]
 801671e:	460c      	mov	r4, r1
 8016720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016724:	4293      	cmp	r3, r2
 8016726:	bfb8      	it	lt
 8016728:	4613      	movlt	r3, r2
 801672a:	6033      	str	r3, [r6, #0]
 801672c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016730:	b10a      	cbz	r2, 8016736 <_printf_common+0x26>
 8016732:	3301      	adds	r3, #1
 8016734:	6033      	str	r3, [r6, #0]
 8016736:	6823      	ldr	r3, [r4, #0]
 8016738:	0699      	lsls	r1, r3, #26
 801673a:	bf42      	ittt	mi
 801673c:	6833      	ldrmi	r3, [r6, #0]
 801673e:	3302      	addmi	r3, #2
 8016740:	6033      	strmi	r3, [r6, #0]
 8016742:	6825      	ldr	r5, [r4, #0]
 8016744:	f015 0506 	ands.w	r5, r5, #6
 8016748:	d106      	bne.n	8016758 <_printf_common+0x48>
 801674a:	f104 0a19 	add.w	sl, r4, #25
 801674e:	68e3      	ldr	r3, [r4, #12]
 8016750:	6832      	ldr	r2, [r6, #0]
 8016752:	1a9b      	subs	r3, r3, r2
 8016754:	42ab      	cmp	r3, r5
 8016756:	dc2b      	bgt.n	80167b0 <_printf_common+0xa0>
 8016758:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801675c:	6822      	ldr	r2, [r4, #0]
 801675e:	3b00      	subs	r3, #0
 8016760:	bf18      	it	ne
 8016762:	2301      	movne	r3, #1
 8016764:	0692      	lsls	r2, r2, #26
 8016766:	d430      	bmi.n	80167ca <_printf_common+0xba>
 8016768:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801676c:	4641      	mov	r1, r8
 801676e:	4638      	mov	r0, r7
 8016770:	47c8      	blx	r9
 8016772:	3001      	adds	r0, #1
 8016774:	d023      	beq.n	80167be <_printf_common+0xae>
 8016776:	6823      	ldr	r3, [r4, #0]
 8016778:	341a      	adds	r4, #26
 801677a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801677e:	f003 0306 	and.w	r3, r3, #6
 8016782:	2b04      	cmp	r3, #4
 8016784:	bf0a      	itet	eq
 8016786:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801678a:	2500      	movne	r5, #0
 801678c:	6833      	ldreq	r3, [r6, #0]
 801678e:	f04f 0600 	mov.w	r6, #0
 8016792:	bf08      	it	eq
 8016794:	1aed      	subeq	r5, r5, r3
 8016796:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801679a:	bf08      	it	eq
 801679c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80167a0:	4293      	cmp	r3, r2
 80167a2:	bfc4      	itt	gt
 80167a4:	1a9b      	subgt	r3, r3, r2
 80167a6:	18ed      	addgt	r5, r5, r3
 80167a8:	42b5      	cmp	r5, r6
 80167aa:	d11a      	bne.n	80167e2 <_printf_common+0xd2>
 80167ac:	2000      	movs	r0, #0
 80167ae:	e008      	b.n	80167c2 <_printf_common+0xb2>
 80167b0:	2301      	movs	r3, #1
 80167b2:	4652      	mov	r2, sl
 80167b4:	4641      	mov	r1, r8
 80167b6:	4638      	mov	r0, r7
 80167b8:	47c8      	blx	r9
 80167ba:	3001      	adds	r0, #1
 80167bc:	d103      	bne.n	80167c6 <_printf_common+0xb6>
 80167be:	f04f 30ff 	mov.w	r0, #4294967295
 80167c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167c6:	3501      	adds	r5, #1
 80167c8:	e7c1      	b.n	801674e <_printf_common+0x3e>
 80167ca:	18e1      	adds	r1, r4, r3
 80167cc:	1c5a      	adds	r2, r3, #1
 80167ce:	2030      	movs	r0, #48	@ 0x30
 80167d0:	3302      	adds	r3, #2
 80167d2:	4422      	add	r2, r4
 80167d4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80167d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80167dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80167e0:	e7c2      	b.n	8016768 <_printf_common+0x58>
 80167e2:	2301      	movs	r3, #1
 80167e4:	4622      	mov	r2, r4
 80167e6:	4641      	mov	r1, r8
 80167e8:	4638      	mov	r0, r7
 80167ea:	47c8      	blx	r9
 80167ec:	3001      	adds	r0, #1
 80167ee:	d0e6      	beq.n	80167be <_printf_common+0xae>
 80167f0:	3601      	adds	r6, #1
 80167f2:	e7d9      	b.n	80167a8 <_printf_common+0x98>

080167f4 <_printf_i>:
 80167f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80167f8:	7e0f      	ldrb	r7, [r1, #24]
 80167fa:	4691      	mov	r9, r2
 80167fc:	4680      	mov	r8, r0
 80167fe:	460c      	mov	r4, r1
 8016800:	2f78      	cmp	r7, #120	@ 0x78
 8016802:	469a      	mov	sl, r3
 8016804:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016806:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801680a:	d807      	bhi.n	801681c <_printf_i+0x28>
 801680c:	2f62      	cmp	r7, #98	@ 0x62
 801680e:	d80a      	bhi.n	8016826 <_printf_i+0x32>
 8016810:	2f00      	cmp	r7, #0
 8016812:	f000 80d2 	beq.w	80169ba <_printf_i+0x1c6>
 8016816:	2f58      	cmp	r7, #88	@ 0x58
 8016818:	f000 80b9 	beq.w	801698e <_printf_i+0x19a>
 801681c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016820:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016824:	e03a      	b.n	801689c <_printf_i+0xa8>
 8016826:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801682a:	2b15      	cmp	r3, #21
 801682c:	d8f6      	bhi.n	801681c <_printf_i+0x28>
 801682e:	a101      	add	r1, pc, #4	@ (adr r1, 8016834 <_printf_i+0x40>)
 8016830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016834:	0801688d 	.word	0x0801688d
 8016838:	080168a1 	.word	0x080168a1
 801683c:	0801681d 	.word	0x0801681d
 8016840:	0801681d 	.word	0x0801681d
 8016844:	0801681d 	.word	0x0801681d
 8016848:	0801681d 	.word	0x0801681d
 801684c:	080168a1 	.word	0x080168a1
 8016850:	0801681d 	.word	0x0801681d
 8016854:	0801681d 	.word	0x0801681d
 8016858:	0801681d 	.word	0x0801681d
 801685c:	0801681d 	.word	0x0801681d
 8016860:	080169a1 	.word	0x080169a1
 8016864:	080168cb 	.word	0x080168cb
 8016868:	0801695b 	.word	0x0801695b
 801686c:	0801681d 	.word	0x0801681d
 8016870:	0801681d 	.word	0x0801681d
 8016874:	080169c3 	.word	0x080169c3
 8016878:	0801681d 	.word	0x0801681d
 801687c:	080168cb 	.word	0x080168cb
 8016880:	0801681d 	.word	0x0801681d
 8016884:	0801681d 	.word	0x0801681d
 8016888:	08016963 	.word	0x08016963
 801688c:	6833      	ldr	r3, [r6, #0]
 801688e:	1d1a      	adds	r2, r3, #4
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	6032      	str	r2, [r6, #0]
 8016894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016898:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801689c:	2301      	movs	r3, #1
 801689e:	e09d      	b.n	80169dc <_printf_i+0x1e8>
 80168a0:	6833      	ldr	r3, [r6, #0]
 80168a2:	6820      	ldr	r0, [r4, #0]
 80168a4:	1d19      	adds	r1, r3, #4
 80168a6:	6031      	str	r1, [r6, #0]
 80168a8:	0606      	lsls	r6, r0, #24
 80168aa:	d501      	bpl.n	80168b0 <_printf_i+0xbc>
 80168ac:	681d      	ldr	r5, [r3, #0]
 80168ae:	e003      	b.n	80168b8 <_printf_i+0xc4>
 80168b0:	0645      	lsls	r5, r0, #25
 80168b2:	d5fb      	bpl.n	80168ac <_printf_i+0xb8>
 80168b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80168b8:	2d00      	cmp	r5, #0
 80168ba:	da03      	bge.n	80168c4 <_printf_i+0xd0>
 80168bc:	232d      	movs	r3, #45	@ 0x2d
 80168be:	426d      	negs	r5, r5
 80168c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80168c4:	4859      	ldr	r0, [pc, #356]	@ (8016a2c <_printf_i+0x238>)
 80168c6:	230a      	movs	r3, #10
 80168c8:	e011      	b.n	80168ee <_printf_i+0xfa>
 80168ca:	6821      	ldr	r1, [r4, #0]
 80168cc:	6833      	ldr	r3, [r6, #0]
 80168ce:	0608      	lsls	r0, r1, #24
 80168d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80168d4:	d402      	bmi.n	80168dc <_printf_i+0xe8>
 80168d6:	0649      	lsls	r1, r1, #25
 80168d8:	bf48      	it	mi
 80168da:	b2ad      	uxthmi	r5, r5
 80168dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80168de:	6033      	str	r3, [r6, #0]
 80168e0:	4852      	ldr	r0, [pc, #328]	@ (8016a2c <_printf_i+0x238>)
 80168e2:	bf14      	ite	ne
 80168e4:	230a      	movne	r3, #10
 80168e6:	2308      	moveq	r3, #8
 80168e8:	2100      	movs	r1, #0
 80168ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80168ee:	6866      	ldr	r6, [r4, #4]
 80168f0:	2e00      	cmp	r6, #0
 80168f2:	60a6      	str	r6, [r4, #8]
 80168f4:	bfa2      	ittt	ge
 80168f6:	6821      	ldrge	r1, [r4, #0]
 80168f8:	f021 0104 	bicge.w	r1, r1, #4
 80168fc:	6021      	strge	r1, [r4, #0]
 80168fe:	b90d      	cbnz	r5, 8016904 <_printf_i+0x110>
 8016900:	2e00      	cmp	r6, #0
 8016902:	d04b      	beq.n	801699c <_printf_i+0x1a8>
 8016904:	4616      	mov	r6, r2
 8016906:	fbb5 f1f3 	udiv	r1, r5, r3
 801690a:	fb03 5711 	mls	r7, r3, r1, r5
 801690e:	5dc7      	ldrb	r7, [r0, r7]
 8016910:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016914:	462f      	mov	r7, r5
 8016916:	460d      	mov	r5, r1
 8016918:	42bb      	cmp	r3, r7
 801691a:	d9f4      	bls.n	8016906 <_printf_i+0x112>
 801691c:	2b08      	cmp	r3, #8
 801691e:	d10b      	bne.n	8016938 <_printf_i+0x144>
 8016920:	6823      	ldr	r3, [r4, #0]
 8016922:	07df      	lsls	r7, r3, #31
 8016924:	d508      	bpl.n	8016938 <_printf_i+0x144>
 8016926:	6923      	ldr	r3, [r4, #16]
 8016928:	6861      	ldr	r1, [r4, #4]
 801692a:	4299      	cmp	r1, r3
 801692c:	bfde      	ittt	le
 801692e:	2330      	movle	r3, #48	@ 0x30
 8016930:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016934:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016938:	1b92      	subs	r2, r2, r6
 801693a:	6122      	str	r2, [r4, #16]
 801693c:	464b      	mov	r3, r9
 801693e:	aa03      	add	r2, sp, #12
 8016940:	4621      	mov	r1, r4
 8016942:	4640      	mov	r0, r8
 8016944:	f8cd a000 	str.w	sl, [sp]
 8016948:	f7ff fee2 	bl	8016710 <_printf_common>
 801694c:	3001      	adds	r0, #1
 801694e:	d14a      	bne.n	80169e6 <_printf_i+0x1f2>
 8016950:	f04f 30ff 	mov.w	r0, #4294967295
 8016954:	b004      	add	sp, #16
 8016956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801695a:	6823      	ldr	r3, [r4, #0]
 801695c:	f043 0320 	orr.w	r3, r3, #32
 8016960:	6023      	str	r3, [r4, #0]
 8016962:	2778      	movs	r7, #120	@ 0x78
 8016964:	4832      	ldr	r0, [pc, #200]	@ (8016a30 <_printf_i+0x23c>)
 8016966:	6823      	ldr	r3, [r4, #0]
 8016968:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801696c:	061f      	lsls	r7, r3, #24
 801696e:	6831      	ldr	r1, [r6, #0]
 8016970:	f851 5b04 	ldr.w	r5, [r1], #4
 8016974:	d402      	bmi.n	801697c <_printf_i+0x188>
 8016976:	065f      	lsls	r7, r3, #25
 8016978:	bf48      	it	mi
 801697a:	b2ad      	uxthmi	r5, r5
 801697c:	6031      	str	r1, [r6, #0]
 801697e:	07d9      	lsls	r1, r3, #31
 8016980:	bf44      	itt	mi
 8016982:	f043 0320 	orrmi.w	r3, r3, #32
 8016986:	6023      	strmi	r3, [r4, #0]
 8016988:	b11d      	cbz	r5, 8016992 <_printf_i+0x19e>
 801698a:	2310      	movs	r3, #16
 801698c:	e7ac      	b.n	80168e8 <_printf_i+0xf4>
 801698e:	4827      	ldr	r0, [pc, #156]	@ (8016a2c <_printf_i+0x238>)
 8016990:	e7e9      	b.n	8016966 <_printf_i+0x172>
 8016992:	6823      	ldr	r3, [r4, #0]
 8016994:	f023 0320 	bic.w	r3, r3, #32
 8016998:	6023      	str	r3, [r4, #0]
 801699a:	e7f6      	b.n	801698a <_printf_i+0x196>
 801699c:	4616      	mov	r6, r2
 801699e:	e7bd      	b.n	801691c <_printf_i+0x128>
 80169a0:	6833      	ldr	r3, [r6, #0]
 80169a2:	6825      	ldr	r5, [r4, #0]
 80169a4:	1d18      	adds	r0, r3, #4
 80169a6:	6961      	ldr	r1, [r4, #20]
 80169a8:	6030      	str	r0, [r6, #0]
 80169aa:	062e      	lsls	r6, r5, #24
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	d501      	bpl.n	80169b4 <_printf_i+0x1c0>
 80169b0:	6019      	str	r1, [r3, #0]
 80169b2:	e002      	b.n	80169ba <_printf_i+0x1c6>
 80169b4:	0668      	lsls	r0, r5, #25
 80169b6:	d5fb      	bpl.n	80169b0 <_printf_i+0x1bc>
 80169b8:	8019      	strh	r1, [r3, #0]
 80169ba:	2300      	movs	r3, #0
 80169bc:	4616      	mov	r6, r2
 80169be:	6123      	str	r3, [r4, #16]
 80169c0:	e7bc      	b.n	801693c <_printf_i+0x148>
 80169c2:	6833      	ldr	r3, [r6, #0]
 80169c4:	2100      	movs	r1, #0
 80169c6:	1d1a      	adds	r2, r3, #4
 80169c8:	6032      	str	r2, [r6, #0]
 80169ca:	681e      	ldr	r6, [r3, #0]
 80169cc:	6862      	ldr	r2, [r4, #4]
 80169ce:	4630      	mov	r0, r6
 80169d0:	f000 f98a 	bl	8016ce8 <memchr>
 80169d4:	b108      	cbz	r0, 80169da <_printf_i+0x1e6>
 80169d6:	1b80      	subs	r0, r0, r6
 80169d8:	6060      	str	r0, [r4, #4]
 80169da:	6863      	ldr	r3, [r4, #4]
 80169dc:	6123      	str	r3, [r4, #16]
 80169de:	2300      	movs	r3, #0
 80169e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80169e4:	e7aa      	b.n	801693c <_printf_i+0x148>
 80169e6:	6923      	ldr	r3, [r4, #16]
 80169e8:	4632      	mov	r2, r6
 80169ea:	4649      	mov	r1, r9
 80169ec:	4640      	mov	r0, r8
 80169ee:	47d0      	blx	sl
 80169f0:	3001      	adds	r0, #1
 80169f2:	d0ad      	beq.n	8016950 <_printf_i+0x15c>
 80169f4:	6823      	ldr	r3, [r4, #0]
 80169f6:	079b      	lsls	r3, r3, #30
 80169f8:	d413      	bmi.n	8016a22 <_printf_i+0x22e>
 80169fa:	68e0      	ldr	r0, [r4, #12]
 80169fc:	9b03      	ldr	r3, [sp, #12]
 80169fe:	4298      	cmp	r0, r3
 8016a00:	bfb8      	it	lt
 8016a02:	4618      	movlt	r0, r3
 8016a04:	e7a6      	b.n	8016954 <_printf_i+0x160>
 8016a06:	2301      	movs	r3, #1
 8016a08:	4632      	mov	r2, r6
 8016a0a:	4649      	mov	r1, r9
 8016a0c:	4640      	mov	r0, r8
 8016a0e:	47d0      	blx	sl
 8016a10:	3001      	adds	r0, #1
 8016a12:	d09d      	beq.n	8016950 <_printf_i+0x15c>
 8016a14:	3501      	adds	r5, #1
 8016a16:	68e3      	ldr	r3, [r4, #12]
 8016a18:	9903      	ldr	r1, [sp, #12]
 8016a1a:	1a5b      	subs	r3, r3, r1
 8016a1c:	42ab      	cmp	r3, r5
 8016a1e:	dcf2      	bgt.n	8016a06 <_printf_i+0x212>
 8016a20:	e7eb      	b.n	80169fa <_printf_i+0x206>
 8016a22:	2500      	movs	r5, #0
 8016a24:	f104 0619 	add.w	r6, r4, #25
 8016a28:	e7f5      	b.n	8016a16 <_printf_i+0x222>
 8016a2a:	bf00      	nop
 8016a2c:	08018cb1 	.word	0x08018cb1
 8016a30:	08018cc2 	.word	0x08018cc2

08016a34 <__sflush_r>:
 8016a34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a3c:	0716      	lsls	r6, r2, #28
 8016a3e:	4605      	mov	r5, r0
 8016a40:	460c      	mov	r4, r1
 8016a42:	d454      	bmi.n	8016aee <__sflush_r+0xba>
 8016a44:	684b      	ldr	r3, [r1, #4]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	dc02      	bgt.n	8016a50 <__sflush_r+0x1c>
 8016a4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	dd48      	ble.n	8016ae2 <__sflush_r+0xae>
 8016a50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016a52:	2e00      	cmp	r6, #0
 8016a54:	d045      	beq.n	8016ae2 <__sflush_r+0xae>
 8016a56:	2300      	movs	r3, #0
 8016a58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016a5c:	682f      	ldr	r7, [r5, #0]
 8016a5e:	6a21      	ldr	r1, [r4, #32]
 8016a60:	602b      	str	r3, [r5, #0]
 8016a62:	d030      	beq.n	8016ac6 <__sflush_r+0x92>
 8016a64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016a66:	89a3      	ldrh	r3, [r4, #12]
 8016a68:	0759      	lsls	r1, r3, #29
 8016a6a:	d505      	bpl.n	8016a78 <__sflush_r+0x44>
 8016a6c:	6863      	ldr	r3, [r4, #4]
 8016a6e:	1ad2      	subs	r2, r2, r3
 8016a70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016a72:	b10b      	cbz	r3, 8016a78 <__sflush_r+0x44>
 8016a74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016a76:	1ad2      	subs	r2, r2, r3
 8016a78:	2300      	movs	r3, #0
 8016a7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016a7c:	6a21      	ldr	r1, [r4, #32]
 8016a7e:	4628      	mov	r0, r5
 8016a80:	47b0      	blx	r6
 8016a82:	1c43      	adds	r3, r0, #1
 8016a84:	89a3      	ldrh	r3, [r4, #12]
 8016a86:	d106      	bne.n	8016a96 <__sflush_r+0x62>
 8016a88:	6829      	ldr	r1, [r5, #0]
 8016a8a:	291d      	cmp	r1, #29
 8016a8c:	d82b      	bhi.n	8016ae6 <__sflush_r+0xb2>
 8016a8e:	4a2a      	ldr	r2, [pc, #168]	@ (8016b38 <__sflush_r+0x104>)
 8016a90:	410a      	asrs	r2, r1
 8016a92:	07d6      	lsls	r6, r2, #31
 8016a94:	d427      	bmi.n	8016ae6 <__sflush_r+0xb2>
 8016a96:	2200      	movs	r2, #0
 8016a98:	04d9      	lsls	r1, r3, #19
 8016a9a:	6062      	str	r2, [r4, #4]
 8016a9c:	6922      	ldr	r2, [r4, #16]
 8016a9e:	6022      	str	r2, [r4, #0]
 8016aa0:	d504      	bpl.n	8016aac <__sflush_r+0x78>
 8016aa2:	1c42      	adds	r2, r0, #1
 8016aa4:	d101      	bne.n	8016aaa <__sflush_r+0x76>
 8016aa6:	682b      	ldr	r3, [r5, #0]
 8016aa8:	b903      	cbnz	r3, 8016aac <__sflush_r+0x78>
 8016aaa:	6560      	str	r0, [r4, #84]	@ 0x54
 8016aac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016aae:	602f      	str	r7, [r5, #0]
 8016ab0:	b1b9      	cbz	r1, 8016ae2 <__sflush_r+0xae>
 8016ab2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016ab6:	4299      	cmp	r1, r3
 8016ab8:	d002      	beq.n	8016ac0 <__sflush_r+0x8c>
 8016aba:	4628      	mov	r0, r5
 8016abc:	f7ff fb44 	bl	8016148 <_free_r>
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	6363      	str	r3, [r4, #52]	@ 0x34
 8016ac4:	e00d      	b.n	8016ae2 <__sflush_r+0xae>
 8016ac6:	2301      	movs	r3, #1
 8016ac8:	4628      	mov	r0, r5
 8016aca:	47b0      	blx	r6
 8016acc:	4602      	mov	r2, r0
 8016ace:	1c50      	adds	r0, r2, #1
 8016ad0:	d1c9      	bne.n	8016a66 <__sflush_r+0x32>
 8016ad2:	682b      	ldr	r3, [r5, #0]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d0c6      	beq.n	8016a66 <__sflush_r+0x32>
 8016ad8:	2b1d      	cmp	r3, #29
 8016ada:	d001      	beq.n	8016ae0 <__sflush_r+0xac>
 8016adc:	2b16      	cmp	r3, #22
 8016ade:	d11d      	bne.n	8016b1c <__sflush_r+0xe8>
 8016ae0:	602f      	str	r7, [r5, #0]
 8016ae2:	2000      	movs	r0, #0
 8016ae4:	e021      	b.n	8016b2a <__sflush_r+0xf6>
 8016ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016aea:	b21b      	sxth	r3, r3
 8016aec:	e01a      	b.n	8016b24 <__sflush_r+0xf0>
 8016aee:	690f      	ldr	r7, [r1, #16]
 8016af0:	2f00      	cmp	r7, #0
 8016af2:	d0f6      	beq.n	8016ae2 <__sflush_r+0xae>
 8016af4:	0793      	lsls	r3, r2, #30
 8016af6:	680e      	ldr	r6, [r1, #0]
 8016af8:	600f      	str	r7, [r1, #0]
 8016afa:	bf0c      	ite	eq
 8016afc:	694b      	ldreq	r3, [r1, #20]
 8016afe:	2300      	movne	r3, #0
 8016b00:	eba6 0807 	sub.w	r8, r6, r7
 8016b04:	608b      	str	r3, [r1, #8]
 8016b06:	f1b8 0f00 	cmp.w	r8, #0
 8016b0a:	ddea      	ble.n	8016ae2 <__sflush_r+0xae>
 8016b0c:	4643      	mov	r3, r8
 8016b0e:	463a      	mov	r2, r7
 8016b10:	6a21      	ldr	r1, [r4, #32]
 8016b12:	4628      	mov	r0, r5
 8016b14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016b16:	47b0      	blx	r6
 8016b18:	2800      	cmp	r0, #0
 8016b1a:	dc08      	bgt.n	8016b2e <__sflush_r+0xfa>
 8016b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016b24:	f04f 30ff 	mov.w	r0, #4294967295
 8016b28:	81a3      	strh	r3, [r4, #12]
 8016b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b2e:	4407      	add	r7, r0
 8016b30:	eba8 0800 	sub.w	r8, r8, r0
 8016b34:	e7e7      	b.n	8016b06 <__sflush_r+0xd2>
 8016b36:	bf00      	nop
 8016b38:	dfbffffe 	.word	0xdfbffffe

08016b3c <_fflush_r>:
 8016b3c:	b538      	push	{r3, r4, r5, lr}
 8016b3e:	690b      	ldr	r3, [r1, #16]
 8016b40:	4605      	mov	r5, r0
 8016b42:	460c      	mov	r4, r1
 8016b44:	b913      	cbnz	r3, 8016b4c <_fflush_r+0x10>
 8016b46:	2500      	movs	r5, #0
 8016b48:	4628      	mov	r0, r5
 8016b4a:	bd38      	pop	{r3, r4, r5, pc}
 8016b4c:	b118      	cbz	r0, 8016b56 <_fflush_r+0x1a>
 8016b4e:	6a03      	ldr	r3, [r0, #32]
 8016b50:	b90b      	cbnz	r3, 8016b56 <_fflush_r+0x1a>
 8016b52:	f7ff f939 	bl	8015dc8 <__sinit>
 8016b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d0f3      	beq.n	8016b46 <_fflush_r+0xa>
 8016b5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016b60:	07d0      	lsls	r0, r2, #31
 8016b62:	d404      	bmi.n	8016b6e <_fflush_r+0x32>
 8016b64:	0599      	lsls	r1, r3, #22
 8016b66:	d402      	bmi.n	8016b6e <_fflush_r+0x32>
 8016b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b6a:	f7ff fade 	bl	801612a <__retarget_lock_acquire_recursive>
 8016b6e:	4628      	mov	r0, r5
 8016b70:	4621      	mov	r1, r4
 8016b72:	f7ff ff5f 	bl	8016a34 <__sflush_r>
 8016b76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016b78:	4605      	mov	r5, r0
 8016b7a:	07da      	lsls	r2, r3, #31
 8016b7c:	d4e4      	bmi.n	8016b48 <_fflush_r+0xc>
 8016b7e:	89a3      	ldrh	r3, [r4, #12]
 8016b80:	059b      	lsls	r3, r3, #22
 8016b82:	d4e1      	bmi.n	8016b48 <_fflush_r+0xc>
 8016b84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b86:	f7ff fad1 	bl	801612c <__retarget_lock_release_recursive>
 8016b8a:	e7dd      	b.n	8016b48 <_fflush_r+0xc>

08016b8c <__swbuf_r>:
 8016b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b8e:	460e      	mov	r6, r1
 8016b90:	4614      	mov	r4, r2
 8016b92:	4605      	mov	r5, r0
 8016b94:	b118      	cbz	r0, 8016b9e <__swbuf_r+0x12>
 8016b96:	6a03      	ldr	r3, [r0, #32]
 8016b98:	b90b      	cbnz	r3, 8016b9e <__swbuf_r+0x12>
 8016b9a:	f7ff f915 	bl	8015dc8 <__sinit>
 8016b9e:	69a3      	ldr	r3, [r4, #24]
 8016ba0:	60a3      	str	r3, [r4, #8]
 8016ba2:	89a3      	ldrh	r3, [r4, #12]
 8016ba4:	071a      	lsls	r2, r3, #28
 8016ba6:	d501      	bpl.n	8016bac <__swbuf_r+0x20>
 8016ba8:	6923      	ldr	r3, [r4, #16]
 8016baa:	b943      	cbnz	r3, 8016bbe <__swbuf_r+0x32>
 8016bac:	4621      	mov	r1, r4
 8016bae:	4628      	mov	r0, r5
 8016bb0:	f000 f82a 	bl	8016c08 <__swsetup_r>
 8016bb4:	b118      	cbz	r0, 8016bbe <__swbuf_r+0x32>
 8016bb6:	f04f 37ff 	mov.w	r7, #4294967295
 8016bba:	4638      	mov	r0, r7
 8016bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bbe:	6823      	ldr	r3, [r4, #0]
 8016bc0:	b2f6      	uxtb	r6, r6
 8016bc2:	6922      	ldr	r2, [r4, #16]
 8016bc4:	4637      	mov	r7, r6
 8016bc6:	1a98      	subs	r0, r3, r2
 8016bc8:	6963      	ldr	r3, [r4, #20]
 8016bca:	4283      	cmp	r3, r0
 8016bcc:	dc05      	bgt.n	8016bda <__swbuf_r+0x4e>
 8016bce:	4621      	mov	r1, r4
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	f7ff ffb3 	bl	8016b3c <_fflush_r>
 8016bd6:	2800      	cmp	r0, #0
 8016bd8:	d1ed      	bne.n	8016bb6 <__swbuf_r+0x2a>
 8016bda:	68a3      	ldr	r3, [r4, #8]
 8016bdc:	3b01      	subs	r3, #1
 8016bde:	60a3      	str	r3, [r4, #8]
 8016be0:	6823      	ldr	r3, [r4, #0]
 8016be2:	1c5a      	adds	r2, r3, #1
 8016be4:	6022      	str	r2, [r4, #0]
 8016be6:	701e      	strb	r6, [r3, #0]
 8016be8:	1c43      	adds	r3, r0, #1
 8016bea:	6962      	ldr	r2, [r4, #20]
 8016bec:	429a      	cmp	r2, r3
 8016bee:	d004      	beq.n	8016bfa <__swbuf_r+0x6e>
 8016bf0:	89a3      	ldrh	r3, [r4, #12]
 8016bf2:	07db      	lsls	r3, r3, #31
 8016bf4:	d5e1      	bpl.n	8016bba <__swbuf_r+0x2e>
 8016bf6:	2e0a      	cmp	r6, #10
 8016bf8:	d1df      	bne.n	8016bba <__swbuf_r+0x2e>
 8016bfa:	4621      	mov	r1, r4
 8016bfc:	4628      	mov	r0, r5
 8016bfe:	f7ff ff9d 	bl	8016b3c <_fflush_r>
 8016c02:	2800      	cmp	r0, #0
 8016c04:	d0d9      	beq.n	8016bba <__swbuf_r+0x2e>
 8016c06:	e7d6      	b.n	8016bb6 <__swbuf_r+0x2a>

08016c08 <__swsetup_r>:
 8016c08:	b538      	push	{r3, r4, r5, lr}
 8016c0a:	4b29      	ldr	r3, [pc, #164]	@ (8016cb0 <__swsetup_r+0xa8>)
 8016c0c:	4605      	mov	r5, r0
 8016c0e:	460c      	mov	r4, r1
 8016c10:	6818      	ldr	r0, [r3, #0]
 8016c12:	b118      	cbz	r0, 8016c1c <__swsetup_r+0x14>
 8016c14:	6a03      	ldr	r3, [r0, #32]
 8016c16:	b90b      	cbnz	r3, 8016c1c <__swsetup_r+0x14>
 8016c18:	f7ff f8d6 	bl	8015dc8 <__sinit>
 8016c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c20:	0719      	lsls	r1, r3, #28
 8016c22:	d422      	bmi.n	8016c6a <__swsetup_r+0x62>
 8016c24:	06da      	lsls	r2, r3, #27
 8016c26:	d407      	bmi.n	8016c38 <__swsetup_r+0x30>
 8016c28:	2209      	movs	r2, #9
 8016c2a:	602a      	str	r2, [r5, #0]
 8016c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c30:	f04f 30ff 	mov.w	r0, #4294967295
 8016c34:	81a3      	strh	r3, [r4, #12]
 8016c36:	e033      	b.n	8016ca0 <__swsetup_r+0x98>
 8016c38:	0758      	lsls	r0, r3, #29
 8016c3a:	d512      	bpl.n	8016c62 <__swsetup_r+0x5a>
 8016c3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016c3e:	b141      	cbz	r1, 8016c52 <__swsetup_r+0x4a>
 8016c40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016c44:	4299      	cmp	r1, r3
 8016c46:	d002      	beq.n	8016c4e <__swsetup_r+0x46>
 8016c48:	4628      	mov	r0, r5
 8016c4a:	f7ff fa7d 	bl	8016148 <_free_r>
 8016c4e:	2300      	movs	r3, #0
 8016c50:	6363      	str	r3, [r4, #52]	@ 0x34
 8016c52:	89a3      	ldrh	r3, [r4, #12]
 8016c54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016c58:	81a3      	strh	r3, [r4, #12]
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	6063      	str	r3, [r4, #4]
 8016c5e:	6923      	ldr	r3, [r4, #16]
 8016c60:	6023      	str	r3, [r4, #0]
 8016c62:	89a3      	ldrh	r3, [r4, #12]
 8016c64:	f043 0308 	orr.w	r3, r3, #8
 8016c68:	81a3      	strh	r3, [r4, #12]
 8016c6a:	6923      	ldr	r3, [r4, #16]
 8016c6c:	b94b      	cbnz	r3, 8016c82 <__swsetup_r+0x7a>
 8016c6e:	89a3      	ldrh	r3, [r4, #12]
 8016c70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016c78:	d003      	beq.n	8016c82 <__swsetup_r+0x7a>
 8016c7a:	4621      	mov	r1, r4
 8016c7c:	4628      	mov	r0, r5
 8016c7e:	f000 f894 	bl	8016daa <__smakebuf_r>
 8016c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c86:	f013 0201 	ands.w	r2, r3, #1
 8016c8a:	d00a      	beq.n	8016ca2 <__swsetup_r+0x9a>
 8016c8c:	2200      	movs	r2, #0
 8016c8e:	60a2      	str	r2, [r4, #8]
 8016c90:	6962      	ldr	r2, [r4, #20]
 8016c92:	4252      	negs	r2, r2
 8016c94:	61a2      	str	r2, [r4, #24]
 8016c96:	6922      	ldr	r2, [r4, #16]
 8016c98:	b942      	cbnz	r2, 8016cac <__swsetup_r+0xa4>
 8016c9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016c9e:	d1c5      	bne.n	8016c2c <__swsetup_r+0x24>
 8016ca0:	bd38      	pop	{r3, r4, r5, pc}
 8016ca2:	0799      	lsls	r1, r3, #30
 8016ca4:	bf58      	it	pl
 8016ca6:	6962      	ldrpl	r2, [r4, #20]
 8016ca8:	60a2      	str	r2, [r4, #8]
 8016caa:	e7f4      	b.n	8016c96 <__swsetup_r+0x8e>
 8016cac:	2000      	movs	r0, #0
 8016cae:	e7f7      	b.n	8016ca0 <__swsetup_r+0x98>
 8016cb0:	20000130 	.word	0x20000130

08016cb4 <memmove>:
 8016cb4:	4288      	cmp	r0, r1
 8016cb6:	b510      	push	{r4, lr}
 8016cb8:	eb01 0402 	add.w	r4, r1, r2
 8016cbc:	d902      	bls.n	8016cc4 <memmove+0x10>
 8016cbe:	4284      	cmp	r4, r0
 8016cc0:	4623      	mov	r3, r4
 8016cc2:	d807      	bhi.n	8016cd4 <memmove+0x20>
 8016cc4:	1e43      	subs	r3, r0, #1
 8016cc6:	42a1      	cmp	r1, r4
 8016cc8:	d008      	beq.n	8016cdc <memmove+0x28>
 8016cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016cce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016cd2:	e7f8      	b.n	8016cc6 <memmove+0x12>
 8016cd4:	4402      	add	r2, r0
 8016cd6:	4601      	mov	r1, r0
 8016cd8:	428a      	cmp	r2, r1
 8016cda:	d100      	bne.n	8016cde <memmove+0x2a>
 8016cdc:	bd10      	pop	{r4, pc}
 8016cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016ce6:	e7f7      	b.n	8016cd8 <memmove+0x24>

08016ce8 <memchr>:
 8016ce8:	b2c9      	uxtb	r1, r1
 8016cea:	4603      	mov	r3, r0
 8016cec:	4402      	add	r2, r0
 8016cee:	b510      	push	{r4, lr}
 8016cf0:	4293      	cmp	r3, r2
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	d101      	bne.n	8016cfa <memchr+0x12>
 8016cf6:	2000      	movs	r0, #0
 8016cf8:	e003      	b.n	8016d02 <memchr+0x1a>
 8016cfa:	7804      	ldrb	r4, [r0, #0]
 8016cfc:	3301      	adds	r3, #1
 8016cfe:	428c      	cmp	r4, r1
 8016d00:	d1f6      	bne.n	8016cf0 <memchr+0x8>
 8016d02:	bd10      	pop	{r4, pc}

08016d04 <_realloc_r>:
 8016d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d08:	4680      	mov	r8, r0
 8016d0a:	4615      	mov	r5, r2
 8016d0c:	460c      	mov	r4, r1
 8016d0e:	b921      	cbnz	r1, 8016d1a <_realloc_r+0x16>
 8016d10:	4611      	mov	r1, r2
 8016d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d16:	f7fe bf3f 	b.w	8015b98 <_malloc_r>
 8016d1a:	b92a      	cbnz	r2, 8016d28 <_realloc_r+0x24>
 8016d1c:	f7ff fa14 	bl	8016148 <_free_r>
 8016d20:	2400      	movs	r4, #0
 8016d22:	4620      	mov	r0, r4
 8016d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d28:	f000 f89e 	bl	8016e68 <_malloc_usable_size_r>
 8016d2c:	4285      	cmp	r5, r0
 8016d2e:	4606      	mov	r6, r0
 8016d30:	d802      	bhi.n	8016d38 <_realloc_r+0x34>
 8016d32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016d36:	d8f4      	bhi.n	8016d22 <_realloc_r+0x1e>
 8016d38:	4629      	mov	r1, r5
 8016d3a:	4640      	mov	r0, r8
 8016d3c:	f7fe ff2c 	bl	8015b98 <_malloc_r>
 8016d40:	4607      	mov	r7, r0
 8016d42:	2800      	cmp	r0, #0
 8016d44:	d0ec      	beq.n	8016d20 <_realloc_r+0x1c>
 8016d46:	42b5      	cmp	r5, r6
 8016d48:	462a      	mov	r2, r5
 8016d4a:	4621      	mov	r1, r4
 8016d4c:	bf28      	it	cs
 8016d4e:	4632      	movcs	r2, r6
 8016d50:	f7ff f9ed 	bl	801612e <memcpy>
 8016d54:	4621      	mov	r1, r4
 8016d56:	4640      	mov	r0, r8
 8016d58:	463c      	mov	r4, r7
 8016d5a:	f7ff f9f5 	bl	8016148 <_free_r>
 8016d5e:	e7e0      	b.n	8016d22 <_realloc_r+0x1e>

08016d60 <__swhatbuf_r>:
 8016d60:	b570      	push	{r4, r5, r6, lr}
 8016d62:	460c      	mov	r4, r1
 8016d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d68:	b096      	sub	sp, #88	@ 0x58
 8016d6a:	4615      	mov	r5, r2
 8016d6c:	2900      	cmp	r1, #0
 8016d6e:	461e      	mov	r6, r3
 8016d70:	da0c      	bge.n	8016d8c <__swhatbuf_r+0x2c>
 8016d72:	89a3      	ldrh	r3, [r4, #12]
 8016d74:	2100      	movs	r1, #0
 8016d76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016d7a:	bf14      	ite	ne
 8016d7c:	2340      	movne	r3, #64	@ 0x40
 8016d7e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016d82:	2000      	movs	r0, #0
 8016d84:	6031      	str	r1, [r6, #0]
 8016d86:	602b      	str	r3, [r5, #0]
 8016d88:	b016      	add	sp, #88	@ 0x58
 8016d8a:	bd70      	pop	{r4, r5, r6, pc}
 8016d8c:	466a      	mov	r2, sp
 8016d8e:	f000 f849 	bl	8016e24 <_fstat_r>
 8016d92:	2800      	cmp	r0, #0
 8016d94:	dbed      	blt.n	8016d72 <__swhatbuf_r+0x12>
 8016d96:	9901      	ldr	r1, [sp, #4]
 8016d98:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016d9c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016da0:	4259      	negs	r1, r3
 8016da2:	4159      	adcs	r1, r3
 8016da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016da8:	e7eb      	b.n	8016d82 <__swhatbuf_r+0x22>

08016daa <__smakebuf_r>:
 8016daa:	898b      	ldrh	r3, [r1, #12]
 8016dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016dae:	079d      	lsls	r5, r3, #30
 8016db0:	4606      	mov	r6, r0
 8016db2:	460c      	mov	r4, r1
 8016db4:	d507      	bpl.n	8016dc6 <__smakebuf_r+0x1c>
 8016db6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016dba:	6023      	str	r3, [r4, #0]
 8016dbc:	6123      	str	r3, [r4, #16]
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	6163      	str	r3, [r4, #20]
 8016dc2:	b003      	add	sp, #12
 8016dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dc6:	ab01      	add	r3, sp, #4
 8016dc8:	466a      	mov	r2, sp
 8016dca:	f7ff ffc9 	bl	8016d60 <__swhatbuf_r>
 8016dce:	9f00      	ldr	r7, [sp, #0]
 8016dd0:	4605      	mov	r5, r0
 8016dd2:	4630      	mov	r0, r6
 8016dd4:	4639      	mov	r1, r7
 8016dd6:	f7fe fedf 	bl	8015b98 <_malloc_r>
 8016dda:	b948      	cbnz	r0, 8016df0 <__smakebuf_r+0x46>
 8016ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016de0:	059a      	lsls	r2, r3, #22
 8016de2:	d4ee      	bmi.n	8016dc2 <__smakebuf_r+0x18>
 8016de4:	f023 0303 	bic.w	r3, r3, #3
 8016de8:	f043 0302 	orr.w	r3, r3, #2
 8016dec:	81a3      	strh	r3, [r4, #12]
 8016dee:	e7e2      	b.n	8016db6 <__smakebuf_r+0xc>
 8016df0:	89a3      	ldrh	r3, [r4, #12]
 8016df2:	6020      	str	r0, [r4, #0]
 8016df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016df8:	81a3      	strh	r3, [r4, #12]
 8016dfa:	9b01      	ldr	r3, [sp, #4]
 8016dfc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016e00:	b15b      	cbz	r3, 8016e1a <__smakebuf_r+0x70>
 8016e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e06:	4630      	mov	r0, r6
 8016e08:	f000 f81e 	bl	8016e48 <_isatty_r>
 8016e0c:	b128      	cbz	r0, 8016e1a <__smakebuf_r+0x70>
 8016e0e:	89a3      	ldrh	r3, [r4, #12]
 8016e10:	f023 0303 	bic.w	r3, r3, #3
 8016e14:	f043 0301 	orr.w	r3, r3, #1
 8016e18:	81a3      	strh	r3, [r4, #12]
 8016e1a:	89a3      	ldrh	r3, [r4, #12]
 8016e1c:	431d      	orrs	r5, r3
 8016e1e:	81a5      	strh	r5, [r4, #12]
 8016e20:	e7cf      	b.n	8016dc2 <__smakebuf_r+0x18>
	...

08016e24 <_fstat_r>:
 8016e24:	b538      	push	{r3, r4, r5, lr}
 8016e26:	2300      	movs	r3, #0
 8016e28:	4d06      	ldr	r5, [pc, #24]	@ (8016e44 <_fstat_r+0x20>)
 8016e2a:	4604      	mov	r4, r0
 8016e2c:	4608      	mov	r0, r1
 8016e2e:	4611      	mov	r1, r2
 8016e30:	602b      	str	r3, [r5, #0]
 8016e32:	f7ee f84e 	bl	8004ed2 <_fstat>
 8016e36:	1c43      	adds	r3, r0, #1
 8016e38:	d102      	bne.n	8016e40 <_fstat_r+0x1c>
 8016e3a:	682b      	ldr	r3, [r5, #0]
 8016e3c:	b103      	cbz	r3, 8016e40 <_fstat_r+0x1c>
 8016e3e:	6023      	str	r3, [r4, #0]
 8016e40:	bd38      	pop	{r3, r4, r5, pc}
 8016e42:	bf00      	nop
 8016e44:	20013528 	.word	0x20013528

08016e48 <_isatty_r>:
 8016e48:	b538      	push	{r3, r4, r5, lr}
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	4d05      	ldr	r5, [pc, #20]	@ (8016e64 <_isatty_r+0x1c>)
 8016e4e:	4604      	mov	r4, r0
 8016e50:	4608      	mov	r0, r1
 8016e52:	602b      	str	r3, [r5, #0]
 8016e54:	f7ee f84d 	bl	8004ef2 <_isatty>
 8016e58:	1c43      	adds	r3, r0, #1
 8016e5a:	d102      	bne.n	8016e62 <_isatty_r+0x1a>
 8016e5c:	682b      	ldr	r3, [r5, #0]
 8016e5e:	b103      	cbz	r3, 8016e62 <_isatty_r+0x1a>
 8016e60:	6023      	str	r3, [r4, #0]
 8016e62:	bd38      	pop	{r3, r4, r5, pc}
 8016e64:	20013528 	.word	0x20013528

08016e68 <_malloc_usable_size_r>:
 8016e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e6c:	1f18      	subs	r0, r3, #4
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	bfbc      	itt	lt
 8016e72:	580b      	ldrlt	r3, [r1, r0]
 8016e74:	18c0      	addlt	r0, r0, r3
 8016e76:	4770      	bx	lr

08016e78 <_init>:
 8016e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e7a:	bf00      	nop
 8016e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e7e:	bc08      	pop	{r3}
 8016e80:	469e      	mov	lr, r3
 8016e82:	4770      	bx	lr

08016e84 <_fini>:
 8016e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e86:	bf00      	nop
 8016e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e8a:	bc08      	pop	{r3}
 8016e8c:	469e      	mov	lr, r3
 8016e8e:	4770      	bx	lr
