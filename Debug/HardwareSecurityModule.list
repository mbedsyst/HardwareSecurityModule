
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114b0  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  080116fc  080116fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b7c  08011b7c  00013180  2**0
                  CONTENTS
  4 .ARM          00000008  08011b7c  08011b7c  00012b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b84  08011b84  00013180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b84  08011b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011b88  08011b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  08011b8c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011234  20000180  08011d0c  00013180  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200113b4  08011d0c  000133b4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00013180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002674e  00000000  00000000  000131b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f53  00000000  00000000  00039904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e10  00000000  00000000  0003e858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001705  00000000  00000000  00040668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000862d  00000000  00000000  00041d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002af2b  00000000  00000000  0004a39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014bc47  00000000  00000000  000752c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c0f0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008928  00000000  00000000  001c0f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001c9878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	080116e4 	.word	0x080116e4

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	080116e4 	.word	0x080116e4

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <PacketParser_Parse>:
#include "constants.h"
#include "Logger.h"
#include <string.h>

ParseStatus_t PacketParser_Parse(const uint8_t* rawData, uint16_t rawLength, ParsedPacket_t* parsedPacket)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	460b      	mov	r3, r1
 80005ae:	607a      	str	r2, [r7, #4]
 80005b0:	817b      	strh	r3, [r7, #10]
	log_debug("Checking if Data Stream or Packet Structure is NULL.");
 80005b2:	485d      	ldr	r0, [pc, #372]	@ (8000728 <PacketParser_Parse+0x184>)
 80005b4:	f000 f92c 	bl	8000810 <log_debug>
	// Check if Data Stream or Packet structure is NULL
	if (!rawData || !parsedPacket)
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <PacketParser_Parse+0x20>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d104      	bne.n	80005ce <PacketParser_Parse+0x2a>
    {
		log_error("Data Stream or Packet Structure is NULL");
 80005c4:	4859      	ldr	r0, [pc, #356]	@ (800072c <PacketParser_Parse+0x188>)
 80005c6:	f000 f957 	bl	8000878 <log_error>
    	return PARSE_NULL_POINTER;
 80005ca:	2303      	movs	r3, #3
 80005cc:	e0a7      	b.n	800071e <PacketParser_Parse+0x17a>
    }
	log_debug("Checking if Data Stream contains less than 12 bytes.");
 80005ce:	4858      	ldr	r0, [pc, #352]	@ (8000730 <PacketParser_Parse+0x18c>)
 80005d0:	f000 f91e 	bl	8000810 <log_debug>
    // Check if Data Stream contains Data of valid length
    if (rawLength < 12)
 80005d4:	897b      	ldrh	r3, [r7, #10]
 80005d6:	2b0b      	cmp	r3, #11
 80005d8:	d804      	bhi.n	80005e4 <PacketParser_Parse+0x40>
    {
    	log_error("Data stream contain less than 12 bytes");
 80005da:	4856      	ldr	r0, [pc, #344]	@ (8000734 <PacketParser_Parse+0x190>)
 80005dc:	f000 f94c 	bl	8000878 <log_error>
    	return PARSE_INVALID_LENGTH;
 80005e0:	2301      	movs	r3, #1
 80005e2:	e09c      	b.n	800071e <PacketParser_Parse+0x17a>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up Transaction ID.");
 80005e8:	4853      	ldr	r0, [pc, #332]	@ (8000738 <PacketParser_Parse+0x194>)
 80005ea:	f000 f911 	bl	8000810 <log_debug>
    // Retrieve Transaction ID from Data Stream
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80005ee:	8afb      	ldrh	r3, [r7, #22]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	061a      	lsls	r2, r3, #24
                                  (rawData[index + 1] << 16) |
 80005f8:	8afb      	ldrh	r3, [r7, #22]
 80005fa:	3301      	adds	r3, #1
 80005fc:	68f9      	ldr	r1, [r7, #12]
 80005fe:	440b      	add	r3, r1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	041b      	lsls	r3, r3, #16
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8000604:	431a      	orrs	r2, r3
                                  (rawData[index + 2] << 8)  |
 8000606:	8afb      	ldrh	r3, [r7, #22]
 8000608:	3302      	adds	r3, #2
 800060a:	68f9      	ldr	r1, [r7, #12]
 800060c:	440b      	add	r3, r1
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	021b      	lsls	r3, r3, #8
                                  (rawData[index + 1] << 16) |
 8000612:	4313      	orrs	r3, r2
                                  (rawData[index + 3]);
 8000614:	8afa      	ldrh	r2, [r7, #22]
 8000616:	3203      	adds	r2, #3
 8000618:	68f9      	ldr	r1, [r7, #12]
 800061a:	440a      	add	r2, r1
 800061c:	7812      	ldrb	r2, [r2, #0]
                                  (rawData[index + 2] << 8)  |
 800061e:	4313      	orrs	r3, r2
 8000620:	461a      	mov	r2, r3
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
    // Set Index to point CMD byte
    index += 4;
 8000626:	8afb      	ldrh	r3, [r7, #22]
 8000628:	3304      	adds	r3, #4
 800062a:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up CMD, OPTION and INPUT_SIZE fields.");
 800062c:	4843      	ldr	r0, [pc, #268]	@ (800073c <PacketParser_Parse+0x198>)
 800062e:	f000 f8ef 	bl	8000810 <log_debug>
    // Retrieve CMD byte from Data Stream
    parsedPacket->cmd = rawData[index++];
 8000632:	8afb      	ldrh	r3, [r7, #22]
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	82fa      	strh	r2, [r7, #22]
 8000638:	461a      	mov	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4413      	add	r3, r2
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	711a      	strb	r2, [r3, #4]
    // Retrieve OPTION byte from Data Stream
    parsedPacket->option = rawData[index++];
 8000644:	8afb      	ldrh	r3, [r7, #22]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	82fa      	strh	r2, [r7, #22]
 800064a:	461a      	mov	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	715a      	strb	r2, [r3, #5]
    // Retrieve INPUT_SIZE half-word from Data Stream
    parsedPacket->inputSize = (rawData[index] << 8) | rawData[index + 1];
 8000656:	8afb      	ldrh	r3, [r7, #22]
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4413      	add	r3, r2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	021b      	lsls	r3, r3, #8
 8000660:	b21a      	sxth	r2, r3
 8000662:	8afb      	ldrh	r3, [r7, #22]
 8000664:	3301      	adds	r3, #1
 8000666:	68f9      	ldr	r1, [r7, #12]
 8000668:	440b      	add	r3, r1
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b21b      	sxth	r3, r3
 800066e:	4313      	orrs	r3, r2
 8000670:	b21b      	sxth	r3, r3
 8000672:	b29a      	uxth	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	80da      	strh	r2, [r3, #6]
    // Set Index to point INPUT_DATA
    index += 2;
 8000678:	8afb      	ldrh	r3, [r7, #22]
 800067a:	3302      	adds	r3, #2
 800067c:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking if INPUT_SIZE is within the limits.");
 800067e:	4830      	ldr	r0, [pc, #192]	@ (8000740 <PacketParser_Parse+0x19c>)
 8000680:	f000 f8c6 	bl	8000810 <log_debug>
    // Check if INPUT_SIZE is under the prescribed limit
    if (parsedPacket->inputSize > MAX_INPUT_DATA_SIZE || ((index - 1) + parsedPacket->inputSize + 4) > rawLength)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	88db      	ldrh	r3, [r3, #6]
 8000688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800068c:	d808      	bhi.n	80006a0 <PacketParser_Parse+0xfc>
 800068e:	8afb      	ldrh	r3, [r7, #22]
 8000690:	3b01      	subs	r3, #1
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	88d2      	ldrh	r2, [r2, #6]
 8000696:	4413      	add	r3, r2
 8000698:	1cda      	adds	r2, r3, #3
 800069a:	897b      	ldrh	r3, [r7, #10]
 800069c:	429a      	cmp	r2, r3
 800069e:	db04      	blt.n	80006aa <PacketParser_Parse+0x106>
    {
    	log_error("Input Data Size is too big.");
 80006a0:	4828      	ldr	r0, [pc, #160]	@ (8000744 <PacketParser_Parse+0x1a0>)
 80006a2:	f000 f8e9 	bl	8000878 <log_error>
        return PARSE_INPUT_TOO_LARGE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	e039      	b.n	800071e <PacketParser_Parse+0x17a>
    }
    log_debug("Copying INPUT DATA to Packet Structure.");
 80006aa:	4827      	ldr	r0, [pc, #156]	@ (8000748 <PacketParser_Parse+0x1a4>)
 80006ac:	f000 f8b0 	bl	8000810 <log_debug>
    // Copy INPUT_DATA array from Data Stream to Packet structure
    memcpy(parsedPacket->inputData, &rawData[index], parsedPacket->inputSize);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f103 0008 	add.w	r0, r3, #8
 80006b6:	8afb      	ldrh	r3, [r7, #22]
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	18d1      	adds	r1, r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	88db      	ldrh	r3, [r3, #6]
 80006c0:	461a      	mov	r2, r3
 80006c2:	f010 f8ac 	bl	801081e <memcpy>
    // Set Index to point EOD Flag
    index += parsedPacket->inputSize;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	88da      	ldrh	r2, [r3, #6]
 80006ca:	8afb      	ldrh	r3, [r7, #22]
 80006cc:	4413      	add	r3, r2
 80006ce:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking the Received EOD word.");
 80006d0:	481e      	ldr	r0, [pc, #120]	@ (800074c <PacketParser_Parse+0x1a8>)
 80006d2:	f000 f89d 	bl	8000810 <log_debug>
    // Retrieve EOD Flag from Data Stream
    uint32_t receivedEOD = (rawData[index]     << 24) |
 80006d6:	8afb      	ldrh	r3, [r7, #22]
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	4413      	add	r3, r2
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	061a      	lsls	r2, r3, #24
                           (rawData[index + 1] << 16) |
 80006e0:	8afb      	ldrh	r3, [r7, #22]
 80006e2:	3301      	adds	r3, #1
 80006e4:	68f9      	ldr	r1, [r7, #12]
 80006e6:	440b      	add	r3, r1
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	041b      	lsls	r3, r3, #16
    uint32_t receivedEOD = (rawData[index]     << 24) |
 80006ec:	431a      	orrs	r2, r3
                           (rawData[index + 2] << 8)  |
 80006ee:	8afb      	ldrh	r3, [r7, #22]
 80006f0:	3302      	adds	r3, #2
 80006f2:	68f9      	ldr	r1, [r7, #12]
 80006f4:	440b      	add	r3, r1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	021b      	lsls	r3, r3, #8
                           (rawData[index + 1] << 16) |
 80006fa:	4313      	orrs	r3, r2
                           (rawData[index + 3]);
 80006fc:	8afa      	ldrh	r2, [r7, #22]
 80006fe:	3203      	adds	r2, #3
 8000700:	68f9      	ldr	r1, [r7, #12]
 8000702:	440a      	add	r2, r1
 8000704:	7812      	ldrb	r2, [r2, #0]
                           (rawData[index + 2] << 8)  |
 8000706:	4313      	orrs	r3, r2
    uint32_t receivedEOD = (rawData[index]     << 24) |
 8000708:	613b      	str	r3, [r7, #16]
    // Check if EOD Flag is valid
    if (receivedEOD != EOD_FLAG)
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	4a10      	ldr	r2, [pc, #64]	@ (8000750 <PacketParser_Parse+0x1ac>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d004      	beq.n	800071c <PacketParser_Parse+0x178>
    {
    	log_error("Received EOD Flag is Invalid");
 8000712:	4810      	ldr	r0, [pc, #64]	@ (8000754 <PacketParser_Parse+0x1b0>)
 8000714:	f000 f8b0 	bl	8000878 <log_error>
        return PARSE_EOD_MISMATCH;
 8000718:	2302      	movs	r3, #2
 800071a:	e000      	b.n	800071e <PacketParser_Parse+0x17a>
    }
    // Return to Indicate successful parsing
    return PARSE_SUCCESS;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	080116fc 	.word	0x080116fc
 800072c:	08011734 	.word	0x08011734
 8000730:	0801175c 	.word	0x0801175c
 8000734:	08011794 	.word	0x08011794
 8000738:	080117bc 	.word	0x080117bc
 800073c:	080117d8 	.word	0x080117d8
 8000740:	08011808 	.word	0x08011808
 8000744:	08011838 	.word	0x08011838
 8000748:	08011854 	.word	0x08011854
 800074c:	0801187c 	.word	0x0801187c
 8000750:	deadbeef 	.word	0xdeadbeef
 8000754:	0801189c 	.word	0x0801189c

08000758 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 8000762:	4a04      	ldr	r2, [pc, #16]	@ (8000774 <log_init+0x1c>)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	7013      	strb	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	20000000 	.word	0x20000000

08000778 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b0c7      	sub	sp, #284	@ 0x11c
 800077c:	af02      	add	r7, sp, #8
 800077e:	4604      	mov	r4, r0
 8000780:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000784:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000788:	6001      	str	r1, [r0, #0]
 800078a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800078e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000792:	600a      	str	r2, [r1, #0]
 8000794:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000798:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007a2:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80007a6:	4622      	mov	r2, r4
 80007a8:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 80007aa:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <log_generic+0x8c>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80007b2:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 80007b6:	7812      	ldrb	r2, [r2, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d31e      	bcc.n	80007fa <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007c0:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80007c4:	f107 0010 	add.w	r0, r7, #16
 80007c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80007cc:	6812      	ldr	r2, [r2, #0]
 80007ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d2:	f00f ff9b 	bl	801070c <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80007de:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80007e2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80007e6:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80007ea:	4807      	ldr	r0, [pc, #28]	@ (8000808 <log_generic+0x90>)
 80007ec:	9000      	str	r0, [sp, #0]
 80007ee:	6812      	ldr	r2, [r2, #0]
 80007f0:	6809      	ldr	r1, [r1, #0]
 80007f2:	4806      	ldr	r0, [pc, #24]	@ (800080c <log_generic+0x94>)
 80007f4:	f00f feea 	bl	80105cc <iprintf>
 80007f8:	e000      	b.n	80007fc <log_generic+0x84>
        return;
 80007fa:	bf00      	nop
}
 80007fc:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000800:	46bd      	mov	sp, r7
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	20000000 	.word	0x20000000
 8000808:	080118cc 	.word	0x080118cc
 800080c:	080118bc 	.word	0x080118bc

08000810 <log_debug>:

void log_debug(const char *fmt, ...)
{
 8000810:	b40f      	push	{r0, r1, r2, r3}
 8000812:	b580      	push	{r7, lr}
 8000814:	b084      	sub	sp, #16
 8000816:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	4a05      	ldr	r2, [pc, #20]	@ (800083c <log_debug+0x2c>)
 8000826:	4906      	ldr	r1, [pc, #24]	@ (8000840 <log_debug+0x30>)
 8000828:	2000      	movs	r0, #0
 800082a:	f7ff ffa5 	bl	8000778 <log_generic>
    va_end(args);
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000838:	b004      	add	sp, #16
 800083a:	4770      	bx	lr
 800083c:	080118d4 	.word	0x080118d4
 8000840:	080118dc 	.word	0x080118dc

08000844 <log_info>:

void log_info(const char *fmt, ...)
{
 8000844:	b40f      	push	{r0, r1, r2, r3}
 8000846:	b580      	push	{r7, lr}
 8000848:	b084      	sub	sp, #16
 800084a:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <log_info+0x2c>)
 800085a:	4906      	ldr	r1, [pc, #24]	@ (8000874 <log_info+0x30>)
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff ff8b 	bl	8000778 <log_generic>
    va_end(args);
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800086c:	b004      	add	sp, #16
 800086e:	4770      	bx	lr
 8000870:	080118e4 	.word	0x080118e4
 8000874:	080118ec 	.word	0x080118ec

08000878 <log_error>:
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
    va_end(args);
}

void log_error(const char *fmt, ...)
{
 8000878:	b40f      	push	{r0, r1, r2, r3}
 800087a:	b580      	push	{r7, lr}
 800087c:	b084      	sub	sp, #16
 800087e:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <log_error+0x2c>)
 800088e:	4906      	ldr	r1, [pc, #24]	@ (80008a8 <log_error+0x30>)
 8000890:	2003      	movs	r0, #3
 8000892:	f7ff ff71 	bl	8000778 <log_generic>
    va_end(args);
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr
 80008a4:	08011904 	.word	0x08011904
 80008a8:	0801190c 	.word	0x0801190c

080008ac <Test_ParseReceivedUsbData>:
static void MX_RNG_Init(void);
static void MX_HASH_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void Test_ParseReceivedUsbData(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
    if (usb_rx_complete)
 80008b6:	4b48      	ldr	r3, [pc, #288]	@ (80009d8 <Test_ParseReceivedUsbData+0x12c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f000 8081 	beq.w	80009c4 <Test_ParseReceivedUsbData+0x118>
    {
        ParsedPacket_t parsedPacket;
        ParseStatus_t status = PacketParser_Parse(usb_rx_buffer, usb_rx_index, &parsedPacket);
 80008c2:	4b46      	ldr	r3, [pc, #280]	@ (80009dc <Test_ParseReceivedUsbData+0x130>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	b299      	uxth	r1, r3
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	3b0c      	subs	r3, #12
 80008ce:	461a      	mov	r2, r3
 80008d0:	4843      	ldr	r0, [pc, #268]	@ (80009e0 <Test_ParseReceivedUsbData+0x134>)
 80008d2:	f7ff fe67 	bl	80005a4 <PacketParser_Parse>
 80008d6:	4603      	mov	r3, r0
 80008d8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80008dc:	f102 020d 	add.w	r2, r2, #13
 80008e0:	7013      	strb	r3, [r2, #0]

        if (status == PARSE_SUCCESS)
 80008e2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80008e6:	f103 030d 	add.w	r3, r3, #13
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d159      	bne.n	80009a4 <Test_ParseReceivedUsbData+0xf8>
        {
            log_debug("Packet Parsed Successfully:");
 80008f0:	483c      	ldr	r0, [pc, #240]	@ (80009e4 <Test_ParseReceivedUsbData+0x138>)
 80008f2:	f7ff ff8d 	bl	8000810 <log_debug>
            log_debug("Transaction ID : 0x%08X", parsedPacket.transactionID);
 80008f6:	f107 0310 	add.w	r3, r7, #16
 80008fa:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80008fe:	4619      	mov	r1, r3
 8000900:	4839      	ldr	r0, [pc, #228]	@ (80009e8 <Test_ParseReceivedUsbData+0x13c>)
 8000902:	f7ff ff85 	bl	8000810 <log_debug>
            log_debug("Command        : 0x%02X", parsedPacket.cmd);
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800090e:	4619      	mov	r1, r3
 8000910:	4836      	ldr	r0, [pc, #216]	@ (80009ec <Test_ParseReceivedUsbData+0x140>)
 8000912:	f7ff ff7d 	bl	8000810 <log_debug>
            log_debug("Option         : 0x%02X", parsedPacket.option);
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	f813 3c07 	ldrb.w	r3, [r3, #-7]
 800091e:	4619      	mov	r1, r3
 8000920:	4833      	ldr	r0, [pc, #204]	@ (80009f0 <Test_ParseReceivedUsbData+0x144>)
 8000922:	f7ff ff75 	bl	8000810 <log_debug>
            log_debug("Input Size     : %d bytes", parsedPacket.inputSize);
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	f833 3c06 	ldrh.w	r3, [r3, #-6]
 800092e:	4619      	mov	r1, r3
 8000930:	4830      	ldr	r0, [pc, #192]	@ (80009f4 <Test_ParseReceivedUsbData+0x148>)
 8000932:	f7ff ff6d 	bl	8000810 <log_debug>

            log_debug("  Input Data (first 16 bytes or less):");
 8000936:	4830      	ldr	r0, [pc, #192]	@ (80009f8 <Test_ParseReceivedUsbData+0x14c>)
 8000938:	f7ff ff6a 	bl	8000810 <log_debug>
            for (uint16_t i = 0; i < parsedPacket.inputSize; ++i)
 800093c:	2300      	movs	r3, #0
 800093e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000942:	f102 020e 	add.w	r2, r2, #14
 8000946:	8013      	strh	r3, [r2, #0]
 8000948:	e01d      	b.n	8000986 <Test_ParseReceivedUsbData+0xda>
            {
                log_debug("Byte[%02d] = 0x%02X", i, parsedPacket.inputData[i]);
 800094a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800094e:	f103 030e 	add.w	r3, r3, #14
 8000952:	8819      	ldrh	r1, [r3, #0]
 8000954:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000958:	f103 030e 	add.w	r3, r3, #14
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	f107 0210 	add.w	r2, r7, #16
 8000962:	4413      	add	r3, r2
 8000964:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 8000968:	461a      	mov	r2, r3
 800096a:	4824      	ldr	r0, [pc, #144]	@ (80009fc <Test_ParseReceivedUsbData+0x150>)
 800096c:	f7ff ff50 	bl	8000810 <log_debug>
            for (uint16_t i = 0; i < parsedPacket.inputSize; ++i)
 8000970:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000974:	f103 030e 	add.w	r3, r3, #14
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000980:	f102 020e 	add.w	r2, r2, #14
 8000984:	8013      	strh	r3, [r2, #0]
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	f833 3c06 	ldrh.w	r3, [r3, #-6]
 800098e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000992:	f102 020e 	add.w	r2, r2, #14
 8000996:	8812      	ldrh	r2, [r2, #0]
 8000998:	429a      	cmp	r2, r3
 800099a:	d3d6      	bcc.n	800094a <Test_ParseReceivedUsbData+0x9e>
            }

            log_debug("End of Parsed Packet");
 800099c:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <Test_ParseReceivedUsbData+0x154>)
 800099e:	f7ff ff37 	bl	8000810 <log_debug>
 80009a2:	e008      	b.n	80009b6 <Test_ParseReceivedUsbData+0x10a>
        }
        else
        {
            log_error("Parsing failed with status code: %d", status);
 80009a4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80009a8:	f103 030d 	add.w	r3, r3, #13
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4619      	mov	r1, r3
 80009b0:	4814      	ldr	r0, [pc, #80]	@ (8000a04 <Test_ParseReceivedUsbData+0x158>)
 80009b2:	f7ff ff61 	bl	8000878 <log_error>
        }

        // Reset buffer and flag for next reception
        usb_rx_index = 0;
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <Test_ParseReceivedUsbData+0x130>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
        usb_rx_complete = false;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <Test_ParseReceivedUsbData+0x12c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
    	log_error("USB Reception not completed");
    }
}
 80009c2:	e002      	b.n	80009ca <Test_ParseReceivedUsbData+0x11e>
    	log_error("USB Reception not completed");
 80009c4:	4810      	ldr	r0, [pc, #64]	@ (8000a08 <Test_ParseReceivedUsbData+0x15c>)
 80009c6:	f7ff ff57 	bl	8000878 <log_error>
}
 80009ca:	bf00      	nop
 80009cc:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20010f40 	.word	0x20010f40
 80009dc:	20010f3c 	.word	0x20010f3c
 80009e0:	20000f3c 	.word	0x20000f3c
 80009e4:	08011914 	.word	0x08011914
 80009e8:	08011930 	.word	0x08011930
 80009ec:	08011948 	.word	0x08011948
 80009f0:	08011960 	.word	0x08011960
 80009f4:	08011978 	.word	0x08011978
 80009f8:	08011994 	.word	0x08011994
 80009fc:	080119bc 	.word	0x080119bc
 8000a00:	080119d0 	.word	0x080119d0
 8000a04:	080119e8 	.word	0x080119e8
 8000a08:	08011a0c 	.word	0x08011a0c

08000a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a10:	f001 fcb0 	bl	8002374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a14:	f000 f8bc 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a18:	f000 fbbe 	bl	8001198 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000a1c:	f000 fb5a 	bl	80010d4 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000a20:	f000 fa74 	bl	8000f0c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a24:	f000 f944 	bl	8000cb0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a28:	f000 fa1a 	bl	8000e60 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000a2c:	f000 fb06 	bl	800103c <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000a30:	f000 f994 	bl	8000d5c <MX_RTC_Init>
  MX_RNG_Init();
 8000a34:	f000 f97c 	bl	8000d30 <MX_RNG_Init>
  MX_HASH_Init();
 8000a38:	f000 f920 	bl	8000c7c <MX_HASH_Init>
  MX_USART3_UART_Init();
 8000a3c:	f000 fab2 	bl	8000fa4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 8000a40:	bf00      	nop
 8000a42:	4b4d      	ldr	r3, [pc, #308]	@ (8000b78 <main+0x16c>)
 8000a44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0fa      	beq.n	8000a42 <main+0x36>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f001 fa77 	bl	8001f40 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000a52:	2001      	movs	r0, #1
 8000a54:	f001 fa74 	bl	8001f40 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f001 fa71 	bl	8001f40 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2000      	movs	r0, #0
 8000a62:	f001 fb0d 	bl	8002080 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000a66:	4b45      	ldr	r3, [pc, #276]	@ (8000b7c <main+0x170>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a6c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a6e:	4b43      	ldr	r3, [pc, #268]	@ (8000b7c <main+0x170>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a74:	4b41      	ldr	r3, [pc, #260]	@ (8000b7c <main+0x170>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a7a:	4b40      	ldr	r3, [pc, #256]	@ (8000b7c <main+0x170>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a80:	4b3e      	ldr	r3, [pc, #248]	@ (8000b7c <main+0x170>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a86:	493d      	ldr	r1, [pc, #244]	@ (8000b7c <main+0x170>)
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f001 fb93 	bl	80021b4 <BSP_COM_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <main+0x8c>
  {
    Error_Handler();
 8000a94:	f000 fc7c 	bl	8001390 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  log_init(LOG_LEVEL_DEBUG);
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fe5d 	bl	8000758 <log_init>
  log_info("Turning LED ON.");
 8000a9e:	4838      	ldr	r0, [pc, #224]	@ (8000b80 <main+0x174>)
 8000aa0:	f7ff fed0 	bl	8000844 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f001 fac1 	bl	800202c <BSP_LED_Toggle>
 8000aaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aae:	f001 fd1f 	bl	80024f0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	f001 faba 	bl	800202c <BSP_LED_Toggle>
 8000ab8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000abc:	f001 fd18 	bl	80024f0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f001 fab3 	bl	800202c <BSP_LED_Toggle>
 8000ac6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aca:	f001 fd11 	bl	80024f0 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000ace:	482d      	ldr	r0, [pc, #180]	@ (8000b84 <main+0x178>)
 8000ad0:	f7ff feb8 	bl	8000844 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f001 faa9 	bl	800202c <BSP_LED_Toggle>
 8000ada:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ade:	f001 fd07 	bl	80024f0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f001 faa2 	bl	800202c <BSP_LED_Toggle>
 8000ae8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aec:	f001 fd00 	bl	80024f0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000af0:	2001      	movs	r0, #1
 8000af2:	f001 fa9b 	bl	800202c <BSP_LED_Toggle>
 8000af6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000afa:	f001 fcf9 	bl	80024f0 <HAL_Delay>
  log_info("Turning LED ON.");
 8000afe:	4820      	ldr	r0, [pc, #128]	@ (8000b80 <main+0x174>)
 8000b00:	f7ff fea0 	bl	8000844 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f001 fa91 	bl	800202c <BSP_LED_Toggle>
 8000b0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b0e:	f001 fcef 	bl	80024f0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b12:	2002      	movs	r0, #2
 8000b14:	f001 fa8a 	bl	800202c <BSP_LED_Toggle>
 8000b18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b1c:	f001 fce8 	bl	80024f0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f001 fa83 	bl	800202c <BSP_LED_Toggle>
 8000b26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b2a:	f001 fce1 	bl	80024f0 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000b2e:	4815      	ldr	r0, [pc, #84]	@ (8000b84 <main+0x178>)
 8000b30:	f7ff fe88 	bl	8000844 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f001 fa79 	bl	800202c <BSP_LED_Toggle>
 8000b3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b3e:	f001 fcd7 	bl	80024f0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b42:	2002      	movs	r0, #2
 8000b44:	f001 fa72 	bl	800202c <BSP_LED_Toggle>
 8000b48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b4c:	f001 fcd0 	bl	80024f0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f001 fa6b 	bl	800202c <BSP_LED_Toggle>
 8000b56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b5a:	f001 fcc9 	bl	80024f0 <HAL_Delay>

  log_info("Send Dummy Data");
 8000b5e:	480a      	ldr	r0, [pc, #40]	@ (8000b88 <main+0x17c>)
 8000b60:	f7ff fe70 	bl	8000844 <log_info>
  HAL_Delay(5000);
 8000b64:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b68:	f001 fcc2 	bl	80024f0 <HAL_Delay>
  log_info("Parsing incoming data over USB.");
 8000b6c:	4807      	ldr	r0, [pc, #28]	@ (8000b8c <main+0x180>)
 8000b6e:	f7ff fe69 	bl	8000844 <log_info>

  while (1)
  {
	Test_ParseReceivedUsbData();
 8000b72:	f7ff fe9b 	bl	80008ac <Test_ParseReceivedUsbData>
 8000b76:	e7fc      	b.n	8000b72 <main+0x166>
 8000b78:	200007b4 	.word	0x200007b4
 8000b7c:	2000019c 	.word	0x2000019c
 8000b80:	08011a28 	.word	0x08011a28
 8000b84:	08011a38 	.word	0x08011a38
 8000b88:	08011a4c 	.word	0x08011a4c
 8000b8c:	08011a5c 	.word	0x08011a5c

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09c      	sub	sp, #112	@ 0x70
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0320 	add.w	r3, r7, #32
 8000b9a:	2250      	movs	r2, #80	@ 0x50
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00f fdc2 	bl	8010728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000c74 <SystemClock_Config+0xe4>)
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	4a2e      	ldr	r2, [pc, #184]	@ (8000c74 <SystemClock_Config+0xe4>)
 8000bbc:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000bc0:	6113      	str	r3, [r2, #16]
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <SystemClock_Config+0xe4>)
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bce:	bf00      	nop
 8000bd0:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <SystemClock_Config+0xe4>)
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	f003 0308 	and.w	r3, r3, #8
 8000bd8:	2b08      	cmp	r3, #8
 8000bda:	d1f9      	bne.n	8000bd0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000bdc:	2329      	movs	r3, #41	@ 0x29
 8000bde:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000be6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000bfe:	23fa      	movs	r3, #250	@ 0xfa
 8000c00:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c06:	2302      	movs	r3, #2
 8000c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1a:	f107 0320 	add.w	r3, r7, #32
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 fe94 	bl	800494c <HAL_RCC_OscConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c2a:	f000 fbb1 	bl	8001390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	231f      	movs	r3, #31
 8000c30:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c32:	2303      	movs	r3, #3
 8000c34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	2105      	movs	r1, #5
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 fab5 	bl	80051bc <HAL_RCC_ClockConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c58:	f000 fb9a 	bl	8001390 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <SystemClock_Config+0xe8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000c64:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <SystemClock_Config+0xe8>)
 8000c66:	f043 0320 	orr.w	r3, r3, #32
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	3770      	adds	r7, #112	@ 0x70
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	44020800 	.word	0x44020800
 8000c78:	40022000 	.word	0x40022000

08000c7c <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8000c80:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <MX_HASH_Init+0x2c>)
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <MX_HASH_Init+0x30>)
 8000c84:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <MX_HASH_Init+0x2c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <MX_HASH_Init+0x2c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000c92:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <MX_HASH_Init+0x2c>)
 8000c94:	f001 ffec 	bl	8002c70 <HAL_HASH_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_HASH_Init+0x26>
  {
    Error_Handler();
 8000c9e:	f000 fb77 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001ac 	.word	0x200001ac
 8000cac:	420c0400 	.word	0x420c0400

08000cb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d24 <MX_I2C1_Init+0x74>)
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d28 <MX_I2C1_Init+0x78>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <MX_I2C1_Init+0x74>)
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d2c <MX_I2C1_Init+0x7c>)
 8000cbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <MX_I2C1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <MX_I2C1_Init+0x74>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <MX_I2C1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <MX_I2C1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cea:	480e      	ldr	r0, [pc, #56]	@ (8000d24 <MX_I2C1_Init+0x74>)
 8000cec:	f001 fff8 	bl	8002ce0 <HAL_I2C_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cf6:	f000 fb4b 	bl	8001390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4809      	ldr	r0, [pc, #36]	@ (8000d24 <MX_I2C1_Init+0x74>)
 8000cfe:	f002 f88a 	bl	8002e16 <HAL_I2CEx_ConfigAnalogFilter>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d08:	f000 fb42 	bl	8001390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <MX_I2C1_Init+0x74>)
 8000d10:	f002 f8cc 	bl	8002eac <HAL_I2CEx_ConfigDigitalFilter>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f000 fb39 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001ec 	.word	0x200001ec
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	10c043e5 	.word	0x10c043e5

08000d30 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <MX_RNG_Init+0x24>)
 8000d36:	4a08      	ldr	r2, [pc, #32]	@ (8000d58 <MX_RNG_Init+0x28>)
 8000d38:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <MX_RNG_Init+0x24>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	@ (8000d54 <MX_RNG_Init+0x24>)
 8000d42:	f009 fdd5 	bl	800a8f0 <HAL_RNG_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000d4c:	f000 fb20 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000240 	.word	0x20000240
 8000d58:	420c0800 	.word	0x420c0800

08000d5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08e      	sub	sp, #56	@ 0x38
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d8a:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000d8c:	4a33      	ldr	r2, [pc, #204]	@ (8000e5c <MX_RTC_Init+0x100>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d90:	4b31      	ldr	r3, [pc, #196]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d96:	4b30      	ldr	r3, [pc, #192]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000d98:	227f      	movs	r2, #127	@ 0x7f
 8000d9a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000d9e:	22ff      	movs	r2, #255	@ 0xff
 8000da0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000da2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000da8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dae:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000db4:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000db6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dba:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000dbc:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000dc2:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dc8:	4823      	ldr	r0, [pc, #140]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000dca:	f009 fe2f 	bl	800aa2c <HAL_RTC_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000dd4:	f000 fadc 	bl	8001390 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	481a      	ldr	r0, [pc, #104]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000df0:	f00a f882 	bl	800aef8 <HAL_RTCEx_PrivilegeModeSet>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000dfa:	f000 fac9 	bl	8001390 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	2201      	movs	r2, #1
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480f      	ldr	r0, [pc, #60]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000e1c:	f009 fe88 	bl	800ab30 <HAL_RTC_SetTime>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000e26:	f000 fab3 	bl	8001390 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_RTC_Init+0xfc>)
 8000e42:	f009 ff07 	bl	800ac54 <HAL_RTC_SetDate>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000e4c:	f000 faa0 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3738      	adds	r7, #56	@ 0x38
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000254 	.word	0x20000254
 8000e5c:	44007800 	.word	0x44007800

08000e60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e64:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000e66:	4a28      	ldr	r2, [pc, #160]	@ (8000f08 <MX_SPI1_Init+0xa8>)
 8000e68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6a:	4b26      	ldr	r3, [pc, #152]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000e6c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e72:	4b24      	ldr	r3, [pc, #144]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7e:	4b21      	ldr	r3, [pc, #132]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000e8c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000e94:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000e98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000eae:	2207      	movs	r2, #7
 8000eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000eb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eb8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef0:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <MX_SPI1_Init+0xa4>)
 8000ef2:	f00a f82f 	bl	800af54 <HAL_SPI_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000efc:	f000 fa48 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000284 	.word	0x20000284
 8000f08:	40013000 	.word	0x40013000

08000f0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f10:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f12:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <MX_USART2_UART_Init+0x94>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f16:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b16      	ldr	r3, [pc, #88]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f48:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f54:	4811      	ldr	r0, [pc, #68]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f56:	f00a f988 	bl	800b26a <HAL_UART_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f60:	f000 fa16 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f68:	f00a feb4 	bl	800bcd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f72:	f000 fa0d 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f76:	2100      	movs	r1, #0
 8000f78:	4808      	ldr	r0, [pc, #32]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f7a:	f00a fee9 	bl	800bd50 <HAL_UARTEx_SetRxFifoThreshold>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f84:	f000 fa04 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	@ (8000f9c <MX_USART2_UART_Init+0x90>)
 8000f8a:	f00a fe6a 	bl	800bc62 <HAL_UARTEx_DisableFifoMode>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f94:	f000 f9fc 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000314 	.word	0x20000314
 8000fa0:	40004400 	.word	0x40004400

08000fa4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8000faa:	4a23      	ldr	r2, [pc, #140]	@ (8001038 <MX_USART3_UART_Init+0x94>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fae:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fec:	4811      	ldr	r0, [pc, #68]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8000fee:	f00a f93c 	bl	800b26a <HAL_UART_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ff8:	f000 f9ca 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	480d      	ldr	r0, [pc, #52]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8001000:	f00a fe68 	bl	800bcd4 <HAL_UARTEx_SetTxFifoThreshold>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800100a:	f000 f9c1 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100e:	2100      	movs	r1, #0
 8001010:	4808      	ldr	r0, [pc, #32]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8001012:	f00a fe9d 	bl	800bd50 <HAL_UARTEx_SetRxFifoThreshold>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800101c:	f000 f9b8 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	@ (8001034 <MX_USART3_UART_Init+0x90>)
 8001022:	f00a fe1e 	bl	800bc62 <HAL_UARTEx_DisableFifoMode>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800102c:	f000 f9b0 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200003a8 	.word	0x200003a8
 8001038:	40004800 	.word	0x40004800

0800103c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001040:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 8001042:	4a23      	ldr	r2, [pc, #140]	@ (80010d0 <MX_USART6_UART_Init+0x94>)
 8001044:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001046:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b1f      	ldr	r3, [pc, #124]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b19      	ldr	r3, [pc, #100]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001078:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001084:	4811      	ldr	r0, [pc, #68]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 8001086:	f00a f8f0 	bl	800b26a <HAL_UART_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001090:	f000 f97e 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001094:	2100      	movs	r1, #0
 8001096:	480d      	ldr	r0, [pc, #52]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 8001098:	f00a fe1c 	bl	800bcd4 <HAL_UARTEx_SetTxFifoThreshold>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80010a2:	f000 f975 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4808      	ldr	r0, [pc, #32]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 80010aa:	f00a fe51 	bl	800bd50 <HAL_UARTEx_SetRxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80010b4:	f000 f96c 	bl	8001390 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	@ (80010cc <MX_USART6_UART_Init+0x90>)
 80010ba:	f00a fdd2 	bl	800bc62 <HAL_UARTEx_DisableFifoMode>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80010c4:	f000 f964 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000043c 	.word	0x2000043c
 80010d0:	40006400 	.word	0x40006400

080010d4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 80010d8:	4b29      	ldr	r3, [pc, #164]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 80010da:	4a2a      	ldr	r2, [pc, #168]	@ (8001184 <MX_USB_PCD_Init+0xb0>)
 80010dc:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80010e0:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 80010e2:	4a29      	ldr	r2, [pc, #164]	@ (8001188 <MX_USB_PCD_Init+0xb4>)
 80010e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80010e6:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 80010e8:	2208      	movs	r2, #8
 80010ea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 80010ee:	2202      	movs	r2, #2
 80010f0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010f2:	4b23      	ldr	r3, [pc, #140]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 80010f4:	2202      	movs	r2, #2
 80010f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80010f8:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80010fe:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 8001100:	2200      	movs	r2, #0
 8001102:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 8001106:	2200      	movs	r2, #0
 8001108:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 800110c:	2200      	movs	r2, #0
 800110e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 8001112:	2200      	movs	r2, #0
 8001114:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 8001118:	2200      	movs	r2, #0
 800111a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 800111e:	2200      	movs	r2, #0
 8001120:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001122:	4817      	ldr	r0, [pc, #92]	@ (8001180 <MX_USB_PCD_Init+0xac>)
 8001124:	f001 ff71 	bl	800300a <HAL_PCD_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 800112e:	f000 f92f 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8001132:	2200      	movs	r2, #0
 8001134:	4915      	ldr	r1, [pc, #84]	@ (800118c <MX_USB_PCD_Init+0xb8>)
 8001136:	4813      	ldr	r0, [pc, #76]	@ (8001184 <MX_USB_PCD_Init+0xb0>)
 8001138:	f00d fe48 	bl	800edcc <USBD_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8001142:	f000 f925 	bl	8001390 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001146:	4912      	ldr	r1, [pc, #72]	@ (8001190 <MX_USB_PCD_Init+0xbc>)
 8001148:	480e      	ldr	r0, [pc, #56]	@ (8001184 <MX_USB_PCD_Init+0xb0>)
 800114a:	f00d fe6f 	bl	800ee2c <USBD_RegisterClass>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8001154:	f000 f91c 	bl	8001390 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8001158:	490e      	ldr	r1, [pc, #56]	@ (8001194 <MX_USB_PCD_Init+0xc0>)
 800115a:	480a      	ldr	r0, [pc, #40]	@ (8001184 <MX_USB_PCD_Init+0xb0>)
 800115c:	f00d fa58 	bl	800e610 <USBD_CDC_RegisterInterface>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8001166:	f000 f913 	bl	8001390 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800116a:	4806      	ldr	r0, [pc, #24]	@ (8001184 <MX_USB_PCD_Init+0xb0>)
 800116c:	f00d fe94 	bl	800ee98 <USBD_Start>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8001176:	f000 f90b 	bl	8001390 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200004d0 	.word	0x200004d0
 8001184:	200007b4 	.word	0x200007b4
 8001188:	40016000 	.word	0x40016000
 800118c:	200000d4 	.word	0x200000d4
 8001190:	20000038 	.word	0x20000038
 8001194:	200000b8 	.word	0x200000b8

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	@ 0x30
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ae:	4b72      	ldr	r3, [pc, #456]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 80011b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011b4:	4a70      	ldr	r2, [pc, #448]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 80011b6:	f043 0310 	orr.w	r3, r3, #16
 80011ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011be:	4b6e      	ldr	r3, [pc, #440]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 80011c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 80011ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011d2:	4a69      	ldr	r2, [pc, #420]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011dc:	4b66      	ldr	r3, [pc, #408]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 80011de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	4b63      	ldr	r3, [pc, #396]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 80011ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011f0:	4a61      	ldr	r2, [pc, #388]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 80011f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80011fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 80011fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b5b      	ldr	r3, [pc, #364]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 800120a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800120e:	4a5a      	ldr	r2, [pc, #360]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001218:	4b57      	ldr	r3, [pc, #348]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 800121a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b54      	ldr	r3, [pc, #336]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 8001228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800122c:	4a52      	ldr	r2, [pc, #328]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001236:	4b50      	ldr	r3, [pc, #320]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 8001238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001244:	4b4c      	ldr	r3, [pc, #304]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 8001246:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800124a:	4a4b      	ldr	r2, [pc, #300]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001254:	4b48      	ldr	r3, [pc, #288]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 8001256:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001262:	4b45      	ldr	r3, [pc, #276]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 8001264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001268:	4a43      	ldr	r2, [pc, #268]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 800126a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800126e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001272:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <MX_GPIO_Init+0x1e0>)
 8001274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001280:	2332      	movs	r3, #50	@ 0x32
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800128c:	2302      	movs	r3, #2
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001290:	230b      	movs	r3, #11
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	4838      	ldr	r0, [pc, #224]	@ (800137c <MX_GPIO_Init+0x1e4>)
 800129c:	f001 fb64 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012a0:	2384      	movs	r3, #132	@ 0x84
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ac:	2302      	movs	r3, #2
 80012ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b0:	230b      	movs	r3, #11
 80012b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	4831      	ldr	r0, [pc, #196]	@ (8001380 <MX_GPIO_Init+0x1e8>)
 80012bc:	f001 fb54 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 80012c0:	2310      	movs	r3, #16
 80012c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c4:	2303      	movs	r3, #3
 80012c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	482b      	ldr	r0, [pc, #172]	@ (8001380 <MX_GPIO_Init+0x1e8>)
 80012d4:	f001 fb48 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 80012d8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	4825      	ldr	r0, [pc, #148]	@ (8001384 <MX_GPIO_Init+0x1ec>)
 80012ee:	f001 fb3b 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001300:	2302      	movs	r3, #2
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001304:	230b      	movs	r3, #11
 8001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	481d      	ldr	r0, [pc, #116]	@ (8001384 <MX_GPIO_Init+0x1ec>)
 8001310:	f001 fb2a 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_GPIO_Init+0x1f0>)
 800131a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4819      	ldr	r0, [pc, #100]	@ (800138c <MX_GPIO_Init+0x1f4>)
 8001328:	f001 fb1e 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 800132c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133a:	2302      	movs	r3, #2
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800133e:	230b      	movs	r3, #11
 8001340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	4810      	ldr	r0, [pc, #64]	@ (800138c <MX_GPIO_Init+0x1f4>)
 800134a:	f001 fb0d 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 800134e:	23c0      	movs	r3, #192	@ 0xc0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800135e:	2308      	movs	r3, #8
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	4806      	ldr	r0, [pc, #24]	@ (8001384 <MX_GPIO_Init+0x1ec>)
 800136a:	f001 fafd 	bl	8002968 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800136e:	bf00      	nop
 8001370:	3730      	adds	r7, #48	@ 0x30
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	44020c00 	.word	0x44020c00
 800137c:	42020800 	.word	0x42020800
 8001380:	42020000 	.word	0x42020000
 8001384:	42020400 	.word	0x42020400
 8001388:	10110000 	.word	0x10110000
 800138c:	42021800 	.word	0x42021800

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <Error_Handler+0x8>

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 80013b4:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <HAL_HASH_MspInit+0x34>)
 80013b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ba:	4a09      	ldr	r2, [pc, #36]	@ (80013e0 <HAL_HASH_MspInit+0x34>)
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_HASH_MspInit+0x34>)
 80013c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	44020c00 	.word	0x44020c00

080013e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0cc      	sub	sp, #304	@ 0x130
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80013ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013f2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001408:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800140c:	4618      	mov	r0, r3
 800140e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001412:	461a      	mov	r2, r3
 8001414:	2100      	movs	r1, #0
 8001416:	f00f f987 	bl	8010728 <memset>
  if(hi2c->Instance==I2C1)
 800141a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800141e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a33      	ldr	r2, [pc, #204]	@ (80014f4 <HAL_I2C_MspInit+0x110>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d15e      	bne.n	80014ea <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800142c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001430:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001434:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001440:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001444:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001448:	2200      	movs	r2, #0
 800144a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	4618      	mov	r0, r3
 8001454:	f004 f9f4 	bl	8005840 <HAL_RCCEx_PeriphCLKConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800145e:	f7ff ff97 	bl	8001390 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b25      	ldr	r3, [pc, #148]	@ (80014f8 <HAL_I2C_MspInit+0x114>)
 8001464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001468:	4a23      	ldr	r2, [pc, #140]	@ (80014f8 <HAL_I2C_MspInit+0x114>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001472:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <HAL_I2C_MspInit+0x114>)
 8001474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001478:	f003 0202 	and.w	r2, r3, #2
 800147c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001480:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800148a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800148e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001490:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001494:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001498:	2312      	movs	r3, #18
 800149a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014aa:	2304      	movs	r3, #4
 80014ac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80014b4:	4619      	mov	r1, r3
 80014b6:	4811      	ldr	r0, [pc, #68]	@ (80014fc <HAL_I2C_MspInit+0x118>)
 80014b8:	f001 fa56 	bl	8002968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014bc:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <HAL_I2C_MspInit+0x114>)
 80014be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014c2:	4a0d      	ldr	r2, [pc, #52]	@ (80014f8 <HAL_I2C_MspInit+0x114>)
 80014c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014c8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80014cc:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_I2C_MspInit+0x114>)
 80014ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014d2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80014d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014e4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014e8:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014ea:	bf00      	nop
 80014ec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40005400 	.word	0x40005400
 80014f8:	44020c00 	.word	0x44020c00
 80014fc:	42020400 	.word	0x42020400

08001500 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b0c6      	sub	sp, #280	@ 0x118
 8001504:	af00      	add	r7, sp, #0
 8001506:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800150a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800150e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001518:	4618      	mov	r0, r3
 800151a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800151e:	461a      	mov	r2, r3
 8001520:	2100      	movs	r1, #0
 8001522:	f00f f901 	bl	8010728 <memset>
  if(hrng->Instance==RNG)
 8001526:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800152a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1d      	ldr	r2, [pc, #116]	@ (80015a8 <HAL_RNG_MspInit+0xa8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d131      	bne.n	800159c <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001538:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800153c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001540:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800154c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001554:	2200      	movs	r2, #0
 8001556:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4618      	mov	r0, r3
 8001560:	f004 f96e 	bl	8005840 <HAL_RCCEx_PeriphCLKConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 800156a:	f7ff ff11 	bl	8001390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <HAL_RNG_MspInit+0xac>)
 8001570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <HAL_RNG_MspInit+0xac>)
 8001576:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800157a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <HAL_RNG_MspInit+0xac>)
 8001580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001584:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001588:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800158c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001596:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800159a:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800159c:	bf00      	nop
 800159e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	420c0800 	.word	0x420c0800
 80015ac:	44020c00 	.word	0x44020c00

080015b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b0c6      	sub	sp, #280	@ 0x118
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015be:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80015c8:	4618      	mov	r0, r3
 80015ca:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80015ce:	461a      	mov	r2, r3
 80015d0:	2100      	movs	r1, #0
 80015d2:	f00f f8a9 	bl	8010728 <memset>
  if(hrtc->Instance==RTC)
 80015d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a21      	ldr	r2, [pc, #132]	@ (8001668 <HAL_RTC_MspInit+0xb8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d13a      	bne.n	800165e <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015ec:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80015f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001608:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	4618      	mov	r0, r3
 8001612:	f004 f915 	bl	8005840 <HAL_RCCEx_PeriphCLKConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 800161c:	f7ff feb8 	bl	8001390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_RTC_MspInit+0xbc>)
 8001622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001626:	4a11      	ldr	r2, [pc, #68]	@ (800166c <HAL_RTC_MspInit+0xbc>)
 8001628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800162c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001630:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <HAL_RTC_MspInit+0xbc>)
 8001632:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001636:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <HAL_RTC_MspInit+0xbc>)
 8001638:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800163c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <HAL_RTC_MspInit+0xbc>)
 8001642:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001646:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800164a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800164e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001658:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800165c:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800165e:	bf00      	nop
 8001660:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	44007800 	.word	0x44007800
 800166c:	44020c00 	.word	0x44020c00

08001670 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b0ce      	sub	sp, #312	@ 0x138
 8001674:	af00      	add	r7, sp, #0
 8001676:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800167a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800167e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001690:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001694:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001698:	4618      	mov	r0, r3
 800169a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800169e:	461a      	mov	r2, r3
 80016a0:	2100      	movs	r1, #0
 80016a2:	f00f f841 	bl	8010728 <memset>
  if(hspi->Instance==SPI1)
 80016a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016aa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a49      	ldr	r2, [pc, #292]	@ (80017d8 <HAL_SPI_MspInit+0x168>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	f040 808a 	bne.w	80017ce <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80016ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016be:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80016c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 80016ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016d6:	2200      	movs	r2, #0
 80016d8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016dc:	f107 0318 	add.w	r3, r7, #24
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 f8ad 	bl	8005840 <HAL_RCCEx_PeriphCLKConfig>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 80016ec:	f7ff fe50 	bl	8001390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f0:	4b3a      	ldr	r3, [pc, #232]	@ (80017dc <HAL_SPI_MspInit+0x16c>)
 80016f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016f6:	4a39      	ldr	r2, [pc, #228]	@ (80017dc <HAL_SPI_MspInit+0x16c>)
 80016f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016fc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001700:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <HAL_SPI_MspInit+0x16c>)
 8001702:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001706:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800170a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800170e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001718:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800171c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <HAL_SPI_MspInit+0x16c>)
 8001720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001724:	4a2d      	ldr	r2, [pc, #180]	@ (80017dc <HAL_SPI_MspInit+0x16c>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800172e:	4b2b      	ldr	r3, [pc, #172]	@ (80017dc <HAL_SPI_MspInit+0x16c>)
 8001730:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001734:	f003 0201 	and.w	r2, r3, #1
 8001738:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800173c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001746:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800174a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800174c:	4b23      	ldr	r3, [pc, #140]	@ (80017dc <HAL_SPI_MspInit+0x16c>)
 800174e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001752:	4a22      	ldr	r2, [pc, #136]	@ (80017dc <HAL_SPI_MspInit+0x16c>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800175c:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <HAL_SPI_MspInit+0x16c>)
 800175e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001762:	f003 0208 	and.w	r2, r3, #8
 8001766:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800176a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001774:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001778:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800177a:	2360      	movs	r3, #96	@ 0x60
 800177c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001792:	2305      	movs	r3, #5
 8001794:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800179c:	4619      	mov	r1, r3
 800179e:	4810      	ldr	r0, [pc, #64]	@ (80017e0 <HAL_SPI_MspInit+0x170>)
 80017a0:	f001 f8e2 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017bc:	2305      	movs	r3, #5
 80017be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80017c6:	4619      	mov	r1, r3
 80017c8:	4806      	ldr	r0, [pc, #24]	@ (80017e4 <HAL_SPI_MspInit+0x174>)
 80017ca:	f001 f8cd 	bl	8002968 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017ce:	bf00      	nop
 80017d0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40013000 	.word	0x40013000
 80017dc:	44020c00 	.word	0x44020c00
 80017e0:	42020000 	.word	0x42020000
 80017e4:	42020c00 	.word	0x42020c00

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b0d2      	sub	sp, #328	@ 0x148
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017f6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001808:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800180c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001810:	4618      	mov	r0, r3
 8001812:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001816:	461a      	mov	r2, r3
 8001818:	2100      	movs	r1, #0
 800181a:	f00e ff85 	bl	8010728 <memset>
  if(huart->Instance==USART2)
 800181e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001822:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4ac7      	ldr	r2, [pc, #796]	@ (8001b48 <HAL_UART_MspInit+0x360>)
 800182c:	4293      	cmp	r3, r2
 800182e:	f040 808a 	bne.w	8001946 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001832:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001836:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800183a:	f04f 0202 	mov.w	r2, #2
 800183e:	f04f 0300 	mov.w	r3, #0
 8001842:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001846:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800184a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800184e:	2200      	movs	r2, #0
 8001850:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001852:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001856:	4618      	mov	r0, r3
 8001858:	f003 fff2 	bl	8005840 <HAL_RCCEx_PeriphCLKConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001862:	f7ff fd95 	bl	8001390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001866:	4bb9      	ldr	r3, [pc, #740]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 8001868:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800186c:	4ab7      	ldr	r2, [pc, #732]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 800186e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001872:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001876:	4bb5      	ldr	r3, [pc, #724]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 8001878:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800187c:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8001880:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001884:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800188e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001892:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	4bad      	ldr	r3, [pc, #692]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 8001896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800189a:	4aac      	ldr	r2, [pc, #688]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018a4:	4ba9      	ldr	r3, [pc, #676]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 80018a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80018c0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c2:	4ba2      	ldr	r3, [pc, #648]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 80018c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018c8:	4aa0      	ldr	r2, [pc, #640]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 80018ca:	f043 0308 	orr.w	r3, r3, #8
 80018ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018d2:	4b9e      	ldr	r3, [pc, #632]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 80018d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d8:	f003 0208 	and.w	r2, r3, #8
 80018dc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80018ee:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018f0:	2308      	movs	r3, #8
 80018f2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001908:	2307      	movs	r3, #7
 800190a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001912:	4619      	mov	r1, r3
 8001914:	488e      	ldr	r0, [pc, #568]	@ (8001b50 <HAL_UART_MspInit+0x368>)
 8001916:	f001 f827 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800191a:	2320      	movs	r3, #32
 800191c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001932:	2307      	movs	r3, #7
 8001934:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001938:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800193c:	4619      	mov	r1, r3
 800193e:	4885      	ldr	r0, [pc, #532]	@ (8001b54 <HAL_UART_MspInit+0x36c>)
 8001940:	f001 f812 	bl	8002968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001944:	e0fb      	b.n	8001b3e <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART3)
 8001946:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800194a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a81      	ldr	r2, [pc, #516]	@ (8001b58 <HAL_UART_MspInit+0x370>)
 8001954:	4293      	cmp	r3, r2
 8001956:	f040 808c 	bne.w	8001a72 <HAL_UART_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800195a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800195e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001962:	f04f 0204 	mov.w	r2, #4
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800196e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001972:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001976:	2200      	movs	r2, #0
 8001978:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800197e:	4618      	mov	r0, r3
 8001980:	f003 ff5e 	bl	8005840 <HAL_RCCEx_PeriphCLKConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800198a:	f7ff fd01 	bl	8001390 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800198e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 8001990:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001994:	4a6d      	ldr	r2, [pc, #436]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 8001996:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800199a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800199e:	4b6b      	ldr	r3, [pc, #428]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 80019a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019a4:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80019a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80019ba:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	4b63      	ldr	r3, [pc, #396]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 80019be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019c2:	4a62      	ldr	r2, [pc, #392]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019cc:	4b5f      	ldr	r3, [pc, #380]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 80019ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019d2:	f003 0202 	and.w	r2, r3, #2
 80019d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019da:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019e8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	4b58      	ldr	r3, [pc, #352]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 80019ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f0:	4a56      	ldr	r2, [pc, #344]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 80019f2:	f043 0308 	orr.w	r3, r3, #8
 80019f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019fa:	4b54      	ldr	r3, [pc, #336]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 80019fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a00:	f003 0208 	and.w	r2, r3, #8
 8001a04:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a08:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a12:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a16:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a1c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a32:	2307      	movs	r3, #7
 8001a34:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4847      	ldr	r0, [pc, #284]	@ (8001b5c <HAL_UART_MspInit+0x374>)
 8001a40:	f000 ff92 	bl	8002968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a48:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a5e:	2307      	movs	r3, #7
 8001a60:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a64:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001a68:	4619      	mov	r1, r3
 8001a6a:	483a      	ldr	r0, [pc, #232]	@ (8001b54 <HAL_UART_MspInit+0x36c>)
 8001a6c:	f000 ff7c 	bl	8002968 <HAL_GPIO_Init>
}
 8001a70:	e065      	b.n	8001b3e <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART6)
 8001a72:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a76:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a38      	ldr	r2, [pc, #224]	@ (8001b60 <HAL_UART_MspInit+0x378>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d15c      	bne.n	8001b3e <HAL_UART_MspInit+0x356>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001a84:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a88:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001a8c:	f04f 0220 	mov.w	r2, #32
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8001a98:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a9c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 fec9 	bl	8005840 <HAL_RCCEx_PeriphCLKConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 8001ab4:	f7ff fc6c 	bl	8001390 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ab8:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 8001aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001abe:	4a23      	ldr	r2, [pc, #140]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 8001ac0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ac4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ac8:	4b20      	ldr	r3, [pc, #128]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 8001aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ace:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8001ad2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001ad6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001ae0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ae4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 8001ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aec:	4a17      	ldr	r2, [pc, #92]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_UART_MspInit+0x364>)
 8001af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001afc:	f003 0204 	and.w	r2, r3, #4
 8001b00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b04:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b0e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b12:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b14:	23c0      	movs	r3, #192	@ 0xc0
 8001b16:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b32:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001b36:	4619      	mov	r1, r3
 8001b38:	480a      	ldr	r0, [pc, #40]	@ (8001b64 <HAL_UART_MspInit+0x37c>)
 8001b3a:	f000 ff15 	bl	8002968 <HAL_GPIO_Init>
}
 8001b3e:	bf00      	nop
 8001b40:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40004400 	.word	0x40004400
 8001b4c:	44020c00 	.word	0x44020c00
 8001b50:	42020000 	.word	0x42020000
 8001b54:	42020c00 	.word	0x42020c00
 8001b58:	40004800 	.word	0x40004800
 8001b5c:	42020400 	.word	0x42020400
 8001b60:	40006400 	.word	0x40006400
 8001b64:	42020800 	.word	0x42020800

08001b68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b0c6      	sub	sp, #280	@ 0x118
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b72:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b76:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b78:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b80:	4618      	mov	r0, r3
 8001b82:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001b86:	461a      	mov	r2, r3
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f00e fdcd 	bl	8010728 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001b8e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a22      	ldr	r2, [pc, #136]	@ (8001c24 <HAL_PCD_MspInit+0xbc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d13b      	bne.n	8001c18 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ba0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ba4:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0310 	mov.w	r3, #16
 8001bb0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001bb4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bbc:	2230      	movs	r2, #48	@ 0x30
 8001bbe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fe3a 	bl	8005840 <HAL_RCCEx_PeriphCLKConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8001bd2:	f7ff fbdd 	bl	8001390 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8001bd6:	f002 fea9 	bl	800492c <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001bda:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <HAL_PCD_MspInit+0xc0>)
 8001bdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001be0:	4a11      	ldr	r2, [pc, #68]	@ (8001c28 <HAL_PCD_MspInit+0xc0>)
 8001be2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001be6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001bea:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <HAL_PCD_MspInit+0xc0>)
 8001bec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001bf0:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001bf4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bf8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c06:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	204a      	movs	r0, #74	@ 0x4a
 8001c0e:	f000 fd4b 	bl	80026a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8001c12:	204a      	movs	r0, #74	@ 0x4a
 8001c14:	f000 fd62 	bl	80026dc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001c18:	bf00      	nop
 8001c1a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40016000 	.word	0x40016000
 8001c28:	44020c00 	.word	0x44020c00

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <NMI_Handler+0x4>

08001c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <MemManage_Handler+0x4>

08001c44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c48:	bf00      	nop
 8001c4a:	e7fd      	b.n	8001c48 <BusFault_Handler+0x4>

08001c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <UsageFault_Handler+0x4>

08001c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c82:	f000 fc15 	bl	80024b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 fa6e 	bl	8002170 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <USB_DRD_FS_IRQHandler+0x10>)
 8001c9e:	f001 fad7 	bl	8003250 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200004d0 	.word	0x200004d0

08001cac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e00a      	b.n	8001cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cbe:	f3af 8000 	nop.w
 8001cc2:	4601      	mov	r1, r0
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	60ba      	str	r2, [r7, #8]
 8001cca:	b2ca      	uxtb	r2, r1
 8001ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbf0      	blt.n	8001cbe <_read+0x12>
  }

  return len;
 8001cdc:	687b      	ldr	r3, [r7, #4]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	60f8      	str	r0, [r7, #12]
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e009      	b.n	8001d0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	60ba      	str	r2, [r7, #8]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fabb 	bl	800227c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbf1      	blt.n	8001cf8 <_write+0x12>
  }
  return len;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_close>:

int _close(int file)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d46:	605a      	str	r2, [r3, #4]
  return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_isatty>:

int _isatty(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d5e:	2301      	movs	r3, #1
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f00e fd04 	bl	80107c4 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a05      	ldr	r2, [pc, #20]	@ (8001dec <_sbrk+0x64>)
 8001dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200a0000 	.word	0x200a0000
 8001de8:	00000500 	.word	0x00000500
 8001dec:	20000a90 	.word	0x20000a90
 8001df0:	200113b8 	.word	0x200113b8

08001df4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dfa:	4b35      	ldr	r3, [pc, #212]	@ (8001ed0 <SystemInit+0xdc>)
 8001dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e00:	4a33      	ldr	r2, [pc, #204]	@ (8001ed0 <SystemInit+0xdc>)
 8001e02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001e0a:	4b32      	ldr	r3, [pc, #200]	@ (8001ed4 <SystemInit+0xe0>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001e10:	4b30      	ldr	r3, [pc, #192]	@ (8001ed4 <SystemInit+0xe0>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001e16:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed4 <SystemInit+0xe0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed4 <SystemInit+0xe0>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	492c      	ldr	r1, [pc, #176]	@ (8001ed4 <SystemInit+0xe0>)
 8001e22:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed8 <SystemInit+0xe4>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001e28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <SystemInit+0xe0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001e2e:	4b29      	ldr	r3, [pc, #164]	@ (8001ed4 <SystemInit+0xe0>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001e34:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <SystemInit+0xe0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001e3a:	4b26      	ldr	r3, [pc, #152]	@ (8001ed4 <SystemInit+0xe0>)
 8001e3c:	4a27      	ldr	r2, [pc, #156]	@ (8001edc <SystemInit+0xe8>)
 8001e3e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001e40:	4b24      	ldr	r3, [pc, #144]	@ (8001ed4 <SystemInit+0xe0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001e46:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <SystemInit+0xe0>)
 8001e48:	4a24      	ldr	r2, [pc, #144]	@ (8001edc <SystemInit+0xe8>)
 8001e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001e4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <SystemInit+0xe0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001e52:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <SystemInit+0xe0>)
 8001e54:	4a21      	ldr	r2, [pc, #132]	@ (8001edc <SystemInit+0xe8>)
 8001e56:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001e58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <SystemInit+0xe0>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed4 <SystemInit+0xe0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed4 <SystemInit+0xe0>)
 8001e64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <SystemInit+0xe0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e70:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <SystemInit+0xdc>)
 8001e72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e76:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001e78:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <SystemInit+0xec>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001e80:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001e88:	d003      	beq.n	8001e92 <SystemInit+0x9e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001e90:	d117      	bne.n	8001ec2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001e92:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <SystemInit+0xec>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <SystemInit+0xec>)
 8001ea0:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <SystemInit+0xf0>)
 8001ea2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <SystemInit+0xec>)
 8001ea6:	4a10      	ldr	r2, [pc, #64]	@ (8001ee8 <SystemInit+0xf4>)
 8001ea8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <SystemInit+0xec>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee0 <SystemInit+0xec>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <SystemInit+0xec>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4a09      	ldr	r2, [pc, #36]	@ (8001ee0 <SystemInit+0xec>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	61d3      	str	r3, [r2, #28]
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00
 8001ed4:	44020c00 	.word	0x44020c00
 8001ed8:	eae2eae3 	.word	0xeae2eae3
 8001edc:	01010280 	.word	0x01010280
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	08192a3b 	.word	0x08192a3b
 8001ee8:	4c5d6e7f 	.word	0x4c5d6e7f

08001eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001eec:	480d      	ldr	r0, [pc, #52]	@ (8001f24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ef0:	f7ff ff80 	bl	8001df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef4:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ef6:	490d      	ldr	r1, [pc, #52]	@ (8001f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f30 <LoopForever+0xe>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001efc:	e002      	b.n	8001f04 <LoopCopyDataInit>

08001efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f02:	3304      	adds	r3, #4

08001f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f08:	d3f9      	bcc.n	8001efe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f38 <LoopForever+0x16>)
  movs r3, #0
 8001f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f10:	e001      	b.n	8001f16 <LoopFillZerobss>

08001f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f14:	3204      	adds	r2, #4

08001f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f18:	d3fb      	bcc.n	8001f12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f1a:	f00e fc59 	bl	80107d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f1e:	f7fe fd75 	bl	8000a0c <main>

08001f22 <LoopForever>:

LoopForever:
    b LoopForever
 8001f22:	e7fe      	b.n	8001f22 <LoopForever>
  ldr   r0, =_estack
 8001f24:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f2c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001f30:	08011b8c 	.word	0x08011b8c
  ldr r2, =_sbss
 8001f34:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001f38:	200113b4 	.word	0x200113b4

08001f3c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f3c:	e7fe      	b.n	8001f3c <ADC1_IRQHandler>
	...

08001f40 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08c      	sub	sp, #48	@ 0x30
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d009      	beq.n	8001f68 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <BSP_LED_Init+0x28>
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d003      	beq.n	8001f68 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f60:	f06f 0301 	mvn.w	r3, #1
 8001f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f66:	e055      	b.n	8002014 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d10f      	bne.n	8001f8e <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8001f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002020 <BSP_LED_Init+0xe0>)
 8001f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f74:	4a2a      	ldr	r2, [pc, #168]	@ (8002020 <BSP_LED_Init+0xe0>)
 8001f76:	f043 0320 	orr.w	r3, r3, #32
 8001f7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f7e:	4b28      	ldr	r3, [pc, #160]	@ (8002020 <BSP_LED_Init+0xe0>)
 8001f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	e021      	b.n	8001fd2 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10f      	bne.n	8001fb4 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8001f94:	4b22      	ldr	r3, [pc, #136]	@ (8002020 <BSP_LED_Init+0xe0>)
 8001f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f9a:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <BSP_LED_Init+0xe0>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <BSP_LED_Init+0xe0>)
 8001fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	e00e      	b.n	8001fd2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <BSP_LED_Init+0xe0>)
 8001fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fba:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <BSP_LED_Init+0xe0>)
 8001fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fc4:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <BSP_LED_Init+0xe0>)
 8001fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4a13      	ldr	r2, [pc, #76]	@ (8002024 <BSP_LED_Init+0xe4>)
 8001fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fda:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	4a0f      	ldr	r2, [pc, #60]	@ (8002028 <BSP_LED_Init+0xe8>)
 8001fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff0:	f107 0218 	add.w	r2, r7, #24
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fcb6 	bl	8002968 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <BSP_LED_Init+0xe8>)
 8002000:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4a07      	ldr	r2, [pc, #28]	@ (8002024 <BSP_LED_Init+0xe4>)
 8002008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800200c:	2200      	movs	r2, #0
 800200e:	4619      	mov	r1, r3
 8002010:	f000 fdfc 	bl	8002c0c <HAL_GPIO_WritePin>
  }

  return ret;
 8002014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002016:	4618      	mov	r0, r3
 8002018:	3730      	adds	r7, #48	@ 0x30
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	44020c00 	.word	0x44020c00
 8002024:	08011b14 	.word	0x08011b14
 8002028:	2000000c 	.word	0x2000000c

0800202c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d009      	beq.n	8002054 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <BSP_LED_Toggle+0x28>
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	2b02      	cmp	r3, #2
 800204a:	d003      	beq.n	8002054 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800204c:	f06f 0301 	mvn.w	r3, #1
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e00b      	b.n	800206c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	4a08      	ldr	r2, [pc, #32]	@ (8002078 <BSP_LED_Toggle+0x4c>)
 8002058:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	4907      	ldr	r1, [pc, #28]	@ (800207c <BSP_LED_Toggle+0x50>)
 8002060:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f000 fde8 	bl	8002c3c <HAL_GPIO_TogglePin>
  }

  return ret;
 800206c:	68fb      	ldr	r3, [r7, #12]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000000c 	.word	0x2000000c
 800207c:	08011b14 	.word	0x08011b14

08002080 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	460a      	mov	r2, r1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002090:	4b30      	ldr	r3, [pc, #192]	@ (8002154 <BSP_PB_Init+0xd4>)
 8002092:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002096:	4a2f      	ldr	r2, [pc, #188]	@ (8002154 <BSP_PB_Init+0xd4>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002154 <BSP_PB_Init+0xd4>)
 80020a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80020ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020b2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80020b4:	2302      	movs	r3, #2
 80020b6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10c      	bne.n	80020dc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	4a23      	ldr	r2, [pc, #140]	@ (8002158 <BSP_PB_Init+0xd8>)
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	f107 020c 	add.w	r2, r7, #12
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fc47 	bl	8002968 <HAL_GPIO_Init>
 80020da:	e036      	b.n	800214a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80020dc:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <BSP_PB_Init+0xdc>)
 80020de:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002158 <BSP_PB_Init+0xd8>)
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	f107 020c 	add.w	r2, r7, #12
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fc3a 	bl	8002968 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80020f4:	79fa      	ldrb	r2, [r7, #7]
 80020f6:	4613      	mov	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4a18      	ldr	r2, [pc, #96]	@ (8002160 <BSP_PB_Init+0xe0>)
 8002100:	441a      	add	r2, r3
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	4917      	ldr	r1, [pc, #92]	@ (8002164 <BSP_PB_Init+0xe4>)
 8002106:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800210a:	4619      	mov	r1, r3
 800210c:	4610      	mov	r0, r2
 800210e:	f000 fbcf 	bl	80028b0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002112:	79fa      	ldrb	r2, [r7, #7]
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4a10      	ldr	r2, [pc, #64]	@ (8002160 <BSP_PB_Init+0xe0>)
 800211e:	1898      	adds	r0, r3, r2
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	4a11      	ldr	r2, [pc, #68]	@ (8002168 <BSP_PB_Init+0xe8>)
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	461a      	mov	r2, r3
 800212a:	2100      	movs	r1, #0
 800212c:	f000 fb94 	bl	8002858 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002130:	2018      	movs	r0, #24
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	4a0d      	ldr	r2, [pc, #52]	@ (800216c <BSP_PB_Init+0xec>)
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	2200      	movs	r2, #0
 800213c:	4619      	mov	r1, r3
 800213e:	f000 fab3 	bl	80026a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002142:	2318      	movs	r3, #24
 8002144:	4618      	mov	r0, r3
 8002146:	f000 fac9 	bl	80026dc <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	44020c00 	.word	0x44020c00
 8002158:	20000018 	.word	0x20000018
 800215c:	10110000 	.word	0x10110000
 8002160:	20000a94 	.word	0x20000a94
 8002164:	08011b1c 	.word	0x08011b1c
 8002168:	2000001c 	.word	0x2000001c
 800216c:	20000020 	.word	0x20000020

08002170 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800217a:	79fa      	ldrb	r2, [r7, #7]
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <BSP_PB_IRQHandler+0x28>)
 8002186:	4413      	add	r3, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fba5 	bl	80028d8 <HAL_EXTI_IRQHandler>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000a94 	.word	0x20000a94

0800219c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80021ca:	f06f 0301 	mvn.w	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e018      	b.n	8002204 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2294      	movs	r2, #148	@ 0x94
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	4a0d      	ldr	r2, [pc, #52]	@ (8002210 <BSP_COM_Init+0x5c>)
 80021dc:	4413      	add	r3, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f870 	bl	80022c4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2294      	movs	r2, #148	@ 0x94
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	4a08      	ldr	r2, [pc, #32]	@ (8002210 <BSP_COM_Init+0x5c>)
 80021ee:	4413      	add	r3, r2
 80021f0:	6839      	ldr	r1, [r7, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f80e 	bl	8002214 <MX_USART_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80021fe:	f06f 0303 	mvn.w	r3, #3
 8002202:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002204:	68fb      	ldr	r3, [r7, #12]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000aa0 	.word	0x20000aa0

08002214 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <MX_USART_Init+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	220c      	movs	r2, #12
 8002232:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	895b      	ldrh	r3, [r3, #10]
 8002238:	461a      	mov	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	891b      	ldrh	r3, [r3, #8]
 800224a:	461a      	mov	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	899b      	ldrh	r3, [r3, #12]
 8002254:	461a      	mov	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002260:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f008 fffe 	bl	800b26a <HAL_UART_Init>
 800226e:	4603      	mov	r3, r0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000008 	.word	0x20000008

0800227c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002284:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <__io_putchar+0x30>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	2394      	movs	r3, #148	@ 0x94
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	4a07      	ldr	r2, [pc, #28]	@ (80022b0 <__io_putchar+0x34>)
 8002292:	1898      	adds	r0, r3, r2
 8002294:	1d39      	adds	r1, r7, #4
 8002296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229a:	2201      	movs	r2, #1
 800229c:	f009 f835 	bl	800b30a <HAL_UART_Transmit>
  return ch;
 80022a0:	687b      	ldr	r3, [r7, #4]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000b34 	.word	0x20000b34
 80022b0:	20000aa0 	.word	0x20000aa0

080022b4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff ff6f 	bl	800219c <BSP_PB_Callback>
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	@ 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <COM1_MspInit+0xa8>)
 80022ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022d2:	4a26      	ldr	r2, [pc, #152]	@ (800236c <COM1_MspInit+0xa8>)
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022dc:	4b23      	ldr	r3, [pc, #140]	@ (800236c <COM1_MspInit+0xa8>)
 80022de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80022ea:	4b20      	ldr	r3, [pc, #128]	@ (800236c <COM1_MspInit+0xa8>)
 80022ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022f0:	4a1e      	ldr	r2, [pc, #120]	@ (800236c <COM1_MspInit+0xa8>)
 80022f2:	f043 0308 	orr.w	r3, r3, #8
 80022f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022fa:	4b1c      	ldr	r3, [pc, #112]	@ (800236c <COM1_MspInit+0xa8>)
 80022fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002308:	4b18      	ldr	r3, [pc, #96]	@ (800236c <COM1_MspInit+0xa8>)
 800230a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800230e:	4a17      	ldr	r2, [pc, #92]	@ (800236c <COM1_MspInit+0xa8>)
 8002310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002314:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002318:	4b14      	ldr	r3, [pc, #80]	@ (800236c <COM1_MspInit+0xa8>)
 800231a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800231e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002326:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800232a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002330:	2302      	movs	r3, #2
 8002332:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002334:	2301      	movs	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002338:	2307      	movs	r3, #7
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	480b      	ldr	r0, [pc, #44]	@ (8002370 <COM1_MspInit+0xac>)
 8002344:	f000 fb10 	bl	8002968 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800234c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002352:	2307      	movs	r3, #7
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4619      	mov	r1, r3
 800235c:	4804      	ldr	r0, [pc, #16]	@ (8002370 <COM1_MspInit+0xac>)
 800235e:	f000 fb03 	bl	8002968 <HAL_GPIO_Init>
}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	@ 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	44020c00 	.word	0x44020c00
 8002370:	42020c00 	.word	0x42020c00

08002374 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002378:	2003      	movs	r0, #3
 800237a:	f000 f98a 	bl	8002692 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800237e:	f003 f8d5 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8002382:	4602      	mov	r2, r0
 8002384:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <HAL_Init+0x44>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	490b      	ldr	r1, [pc, #44]	@ (80023bc <HAL_Init+0x48>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
 8002394:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <HAL_Init+0x4c>)
 8002396:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002398:	2004      	movs	r0, #4
 800239a:	f000 f9cf 	bl	800273c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800239e:	200f      	movs	r0, #15
 80023a0:	f000 f810 	bl	80023c4 <HAL_InitTick>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e002      	b.n	80023b4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023ae:	f7fe fff5 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	44020c00 	.word	0x44020c00
 80023bc:	08011afc 	.word	0x08011afc
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80023d0:	4b33      	ldr	r3, [pc, #204]	@ (80024a0 <HAL_InitTick+0xdc>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e05c      	b.n	8002496 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80023dc:	4b31      	ldr	r3, [pc, #196]	@ (80024a4 <HAL_InitTick+0xe0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d10c      	bne.n	8002402 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80023e8:	4b2f      	ldr	r3, [pc, #188]	@ (80024a8 <HAL_InitTick+0xe4>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b2c      	ldr	r3, [pc, #176]	@ (80024a0 <HAL_InitTick+0xdc>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e037      	b.n	8002472 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002402:	f000 f9f3 	bl	80027ec <HAL_SYSTICK_GetCLKSourceConfig>
 8002406:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d023      	beq.n	8002456 <HAL_InitTick+0x92>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d82d      	bhi.n	8002470 <HAL_InitTick+0xac>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_InitTick+0x5e>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d00d      	beq.n	800243c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002420:	e026      	b.n	8002470 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002422:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <HAL_InitTick+0xe4>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <HAL_InitTick+0xdc>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	4619      	mov	r1, r3
 800242c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002430:	fbb3 f3f1 	udiv	r3, r3, r1
 8002434:	fbb2 f3f3 	udiv	r3, r2, r3
 8002438:	60fb      	str	r3, [r7, #12]
        break;
 800243a:	e01a      	b.n	8002472 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800243c:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <HAL_InitTick+0xdc>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002446:	fbb3 f3f2 	udiv	r3, r3, r2
 800244a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	60fb      	str	r3, [r7, #12]
        break;
 8002454:	e00d      	b.n	8002472 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002456:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <HAL_InitTick+0xdc>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002460:	fbb3 f3f2 	udiv	r3, r3, r2
 8002464:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	60fb      	str	r3, [r7, #12]
        break;
 800246e:	e000      	b.n	8002472 <HAL_InitTick+0xae>
        break;
 8002470:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f940 	bl	80026f8 <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e009      	b.n	8002496 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002482:	2200      	movs	r2, #0
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	f04f 30ff 	mov.w	r0, #4294967295
 800248a:	f000 f90d 	bl	80026a8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800248e:	4a07      	ldr	r2, [pc, #28]	@ (80024ac <HAL_InitTick+0xe8>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000028 	.word	0x20000028
 80024a4:	e000e010 	.word	0xe000e010
 80024a8:	20000004 	.word	0x20000004
 80024ac:	20000024 	.word	0x20000024

080024b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b4:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_IncTick+0x20>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_IncTick+0x24>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <HAL_IncTick+0x24>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000028 	.word	0x20000028
 80024d4:	20000b38 	.word	0x20000b38

080024d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b03      	ldr	r3, [pc, #12]	@ (80024ec <HAL_GetTick+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000b38 	.word	0x20000b38

080024f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7ff ffee 	bl	80024d8 <HAL_GetTick>
 80024fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d005      	beq.n	8002516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250a:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <HAL_Delay+0x44>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4413      	add	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002516:	bf00      	nop
 8002518:	f7ff ffde 	bl	80024d8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	429a      	cmp	r2, r3
 8002526:	d8f7      	bhi.n	8002518 <HAL_Delay+0x28>
  {
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000028 	.word	0x20000028

08002538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002548:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002554:	4013      	ands	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002560:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256a:	4a04      	ldr	r2, [pc, #16]	@ (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	60d3      	str	r3, [r2, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002584:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <__NVIC_GetPriorityGrouping+0x18>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	f003 0307 	and.w	r3, r3, #7
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	db0b      	blt.n	80025c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	4907      	ldr	r1, [pc, #28]	@ (80025d4 <__NVIC_EnableIRQ+0x38>)
 80025b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2001      	movs	r0, #1
 80025be:	fa00 f202 	lsl.w	r2, r0, r2
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	@ (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	@ (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	@ 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	@ 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ff4c 	bl	8002538 <__NVIC_SetPriorityGrouping>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026b6:	f7ff ff63 	bl	8002580 <__NVIC_GetPriorityGrouping>
 80026ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	6978      	ldr	r0, [r7, #20]
 80026c2:	f7ff ffb3 	bl	800262c <NVIC_EncodePriority>
 80026c6:	4602      	mov	r2, r0
 80026c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff ff82 	bl	80025d8 <__NVIC_SetPriority>
}
 80026d4:	bf00      	nop
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff56 	bl	800259c <__NVIC_EnableIRQ>
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002708:	d301      	bcc.n	800270e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800270a:	2301      	movs	r3, #1
 800270c:	e00d      	b.n	800272a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800270e:	4a0a      	ldr	r2, [pc, #40]	@ (8002738 <HAL_SYSTICK_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002716:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <HAL_SYSTICK_Config+0x40>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_SYSTICK_Config+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a05      	ldr	r2, [pc, #20]	@ (8002738 <HAL_SYSTICK_Config+0x40>)
 8002722:	f043 0303 	orr.w	r3, r3, #3
 8002726:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b04      	cmp	r3, #4
 8002748:	d844      	bhi.n	80027d4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800274a:	a201      	add	r2, pc, #4	@ (adr r2, 8002750 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800274c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002750:	08002773 	.word	0x08002773
 8002754:	08002791 	.word	0x08002791
 8002758:	080027b3 	.word	0x080027b3
 800275c:	080027d5 	.word	0x080027d5
 8002760:	08002765 	.word	0x08002765
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002764:	4b1f      	ldr	r3, [pc, #124]	@ (80027e4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1e      	ldr	r2, [pc, #120]	@ (80027e4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	6013      	str	r3, [r2, #0]
      break;
 8002770:	e031      	b.n	80027d6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002772:	4b1c      	ldr	r3, [pc, #112]	@ (80027e4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1b      	ldr	r2, [pc, #108]	@ (80027e4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800277e:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002780:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002784:	4a18      	ldr	r2, [pc, #96]	@ (80027e8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002786:	f023 030c 	bic.w	r3, r3, #12
 800278a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800278e:	e022      	b.n	80027d6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002790:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a13      	ldr	r2, [pc, #76]	@ (80027e4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002796:	f023 0304 	bic.w	r3, r3, #4
 800279a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800279c:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800279e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80027a2:	f023 030c 	bic.w	r3, r3, #12
 80027a6:	4a10      	ldr	r2, [pc, #64]	@ (80027e8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80027b0:	e011      	b.n	80027d6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80027b2:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a0b      	ldr	r2, [pc, #44]	@ (80027e4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80027be:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80027c4:	f023 030c 	bic.w	r3, r3, #12
 80027c8:	4a07      	ldr	r2, [pc, #28]	@ (80027e8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80027d2:	e000      	b.n	80027d6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80027d4:	bf00      	nop
  }
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010
 80027e8:	44020c00 	.word	0x44020c00

080027ec <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80027f2:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80027fe:	2304      	movs	r3, #4
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	e01e      	b.n	8002842 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002804:	4b13      	ldr	r3, [pc, #76]	@ (8002854 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002806:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b08      	cmp	r3, #8
 8002814:	d00f      	beq.n	8002836 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b08      	cmp	r3, #8
 800281a:	d80f      	bhi.n	800283c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d003      	beq.n	8002830 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002828:	e008      	b.n	800283c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
        break;
 800282e:	e008      	b.n	8002842 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002830:	2301      	movs	r3, #1
 8002832:	607b      	str	r3, [r7, #4]
        break;
 8002834:	e005      	b.n	8002842 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002836:	2302      	movs	r3, #2
 8002838:	607b      	str	r3, [r7, #4]
        break;
 800283a:	e002      	b.n	8002842 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
        break;
 8002840:	bf00      	nop
    }
  }
  return systick_source;
 8002842:	687b      	ldr	r3, [r7, #4]
}
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000e010 	.word	0xe000e010
 8002854:	44020c00 	.word	0x44020c00

08002858 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	460b      	mov	r3, r1
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800286a:	7afb      	ldrb	r3, [r7, #11]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d011      	beq.n	8002894 <HAL_EXTI_RegisterCallback+0x3c>
 8002870:	2b02      	cmp	r3, #2
 8002872:	dc13      	bgt.n	800289c <HAL_EXTI_RegisterCallback+0x44>
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <HAL_EXTI_RegisterCallback+0x26>
 8002878:	2b01      	cmp	r3, #1
 800287a:	d007      	beq.n	800288c <HAL_EXTI_RegisterCallback+0x34>
 800287c:	e00e      	b.n	800289c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	609a      	str	r2, [r3, #8]
      break;
 800288a:	e00a      	b.n	80028a2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	605a      	str	r2, [r3, #4]
      break;
 8002892:	e006      	b.n	80028a2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	609a      	str	r2, [r3, #8]
      break;
 800289a:	e002      	b.n	80028a2 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	75fb      	strb	r3, [r7, #23]
      break;
 80028a0:	bf00      	nop
  }

  return status;
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e003      	b.n	80028cc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80028ca:	2300      	movs	r3, #0
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	2201      	movs	r2, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	4b17      	ldr	r3, [pc, #92]	@ (8002960 <HAL_EXTI_IRQHandler+0x88>)
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_EXTI_IRQHandler+0x8c>)
 8002930:	4413      	add	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	4798      	blx	r3
    }
  }
}
 8002958:	bf00      	nop
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	4402200c 	.word	0x4402200c
 8002964:	44022010 	.word	0x44022010

08002968 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002976:	e136      	b.n	8002be6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	4013      	ands	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8128 	beq.w	8002be0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x38>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b12      	cmp	r3, #18
 800299e:	d125      	bne.n	80029ec <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	08da      	lsrs	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3208      	adds	r2, #8
 80029a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ac:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	220f      	movs	r2, #15
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4013      	ands	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f003 020f 	and.w	r2, r3, #15
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	08da      	lsrs	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3208      	adds	r2, #8
 80029e6:	6979      	ldr	r1, [r7, #20]
 80029e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4013      	ands	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0203 	and.w	r2, r3, #3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d00b      	beq.n	8002a40 <HAL_GPIO_Init+0xd8>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d007      	beq.n	8002a40 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a34:	2b11      	cmp	r3, #17
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b12      	cmp	r3, #18
 8002a3e:	d130      	bne.n	8002aa2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4013      	ands	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a76:	2201      	movs	r2, #1
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4013      	ands	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	f003 0201 	and.w	r2, r3, #1
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d017      	beq.n	8002ada <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d07c      	beq.n	8002be0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002ae6:	4a47      	ldr	r2, [pc, #284]	@ (8002c04 <HAL_GPIO_Init+0x29c>)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3318      	adds	r3, #24
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4013      	ands	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0a9a      	lsrs	r2, r3, #10
 8002b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c08 <HAL_GPIO_Init+0x2a0>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	f002 0203 	and.w	r2, r2, #3
 8002b18:	00d2      	lsls	r2, r2, #3
 8002b1a:	4093      	lsls	r3, r2
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002b22:	4938      	ldr	r1, [pc, #224]	@ (8002c04 <HAL_GPIO_Init+0x29c>)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3318      	adds	r3, #24
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002b30:	4b34      	ldr	r3, [pc, #208]	@ (8002c04 <HAL_GPIO_Init+0x29c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002b54:	4a2b      	ldr	r2, [pc, #172]	@ (8002c04 <HAL_GPIO_Init+0x29c>)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002c04 <HAL_GPIO_Init+0x29c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4013      	ands	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002b7e:	4a21      	ldr	r2, [pc, #132]	@ (8002c04 <HAL_GPIO_Init+0x29c>)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	@ (8002c04 <HAL_GPIO_Init+0x29c>)
 8002b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b8a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4013      	ands	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002baa:	4a16      	ldr	r2, [pc, #88]	@ (8002c04 <HAL_GPIO_Init+0x29c>)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002bb2:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <HAL_GPIO_Init+0x29c>)
 8002bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bb8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002c04 <HAL_GPIO_Init+0x29c>)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	3301      	adds	r3, #1
 8002be4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f47f aec1 	bne.w	8002978 <HAL_GPIO_Init+0x10>
  }
}
 8002bf6:	bf00      	nop
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	44022000 	.word	0x44022000
 8002c08:	002f7f7f 	.word	0x002f7f7f

08002c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c28:	e002      	b.n	8002c30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4013      	ands	r3, r2
 8002c54:	041a      	lsls	r2, r3, #16
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43d9      	mvns	r1, r3
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	619a      	str	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e02a      	b.n	8002cd8 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe fb88 	bl	80013ac <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 8002cb2:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e08d      	b.n	8002e0e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fe fb6c 	bl	80013e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	@ 0x24
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	e006      	b.n	8002d68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d108      	bne.n	8002d82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	e007      	b.n	8002d92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002da4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002db4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69d9      	ldr	r1, [r3, #28]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0201 	orr.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d138      	bne.n	8002e9e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e032      	b.n	8002ea0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2224      	movs	r2, #36	@ 0x24
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e68:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0201 	orr.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e000      	b.n	8002ea0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
  }
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d139      	bne.n	8002f36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e033      	b.n	8002f38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	@ 0x24
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002efe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e000      	b.n	8002f38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
  }
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002f50:	230a      	movs	r3, #10
 8002f52:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002f54:	e002      	b.n	8002f5c <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f9      	bne.n	8002f56 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f78:	b29b      	uxth	r3, r3
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b085      	sub	sp, #20
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002f92:	230a      	movs	r3, #10
 8002f94:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002f96:	e002      	b.n	8002f9e <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f9      	bne.n	8002f98 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	0c1b      	lsrs	r3, r3, #16
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fba:	b29b      	uxth	r3, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002fd4:	230a      	movs	r3, #10
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002fd8:	e002      	b.n	8002fe0 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f9      	bne.n	8002fda <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8002fe6:	887b      	ldrh	r3, [r7, #2]
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ffc:	b29b      	uxth	r3, r3
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af02      	add	r7, sp, #8
 8003010:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0f3      	b.n	8003204 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fe fd99 	bl	8001b68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2203      	movs	r2, #3
 800303a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f008 ff59 	bl	800befa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	7c1a      	ldrb	r2, [r3, #16]
 8003050:	f88d 2000 	strb.w	r2, [sp]
 8003054:	3304      	adds	r3, #4
 8003056:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003058:	f008 ff1d 	bl	800be96 <USB_CoreInit>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2202      	movs	r2, #2
 8003066:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0ca      	b.n	8003204 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f008 ff55 	bl	800bf24 <USB_SetCurrentMode>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0bb      	b.n	8003204 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	e03f      	b.n	8003112 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	3315      	adds	r3, #21
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	3314      	adds	r3, #20
 80030b6:	7bfa      	ldrb	r2, [r7, #15]
 80030b8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	3317      	adds	r3, #23
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	440b      	add	r3, r1
 80030dc:	3324      	adds	r3, #36	@ 0x24
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	3328      	adds	r3, #40	@ 0x28
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	3304      	adds	r3, #4
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	3301      	adds	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	791b      	ldrb	r3, [r3, #4]
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	429a      	cmp	r2, r3
 800311a:	d3ba      	bcc.n	8003092 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	e044      	b.n	80031ac <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003122:	7bfa      	ldrb	r2, [r7, #15]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	440b      	add	r3, r1
 8003130:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003138:	7bfa      	ldrb	r2, [r7, #15]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	440b      	add	r3, r1
 8003172:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	3301      	adds	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	791b      	ldrb	r3, [r3, #4]
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d3b5      	bcc.n	8003122 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	7c1a      	ldrb	r2, [r3, #16]
 80031be:	f88d 2000 	strb.w	r2, [sp]
 80031c2:	3304      	adds	r3, #4
 80031c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c6:	f008 fed0 	bl	800bf6a <USB_DevInit>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e013      	b.n	8003204 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7b1b      	ldrb	r3, [r3, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f001 fb6b 	bl	80048ce <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f00a fd29 	bl	800dc54 <USB_DevDisconnect>

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_PCD_Start+0x16>
 800321e:	2302      	movs	r3, #2
 8003220:	e012      	b.n	8003248 <HAL_PCD_Start+0x3c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f008 fe4f 	bl	800bed2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f00a fcfa 	bl	800dc32 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f00a fd0a 	bl	800dc76 <USB_ReadInterrupts>
 8003262:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 faf2 	bl	8003858 <PCD_EP_ISR_Handler>

    return;
 8003274:	e0de      	b.n	8003434 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 800328e:	400b      	ands	r3, r1
 8003290:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f00b fbef 	bl	800ea76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003298:	2100      	movs	r1, #0
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8e1 	bl	8003462 <HAL_PCD_SetAddress>

    return;
 80032a0:	e0c8      	b.n	8003434 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d009      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 80032ba:	400b      	ands	r3, r1
 80032bc:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80032be:	e0b9      	b.n	8003434 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 80032d8:	400b      	ands	r3, r1
 80032da:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80032dc:	e0aa      	b.n	8003434 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d029      	beq.n	800333c <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0204 	bic.w	r2, r2, #4
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0208 	bic.w	r2, r2, #8
 8003306:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 800330e:	2b01      	cmp	r3, #1
 8003310:	d107      	bne.n	8003322 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800331a:	2100      	movs	r1, #0
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f001 faf8 	bl	8004912 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f893 	bl	800344e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003336:	400b      	ands	r3, r1
 8003338:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800333a:	e07b      	b.n	8003434 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003342:	2b00      	cmp	r3, #0
 8003344:	d01c      	beq.n	8003380 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0208 	orr.w	r2, r2, #8
 8003354:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8003364:	400b      	ands	r3, r1
 8003366:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0204 	orr.w	r2, r2, #4
 8003376:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f85e 	bl	800343a <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800337e:	e059      	b.n	8003434 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003386:	2b00      	cmp	r3, #0
 8003388:	d033      	beq.n	80033f2 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8003398:	400b      	ands	r3, r1
 800339a:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d121      	bne.n	80033ea <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0204 	orr.w	r2, r2, #4
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0208 	orr.w	r2, r2, #8
 80033c4:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80033e0:	2101      	movs	r1, #1
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f001 fa95 	bl	8004912 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80033e8:	e024      	b.n	8003434 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f825 	bl	800343a <HAL_PCD_SuspendCallback>
    return;
 80033f0:	e020      	b.n	8003434 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00c      	beq.n	8003416 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 800340a:	400b      	ands	r3, r1
 800340c:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f00b fb23 	bl	800ea5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003414:	e00e      	b.n	8003434 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d009      	beq.n	8003434 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800342e:	400b      	ands	r3, r1
 8003430:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003432:	bf00      	nop
  }
}
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	460b      	mov	r3, r1
 800346c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_PCD_SetAddress+0x1a>
 8003478:	2302      	movs	r3, #2
 800347a:	e012      	b.n	80034a2 <HAL_PCD_SetAddress+0x40>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f00a fbba 	bl	800dc0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	4608      	mov	r0, r1
 80034b4:	4611      	mov	r1, r2
 80034b6:	461a      	mov	r2, r3
 80034b8:	4603      	mov	r3, r0
 80034ba:	70fb      	strb	r3, [r7, #3]
 80034bc:	460b      	mov	r3, r1
 80034be:	803b      	strh	r3, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da0f      	bge.n	80034f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	f003 0207 	and.w	r2, r3, #7
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	3310      	adds	r3, #16
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	3304      	adds	r3, #4
 80034e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	705a      	strb	r2, [r3, #1]
 80034ee:	e00f      	b.n	8003510 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	f003 0207 	and.w	r2, r3, #7
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	3304      	adds	r3, #4
 8003508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	b2da      	uxtb	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800351c:	883b      	ldrh	r3, [r7, #0]
 800351e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	78ba      	ldrb	r2, [r7, #2]
 800352a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800352c:	78bb      	ldrb	r3, [r7, #2]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d102      	bne.n	8003538 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_PCD_EP_Open+0x9c>
 8003542:	2302      	movs	r3, #2
 8003544:	e00e      	b.n	8003564 <HAL_PCD_EP_Open+0xba>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	4618      	mov	r0, r3
 8003556:	f008 fd2b 	bl	800bfb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8003562:	7afb      	ldrb	r3, [r7, #11]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800357c:	2b00      	cmp	r3, #0
 800357e:	da0f      	bge.n	80035a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	f003 0207 	and.w	r2, r3, #7
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	3310      	adds	r3, #16
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4413      	add	r3, r2
 8003594:	3304      	adds	r3, #4
 8003596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	705a      	strb	r2, [r3, #1]
 800359e:	e00f      	b.n	80035c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	f003 0207 	and.w	r2, r3, #7
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	3304      	adds	r3, #4
 80035b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_PCD_EP_Close+0x6e>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e00e      	b.n	80035f8 <HAL_PCD_EP_Close+0x8c>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68f9      	ldr	r1, [r7, #12]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f009 f841 	bl	800c670 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	460b      	mov	r3, r1
 800360e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003610:	7afb      	ldrb	r3, [r7, #11]
 8003612:	f003 0207 	and.w	r2, r3, #7
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	3304      	adds	r3, #4
 8003628:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2200      	movs	r2, #0
 800363a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2200      	movs	r2, #0
 8003640:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003642:	7afb      	ldrb	r3, [r7, #11]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	b2da      	uxtb	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	4618      	mov	r0, r3
 8003656:	f009 f995 	bl	800c984 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	f003 0207 	and.w	r2, r3, #7
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	440b      	add	r3, r1
 8003682:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	460b      	mov	r3, r1
 80036a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a4:	7afb      	ldrb	r3, [r7, #11]
 80036a6:	f003 0207 	and.w	r2, r3, #7
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	3310      	adds	r3, #16
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	3304      	adds	r3, #4
 80036ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2201      	movs	r2, #1
 80036e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036e2:	7afb      	ldrb	r3, [r7, #11]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6979      	ldr	r1, [r7, #20]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f009 f945 	bl	800c984 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	7912      	ldrb	r2, [r2, #4]
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e040      	b.n	80037a4 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003726:	2b00      	cmp	r3, #0
 8003728:	da0f      	bge.n	800374a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 0207 	and.w	r2, r3, #7
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	3310      	adds	r3, #16
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	705a      	strb	r2, [r3, #1]
 8003748:	e00d      	b.n	8003766 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	3304      	adds	r3, #4
 800375e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	b2da      	uxtb	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_PCD_EP_SetStall+0x82>
 8003782:	2302      	movs	r3, #2
 8003784:	e00e      	b.n	80037a4 <HAL_PCD_EP_SetStall+0xa0>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68f9      	ldr	r1, [r7, #12]
 8003794:	4618      	mov	r0, r3
 8003796:	f00a f95f 	bl	800da58 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	7912      	ldrb	r2, [r2, #4]
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e042      	b.n	8003850 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	da0f      	bge.n	80037f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	f003 0207 	and.w	r2, r3, #7
 80037d8:	4613      	mov	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	3310      	adds	r3, #16
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	3304      	adds	r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	705a      	strb	r2, [r3, #1]
 80037f0:	e00f      	b.n	8003812 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 0207 	and.w	r2, r3, #7
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	3304      	adds	r3, #4
 800380a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	b2da      	uxtb	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_PCD_EP_ClrStall+0x86>
 800382e:	2302      	movs	r3, #2
 8003830:	e00e      	b.n	8003850 <HAL_PCD_EP_ClrStall+0xa4>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68f9      	ldr	r1, [r7, #12]
 8003840:	4618      	mov	r0, r3
 8003842:	f00a f94f 	bl	800dae4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08e      	sub	sp, #56	@ 0x38
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003860:	e326      	b.n	8003eb0 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003868:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800386a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8003876:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 8124 	bne.w	8003ac8 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003880:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d13e      	bne.n	8003908 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b89      	ldr	r3, [pc, #548]	@ (8003ab8 <PCD_EP_ISR_Handler+0x260>)
 8003892:	4013      	ands	r3, r2
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038a0:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3314      	adds	r3, #20
 80038a6:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80038c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	441a      	add	r2, r3
 80038cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80038d0:	2100      	movs	r1, #0
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f00b f8a7 	bl	800ea26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7c5b      	ldrb	r3, [r3, #17]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 82e6 	beq.w	8003eb0 <PCD_EP_ISR_Handler+0x658>
 80038e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f040 82e1 	bne.w	8003eb0 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	7c5b      	ldrb	r3, [r3, #17]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	745a      	strb	r2, [r3, #17]
 8003906:	e2d3      	b.n	8003eb0 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003918:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800391a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800391e:	2b00      	cmp	r3, #0
 8003920:	d027      	beq.n	8003972 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f7ff fb09 	bl	8002f44 <PCD_GET_EP_RX_CNT>
 8003932:	4603      	mov	r3, r0
 8003934:	461a      	mov	r2, r3
 8003936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003938:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8003944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003946:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800394c:	b29b      	uxth	r3, r3
 800394e:	f00a fa01 	bl	800dd54 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4b58      	ldr	r3, [pc, #352]	@ (8003abc <PCD_EP_ISR_Handler+0x264>)
 800395a:	4013      	ands	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003968:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f00b f82e 	bl	800e9cc <HAL_PCD_SetupStageCallback>
 8003970:	e29e      	b.n	8003eb0 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8003972:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003976:	2b00      	cmp	r3, #0
 8003978:	f280 829a 	bge.w	8003eb0 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b4e      	ldr	r3, [pc, #312]	@ (8003abc <PCD_EP_ISR_Handler+0x264>)
 8003984:	4013      	ands	r3, r2
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800398e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003992:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f7ff fad0 	bl	8002f44 <PCD_GET_EP_RX_CNT>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80039ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d019      	beq.n	80039e8 <PCD_EP_ISR_Handler+0x190>
 80039b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c2:	6959      	ldr	r1, [r3, #20]
 80039c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80039c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	f00a f9c1 	bl	800dd54 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80039d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	441a      	add	r2, r3
 80039dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80039e0:	2100      	movs	r1, #0
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f00b f804 	bl	800e9f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80039f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 825a 	bne.w	8003eb0 <PCD_EP_ISR_Handler+0x658>
 80039fc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80039fe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003a02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a06:	f000 8253 	beq.w	8003eb0 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac0 <PCD_EP_ISR_Handler+0x268>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac0 <PCD_EP_ISR_Handler+0x268>)
 8003a10:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003a14:	6053      	str	r3, [r2, #4]
 8003a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <PCD_EP_ISR_Handler+0x1d4>
 8003a1e:	4b28      	ldr	r3, [pc, #160]	@ (8003ac0 <PCD_EP_ISR_Handler+0x268>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	4a27      	ldr	r2, [pc, #156]	@ (8003ac0 <PCD_EP_ISR_Handler+0x268>)
 8003a24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a28:	6053      	str	r3, [r2, #4]
 8003a2a:	e02e      	b.n	8003a8a <PCD_EP_ISR_Handler+0x232>
 8003a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a32:	d814      	bhi.n	8003a5e <PCD_EP_ISR_Handler+0x206>
 8003a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <PCD_EP_ISR_Handler+0x1f6>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac0 <PCD_EP_ISR_Handler+0x268>)
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	069b      	lsls	r3, r3, #26
 8003a56:	491a      	ldr	r1, [pc, #104]	@ (8003ac0 <PCD_EP_ISR_Handler+0x268>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
 8003a5c:	e015      	b.n	8003a8a <PCD_EP_ISR_Handler+0x232>
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <PCD_EP_ISR_Handler+0x220>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <PCD_EP_ISR_Handler+0x268>)
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	069b      	lsls	r3, r3, #26
 8003a80:	4313      	orrs	r3, r2
 8003a82:	4a0f      	ldr	r2, [pc, #60]	@ (8003ac0 <PCD_EP_ISR_Handler+0x268>)
 8003a84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a88:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <PCD_EP_ISR_Handler+0x26c>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e1fb      	b.n	8003eb0 <PCD_EP_ISR_Handler+0x658>
 8003ab8:	07ff8f0f 	.word	0x07ff8f0f
 8003abc:	07ff0f8f 	.word	0x07ff0f8f
 8003ac0:	40016400 	.word	0x40016400
 8003ac4:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8003ada:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f280 80bd 	bge.w	8003c5e <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4b9e      	ldr	r3, [pc, #632]	@ (8003d70 <PCD_EP_ISR_Handler+0x518>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b0e:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b10:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4413      	add	r3, r2
 8003b24:	3304      	adds	r3, #4
 8003b26:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b2a:	7b1b      	ldrb	r3, [r3, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d116      	bne.n	8003b5e <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f7ff fa02 	bl	8002f44 <PCD_GET_EP_RX_CNT>
 8003b40:	4603      	mov	r3, r0
 8003b42:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8003b44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d067      	beq.n	8003c1a <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b50:	6959      	ldr	r1, [r3, #20]
 8003b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b54:	88da      	ldrh	r2, [r3, #6]
 8003b56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b58:	f00a f8fc 	bl	800dd54 <USB_ReadPMA>
 8003b5c:	e05d      	b.n	8003c1a <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b60:	78db      	ldrb	r3, [r3, #3]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d108      	bne.n	8003b78 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003b66:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f9ad 	bl	8003ecc <HAL_PCD_EP_DB_Receive>
 8003b72:	4603      	mov	r3, r0
 8003b74:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003b76:	e050      	b.n	8003c1a <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b7a      	ldr	r3, [pc, #488]	@ (8003d74 <PCD_EP_ISR_Handler+0x51c>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	441a      	add	r2, r3
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ba2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003ba6:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d016      	beq.n	8003bee <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f7ff f9db 	bl	8002f86 <PCD_GET_EP_DBUF0_CNT>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003bd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d01f      	beq.n	8003c1a <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be0:	6959      	ldr	r1, [r3, #20]
 8003be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be4:	891a      	ldrh	r2, [r3, #8]
 8003be6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003be8:	f00a f8b4 	bl	800dd54 <USB_ReadPMA>
 8003bec:	e015      	b.n	8003c1a <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	f7ff f9e5 	bl	8002fc8 <PCD_GET_EP_DBUF1_CNT>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003c02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0e:	6959      	ldr	r1, [r3, #20]
 8003c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c12:	895a      	ldrh	r2, [r3, #10]
 8003c14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c16:	f00a f89d 	bl	800dd54 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c20:	441a      	add	r2, r3
 8003c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c24:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c2c:	441a      	add	r2, r3
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c30:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <PCD_EP_ISR_Handler+0x3ec>
 8003c3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d206      	bcs.n	8003c52 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f00a fed0 	bl	800e9f0 <HAL_PCD_DataOutStageCallback>
 8003c50:	e005      	b.n	8003c5e <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f008 fe93 	bl	800c984 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8003c5e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 8123 	beq.w	8003eb0 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8003c6a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	3310      	adds	r3, #16
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b39      	ldr	r3, [pc, #228]	@ (8003d78 <PCD_EP_ISR_Handler+0x520>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ca6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003caa:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cae:	78db      	ldrb	r3, [r3, #3]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	f040 80b8 	bne.w	8003e26 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb8:	2200      	movs	r2, #0
 8003cba:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cbe:	7b1b      	ldrb	r3, [r3, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80a9 	beq.w	8003e18 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cc6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d055      	beq.n	8003d7c <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cd2:	785b      	ldrb	r3, [r3, #1]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d124      	bne.n	8003d22 <PCD_EP_ISR_Handler+0x4ca>
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ce2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cf2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cf6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d1a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e07a      	b.n	8003e18 <PCD_EP_ISR_Handler+0x5c0>
 8003d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d176      	bne.n	8003e18 <PCD_EP_ISR_Handler+0x5c0>
 8003d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d48:	b292      	uxth	r2, r2
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003d56:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e054      	b.n	8003e18 <PCD_EP_ISR_Handler+0x5c0>
 8003d6e:	bf00      	nop
 8003d70:	07ff0f8f 	.word	0x07ff0f8f
 8003d74:	07ff8f8f 	.word	0x07ff8f8f
 8003d78:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d124      	bne.n	8003dce <PCD_EP_ISR_Handler+0x576>
 8003d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003da2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003da6:	605a      	str	r2, [r3, #4]
 8003da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003db2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dc6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	e024      	b.n	8003e18 <PCD_EP_ISR_Handler+0x5c0>
 8003dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd0:	785b      	ldrb	r3, [r3, #1]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d120      	bne.n	8003e18 <PCD_EP_ISR_Handler+0x5c0>
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003de0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003df0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003df4:	b292      	uxth	r2, r2
 8003df6:	605a      	str	r2, [r3, #4]
 8003df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003e02:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e14:	6852      	ldr	r2, [r2, #4]
 8003e16:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f00a fe01 	bl	800ea26 <HAL_PCD_DataInStageCallback>
 8003e24:	e044      	b.n	8003eb0 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e26:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d139      	bne.n	8003ea4 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	0c1b      	lsrs	r3, r3, #16
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e48:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d906      	bls.n	8003e62 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8003e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e56:	699a      	ldr	r2, [r3, #24]
 8003e58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e5a:	1ad2      	subs	r2, r2, r3
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5e:	619a      	str	r2, [r3, #24]
 8003e60:	e002      	b.n	8003e68 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e64:	2200      	movs	r2, #0
 8003e66:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f00a fdd5 	bl	800ea26 <HAL_PCD_DataInStageCallback>
 8003e7c:	e018      	b.n	8003eb0 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e84:	441a      	add	r2, r3
 8003e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e88:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003e90:	441a      	add	r2, r3
 8003e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e94:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f008 fd71 	bl	800c984 <USB_EPStartXfer>
 8003ea2:	e005      	b.n	8003eb0 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003ea4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f8e8 	bl	8004080 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f47f acd1 	bne.w	8003862 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3738      	adds	r7, #56	@ 0x38
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop

08003ecc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	@ 0x28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d062      	beq.n	8003faa <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7ff f849 	bl	8002f86 <PCD_GET_EP_DBUF0_CNT>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	8bfb      	ldrh	r3, [r7, #30]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d306      	bcc.n	8003f10 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	8bfb      	ldrh	r3, [r7, #30]
 8003f08:	1ad2      	subs	r2, r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	619a      	str	r2, [r3, #24]
 8003f0e:	e002      	b.n	8003f16 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2200      	movs	r2, #0
 8003f14:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11b      	bne.n	8003f56 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	4b52      	ldr	r3, [pc, #328]	@ (8004078 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	441a      	add	r2, r3
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f54:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d017      	beq.n	8003f90 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b42      	ldr	r3, [pc, #264]	@ (800407c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f8e:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003f90:	8bfb      	ldrh	r3, [r7, #30]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d06b      	beq.n	800406e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6959      	ldr	r1, [r3, #20]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	891a      	ldrh	r2, [r3, #8]
 8003fa2:	8bfb      	ldrh	r3, [r7, #30]
 8003fa4:	f009 fed6 	bl	800dd54 <USB_ReadPMA>
 8003fa8:	e061      	b.n	800406e <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f7ff f807 	bl	8002fc8 <PCD_GET_EP_DBUF1_CNT>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	8bfb      	ldrh	r3, [r7, #30]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d306      	bcc.n	8003fd6 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	699a      	ldr	r2, [r3, #24]
 8003fcc:	8bfb      	ldrh	r3, [r7, #30]
 8003fce:	1ad2      	subs	r2, r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	619a      	str	r2, [r3, #24]
 8003fd4:	e002      	b.n	8003fdc <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d11b      	bne.n	800401c <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b20      	ldr	r3, [pc, #128]	@ (8004078 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004000:	627b      	str	r3, [r7, #36]	@ 0x24
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	441a      	add	r2, r3
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800401a:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004022:	2b00      	cmp	r3, #0
 8004024:	d117      	bne.n	8004056 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b11      	ldr	r3, [pc, #68]	@ (800407c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8004038:	4013      	ands	r3, r2
 800403a:	623b      	str	r3, [r7, #32]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	441a      	add	r2, r3
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004050:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004054:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8004056:	8bfb      	ldrh	r3, [r7, #30]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	6959      	ldr	r1, [r3, #20]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	895a      	ldrh	r2, [r3, #10]
 8004068:	8bfb      	ldrh	r3, [r7, #30]
 800406a:	f009 fe73 	bl	800dd54 <USB_ReadPMA>
    }
  }

  return count;
 800406e:	8bfb      	ldrh	r3, [r7, #30]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3728      	adds	r7, #40	@ 0x28
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	07ffbf8f 	.word	0x07ffbf8f
 800407c:	07ff8f8f 	.word	0x07ff8f8f

08004080 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08e      	sub	sp, #56	@ 0x38
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	4613      	mov	r3, r2
 800408c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 81d5 	beq.w	8004444 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f7fe ff6e 	bl	8002f86 <PCD_GET_EP_DBUF0_CNT>
 80040aa:	4603      	mov	r3, r0
 80040ac:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	8bfb      	ldrh	r3, [r7, #30]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d906      	bls.n	80040c6 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	8bfb      	ldrh	r3, [r7, #30]
 80040be:	1ad2      	subs	r2, r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	619a      	str	r2, [r3, #24]
 80040c4:	e002      	b.n	80040cc <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2200      	movs	r2, #0
 80040ca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f040 80c1 	bne.w	8004258 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	785b      	ldrb	r3, [r3, #1]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d124      	bne.n	8004128 <HAL_PCD_EP_DB_Transmit+0xa8>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040fc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800410c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800411c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004120:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e024      	b.n	8004172 <HAL_PCD_EP_DB_Transmit+0xf2>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d120      	bne.n	8004172 <HAL_PCD_EP_DB_Transmit+0xf2>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800413a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800414a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800414e:	b292      	uxth	r2, r2
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800415c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800416a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	785b      	ldrb	r3, [r3, #1]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d124      	bne.n	80041c4 <HAL_PCD_EP_DB_Transmit+0x144>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004184:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004194:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004198:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	e024      	b.n	800420e <HAL_PCD_EP_DB_Transmit+0x18e>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	785b      	ldrb	r3, [r3, #1]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d120      	bne.n	800420e <HAL_PCD_EP_DB_Transmit+0x18e>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041ea:	b292      	uxth	r2, r2
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80041f8:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004206:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800420a:	6852      	ldr	r2, [r2, #4]
 800420c:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	4619      	mov	r1, r3
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f00a fc06 	bl	800ea26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 82e5 	beq.w	80047f0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4b8e      	ldr	r3, [pc, #568]	@ (8004470 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8004238:	4013      	ands	r3, r2
 800423a:	637b      	str	r3, [r7, #52]	@ 0x34
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	441a      	add	r2, r3
 800424a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800424c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e2cb      	b.n	80047f0 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d017      	beq.n	8004292 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b7f      	ldr	r3, [pc, #508]	@ (8004470 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8004274:	4013      	ands	r3, r2
 8004276:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	441a      	add	r2, r3
 8004286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004288:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800428c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004290:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004298:	2b01      	cmp	r3, #1
 800429a:	f040 82a9 	bne.w	80047f0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	8bfb      	ldrh	r3, [r7, #30]
 80042a4:	441a      	add	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	69da      	ldr	r2, [r3, #28]
 80042ae:	8bfb      	ldrh	r3, [r7, #30]
 80042b0:	441a      	add	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6a1a      	ldr	r2, [r3, #32]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d309      	bcc.n	80042d6 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	6a1a      	ldr	r2, [r3, #32]
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	1ad2      	subs	r2, r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	621a      	str	r2, [r3, #32]
 80042d4:	e014      	b.n	8004300 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 80042de:	8bfb      	ldrh	r3, [r7, #30]
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80042ea:	e009      	b.n	8004300 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2200      	movs	r2, #0
 80042fe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	785b      	ldrb	r3, [r3, #1]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d16a      	bne.n	80043de <HAL_PCD_EP_DB_Transmit+0x35e>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004312:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004322:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004326:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	d112      	bne.n	8004358 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800433c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800434c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004350:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	e06a      	b.n	800442e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	2b3e      	cmp	r3, #62	@ 0x3e
 800435c:	d81e      	bhi.n	800439c <HAL_PCD_EP_DB_Transmit+0x31c>
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_PCD_EP_DB_Transmit+0x2f4>
 800436e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004370:	3301      	adds	r3, #1
 8004372:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800437e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004386:	069a      	lsls	r2, r3, #26
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004392:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004396:	430a      	orrs	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e048      	b.n	800442e <HAL_PCD_EP_DB_Transmit+0x3ae>
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <HAL_PCD_EP_DB_Transmit+0x332>
 80043ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ae:	3b01      	subs	r3, #1
 80043b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c4:	069b      	lsls	r3, r3, #26
 80043c6:	431a      	orrs	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e027      	b.n	800442e <HAL_PCD_EP_DB_Transmit+0x3ae>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d123      	bne.n	800442e <HAL_PCD_EP_DB_Transmit+0x3ae>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004400:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004404:	b292      	uxth	r2, r2
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004412:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004416:	6819      	ldr	r1, [r3, #0]
 8004418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441a:	041a      	lsls	r2, r3, #16
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004426:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800442a:	430a      	orrs	r2, r1
 800442c:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6959      	ldr	r1, [r3, #20]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	891a      	ldrh	r2, [r3, #8]
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	b29b      	uxth	r3, r3
 800443e:	f009 fc28 	bl	800dc92 <USB_WritePMA>
 8004442:	e1d5      	b.n	80047f0 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	4619      	mov	r1, r3
 800444e:	4610      	mov	r0, r2
 8004450:	f7fe fdba 	bl	8002fc8 <PCD_GET_EP_DBUF1_CNT>
 8004454:	4603      	mov	r3, r0
 8004456:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	8bfb      	ldrh	r3, [r7, #30]
 800445e:	429a      	cmp	r2, r3
 8004460:	d308      	bcc.n	8004474 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	8bfb      	ldrh	r3, [r7, #30]
 8004468:	1ad2      	subs	r2, r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	619a      	str	r2, [r3, #24]
 800446e:	e004      	b.n	800447a <HAL_PCD_EP_DB_Transmit+0x3fa>
 8004470:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	f040 80c1 	bne.w	8004606 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	785b      	ldrb	r3, [r3, #1]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d124      	bne.n	80044d6 <HAL_PCD_EP_DB_Transmit+0x456>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004496:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044aa:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044ce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e024      	b.n	8004520 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	785b      	ldrb	r3, [r3, #1]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d120      	bne.n	8004520 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044fc:	b292      	uxth	r2, r2
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800450a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004518:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d124      	bne.n	8004572 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004532:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004542:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004546:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800454a:	605a      	str	r2, [r3, #4]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004556:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004566:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800456a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800456e:	605a      	str	r2, [r3, #4]
 8004570:	e024      	b.n	80045bc <HAL_PCD_EP_DB_Transmit+0x53c>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d120      	bne.n	80045bc <HAL_PCD_EP_DB_Transmit+0x53c>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004584:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004594:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004598:	b292      	uxth	r2, r2
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80045a6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045b8:	6852      	ldr	r2, [r2, #4]
 80045ba:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	4619      	mov	r1, r3
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f00a fa2f 	bl	800ea26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f040 810e 	bne.w	80047f0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4b95      	ldr	r3, [pc, #596]	@ (800483c <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	623b      	str	r3, [r7, #32]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	441a      	add	r2, r3
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e0f4      	b.n	80047f0 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d117      	bne.n	8004640 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4b86      	ldr	r3, [pc, #536]	@ (800483c <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8004622:	4013      	ands	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	441a      	add	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800463a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800463e:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004646:	2b01      	cmp	r3, #1
 8004648:	f040 80d2 	bne.w	80047f0 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	8bfb      	ldrh	r3, [r7, #30]
 8004652:	441a      	add	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	8bfb      	ldrh	r3, [r7, #30]
 800465e:	441a      	add	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6a1a      	ldr	r2, [r3, #32]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	429a      	cmp	r2, r3
 800466e:	d309      	bcc.n	8004684 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	6a1a      	ldr	r2, [r3, #32]
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	1ad2      	subs	r2, r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	621a      	str	r2, [r3, #32]
 8004682:	e014      	b.n	80046ae <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d106      	bne.n	800469a <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 800468c:	8bfb      	ldrh	r3, [r7, #30]
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004698:	e009      	b.n	80046ae <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2200      	movs	r2, #0
 80046a4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	785b      	ldrb	r3, [r3, #1]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d16a      	bne.n	800478c <HAL_PCD_EP_DB_Transmit+0x70c>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80046d4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d112      	bne.n	8004706 <HAL_PCD_EP_DB_Transmit+0x686>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80046fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	e06a      	b.n	80047dc <HAL_PCD_EP_DB_Transmit+0x75c>
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	2b3e      	cmp	r3, #62	@ 0x3e
 800470a:	d81e      	bhi.n	800474a <HAL_PCD_EP_DB_Transmit+0x6ca>
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <HAL_PCD_EP_DB_Transmit+0x6a2>
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	3301      	adds	r3, #1
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800472c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	069a      	lsls	r2, r3, #26
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004740:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004744:	430a      	orrs	r2, r1
 8004746:	605a      	str	r2, [r3, #4]
 8004748:	e048      	b.n	80047dc <HAL_PCD_EP_DB_Transmit+0x75c>
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004752:	f003 031f 	and.w	r3, r3, #31
 8004756:	2b00      	cmp	r3, #0
 8004758:	d102      	bne.n	8004760 <HAL_PCD_EP_DB_Transmit+0x6e0>
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	3b01      	subs	r3, #1
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800476a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	069b      	lsls	r3, r3, #26
 8004774:	431a      	orrs	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004784:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	e027      	b.n	80047dc <HAL_PCD_EP_DB_Transmit+0x75c>
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d123      	bne.n	80047dc <HAL_PCD_EP_DB_Transmit+0x75c>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800479e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047b2:	b292      	uxth	r2, r2
 80047b4:	605a      	str	r2, [r3, #4]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047c4:	6859      	ldr	r1, [r3, #4]
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	041a      	lsls	r2, r3, #16
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6959      	ldr	r1, [r3, #20]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	895a      	ldrh	r2, [r3, #10]
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f009 fa51 	bl	800dc92 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b0f      	ldr	r3, [pc, #60]	@ (8004840 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8004802:	4013      	ands	r3, r2
 8004804:	633b      	str	r3, [r7, #48]	@ 0x30
 8004806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004808:	f083 0310 	eor.w	r3, r3, #16
 800480c:	633b      	str	r3, [r7, #48]	@ 0x30
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	f083 0320 	eor.w	r3, r3, #32
 8004814:	633b      	str	r3, [r7, #48]	@ 0x30
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	441a      	add	r2, r3
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800482a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800482e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3738      	adds	r7, #56	@ 0x38
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	07ff8f8f 	.word	0x07ff8f8f
 8004840:	07ff8fbf 	.word	0x07ff8fbf

08004844 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	817b      	strh	r3, [r7, #10]
 8004852:	4613      	mov	r3, r2
 8004854:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004856:	897b      	ldrh	r3, [r7, #10]
 8004858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00c      	beq.n	800487c <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	f003 0207 	and.w	r2, r3, #7
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	3310      	adds	r3, #16
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4413      	add	r3, r2
 8004876:	3304      	adds	r3, #4
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e00a      	b.n	8004892 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800487c:	897a      	ldrh	r2, [r7, #10]
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	3304      	adds	r3, #4
 8004890:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004892:	893b      	ldrh	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2200      	movs	r2, #0
 800489c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	80da      	strh	r2, [r3, #6]
 80048a6:	e00b      	b.n	80048c0 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2201      	movs	r2, #1
 80048ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	0c1b      	lsrs	r3, r3, #16
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f0:	f043 0201 	orr.w	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fc:	f043 0202 	orr.w	r2, r3, #2
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8004930:	4b05      	ldr	r3, [pc, #20]	@ (8004948 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	4a04      	ldr	r2, [pc, #16]	@ (8004948 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004936:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800493a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	44020800 	.word	0x44020800

0800494c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	f000 bc28 	b.w	80051b0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004960:	4b94      	ldr	r3, [pc, #592]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f003 0318 	and.w	r3, r3, #24
 8004968:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800496a:	4b92      	ldr	r3, [pc, #584]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 800496c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	d05b      	beq.n	8004a38 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b08      	cmp	r3, #8
 8004984:	d005      	beq.n	8004992 <HAL_RCC_OscConfig+0x46>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	2b18      	cmp	r3, #24
 800498a:	d114      	bne.n	80049b6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d111      	bne.n	80049b6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f000 bc08 	b.w	80051b0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80049a0:	4b84      	ldr	r3, [pc, #528]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	041b      	lsls	r3, r3, #16
 80049ae:	4981      	ldr	r1, [pc, #516]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80049b4:	e040      	b.n	8004a38 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d023      	beq.n	8004a06 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049be:	4b7d      	ldr	r3, [pc, #500]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a7c      	ldr	r2, [pc, #496]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ca:	f7fd fd85 	bl	80024d8 <HAL_GetTick>
 80049ce:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80049d2:	f7fd fd81 	bl	80024d8 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e3e5      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80049e4:	4b73      	ldr	r3, [pc, #460]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80049f0:	4b70      	ldr	r3, [pc, #448]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	496d      	ldr	r1, [pc, #436]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	618b      	str	r3, [r1, #24]
 8004a04:	e018      	b.n	8004a38 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a06:	4b6b      	ldr	r3, [pc, #428]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a6a      	ldr	r2, [pc, #424]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fd fd61 	bl	80024d8 <HAL_GetTick>
 8004a16:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004a1a:	f7fd fd5d 	bl	80024d8 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e3c1      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004a2c:	4b61      	ldr	r3, [pc, #388]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f0      	bne.n	8004a1a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80a0 	beq.w	8004b86 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_OscConfig+0x10c>
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b18      	cmp	r3, #24
 8004a50:	d109      	bne.n	8004a66 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d106      	bne.n	8004a66 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 8092 	bne.w	8004b86 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e3a4      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a6e:	d106      	bne.n	8004a7e <HAL_RCC_OscConfig+0x132>
 8004a70:	4b50      	ldr	r3, [pc, #320]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a4f      	ldr	r2, [pc, #316]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	e058      	b.n	8004b30 <HAL_RCC_OscConfig+0x1e4>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d112      	bne.n	8004aac <HAL_RCC_OscConfig+0x160>
 8004a86:	4b4b      	ldr	r3, [pc, #300]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a4a      	ldr	r2, [pc, #296]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	4b48      	ldr	r3, [pc, #288]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a47      	ldr	r2, [pc, #284]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004a98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b45      	ldr	r3, [pc, #276]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a44      	ldr	r2, [pc, #272]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004aa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e041      	b.n	8004b30 <HAL_RCC_OscConfig+0x1e4>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ab4:	d112      	bne.n	8004adc <HAL_RCC_OscConfig+0x190>
 8004ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3e      	ldr	r2, [pc, #248]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a3b      	ldr	r2, [pc, #236]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004ac8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	4b39      	ldr	r3, [pc, #228]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a38      	ldr	r2, [pc, #224]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e029      	b.n	8004b30 <HAL_RCC_OscConfig+0x1e4>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004ae4:	d112      	bne.n	8004b0c <HAL_RCC_OscConfig+0x1c0>
 8004ae6:	4b33      	ldr	r3, [pc, #204]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a32      	ldr	r2, [pc, #200]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b30      	ldr	r3, [pc, #192]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2f      	ldr	r2, [pc, #188]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004af8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2c      	ldr	r2, [pc, #176]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e011      	b.n	8004b30 <HAL_RCC_OscConfig+0x1e4>
 8004b0c:	4b29      	ldr	r3, [pc, #164]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a28      	ldr	r2, [pc, #160]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b26      	ldr	r3, [pc, #152]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a25      	ldr	r2, [pc, #148]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	4b23      	ldr	r3, [pc, #140]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a22      	ldr	r2, [pc, #136]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004b2a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d013      	beq.n	8004b60 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fd fcce 	bl	80024d8 <HAL_GetTick>
 8004b3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004b40:	f7fd fcca 	bl	80024d8 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	@ 0x64
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e32e      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b52:	4b18      	ldr	r3, [pc, #96]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x1f4>
 8004b5e:	e012      	b.n	8004b86 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fd fcba 	bl	80024d8 <HAL_GetTick>
 8004b64:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004b68:	f7fd fcb6 	bl	80024d8 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	@ 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e31a      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb4 <HAL_RCC_OscConfig+0x268>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 809a 	beq.w	8004cc8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x25a>
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	2b18      	cmp	r3, #24
 8004b9e:	d149      	bne.n	8004c34 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d146      	bne.n	8004c34 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d104      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e2fe      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
 8004bb2:	bf00      	nop
 8004bb4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d11c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004bbe:	4b9a      	ldr	r3, [pc, #616]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0218 	and.w	r2, r3, #24
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d014      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004bce:	4b96      	ldr	r3, [pc, #600]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f023 0218 	bic.w	r2, r3, #24
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	4993      	ldr	r1, [pc, #588]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004be0:	f000 fdd0 	bl	8005784 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004be4:	4b91      	ldr	r3, [pc, #580]	@ (8004e2c <HAL_RCC_OscConfig+0x4e0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fd fbeb 	bl	80023c4 <HAL_InitTick>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e2db      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fd fc6e 	bl	80024d8 <HAL_GetTick>
 8004bfc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004c00:	f7fd fc6a 	bl	80024d8 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e2ce      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c12:	4b85      	ldr	r3, [pc, #532]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004c1e:	4b82      	ldr	r3, [pc, #520]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	041b      	lsls	r3, r3, #16
 8004c2c:	497e      	ldr	r1, [pc, #504]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004c32:	e049      	b.n	8004cc8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d02c      	beq.n	8004c96 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004c3c:	4b7a      	ldr	r3, [pc, #488]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f023 0218 	bic.w	r2, r3, #24
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	4977      	ldr	r1, [pc, #476]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004c4e:	4b76      	ldr	r3, [pc, #472]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a75      	ldr	r2, [pc, #468]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5a:	f7fd fc3d 	bl	80024d8 <HAL_GetTick>
 8004c5e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004c62:	f7fd fc39 	bl	80024d8 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e29d      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c74:	4b6c      	ldr	r3, [pc, #432]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004c80:	4b69      	ldr	r3, [pc, #420]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	041b      	lsls	r3, r3, #16
 8004c8e:	4966      	ldr	r1, [pc, #408]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	610b      	str	r3, [r1, #16]
 8004c94:	e018      	b.n	8004cc8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c96:	4b64      	ldr	r3, [pc, #400]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a63      	ldr	r2, [pc, #396]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004c9c:	f023 0301 	bic.w	r3, r3, #1
 8004ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca2:	f7fd fc19 	bl	80024d8 <HAL_GetTick>
 8004ca6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004caa:	f7fd fc15 	bl	80024d8 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e279      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f0      	bne.n	8004caa <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d03c      	beq.n	8004d4e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01c      	beq.n	8004d16 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cdc:	4b52      	ldr	r3, [pc, #328]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ce2:	4a51      	ldr	r2, [pc, #324]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004ce4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ce8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cec:	f7fd fbf4 	bl	80024d8 <HAL_GetTick>
 8004cf0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004cf4:	f7fd fbf0 	bl	80024d8 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e254      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004d06:	4b48      	ldr	r3, [pc, #288]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ef      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x3a8>
 8004d14:	e01b      	b.n	8004d4e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d16:	4b44      	ldr	r3, [pc, #272]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d1c:	4a42      	ldr	r2, [pc, #264]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004d1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d26:	f7fd fbd7 	bl	80024d8 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004d2e:	f7fd fbd3 	bl	80024d8 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e237      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d40:	4b39      	ldr	r3, [pc, #228]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1ef      	bne.n	8004d2e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80d2 	beq.w	8004f00 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d5c:	4b34      	ldr	r3, [pc, #208]	@ (8004e30 <HAL_RCC_OscConfig+0x4e4>)
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d118      	bne.n	8004d9a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004d68:	4b31      	ldr	r3, [pc, #196]	@ (8004e30 <HAL_RCC_OscConfig+0x4e4>)
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	4a30      	ldr	r2, [pc, #192]	@ (8004e30 <HAL_RCC_OscConfig+0x4e4>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d74:	f7fd fbb0 	bl	80024d8 <HAL_GetTick>
 8004d78:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7c:	f7fd fbac 	bl	80024d8 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e210      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004d8e:	4b28      	ldr	r3, [pc, #160]	@ (8004e30 <HAL_RCC_OscConfig+0x4e4>)
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d108      	bne.n	8004db4 <HAL_RCC_OscConfig+0x468>
 8004da2:	4b21      	ldr	r3, [pc, #132]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004da8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004db2:	e074      	b.n	8004e9e <HAL_RCC_OscConfig+0x552>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d118      	bne.n	8004dee <HAL_RCC_OscConfig+0x4a2>
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004dbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dc2:	4a19      	ldr	r2, [pc, #100]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004dcc:	4b16      	ldr	r3, [pc, #88]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dd2:	4a15      	ldr	r2, [pc, #84]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004dd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ddc:	4b12      	ldr	r3, [pc, #72]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004dde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004de2:	4a11      	ldr	r2, [pc, #68]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004de4:	f023 0304 	bic.w	r3, r3, #4
 8004de8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004dec:	e057      	b.n	8004e9e <HAL_RCC_OscConfig+0x552>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	d11e      	bne.n	8004e34 <HAL_RCC_OscConfig+0x4e8>
 8004df6:	4b0c      	ldr	r3, [pc, #48]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004dfe:	f043 0304 	orr.w	r3, r3, #4
 8004e02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e06:	4b08      	ldr	r3, [pc, #32]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e0c:	4a06      	ldr	r2, [pc, #24]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e16:	4b04      	ldr	r3, [pc, #16]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e1c:	4a02      	ldr	r2, [pc, #8]	@ (8004e28 <HAL_RCC_OscConfig+0x4dc>)
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e26:	e03a      	b.n	8004e9e <HAL_RCC_OscConfig+0x552>
 8004e28:	44020c00 	.word	0x44020c00
 8004e2c:	20000024 	.word	0x20000024
 8004e30:	44020800 	.word	0x44020800
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b85      	cmp	r3, #133	@ 0x85
 8004e3a:	d118      	bne.n	8004e6e <HAL_RCC_OscConfig+0x522>
 8004e3c:	4ba2      	ldr	r3, [pc, #648]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e42:	4aa1      	ldr	r2, [pc, #644]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004e44:	f043 0304 	orr.w	r3, r3, #4
 8004e48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e4c:	4b9e      	ldr	r3, [pc, #632]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e52:	4a9d      	ldr	r2, [pc, #628]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e58:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e5c:	4b9a      	ldr	r3, [pc, #616]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e62:	4a99      	ldr	r2, [pc, #612]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e6c:	e017      	b.n	8004e9e <HAL_RCC_OscConfig+0x552>
 8004e6e:	4b96      	ldr	r3, [pc, #600]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e74:	4a94      	ldr	r2, [pc, #592]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004e76:	f023 0301 	bic.w	r3, r3, #1
 8004e7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e7e:	4b92      	ldr	r3, [pc, #584]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e84:	4a90      	ldr	r2, [pc, #576]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004e86:	f023 0304 	bic.w	r3, r3, #4
 8004e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e8e:	4b8e      	ldr	r3, [pc, #568]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e94:	4a8c      	ldr	r2, [pc, #560]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d016      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea6:	f7fd fb17 	bl	80024d8 <HAL_GetTick>
 8004eaa:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eac:	e00a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eae:	f7fd fb13 	bl	80024d8 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e175      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ec4:	4b80      	ldr	r3, [pc, #512]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0ed      	beq.n	8004eae <HAL_RCC_OscConfig+0x562>
 8004ed2:	e015      	b.n	8004f00 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed4:	f7fd fb00 	bl	80024d8 <HAL_GetTick>
 8004ed8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eda:	e00a      	b.n	8004ef2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004edc:	f7fd fafc 	bl	80024d8 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e15e      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef2:	4b75      	ldr	r3, [pc, #468]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ed      	bne.n	8004edc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d036      	beq.n	8004f7a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d019      	beq.n	8004f48 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f14:	4b6c      	ldr	r3, [pc, #432]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a6b      	ldr	r2, [pc, #428]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004f1a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f20:	f7fd fada 	bl	80024d8 <HAL_GetTick>
 8004f24:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004f28:	f7fd fad6 	bl	80024d8 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e13a      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004f3a:	4b63      	ldr	r3, [pc, #396]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0x5dc>
 8004f46:	e018      	b.n	8004f7a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f48:	4b5f      	ldr	r3, [pc, #380]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a5e      	ldr	r2, [pc, #376]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004f4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fd fac0 	bl	80024d8 <HAL_GetTick>
 8004f58:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004f5c:	f7fd fabc 	bl	80024d8 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e120      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004f6e:	4b56      	ldr	r3, [pc, #344]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8115 	beq.w	80051ae <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	2b18      	cmp	r3, #24
 8004f88:	f000 80af 	beq.w	80050ea <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	f040 8086 	bne.w	80050a2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004f96:	4b4c      	ldr	r3, [pc, #304]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a4b      	ldr	r2, [pc, #300]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004f9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fd fa99 	bl	80024d8 <HAL_GetTick>
 8004fa6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004faa:	f7fd fa95 	bl	80024d8 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e0f9      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004fbc:	4b42      	ldr	r3, [pc, #264]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1f0      	bne.n	8004faa <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004fd0:	f023 0303 	bic.w	r3, r3, #3
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fdc:	0212      	lsls	r2, r2, #8
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	4939      	ldr	r1, [pc, #228]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fea:	3b01      	subs	r3, #1
 8004fec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	025b      	lsls	r3, r3, #9
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005000:	3b01      	subs	r3, #1
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	3b01      	subs	r3, #1
 8005010:	061b      	lsls	r3, r3, #24
 8005012:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005016:	492c      	ldr	r1, [pc, #176]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800501c:	4b2a      	ldr	r3, [pc, #168]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	4a29      	ldr	r2, [pc, #164]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8005022:	f023 0310 	bic.w	r3, r3, #16
 8005026:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800502c:	4a26      	ldr	r2, [pc, #152]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005032:	4b25      	ldr	r3, [pc, #148]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	4a24      	ldr	r2, [pc, #144]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8005038:	f043 0310 	orr.w	r3, r3, #16
 800503c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800503e:	4b22      	ldr	r3, [pc, #136]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8005040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005042:	f023 020c 	bic.w	r2, r3, #12
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504a:	491f      	ldr	r1, [pc, #124]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 800504c:	4313      	orrs	r3, r2
 800504e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005050:	4b1d      	ldr	r3, [pc, #116]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	f023 0220 	bic.w	r2, r3, #32
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800505c:	491a      	ldr	r1, [pc, #104]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 800505e:	4313      	orrs	r3, r2
 8005060:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005062:	4b19      	ldr	r3, [pc, #100]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8005064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005066:	4a18      	ldr	r2, [pc, #96]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800506c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800506e:	4b16      	ldr	r3, [pc, #88]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a15      	ldr	r2, [pc, #84]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8005074:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507a:	f7fd fa2d 	bl	80024d8 <HAL_GetTick>
 800507e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005082:	f7fd fa29 	bl	80024d8 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e08d      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005094:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0f0      	beq.n	8005082 <HAL_RCC_OscConfig+0x736>
 80050a0:	e085      	b.n	80051ae <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80050a2:	4b09      	ldr	r3, [pc, #36]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a08      	ldr	r2, [pc, #32]	@ (80050c8 <HAL_RCC_OscConfig+0x77c>)
 80050a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ae:	f7fd fa13 	bl	80024d8 <HAL_GetTick>
 80050b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80050b4:	e00a      	b.n	80050cc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80050b6:	f7fd fa0f 	bl	80024d8 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d903      	bls.n	80050cc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e073      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
 80050c8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80050cc:	4b3a      	ldr	r3, [pc, #232]	@ (80051b8 <HAL_RCC_OscConfig+0x86c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1ee      	bne.n	80050b6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80050d8:	4b37      	ldr	r3, [pc, #220]	@ (80051b8 <HAL_RCC_OscConfig+0x86c>)
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	4a36      	ldr	r2, [pc, #216]	@ (80051b8 <HAL_RCC_OscConfig+0x86c>)
 80050de:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	6293      	str	r3, [r2, #40]	@ 0x28
 80050e8:	e061      	b.n	80051ae <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80050ea:	4b33      	ldr	r3, [pc, #204]	@ (80051b8 <HAL_RCC_OscConfig+0x86c>)
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050f0:	4b31      	ldr	r3, [pc, #196]	@ (80051b8 <HAL_RCC_OscConfig+0x86c>)
 80050f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d031      	beq.n	8005162 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f003 0203 	and.w	r2, r3, #3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005108:	429a      	cmp	r2, r3
 800510a:	d12a      	bne.n	8005162 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005118:	429a      	cmp	r2, r3
 800511a:	d122      	bne.n	8005162 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005126:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d11a      	bne.n	8005162 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	0a5b      	lsrs	r3, r3, #9
 8005130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d111      	bne.n	8005162 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d108      	bne.n	8005162 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	0e1b      	lsrs	r3, r3, #24
 8005154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800515e:	429a      	cmp	r2, r3
 8005160:	d001      	beq.n	8005166 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e024      	b.n	80051b0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005166:	4b14      	ldr	r3, [pc, #80]	@ (80051b8 <HAL_RCC_OscConfig+0x86c>)
 8005168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516a:	08db      	lsrs	r3, r3, #3
 800516c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005174:	429a      	cmp	r2, r3
 8005176:	d01a      	beq.n	80051ae <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005178:	4b0f      	ldr	r3, [pc, #60]	@ (80051b8 <HAL_RCC_OscConfig+0x86c>)
 800517a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517c:	4a0e      	ldr	r2, [pc, #56]	@ (80051b8 <HAL_RCC_OscConfig+0x86c>)
 800517e:	f023 0310 	bic.w	r3, r3, #16
 8005182:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fd f9a8 	bl	80024d8 <HAL_GetTick>
 8005188:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800518a:	bf00      	nop
 800518c:	f7fd f9a4 	bl	80024d8 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	4293      	cmp	r3, r2
 8005196:	d0f9      	beq.n	800518c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800519c:	4a06      	ldr	r2, [pc, #24]	@ (80051b8 <HAL_RCC_OscConfig+0x86c>)
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80051a2:	4b05      	ldr	r3, [pc, #20]	@ (80051b8 <HAL_RCC_OscConfig+0x86c>)
 80051a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a6:	4a04      	ldr	r2, [pc, #16]	@ (80051b8 <HAL_RCC_OscConfig+0x86c>)
 80051a8:	f043 0310 	orr.w	r3, r3, #16
 80051ac:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3720      	adds	r7, #32
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	44020c00 	.word	0x44020c00

080051bc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e19e      	b.n	800550e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d0:	4b83      	ldr	r3, [pc, #524]	@ (80053e0 <HAL_RCC_ClockConfig+0x224>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d910      	bls.n	8005200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051de:	4b80      	ldr	r3, [pc, #512]	@ (80053e0 <HAL_RCC_ClockConfig+0x224>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 020f 	bic.w	r2, r3, #15
 80051e6:	497e      	ldr	r1, [pc, #504]	@ (80053e0 <HAL_RCC_ClockConfig+0x224>)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	4b7c      	ldr	r3, [pc, #496]	@ (80053e0 <HAL_RCC_ClockConfig+0x224>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e186      	b.n	800550e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	d012      	beq.n	8005232 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695a      	ldr	r2, [r3, #20]
 8005210:	4b74      	ldr	r3, [pc, #464]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	0a1b      	lsrs	r3, r3, #8
 8005216:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800521a:	429a      	cmp	r2, r3
 800521c:	d909      	bls.n	8005232 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800521e:	4b71      	ldr	r3, [pc, #452]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	496d      	ldr	r1, [pc, #436]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 800522e:	4313      	orrs	r3, r2
 8005230:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d012      	beq.n	8005264 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	4b68      	ldr	r3, [pc, #416]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800524c:	429a      	cmp	r2, r3
 800524e:	d909      	bls.n	8005264 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005250:	4b64      	ldr	r3, [pc, #400]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	4961      	ldr	r1, [pc, #388]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 8005260:	4313      	orrs	r3, r2
 8005262:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d010      	beq.n	8005292 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	4b5b      	ldr	r3, [pc, #364]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800527c:	429a      	cmp	r2, r3
 800527e:	d908      	bls.n	8005292 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005280:	4b58      	ldr	r3, [pc, #352]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4955      	ldr	r1, [pc, #340]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 800528e:	4313      	orrs	r3, r2
 8005290:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d010      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	4b50      	ldr	r3, [pc, #320]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d908      	bls.n	80052c0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80052ae:	4b4d      	ldr	r3, [pc, #308]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 020f 	bic.w	r2, r3, #15
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	494a      	ldr	r1, [pc, #296]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8093 	beq.w	80053f4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d107      	bne.n	80052e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80052d6:	4b43      	ldr	r3, [pc, #268]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d121      	bne.n	8005326 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e113      	b.n	800550e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d107      	bne.n	80052fe <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ee:	4b3d      	ldr	r3, [pc, #244]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d115      	bne.n	8005326 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e107      	b.n	800550e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d107      	bne.n	8005316 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005306:	4b37      	ldr	r3, [pc, #220]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e0fb      	b.n	800550e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005316:	4b33      	ldr	r3, [pc, #204]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e0f3      	b.n	800550e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8005326:	4b2f      	ldr	r3, [pc, #188]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f023 0203 	bic.w	r2, r3, #3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	492c      	ldr	r1, [pc, #176]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 8005334:	4313      	orrs	r3, r2
 8005336:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005338:	f7fd f8ce 	bl	80024d8 <HAL_GetTick>
 800533c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b03      	cmp	r3, #3
 8005344:	d112      	bne.n	800536c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005346:	e00a      	b.n	800535e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005348:	f7fd f8c6 	bl	80024d8 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e0d7      	b.n	800550e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800535e:	4b21      	ldr	r3, [pc, #132]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f003 0318 	and.w	r3, r3, #24
 8005366:	2b18      	cmp	r3, #24
 8005368:	d1ee      	bne.n	8005348 <HAL_RCC_ClockConfig+0x18c>
 800536a:	e043      	b.n	80053f4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d112      	bne.n	800539a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005374:	e00a      	b.n	800538c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005376:	f7fd f8af 	bl	80024d8 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e0c0      	b.n	800550e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800538c:	4b15      	ldr	r3, [pc, #84]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f003 0318 	and.w	r3, r3, #24
 8005394:	2b10      	cmp	r3, #16
 8005396:	d1ee      	bne.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
 8005398:	e02c      	b.n	80053f4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d122      	bne.n	80053e8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80053a2:	e00a      	b.n	80053ba <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80053a4:	f7fd f898 	bl	80024d8 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e0a9      	b.n	800550e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80053ba:	4b0a      	ldr	r3, [pc, #40]	@ (80053e4 <HAL_RCC_ClockConfig+0x228>)
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f003 0318 	and.w	r3, r3, #24
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d1ee      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x1e8>
 80053c6:	e015      	b.n	80053f4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80053c8:	f7fd f886 	bl	80024d8 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d906      	bls.n	80053e8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e097      	b.n	800550e <HAL_RCC_ClockConfig+0x352>
 80053de:	bf00      	nop
 80053e0:	40022000 	.word	0x40022000
 80053e4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80053e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	f003 0318 	and.w	r3, r3, #24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e9      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d010      	beq.n	8005422 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	4b44      	ldr	r3, [pc, #272]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	429a      	cmp	r2, r3
 800540e:	d208      	bcs.n	8005422 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005410:	4b41      	ldr	r3, [pc, #260]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f023 020f 	bic.w	r2, r3, #15
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	493e      	ldr	r1, [pc, #248]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 800541e:	4313      	orrs	r3, r2
 8005420:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005422:	4b3e      	ldr	r3, [pc, #248]	@ (800551c <HAL_RCC_ClockConfig+0x360>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d210      	bcs.n	8005452 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005430:	4b3a      	ldr	r3, [pc, #232]	@ (800551c <HAL_RCC_ClockConfig+0x360>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f023 020f 	bic.w	r2, r3, #15
 8005438:	4938      	ldr	r1, [pc, #224]	@ (800551c <HAL_RCC_ClockConfig+0x360>)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	4313      	orrs	r3, r2
 800543e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005440:	4b36      	ldr	r3, [pc, #216]	@ (800551c <HAL_RCC_ClockConfig+0x360>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d001      	beq.n	8005452 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e05d      	b.n	800550e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d010      	beq.n	8005480 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	4b2d      	ldr	r3, [pc, #180]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800546a:	429a      	cmp	r2, r3
 800546c:	d208      	bcs.n	8005480 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800546e:	4b2a      	ldr	r3, [pc, #168]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	4927      	ldr	r1, [pc, #156]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 800547c:	4313      	orrs	r3, r2
 800547e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d012      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	4b21      	ldr	r3, [pc, #132]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800549a:	429a      	cmp	r2, r3
 800549c:	d209      	bcs.n	80054b2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800549e:	4b1e      	ldr	r3, [pc, #120]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	491a      	ldr	r1, [pc, #104]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d012      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695a      	ldr	r2, [r3, #20]
 80054c2:	4b15      	ldr	r3, [pc, #84]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	0a1b      	lsrs	r3, r3, #8
 80054c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d209      	bcs.n	80054e4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80054d0:	4b11      	ldr	r3, [pc, #68]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	490e      	ldr	r1, [pc, #56]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80054e4:	f000 f822 	bl	800552c <HAL_RCC_GetSysClockFreq>
 80054e8:	4602      	mov	r2, r0
 80054ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	490b      	ldr	r1, [pc, #44]	@ (8005520 <HAL_RCC_ClockConfig+0x364>)
 80054f4:	5ccb      	ldrb	r3, [r1, r3]
 80054f6:	fa22 f303 	lsr.w	r3, r2, r3
 80054fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005524 <HAL_RCC_ClockConfig+0x368>)
 80054fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80054fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005528 <HAL_RCC_ClockConfig+0x36c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f7fc ff5e 	bl	80023c4 <HAL_InitTick>
 8005508:	4603      	mov	r3, r0
 800550a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800550c:	7afb      	ldrb	r3, [r7, #11]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	44020c00 	.word	0x44020c00
 800551c:	40022000 	.word	0x40022000
 8005520:	08011afc 	.word	0x08011afc
 8005524:	20000004 	.word	0x20000004
 8005528:	20000024 	.word	0x20000024

0800552c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	@ 0x24
 8005530:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005532:	4b8c      	ldr	r3, [pc, #560]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 0318 	and.w	r3, r3, #24
 800553a:	2b08      	cmp	r3, #8
 800553c:	d102      	bne.n	8005544 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800553e:	4b8a      	ldr	r3, [pc, #552]	@ (8005768 <HAL_RCC_GetSysClockFreq+0x23c>)
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	e107      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005544:	4b87      	ldr	r3, [pc, #540]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f003 0318 	and.w	r3, r3, #24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d112      	bne.n	8005576 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005550:	4b84      	ldr	r3, [pc, #528]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800555c:	4b81      	ldr	r3, [pc, #516]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	08db      	lsrs	r3, r3, #3
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	4a81      	ldr	r2, [pc, #516]	@ (800576c <HAL_RCC_GetSysClockFreq+0x240>)
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
 800556c:	61fb      	str	r3, [r7, #28]
 800556e:	e0f1      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005570:	4b7e      	ldr	r3, [pc, #504]	@ (800576c <HAL_RCC_GetSysClockFreq+0x240>)
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	e0ee      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005576:	4b7b      	ldr	r3, [pc, #492]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f003 0318 	and.w	r3, r3, #24
 800557e:	2b10      	cmp	r3, #16
 8005580:	d102      	bne.n	8005588 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005582:	4b7b      	ldr	r3, [pc, #492]	@ (8005770 <HAL_RCC_GetSysClockFreq+0x244>)
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	e0e5      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005588:	4b76      	ldr	r3, [pc, #472]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f003 0318 	and.w	r3, r3, #24
 8005590:	2b18      	cmp	r3, #24
 8005592:	f040 80dd 	bne.w	8005750 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005596:	4b73      	ldr	r3, [pc, #460]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80055a0:	4b70      	ldr	r3, [pc, #448]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 80055a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a4:	0a1b      	lsrs	r3, r3, #8
 80055a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80055ac:	4b6d      	ldr	r3, [pc, #436]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 80055ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80055b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 80055ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80055bc:	08db      	lsrs	r3, r3, #3
 80055be:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	fb02 f303 	mul.w	r3, r2, r3
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 80b7 	beq.w	800574a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d003      	beq.n	80055ea <HAL_RCC_GetSysClockFreq+0xbe>
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d056      	beq.n	8005696 <HAL_RCC_GetSysClockFreq+0x16a>
 80055e8:	e077      	b.n	80056da <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80055ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d02d      	beq.n	8005652 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	08db      	lsrs	r3, r3, #3
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	4a5a      	ldr	r2, [pc, #360]	@ (800576c <HAL_RCC_GetSysClockFreq+0x240>)
 8005602:	fa22 f303 	lsr.w	r3, r2, r3
 8005606:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	ee07 3a90 	vmov	s15, r3
 800560e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	ee07 3a90 	vmov	s15, r3
 8005618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005620:	4b50      	ldr	r3, [pc, #320]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 8005622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005628:	ee07 3a90 	vmov	s15, r3
 800562c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005630:	ed97 6a02 	vldr	s12, [r7, #8]
 8005634:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005774 <HAL_RCC_GetSysClockFreq+0x248>
 8005638:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800563c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005640:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005644:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005650:	e065      	b.n	800571e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	ee07 3a90 	vmov	s15, r3
 8005658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8005778 <HAL_RCC_GetSysClockFreq+0x24c>
 8005660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005664:	4b3f      	ldr	r3, [pc, #252]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 8005666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005674:	ed97 6a02 	vldr	s12, [r7, #8]
 8005678:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005774 <HAL_RCC_GetSysClockFreq+0x248>
 800567c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005680:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005684:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005688:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800568c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005690:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005694:	e043      	b.n	800571e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800577c <HAL_RCC_GetSysClockFreq+0x250>
 80056a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 80056aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b0:	ee07 3a90 	vmov	s15, r3
 80056b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80056bc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005774 <HAL_RCC_GetSysClockFreq+0x248>
 80056c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80056d8:	e021      	b.n	800571e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005780 <HAL_RCC_GetSysClockFreq+0x254>
 80056e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 80056ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f4:	ee07 3a90 	vmov	s15, r3
 80056f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005700:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005774 <HAL_RCC_GetSysClockFreq+0x248>
 8005704:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005708:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800570c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005710:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005718:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800571c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800571e:	4b11      	ldr	r3, [pc, #68]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x238>)
 8005720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005722:	0a5b      	lsrs	r3, r3, #9
 8005724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005728:	3301      	adds	r3, #1
 800572a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005736:	edd7 6a06 	vldr	s13, [r7, #24]
 800573a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800573e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005742:	ee17 3a90 	vmov	r3, s15
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	e004      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
 800574e:	e001      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005750:	4b06      	ldr	r3, [pc, #24]	@ (800576c <HAL_RCC_GetSysClockFreq+0x240>)
 8005752:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005754:	69fb      	ldr	r3, [r7, #28]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3724      	adds	r7, #36	@ 0x24
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	44020c00 	.word	0x44020c00
 8005768:	003d0900 	.word	0x003d0900
 800576c:	03d09000 	.word	0x03d09000
 8005770:	007a1200 	.word	0x007a1200
 8005774:	46000000 	.word	0x46000000
 8005778:	4c742400 	.word	0x4c742400
 800577c:	4af42400 	.word	0x4af42400
 8005780:	4a742400 	.word	0x4a742400

08005784 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005788:	f7ff fed0 	bl	800552c <HAL_RCC_GetSysClockFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b08      	ldr	r3, [pc, #32]	@ (80057b0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005790:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005792:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005796:	4907      	ldr	r1, [pc, #28]	@ (80057b4 <HAL_RCC_GetHCLKFreq+0x30>)
 8005798:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800579a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800579e:	fa22 f303 	lsr.w	r3, r2, r3
 80057a2:	4a05      	ldr	r2, [pc, #20]	@ (80057b8 <HAL_RCC_GetHCLKFreq+0x34>)
 80057a4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80057a6:	4b04      	ldr	r3, [pc, #16]	@ (80057b8 <HAL_RCC_GetHCLKFreq+0x34>)
 80057a8:	681b      	ldr	r3, [r3, #0]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	44020c00 	.word	0x44020c00
 80057b4:	08011afc 	.word	0x08011afc
 80057b8:	20000004 	.word	0x20000004

080057bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80057c0:	f7ff ffe0 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b06      	ldr	r3, [pc, #24]	@ (80057e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	091b      	lsrs	r3, r3, #4
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	4904      	ldr	r1, [pc, #16]	@ (80057e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057d2:	5ccb      	ldrb	r3, [r1, r3]
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	44020c00 	.word	0x44020c00
 80057e4:	08011b0c 	.word	0x08011b0c

080057e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80057ec:	f7ff ffca 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 80057f0:	4602      	mov	r2, r0
 80057f2:	4b06      	ldr	r3, [pc, #24]	@ (800580c <HAL_RCC_GetPCLK2Freq+0x24>)
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	4904      	ldr	r1, [pc, #16]	@ (8005810 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057fe:	5ccb      	ldrb	r3, [r1, r3]
 8005800:	f003 031f 	and.w	r3, r3, #31
 8005804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005808:	4618      	mov	r0, r3
 800580a:	bd80      	pop	{r7, pc}
 800580c:	44020c00 	.word	0x44020c00
 8005810:	08011b0c 	.word	0x08011b0c

08005814 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005818:	f7ff ffb4 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 800581c:	4602      	mov	r2, r0
 800581e:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	0b1b      	lsrs	r3, r3, #12
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	4904      	ldr	r1, [pc, #16]	@ (800583c <HAL_RCC_GetPCLK3Freq+0x28>)
 800582a:	5ccb      	ldrb	r3, [r1, r3]
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005834:	4618      	mov	r0, r3
 8005836:	bd80      	pop	{r7, pc}
 8005838:	44020c00 	.word	0x44020c00
 800583c:	08011b0c 	.word	0x08011b0c

08005840 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005844:	b0d8      	sub	sp, #352	@ 0x160
 8005846:	af00      	add	r7, sp, #0
 8005848:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800584c:	2300      	movs	r3, #0
 800584e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005852:	2300      	movs	r3, #0
 8005854:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005858:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005864:	2500      	movs	r5, #0
 8005866:	ea54 0305 	orrs.w	r3, r4, r5
 800586a:	d00b      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800586c:	4bcd      	ldr	r3, [pc, #820]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800586e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005872:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8005876:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800587a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587c:	4ac9      	ldr	r2, [pc, #804]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800587e:	430b      	orrs	r3, r1
 8005880:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005884:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	f002 0801 	and.w	r8, r2, #1
 8005890:	f04f 0900 	mov.w	r9, #0
 8005894:	ea58 0309 	orrs.w	r3, r8, r9
 8005898:	d042      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800589a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800589e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a0:	2b05      	cmp	r3, #5
 80058a2:	d823      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xac>
 80058a4:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	080058f5 	.word	0x080058f5
 80058b0:	080058c5 	.word	0x080058c5
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058f5 	.word	0x080058f5
 80058bc:	080058f5 	.word	0x080058f5
 80058c0:	080058f5 	.word	0x080058f5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058c8:	3308      	adds	r3, #8
 80058ca:	4618      	mov	r0, r3
 80058cc:	f004 fee0 	bl	800a690 <RCCEx_PLL2_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80058d6:	e00e      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058dc:	3330      	adds	r3, #48	@ 0x30
 80058de:	4618      	mov	r0, r3
 80058e0:	f004 ff6e 	bl	800a7c0 <RCCEx_PLL3_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80058ea:	e004      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80058f2:	e000      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80058f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10c      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80058fe:	4ba9      	ldr	r3, [pc, #676]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005900:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005904:	f023 0107 	bic.w	r1, r3, #7
 8005908:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800590c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800590e:	4aa5      	ldr	r2, [pc, #660]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005910:	430b      	orrs	r3, r1
 8005912:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005916:	e003      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800591c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005920:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	f002 0a02 	and.w	sl, r2, #2
 800592c:	f04f 0b00 	mov.w	fp, #0
 8005930:	ea5a 030b 	orrs.w	r3, sl, fp
 8005934:	f000 8088 	beq.w	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8005938:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800593c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800593e:	2b28      	cmp	r3, #40	@ 0x28
 8005940:	d868      	bhi.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005942:	a201      	add	r2, pc, #4	@ (adr r2, 8005948 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	08005a1d 	.word	0x08005a1d
 800594c:	08005a15 	.word	0x08005a15
 8005950:	08005a15 	.word	0x08005a15
 8005954:	08005a15 	.word	0x08005a15
 8005958:	08005a15 	.word	0x08005a15
 800595c:	08005a15 	.word	0x08005a15
 8005960:	08005a15 	.word	0x08005a15
 8005964:	08005a15 	.word	0x08005a15
 8005968:	080059ed 	.word	0x080059ed
 800596c:	08005a15 	.word	0x08005a15
 8005970:	08005a15 	.word	0x08005a15
 8005974:	08005a15 	.word	0x08005a15
 8005978:	08005a15 	.word	0x08005a15
 800597c:	08005a15 	.word	0x08005a15
 8005980:	08005a15 	.word	0x08005a15
 8005984:	08005a15 	.word	0x08005a15
 8005988:	08005a01 	.word	0x08005a01
 800598c:	08005a15 	.word	0x08005a15
 8005990:	08005a15 	.word	0x08005a15
 8005994:	08005a15 	.word	0x08005a15
 8005998:	08005a15 	.word	0x08005a15
 800599c:	08005a15 	.word	0x08005a15
 80059a0:	08005a15 	.word	0x08005a15
 80059a4:	08005a15 	.word	0x08005a15
 80059a8:	08005a1d 	.word	0x08005a1d
 80059ac:	08005a15 	.word	0x08005a15
 80059b0:	08005a15 	.word	0x08005a15
 80059b4:	08005a15 	.word	0x08005a15
 80059b8:	08005a15 	.word	0x08005a15
 80059bc:	08005a15 	.word	0x08005a15
 80059c0:	08005a15 	.word	0x08005a15
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	08005a1d 	.word	0x08005a1d
 80059cc:	08005a15 	.word	0x08005a15
 80059d0:	08005a15 	.word	0x08005a15
 80059d4:	08005a15 	.word	0x08005a15
 80059d8:	08005a15 	.word	0x08005a15
 80059dc:	08005a15 	.word	0x08005a15
 80059e0:	08005a15 	.word	0x08005a15
 80059e4:	08005a15 	.word	0x08005a15
 80059e8:	08005a1d 	.word	0x08005a1d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059f0:	3308      	adds	r3, #8
 80059f2:	4618      	mov	r0, r3
 80059f4:	f004 fe4c 	bl	800a690 <RCCEx_PLL2_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80059fe:	e00e      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a04:	3330      	adds	r3, #48	@ 0x30
 8005a06:	4618      	mov	r0, r3
 8005a08:	f004 feda 	bl	800a7c0 <RCCEx_PLL3_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005a12:	e004      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a1a:	e000      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10c      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005a26:	4b5f      	ldr	r3, [pc, #380]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005a28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a2c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a36:	4a5b      	ldr	r2, [pc, #364]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005a3e:	e003      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a44:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f002 0304 	and.w	r3, r2, #4
 8005a54:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8005a5e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8005a62:	460b      	mov	r3, r1
 8005a64:	4313      	orrs	r3, r2
 8005a66:	d04e      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005a72:	d02c      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005a74:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005a78:	d825      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a7e:	d028      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a84:	d81f      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a88:	d025      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005a8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a8c:	d81b      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a8e:	2b80      	cmp	r3, #128	@ 0x80
 8005a90:	d00f      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005a92:	2b80      	cmp	r3, #128	@ 0x80
 8005a94:	d817      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01f      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8005a9a:	2b40      	cmp	r3, #64	@ 0x40
 8005a9c:	d113      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f004 fdf3 	bl	800a690 <RCCEx_PLL2_Config>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005ab0:	e014      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ab6:	3330      	adds	r3, #48	@ 0x30
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f004 fe81 	bl	800a7c0 <RCCEx_PLL3_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005ac4:	e00a      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005acc:	e006      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e004      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005ad2:	bf00      	nop
 8005ad4:	e002      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005ad6:	bf00      	nop
 8005ad8:	e000      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005adc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10c      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005aea:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005af4:	4a2b      	ldr	r2, [pc, #172]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005af6:	430b      	orrs	r3, r1
 8005af8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005afc:	e003      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b02:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	f002 0308 	and.w	r3, r2, #8
 8005b12:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8005b16:	2300      	movs	r3, #0
 8005b18:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8005b1c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8005b20:	460b      	mov	r3, r1
 8005b22:	4313      	orrs	r3, r2
 8005b24:	d056      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8005b26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b2c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005b30:	d031      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005b32:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005b36:	d82a      	bhi.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b3c:	d02d      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005b3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b42:	d824      	bhi.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005b48:	d029      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005b4a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005b4e:	d81e      	bhi.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b54:	d011      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b5a:	d818      	bhi.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d023      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b64:	d113      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f004 fd8f 	bl	800a690 <RCCEx_PLL2_Config>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005b78:	e017      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b7e:	3330      	adds	r3, #48	@ 0x30
 8005b80:	4618      	mov	r0, r3
 8005b82:	f004 fe1d 	bl	800a7c0 <RCCEx_PLL3_Config>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005b8c:	e00d      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b94:	e009      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005b96:	bf00      	nop
 8005b98:	e007      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005b9a:	bf00      	nop
 8005b9c:	e005      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005b9e:	bf00      	nop
 8005ba0:	e003      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005ba2:	bf00      	nop
 8005ba4:	44020c00 	.word	0x44020c00
        break;
 8005ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005baa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10c      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005bb2:	4bbb      	ldr	r3, [pc, #748]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005bb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005bb8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bc2:	4ab7      	ldr	r2, [pc, #732]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005bca:	e003      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bd0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f002 0310 	and.w	r3, r2, #16
 8005be0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005be4:	2300      	movs	r3, #0
 8005be6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005bea:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	d053      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bfa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005bfe:	d031      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005c00:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005c04:	d82a      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c0a:	d02d      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005c0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c10:	d824      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c16:	d029      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005c18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c1c:	d81e      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c22:	d011      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c28:	d818      	bhi.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d020      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c32:	d113      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c38:	3308      	adds	r3, #8
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f004 fd28 	bl	800a690 <RCCEx_PLL2_Config>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005c46:	e014      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c4c:	3330      	adds	r3, #48	@ 0x30
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f004 fdb6 	bl	800a7c0 <RCCEx_PLL3_Config>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005c5a:	e00a      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c62:	e006      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005c64:	bf00      	nop
 8005c66:	e004      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005c68:	bf00      	nop
 8005c6a:	e002      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005c6c:	bf00      	nop
 8005c6e:	e000      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10c      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005c7a:	4b89      	ldr	r3, [pc, #548]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005c7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c8a:	4a85      	ldr	r2, [pc, #532]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005c92:	e003      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c98:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	f002 0320 	and.w	r3, r2, #32
 8005ca8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005cac:	2300      	movs	r3, #0
 8005cae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005cb2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	d053      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005cbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005cc6:	d031      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005cc8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005ccc:	d82a      	bhi.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005cce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cd2:	d02d      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cd8:	d824      	bhi.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005cda:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005cde:	d029      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005ce0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005ce4:	d81e      	bhi.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cea:	d011      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf0:	d818      	bhi.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d020      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005cf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cfa:	d113      	bne.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d00:	3308      	adds	r3, #8
 8005d02:	4618      	mov	r0, r3
 8005d04:	f004 fcc4 	bl	800a690 <RCCEx_PLL2_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005d0e:	e014      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d14:	3330      	adds	r3, #48	@ 0x30
 8005d16:	4618      	mov	r0, r3
 8005d18:	f004 fd52 	bl	800a7c0 <RCCEx_PLL3_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005d22:	e00a      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d2a:	e006      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005d2c:	bf00      	nop
 8005d2e:	e004      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005d30:	bf00      	nop
 8005d32:	e002      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005d34:	bf00      	nop
 8005d36:	e000      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10c      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005d42:	4b57      	ldr	r3, [pc, #348]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005d48:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d52:	4a53      	ldr	r2, [pc, #332]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005d54:	430b      	orrs	r3, r1
 8005d56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005d5a:	e003      	b.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d60:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005d70:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005d74:	2300      	movs	r3, #0
 8005d76:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005d7a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4313      	orrs	r3, r2
 8005d82:	d053      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d8a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005d8e:	d031      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005d90:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005d94:	d82a      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d9a:	d02d      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005d9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005da0:	d824      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005da2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005da6:	d029      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005da8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005dac:	d81e      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005dae:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005db2:	d011      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005db4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005db8:	d818      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d020      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005dbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dc2:	d113      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dc8:	3308      	adds	r3, #8
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f004 fc60 	bl	800a690 <RCCEx_PLL2_Config>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005dd6:	e014      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005dd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ddc:	3330      	adds	r3, #48	@ 0x30
 8005dde:	4618      	mov	r0, r3
 8005de0:	f004 fcee 	bl	800a7c0 <RCCEx_PLL3_Config>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005dea:	e00a      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005df2:	e006      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005df4:	bf00      	nop
 8005df6:	e004      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005df8:	bf00      	nop
 8005dfa:	e002      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005dfc:	bf00      	nop
 8005dfe:	e000      	b.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10c      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005e0a:	4b25      	ldr	r3, [pc, #148]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005e0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e10:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e1a:	4a21      	ldr	r2, [pc, #132]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005e1c:	430b      	orrs	r3, r1
 8005e1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005e22:	e003      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e28:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005e2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005e38:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005e42:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005e46:	460b      	mov	r3, r1
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	d055      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e52:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005e56:	d033      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005e58:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005e5c:	d82c      	bhi.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005e5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e62:	d02f      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005e64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e68:	d826      	bhi.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005e6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e6e:	d02b      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005e70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005e74:	d820      	bhi.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005e76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e7a:	d013      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005e7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e80:	d81a      	bhi.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d022      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005e86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e8a:	d115      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e90:	3308      	adds	r3, #8
 8005e92:	4618      	mov	r0, r3
 8005e94:	f004 fbfc 	bl	800a690 <RCCEx_PLL2_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005e9e:	e016      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005ea0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ea8:	3330      	adds	r3, #48	@ 0x30
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f004 fc88 	bl	800a7c0 <RCCEx_PLL3_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005eb6:	e00a      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ebe:	e006      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005ec0:	bf00      	nop
 8005ec2:	e004      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005ec4:	bf00      	nop
 8005ec6:	e002      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005ec8:	bf00      	nop
 8005eca:	e000      	b.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ece:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005ed6:	4bbb      	ldr	r3, [pc, #748]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005ed8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005edc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ee0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ee4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ee6:	4ab7      	ldr	r2, [pc, #732]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005eee:	e003      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ef4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005f04:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005f0e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005f12:	460b      	mov	r3, r1
 8005f14:	4313      	orrs	r3, r2
 8005f16:	d053      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005f18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f1e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005f22:	d031      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005f24:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005f28:	d82a      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005f2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f2e:	d02d      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005f30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f34:	d824      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005f36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f3a:	d029      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005f3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f40:	d81e      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005f42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f46:	d011      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005f48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f4c:	d818      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d020      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005f52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f56:	d113      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f004 fb96 	bl	800a690 <RCCEx_PLL2_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005f6a:	e014      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f70:	3330      	adds	r3, #48	@ 0x30
 8005f72:	4618      	mov	r0, r3
 8005f74:	f004 fc24 	bl	800a7c0 <RCCEx_PLL3_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005f7e:	e00a      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f86:	e006      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005f88:	bf00      	nop
 8005f8a:	e004      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005f8c:	bf00      	nop
 8005f8e:	e002      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005f90:	bf00      	nop
 8005f92:	e000      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005f9e:	4b89      	ldr	r3, [pc, #548]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005fa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005fa4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005fa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fae:	4a85      	ldr	r2, [pc, #532]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005fb6:	e003      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fbc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005fc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005fd6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	d055      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8005fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fe8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005fec:	d031      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005fee:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005ff2:	d82a      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ff8:	d02d      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ffe:	d824      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006000:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006004:	d029      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8006006:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800600a:	d81e      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800600c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006010:	d011      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8006012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006016:	d818      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d020      	beq.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800601c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006020:	d113      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006022:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006026:	3308      	adds	r3, #8
 8006028:	4618      	mov	r0, r3
 800602a:	f004 fb31 	bl	800a690 <RCCEx_PLL2_Config>
 800602e:	4603      	mov	r3, r0
 8006030:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8006034:	e014      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006036:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800603a:	3330      	adds	r3, #48	@ 0x30
 800603c:	4618      	mov	r0, r3
 800603e:	f004 fbbf 	bl	800a7c0 <RCCEx_PLL3_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8006048:	e00a      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006050:	e006      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006052:	bf00      	nop
 8006054:	e004      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006056:	bf00      	nop
 8006058:	e002      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800605a:	bf00      	nop
 800605c:	e000      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800605e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006060:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10d      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8006068:	4b56      	ldr	r3, [pc, #344]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800606a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800606e:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8006072:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800607a:	4a52      	ldr	r2, [pc, #328]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800607c:	430b      	orrs	r3, r1
 800607e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006082:	e003      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006084:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006088:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800608c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006098:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800609c:	2300      	movs	r3, #0
 800609e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80060a2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80060a6:	460b      	mov	r3, r1
 80060a8:	4313      	orrs	r3, r2
 80060aa:	d044      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80060ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060b4:	2b05      	cmp	r3, #5
 80060b6:	d823      	bhi.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80060b8:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	08006109 	.word	0x08006109
 80060c4:	080060d9 	.word	0x080060d9
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	08006109 	.word	0x08006109
 80060d0:	08006109 	.word	0x08006109
 80060d4:	08006109 	.word	0x08006109
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060dc:	3308      	adds	r3, #8
 80060de:	4618      	mov	r0, r3
 80060e0:	f004 fad6 	bl	800a690 <RCCEx_PLL2_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80060ea:	e00e      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060f0:	3330      	adds	r3, #48	@ 0x30
 80060f2:	4618      	mov	r0, r3
 80060f4:	f004 fb64 	bl	800a7c0 <RCCEx_PLL3_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80060fe:	e004      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006106:	e000      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8006108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10d      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8006112:	4b2c      	ldr	r3, [pc, #176]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006114:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006118:	f023 0107 	bic.w	r1, r3, #7
 800611c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006124:	4a27      	ldr	r2, [pc, #156]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006126:	430b      	orrs	r3, r1
 8006128:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800612c:	e003      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006132:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8006136:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006142:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006146:	2300      	movs	r3, #0
 8006148:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800614c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006150:	460b      	mov	r3, r1
 8006152:	4313      	orrs	r3, r2
 8006154:	d04f      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8006156:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615e:	2b50      	cmp	r3, #80	@ 0x50
 8006160:	d029      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006162:	2b50      	cmp	r3, #80	@ 0x50
 8006164:	d823      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006166:	2b40      	cmp	r3, #64	@ 0x40
 8006168:	d027      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800616a:	2b40      	cmp	r3, #64	@ 0x40
 800616c:	d81f      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800616e:	2b30      	cmp	r3, #48	@ 0x30
 8006170:	d025      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8006172:	2b30      	cmp	r3, #48	@ 0x30
 8006174:	d81b      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006176:	2b20      	cmp	r3, #32
 8006178:	d00f      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800617a:	2b20      	cmp	r3, #32
 800617c:	d817      	bhi.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d022      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006182:	2b10      	cmp	r3, #16
 8006184:	d113      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006186:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800618a:	3308      	adds	r3, #8
 800618c:	4618      	mov	r0, r3
 800618e:	f004 fa7f 	bl	800a690 <RCCEx_PLL2_Config>
 8006192:	4603      	mov	r3, r0
 8006194:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006198:	e017      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800619a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800619e:	3330      	adds	r3, #48	@ 0x30
 80061a0:	4618      	mov	r0, r3
 80061a2:	f004 fb0d 	bl	800a7c0 <RCCEx_PLL3_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80061ac:	e00d      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80061b4:	e009      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80061b6:	bf00      	nop
 80061b8:	e007      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80061ba:	bf00      	nop
 80061bc:	e005      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80061be:	bf00      	nop
 80061c0:	e003      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80061c2:	bf00      	nop
 80061c4:	44020c00 	.word	0x44020c00
        break;
 80061c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10d      	bne.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80061d2:	4baf      	ldr	r3, [pc, #700]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80061d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80061d8:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80061dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e4:	4aaa      	ldr	r2, [pc, #680]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80061e6:	430b      	orrs	r3, r1
 80061e8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80061ec:	e003      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006202:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006206:	2300      	movs	r3, #0
 8006208:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800620c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006210:	460b      	mov	r3, r1
 8006212:	4313      	orrs	r3, r2
 8006214:	d055      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8006216:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800621a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800621e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006222:	d031      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8006224:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006228:	d82a      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800622a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800622e:	d02d      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006230:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006234:	d824      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006236:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800623a:	d029      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800623c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006240:	d81e      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006246:	d011      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8006248:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800624c:	d818      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d020      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8006252:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006256:	d113      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006258:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800625c:	3308      	adds	r3, #8
 800625e:	4618      	mov	r0, r3
 8006260:	f004 fa16 	bl	800a690 <RCCEx_PLL2_Config>
 8006264:	4603      	mov	r3, r0
 8006266:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800626a:	e014      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800626c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006270:	3330      	adds	r3, #48	@ 0x30
 8006272:	4618      	mov	r0, r3
 8006274:	f004 faa4 	bl	800a7c0 <RCCEx_PLL3_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800627e:	e00a      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006286:	e006      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006288:	bf00      	nop
 800628a:	e004      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800628c:	bf00      	nop
 800628e:	e002      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006290:	bf00      	nop
 8006292:	e000      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006296:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10d      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800629e:	4b7c      	ldr	r3, [pc, #496]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80062a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80062a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062b0:	4a77      	ldr	r2, [pc, #476]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80062b2:	430b      	orrs	r3, r1
 80062b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80062b8:	e003      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062be:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80062ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062d2:	2300      	movs	r3, #0
 80062d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80062d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80062dc:	460b      	mov	r3, r1
 80062de:	4313      	orrs	r3, r2
 80062e0:	d03d      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80062e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062ee:	d01b      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80062f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80062f4:	d814      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80062f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80062fa:	d017      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80062fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006300:	d80e      	bhi.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8006306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800630a:	d109      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800630c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006310:	3330      	adds	r3, #48	@ 0x30
 8006312:	4618      	mov	r0, r3
 8006314:	f004 fa54 	bl	800a7c0 <RCCEx_PLL3_Config>
 8006318:	4603      	mov	r3, r0
 800631a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800631e:	e008      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006326:	e004      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006328:	bf00      	nop
 800632a:	e002      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800632c:	bf00      	nop
 800632e:	e000      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006332:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10d      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800633a:	4b55      	ldr	r3, [pc, #340]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800633c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006340:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634c:	4a50      	ldr	r2, [pc, #320]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800634e:	430b      	orrs	r3, r1
 8006350:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006354:	e003      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006356:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800635a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800635e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006366:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800636a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800636e:	2300      	movs	r3, #0
 8006370:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006374:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006378:	460b      	mov	r3, r1
 800637a:	4313      	orrs	r3, r2
 800637c:	d03d      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800637e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006386:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800638a:	d01b      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800638c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006390:	d814      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006392:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006396:	d017      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8006398:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800639c:	d80e      	bhi.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d014      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80063a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063a6:	d109      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ac:	3330      	adds	r3, #48	@ 0x30
 80063ae:	4618      	mov	r0, r3
 80063b0:	f004 fa06 	bl	800a7c0 <RCCEx_PLL3_Config>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80063ba:	e008      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063c2:	e004      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80063c4:	bf00      	nop
 80063c6:	e002      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80063c8:	bf00      	nop
 80063ca:	e000      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80063cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10d      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80063d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80063d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063dc:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80063e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063e8:	4a29      	ldr	r2, [pc, #164]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80063ea:	430b      	orrs	r3, r1
 80063ec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80063f0:	e003      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063f6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006402:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006406:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800640a:	2300      	movs	r3, #0
 800640c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006410:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006414:	460b      	mov	r3, r1
 8006416:	4313      	orrs	r3, r2
 8006418:	d040      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800641a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800641e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006422:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006426:	d01b      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8006428:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800642c:	d814      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800642e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006432:	d017      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006434:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006438:	d80e      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d014      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800643e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006442:	d109      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006444:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006448:	3330      	adds	r3, #48	@ 0x30
 800644a:	4618      	mov	r0, r3
 800644c:	f004 f9b8 	bl	800a7c0 <RCCEx_PLL3_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8006456:	e008      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800645e:	e004      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006460:	bf00      	nop
 8006462:	e002      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006464:	bf00      	nop
 8006466:	e000      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800646a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800646e:	2b00      	cmp	r3, #0
 8006470:	d110      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006472:	4b07      	ldr	r3, [pc, #28]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006474:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006478:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800647c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006480:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006484:	4a02      	ldr	r2, [pc, #8]	@ (8006490 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006486:	430b      	orrs	r3, r1
 8006488:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800648c:	e006      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800648e:	bf00      	nop
 8006490:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006498:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800649c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	2100      	movs	r1, #0
 80064a6:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80064aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80064b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4313      	orrs	r3, r2
 80064ba:	d03d      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80064bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80064c8:	d01b      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80064ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80064ce:	d814      	bhi.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80064d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064d4:	d017      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80064d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064da:	d80e      	bhi.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d014      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80064e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064e4:	d109      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064ea:	3330      	adds	r3, #48	@ 0x30
 80064ec:	4618      	mov	r0, r3
 80064ee:	f004 f967 	bl	800a7c0 <RCCEx_PLL3_Config>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80064f8:	e008      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006500:	e004      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006502:	bf00      	nop
 8006504:	e002      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006506:	bf00      	nop
 8006508:	e000      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800650a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10d      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006514:	4bbe      	ldr	r3, [pc, #760]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006516:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800651a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800651e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006522:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006526:	4aba      	ldr	r2, [pc, #744]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006528:	430b      	orrs	r3, r1
 800652a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800652e:	e003      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006530:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006534:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006538:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006544:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006548:	2300      	movs	r3, #0
 800654a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800654e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006552:	460b      	mov	r3, r1
 8006554:	4313      	orrs	r3, r2
 8006556:	d035      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8006558:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800655c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006560:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006564:	d015      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8006566:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800656a:	d80e      	bhi.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800656c:	2b00      	cmp	r3, #0
 800656e:	d012      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8006570:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006574:	d109      	bne.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006576:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800657a:	3330      	adds	r3, #48	@ 0x30
 800657c:	4618      	mov	r0, r3
 800657e:	f004 f91f 	bl	800a7c0 <RCCEx_PLL3_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006588:	e006      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006590:	e002      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006592:	bf00      	nop
 8006594:	e000      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006598:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10d      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80065a0:	4b9b      	ldr	r3, [pc, #620]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065a6:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80065aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80065b2:	4a97      	ldr	r2, [pc, #604]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065b4:	430b      	orrs	r3, r1
 80065b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80065ba:	e003      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065c0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	2100      	movs	r1, #0
 80065ce:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80065d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065de:	460b      	mov	r3, r1
 80065e0:	4313      	orrs	r3, r2
 80065e2:	d00e      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80065e4:	4b8a      	ldr	r3, [pc, #552]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	4a89      	ldr	r2, [pc, #548]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065ee:	61d3      	str	r3, [r2, #28]
 80065f0:	4b87      	ldr	r3, [pc, #540]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065f2:	69d9      	ldr	r1, [r3, #28]
 80065f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80065fc:	4a84      	ldr	r2, [pc, #528]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065fe:	430b      	orrs	r3, r1
 8006600:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006602:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800660e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006612:	2300      	movs	r3, #0
 8006614:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006618:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800661c:	460b      	mov	r3, r1
 800661e:	4313      	orrs	r3, r2
 8006620:	d055      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006622:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006626:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800662a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800662e:	d031      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8006630:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006634:	d82a      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800663a:	d02d      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800663c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006640:	d824      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006642:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006646:	d029      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006648:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800664c:	d81e      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800664e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006652:	d011      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8006654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006658:	d818      	bhi.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d020      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800665e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006662:	d113      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006664:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006668:	3308      	adds	r3, #8
 800666a:	4618      	mov	r0, r3
 800666c:	f004 f810 	bl	800a690 <RCCEx_PLL2_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006676:	e014      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800667c:	3330      	adds	r3, #48	@ 0x30
 800667e:	4618      	mov	r0, r3
 8006680:	f004 f89e 	bl	800a7c0 <RCCEx_PLL3_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800668a:	e00a      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006692:	e006      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006694:	bf00      	nop
 8006696:	e004      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80066a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10d      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80066aa:	4b59      	ldr	r3, [pc, #356]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80066ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80066b0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80066b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066bc:	4a54      	ldr	r2, [pc, #336]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80066be:	430b      	orrs	r3, r1
 80066c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80066c4:	e003      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80066ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80066da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066de:	2300      	movs	r3, #0
 80066e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066e4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4313      	orrs	r3, r2
 80066ec:	d055      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80066ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80066f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80066fa:	d031      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80066fc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006700:	d82a      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006702:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006706:	d02d      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8006708:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800670c:	d824      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800670e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006712:	d029      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8006714:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006718:	d81e      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800671a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800671e:	d011      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8006720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006724:	d818      	bhi.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d020      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800672a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800672e:	d113      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006734:	3308      	adds	r3, #8
 8006736:	4618      	mov	r0, r3
 8006738:	f003 ffaa 	bl	800a690 <RCCEx_PLL2_Config>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006742:	e014      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006744:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006748:	3330      	adds	r3, #48	@ 0x30
 800674a:	4618      	mov	r0, r3
 800674c:	f004 f838 	bl	800a7c0 <RCCEx_PLL3_Config>
 8006750:	4603      	mov	r3, r0
 8006752:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006756:	e00a      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800675e:	e006      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006760:	bf00      	nop
 8006762:	e004      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006764:	bf00      	nop
 8006766:	e002      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800676c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10d      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006776:	4b26      	ldr	r3, [pc, #152]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006778:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800677c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006780:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006784:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006788:	4a21      	ldr	r2, [pc, #132]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800678a:	430b      	orrs	r3, r1
 800678c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006790:	e003      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006792:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006796:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800679a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	2100      	movs	r1, #0
 80067a4:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067b4:	460b      	mov	r3, r1
 80067b6:	4313      	orrs	r3, r2
 80067b8:	d057      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80067ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80067c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067c6:	d033      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80067c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067cc:	d82c      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80067ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067d2:	d02f      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80067d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80067d8:	d826      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80067da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067de:	d02b      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80067e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80067e4:	d820      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80067e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067ea:	d013      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80067ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067f0:	d81a      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d022      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80067f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067fa:	d115      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006800:	3308      	adds	r3, #8
 8006802:	4618      	mov	r0, r3
 8006804:	f003 ff44 	bl	800a690 <RCCEx_PLL2_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800680e:	e016      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8006810:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006814:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006818:	3330      	adds	r3, #48	@ 0x30
 800681a:	4618      	mov	r0, r3
 800681c:	f003 ffd0 	bl	800a7c0 <RCCEx_PLL3_Config>
 8006820:	4603      	mov	r3, r0
 8006822:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006826:	e00a      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800682e:	e006      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006830:	bf00      	nop
 8006832:	e004      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006834:	bf00      	nop
 8006836:	e002      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006838:	bf00      	nop
 800683a:	e000      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800683c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800683e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10d      	bne.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8006846:	4bbb      	ldr	r3, [pc, #748]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006848:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800684c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006850:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006854:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006858:	4ab6      	ldr	r2, [pc, #728]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800685a:	430b      	orrs	r3, r1
 800685c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006860:	e003      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006862:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006866:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800686a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800686e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006872:	2100      	movs	r1, #0
 8006874:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8006878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006880:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006884:	460b      	mov	r3, r1
 8006886:	4313      	orrs	r3, r2
 8006888:	d055      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800688a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800688e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006892:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006896:	d031      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006898:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800689c:	d82a      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800689e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068a2:	d02d      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80068a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068a8:	d824      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80068aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068ae:	d029      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80068b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068b4:	d81e      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80068b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068ba:	d011      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80068bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068c0:	d818      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d020      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80068c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068ca:	d113      	bne.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068d0:	3308      	adds	r3, #8
 80068d2:	4618      	mov	r0, r3
 80068d4:	f003 fedc 	bl	800a690 <RCCEx_PLL2_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80068de:	e014      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068e4:	3330      	adds	r3, #48	@ 0x30
 80068e6:	4618      	mov	r0, r3
 80068e8:	f003 ff6a 	bl	800a7c0 <RCCEx_PLL3_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80068f2:	e00a      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068fa:	e006      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80068fc:	bf00      	nop
 80068fe:	e004      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006900:	bf00      	nop
 8006902:	e002      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006904:	bf00      	nop
 8006906:	e000      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800690a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10d      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8006912:	4b88      	ldr	r3, [pc, #544]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006914:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006918:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 800691c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006924:	4a83      	ldr	r2, [pc, #524]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006926:	430b      	orrs	r3, r1
 8006928:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800692c:	e003      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006932:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8006936:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	2100      	movs	r1, #0
 8006940:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8006944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006948:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800694c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006950:	460b      	mov	r3, r1
 8006952:	4313      	orrs	r3, r2
 8006954:	d055      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8006956:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800695a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800695e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006962:	d031      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8006964:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006968:	d82a      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800696a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800696e:	d02d      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8006970:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006974:	d824      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006976:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800697a:	d029      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800697c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006980:	d81e      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006982:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006986:	d011      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8006988:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800698c:	d818      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d020      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8006992:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006996:	d113      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006998:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800699c:	3308      	adds	r3, #8
 800699e:	4618      	mov	r0, r3
 80069a0:	f003 fe76 	bl	800a690 <RCCEx_PLL2_Config>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80069aa:	e014      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069b0:	3330      	adds	r3, #48	@ 0x30
 80069b2:	4618      	mov	r0, r3
 80069b4:	f003 ff04 	bl	800a7c0 <RCCEx_PLL3_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80069be:	e00a      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069c6:	e006      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80069c8:	bf00      	nop
 80069ca:	e004      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80069cc:	bf00      	nop
 80069ce:	e002      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80069d0:	bf00      	nop
 80069d2:	e000      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80069d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10d      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80069de:	4b55      	ldr	r3, [pc, #340]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80069e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80069e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80069e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069f0:	4a50      	ldr	r2, [pc, #320]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80069f2:	430b      	orrs	r3, r1
 80069f4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80069f8:	e003      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006a02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8006a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a14:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a18:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	d055      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006a22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a2e:	d031      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a34:	d82a      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a3a:	d02d      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a40:	d824      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006a42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a46:	d029      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006a48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a4c:	d81e      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006a4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a52:	d011      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a58:	d818      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d020      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006a5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a62:	d113      	bne.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a68:	3308      	adds	r3, #8
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f003 fe10 	bl	800a690 <RCCEx_PLL2_Config>
 8006a70:	4603      	mov	r3, r0
 8006a72:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006a76:	e014      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a7c:	3330      	adds	r3, #48	@ 0x30
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f003 fe9e 	bl	800a7c0 <RCCEx_PLL3_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006a8a:	e00a      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a92:	e006      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006a94:	bf00      	nop
 8006a96:	e004      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006a98:	bf00      	nop
 8006a9a:	e002      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006a9c:	bf00      	nop
 8006a9e:	e000      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aa2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10d      	bne.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8006aaa:	4b22      	ldr	r3, [pc, #136]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006aac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006ab0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ab8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006abc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006abe:	430b      	orrs	r3, r1
 8006ac0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006ac4:	e003      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006aca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ace:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006ada:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ae4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4313      	orrs	r3, r2
 8006aec:	d055      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006af2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006af6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006afa:	d035      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006afc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b00:	d82e      	bhi.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006b02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b06:	d031      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8006b08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b0c:	d828      	bhi.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006b0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b12:	d01b      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006b14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b18:	d822      	bhi.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8006b1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b22:	d009      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006b24:	e01c      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b26:	4b03      	ldr	r3, [pc, #12]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2a:	4a02      	ldr	r2, [pc, #8]	@ (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b30:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006b32:	e01c      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006b34:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f003 fda6 	bl	800a690 <RCCEx_PLL2_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006b4a:	e010      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b50:	3330      	adds	r3, #48	@ 0x30
 8006b52:	4618      	mov	r0, r3
 8006b54:	f003 fe34 	bl	800a7c0 <RCCEx_PLL3_Config>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006b5e:	e006      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b66:	e002      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006b68:	bf00      	nop
 8006b6a:	e000      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10d      	bne.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006b76:	4bc3      	ldr	r3, [pc, #780]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006b80:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b88:	4abe      	ldr	r2, [pc, #760]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006b90:	e003      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b96:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006b9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006ba6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006baa:	2300      	movs	r3, #0
 8006bac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bb0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	d051      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bbe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006bc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bc6:	d033      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006bc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bcc:	d82c      	bhi.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006bce:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006bd2:	d02d      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006bd4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006bd8:	d826      	bhi.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006bda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bde:	d019      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8006be0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006be4:	d820      	bhi.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8006bea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006bee:	d007      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006bf0:	e01a      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf2:	4ba4      	ldr	r3, [pc, #656]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf6:	4aa3      	ldr	r2, [pc, #652]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bfc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006bfe:	e018      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c04:	3308      	adds	r3, #8
 8006c06:	4618      	mov	r0, r3
 8006c08:	f003 fd42 	bl	800a690 <RCCEx_PLL2_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006c12:	e00e      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c18:	3330      	adds	r3, #48	@ 0x30
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f003 fdd0 	bl	800a7c0 <RCCEx_PLL3_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006c26:	e004      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c2e:	e000      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10d      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006c3a:	4b92      	ldr	r3, [pc, #584]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c40:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8006c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006c4c:	4a8d      	ldr	r2, [pc, #564]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006c54:	e003      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c5a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006c5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c74:	460b      	mov	r3, r1
 8006c76:	4313      	orrs	r3, r2
 8006c78:	d032      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006c7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006c82:	2b05      	cmp	r3, #5
 8006c84:	d80f      	bhi.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d211      	bcs.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d911      	bls.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d109      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c96:	3308      	adds	r3, #8
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f003 fcf9 	bl	800a690 <RCCEx_PLL2_Config>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ca4:	e006      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006cac:	e002      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006cae:	bf00      	nop
 8006cb0:	e000      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10d      	bne.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006cbc:	4b71      	ldr	r3, [pc, #452]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006cbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cc2:	f023 0107 	bic.w	r1, r3, #7
 8006cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006cce:	4a6d      	ldr	r2, [pc, #436]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006cd6:	e003      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cdc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce8:	2100      	movs	r1, #0
 8006cea:	6739      	str	r1, [r7, #112]	@ 0x70
 8006cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf0:	677b      	str	r3, [r7, #116]	@ 0x74
 8006cf2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	d024      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006cfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d005      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d12:	e002      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006d14:	bf00      	nop
 8006d16:	e000      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10d      	bne.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006d22:	4b58      	ldr	r3, [pc, #352]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d28:	f023 0108 	bic.w	r1, r3, #8
 8006d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d34:	4a53      	ldr	r2, [pc, #332]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d36:	430b      	orrs	r3, r1
 8006d38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006d3c:	e003      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d42:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006d52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d54:	2300      	movs	r3, #0
 8006d56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d58:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f000 80b9 	beq.w	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006d64:	4b48      	ldr	r3, [pc, #288]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d68:	4a47      	ldr	r2, [pc, #284]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d70:	f7fb fbb2 	bl	80024d8 <HAL_GetTick>
 8006d74:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006d78:	e00b      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d7a:	f7fb fbad 	bl	80024d8 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d903      	bls.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d90:	e005      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006d92:	4b3d      	ldr	r3, [pc, #244]	@ (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0ed      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8006d9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f040 8093 	bne.w	8006ece <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006da8:	4b36      	ldr	r3, [pc, #216]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006db2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006db6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d023      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8006dbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dc2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8006dc6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d01b      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006dce:	4b2d      	ldr	r3, [pc, #180]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dd8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ddc:	4b29      	ldr	r3, [pc, #164]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006dde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006de2:	4a28      	ldr	r2, [pc, #160]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006de8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006dec:	4b25      	ldr	r3, [pc, #148]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006dee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006df2:	4a24      	ldr	r2, [pc, #144]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006df8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006dfc:	4a21      	ldr	r2, [pc, #132]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006dfe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006e02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e06:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d019      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e12:	f7fb fb61 	bl	80024d8 <HAL_GetTick>
 8006e16:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e1a:	e00d      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e1c:	f7fb fb5c 	bl	80024d8 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006e26:	1ad2      	subs	r2, r2, r3
 8006e28:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d903      	bls.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8006e36:	e006      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e38:	4b12      	ldr	r3, [pc, #72]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0ea      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006e46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d13a      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e52:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e5e:	d115      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006e60:	4b08      	ldr	r3, [pc, #32]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e6c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006e70:	091b      	lsrs	r3, r3, #4
 8006e72:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006e76:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006e7a:	4a02      	ldr	r2, [pc, #8]	@ (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	61d3      	str	r3, [r2, #28]
 8006e80:	e00a      	b.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006e82:	bf00      	nop
 8006e84:	44020c00 	.word	0x44020c00
 8006e88:	44020800 	.word	0x44020800
 8006e8c:	4b9f      	ldr	r3, [pc, #636]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	4a9e      	ldr	r2, [pc, #632]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006e92:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e96:	61d3      	str	r3, [r2, #28]
 8006e98:	4b9c      	ldr	r3, [pc, #624]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e9e:	4a9b      	ldr	r2, [pc, #620]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ea0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ea4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006ea8:	4b98      	ldr	r3, [pc, #608]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006eaa:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006eae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eb2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eba:	4a94      	ldr	r2, [pc, #592]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ec4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ec8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8006ecc:	e003      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ece:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ed2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006ee2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ee8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006eec:	460b      	mov	r3, r1
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	d035      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006ef2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ef6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006efa:	2b30      	cmp	r3, #48	@ 0x30
 8006efc:	d014      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006efe:	2b30      	cmp	r3, #48	@ 0x30
 8006f00:	d80e      	bhi.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	d012      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006f06:	2b20      	cmp	r3, #32
 8006f08:	d80a      	bhi.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d010      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006f0e:	2b10      	cmp	r3, #16
 8006f10:	d106      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f12:	4b7e      	ldr	r3, [pc, #504]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f16:	4a7d      	ldr	r2, [pc, #500]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f1c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f1e:	e008      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f26:	e004      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006f28:	bf00      	nop
 8006f2a:	e002      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006f2c:	bf00      	nop
 8006f2e:	e000      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10d      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006f3a:	4b74      	ldr	r3, [pc, #464]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f40:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f48:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006f4c:	4a6f      	ldr	r2, [pc, #444]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006f54:	e003      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f5a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006f6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f70:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006f74:	460b      	mov	r3, r1
 8006f76:	4313      	orrs	r3, r2
 8006f78:	d033      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006f7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f7e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006f86:	2b40      	cmp	r3, #64	@ 0x40
 8006f88:	d007      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006f8a:	e010      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f8c:	4b5f      	ldr	r3, [pc, #380]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f90:	4a5e      	ldr	r2, [pc, #376]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f96:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006f98:	e00d      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f003 fb75 	bl	800a690 <RCCEx_PLL2_Config>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006fac:	e003      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10d      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006fbe:	4b53      	ldr	r3, [pc, #332]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fc4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006fc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fcc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006fd0:	4a4e      	ldr	r2, [pc, #312]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fd2:	430b      	orrs	r3, r1
 8006fd4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006fd8:	e003      	b.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fde:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006fe2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ff4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	d033      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006ffe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007002:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800700a:	2b80      	cmp	r3, #128	@ 0x80
 800700c:	d007      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800700e:	e010      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007010:	4b3e      	ldr	r3, [pc, #248]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	4a3d      	ldr	r2, [pc, #244]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800701a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800701c:	e00d      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800701e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007022:	3308      	adds	r3, #8
 8007024:	4618      	mov	r0, r3
 8007026:	f003 fb33 	bl	800a690 <RCCEx_PLL2_Config>
 800702a:	4603      	mov	r3, r0
 800702c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007030:	e003      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800703a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10d      	bne.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8007042:	4b32      	ldr	r3, [pc, #200]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007044:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007048:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800704c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007050:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007054:	4a2d      	ldr	r2, [pc, #180]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007056:	430b      	orrs	r3, r1
 8007058:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800705c:	e003      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007062:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007066:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007074:	2300      	movs	r3, #0
 8007076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007078:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800707c:	460b      	mov	r3, r1
 800707e:	4313      	orrs	r3, r2
 8007080:	d04a      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8007082:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800708a:	2b04      	cmp	r3, #4
 800708c:	d827      	bhi.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800708e:	a201      	add	r2, pc, #4	@ (adr r2, 8007094 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070a9 	.word	0x080070a9
 8007098:	080070b7 	.word	0x080070b7
 800709c:	080070cb 	.word	0x080070cb
 80070a0:	080070e7 	.word	0x080070e7
 80070a4:	080070e7 	.word	0x080070e7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a8:	4b18      	ldr	r3, [pc, #96]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ac:	4a17      	ldr	r2, [pc, #92]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070b2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80070b4:	e018      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070ba:	3308      	adds	r3, #8
 80070bc:	4618      	mov	r0, r3
 80070be:	f003 fae7 	bl	800a690 <RCCEx_PLL2_Config>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80070c8:	e00e      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070ce:	3330      	adds	r3, #48	@ 0x30
 80070d0:	4618      	mov	r0, r3
 80070d2:	f003 fb75 	bl	800a7c0 <RCCEx_PLL3_Config>
 80070d6:	4603      	mov	r3, r0
 80070d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80070dc:	e004      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80070e4:	e000      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80070e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10f      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80070f0:	4b06      	ldr	r3, [pc, #24]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070f6:	f023 0107 	bic.w	r1, r3, #7
 80070fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007102:	4a02      	ldr	r2, [pc, #8]	@ (800710c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007104:	430b      	orrs	r3, r1
 8007106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800710a:	e005      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800710c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007110:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007114:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007118:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007124:	643b      	str	r3, [r7, #64]	@ 0x40
 8007126:	2300      	movs	r3, #0
 8007128:	647b      	str	r3, [r7, #68]	@ 0x44
 800712a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800712e:	460b      	mov	r3, r1
 8007130:	4313      	orrs	r3, r2
 8007132:	f000 8081 	beq.w	8007238 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8007136:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800713a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800713e:	2b20      	cmp	r3, #32
 8007140:	d85f      	bhi.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8007142:	a201      	add	r2, pc, #4	@ (adr r2, 8007148 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8007144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007148:	080071cd 	.word	0x080071cd
 800714c:	08007203 	.word	0x08007203
 8007150:	08007203 	.word	0x08007203
 8007154:	08007203 	.word	0x08007203
 8007158:	08007203 	.word	0x08007203
 800715c:	08007203 	.word	0x08007203
 8007160:	08007203 	.word	0x08007203
 8007164:	08007203 	.word	0x08007203
 8007168:	080071db 	.word	0x080071db
 800716c:	08007203 	.word	0x08007203
 8007170:	08007203 	.word	0x08007203
 8007174:	08007203 	.word	0x08007203
 8007178:	08007203 	.word	0x08007203
 800717c:	08007203 	.word	0x08007203
 8007180:	08007203 	.word	0x08007203
 8007184:	08007203 	.word	0x08007203
 8007188:	080071ef 	.word	0x080071ef
 800718c:	08007203 	.word	0x08007203
 8007190:	08007203 	.word	0x08007203
 8007194:	08007203 	.word	0x08007203
 8007198:	08007203 	.word	0x08007203
 800719c:	08007203 	.word	0x08007203
 80071a0:	08007203 	.word	0x08007203
 80071a4:	08007203 	.word	0x08007203
 80071a8:	0800720b 	.word	0x0800720b
 80071ac:	08007203 	.word	0x08007203
 80071b0:	08007203 	.word	0x08007203
 80071b4:	08007203 	.word	0x08007203
 80071b8:	08007203 	.word	0x08007203
 80071bc:	08007203 	.word	0x08007203
 80071c0:	08007203 	.word	0x08007203
 80071c4:	08007203 	.word	0x08007203
 80071c8:	0800720b 	.word	0x0800720b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071cc:	4bab      	ldr	r3, [pc, #684]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	4aaa      	ldr	r2, [pc, #680]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80071d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80071d8:	e018      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071de:	3308      	adds	r3, #8
 80071e0:	4618      	mov	r0, r3
 80071e2:	f003 fa55 	bl	800a690 <RCCEx_PLL2_Config>
 80071e6:	4603      	mov	r3, r0
 80071e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80071ec:	e00e      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071f2:	3330      	adds	r3, #48	@ 0x30
 80071f4:	4618      	mov	r0, r3
 80071f6:	f003 fae3 	bl	800a7c0 <RCCEx_PLL3_Config>
 80071fa:	4603      	mov	r3, r0
 80071fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007200:	e004      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007208:	e000      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800720a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800720c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10d      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007214:	4b99      	ldr	r3, [pc, #612]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800721a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800721e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007222:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007226:	4a95      	ldr	r2, [pc, #596]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007228:	430b      	orrs	r3, r1
 800722a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800722e:	e003      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007230:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007234:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007238:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007244:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007246:	2300      	movs	r3, #0
 8007248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800724a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800724e:	460b      	mov	r3, r1
 8007250:	4313      	orrs	r3, r2
 8007252:	d04e      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007254:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800725c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007260:	d02e      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8007262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007266:	d827      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007268:	2bc0      	cmp	r3, #192	@ 0xc0
 800726a:	d02b      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800726c:	2bc0      	cmp	r3, #192	@ 0xc0
 800726e:	d823      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007270:	2b80      	cmp	r3, #128	@ 0x80
 8007272:	d017      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8007274:	2b80      	cmp	r3, #128	@ 0x80
 8007276:	d81f      	bhi.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800727c:	2b40      	cmp	r3, #64	@ 0x40
 800727e:	d007      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8007280:	e01a      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007282:	4b7e      	ldr	r3, [pc, #504]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007286:	4a7d      	ldr	r2, [pc, #500]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800728c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800728e:	e01a      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007290:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007294:	3308      	adds	r3, #8
 8007296:	4618      	mov	r0, r3
 8007298:	f003 f9fa 	bl	800a690 <RCCEx_PLL2_Config>
 800729c:	4603      	mov	r3, r0
 800729e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80072a2:	e010      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072a8:	3330      	adds	r3, #48	@ 0x30
 80072aa:	4618      	mov	r0, r3
 80072ac:	f003 fa88 	bl	800a7c0 <RCCEx_PLL3_Config>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80072b6:	e006      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80072be:	e002      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80072c0:	bf00      	nop
 80072c2:	e000      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80072c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10d      	bne.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80072ce:	4b6b      	ldr	r3, [pc, #428]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80072d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80072d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072e0:	4a66      	ldr	r2, [pc, #408]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80072e2:	430b      	orrs	r3, r1
 80072e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80072e8:	e003      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80072f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80072fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007300:	2300      	movs	r3, #0
 8007302:	637b      	str	r3, [r7, #52]	@ 0x34
 8007304:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007308:	460b      	mov	r3, r1
 800730a:	4313      	orrs	r3, r2
 800730c:	d055      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800730e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007312:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007316:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800731a:	d031      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800731c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007320:	d82a      	bhi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007322:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007326:	d02d      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8007328:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800732c:	d824      	bhi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800732e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007332:	d029      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8007334:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007338:	d81e      	bhi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800733a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800733e:	d011      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8007340:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007344:	d818      	bhi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d020      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800734a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800734e:	d113      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007350:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007354:	3308      	adds	r3, #8
 8007356:	4618      	mov	r0, r3
 8007358:	f003 f99a 	bl	800a690 <RCCEx_PLL2_Config>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007362:	e014      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007368:	3330      	adds	r3, #48	@ 0x30
 800736a:	4618      	mov	r0, r3
 800736c:	f003 fa28 	bl	800a7c0 <RCCEx_PLL3_Config>
 8007370:	4603      	mov	r3, r0
 8007372:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007376:	e00a      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800737e:	e006      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007380:	bf00      	nop
 8007382:	e004      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007384:	bf00      	nop
 8007386:	e002      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007388:	bf00      	nop
 800738a:	e000      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800738c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800738e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10d      	bne.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007396:	4b39      	ldr	r3, [pc, #228]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800739c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80073a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80073a8:	4a34      	ldr	r2, [pc, #208]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80073aa:	430b      	orrs	r3, r1
 80073ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80073b0:	e003      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80073ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80073c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073c8:	2300      	movs	r3, #0
 80073ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80073d0:	460b      	mov	r3, r1
 80073d2:	4313      	orrs	r3, r2
 80073d4:	d058      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80073d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80073e2:	d031      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80073e4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80073e8:	d82a      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80073ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073ee:	d02d      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80073f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073f4:	d824      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80073f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80073fa:	d029      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80073fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007400:	d81e      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007406:	d011      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8007408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800740c:	d818      	bhi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800740e:	2b00      	cmp	r3, #0
 8007410:	d020      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8007412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007416:	d113      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800741c:	3308      	adds	r3, #8
 800741e:	4618      	mov	r0, r3
 8007420:	f003 f936 	bl	800a690 <RCCEx_PLL2_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800742a:	e014      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800742c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007430:	3330      	adds	r3, #48	@ 0x30
 8007432:	4618      	mov	r0, r3
 8007434:	f003 f9c4 	bl	800a7c0 <RCCEx_PLL3_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800743e:	e00a      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007446:	e006      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007448:	bf00      	nop
 800744a:	e004      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800744c:	bf00      	nop
 800744e:	e002      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007450:	bf00      	nop
 8007452:	e000      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007456:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800745a:	2b00      	cmp	r3, #0
 800745c:	d110      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800745e:	4b07      	ldr	r3, [pc, #28]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007464:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007468:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800746c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007470:	4902      	ldr	r1, [pc, #8]	@ (800747c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007478:	e006      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800747a:	bf00      	nop
 800747c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007480:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007484:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007488:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	2100      	movs	r1, #0
 8007492:	6239      	str	r1, [r7, #32]
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	627b      	str	r3, [r7, #36]	@ 0x24
 800749a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800749e:	460b      	mov	r3, r1
 80074a0:	4313      	orrs	r3, r2
 80074a2:	d055      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80074a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074ac:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80074b0:	d031      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80074b2:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80074b6:	d82a      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80074b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074bc:	d02d      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80074be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074c2:	d824      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80074c4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80074c8:	d029      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80074ca:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80074ce:	d81e      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80074d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d4:	d011      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80074d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074da:	d818      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d020      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80074e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074e4:	d113      	bne.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074ea:	3308      	adds	r3, #8
 80074ec:	4618      	mov	r0, r3
 80074ee:	f003 f8cf 	bl	800a690 <RCCEx_PLL2_Config>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80074f8:	e014      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074fe:	3330      	adds	r3, #48	@ 0x30
 8007500:	4618      	mov	r0, r3
 8007502:	f003 f95d 	bl	800a7c0 <RCCEx_PLL3_Config>
 8007506:	4603      	mov	r3, r0
 8007508:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800750c:	e00a      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007514:	e006      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007516:	bf00      	nop
 8007518:	e004      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800751a:	bf00      	nop
 800751c:	e002      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800751e:	bf00      	nop
 8007520:	e000      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007524:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10d      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800752c:	4b88      	ldr	r3, [pc, #544]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800752e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007532:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8007536:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800753a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800753e:	4984      	ldr	r1, [pc, #528]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007546:	e003      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007548:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800754c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007550:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	2100      	movs	r1, #0
 800755a:	61b9      	str	r1, [r7, #24]
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	61fb      	str	r3, [r7, #28]
 8007562:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007566:	460b      	mov	r3, r1
 8007568:	4313      	orrs	r3, r2
 800756a:	d03d      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800756c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007570:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007574:	2b03      	cmp	r3, #3
 8007576:	d81c      	bhi.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8007578:	a201      	add	r2, pc, #4	@ (adr r2, 8007580 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800757a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757e:	bf00      	nop
 8007580:	080075bb 	.word	0x080075bb
 8007584:	08007591 	.word	0x08007591
 8007588:	0800759f 	.word	0x0800759f
 800758c:	080075bb 	.word	0x080075bb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007590:	4b6f      	ldr	r3, [pc, #444]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007594:	4a6e      	ldr	r2, [pc, #440]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800759a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800759c:	e00e      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800759e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075a2:	3308      	adds	r3, #8
 80075a4:	4618      	mov	r0, r3
 80075a6:	f003 f873 	bl	800a690 <RCCEx_PLL2_Config>
 80075aa:	4603      	mov	r3, r0
 80075ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80075b0:	e004      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075b8:	e000      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80075ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10d      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80075c4:	4b62      	ldr	r3, [pc, #392]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80075c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075ca:	f023 0203 	bic.w	r2, r3, #3
 80075ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80075d6:	495e      	ldr	r1, [pc, #376]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80075de:	e003      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	2100      	movs	r1, #0
 80075f2:	6139      	str	r1, [r7, #16]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80075fe:	460b      	mov	r3, r1
 8007600:	4313      	orrs	r3, r2
 8007602:	d03a      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007604:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007608:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800760c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007610:	d00e      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8007612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007616:	d815      	bhi.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8007618:	2b00      	cmp	r3, #0
 800761a:	d017      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800761c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007620:	d110      	bne.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007622:	4b4b      	ldr	r3, [pc, #300]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007626:	4a4a      	ldr	r2, [pc, #296]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800762c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800762e:	e00e      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007630:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007634:	3308      	adds	r3, #8
 8007636:	4618      	mov	r0, r3
 8007638:	f003 f82a 	bl	800a690 <RCCEx_PLL2_Config>
 800763c:	4603      	mov	r3, r0
 800763e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007642:	e004      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800764a:	e000      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800764c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800764e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10d      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007656:	4b3e      	ldr	r3, [pc, #248]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800765c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007660:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007664:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007668:	4939      	ldr	r1, [pc, #228]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800766a:	4313      	orrs	r3, r2
 800766c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007670:	e003      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007672:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007676:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800767a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	2100      	movs	r1, #0
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	f003 0310 	and.w	r3, r3, #16
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007690:	460b      	mov	r3, r1
 8007692:	4313      	orrs	r3, r2
 8007694:	d038      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007696:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800769a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800769e:	2b30      	cmp	r3, #48	@ 0x30
 80076a0:	d01b      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80076a2:	2b30      	cmp	r3, #48	@ 0x30
 80076a4:	d815      	bhi.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80076a6:	2b10      	cmp	r3, #16
 80076a8:	d002      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	d007      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80076ae:	e010      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b0:	4b27      	ldr	r3, [pc, #156]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b4:	4a26      	ldr	r2, [pc, #152]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80076bc:	e00e      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076c2:	3330      	adds	r3, #48	@ 0x30
 80076c4:	4618      	mov	r0, r3
 80076c6:	f003 f87b 	bl	800a7c0 <RCCEx_PLL3_Config>
 80076ca:	4603      	mov	r3, r0
 80076cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80076d0:	e004      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076d8:	e000      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80076da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10d      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80076e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80076ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80076f6:	4916      	ldr	r1, [pc, #88]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80076fe:	e003      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007700:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007704:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007708:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	2100      	movs	r1, #0
 8007712:	6039      	str	r1, [r7, #0]
 8007714:	f003 0308 	and.w	r3, r3, #8
 8007718:	607b      	str	r3, [r7, #4]
 800771a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800771e:	460b      	mov	r3, r1
 8007720:	4313      	orrs	r3, r2
 8007722:	d00c      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8007724:	4b0a      	ldr	r3, [pc, #40]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007726:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800772a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800772e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007732:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8007736:	4906      	ldr	r1, [pc, #24]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007738:	4313      	orrs	r3, r2
 800773a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800773e:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8007742:	4618      	mov	r0, r3
 8007744:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8007748:	46bd      	mov	sp, r7
 800774a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800774e:	bf00      	nop
 8007750:	44020c00 	.word	0x44020c00

08007754 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007754:	b480      	push	{r7}
 8007756:	b08b      	sub	sp, #44	@ 0x2c
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800775c:	4bae      	ldr	r3, [pc, #696]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800775e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007764:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007766:	4bac      	ldr	r3, [pc, #688]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776a:	f003 0303 	and.w	r3, r3, #3
 800776e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007770:	4ba9      	ldr	r3, [pc, #676]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007774:	0a1b      	lsrs	r3, r3, #8
 8007776:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800777a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800777c:	4ba6      	ldr	r3, [pc, #664]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800777e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007780:	091b      	lsrs	r3, r3, #4
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007788:	4ba3      	ldr	r3, [pc, #652]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800778a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778c:	08db      	lsrs	r3, r3, #3
 800778e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	fb02 f303 	mul.w	r3, r2, r3
 8007798:	ee07 3a90 	vmov	s15, r3
 800779c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 8126 	beq.w	80079f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d053      	beq.n	800785a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d86f      	bhi.n	8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d003      	beq.n	80077c6 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d02b      	beq.n	800781c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80077c4:	e068      	b.n	8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077c6:	4b94      	ldr	r3, [pc, #592]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	08db      	lsrs	r3, r3, #3
 80077cc:	f003 0303 	and.w	r3, r3, #3
 80077d0:	4a92      	ldr	r2, [pc, #584]	@ (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80077d2:	fa22 f303 	lsr.w	r3, r2, r3
 80077d6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	ee07 3a90 	vmov	s15, r3
 80077e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077fa:	ed97 6a04 	vldr	s12, [r7, #16]
 80077fe:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800780a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800780e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007816:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800781a:	e068      	b.n	80078ee <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007826:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800782a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	ee07 3a90 	vmov	s15, r3
 8007834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007838:	ed97 6a04 	vldr	s12, [r7, #16]
 800783c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007840:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007848:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800784c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007854:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007858:	e049      	b.n	80078ee <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	ee07 3a90 	vmov	s15, r3
 8007860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007864:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8007868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007876:	ed97 6a04 	vldr	s12, [r7, #16]
 800787a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800787e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800788a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007892:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007896:	e02a      	b.n	80078ee <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007898:	4b5f      	ldr	r3, [pc, #380]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	08db      	lsrs	r3, r3, #3
 800789e:	f003 0303 	and.w	r3, r3, #3
 80078a2:	4a5e      	ldr	r2, [pc, #376]	@ (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80078a4:	fa22 f303 	lsr.w	r3, r2, r3
 80078a8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	ee07 3a90 	vmov	s15, r3
 80078b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	ee07 3a90 	vmov	s15, r3
 80078c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80078d0:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80078d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80078ec:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078ee:	4b4a      	ldr	r3, [pc, #296]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078fa:	d121      	bne.n	8007940 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80078fc:	4b46      	ldr	r3, [pc, #280]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80078fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d017      	beq.n	8007938 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007908:	4b43      	ldr	r3, [pc, #268]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800790a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800790c:	0a5b      	lsrs	r3, r3, #9
 800790e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800791a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800791e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007922:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800792a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800792e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	e006      	b.n	8007946 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	e002      	b.n	8007946 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007946:	4b34      	ldr	r3, [pc, #208]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800794e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007952:	d121      	bne.n	8007998 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007954:	4b30      	ldr	r3, [pc, #192]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d017      	beq.n	8007990 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007960:	4b2d      	ldr	r3, [pc, #180]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007964:	0c1b      	lsrs	r3, r3, #16
 8007966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007972:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007976:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800797a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800797e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007986:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	605a      	str	r2, [r3, #4]
 800798e:	e006      	b.n	800799e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	605a      	str	r2, [r3, #4]
 8007996:	e002      	b.n	800799e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800799e:	4b1e      	ldr	r3, [pc, #120]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079aa:	d121      	bne.n	80079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80079ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d017      	beq.n	80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80079b8:	4b17      	ldr	r3, [pc, #92]	@ (8007a18 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079bc:	0e1b      	lsrs	r3, r3, #24
 80079be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80079ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80079d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80079d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079de:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80079e6:	e010      	b.n	8007a0a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	609a      	str	r2, [r3, #8]
}
 80079ee:	e00c      	b.n	8007a0a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	609a      	str	r2, [r3, #8]
}
 80079f6:	e008      	b.n	8007a0a <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	609a      	str	r2, [r3, #8]
}
 8007a0a:	bf00      	nop
 8007a0c:	372c      	adds	r7, #44	@ 0x2c
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	44020c00 	.word	0x44020c00
 8007a1c:	03d09000 	.word	0x03d09000
 8007a20:	46000000 	.word	0x46000000
 8007a24:	4a742400 	.word	0x4a742400
 8007a28:	4af42400 	.word	0x4af42400

08007a2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b08b      	sub	sp, #44	@ 0x2c
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007a34:	4bae      	ldr	r3, [pc, #696]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007a3e:	4bac      	ldr	r3, [pc, #688]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007a48:	4ba9      	ldr	r3, [pc, #676]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4c:	0a1b      	lsrs	r3, r3, #8
 8007a4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a52:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007a54:	4ba6      	ldr	r3, [pc, #664]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a58:	091b      	lsrs	r3, r3, #4
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007a60:	4ba3      	ldr	r3, [pc, #652]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a64:	08db      	lsrs	r3, r3, #3
 8007a66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	fb02 f303 	mul.w	r3, r2, r3
 8007a70:	ee07 3a90 	vmov	s15, r3
 8007a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a78:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 8126 	beq.w	8007cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d053      	beq.n	8007b32 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d86f      	bhi.n	8007b70 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d003      	beq.n	8007a9e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d02b      	beq.n	8007af4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007a9c:	e068      	b.n	8007b70 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a9e:	4b94      	ldr	r3, [pc, #592]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	08db      	lsrs	r3, r3, #3
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	4a92      	ldr	r2, [pc, #584]	@ (8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8007aae:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	ee07 3a90 	vmov	s15, r3
 8007ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad2:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ad6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007af2:	e068      	b.n	8007bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	ee07 3a90 	vmov	s15, r3
 8007afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afe:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007cfc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	ee07 3a90 	vmov	s15, r3
 8007b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b10:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b14:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007b18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007b30:	e049      	b.n	8007bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	ee07 3a90 	vmov	s15, r3
 8007b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8007b40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	ee07 3a90 	vmov	s15, r3
 8007b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b52:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b6a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007b6e:	e02a      	b.n	8007bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b70:	4b5f      	ldr	r3, [pc, #380]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	08db      	lsrs	r3, r3, #3
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	4a5e      	ldr	r2, [pc, #376]	@ (8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b80:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	ee07 3a90 	vmov	s15, r3
 8007b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	ee07 3a90 	vmov	s15, r3
 8007b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	ee07 3a90 	vmov	s15, r3
 8007ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba4:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ba8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007bc4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bd2:	d121      	bne.n	8007c18 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007bd4:	4b46      	ldr	r3, [pc, #280]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d017      	beq.n	8007c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007be0:	4b43      	ldr	r3, [pc, #268]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007be4:	0a5b      	lsrs	r3, r3, #9
 8007be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007bf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007bfa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c06:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e006      	b.n	8007c1e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	e002      	b.n	8007c1e <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c1e:	4b34      	ldr	r3, [pc, #208]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c2a:	d121      	bne.n	8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007c2c:	4b30      	ldr	r3, [pc, #192]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d017      	beq.n	8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c38:	4b2d      	ldr	r3, [pc, #180]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c3c:	0c1b      	lsrs	r3, r3, #16
 8007c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007c4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007c52:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	605a      	str	r2, [r3, #4]
 8007c66:	e006      	b.n	8007c76 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	e002      	b.n	8007c76 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c76:	4b1e      	ldr	r3, [pc, #120]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c82:	d121      	bne.n	8007cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007c84:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d017      	beq.n	8007cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c90:	4b17      	ldr	r3, [pc, #92]	@ (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c94:	0e1b      	lsrs	r3, r3, #24
 8007c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007ca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007caa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cb6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007cbe:	e010      	b.n	8007ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	609a      	str	r2, [r3, #8]
}
 8007cc6:	e00c      	b.n	8007ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	609a      	str	r2, [r3, #8]
}
 8007cce:	e008      	b.n	8007ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	609a      	str	r2, [r3, #8]
}
 8007ce2:	bf00      	nop
 8007ce4:	372c      	adds	r7, #44	@ 0x2c
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	44020c00 	.word	0x44020c00
 8007cf4:	03d09000 	.word	0x03d09000
 8007cf8:	46000000 	.word	0x46000000
 8007cfc:	4a742400 	.word	0x4a742400
 8007d00:	4af42400 	.word	0x4af42400

08007d04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b08b      	sub	sp, #44	@ 0x2c
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007d0c:	4bae      	ldr	r3, [pc, #696]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d14:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007d16:	4bac      	ldr	r3, [pc, #688]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007d20:	4ba9      	ldr	r3, [pc, #676]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d24:	0a1b      	lsrs	r3, r3, #8
 8007d26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d2a:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007d2c:	4ba6      	ldr	r3, [pc, #664]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d30:	091b      	lsrs	r3, r3, #4
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007d38:	4ba3      	ldr	r3, [pc, #652]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d3c:	08db      	lsrs	r3, r3, #3
 8007d3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	fb02 f303 	mul.w	r3, r2, r3
 8007d48:	ee07 3a90 	vmov	s15, r3
 8007d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d50:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 8126 	beq.w	8007fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d053      	beq.n	8007e0a <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d86f      	bhi.n	8007e48 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d003      	beq.n	8007d76 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d02b      	beq.n	8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007d74:	e068      	b.n	8007e48 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d76:	4b94      	ldr	r3, [pc, #592]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	08db      	lsrs	r3, r3, #3
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	4a92      	ldr	r2, [pc, #584]	@ (8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007d82:	fa22 f303 	lsr.w	r3, r2, r3
 8007d86:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	ee07 3a90 	vmov	s15, r3
 8007d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	ee07 3a90 	vmov	s15, r3
 8007d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	ee07 3a90 	vmov	s15, r3
 8007da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007daa:	ed97 6a04 	vldr	s12, [r7, #16]
 8007dae:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dc6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007dca:	e068      	b.n	8007e9e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	ee07 3a90 	vmov	s15, r3
 8007dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	ee07 3a90 	vmov	s15, r3
 8007de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007de8:	ed97 6a04 	vldr	s12, [r7, #16]
 8007dec:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007df8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e04:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007e08:	e049      	b.n	8007e9e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	ee07 3a90 	vmov	s15, r3
 8007e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e14:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007e18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e26:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e2a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007e46:	e02a      	b.n	8007e9e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e48:	4b5f      	ldr	r3, [pc, #380]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	08db      	lsrs	r3, r3, #3
 8007e4e:	f003 0303 	and.w	r3, r3, #3
 8007e52:	4a5e      	ldr	r2, [pc, #376]	@ (8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007e54:	fa22 f303 	lsr.w	r3, r2, r3
 8007e58:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	ee07 3a90 	vmov	s15, r3
 8007e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	ee07 3a90 	vmov	s15, r3
 8007e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	ee07 3a90 	vmov	s15, r3
 8007e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e80:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e98:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007e9c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ea6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eaa:	d121      	bne.n	8007ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007eac:	4b46      	ldr	r3, [pc, #280]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d017      	beq.n	8007ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007eb8:	4b43      	ldr	r3, [pc, #268]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ebc:	0a5b      	lsrs	r3, r3, #9
 8007ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ec2:	ee07 3a90 	vmov	s15, r3
 8007ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007eca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ece:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007ed2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ede:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	e006      	b.n	8007ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	e002      	b.n	8007ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ef6:	4b34      	ldr	r3, [pc, #208]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f02:	d121      	bne.n	8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007f04:	4b30      	ldr	r3, [pc, #192]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d017      	beq.n	8007f40 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f10:	4b2d      	ldr	r3, [pc, #180]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f14:	0c1b      	lsrs	r3, r3, #16
 8007f16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007f22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f26:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007f2a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f36:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	605a      	str	r2, [r3, #4]
 8007f3e:	e006      	b.n	8007f4e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	605a      	str	r2, [r3, #4]
 8007f46:	e002      	b.n	8007f4e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f5a:	d121      	bne.n	8007fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d017      	beq.n	8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f68:	4b17      	ldr	r3, [pc, #92]	@ (8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f6c:	0e1b      	lsrs	r3, r3, #24
 8007f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f72:	ee07 3a90 	vmov	s15, r3
 8007f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007f7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007f82:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f8e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007f96:	e010      	b.n	8007fba <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	609a      	str	r2, [r3, #8]
}
 8007f9e:	e00c      	b.n	8007fba <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	609a      	str	r2, [r3, #8]
}
 8007fa6:	e008      	b.n	8007fba <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	609a      	str	r2, [r3, #8]
}
 8007fba:	bf00      	nop
 8007fbc:	372c      	adds	r7, #44	@ 0x2c
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	44020c00 	.word	0x44020c00
 8007fcc:	03d09000 	.word	0x03d09000
 8007fd0:	46000000 	.word	0x46000000
 8007fd4:	4a742400 	.word	0x4a742400
 8007fd8:	4af42400 	.word	0x4af42400

08007fdc <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007fdc:	b590      	push	{r4, r7, lr}
 8007fde:	b08f      	sub	sp, #60	@ 0x3c
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fea:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007fee:	4321      	orrs	r1, r4
 8007ff0:	d150      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007ff2:	4b26      	ldr	r3, [pc, #152]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ff8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ffc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007ffe:	4b23      	ldr	r3, [pc, #140]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b02      	cmp	r3, #2
 800800a:	d108      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800800c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008012:	d104      	bne.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008014:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008018:	637b      	str	r3, [r7, #52]	@ 0x34
 800801a:	f002 bb2a 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800801e:	4b1b      	ldr	r3, [pc, #108]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008028:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800802c:	d108      	bne.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008034:	d104      	bne.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8008036:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800803a:	637b      	str	r3, [r7, #52]	@ 0x34
 800803c:	f002 bb19 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008040:	4b12      	ldr	r3, [pc, #72]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008048:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800804c:	d119      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008054:	d115      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008056:	4b0d      	ldr	r3, [pc, #52]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800805e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008062:	d30a      	bcc.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8008064:	4b09      	ldr	r3, [pc, #36]	@ (800808c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	0a1b      	lsrs	r3, r3, #8
 800806a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800806e:	4a08      	ldr	r2, [pc, #32]	@ (8008090 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008070:	fbb2 f3f3 	udiv	r3, r2, r3
 8008074:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008076:	f002 bafc 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800807e:	f002 baf8 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	637b      	str	r3, [r7, #52]	@ 0x34
 8008086:	f002 baf4 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800808a:	bf00      	nop
 800808c:	44020c00 	.word	0x44020c00
 8008090:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8008094:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008098:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800809c:	ea50 0104 	orrs.w	r1, r0, r4
 80080a0:	f001 8275 	beq.w	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80080a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080a8:	2801      	cmp	r0, #1
 80080aa:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80080ae:	f082 82dd 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080b6:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80080ba:	ea50 0104 	orrs.w	r1, r0, r4
 80080be:	f001 816c 	beq.w	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80080c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080c6:	2801      	cmp	r0, #1
 80080c8:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80080cc:	f082 82ce 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080d4:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80080d8:	ea50 0104 	orrs.w	r1, r0, r4
 80080dc:	f001 8602 	beq.w	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80080e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080e4:	2801      	cmp	r0, #1
 80080e6:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80080ea:	f082 82bf 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080f2:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80080f6:	ea50 0104 	orrs.w	r1, r0, r4
 80080fa:	f001 854c 	beq.w	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80080fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008102:	2801      	cmp	r0, #1
 8008104:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8008108:	f082 82b0 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800810c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008110:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8008114:	ea50 0104 	orrs.w	r1, r0, r4
 8008118:	f001 849e 	beq.w	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800811c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008120:	2801      	cmp	r0, #1
 8008122:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8008126:	f082 82a1 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800812a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800812e:	f1a1 0420 	sub.w	r4, r1, #32
 8008132:	ea50 0104 	orrs.w	r1, r0, r4
 8008136:	f001 83e8 	beq.w	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800813a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800813e:	2801      	cmp	r0, #1
 8008140:	f171 0120 	sbcs.w	r1, r1, #32
 8008144:	f082 8292 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008148:	e9d7 0100 	ldrd	r0, r1, [r7]
 800814c:	f1a1 0410 	sub.w	r4, r1, #16
 8008150:	ea50 0104 	orrs.w	r1, r0, r4
 8008154:	f002 8256 	beq.w	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8008158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800815c:	2801      	cmp	r0, #1
 800815e:	f171 0110 	sbcs.w	r1, r1, #16
 8008162:	f082 8283 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008166:	e9d7 0100 	ldrd	r0, r1, [r7]
 800816a:	f1a1 0408 	sub.w	r4, r1, #8
 800816e:	ea50 0104 	orrs.w	r1, r0, r4
 8008172:	f002 81cc 	beq.w	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8008176:	e9d7 0100 	ldrd	r0, r1, [r7]
 800817a:	2801      	cmp	r0, #1
 800817c:	f171 0108 	sbcs.w	r1, r1, #8
 8008180:	f082 8274 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008184:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008188:	1f0c      	subs	r4, r1, #4
 800818a:	ea50 0104 	orrs.w	r1, r0, r4
 800818e:	f001 8648 	beq.w	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8008192:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008196:	2801      	cmp	r0, #1
 8008198:	f171 0104 	sbcs.w	r1, r1, #4
 800819c:	f082 8266 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081a4:	1e8c      	subs	r4, r1, #2
 80081a6:	ea50 0104 	orrs.w	r1, r0, r4
 80081aa:	f002 8143 	beq.w	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80081ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081b2:	2801      	cmp	r0, #1
 80081b4:	f171 0102 	sbcs.w	r1, r1, #2
 80081b8:	f082 8258 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081c0:	1e4c      	subs	r4, r1, #1
 80081c2:	ea50 0104 	orrs.w	r1, r0, r4
 80081c6:	f002 80ce 	beq.w	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80081ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ce:	2801      	cmp	r0, #1
 80081d0:	f171 0101 	sbcs.w	r1, r1, #1
 80081d4:	f082 824a 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081dc:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80081e0:	4321      	orrs	r1, r4
 80081e2:	f002 8059 	beq.w	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80081e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ea:	4cd9      	ldr	r4, [pc, #868]	@ (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80081ec:	42a0      	cmp	r0, r4
 80081ee:	f171 0100 	sbcs.w	r1, r1, #0
 80081f2:	f082 823b 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081fa:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80081fe:	4321      	orrs	r1, r4
 8008200:	f001 87d9 	beq.w	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8008204:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008208:	4cd2      	ldr	r4, [pc, #840]	@ (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800820a:	42a0      	cmp	r0, r4
 800820c:	f171 0100 	sbcs.w	r1, r1, #0
 8008210:	f082 822c 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008214:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008218:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800821c:	4321      	orrs	r1, r4
 800821e:	f001 8751 	beq.w	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8008222:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008226:	4ccc      	ldr	r4, [pc, #816]	@ (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008228:	42a0      	cmp	r0, r4
 800822a:	f171 0100 	sbcs.w	r1, r1, #0
 800822e:	f082 821d 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008232:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008236:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800823a:	4321      	orrs	r1, r4
 800823c:	f001 869a 	beq.w	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8008240:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008244:	4cc5      	ldr	r4, [pc, #788]	@ (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008246:	42a0      	cmp	r0, r4
 8008248:	f171 0100 	sbcs.w	r1, r1, #0
 800824c:	f082 820e 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008250:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008254:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008258:	4321      	orrs	r1, r4
 800825a:	f001 8612 	beq.w	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800825e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008262:	4cbf      	ldr	r4, [pc, #764]	@ (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8008264:	42a0      	cmp	r0, r4
 8008266:	f171 0100 	sbcs.w	r1, r1, #0
 800826a:	f082 81ff 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800826e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008272:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8008276:	4321      	orrs	r1, r4
 8008278:	f002 817e 	beq.w	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 800827c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008280:	4cb8      	ldr	r4, [pc, #736]	@ (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008282:	42a0      	cmp	r0, r4
 8008284:	f171 0100 	sbcs.w	r1, r1, #0
 8008288:	f082 81f0 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800828c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008290:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8008294:	4321      	orrs	r1, r4
 8008296:	f000 829e 	beq.w	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800829a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800829e:	4cb2      	ldr	r4, [pc, #712]	@ (8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80082a0:	42a0      	cmp	r0, r4
 80082a2:	f171 0100 	sbcs.w	r1, r1, #0
 80082a6:	f082 81e1 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082ae:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80082b2:	4321      	orrs	r1, r4
 80082b4:	f000 826d 	beq.w	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80082b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082bc:	4cab      	ldr	r4, [pc, #684]	@ (800856c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80082be:	42a0      	cmp	r0, r4
 80082c0:	f171 0100 	sbcs.w	r1, r1, #0
 80082c4:	f082 81d2 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082cc:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80082d0:	4321      	orrs	r1, r4
 80082d2:	f001 800d 	beq.w	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80082d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082da:	4ca5      	ldr	r4, [pc, #660]	@ (8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80082dc:	42a0      	cmp	r0, r4
 80082de:	f171 0100 	sbcs.w	r1, r1, #0
 80082e2:	f082 81c3 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082ea:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80082ee:	4321      	orrs	r1, r4
 80082f0:	f000 81d0 	beq.w	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80082f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082f8:	4c9e      	ldr	r4, [pc, #632]	@ (8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80082fa:	42a0      	cmp	r0, r4
 80082fc:	f171 0100 	sbcs.w	r1, r1, #0
 8008300:	f082 81b4 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008304:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008308:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 800830c:	4321      	orrs	r1, r4
 800830e:	f000 8142 	beq.w	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8008312:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008316:	4c98      	ldr	r4, [pc, #608]	@ (8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008318:	42a0      	cmp	r0, r4
 800831a:	f171 0100 	sbcs.w	r1, r1, #0
 800831e:	f082 81a5 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008322:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008326:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800832a:	4321      	orrs	r1, r4
 800832c:	f001 824e 	beq.w	80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8008330:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008334:	4c91      	ldr	r4, [pc, #580]	@ (800857c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008336:	42a0      	cmp	r0, r4
 8008338:	f171 0100 	sbcs.w	r1, r1, #0
 800833c:	f082 8196 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008344:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008348:	4321      	orrs	r1, r4
 800834a:	f001 8197 	beq.w	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800834e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008352:	4c8b      	ldr	r4, [pc, #556]	@ (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008354:	42a0      	cmp	r0, r4
 8008356:	f171 0100 	sbcs.w	r1, r1, #0
 800835a:	f082 8187 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800835e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008362:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008366:	4321      	orrs	r1, r4
 8008368:	f001 8154 	beq.w	8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 800836c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008370:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008374:	f171 0100 	sbcs.w	r1, r1, #0
 8008378:	f082 8178 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800837c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008380:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008384:	4321      	orrs	r1, r4
 8008386:	f001 80b7 	beq.w	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800838a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800838e:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008392:	42a0      	cmp	r0, r4
 8008394:	f171 0100 	sbcs.w	r1, r1, #0
 8008398:	f082 8168 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800839c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083a0:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80083a4:	4321      	orrs	r1, r4
 80083a6:	f001 8064 	beq.w	8009472 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80083aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ae:	f244 0401 	movw	r4, #16385	@ 0x4001
 80083b2:	42a0      	cmp	r0, r4
 80083b4:	f171 0100 	sbcs.w	r1, r1, #0
 80083b8:	f082 8158 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083c0:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80083c4:	4321      	orrs	r1, r4
 80083c6:	f001 8011 	beq.w	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80083ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ce:	f242 0401 	movw	r4, #8193	@ 0x2001
 80083d2:	42a0      	cmp	r0, r4
 80083d4:	f171 0100 	sbcs.w	r1, r1, #0
 80083d8:	f082 8148 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083e0:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80083e4:	4321      	orrs	r1, r4
 80083e6:	f000 871e 	beq.w	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80083ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ee:	f241 0401 	movw	r4, #4097	@ 0x1001
 80083f2:	42a0      	cmp	r0, r4
 80083f4:	f171 0100 	sbcs.w	r1, r1, #0
 80083f8:	f082 8138 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008400:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8008404:	4321      	orrs	r1, r4
 8008406:	f000 86a8 	beq.w	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800840a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800840e:	f640 0401 	movw	r4, #2049	@ 0x801
 8008412:	42a0      	cmp	r0, r4
 8008414:	f171 0100 	sbcs.w	r1, r1, #0
 8008418:	f082 8128 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800841c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008420:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8008424:	4321      	orrs	r1, r4
 8008426:	f000 8632 	beq.w	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800842a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800842e:	f240 4401 	movw	r4, #1025	@ 0x401
 8008432:	42a0      	cmp	r0, r4
 8008434:	f171 0100 	sbcs.w	r1, r1, #0
 8008438:	f082 8118 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800843c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008440:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8008444:	4321      	orrs	r1, r4
 8008446:	f000 85b0 	beq.w	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800844a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800844e:	f240 2401 	movw	r4, #513	@ 0x201
 8008452:	42a0      	cmp	r0, r4
 8008454:	f171 0100 	sbcs.w	r1, r1, #0
 8008458:	f082 8108 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800845c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008460:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8008464:	4321      	orrs	r1, r4
 8008466:	f000 8535 	beq.w	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800846a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800846e:	f240 1401 	movw	r4, #257	@ 0x101
 8008472:	42a0      	cmp	r0, r4
 8008474:	f171 0100 	sbcs.w	r1, r1, #0
 8008478:	f082 80f8 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800847c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008480:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8008484:	4321      	orrs	r1, r4
 8008486:	f000 84ba 	beq.w	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800848a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800848e:	2881      	cmp	r0, #129	@ 0x81
 8008490:	f171 0100 	sbcs.w	r1, r1, #0
 8008494:	f082 80ea 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008498:	e9d7 0100 	ldrd	r0, r1, [r7]
 800849c:	2821      	cmp	r0, #33	@ 0x21
 800849e:	f171 0100 	sbcs.w	r1, r1, #0
 80084a2:	d26f      	bcs.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80084a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084a8:	4301      	orrs	r1, r0
 80084aa:	f002 80df 	beq.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084b2:	1e42      	subs	r2, r0, #1
 80084b4:	f141 33ff 	adc.w	r3, r1, #4294967295
 80084b8:	2a20      	cmp	r2, #32
 80084ba:	f173 0100 	sbcs.w	r1, r3, #0
 80084be:	f082 80d5 	bcs.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084c2:	2a1f      	cmp	r2, #31
 80084c4:	f202 80d2 	bhi.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084c8:	a101      	add	r1, pc, #4	@ (adr r1, 80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80084ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084ce:	bf00      	nop
 80084d0:	08008831 	.word	0x08008831
 80084d4:	080088fd 	.word	0x080088fd
 80084d8:	0800a66d 	.word	0x0800a66d
 80084dc:	080089bd 	.word	0x080089bd
 80084e0:	0800a66d 	.word	0x0800a66d
 80084e4:	0800a66d 	.word	0x0800a66d
 80084e8:	0800a66d 	.word	0x0800a66d
 80084ec:	08008a8d 	.word	0x08008a8d
 80084f0:	0800a66d 	.word	0x0800a66d
 80084f4:	0800a66d 	.word	0x0800a66d
 80084f8:	0800a66d 	.word	0x0800a66d
 80084fc:	0800a66d 	.word	0x0800a66d
 8008500:	0800a66d 	.word	0x0800a66d
 8008504:	0800a66d 	.word	0x0800a66d
 8008508:	0800a66d 	.word	0x0800a66d
 800850c:	08008b6f 	.word	0x08008b6f
 8008510:	0800a66d 	.word	0x0800a66d
 8008514:	0800a66d 	.word	0x0800a66d
 8008518:	0800a66d 	.word	0x0800a66d
 800851c:	0800a66d 	.word	0x0800a66d
 8008520:	0800a66d 	.word	0x0800a66d
 8008524:	0800a66d 	.word	0x0800a66d
 8008528:	0800a66d 	.word	0x0800a66d
 800852c:	0800a66d 	.word	0x0800a66d
 8008530:	0800a66d 	.word	0x0800a66d
 8008534:	0800a66d 	.word	0x0800a66d
 8008538:	0800a66d 	.word	0x0800a66d
 800853c:	0800a66d 	.word	0x0800a66d
 8008540:	0800a66d 	.word	0x0800a66d
 8008544:	0800a66d 	.word	0x0800a66d
 8008548:	0800a66d 	.word	0x0800a66d
 800854c:	08008c45 	.word	0x08008c45
 8008550:	80000001 	.word	0x80000001
 8008554:	40000001 	.word	0x40000001
 8008558:	20000001 	.word	0x20000001
 800855c:	10000001 	.word	0x10000001
 8008560:	08000001 	.word	0x08000001
 8008564:	04000001 	.word	0x04000001
 8008568:	00800001 	.word	0x00800001
 800856c:	00400001 	.word	0x00400001
 8008570:	00200001 	.word	0x00200001
 8008574:	00100001 	.word	0x00100001
 8008578:	00080001 	.word	0x00080001
 800857c:	00040001 	.word	0x00040001
 8008580:	00020001 	.word	0x00020001
 8008584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008588:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800858c:	430b      	orrs	r3, r1
 800858e:	f000 83c4 	beq.w	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8008592:	f002 b86b 	b.w	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008596:	4ba1      	ldr	r3, [pc, #644]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800859c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80085a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085a8:	d036      	beq.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80085aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80085b0:	d86b      	bhi.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80085b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085b8:	d02b      	beq.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80085ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085c0:	d863      	bhi.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80085c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085c8:	d01b      	beq.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80085ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085d0:	d85b      	bhi.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80085d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d004      	beq.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80085d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085de:	d008      	beq.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80085e0:	e053      	b.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085e2:	f107 0320 	add.w	r3, r7, #32
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff f8b4 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80085ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80085f0:	e04e      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085f2:	f107 0314 	add.w	r3, r7, #20
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff fa18 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008600:	e046      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008602:	f107 0308 	add.w	r3, r7, #8
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff fb7c 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008610:	e03e      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008612:	4b83      	ldr	r3, [pc, #524]	@ (8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008614:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008616:	e03b      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008618:	4b80      	ldr	r3, [pc, #512]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800861a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800861e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008622:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008624:	4b7d      	ldr	r3, [pc, #500]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b02      	cmp	r3, #2
 800862e:	d10c      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d109      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008636:	4b79      	ldr	r3, [pc, #484]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	08db      	lsrs	r3, r3, #3
 800863c:	f003 0303 	and.w	r3, r3, #3
 8008640:	4a78      	ldr	r2, [pc, #480]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008642:	fa22 f303 	lsr.w	r3, r2, r3
 8008646:	637b      	str	r3, [r7, #52]	@ 0x34
 8008648:	e01e      	b.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800864a:	4b74      	ldr	r3, [pc, #464]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008652:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008656:	d106      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800865e:	d102      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008660:	4b71      	ldr	r3, [pc, #452]	@ (8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008662:	637b      	str	r3, [r7, #52]	@ 0x34
 8008664:	e010      	b.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008666:	4b6d      	ldr	r3, [pc, #436]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008672:	d106      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8008674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800867a:	d102      	bne.n	8008682 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800867c:	4b6b      	ldr	r3, [pc, #428]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800867e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008680:	e002      	b.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008686:	e003      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008688:	e002      	b.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800868a:	2300      	movs	r3, #0
 800868c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800868e:	bf00      	nop
          }
        }
        break;
 8008690:	f001 bfef 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008694:	4b61      	ldr	r3, [pc, #388]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800869a:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800869e:	633b      	str	r3, [r7, #48]	@ 0x30
 80086a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086a6:	d036      	beq.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086ae:	d86b      	bhi.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80086b6:	d02b      	beq.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80086be:	d863      	bhi.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80086c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086c6:	d01b      	beq.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80086c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086ce:	d85b      	bhi.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80086d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d004      	beq.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80086d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086dc:	d008      	beq.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80086de:	e053      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086e0:	f107 0320 	add.w	r3, r7, #32
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff f835 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80086ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086ee:	e04e      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086f0:	f107 0314 	add.w	r3, r7, #20
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff f999 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086fe:	e046      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008700:	f107 0308 	add.w	r3, r7, #8
 8008704:	4618      	mov	r0, r3
 8008706:	f7ff fafd 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800870e:	e03e      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008710:	4b43      	ldr	r3, [pc, #268]	@ (8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008712:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008714:	e03b      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008716:	4b41      	ldr	r3, [pc, #260]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800871c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008720:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008722:	4b3e      	ldr	r3, [pc, #248]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b02      	cmp	r3, #2
 800872c:	d10c      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800872e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008730:	2b00      	cmp	r3, #0
 8008732:	d109      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008734:	4b39      	ldr	r3, [pc, #228]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	08db      	lsrs	r3, r3, #3
 800873a:	f003 0303 	and.w	r3, r3, #3
 800873e:	4a39      	ldr	r2, [pc, #228]	@ (8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008740:	fa22 f303 	lsr.w	r3, r2, r3
 8008744:	637b      	str	r3, [r7, #52]	@ 0x34
 8008746:	e01e      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008748:	4b34      	ldr	r3, [pc, #208]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008754:	d106      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800875c:	d102      	bne.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800875e:	4b32      	ldr	r3, [pc, #200]	@ (8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008760:	637b      	str	r3, [r7, #52]	@ 0x34
 8008762:	e010      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008764:	4b2d      	ldr	r3, [pc, #180]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800876c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008770:	d106      	bne.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8008772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008778:	d102      	bne.n	8008780 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800877a:	4b2c      	ldr	r3, [pc, #176]	@ (800882c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800877c:	637b      	str	r3, [r7, #52]	@ 0x34
 800877e:	e002      	b.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008784:	e003      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8008786:	e002      	b.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800878c:	bf00      	nop
          }
        }
        break;
 800878e:	f001 bf70 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008792:	4b22      	ldr	r3, [pc, #136]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008794:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800879c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d108      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087a4:	f107 0320 	add.w	r3, r7, #32
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe ffd3 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087b2:	f001 bf5e 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80087b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b8:	2b40      	cmp	r3, #64	@ 0x40
 80087ba:	d108      	bne.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087bc:	f107 0314 	add.w	r3, r7, #20
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7ff f933 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087ca:	f001 bf52 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087d2:	f001 bf4e 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80087d6:	4b11      	ldr	r3, [pc, #68]	@ (800881c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087e0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d108      	bne.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087e8:	f107 0320 	add.w	r3, r7, #32
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe ffb1 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087f6:	f001 bf3c 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	2b80      	cmp	r3, #128	@ 0x80
 80087fe:	d108      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008800:	f107 0314 	add.w	r3, r7, #20
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff f911 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800880e:	f001 bf30 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008816:	f001 bf2c 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800881a:	bf00      	nop
 800881c:	44020c00 	.word	0x44020c00
 8008820:	00bb8000 	.word	0x00bb8000
 8008824:	03d09000 	.word	0x03d09000
 8008828:	003d0900 	.word	0x003d0900
 800882c:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008830:	4b9d      	ldr	r3, [pc, #628]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008832:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008836:	f003 0307 	and.w	r3, r3, #7
 800883a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	2b00      	cmp	r3, #0
 8008840:	d104      	bne.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008842:	f7fc ffd1 	bl	80057e8 <HAL_RCC_GetPCLK2Freq>
 8008846:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008848:	f001 bf13 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800884c:	4b96      	ldr	r3, [pc, #600]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008854:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008858:	d10a      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800885a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885c:	2b01      	cmp	r3, #1
 800885e:	d107      	bne.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008860:	f107 0314 	add.w	r3, r7, #20
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff f8e1 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	637b      	str	r3, [r7, #52]	@ 0x34
 800886e:	e043      	b.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8008870:	4b8d      	ldr	r3, [pc, #564]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800887c:	d10a      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800887e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008880:	2b02      	cmp	r3, #2
 8008882:	d107      	bne.n	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008884:	f107 0308 	add.w	r3, r7, #8
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff fa3b 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	637b      	str	r3, [r7, #52]	@ 0x34
 8008892:	e031      	b.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008894:	4b84      	ldr	r3, [pc, #528]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0302 	and.w	r3, r3, #2
 800889c:	2b02      	cmp	r3, #2
 800889e:	d10c      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80088a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d109      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088a6:	4b80      	ldr	r3, [pc, #512]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	08db      	lsrs	r3, r3, #3
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	4a7e      	ldr	r2, [pc, #504]	@ (8008aac <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80088b2:	fa22 f303 	lsr.w	r3, r2, r3
 80088b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088b8:	e01e      	b.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80088ba:	4b7b      	ldr	r3, [pc, #492]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088c6:	d105      	bne.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d102      	bne.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80088ce:	4b78      	ldr	r3, [pc, #480]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80088d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80088d2:	e011      	b.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80088d4:	4b74      	ldr	r3, [pc, #464]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d106      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	2b05      	cmp	r3, #5
 80088e6:	d103      	bne.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80088e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ee:	e003      	b.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088f4:	f001 bebd 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088f8:	f001 bebb 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80088fc:	4b6a      	ldr	r3, [pc, #424]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008902:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008906:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800890e:	f7fc ff55 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8008912:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008914:	f001 bead 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008918:	4b63      	ldr	r3, [pc, #396]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008920:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008924:	d10a      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8008926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008928:	2b08      	cmp	r3, #8
 800892a:	d107      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800892c:	f107 0314 	add.w	r3, r7, #20
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff f87b 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	637b      	str	r3, [r7, #52]	@ 0x34
 800893a:	e03d      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800893c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893e:	2b10      	cmp	r3, #16
 8008940:	d108      	bne.n	8008954 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008942:	f107 0308 	add.w	r3, r7, #8
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff f9dc 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008950:	f001 be8f 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008954:	4b54      	ldr	r3, [pc, #336]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b02      	cmp	r3, #2
 800895e:	d10c      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	2b18      	cmp	r3, #24
 8008964:	d109      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008966:	4b50      	ldr	r3, [pc, #320]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	08db      	lsrs	r3, r3, #3
 800896c:	f003 0303 	and.w	r3, r3, #3
 8008970:	4a4e      	ldr	r2, [pc, #312]	@ (8008aac <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008972:	fa22 f303 	lsr.w	r3, r2, r3
 8008976:	637b      	str	r3, [r7, #52]	@ 0x34
 8008978:	e01e      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800897a:	4b4b      	ldr	r3, [pc, #300]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008986:	d105      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898a:	2b20      	cmp	r3, #32
 800898c:	d102      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800898e:	4b48      	ldr	r3, [pc, #288]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008990:	637b      	str	r3, [r7, #52]	@ 0x34
 8008992:	e011      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008994:	4b44      	ldr	r3, [pc, #272]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d106      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	2b28      	cmp	r3, #40	@ 0x28
 80089a6:	d103      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80089a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ae:	e003      	b.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089b4:	f001 be5d 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089b8:	f001 be5b 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80089bc:	4b3a      	ldr	r3, [pc, #232]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80089c2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80089c6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80089c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d104      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80089ce:	f7fc fef5 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 80089d2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80089d4:	f001 be4d 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80089d8:	4b33      	ldr	r3, [pc, #204]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089e4:	d10a      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	2b40      	cmp	r3, #64	@ 0x40
 80089ea:	d107      	bne.n	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ec:	f107 0314 	add.w	r3, r7, #20
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff f81b 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089fa:	e045      	b.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80089fc:	4b2a      	ldr	r3, [pc, #168]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a08:	d10a      	bne.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0c:	2b80      	cmp	r3, #128	@ 0x80
 8008a0e:	d107      	bne.n	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a10:	f107 0308 	add.w	r3, r7, #8
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff f975 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a1e:	e033      	b.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008a20:	4b21      	ldr	r3, [pc, #132]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0302 	and.w	r3, r3, #2
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d10c      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a30:	d109      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a32:	4b1d      	ldr	r3, [pc, #116]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	08db      	lsrs	r3, r3, #3
 8008a38:	f003 0303 	and.w	r3, r3, #3
 8008a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8008aac <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a44:	e020      	b.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008a46:	4b18      	ldr	r3, [pc, #96]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a52:	d106      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a5a:	d102      	bne.n	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008a5c:	4b14      	ldr	r3, [pc, #80]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a60:	e012      	b.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008a62:	4b11      	ldr	r3, [pc, #68]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d107      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a72:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008a76:	d103      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008a78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a7e:	e003      	b.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a84:	f001 bdf5 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a88:	f001 bdf3 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008a8c:	4b06      	ldr	r3, [pc, #24]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a92:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008a96:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a9e:	f7fc fe8d 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8008aa2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008aa4:	f001 bde5 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008aa8:	44020c00 	.word	0x44020c00
 8008aac:	03d09000 	.word	0x03d09000
 8008ab0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008ab4:	4ba0      	ldr	r3, [pc, #640]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008abc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ac0:	d10b      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ac8:	d107      	bne.n	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aca:	f107 0314 	add.w	r3, r7, #20
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fe ffac 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad8:	e047      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008ada:	4b97      	ldr	r3, [pc, #604]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ae6:	d10b      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aee:	d107      	bne.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008af0:	f107 0308 	add.w	r3, r7, #8
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff f905 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008afe:	e034      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008b00:	4b8d      	ldr	r3, [pc, #564]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0302 	and.w	r3, r3, #2
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d10d      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008b12:	d109      	bne.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b14:	4b88      	ldr	r3, [pc, #544]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	08db      	lsrs	r3, r3, #3
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	4a87      	ldr	r2, [pc, #540]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008b20:	fa22 f303 	lsr.w	r3, r2, r3
 8008b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b26:	e020      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008b28:	4b83      	ldr	r3, [pc, #524]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b34:	d106      	bne.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8008b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b3c:	d102      	bne.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008b3e:	4b80      	ldr	r3, [pc, #512]	@ (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b42:	e012      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008b44:	4b7c      	ldr	r3, [pc, #496]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d107      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008b58:	d103      	bne.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008b5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b60:	e003      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b66:	f001 bd84 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b6a:	f001 bd82 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008b6e:	4b72      	ldr	r3, [pc, #456]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008b74:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008b78:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b80:	f7fc fe1c 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8008b84:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b86:	f001 bd74 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b96:	d10b      	bne.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b9e:	d107      	bne.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba0:	f107 0314 	add.w	r3, r7, #20
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fe ff41 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bae:	e047      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008bb0:	4b61      	ldr	r3, [pc, #388]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bbc:	d10b      	bne.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bc4:	d107      	bne.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bc6:	f107 0308 	add.w	r3, r7, #8
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff f89a 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd4:	e034      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008bd6:	4b58      	ldr	r3, [pc, #352]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d10d      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008be8:	d109      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bea:	4b53      	ldr	r3, [pc, #332]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	08db      	lsrs	r3, r3, #3
 8008bf0:	f003 0303 	and.w	r3, r3, #3
 8008bf4:	4a51      	ldr	r2, [pc, #324]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bfc:	e020      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c0a:	d106      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c12:	d102      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8008c14:	4b4a      	ldr	r3, [pc, #296]	@ (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c18:	e012      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008c1a:	4b47      	ldr	r3, [pc, #284]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d107      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008c2e:	d103      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008c30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c36:	e003      	b.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c3c:	f001 bd19 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c40:	f001 bd17 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008c44:	4b3c      	ldr	r3, [pc, #240]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008c4a:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008c4e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d104      	bne.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008c56:	f7fc fdb1 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8008c5a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c5c:	f001 bd09 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008c60:	4b35      	ldr	r3, [pc, #212]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c6c:	d10b      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c74:	d107      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c76:	f107 0314 	add.w	r3, r7, #20
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fed6 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c84:	e047      	b.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008c86:	4b2c      	ldr	r3, [pc, #176]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c92:	d10b      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c9a:	d107      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c9c:	f107 0308 	add.w	r3, r7, #8
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff f82f 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008caa:	e034      	b.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008cac:	4b22      	ldr	r3, [pc, #136]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d10d      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cba:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008cbe:	d109      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	08db      	lsrs	r3, r3, #3
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	4a1c      	ldr	r2, [pc, #112]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd2:	e020      	b.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008cd4:	4b18      	ldr	r3, [pc, #96]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ce0:	d106      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ce8:	d102      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8008cea:	4b15      	ldr	r3, [pc, #84]	@ (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cee:	e012      	b.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008cf0:	4b11      	ldr	r3, [pc, #68]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d107      	bne.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d00:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008d04:	d103      	bne.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8008d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d0c:	e003      	b.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d12:	f001 bcae 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d16:	f001 bcac 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8008d1a:	4b07      	ldr	r3, [pc, #28]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008d20:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008d24:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8008d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10b      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d2c:	f7fc fd46 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8008d30:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d32:	f001 bc9e 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d36:	bf00      	nop
 8008d38:	44020c00 	.word	0x44020c00
 8008d3c:	03d09000 	.word	0x03d09000
 8008d40:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008d44:	4ba0      	ldr	r3, [pc, #640]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d50:	d10b      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d58:	d107      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d5a:	f107 0314 	add.w	r3, r7, #20
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fe64 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d68:	e047      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008d6a:	4b97      	ldr	r3, [pc, #604]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d76:	d10b      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008d7e:	d107      	bne.n	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d80:	f107 0308 	add.w	r3, r7, #8
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fe ffbd 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d8e:	e034      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008d90:	4b8d      	ldr	r3, [pc, #564]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0302 	and.w	r3, r3, #2
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d10d      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008da2:	d109      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008da4:	4b88      	ldr	r3, [pc, #544]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	08db      	lsrs	r3, r3, #3
 8008daa:	f003 0303 	and.w	r3, r3, #3
 8008dae:	4a87      	ldr	r2, [pc, #540]	@ (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008db0:	fa22 f303 	lsr.w	r3, r2, r3
 8008db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008db6:	e020      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008db8:	4b83      	ldr	r3, [pc, #524]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dc4:	d106      	bne.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dcc:	d102      	bne.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8008dce:	4b80      	ldr	r3, [pc, #512]	@ (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dd2:	e012      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008dd4:	4b7c      	ldr	r3, [pc, #496]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008dd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d107      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8008de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008de8:	d103      	bne.n	8008df2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df0:	e003      	b.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008df6:	f001 bc3c 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008dfa:	f001 bc3a 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008dfe:	4b72      	ldr	r3, [pc, #456]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e04:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008e08:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d104      	bne.n	8008e1a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e10:	f7fc fcd4 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8008e14:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e16:	f001 bc2c 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008e1a:	4b6b      	ldr	r3, [pc, #428]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e26:	d10b      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e2e:	d107      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e30:	f107 0314 	add.w	r3, r7, #20
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe fdf9 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e3e:	e047      	b.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008e40:	4b61      	ldr	r3, [pc, #388]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e4c:	d10b      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e54:	d107      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e56:	f107 0308 	add.w	r3, r7, #8
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe ff52 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e64:	e034      	b.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008e66:	4b58      	ldr	r3, [pc, #352]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0302 	and.w	r3, r3, #2
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d10d      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008e78:	d109      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e7a:	4b53      	ldr	r3, [pc, #332]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	08db      	lsrs	r3, r3, #3
 8008e80:	f003 0303 	and.w	r3, r3, #3
 8008e84:	4a51      	ldr	r2, [pc, #324]	@ (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008e86:	fa22 f303 	lsr.w	r3, r2, r3
 8008e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e8c:	e020      	b.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e9a:	d106      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ea2:	d102      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008ea6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ea8:	e012      	b.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008eaa:	4b47      	ldr	r3, [pc, #284]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008eb0:	f003 0302 	and.w	r3, r3, #2
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d107      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eba:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008ebe:	d103      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008ec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec6:	e003      	b.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ecc:	f001 bbd1 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ed0:	f001 bbcf 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ed6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008eda:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008ede:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d104      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ee6:	f7fc fc69 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8008eea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008eec:	f001 bbc1 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008ef0:	4b35      	ldr	r3, [pc, #212]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ef8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008efc:	d10b      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f04:	d107      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f06:	f107 0314 	add.w	r3, r7, #20
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe fd8e 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f14:	e047      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008f16:	4b2c      	ldr	r3, [pc, #176]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f22:	d10b      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f2a:	d107      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f2c:	f107 0308 	add.w	r3, r7, #8
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe fee7 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f3a:	e034      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008f3c:	4b22      	ldr	r3, [pc, #136]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0302 	and.w	r3, r3, #2
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d10d      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f4e:	d109      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f50:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	08db      	lsrs	r3, r3, #3
 8008f56:	f003 0303 	and.w	r3, r3, #3
 8008f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f62:	e020      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008f64:	4b18      	ldr	r3, [pc, #96]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f70:	d106      	bne.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f78:	d102      	bne.n	8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008f7a:	4b15      	ldr	r3, [pc, #84]	@ (8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7e:	e012      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008f80:	4b11      	ldr	r3, [pc, #68]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d107      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f90:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008f94:	d103      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f9c:	e003      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fa2:	f001 bb66 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fa6:	f001 bb64 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8008faa:	4b07      	ldr	r3, [pc, #28]	@ (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008fb0:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8008fb4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10b      	bne.n	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fbc:	f7fc fbfe 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8008fc0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8008fc2:	f001 bb56 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fc6:	bf00      	nop
 8008fc8:	44020c00 	.word	0x44020c00
 8008fcc:	03d09000 	.word	0x03d09000
 8008fd0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8008fd4:	4ba1      	ldr	r3, [pc, #644]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fe0:	d10b      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fe8:	d107      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fea:	f107 0314 	add.w	r3, r7, #20
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe fd1c 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff8:	e047      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008ffa:	4b98      	ldr	r3, [pc, #608]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009006:	d10b      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800900e:	d107      	bne.n	8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009010:	f107 0308 	add.w	r3, r7, #8
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe fe75 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	637b      	str	r3, [r7, #52]	@ 0x34
 800901e:	e034      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8009020:	4b8e      	ldr	r3, [pc, #568]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0302 	and.w	r3, r3, #2
 8009028:	2b02      	cmp	r3, #2
 800902a:	d10d      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800902c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8009032:	d109      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009034:	4b89      	ldr	r3, [pc, #548]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	08db      	lsrs	r3, r3, #3
 800903a:	f003 0303 	and.w	r3, r3, #3
 800903e:	4a88      	ldr	r2, [pc, #544]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009040:	fa22 f303 	lsr.w	r3, r2, r3
 8009044:	637b      	str	r3, [r7, #52]	@ 0x34
 8009046:	e020      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8009048:	4b84      	ldr	r3, [pc, #528]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009054:	d106      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8009056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800905c:	d102      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800905e:	4b81      	ldr	r3, [pc, #516]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009060:	637b      	str	r3, [r7, #52]	@ 0x34
 8009062:	e012      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8009064:	4b7d      	ldr	r3, [pc, #500]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	2b02      	cmp	r3, #2
 8009070:	d107      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8009072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009074:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8009078:	d103      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800907a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800907e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009080:	e003      	b.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009086:	f001 baf4 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800908a:	f001 baf2 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800908e:	4b73      	ldr	r3, [pc, #460]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009090:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800909a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909c:	2b00      	cmp	r3, #0
 800909e:	d104      	bne.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80090a0:	f7fc fb8c 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 80090a4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80090a6:	f001 bae4 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80090aa:	4b6c      	ldr	r3, [pc, #432]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090b6:	d10a      	bne.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d107      	bne.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090be:	f107 0314 	add.w	r3, r7, #20
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe fcb2 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80090cc:	e043      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80090ce:	4b63      	ldr	r3, [pc, #396]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090da:	d10a      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80090dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d107      	bne.n	80090f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090e2:	f107 0308 	add.w	r3, r7, #8
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe fe0c 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f0:	e031      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80090f2:	4b5a      	ldr	r3, [pc, #360]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d10c      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80090fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009100:	2b03      	cmp	r3, #3
 8009102:	d109      	bne.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009104:	4b55      	ldr	r3, [pc, #340]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	08db      	lsrs	r3, r3, #3
 800910a:	f003 0303 	and.w	r3, r3, #3
 800910e:	4a54      	ldr	r2, [pc, #336]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009110:	fa22 f303 	lsr.w	r3, r2, r3
 8009114:	637b      	str	r3, [r7, #52]	@ 0x34
 8009116:	e01e      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8009118:	4b50      	ldr	r3, [pc, #320]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009124:	d105      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8009126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009128:	2b04      	cmp	r3, #4
 800912a:	d102      	bne.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800912c:	4b4d      	ldr	r3, [pc, #308]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800912e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009130:	e011      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8009132:	4b4a      	ldr	r3, [pc, #296]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009138:	f003 0302 	and.w	r3, r3, #2
 800913c:	2b02      	cmp	r3, #2
 800913e:	d106      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8009140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009142:	2b05      	cmp	r3, #5
 8009144:	d103      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8009146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800914a:	637b      	str	r3, [r7, #52]	@ 0x34
 800914c:	e003      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009152:	f001 ba8e 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009156:	f001 ba8c 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800915a:	4b40      	ldr	r3, [pc, #256]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800915c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009160:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009164:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8009166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009168:	2b00      	cmp	r3, #0
 800916a:	d104      	bne.n	8009176 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800916c:	f7fc fb26 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8009170:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8009172:	f001 ba7e 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8009176:	4b39      	ldr	r3, [pc, #228]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800917e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009182:	d10a      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	2b10      	cmp	r3, #16
 8009188:	d107      	bne.n	800919a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800918a:	f107 0314 	add.w	r3, r7, #20
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe fc4c 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	637b      	str	r3, [r7, #52]	@ 0x34
 8009198:	e043      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800919a:	4b30      	ldr	r3, [pc, #192]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091a6:	d10a      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80091a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091aa:	2b20      	cmp	r3, #32
 80091ac:	d107      	bne.n	80091be <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ae:	f107 0308 	add.w	r3, r7, #8
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe fda6 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80091bc:	e031      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80091be:	4b27      	ldr	r3, [pc, #156]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0302 	and.w	r3, r3, #2
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d10c      	bne.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	2b30      	cmp	r3, #48	@ 0x30
 80091ce:	d109      	bne.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091d0:	4b22      	ldr	r3, [pc, #136]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	08db      	lsrs	r3, r3, #3
 80091d6:	f003 0303 	and.w	r3, r3, #3
 80091da:	4a21      	ldr	r2, [pc, #132]	@ (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80091dc:	fa22 f303 	lsr.w	r3, r2, r3
 80091e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e2:	e01e      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80091e4:	4b1d      	ldr	r3, [pc, #116]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091f0:	d105      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80091f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f4:	2b40      	cmp	r3, #64	@ 0x40
 80091f6:	d102      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80091f8:	4b1a      	ldr	r3, [pc, #104]	@ (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80091fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80091fc:	e011      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80091fe:	4b17      	ldr	r3, [pc, #92]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009204:	f003 0302 	and.w	r3, r3, #2
 8009208:	2b02      	cmp	r3, #2
 800920a:	d106      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800920c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920e:	2b50      	cmp	r3, #80	@ 0x50
 8009210:	d103      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8009212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009216:	637b      	str	r3, [r7, #52]	@ 0x34
 8009218:	e003      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800921a:	2300      	movs	r3, #0
 800921c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800921e:	f001 ba28 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009222:	f001 ba26 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009226:	4b0d      	ldr	r3, [pc, #52]	@ (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800922c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009230:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009234:	2b00      	cmp	r3, #0
 8009236:	d104      	bne.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009238:	f7fc faec 	bl	8005814 <HAL_RCC_GetPCLK3Freq>
 800923c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800923e:	f001 ba18 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8009242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009244:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009248:	d10e      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800924a:	f107 0314 	add.w	r3, r7, #20
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe fbec 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009258:	f001 ba0b 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800925c:	44020c00 	.word	0x44020c00
 8009260:	03d09000 	.word	0x03d09000
 8009264:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8009268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800926a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800926e:	d108      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009270:	f107 0308 	add.w	r3, r7, #8
 8009274:	4618      	mov	r0, r3
 8009276:	f7fe fd45 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800927e:	f001 b9f8 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009282:	4ba4      	ldr	r3, [pc, #656]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b02      	cmp	r3, #2
 800928c:	d10d      	bne.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800928e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009290:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009294:	d109      	bne.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009296:	4b9f      	ldr	r3, [pc, #636]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	08db      	lsrs	r3, r3, #3
 800929c:	f003 0303 	and.w	r3, r3, #3
 80092a0:	4a9d      	ldr	r2, [pc, #628]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80092a2:	fa22 f303 	lsr.w	r3, r2, r3
 80092a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092a8:	e020      	b.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80092aa:	4b9a      	ldr	r3, [pc, #616]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092b6:	d106      	bne.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80092b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092be:	d102      	bne.n	80092c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80092c0:	4b96      	ldr	r3, [pc, #600]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80092c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80092c4:	e012      	b.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80092c6:	4b93      	ldr	r3, [pc, #588]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80092c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d107      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80092d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80092da:	d103      	bne.n	80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80092dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092e2:	e003      	b.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092e8:	f001 b9c3 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092ec:	f001 b9c1 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80092f0:	4b88      	ldr	r3, [pc, #544]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80092f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092f6:	f003 0307 	and.w	r3, r3, #7
 80092fa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80092fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d104      	bne.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8009302:	f7fc fa3f 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 8009306:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8009308:	f001 b9b3 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800930c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930e:	2b01      	cmp	r3, #1
 8009310:	d104      	bne.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8009312:	f7fc f90b 	bl	800552c <HAL_RCC_GetSysClockFreq>
 8009316:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009318:	f001 b9ab 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800931c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931e:	2b02      	cmp	r3, #2
 8009320:	d108      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009322:	f107 0314 	add.w	r3, r7, #20
 8009326:	4618      	mov	r0, r3
 8009328:	f7fe fb80 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009330:	f001 b99f 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009334:	4b77      	ldr	r3, [pc, #476]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800933c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009340:	d105      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8009342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009344:	2b03      	cmp	r3, #3
 8009346:	d102      	bne.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8009348:	4b75      	ldr	r3, [pc, #468]	@ (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800934a:	637b      	str	r3, [r7, #52]	@ 0x34
 800934c:	e023      	b.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800934e:	4b71      	ldr	r3, [pc, #452]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b02      	cmp	r3, #2
 8009358:	d10c      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800935a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800935c:	2b04      	cmp	r3, #4
 800935e:	d109      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009360:	4b6c      	ldr	r3, [pc, #432]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	08db      	lsrs	r3, r3, #3
 8009366:	f003 0303 	and.w	r3, r3, #3
 800936a:	4a6b      	ldr	r2, [pc, #428]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800936c:	fa22 f303 	lsr.w	r3, r2, r3
 8009370:	637b      	str	r3, [r7, #52]	@ 0x34
 8009372:	e010      	b.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009374:	4b67      	ldr	r3, [pc, #412]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800937c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009380:	d105      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009384:	2b05      	cmp	r3, #5
 8009386:	d102      	bne.n	800938e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8009388:	4b64      	ldr	r3, [pc, #400]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800938a:	637b      	str	r3, [r7, #52]	@ 0x34
 800938c:	e003      	b.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800938e:	2300      	movs	r3, #0
 8009390:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009392:	f001 b96e 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009396:	f001 b96c 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800939a:	4b5e      	ldr	r3, [pc, #376]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800939c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80093a6:	4b5b      	ldr	r3, [pc, #364]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d106      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80093b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d103      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80093ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093be:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c0:	e012      	b.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80093c2:	4b54      	ldr	r3, [pc, #336]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093d0:	d106      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80093d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	d103      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80093d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80093dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80093de:	e003      	b.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80093e4:	f001 b945 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093e8:	f001 b943 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80093ec:	4b49      	ldr	r3, [pc, #292]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80093f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80093f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80093f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d104      	bne.n	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80093fe:	f7fc f9dd 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8009402:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009404:	f001 b935 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8009408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800940e:	d108      	bne.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009410:	f107 0308 	add.w	r3, r7, #8
 8009414:	4618      	mov	r0, r3
 8009416:	f7fe fc75 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800941e:	f001 b928 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009422:	4b3c      	ldr	r3, [pc, #240]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0302 	and.w	r3, r3, #2
 800942a:	2b02      	cmp	r3, #2
 800942c:	d10d      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800942e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009430:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009434:	d109      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009436:	4b37      	ldr	r3, [pc, #220]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	08db      	lsrs	r3, r3, #3
 800943c:	f003 0303 	and.w	r3, r3, #3
 8009440:	4a35      	ldr	r2, [pc, #212]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009442:	fa22 f303 	lsr.w	r3, r2, r3
 8009446:	637b      	str	r3, [r7, #52]	@ 0x34
 8009448:	e011      	b.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800944a:	4b32      	ldr	r3, [pc, #200]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009456:	d106      	bne.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8009458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800945e:	d102      	bne.n	8009466 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8009460:	4b2e      	ldr	r3, [pc, #184]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009462:	637b      	str	r3, [r7, #52]	@ 0x34
 8009464:	e003      	b.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800946a:	f001 b902 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800946e:	f001 b900 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009472:	4b28      	ldr	r3, [pc, #160]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009474:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009478:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800947c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800947e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009480:	2b00      	cmp	r3, #0
 8009482:	d104      	bne.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009484:	f7fc f99a 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8009488:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800948a:	f001 b8f2 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800948e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009490:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009494:	d108      	bne.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009496:	f107 0308 	add.w	r3, r7, #8
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe fc32 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094a4:	f001 b8e5 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80094a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0302 	and.w	r3, r3, #2
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d10d      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80094b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80094ba:	d109      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094bc:	4b15      	ldr	r3, [pc, #84]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	08db      	lsrs	r3, r3, #3
 80094c2:	f003 0303 	and.w	r3, r3, #3
 80094c6:	4a14      	ldr	r2, [pc, #80]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80094c8:	fa22 f303 	lsr.w	r3, r2, r3
 80094cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ce:	e011      	b.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80094d0:	4b10      	ldr	r3, [pc, #64]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094dc:	d106      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80094de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80094e4:	d102      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80094e6:	4b0d      	ldr	r3, [pc, #52]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80094e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ea:	e003      	b.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094f0:	f001 b8bf 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094f4:	f001 b8bd 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80094f8:	4b06      	ldr	r3, [pc, #24]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80094fe:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009502:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8009504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10c      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800950a:	f7fc f983 	bl	8005814 <HAL_RCC_GetPCLK3Freq>
 800950e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009510:	f001 b8af 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009514:	44020c00 	.word	0x44020c00
 8009518:	03d09000 	.word	0x03d09000
 800951c:	003d0900 	.word	0x003d0900
 8009520:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8009524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800952a:	d108      	bne.n	800953e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800952c:	f107 0308 	add.w	r3, r7, #8
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe fbe7 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800953a:	f001 b89a 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800953e:	4b9f      	ldr	r3, [pc, #636]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b02      	cmp	r3, #2
 8009548:	d10d      	bne.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800954a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009550:	d109      	bne.n	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009552:	4b9a      	ldr	r3, [pc, #616]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	08db      	lsrs	r3, r3, #3
 8009558:	f003 0303 	and.w	r3, r3, #3
 800955c:	4a98      	ldr	r2, [pc, #608]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800955e:	fa22 f303 	lsr.w	r3, r2, r3
 8009562:	637b      	str	r3, [r7, #52]	@ 0x34
 8009564:	e011      	b.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8009566:	4b95      	ldr	r3, [pc, #596]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800956e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009572:	d106      	bne.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800957a:	d102      	bne.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800957c:	4b91      	ldr	r3, [pc, #580]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800957e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009580:	e003      	b.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8009582:	2300      	movs	r3, #0
 8009584:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009586:	f001 b874 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800958a:	f001 b872 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800958e:	4b8b      	ldr	r3, [pc, #556]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009590:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009594:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009598:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800959a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959c:	2b00      	cmp	r3, #0
 800959e:	d104      	bne.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80095a0:	f7fc f938 	bl	8005814 <HAL_RCC_GetPCLK3Freq>
 80095a4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80095a6:	f001 b864 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80095aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095b0:	d108      	bne.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095b2:	f107 0308 	add.w	r3, r7, #8
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fe fba4 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095c0:	f001 b857 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80095c4:	4b7d      	ldr	r3, [pc, #500]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f003 0302 	and.w	r3, r3, #2
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d10d      	bne.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80095d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80095d6:	d109      	bne.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095d8:	4b78      	ldr	r3, [pc, #480]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	08db      	lsrs	r3, r3, #3
 80095de:	f003 0303 	and.w	r3, r3, #3
 80095e2:	4a77      	ldr	r2, [pc, #476]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80095e4:	fa22 f303 	lsr.w	r3, r2, r3
 80095e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ea:	e011      	b.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80095ec:	4b73      	ldr	r3, [pc, #460]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095f8:	d106      	bne.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80095fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009600:	d102      	bne.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8009602:	4b70      	ldr	r3, [pc, #448]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009604:	637b      	str	r3, [r7, #52]	@ 0x34
 8009606:	e003      	b.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800960c:	f001 b831 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009610:	f001 b82f 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009614:	4b69      	ldr	r3, [pc, #420]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009616:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800961a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800961e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009622:	2b00      	cmp	r3, #0
 8009624:	d104      	bne.n	8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009626:	f7fc f8c9 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 800962a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800962c:	f001 b821 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009636:	d108      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009638:	f107 0308 	add.w	r3, r7, #8
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fb61 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009646:	f001 b814 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800964a:	4b5c      	ldr	r3, [pc, #368]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0302 	and.w	r3, r3, #2
 8009652:	2b02      	cmp	r3, #2
 8009654:	d10e      	bne.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800965c:	d10a      	bne.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800965e:	4b57      	ldr	r3, [pc, #348]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	08db      	lsrs	r3, r3, #3
 8009664:	f003 0303 	and.w	r3, r3, #3
 8009668:	4a55      	ldr	r2, [pc, #340]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800966a:	fa22 f303 	lsr.w	r3, r2, r3
 800966e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009670:	f000 bfff 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009674:	2300      	movs	r3, #0
 8009676:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009678:	f000 bffb 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800967c:	4b4f      	ldr	r3, [pc, #316]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800967e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009682:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009686:	633b      	str	r3, [r7, #48]	@ 0x30
 8009688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800968e:	d056      	beq.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8009690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009692:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009696:	f200 808b 	bhi.w	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800969a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096a0:	d03e      	beq.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80096a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096a8:	f200 8082 	bhi.w	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80096ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096b2:	d027      	beq.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80096b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096ba:	d879      	bhi.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80096bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096c2:	d017      	beq.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80096c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096ca:	d871      	bhi.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d004      	beq.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80096d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096d8:	d004      	beq.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80096da:	e069      	b.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80096dc:	f7fc f89a 	bl	8005814 <HAL_RCC_GetPCLK3Freq>
 80096e0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80096e2:	e068      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096e4:	f107 0314 	add.w	r3, r7, #20
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fe f99f 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096f2:	e060      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096f4:	f107 0308 	add.w	r3, r7, #8
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fe fb03 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009702:	e058      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009704:	4b2d      	ldr	r3, [pc, #180]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800970a:	f003 0302 	and.w	r3, r3, #2
 800970e:	2b02      	cmp	r3, #2
 8009710:	d103      	bne.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8009712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009716:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009718:	e04d      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800971e:	e04a      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009720:	4b26      	ldr	r3, [pc, #152]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800972a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800972e:	d103      	bne.n	8009738 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8009730:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009734:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009736:	e03e      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800973c:	e03b      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800973e:	4b1f      	ldr	r3, [pc, #124]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009744:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009748:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800974a:	4b1c      	ldr	r3, [pc, #112]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0302 	and.w	r3, r3, #2
 8009752:	2b02      	cmp	r3, #2
 8009754:	d10c      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8009756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d109      	bne.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800975c:	4b17      	ldr	r3, [pc, #92]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	08db      	lsrs	r3, r3, #3
 8009762:	f003 0303 	and.w	r3, r3, #3
 8009766:	4a16      	ldr	r2, [pc, #88]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009768:	fa22 f303 	lsr.w	r3, r2, r3
 800976c:	637b      	str	r3, [r7, #52]	@ 0x34
 800976e:	e01e      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009770:	4b12      	ldr	r3, [pc, #72]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800977c:	d106      	bne.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800977e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009784:	d102      	bne.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009786:	4b0f      	ldr	r3, [pc, #60]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009788:	637b      	str	r3, [r7, #52]	@ 0x34
 800978a:	e010      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800978c:	4b0b      	ldr	r3, [pc, #44]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009798:	d106      	bne.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800979a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097a0:	d102      	bne.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80097a2:	4b09      	ldr	r3, [pc, #36]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80097a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097a6:	e002      	b.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80097ac:	e003      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80097ae:	e002      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097b4:	bf00      	nop
          }
        }
        break;
 80097b6:	f000 bf5c 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80097ba:	bf00      	nop
 80097bc:	44020c00 	.word	0x44020c00
 80097c0:	03d09000 	.word	0x03d09000
 80097c4:	003d0900 	.word	0x003d0900
 80097c8:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80097cc:	4b9e      	ldr	r3, [pc, #632]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80097ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80097d2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80097d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80097d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80097de:	d056      	beq.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80097e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80097e6:	f200 808b 	bhi.w	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097f0:	d03e      	beq.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 80097f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097f8:	f200 8082 	bhi.w	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80097fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009802:	d027      	beq.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8009804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009806:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800980a:	d879      	bhi.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800980c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009812:	d017      	beq.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8009814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800981a:	d871      	bhi.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800981c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800981e:	2b00      	cmp	r3, #0
 8009820:	d004      	beq.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8009822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009828:	d004      	beq.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800982a:	e069      	b.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800982c:	f7fb ffc6 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8009830:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009832:	e068      	b.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009834:	f107 0314 	add.w	r3, r7, #20
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe f8f7 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009842:	e060      	b.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009844:	f107 0308 	add.w	r3, r7, #8
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe fa5b 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009852:	e058      	b.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009854:	4b7c      	ldr	r3, [pc, #496]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b02      	cmp	r3, #2
 8009860:	d103      	bne.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8009862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009866:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009868:	e04d      	b.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800986e:	e04a      	b.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009870:	4b75      	ldr	r3, [pc, #468]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009872:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800987a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800987e:	d103      	bne.n	8009888 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8009880:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009884:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009886:	e03e      	b.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009888:	2300      	movs	r3, #0
 800988a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800988c:	e03b      	b.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800988e:	4b6e      	ldr	r3, [pc, #440]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009894:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009898:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800989a:	4b6b      	ldr	r3, [pc, #428]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0302 	and.w	r3, r3, #2
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d10c      	bne.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80098a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d109      	bne.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098ac:	4b66      	ldr	r3, [pc, #408]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	08db      	lsrs	r3, r3, #3
 80098b2:	f003 0303 	and.w	r3, r3, #3
 80098b6:	4a65      	ldr	r2, [pc, #404]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80098b8:	fa22 f303 	lsr.w	r3, r2, r3
 80098bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80098be:	e01e      	b.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098c0:	4b61      	ldr	r3, [pc, #388]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098cc:	d106      	bne.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80098ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098d4:	d102      	bne.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80098d6:	4b5e      	ldr	r3, [pc, #376]	@ (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80098d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80098da:	e010      	b.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098dc:	4b5a      	ldr	r3, [pc, #360]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098e8:	d106      	bne.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80098ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098f0:	d102      	bne.n	80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80098f2:	4b58      	ldr	r3, [pc, #352]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80098f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f6:	e002      	b.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80098fc:	e003      	b.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80098fe:	e002      	b.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8009900:	2300      	movs	r3, #0
 8009902:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009904:	bf00      	nop
          }
        }
        break;
 8009906:	f000 beb4 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800990a:	4b4f      	ldr	r3, [pc, #316]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800990c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009910:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009914:	633b      	str	r3, [r7, #48]	@ 0x30
 8009916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800991c:	d056      	beq.n	80099cc <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800991e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009924:	f200 808b 	bhi.w	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800992e:	d03e      	beq.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8009930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009932:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009936:	f200 8082 	bhi.w	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009940:	d027      	beq.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8009942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009944:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009948:	d879      	bhi.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800994a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009950:	d017      	beq.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8009952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009954:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009958:	d871      	bhi.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	2b00      	cmp	r3, #0
 800995e:	d004      	beq.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8009960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009966:	d004      	beq.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8009968:	e069      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800996a:	f7fb ff53 	bl	8005814 <HAL_RCC_GetPCLK3Freq>
 800996e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009970:	e068      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009972:	f107 0314 	add.w	r3, r7, #20
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe f858 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009980:	e060      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009982:	f107 0308 	add.w	r3, r7, #8
 8009986:	4618      	mov	r0, r3
 8009988:	f7fe f9bc 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009990:	e058      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009992:	4b2d      	ldr	r3, [pc, #180]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009998:	f003 0302 	and.w	r3, r3, #2
 800999c:	2b02      	cmp	r3, #2
 800999e:	d103      	bne.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80099a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099a4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80099a6:	e04d      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099ac:	e04a      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80099ae:	4b26      	ldr	r3, [pc, #152]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80099b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099bc:	d103      	bne.n	80099c6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80099be:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80099c2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80099c4:	e03e      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80099c6:	2300      	movs	r3, #0
 80099c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099ca:	e03b      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099cc:	4b1e      	ldr	r3, [pc, #120]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80099ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099d2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80099d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0302 	and.w	r3, r3, #2
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d10c      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80099e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d109      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80099ea:	4b17      	ldr	r3, [pc, #92]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	08db      	lsrs	r3, r3, #3
 80099f0:	f003 0303 	and.w	r3, r3, #3
 80099f4:	4a15      	ldr	r2, [pc, #84]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80099f6:	fa22 f303 	lsr.w	r3, r2, r3
 80099fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80099fc:	e01e      	b.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099fe:	4b12      	ldr	r3, [pc, #72]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a0a:	d106      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a12:	d102      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009a14:	4b0e      	ldr	r3, [pc, #56]	@ (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a18:	e010      	b.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a48 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a26:	d106      	bne.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8009a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a2e:	d102      	bne.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009a30:	4b08      	ldr	r3, [pc, #32]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a34:	e002      	b.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009a3a:	e003      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009a3c:	e002      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a42:	bf00      	nop
          }
        }
        break;
 8009a44:	f000 be15 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a48:	44020c00 	.word	0x44020c00
 8009a4c:	03d09000 	.word	0x03d09000
 8009a50:	003d0900 	.word	0x003d0900
 8009a54:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009a58:	4b9e      	ldr	r3, [pc, #632]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009a5a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009a5e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8009a62:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a66:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009a6a:	d056      	beq.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009a72:	f200 808b 	bhi.w	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a7c:	d03e      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a84:	f200 8082 	bhi.w	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a8e:	d027      	beq.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a96:	d879      	bhi.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a9e:	d017      	beq.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8009aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009aa6:	d871      	bhi.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d004      	beq.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8009aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ab4:	d004      	beq.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8009ab6:	e069      	b.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009ab8:	f7fb feac 	bl	8005814 <HAL_RCC_GetPCLK3Freq>
 8009abc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009abe:	e068      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ac0:	f107 0314 	add.w	r3, r7, #20
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fd ffb1 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ace:	e060      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ad0:	f107 0308 	add.w	r3, r7, #8
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7fe f915 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ade:	e058      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009ae0:	4b7c      	ldr	r3, [pc, #496]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ae6:	f003 0302 	and.w	r3, r3, #2
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d103      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8009aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009af2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009af4:	e04d      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009afa:	e04a      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009afc:	4b75      	ldr	r3, [pc, #468]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b0a:	d103      	bne.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009b0c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009b10:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b12:	e03e      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009b14:	2300      	movs	r3, #0
 8009b16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b18:	e03b      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b1a:	4b6e      	ldr	r3, [pc, #440]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b20:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009b24:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b26:	4b6b      	ldr	r3, [pc, #428]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d10c      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8009b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d109      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b38:	4b66      	ldr	r3, [pc, #408]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	08db      	lsrs	r3, r3, #3
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	4a65      	ldr	r2, [pc, #404]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009b44:	fa22 f303 	lsr.w	r3, r2, r3
 8009b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b4a:	e01e      	b.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b4c:	4b61      	ldr	r3, [pc, #388]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b58:	d106      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b60:	d102      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b62:	4b5e      	ldr	r3, [pc, #376]	@ (8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b66:	e010      	b.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b68:	4b5a      	ldr	r3, [pc, #360]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b74:	d106      	bne.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b7c:	d102      	bne.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b7e:	4b58      	ldr	r3, [pc, #352]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b82:	e002      	b.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009b84:	2300      	movs	r3, #0
 8009b86:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009b88:	e003      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009b8a:	e002      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b90:	bf00      	nop
          }
        }
        break;
 8009b92:	f000 bd6e 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009b96:	4b4f      	ldr	r3, [pc, #316]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b98:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009b9c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009ba0:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009ba8:	d056      	beq.n	8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8009baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009bb0:	f200 808b 	bhi.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bba:	d03e      	beq.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009bc2:	f200 8082 	bhi.w	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009bcc:	d027      	beq.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8009bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009bd4:	d879      	bhi.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bdc:	d017      	beq.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8009bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009be4:	d871      	bhi.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d004      	beq.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8009bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009bf2:	d004      	beq.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8009bf4:	e069      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009bf6:	f7fb fe0d 	bl	8005814 <HAL_RCC_GetPCLK3Freq>
 8009bfa:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009bfc:	e068      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bfe:	f107 0314 	add.w	r3, r7, #20
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fd ff12 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c0c:	e060      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c0e:	f107 0308 	add.w	r3, r7, #8
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe f876 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c1c:	e058      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c24:	f003 0302 	and.w	r3, r3, #2
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d103      	bne.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009c2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c30:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009c32:	e04d      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c38:	e04a      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009c3a:	4b26      	ldr	r3, [pc, #152]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c48:	d103      	bne.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8009c4a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009c4e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009c50:	e03e      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c56:	e03b      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c58:	4b1e      	ldr	r3, [pc, #120]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c5e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009c62:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c64:	4b1b      	ldr	r3, [pc, #108]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0302 	and.w	r3, r3, #2
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d10c      	bne.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d109      	bne.n	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c76:	4b17      	ldr	r3, [pc, #92]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	08db      	lsrs	r3, r3, #3
 8009c7c:	f003 0303 	and.w	r3, r3, #3
 8009c80:	4a15      	ldr	r2, [pc, #84]	@ (8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009c82:	fa22 f303 	lsr.w	r3, r2, r3
 8009c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c88:	e01e      	b.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c8a:	4b12      	ldr	r3, [pc, #72]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c96:	d106      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c9e:	d102      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca4:	e010      	b.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cb2:	d106      	bne.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8009cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cba:	d102      	bne.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009cbc:	4b08      	ldr	r3, [pc, #32]	@ (8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009cbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cc0:	e002      	b.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009cc6:	e003      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8009cc8:	e002      	b.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009cce:	bf00      	nop
          }
        }
        break;
 8009cd0:	f000 bccf 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009cd4:	44020c00 	.word	0x44020c00
 8009cd8:	03d09000 	.word	0x03d09000
 8009cdc:	003d0900 	.word	0x003d0900
 8009ce0:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8009ce4:	4b9e      	ldr	r3, [pc, #632]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ce6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009cea:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009cee:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cf6:	d056      	beq.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8009cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cfe:	f200 808b 	bhi.w	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d08:	d03e      	beq.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d10:	f200 8082 	bhi.w	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d1a:	d027      	beq.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d22:	d879      	bhi.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d2a:	d017      	beq.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d32:	d871      	bhi.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d004      	beq.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d40:	d004      	beq.n	8009d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009d42:	e069      	b.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009d44:	f7fb fd66 	bl	8005814 <HAL_RCC_GetPCLK3Freq>
 8009d48:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009d4a:	e068      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d4c:	f107 0314 	add.w	r3, r7, #20
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fd fe6b 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d5a:	e060      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d5c:	f107 0308 	add.w	r3, r7, #8
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fd ffcf 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d6a:	e058      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009d6c:	4b7c      	ldr	r3, [pc, #496]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d72:	f003 0302 	and.w	r3, r3, #2
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d103      	bne.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d7e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009d80:	e04d      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009d82:	2300      	movs	r3, #0
 8009d84:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d86:	e04a      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009d88:	4b75      	ldr	r3, [pc, #468]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009d8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009d8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d96:	d103      	bne.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009d98:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d9c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009d9e:	e03e      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009da4:	e03b      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009da6:	4b6e      	ldr	r3, [pc, #440]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009dac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009db0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009db2:	4b6b      	ldr	r3, [pc, #428]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 0302 	and.w	r3, r3, #2
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d10c      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8009dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d109      	bne.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009dc4:	4b66      	ldr	r3, [pc, #408]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	08db      	lsrs	r3, r3, #3
 8009dca:	f003 0303 	and.w	r3, r3, #3
 8009dce:	4a65      	ldr	r2, [pc, #404]	@ (8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd6:	e01e      	b.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dd8:	4b61      	ldr	r3, [pc, #388]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009de4:	d106      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8009de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dec:	d102      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009dee:	4b5e      	ldr	r3, [pc, #376]	@ (8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009df2:	e010      	b.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009df4:	4b5a      	ldr	r3, [pc, #360]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e00:	d106      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e08:	d102      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009e0a:	4b58      	ldr	r3, [pc, #352]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e0e:	e002      	b.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009e14:	e003      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8009e16:	e002      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e1c:	bf00      	nop
          }
        }
        break;
 8009e1e:	f000 bc28 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009e22:	4b4f      	ldr	r3, [pc, #316]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e2c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e3a:	d106      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d103      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009e42:	4b4a      	ldr	r3, [pc, #296]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009e44:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009e46:	f000 bc14 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e50:	d108      	bne.n	8009e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e52:	f107 0320 	add.w	r3, r7, #32
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fd fc7c 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e60:	f000 bc07 	b.w	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e6a:	d107      	bne.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e6c:	f107 0314 	add.w	r3, r7, #20
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fd fddb 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e7a:	e3fa      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e80:	e3f7      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009e82:	4b37      	ldr	r3, [pc, #220]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d861      	bhi.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009e94:	a201      	add	r2, pc, #4	@ (adr r2, 8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9a:	bf00      	nop
 8009e9c:	08009eb1 	.word	0x08009eb1
 8009ea0:	08009ec1 	.word	0x08009ec1
 8009ea4:	08009ed1 	.word	0x08009ed1
 8009ea8:	08009ee1 	.word	0x08009ee1
 8009eac:	08009ee7 	.word	0x08009ee7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eb0:	f107 0320 	add.w	r3, r7, #32
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fd fc4d 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ebe:	e04e      	b.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ec0:	f107 0314 	add.w	r3, r7, #20
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fd fdb1 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ece:	e046      	b.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ed0:	f107 0308 	add.w	r3, r7, #8
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fd ff15 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ede:	e03e      	b.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009ee0:	4b23      	ldr	r3, [pc, #140]	@ (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8009ee2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ee4:	e03b      	b.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009eec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 0302 	and.w	r3, r3, #2
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d10c      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d109      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f04:	4b16      	ldr	r3, [pc, #88]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	08db      	lsrs	r3, r3, #3
 8009f0a:	f003 0303 	and.w	r3, r3, #3
 8009f0e:	4a15      	ldr	r2, [pc, #84]	@ (8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009f10:	fa22 f303 	lsr.w	r3, r2, r3
 8009f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f16:	e01e      	b.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f18:	4b11      	ldr	r3, [pc, #68]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f24:	d106      	bne.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f2c:	d102      	bne.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f32:	e010      	b.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f34:	4b0a      	ldr	r3, [pc, #40]	@ (8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f40:	d106      	bne.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f48:	d102      	bne.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009f4a:	4b08      	ldr	r3, [pc, #32]	@ (8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f4e:	e002      	b.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009f54:	e003      	b.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009f56:	e002      	b.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f5c:	bf00      	nop
          }
        }
        break;
 8009f5e:	e388      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f60:	44020c00 	.word	0x44020c00
 8009f64:	03d09000 	.word	0x03d09000
 8009f68:	003d0900 	.word	0x003d0900
 8009f6c:	007a1200 	.word	0x007a1200
 8009f70:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009f74:	4ba9      	ldr	r3, [pc, #676]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f82:	2b20      	cmp	r3, #32
 8009f84:	f200 809a 	bhi.w	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009f88:	a201      	add	r2, pc, #4	@ (adr r2, 8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	0800a015 	.word	0x0800a015
 8009f94:	0800a0bd 	.word	0x0800a0bd
 8009f98:	0800a0bd 	.word	0x0800a0bd
 8009f9c:	0800a0bd 	.word	0x0800a0bd
 8009fa0:	0800a0bd 	.word	0x0800a0bd
 8009fa4:	0800a0bd 	.word	0x0800a0bd
 8009fa8:	0800a0bd 	.word	0x0800a0bd
 8009fac:	0800a0bd 	.word	0x0800a0bd
 8009fb0:	0800a025 	.word	0x0800a025
 8009fb4:	0800a0bd 	.word	0x0800a0bd
 8009fb8:	0800a0bd 	.word	0x0800a0bd
 8009fbc:	0800a0bd 	.word	0x0800a0bd
 8009fc0:	0800a0bd 	.word	0x0800a0bd
 8009fc4:	0800a0bd 	.word	0x0800a0bd
 8009fc8:	0800a0bd 	.word	0x0800a0bd
 8009fcc:	0800a0bd 	.word	0x0800a0bd
 8009fd0:	0800a035 	.word	0x0800a035
 8009fd4:	0800a0bd 	.word	0x0800a0bd
 8009fd8:	0800a0bd 	.word	0x0800a0bd
 8009fdc:	0800a0bd 	.word	0x0800a0bd
 8009fe0:	0800a0bd 	.word	0x0800a0bd
 8009fe4:	0800a0bd 	.word	0x0800a0bd
 8009fe8:	0800a0bd 	.word	0x0800a0bd
 8009fec:	0800a0bd 	.word	0x0800a0bd
 8009ff0:	0800a045 	.word	0x0800a045
 8009ff4:	0800a0bd 	.word	0x0800a0bd
 8009ff8:	0800a0bd 	.word	0x0800a0bd
 8009ffc:	0800a0bd 	.word	0x0800a0bd
 800a000:	0800a0bd 	.word	0x0800a0bd
 800a004:	0800a0bd 	.word	0x0800a0bd
 800a008:	0800a0bd 	.word	0x0800a0bd
 800a00c:	0800a0bd 	.word	0x0800a0bd
 800a010:	0800a04b 	.word	0x0800a04b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a014:	f107 0320 	add.w	r3, r7, #32
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fd fb9b 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a020:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a022:	e04e      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a024:	f107 0314 	add.w	r3, r7, #20
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fd fcff 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a032:	e046      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a034:	f107 0308 	add.w	r3, r7, #8
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fd fe63 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a042:	e03e      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a044:	4b76      	ldr	r3, [pc, #472]	@ (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a046:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a048:	e03b      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a04a:	4b74      	ldr	r3, [pc, #464]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a04c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a050:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a054:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a056:	4b71      	ldr	r3, [pc, #452]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 0302 	and.w	r3, r3, #2
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d10c      	bne.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800a062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a064:	2b00      	cmp	r3, #0
 800a066:	d109      	bne.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a068:	4b6c      	ldr	r3, [pc, #432]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	08db      	lsrs	r3, r3, #3
 800a06e:	f003 0303 	and.w	r3, r3, #3
 800a072:	4a6c      	ldr	r2, [pc, #432]	@ (800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a074:	fa22 f303 	lsr.w	r3, r2, r3
 800a078:	637b      	str	r3, [r7, #52]	@ 0x34
 800a07a:	e01e      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a07c:	4b67      	ldr	r3, [pc, #412]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a088:	d106      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800a08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a08c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a090:	d102      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a092:	4b65      	ldr	r3, [pc, #404]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a094:	637b      	str	r3, [r7, #52]	@ 0x34
 800a096:	e010      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a098:	4b60      	ldr	r3, [pc, #384]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0a4:	d106      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800a0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0ac:	d102      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a0ae:	4b5f      	ldr	r3, [pc, #380]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b2:	e002      	b.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a0b8:	e003      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800a0ba:	e002      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0c0:	bf00      	nop
          }
        }
        break;
 800a0c2:	e2d6      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a0c4:	4b55      	ldr	r3, [pc, #340]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a0ca:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a0ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0d6:	d031      	beq.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0de:	d866      	bhi.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0e4:	d027      	beq.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e8:	2bc0      	cmp	r3, #192	@ 0xc0
 800a0ea:	d860      	bhi.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ee:	2b80      	cmp	r3, #128	@ 0x80
 800a0f0:	d019      	beq.n	800a126 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	2b80      	cmp	r3, #128	@ 0x80
 800a0f6:	d85a      	bhi.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800a0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a100:	2b40      	cmp	r3, #64	@ 0x40
 800a102:	d008      	beq.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800a104:	e053      	b.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a106:	f107 0320 	add.w	r3, r7, #32
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fd fb22 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a112:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a114:	e04e      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a116:	f107 0314 	add.w	r3, r7, #20
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fd fc86 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a124:	e046      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a126:	f107 0308 	add.w	r3, r7, #8
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7fd fdea 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a134:	e03e      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a136:	4b3a      	ldr	r3, [pc, #232]	@ (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a138:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a13a:	e03b      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a13c:	4b37      	ldr	r3, [pc, #220]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a13e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a142:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a146:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a148:	4b34      	ldr	r3, [pc, #208]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 0302 	and.w	r3, r3, #2
 800a150:	2b02      	cmp	r3, #2
 800a152:	d10c      	bne.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800a154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a156:	2b00      	cmp	r3, #0
 800a158:	d109      	bne.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a15a:	4b30      	ldr	r3, [pc, #192]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	08db      	lsrs	r3, r3, #3
 800a160:	f003 0303 	and.w	r3, r3, #3
 800a164:	4a2f      	ldr	r2, [pc, #188]	@ (800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a166:	fa22 f303 	lsr.w	r3, r2, r3
 800a16a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a16c:	e01e      	b.n	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a16e:	4b2b      	ldr	r3, [pc, #172]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a176:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a17a:	d106      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800a17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a182:	d102      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a184:	4b28      	ldr	r3, [pc, #160]	@ (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a186:	637b      	str	r3, [r7, #52]	@ 0x34
 800a188:	e010      	b.n	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a18a:	4b24      	ldr	r3, [pc, #144]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a192:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a196:	d106      	bne.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800a198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a19a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a19e:	d102      	bne.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a1a0:	4b22      	ldr	r3, [pc, #136]	@ (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a1a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a4:	e002      	b.n	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a1aa:	e003      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800a1ac:	e002      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1b2:	bf00      	nop
          }
        }
        break;
 800a1b4:	e25d      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800a1b6:	4b19      	ldr	r3, [pc, #100]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a1bc:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a1c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d103      	bne.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a1c8:	f7fb fb0e 	bl	80057e8 <HAL_RCC_GetPCLK2Freq>
 800a1cc:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a1ce:	e250      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800a1d0:	4b12      	ldr	r3, [pc, #72]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1dc:	d10b      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1e4:	d107      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1e6:	f107 0314 	add.w	r3, r7, #20
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fd fc1e 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f4:	e04f      	b.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800a1f6:	4b09      	ldr	r3, [pc, #36]	@ (800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a202:	d115      	bne.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800a204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a20a:	d111      	bne.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a20c:	f107 0308 	add.w	r3, r7, #8
 800a210:	4618      	mov	r0, r3
 800a212:	f7fd fd77 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	637b      	str	r3, [r7, #52]	@ 0x34
 800a21a:	e03c      	b.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800a21c:	44020c00 	.word	0x44020c00
 800a220:	00bb8000 	.word	0x00bb8000
 800a224:	03d09000 	.word	0x03d09000
 800a228:	003d0900 	.word	0x003d0900
 800a22c:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800a230:	4b94      	ldr	r3, [pc, #592]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0302 	and.w	r3, r3, #2
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d10d      	bne.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800a23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a23e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a242:	d109      	bne.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a244:	4b8f      	ldr	r3, [pc, #572]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	08db      	lsrs	r3, r3, #3
 800a24a:	f003 0303 	and.w	r3, r3, #3
 800a24e:	4a8e      	ldr	r2, [pc, #568]	@ (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a250:	fa22 f303 	lsr.w	r3, r2, r3
 800a254:	637b      	str	r3, [r7, #52]	@ 0x34
 800a256:	e01e      	b.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800a258:	4b8a      	ldr	r3, [pc, #552]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a264:	d106      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800a266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a26c:	d102      	bne.n	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800a26e:	4b87      	ldr	r3, [pc, #540]	@ (800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a270:	637b      	str	r3, [r7, #52]	@ 0x34
 800a272:	e010      	b.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800a274:	4b83      	ldr	r3, [pc, #524]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a27c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a280:	d106      	bne.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a288:	d102      	bne.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800a28a:	4b81      	ldr	r3, [pc, #516]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a28c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a28e:	e002      	b.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800a290:	2300      	movs	r3, #0
 800a292:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a294:	e1ed      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a296:	e1ec      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800a298:	4b7a      	ldr	r3, [pc, #488]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a29a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a29e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a2a2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d103      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a2aa:	f7fb fab3 	bl	8005814 <HAL_RCC_GetPCLK3Freq>
 800a2ae:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a2b0:	e1df      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800a2b2:	4b74      	ldr	r3, [pc, #464]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2be:	d10b      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2c6:	d107      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2c8:	f107 0314 	add.w	r3, r7, #20
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fd fbad 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2d6:	e045      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800a2d8:	4b6a      	ldr	r3, [pc, #424]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2e4:	d10b      	bne.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2ec:	d107      	bne.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2ee:	f107 0308 	add.w	r3, r7, #8
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7fd fd06 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2fc:	e032      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800a2fe:	4b61      	ldr	r3, [pc, #388]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b02      	cmp	r3, #2
 800a308:	d10d      	bne.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800a30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a310:	d109      	bne.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a312:	4b5c      	ldr	r3, [pc, #368]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	08db      	lsrs	r3, r3, #3
 800a318:	f003 0303 	and.w	r3, r3, #3
 800a31c:	4a5a      	ldr	r2, [pc, #360]	@ (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a31e:	fa22 f303 	lsr.w	r3, r2, r3
 800a322:	637b      	str	r3, [r7, #52]	@ 0x34
 800a324:	e01e      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800a326:	4b57      	ldr	r3, [pc, #348]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a32e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a332:	d106      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800a334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a33a:	d102      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800a33c:	4b53      	ldr	r3, [pc, #332]	@ (800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a33e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a340:	e010      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800a342:	4b50      	ldr	r3, [pc, #320]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a34a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a34e:	d106      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800a350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a352:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a356:	d102      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800a358:	4b4d      	ldr	r3, [pc, #308]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a35a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a35c:	e002      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800a35e:	2300      	movs	r3, #0
 800a360:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a362:	e186      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a364:	e185      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a366:	4b47      	ldr	r3, [pc, #284]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a36c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a370:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	2b00      	cmp	r3, #0
 800a376:	d103      	bne.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a378:	f7fb fa36 	bl	80057e8 <HAL_RCC_GetPCLK2Freq>
 800a37c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a37e:	e178      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800a380:	4b40      	ldr	r3, [pc, #256]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a38c:	d10b      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800a38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a394:	d107      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a396:	f107 0314 	add.w	r3, r7, #20
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fd fb46 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3a4:	e045      	b.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800a3a6:	4b37      	ldr	r3, [pc, #220]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3b2:	d10b      	bne.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3ba:	d107      	bne.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3bc:	f107 0308 	add.w	r3, r7, #8
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fd fc9f 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ca:	e032      	b.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800a3cc:	4b2d      	ldr	r3, [pc, #180]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 0302 	and.w	r3, r3, #2
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d10d      	bne.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3da:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a3de:	d109      	bne.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a3e0:	4b28      	ldr	r3, [pc, #160]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	08db      	lsrs	r3, r3, #3
 800a3e6:	f003 0303 	and.w	r3, r3, #3
 800a3ea:	4a27      	ldr	r2, [pc, #156]	@ (800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a3ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f2:	e01e      	b.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800a3f4:	4b23      	ldr	r3, [pc, #140]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a400:	d106      	bne.n	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800a402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a408:	d102      	bne.n	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800a40a:	4b20      	ldr	r3, [pc, #128]	@ (800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a40c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a40e:	e010      	b.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800a410:	4b1c      	ldr	r3, [pc, #112]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a41c:	d106      	bne.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800a41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a420:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a424:	d102      	bne.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800a426:	4b1a      	ldr	r3, [pc, #104]	@ (800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a428:	637b      	str	r3, [r7, #52]	@ 0x34
 800a42a:	e002      	b.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800a42c:	2300      	movs	r3, #0
 800a42e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a430:	e11f      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a432:	e11e      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a434:	4b13      	ldr	r3, [pc, #76]	@ (800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a436:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a43a:	f003 0303 	and.w	r3, r3, #3
 800a43e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a442:	2b03      	cmp	r3, #3
 800a444:	d85f      	bhi.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800a446:	a201      	add	r2, pc, #4	@ (adr r2, 800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a45d 	.word	0x0800a45d
 800a450:	0800a465 	.word	0x0800a465
 800a454:	0800a475 	.word	0x0800a475
 800a458:	0800a495 	.word	0x0800a495

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800a45c:	f7fb f992 	bl	8005784 <HAL_RCC_GetHCLKFreq>
 800a460:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a462:	e053      	b.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a464:	f107 0320 	add.w	r3, r7, #32
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fd f973 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a470:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a472:	e04b      	b.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a474:	f107 0314 	add.w	r3, r7, #20
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fd fad7 	bl	8007a2c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a482:	e043      	b.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a484:	44020c00 	.word	0x44020c00
 800a488:	03d09000 	.word	0x03d09000
 800a48c:	003d0900 	.word	0x003d0900
 800a490:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a494:	4b79      	ldr	r3, [pc, #484]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a496:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a49a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a49e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4a0:	4b76      	ldr	r3, [pc, #472]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0302 	and.w	r3, r3, #2
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d10c      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800a4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d109      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a4b2:	4b72      	ldr	r3, [pc, #456]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	08db      	lsrs	r3, r3, #3
 800a4b8:	f003 0303 	and.w	r3, r3, #3
 800a4bc:	4a70      	ldr	r2, [pc, #448]	@ (800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800a4be:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4c4:	e01e      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4c6:	4b6d      	ldr	r3, [pc, #436]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4d2:	d106      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800a4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4da:	d102      	bne.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a4dc:	4b69      	ldr	r3, [pc, #420]	@ (800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800a4de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4e0:	e010      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4e2:	4b66      	ldr	r3, [pc, #408]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ee:	d106      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800a4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4f6:	d102      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a4f8:	4b63      	ldr	r3, [pc, #396]	@ (800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800a4fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4fc:	e002      	b.n	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a4fe:	2300      	movs	r3, #0
 800a500:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a502:	e003      	b.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a504:	e002      	b.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800a506:	2300      	movs	r3, #0
 800a508:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a50a:	bf00      	nop
          }
        }
        break;
 800a50c:	e0b1      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800a50e:	4b5b      	ldr	r3, [pc, #364]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a514:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a518:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800a51a:	4b58      	ldr	r3, [pc, #352]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a51c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a520:	f003 0302 	and.w	r3, r3, #2
 800a524:	2b02      	cmp	r3, #2
 800a526:	d106      	bne.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800a528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d103      	bne.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800a52e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a532:	637b      	str	r3, [r7, #52]	@ 0x34
 800a534:	e01f      	b.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800a536:	4b51      	ldr	r3, [pc, #324]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a53c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a544:	d106      	bne.n	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800a546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a548:	2b40      	cmp	r3, #64	@ 0x40
 800a54a:	d103      	bne.n	800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800a54c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a550:	637b      	str	r3, [r7, #52]	@ 0x34
 800a552:	e010      	b.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800a554:	4b49      	ldr	r3, [pc, #292]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a55c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a560:	d106      	bne.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800a562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a564:	2b80      	cmp	r3, #128	@ 0x80
 800a566:	d103      	bne.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800a568:	f248 0312 	movw	r3, #32786	@ 0x8012
 800a56c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a56e:	e002      	b.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800a570:	2300      	movs	r3, #0
 800a572:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a574:	e07d      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a576:	e07c      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a578:	4b40      	ldr	r3, [pc, #256]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a57a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a57e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a582:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a584:	4b3d      	ldr	r3, [pc, #244]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a58c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a590:	d105      	bne.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800a592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800a598:	4b3c      	ldr	r3, [pc, #240]	@ (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a59a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a59c:	e031      	b.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800a59e:	4b37      	ldr	r3, [pc, #220]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5aa:	d10a      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800a5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ae:	2b10      	cmp	r3, #16
 800a5b0:	d107      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5b2:	f107 0320 	add.w	r3, r7, #32
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fd f8cc 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5c0:	e01f      	b.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a5c2:	4b2e      	ldr	r3, [pc, #184]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5c8:	f003 0302 	and.w	r3, r3, #2
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d106      	bne.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d2:	2b20      	cmp	r3, #32
 800a5d4:	d103      	bne.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800a5d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5dc:	e011      	b.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800a5de:	4b27      	ldr	r3, [pc, #156]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5ec:	d106      	bne.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f0:	2b30      	cmp	r3, #48	@ 0x30
 800a5f2:	d103      	bne.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800a5f4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a5f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5fa:	e002      	b.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a600:	e037      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a602:	e036      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a604:	4b1d      	ldr	r3, [pc, #116]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a606:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a60a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a60e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a612:	2b10      	cmp	r3, #16
 800a614:	d107      	bne.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a616:	f107 0320 	add.w	r3, r7, #32
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fd f89a 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a622:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a624:	e025      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800a626:	4b15      	ldr	r3, [pc, #84]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a62e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a632:	d10a      	bne.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800a634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a636:	2b20      	cmp	r3, #32
 800a638:	d107      	bne.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a63a:	f107 0308 	add.w	r3, r7, #8
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fd fb60 	bl	8007d04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	637b      	str	r3, [r7, #52]	@ 0x34
 800a648:	e00f      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a64a:	4b0c      	ldr	r3, [pc, #48]	@ (800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a656:	d105      	bne.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800a658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65a:	2b30      	cmp	r3, #48	@ 0x30
 800a65c:	d102      	bne.n	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800a65e:	4b0b      	ldr	r3, [pc, #44]	@ (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a660:	637b      	str	r3, [r7, #52]	@ 0x34
 800a662:	e002      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a664:	2300      	movs	r3, #0
 800a666:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800a668:	e003      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a66a:	e002      	b.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a670:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800a672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a674:	4618      	mov	r0, r3
 800a676:	373c      	adds	r7, #60	@ 0x3c
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd90      	pop	{r4, r7, pc}
 800a67c:	44020c00 	.word	0x44020c00
 800a680:	03d09000 	.word	0x03d09000
 800a684:	003d0900 	.word	0x003d0900
 800a688:	007a1200 	.word	0x007a1200
 800a68c:	02dc6c00 	.word	0x02dc6c00

0800a690 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a698:	4b48      	ldr	r3, [pc, #288]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a47      	ldr	r2, [pc, #284]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a69e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a6a2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a6a4:	f7f7 ff18 	bl	80024d8 <HAL_GetTick>
 800a6a8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a6aa:	e008      	b.n	800a6be <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a6ac:	f7f7 ff14 	bl	80024d8 <HAL_GetTick>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d901      	bls.n	800a6be <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e07a      	b.n	800a7b4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a6be:	4b3f      	ldr	r3, [pc, #252]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1f0      	bne.n	800a6ac <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a6ca:	4b3c      	ldr	r3, [pc, #240]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a6d2:	f023 0303 	bic.w	r3, r3, #3
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	6811      	ldr	r1, [r2, #0]
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	6852      	ldr	r2, [r2, #4]
 800a6de:	0212      	lsls	r2, r2, #8
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	4936      	ldr	r1, [pc, #216]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	025b      	lsls	r3, r3, #9
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	431a      	orrs	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	691b      	ldr	r3, [r3, #16]
 800a702:	3b01      	subs	r3, #1
 800a704:	041b      	lsls	r3, r3, #16
 800a706:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a70a:	431a      	orrs	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	3b01      	subs	r3, #1
 800a712:	061b      	lsls	r3, r3, #24
 800a714:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a718:	4928      	ldr	r1, [pc, #160]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a71a:	4313      	orrs	r3, r2
 800a71c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a71e:	4b27      	ldr	r3, [pc, #156]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a722:	f023 020c 	bic.w	r2, r3, #12
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	4924      	ldr	r1, [pc, #144]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a72c:	4313      	orrs	r3, r2
 800a72e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a730:	4b22      	ldr	r3, [pc, #136]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a734:	f023 0220 	bic.w	r2, r3, #32
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	69db      	ldr	r3, [r3, #28]
 800a73c:	491f      	ldr	r1, [pc, #124]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a742:	4b1e      	ldr	r3, [pc, #120]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74a:	491c      	ldr	r1, [pc, #112]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a74c:	4313      	orrs	r3, r2
 800a74e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a750:	4b1a      	ldr	r3, [pc, #104]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a754:	4a19      	ldr	r2, [pc, #100]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a756:	f023 0310 	bic.w	r3, r3, #16
 800a75a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a75c:	4b17      	ldr	r3, [pc, #92]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a75e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a760:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a764:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	6a12      	ldr	r2, [r2, #32]
 800a76c:	00d2      	lsls	r2, r2, #3
 800a76e:	4913      	ldr	r1, [pc, #76]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a770:	4313      	orrs	r3, r2
 800a772:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a774:	4b11      	ldr	r3, [pc, #68]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a778:	4a10      	ldr	r2, [pc, #64]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a77a:	f043 0310 	orr.w	r3, r3, #16
 800a77e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a780:	4b0e      	ldr	r3, [pc, #56]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a0d      	ldr	r2, [pc, #52]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a786:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a78a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a78c:	f7f7 fea4 	bl	80024d8 <HAL_GetTick>
 800a790:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a792:	e008      	b.n	800a7a6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a794:	f7f7 fea0 	bl	80024d8 <HAL_GetTick>
 800a798:	4602      	mov	r2, r0
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d901      	bls.n	800a7a6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	e006      	b.n	800a7b4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a7a6:	4b05      	ldr	r3, [pc, #20]	@ (800a7bc <RCCEx_PLL2_Config+0x12c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d0f0      	beq.n	800a794 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0

}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	44020c00 	.word	0x44020c00

0800a7c0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a7c8:	4b48      	ldr	r3, [pc, #288]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a47      	ldr	r2, [pc, #284]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a7ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a7d2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a7d4:	f7f7 fe80 	bl	80024d8 <HAL_GetTick>
 800a7d8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a7da:	e008      	b.n	800a7ee <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a7dc:	f7f7 fe7c 	bl	80024d8 <HAL_GetTick>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d901      	bls.n	800a7ee <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	e07a      	b.n	800a8e4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a7ee:	4b3f      	ldr	r3, [pc, #252]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d1f0      	bne.n	800a7dc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a7fa:	4b3c      	ldr	r3, [pc, #240]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a7fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7fe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a802:	f023 0303 	bic.w	r3, r3, #3
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	6811      	ldr	r1, [r2, #0]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	6852      	ldr	r2, [r2, #4]
 800a80e:	0212      	lsls	r2, r2, #8
 800a810:	430a      	orrs	r2, r1
 800a812:	4936      	ldr	r1, [pc, #216]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a814:	4313      	orrs	r3, r2
 800a816:	630b      	str	r3, [r1, #48]	@ 0x30
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	3b01      	subs	r3, #1
 800a828:	025b      	lsls	r3, r3, #9
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	431a      	orrs	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	3b01      	subs	r3, #1
 800a834:	041b      	lsls	r3, r3, #16
 800a836:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a83a:	431a      	orrs	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	695b      	ldr	r3, [r3, #20]
 800a840:	3b01      	subs	r3, #1
 800a842:	061b      	lsls	r3, r3, #24
 800a844:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a848:	4928      	ldr	r1, [pc, #160]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a84e:	4b27      	ldr	r3, [pc, #156]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a852:	f023 020c 	bic.w	r2, r3, #12
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	4924      	ldr	r1, [pc, #144]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a85c:	4313      	orrs	r3, r2
 800a85e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a860:	4b22      	ldr	r3, [pc, #136]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a864:	f023 0220 	bic.w	r2, r3, #32
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	491f      	ldr	r1, [pc, #124]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a872:	4b1e      	ldr	r3, [pc, #120]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87a:	491c      	ldr	r1, [pc, #112]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a87c:	4313      	orrs	r3, r2
 800a87e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a880:	4b1a      	ldr	r3, [pc, #104]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a884:	4a19      	ldr	r2, [pc, #100]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a886:	f023 0310 	bic.w	r3, r3, #16
 800a88a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a88c:	4b17      	ldr	r3, [pc, #92]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a88e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a890:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a894:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	6a12      	ldr	r2, [r2, #32]
 800a89c:	00d2      	lsls	r2, r2, #3
 800a89e:	4913      	ldr	r1, [pc, #76]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a8a4:	4b11      	ldr	r3, [pc, #68]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a8a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8a8:	4a10      	ldr	r2, [pc, #64]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a8aa:	f043 0310 	orr.w	r3, r3, #16
 800a8ae:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a8b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a0d      	ldr	r2, [pc, #52]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a8b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8ba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a8bc:	f7f7 fe0c 	bl	80024d8 <HAL_GetTick>
 800a8c0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a8c2:	e008      	b.n	800a8d6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a8c4:	f7f7 fe08 	bl	80024d8 <HAL_GetTick>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d901      	bls.n	800a8d6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a8d2:	2303      	movs	r3, #3
 800a8d4:	e006      	b.n	800a8e4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a8d6:	4b05      	ldr	r3, [pc, #20]	@ (800a8ec <RCCEx_PLL3_Config+0x12c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d0f0      	beq.n	800a8c4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	44020c00 	.word	0x44020c00

0800a8f0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e08c      	b.n	800aa1c <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	7a5b      	ldrb	r3, [r3, #9]
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d105      	bne.n	800a918 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7f6 fdf4 	bl	8001500 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f022 0204 	bic.w	r2, r2, #4
 800a92c:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6859      	ldr	r1, [r3, #4]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	4b3b      	ldr	r3, [pc, #236]	@ (800aa24 <HAL_RNG_Init+0x134>)
 800a938:	430b      	orrs	r3, r1
 800a93a:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800a944:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a37      	ldr	r2, [pc, #220]	@ (800aa28 <HAL_RNG_Init+0x138>)
 800a94c:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a95c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a95e:	f7f7 fdbb 	bl	80024d8 <HAL_GetTick>
 800a962:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a964:	e016      	b.n	800a994 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a966:	f7f7 fdb7 	bl	80024d8 <HAL_GetTick>
 800a96a:	4602      	mov	r2, r0
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	2b04      	cmp	r3, #4
 800a972:	d90f      	bls.n	800a994 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a97e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a982:	d107      	bne.n	800a994 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2202      	movs	r2, #2
 800a98e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e043      	b.n	800aa1c <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a99e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9a2:	d0e0      	beq.n	800a966 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f042 0204 	orr.w	r2, r2, #4
 800a9b2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9be:	2b40      	cmp	r3, #64	@ 0x40
 800a9c0:	d104      	bne.n	800a9cc <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2204      	movs	r2, #4
 800a9c6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e027      	b.n	800aa1c <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a9cc:	f7f7 fd84 	bl	80024d8 <HAL_GetTick>
 800a9d0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a9d2:	e015      	b.n	800aa00 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a9d4:	f7f7 fd80 	bl	80024d8 <HAL_GetTick>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	d90e      	bls.n	800aa00 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d007      	beq.n	800aa00 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2204      	movs	r2, #4
 800a9f4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e00d      	b.n	800aa1c <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d1e2      	bne.n	800a9d4 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	40f00e00 	.word	0x40f00e00
 800aa28:	0003af66 	.word	0x0003af66

0800aa2c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d071      	beq.n	800ab22 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d106      	bne.n	800aa58 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7f6 fdac 	bl	80015b0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800aa60:	4b32      	ldr	r3, [pc, #200]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	f003 0310 	and.w	r3, r3, #16
 800aa68:	2b10      	cmp	r3, #16
 800aa6a:	d051      	beq.n	800ab10 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aa6c:	4b2f      	ldr	r3, [pc, #188]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800aa6e:	22ca      	movs	r2, #202	@ 0xca
 800aa70:	625a      	str	r2, [r3, #36]	@ 0x24
 800aa72:	4b2e      	ldr	r3, [pc, #184]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800aa74:	2253      	movs	r2, #83	@ 0x53
 800aa76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f9a3 	bl	800adc4 <RTC_EnterInitMode>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d13f      	bne.n	800ab08 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800aa88:	4b28      	ldr	r3, [pc, #160]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	4a27      	ldr	r2, [pc, #156]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800aa8e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800aa92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa96:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800aa98:	4b24      	ldr	r3, [pc, #144]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800aa9a:	699a      	ldr	r2, [r3, #24]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6859      	ldr	r1, [r3, #4]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	4319      	orrs	r1, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	430b      	orrs	r3, r1
 800aaac:	491f      	ldr	r1, [pc, #124]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800aaae:	4313      	orrs	r3, r2
 800aab0:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68da      	ldr	r2, [r3, #12]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	041b      	lsls	r3, r3, #16
 800aabc:	491b      	ldr	r1, [pc, #108]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800aabe:	4313      	orrs	r3, r2
 800aac0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800aac2:	4b1a      	ldr	r3, [pc, #104]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800aac4:	68db      	ldr	r3, [r3, #12]
 800aac6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad2:	430b      	orrs	r3, r1
 800aad4:	4915      	ldr	r1, [pc, #84]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f9ae 	bl	800ae3c <RTC_ExitInitMode>
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10e      	bne.n	800ab08 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800aaea:	4b10      	ldr	r3, [pc, #64]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800aaec:	699b      	ldr	r3, [r3, #24]
 800aaee:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a19      	ldr	r1, [r3, #32]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	4319      	orrs	r1, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	430b      	orrs	r3, r1
 800ab02:	490a      	ldr	r1, [pc, #40]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800ab04:	4313      	orrs	r3, r2
 800ab06:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab08:	4b08      	ldr	r3, [pc, #32]	@ (800ab2c <HAL_RTC_Init+0x100>)
 800ab0a:	22ff      	movs	r2, #255	@ 0xff
 800ab0c:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab0e:	e001      	b.n	800ab14 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d103      	bne.n	800ab22 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800ab22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	44007800 	.word	0x44007800

0800ab30 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ab30:	b590      	push	{r4, r7, lr}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d101      	bne.n	800ab4a <HAL_RTC_SetTime+0x1a>
 800ab46:	2302      	movs	r3, #2
 800ab48:	e07e      	b.n	800ac48 <HAL_RTC_SetTime+0x118>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2202      	movs	r2, #2
 800ab56:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab5a:	4b3d      	ldr	r3, [pc, #244]	@ (800ac50 <HAL_RTC_SetTime+0x120>)
 800ab5c:	22ca      	movs	r2, #202	@ 0xca
 800ab5e:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab60:	4b3b      	ldr	r3, [pc, #236]	@ (800ac50 <HAL_RTC_SetTime+0x120>)
 800ab62:	2253      	movs	r2, #83	@ 0x53
 800ab64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f000 f92c 	bl	800adc4 <RTC_EnterInitMode>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ab70:	7cfb      	ldrb	r3, [r7, #19]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d159      	bne.n	800ac2a <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800ab76:	4b36      	ldr	r3, [pc, #216]	@ (800ac50 <HAL_RTC_SetTime+0x120>)
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab82:	d04d      	beq.n	800ac20 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d125      	bne.n	800abd6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800ab8a:	4b31      	ldr	r3, [pc, #196]	@ (800ac50 <HAL_RTC_SetTime+0x120>)
 800ab8c:	699b      	ldr	r3, [r3, #24]
 800ab8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d102      	bne.n	800ab9c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 f989 	bl	800aeb8 <RTC_ByteToBcd2>
 800aba6:	4603      	mov	r3, r0
 800aba8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	785b      	ldrb	r3, [r3, #1]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 f982 	bl	800aeb8 <RTC_ByteToBcd2>
 800abb4:	4603      	mov	r3, r0
 800abb6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800abb8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	789b      	ldrb	r3, [r3, #2]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f000 f97a 	bl	800aeb8 <RTC_ByteToBcd2>
 800abc4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800abc6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	78db      	ldrb	r3, [r3, #3]
 800abce:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800abd0:	4313      	orrs	r3, r2
 800abd2:	617b      	str	r3, [r7, #20]
 800abd4:	e017      	b.n	800ac06 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800abd6:	4b1e      	ldr	r3, [pc, #120]	@ (800ac50 <HAL_RTC_SetTime+0x120>)
 800abd8:	699b      	ldr	r3, [r3, #24]
 800abda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d102      	bne.n	800abe8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2200      	movs	r2, #0
 800abe6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	785b      	ldrb	r3, [r3, #1]
 800abf2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800abf4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800abfa:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	78db      	ldrb	r3, [r3, #3]
 800ac00:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ac02:	4313      	orrs	r3, r2
 800ac04:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800ac06:	4a12      	ldr	r2, [pc, #72]	@ (800ac50 <HAL_RTC_SetTime+0x120>)
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800ac0e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ac12:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800ac14:	4b0e      	ldr	r3, [pc, #56]	@ (800ac50 <HAL_RTC_SetTime+0x120>)
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	4a0d      	ldr	r2, [pc, #52]	@ (800ac50 <HAL_RTC_SetTime+0x120>)
 800ac1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac1e:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 f90b 	bl	800ae3c <RTC_ExitInitMode>
 800ac26:	4603      	mov	r3, r0
 800ac28:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac2a:	4b09      	ldr	r3, [pc, #36]	@ (800ac50 <HAL_RTC_SetTime+0x120>)
 800ac2c:	22ff      	movs	r2, #255	@ 0xff
 800ac2e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800ac30:	7cfb      	ldrb	r3, [r7, #19]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d103      	bne.n	800ac3e <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800ac46:	7cfb      	ldrb	r3, [r7, #19]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	371c      	adds	r7, #28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd90      	pop	{r4, r7, pc}
 800ac50:	44007800 	.word	0x44007800

0800ac54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ac54:	b590      	push	{r4, r7, lr}
 800ac56:	b087      	sub	sp, #28
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d101      	bne.n	800ac6e <HAL_RTC_SetDate+0x1a>
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	e071      	b.n	800ad52 <HAL_RTC_SetDate+0xfe>
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2201      	movs	r2, #1
 800ac72:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2202      	movs	r2, #2
 800ac7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10e      	bne.n	800aca2 <HAL_RTC_SetDate+0x4e>
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	785b      	ldrb	r3, [r3, #1]
 800ac88:	f003 0310 	and.w	r3, r3, #16
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d008      	beq.n	800aca2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	785b      	ldrb	r3, [r3, #1]
 800ac94:	f023 0310 	bic.w	r3, r3, #16
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	330a      	adds	r3, #10
 800ac9c:	b2da      	uxtb	r2, r3
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d11c      	bne.n	800ace2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	78db      	ldrb	r3, [r3, #3]
 800acac:	4618      	mov	r0, r3
 800acae:	f000 f903 	bl	800aeb8 <RTC_ByteToBcd2>
 800acb2:	4603      	mov	r3, r0
 800acb4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	785b      	ldrb	r3, [r3, #1]
 800acba:	4618      	mov	r0, r3
 800acbc:	f000 f8fc 	bl	800aeb8 <RTC_ByteToBcd2>
 800acc0:	4603      	mov	r3, r0
 800acc2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800acc4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	789b      	ldrb	r3, [r3, #2]
 800acca:	4618      	mov	r0, r3
 800accc:	f000 f8f4 	bl	800aeb8 <RTC_ByteToBcd2>
 800acd0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800acd2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800acdc:	4313      	orrs	r3, r2
 800acde:	617b      	str	r3, [r7, #20]
 800ace0:	e00e      	b.n	800ad00 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	78db      	ldrb	r3, [r3, #3]
 800ace6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	785b      	ldrb	r3, [r3, #1]
 800acec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800acee:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800acf4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800acfc:	4313      	orrs	r3, r2
 800acfe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad00:	4b16      	ldr	r3, [pc, #88]	@ (800ad5c <HAL_RTC_SetDate+0x108>)
 800ad02:	22ca      	movs	r2, #202	@ 0xca
 800ad04:	625a      	str	r2, [r3, #36]	@ 0x24
 800ad06:	4b15      	ldr	r3, [pc, #84]	@ (800ad5c <HAL_RTC_SetDate+0x108>)
 800ad08:	2253      	movs	r2, #83	@ 0x53
 800ad0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f000 f859 	bl	800adc4 <RTC_EnterInitMode>
 800ad12:	4603      	mov	r3, r0
 800ad14:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ad16:	7cfb      	ldrb	r3, [r7, #19]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10b      	bne.n	800ad34 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800ad1c:	4a0f      	ldr	r2, [pc, #60]	@ (800ad5c <HAL_RTC_SetDate+0x108>)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ad24:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ad28:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f000 f886 	bl	800ae3c <RTC_ExitInitMode>
 800ad30:	4603      	mov	r3, r0
 800ad32:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad34:	4b09      	ldr	r3, [pc, #36]	@ (800ad5c <HAL_RTC_SetDate+0x108>)
 800ad36:	22ff      	movs	r2, #255	@ 0xff
 800ad38:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800ad3a:	7cfb      	ldrb	r3, [r7, #19]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d103      	bne.n	800ad48 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800ad50:	7cfb      	ldrb	r3, [r7, #19]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd90      	pop	{r4, r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	44007800 	.word	0x44007800

0800ad60 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800ad68:	4b15      	ldr	r3, [pc, #84]	@ (800adc0 <HAL_RTC_WaitForSynchro+0x60>)
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	4a14      	ldr	r2, [pc, #80]	@ (800adc0 <HAL_RTC_WaitForSynchro+0x60>)
 800ad6e:	f023 0320 	bic.w	r3, r3, #32
 800ad72:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800ad74:	f7f7 fbb0 	bl	80024d8 <HAL_GetTick>
 800ad78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ad7a:	e013      	b.n	800ada4 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ad7c:	f7f7 fbac 	bl	80024d8 <HAL_GetTick>
 800ad80:	4602      	mov	r2, r0
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad8a:	d90b      	bls.n	800ada4 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ad8c:	4b0c      	ldr	r3, [pc, #48]	@ (800adc0 <HAL_RTC_WaitForSynchro+0x60>)
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	f003 0320 	and.w	r3, r3, #32
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10c      	bne.n	800adb2 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2203      	movs	r2, #3
 800ad9c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e008      	b.n	800adb6 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ada4:	4b06      	ldr	r3, [pc, #24]	@ (800adc0 <HAL_RTC_WaitForSynchro+0x60>)
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	f003 0320 	and.w	r3, r3, #32
 800adac:	2b00      	cmp	r3, #0
 800adae:	d0e5      	beq.n	800ad7c <HAL_RTC_WaitForSynchro+0x1c>
 800adb0:	e000      	b.n	800adb4 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800adb2:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	44007800 	.word	0x44007800

0800adc4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800add0:	4b19      	ldr	r3, [pc, #100]	@ (800ae38 <RTC_EnterInitMode+0x74>)
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800add8:	2b00      	cmp	r3, #0
 800adda:	d128      	bne.n	800ae2e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800addc:	4b16      	ldr	r3, [pc, #88]	@ (800ae38 <RTC_EnterInitMode+0x74>)
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	4a15      	ldr	r2, [pc, #84]	@ (800ae38 <RTC_EnterInitMode+0x74>)
 800ade2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ade6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800ade8:	f7f7 fb76 	bl	80024d8 <HAL_GetTick>
 800adec:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800adee:	e013      	b.n	800ae18 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800adf0:	f7f7 fb72 	bl	80024d8 <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800adfe:	d90b      	bls.n	800ae18 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ae00:	4b0d      	ldr	r3, [pc, #52]	@ (800ae38 <RTC_EnterInitMode+0x74>)
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10f      	bne.n	800ae2c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2203      	movs	r2, #3
 800ae14:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ae18:	4b07      	ldr	r3, [pc, #28]	@ (800ae38 <RTC_EnterInitMode+0x74>)
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d104      	bne.n	800ae2e <RTC_EnterInitMode+0x6a>
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	d1e2      	bne.n	800adf0 <RTC_EnterInitMode+0x2c>
 800ae2a:	e000      	b.n	800ae2e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800ae2c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	44007800 	.word	0x44007800

0800ae3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ae48:	4b1a      	ldr	r3, [pc, #104]	@ (800aeb4 <RTC_ExitInitMode+0x78>)
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	4a19      	ldr	r2, [pc, #100]	@ (800aeb4 <RTC_ExitInitMode+0x78>)
 800ae4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae52:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800ae54:	4b17      	ldr	r3, [pc, #92]	@ (800aeb4 <RTC_ExitInitMode+0x78>)
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	f003 0320 	and.w	r3, r3, #32
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10c      	bne.n	800ae7a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff ff7d 	bl	800ad60 <HAL_RTC_WaitForSynchro>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d01e      	beq.n	800aeaa <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2203      	movs	r2, #3
 800ae70:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ae74:	2303      	movs	r3, #3
 800ae76:	73fb      	strb	r3, [r7, #15]
 800ae78:	e017      	b.n	800aeaa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ae7a:	4b0e      	ldr	r3, [pc, #56]	@ (800aeb4 <RTC_ExitInitMode+0x78>)
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	4a0d      	ldr	r2, [pc, #52]	@ (800aeb4 <RTC_ExitInitMode+0x78>)
 800ae80:	f023 0320 	bic.w	r3, r3, #32
 800ae84:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff ff6a 	bl	800ad60 <HAL_RTC_WaitForSynchro>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d005      	beq.n	800ae9e <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2203      	movs	r2, #3
 800ae96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ae9e:	4b05      	ldr	r3, [pc, #20]	@ (800aeb4 <RTC_ExitInitMode+0x78>)
 800aea0:	699b      	ldr	r3, [r3, #24]
 800aea2:	4a04      	ldr	r2, [pc, #16]	@ (800aeb4 <RTC_ExitInitMode+0x78>)
 800aea4:	f043 0320 	orr.w	r3, r3, #32
 800aea8:	6193      	str	r3, [r2, #24]
  }
  return status;
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	44007800 	.word	0x44007800

0800aeb8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4603      	mov	r3, r0
 800aec0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800aec6:	79fb      	ldrb	r3, [r7, #7]
 800aec8:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800aeca:	e005      	b.n	800aed8 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	3301      	adds	r3, #1
 800aed0:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800aed2:	7afb      	ldrb	r3, [r7, #11]
 800aed4:	3b0a      	subs	r3, #10
 800aed6:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800aed8:	7afb      	ldrb	r3, [r7, #11]
 800aeda:	2b09      	cmp	r3, #9
 800aedc:	d8f6      	bhi.n	800aecc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	011b      	lsls	r3, r3, #4
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	7afb      	ldrb	r3, [r7, #11]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	b2db      	uxtb	r3, r3
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	4910      	ldr	r1, [pc, #64]	@ (800af4c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800af0c:	4313      	orrs	r3, r2
 800af0e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	689a      	ldr	r2, [r3, #8]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	431a      	orrs	r2, r3
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	490c      	ldr	r1, [pc, #48]	@ (800af50 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800af20:	4313      	orrs	r3, r2
 800af22:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800af24:	4b0a      	ldr	r3, [pc, #40]	@ (800af50 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	6919      	ldr	r1, [r3, #16]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	695b      	ldr	r3, [r3, #20]
 800af34:	041b      	lsls	r3, r3, #16
 800af36:	430b      	orrs	r3, r1
 800af38:	4905      	ldr	r1, [pc, #20]	@ (800af50 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr
 800af4c:	44007800 	.word	0x44007800
 800af50:	44007c00 	.word	0x44007c00

0800af54 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d101      	bne.n	800af66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e162      	b.n	800b22c <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a70      	ldr	r2, [pc, #448]	@ (800b12c <HAL_SPI_Init+0x1d8>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d018      	beq.n	800afa2 <HAL_SPI_Init+0x4e>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a6e      	ldr	r2, [pc, #440]	@ (800b130 <HAL_SPI_Init+0x1dc>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d013      	beq.n	800afa2 <HAL_SPI_Init+0x4e>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a6d      	ldr	r2, [pc, #436]	@ (800b134 <HAL_SPI_Init+0x1e0>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d00e      	beq.n	800afa2 <HAL_SPI_Init+0x4e>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a6b      	ldr	r2, [pc, #428]	@ (800b138 <HAL_SPI_Init+0x1e4>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d009      	beq.n	800afa2 <HAL_SPI_Init+0x4e>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a6a      	ldr	r2, [pc, #424]	@ (800b13c <HAL_SPI_Init+0x1e8>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d004      	beq.n	800afa2 <HAL_SPI_Init+0x4e>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a68      	ldr	r2, [pc, #416]	@ (800b140 <HAL_SPI_Init+0x1ec>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	e000      	b.n	800afa4 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800afa2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a5f      	ldr	r2, [pc, #380]	@ (800b12c <HAL_SPI_Init+0x1d8>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d018      	beq.n	800afe6 <HAL_SPI_Init+0x92>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a5d      	ldr	r2, [pc, #372]	@ (800b130 <HAL_SPI_Init+0x1dc>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d013      	beq.n	800afe6 <HAL_SPI_Init+0x92>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a5c      	ldr	r2, [pc, #368]	@ (800b134 <HAL_SPI_Init+0x1e0>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d00e      	beq.n	800afe6 <HAL_SPI_Init+0x92>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a5a      	ldr	r2, [pc, #360]	@ (800b138 <HAL_SPI_Init+0x1e4>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d009      	beq.n	800afe6 <HAL_SPI_Init+0x92>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a59      	ldr	r2, [pc, #356]	@ (800b13c <HAL_SPI_Init+0x1e8>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d004      	beq.n	800afe6 <HAL_SPI_Init+0x92>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a57      	ldr	r2, [pc, #348]	@ (800b140 <HAL_SPI_Init+0x1ec>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d105      	bne.n	800aff2 <HAL_SPI_Init+0x9e>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	2b0f      	cmp	r3, #15
 800afec:	d901      	bls.n	800aff2 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e11c      	b.n	800b22c <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f91e 	bl	800b234 <SPI_GetPacketSize>
 800aff8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a4b      	ldr	r2, [pc, #300]	@ (800b12c <HAL_SPI_Init+0x1d8>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d018      	beq.n	800b036 <HAL_SPI_Init+0xe2>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a49      	ldr	r2, [pc, #292]	@ (800b130 <HAL_SPI_Init+0x1dc>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d013      	beq.n	800b036 <HAL_SPI_Init+0xe2>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a48      	ldr	r2, [pc, #288]	@ (800b134 <HAL_SPI_Init+0x1e0>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d00e      	beq.n	800b036 <HAL_SPI_Init+0xe2>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a46      	ldr	r2, [pc, #280]	@ (800b138 <HAL_SPI_Init+0x1e4>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d009      	beq.n	800b036 <HAL_SPI_Init+0xe2>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a45      	ldr	r2, [pc, #276]	@ (800b13c <HAL_SPI_Init+0x1e8>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d004      	beq.n	800b036 <HAL_SPI_Init+0xe2>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a43      	ldr	r2, [pc, #268]	@ (800b140 <HAL_SPI_Init+0x1ec>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d102      	bne.n	800b03c <HAL_SPI_Init+0xe8>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2b08      	cmp	r3, #8
 800b03a:	d820      	bhi.n	800b07e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b040:	4a40      	ldr	r2, [pc, #256]	@ (800b144 <HAL_SPI_Init+0x1f0>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d018      	beq.n	800b078 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a3f      	ldr	r2, [pc, #252]	@ (800b148 <HAL_SPI_Init+0x1f4>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d013      	beq.n	800b078 <HAL_SPI_Init+0x124>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a3d      	ldr	r2, [pc, #244]	@ (800b14c <HAL_SPI_Init+0x1f8>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d00e      	beq.n	800b078 <HAL_SPI_Init+0x124>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a3c      	ldr	r2, [pc, #240]	@ (800b150 <HAL_SPI_Init+0x1fc>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d009      	beq.n	800b078 <HAL_SPI_Init+0x124>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a3a      	ldr	r2, [pc, #232]	@ (800b154 <HAL_SPI_Init+0x200>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d004      	beq.n	800b078 <HAL_SPI_Init+0x124>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a39      	ldr	r2, [pc, #228]	@ (800b158 <HAL_SPI_Init+0x204>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d104      	bne.n	800b082 <HAL_SPI_Init+0x12e>
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b10      	cmp	r3, #16
 800b07c:	d901      	bls.n	800b082 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e0d4      	b.n	800b22c <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d106      	bne.n	800b09c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7f6 faea 	bl	8001670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2202      	movs	r2, #2
 800b0a0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f022 0201 	bic.w	r2, r2, #1
 800b0b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b0be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	699b      	ldr	r3, [r3, #24]
 800b0c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b0c8:	d119      	bne.n	800b0fe <HAL_SPI_Init+0x1aa>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b0d2:	d103      	bne.n	800b0dc <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d008      	beq.n	800b0ee <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10c      	bne.n	800b0fe <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b0e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0ec:	d107      	bne.n	800b0fe <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b0fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d028      	beq.n	800b15c <HAL_SPI_Init+0x208>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	2b06      	cmp	r3, #6
 800b110:	d924      	bls.n	800b15c <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	430a      	orrs	r2, r1
 800b126:	601a      	str	r2, [r3, #0]
 800b128:	e020      	b.n	800b16c <HAL_SPI_Init+0x218>
 800b12a:	bf00      	nop
 800b12c:	40014c00 	.word	0x40014c00
 800b130:	50014c00 	.word	0x50014c00
 800b134:	44002000 	.word	0x44002000
 800b138:	54002000 	.word	0x54002000
 800b13c:	40015000 	.word	0x40015000
 800b140:	50015000 	.word	0x50015000
 800b144:	40013000 	.word	0x40013000
 800b148:	50013000 	.word	0x50013000
 800b14c:	40003800 	.word	0x40003800
 800b150:	50003800 	.word	0x50003800
 800b154:	40003c00 	.word	0x40003c00
 800b158:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b16a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	69da      	ldr	r2, [r3, #28]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b174:	431a      	orrs	r2, r3
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	431a      	orrs	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b17e:	ea42 0103 	orr.w	r1, r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68da      	ldr	r2, [r3, #12]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	430a      	orrs	r2, r1
 800b18c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b196:	431a      	orrs	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b19c:	431a      	orrs	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	431a      	orrs	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	431a      	orrs	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a1b      	ldr	r3, [r3, #32]
 800b1b4:	431a      	orrs	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	431a      	orrs	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	431a      	orrs	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1d8:	ea42 0103 	orr.w	r1, r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	430a      	orrs	r2, r1
 800b1e6:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f022 0201 	bic.w	r2, r2, #1
 800b1f6:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00a      	beq.n	800b21a <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	430a      	orrs	r2, r1
 800b218:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b240:	095b      	lsrs	r3, r3, #5
 800b242:	3301      	adds	r3, #1
 800b244:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	3301      	adds	r3, #1
 800b24c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	3307      	adds	r3, #7
 800b252:	08db      	lsrs	r3, r3, #3
 800b254:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b26a:	b580      	push	{r7, lr}
 800b26c:	b082      	sub	sp, #8
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	e042      	b.n	800b302 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b282:	2b00      	cmp	r3, #0
 800b284:	d106      	bne.n	800b294 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7f6 faaa 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2224      	movs	r2, #36	@ 0x24
 800b298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f022 0201 	bic.w	r2, r2, #1
 800b2aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fab5 	bl	800b824 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f8c4 	bl	800b448 <UART_SetConfig>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d101      	bne.n	800b2ca <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e01b      	b.n	800b302 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	685a      	ldr	r2, [r3, #4]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b2d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689a      	ldr	r2, [r3, #8]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b2e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f042 0201 	orr.w	r2, r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fb34 	bl	800b968 <UART_CheckIdleState>
 800b300:	4603      	mov	r3, r0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b08a      	sub	sp, #40	@ 0x28
 800b30e:	af02      	add	r7, sp, #8
 800b310:	60f8      	str	r0, [r7, #12]
 800b312:	60b9      	str	r1, [r7, #8]
 800b314:	603b      	str	r3, [r7, #0]
 800b316:	4613      	mov	r3, r2
 800b318:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b320:	2b20      	cmp	r3, #32
 800b322:	f040 808b 	bne.w	800b43c <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d002      	beq.n	800b332 <HAL_UART_Transmit+0x28>
 800b32c:	88fb      	ldrh	r3, [r7, #6]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e083      	b.n	800b43e <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b340:	2b80      	cmp	r3, #128	@ 0x80
 800b342:	d107      	bne.n	800b354 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	689a      	ldr	r2, [r3, #8]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b352:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2200      	movs	r2, #0
 800b358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2221      	movs	r2, #33	@ 0x21
 800b360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b364:	f7f7 f8b8 	bl	80024d8 <HAL_GetTick>
 800b368:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	88fa      	ldrh	r2, [r7, #6]
 800b36e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	88fa      	ldrh	r2, [r7, #6]
 800b376:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b382:	d108      	bne.n	800b396 <HAL_UART_Transmit+0x8c>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d104      	bne.n	800b396 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b38c:	2300      	movs	r3, #0
 800b38e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	61bb      	str	r3, [r7, #24]
 800b394:	e003      	b.n	800b39e <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b39a:	2300      	movs	r3, #0
 800b39c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b39e:	e030      	b.n	800b402 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	2180      	movs	r1, #128	@ 0x80
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f000 fb86 	bl	800babc <UART_WaitOnFlagUntilTimeout>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d005      	beq.n	800b3c2 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2220      	movs	r2, #32
 800b3ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e03d      	b.n	800b43e <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10b      	bne.n	800b3e0 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	881b      	ldrh	r3, [r3, #0]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	3302      	adds	r3, #2
 800b3dc:	61bb      	str	r3, [r7, #24]
 800b3de:	e007      	b.n	800b3f0 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	781a      	ldrb	r2, [r3, #0]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b408:	b29b      	uxth	r3, r3
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1c8      	bne.n	800b3a0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	2200      	movs	r2, #0
 800b416:	2140      	movs	r1, #64	@ 0x40
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	f000 fb4f 	bl	800babc <UART_WaitOnFlagUntilTimeout>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d005      	beq.n	800b430 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2220      	movs	r2, #32
 800b428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b42c:	2303      	movs	r3, #3
 800b42e:	e006      	b.n	800b43e <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2220      	movs	r2, #32
 800b434:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	e000      	b.n	800b43e <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b43c:	2302      	movs	r3, #2
  }
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3720      	adds	r7, #32
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
	...

0800b448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b44c:	b094      	sub	sp, #80	@ 0x50
 800b44e:	af00      	add	r7, sp, #0
 800b450:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b452:	2300      	movs	r3, #0
 800b454:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	4b78      	ldr	r3, [pc, #480]	@ (800b640 <UART_SetConfig+0x1f8>)
 800b45e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b462:	689a      	ldr	r2, [r3, #8]
 800b464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	431a      	orrs	r2, r3
 800b46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	431a      	orrs	r2, r3
 800b470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b472:	69db      	ldr	r3, [r3, #28]
 800b474:	4313      	orrs	r3, r2
 800b476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4971      	ldr	r1, [pc, #452]	@ (800b644 <UART_SetConfig+0x1fc>)
 800b480:	4019      	ands	r1, r3
 800b482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b488:	430b      	orrs	r3, r1
 800b48a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b498:	68d9      	ldr	r1, [r3, #12]
 800b49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	ea40 0301 	orr.w	r3, r0, r1
 800b4a2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a6:	699b      	ldr	r3, [r3, #24]
 800b4a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	4b64      	ldr	r3, [pc, #400]	@ (800b640 <UART_SetConfig+0x1f8>)
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d009      	beq.n	800b4c8 <UART_SetConfig+0x80>
 800b4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	4b63      	ldr	r3, [pc, #396]	@ (800b648 <UART_SetConfig+0x200>)
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d004      	beq.n	800b4c8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c0:	6a1a      	ldr	r2, [r3, #32]
 800b4c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b4d2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4dc:	430b      	orrs	r3, r1
 800b4de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4e6:	f023 000f 	bic.w	r0, r3, #15
 800b4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	ea40 0301 	orr.w	r3, r0, r1
 800b4f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	4b53      	ldr	r3, [pc, #332]	@ (800b64c <UART_SetConfig+0x204>)
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d102      	bne.n	800b508 <UART_SetConfig+0xc0>
 800b502:	2301      	movs	r3, #1
 800b504:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b506:	e066      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	4b50      	ldr	r3, [pc, #320]	@ (800b650 <UART_SetConfig+0x208>)
 800b50e:	429a      	cmp	r2, r3
 800b510:	d102      	bne.n	800b518 <UART_SetConfig+0xd0>
 800b512:	2302      	movs	r3, #2
 800b514:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b516:	e05e      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	4b4d      	ldr	r3, [pc, #308]	@ (800b654 <UART_SetConfig+0x20c>)
 800b51e:	429a      	cmp	r2, r3
 800b520:	d102      	bne.n	800b528 <UART_SetConfig+0xe0>
 800b522:	2304      	movs	r3, #4
 800b524:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b526:	e056      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	4b4a      	ldr	r3, [pc, #296]	@ (800b658 <UART_SetConfig+0x210>)
 800b52e:	429a      	cmp	r2, r3
 800b530:	d102      	bne.n	800b538 <UART_SetConfig+0xf0>
 800b532:	2308      	movs	r3, #8
 800b534:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b536:	e04e      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	4b47      	ldr	r3, [pc, #284]	@ (800b65c <UART_SetConfig+0x214>)
 800b53e:	429a      	cmp	r2, r3
 800b540:	d102      	bne.n	800b548 <UART_SetConfig+0x100>
 800b542:	2310      	movs	r3, #16
 800b544:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b546:	e046      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	4b44      	ldr	r3, [pc, #272]	@ (800b660 <UART_SetConfig+0x218>)
 800b54e:	429a      	cmp	r2, r3
 800b550:	d102      	bne.n	800b558 <UART_SetConfig+0x110>
 800b552:	2320      	movs	r3, #32
 800b554:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b556:	e03e      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	4b41      	ldr	r3, [pc, #260]	@ (800b664 <UART_SetConfig+0x21c>)
 800b55e:	429a      	cmp	r2, r3
 800b560:	d102      	bne.n	800b568 <UART_SetConfig+0x120>
 800b562:	2340      	movs	r3, #64	@ 0x40
 800b564:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b566:	e036      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	4b3e      	ldr	r3, [pc, #248]	@ (800b668 <UART_SetConfig+0x220>)
 800b56e:	429a      	cmp	r2, r3
 800b570:	d102      	bne.n	800b578 <UART_SetConfig+0x130>
 800b572:	2380      	movs	r3, #128	@ 0x80
 800b574:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b576:	e02e      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	4b3b      	ldr	r3, [pc, #236]	@ (800b66c <UART_SetConfig+0x224>)
 800b57e:	429a      	cmp	r2, r3
 800b580:	d103      	bne.n	800b58a <UART_SetConfig+0x142>
 800b582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b586:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b588:	e025      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	4b38      	ldr	r3, [pc, #224]	@ (800b670 <UART_SetConfig+0x228>)
 800b590:	429a      	cmp	r2, r3
 800b592:	d103      	bne.n	800b59c <UART_SetConfig+0x154>
 800b594:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b59a:	e01c      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	4b34      	ldr	r3, [pc, #208]	@ (800b674 <UART_SetConfig+0x22c>)
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d103      	bne.n	800b5ae <UART_SetConfig+0x166>
 800b5a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5ac:	e013      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	4b31      	ldr	r3, [pc, #196]	@ (800b678 <UART_SetConfig+0x230>)
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d103      	bne.n	800b5c0 <UART_SetConfig+0x178>
 800b5b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b5bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5be:	e00a      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	4b1e      	ldr	r3, [pc, #120]	@ (800b640 <UART_SetConfig+0x1f8>)
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d103      	bne.n	800b5d2 <UART_SetConfig+0x18a>
 800b5ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b5ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5d0:	e001      	b.n	800b5d6 <UART_SetConfig+0x18e>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	4b19      	ldr	r3, [pc, #100]	@ (800b640 <UART_SetConfig+0x1f8>)
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d005      	beq.n	800b5ec <UART_SetConfig+0x1a4>
 800b5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	4b18      	ldr	r3, [pc, #96]	@ (800b648 <UART_SetConfig+0x200>)
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	f040 8094 	bne.w	800b714 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b5ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	623b      	str	r3, [r7, #32]
 800b5f2:	627a      	str	r2, [r7, #36]	@ 0x24
 800b5f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b5f8:	f7fc fcf0 	bl	8007fdc <HAL_RCCEx_GetPeriphCLKFreq>
 800b5fc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b5fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 80f7 	beq.w	800b7f4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b60a:	4a1c      	ldr	r2, [pc, #112]	@ (800b67c <UART_SetConfig+0x234>)
 800b60c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b610:	461a      	mov	r2, r3
 800b612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b614:	fbb3 f3f2 	udiv	r3, r3, r2
 800b618:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b61c:	685a      	ldr	r2, [r3, #4]
 800b61e:	4613      	mov	r3, r2
 800b620:	005b      	lsls	r3, r3, #1
 800b622:	4413      	add	r3, r2
 800b624:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b626:	429a      	cmp	r2, r3
 800b628:	d305      	bcc.n	800b636 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b630:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b632:	429a      	cmp	r2, r3
 800b634:	d924      	bls.n	800b680 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b63c:	e069      	b.n	800b712 <UART_SetConfig+0x2ca>
 800b63e:	bf00      	nop
 800b640:	44002400 	.word	0x44002400
 800b644:	cfff69f3 	.word	0xcfff69f3
 800b648:	54002400 	.word	0x54002400
 800b64c:	40013800 	.word	0x40013800
 800b650:	40004400 	.word	0x40004400
 800b654:	40004800 	.word	0x40004800
 800b658:	40004c00 	.word	0x40004c00
 800b65c:	40005000 	.word	0x40005000
 800b660:	40006400 	.word	0x40006400
 800b664:	40007800 	.word	0x40007800
 800b668:	40007c00 	.word	0x40007c00
 800b66c:	40008000 	.word	0x40008000
 800b670:	40006800 	.word	0x40006800
 800b674:	40006c00 	.word	0x40006c00
 800b678:	40008400 	.word	0x40008400
 800b67c:	08011b20 	.word	0x08011b20
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b682:	2200      	movs	r2, #0
 800b684:	61bb      	str	r3, [r7, #24]
 800b686:	61fa      	str	r2, [r7, #28]
 800b688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b68c:	4a64      	ldr	r2, [pc, #400]	@ (800b820 <UART_SetConfig+0x3d8>)
 800b68e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b692:	b29b      	uxth	r3, r3
 800b694:	2200      	movs	r2, #0
 800b696:	613b      	str	r3, [r7, #16]
 800b698:	617a      	str	r2, [r7, #20]
 800b69a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b69e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b6a2:	f7f4 fdf3 	bl	800028c <__aeabi_uldivmod>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	f04f 0200 	mov.w	r2, #0
 800b6b2:	f04f 0300 	mov.w	r3, #0
 800b6b6:	020b      	lsls	r3, r1, #8
 800b6b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6bc:	0202      	lsls	r2, r0, #8
 800b6be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6c0:	6849      	ldr	r1, [r1, #4]
 800b6c2:	0849      	lsrs	r1, r1, #1
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	eb12 0804 	adds.w	r8, r2, r4
 800b6ce:	eb43 0905 	adc.w	r9, r3, r5
 800b6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	60bb      	str	r3, [r7, #8]
 800b6da:	60fa      	str	r2, [r7, #12]
 800b6dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7f4 fdd2 	bl	800028c <__aeabi_uldivmod>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6f6:	d308      	bcc.n	800b70a <UART_SetConfig+0x2c2>
 800b6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6fe:	d204      	bcs.n	800b70a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800b700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b706:	60da      	str	r2, [r3, #12]
 800b708:	e003      	b.n	800b712 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b710:	e070      	b.n	800b7f4 <UART_SetConfig+0x3ac>
 800b712:	e06f      	b.n	800b7f4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b716:	69db      	ldr	r3, [r3, #28]
 800b718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b71c:	d13c      	bne.n	800b798 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b71e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b720:	2200      	movs	r2, #0
 800b722:	603b      	str	r3, [r7, #0]
 800b724:	607a      	str	r2, [r7, #4]
 800b726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b72a:	f7fc fc57 	bl	8007fdc <HAL_RCCEx_GetPeriphCLKFreq>
 800b72e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b732:	2b00      	cmp	r3, #0
 800b734:	d05e      	beq.n	800b7f4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b73a:	4a39      	ldr	r2, [pc, #228]	@ (800b820 <UART_SetConfig+0x3d8>)
 800b73c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b740:	461a      	mov	r2, r3
 800b742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b744:	fbb3 f3f2 	udiv	r3, r3, r2
 800b748:	005a      	lsls	r2, r3, #1
 800b74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	085b      	lsrs	r3, r3, #1
 800b750:	441a      	add	r2, r3
 800b752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	fbb2 f3f3 	udiv	r3, r2, r3
 800b75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b75c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b75e:	2b0f      	cmp	r3, #15
 800b760:	d916      	bls.n	800b790 <UART_SetConfig+0x348>
 800b762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b768:	d212      	bcs.n	800b790 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b76a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	f023 030f 	bic.w	r3, r3, #15
 800b772:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b776:	085b      	lsrs	r3, r3, #1
 800b778:	b29b      	uxth	r3, r3
 800b77a:	f003 0307 	and.w	r3, r3, #7
 800b77e:	b29a      	uxth	r2, r3
 800b780:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b782:	4313      	orrs	r3, r2
 800b784:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b78c:	60da      	str	r2, [r3, #12]
 800b78e:	e031      	b.n	800b7f4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b796:	e02d      	b.n	800b7f4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b79a:	2200      	movs	r2, #0
 800b79c:	469a      	mov	sl, r3
 800b79e:	4693      	mov	fp, r2
 800b7a0:	4650      	mov	r0, sl
 800b7a2:	4659      	mov	r1, fp
 800b7a4:	f7fc fc1a 	bl	8007fdc <HAL_RCCEx_GetPeriphCLKFreq>
 800b7a8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b7aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d021      	beq.n	800b7f4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7b4:	4a1a      	ldr	r2, [pc, #104]	@ (800b820 <UART_SetConfig+0x3d8>)
 800b7b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7be:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	085b      	lsrs	r3, r3, #1
 800b7c8:	441a      	add	r2, r3
 800b7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7d6:	2b0f      	cmp	r3, #15
 800b7d8:	d909      	bls.n	800b7ee <UART_SetConfig+0x3a6>
 800b7da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7e0:	d205      	bcs.n	800b7ee <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b7e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	60da      	str	r2, [r3, #12]
 800b7ec:	e002      	b.n	800b7f4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7fe:	2201      	movs	r2, #1
 800b800:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b806:	2200      	movs	r2, #0
 800b808:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b80c:	2200      	movs	r2, #0
 800b80e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b810:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b814:	4618      	mov	r0, r3
 800b816:	3750      	adds	r7, #80	@ 0x50
 800b818:	46bd      	mov	sp, r7
 800b81a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b81e:	bf00      	nop
 800b820:	08011b20 	.word	0x08011b20

0800b824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b830:	f003 0308 	and.w	r3, r3, #8
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00a      	beq.n	800b84e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	430a      	orrs	r2, r1
 800b84c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b852:	f003 0301 	and.w	r3, r3, #1
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00a      	beq.n	800b870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	430a      	orrs	r2, r1
 800b86e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b874:	f003 0302 	and.w	r3, r3, #2
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00a      	beq.n	800b892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	430a      	orrs	r2, r1
 800b890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b896:	f003 0304 	and.w	r3, r3, #4
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00a      	beq.n	800b8b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	430a      	orrs	r2, r1
 800b8b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8b8:	f003 0310 	and.w	r3, r3, #16
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00a      	beq.n	800b8d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	430a      	orrs	r2, r1
 800b8d4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8da:	f003 0320 	and.w	r3, r3, #32
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00a      	beq.n	800b8f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	430a      	orrs	r2, r1
 800b8f6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b900:	2b00      	cmp	r3, #0
 800b902:	d01a      	beq.n	800b93a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	430a      	orrs	r2, r1
 800b918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b91e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b922:	d10a      	bne.n	800b93a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	430a      	orrs	r2, r1
 800b938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b93e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00a      	beq.n	800b95c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	430a      	orrs	r2, r1
 800b95a:	605a      	str	r2, [r3, #4]
  }
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b098      	sub	sp, #96	@ 0x60
 800b96c:	af02      	add	r7, sp, #8
 800b96e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b978:	f7f6 fdae 	bl	80024d8 <HAL_GetTick>
 800b97c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 0308 	and.w	r3, r3, #8
 800b988:	2b08      	cmp	r3, #8
 800b98a:	d12f      	bne.n	800b9ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b98c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b994:	2200      	movs	r2, #0
 800b996:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f88e 	bl	800babc <UART_WaitOnFlagUntilTimeout>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d022      	beq.n	800b9ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ae:	e853 3f00 	ldrex	r3, [r3]
 800b9b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b9ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9cc:	e841 2300 	strex	r3, r2, [r1]
 800b9d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e6      	bne.n	800b9a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2220      	movs	r2, #32
 800b9dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9e8:	2303      	movs	r3, #3
 800b9ea:	e063      	b.n	800bab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 0304 	and.w	r3, r3, #4
 800b9f6:	2b04      	cmp	r3, #4
 800b9f8:	d149      	bne.n	800ba8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba02:	2200      	movs	r2, #0
 800ba04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 f857 	bl	800babc <UART_WaitOnFlagUntilTimeout>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d03c      	beq.n	800ba8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1c:	e853 3f00 	ldrex	r3, [r3]
 800ba20:	623b      	str	r3, [r7, #32]
   return(result);
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba32:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba3a:	e841 2300 	strex	r3, r2, [r1]
 800ba3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1e6      	bne.n	800ba14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3308      	adds	r3, #8
 800ba4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	e853 3f00 	ldrex	r3, [r3]
 800ba54:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f023 0301 	bic.w	r3, r3, #1
 800ba5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3308      	adds	r3, #8
 800ba64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba66:	61fa      	str	r2, [r7, #28]
 800ba68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6a:	69b9      	ldr	r1, [r7, #24]
 800ba6c:	69fa      	ldr	r2, [r7, #28]
 800ba6e:	e841 2300 	strex	r3, r2, [r1]
 800ba72:	617b      	str	r3, [r7, #20]
   return(result);
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1e5      	bne.n	800ba46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2220      	movs	r2, #32
 800ba7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	e012      	b.n	800bab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2220      	movs	r2, #32
 800ba92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2220      	movs	r2, #32
 800ba9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3758      	adds	r7, #88	@ 0x58
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	603b      	str	r3, [r7, #0]
 800bac8:	4613      	mov	r3, r2
 800baca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bacc:	e04f      	b.n	800bb6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad4:	d04b      	beq.n	800bb6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bad6:	f7f6 fcff 	bl	80024d8 <HAL_GetTick>
 800bada:	4602      	mov	r2, r0
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	69ba      	ldr	r2, [r7, #24]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d302      	bcc.n	800baec <UART_WaitOnFlagUntilTimeout+0x30>
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800baec:	2303      	movs	r3, #3
 800baee:	e04e      	b.n	800bb8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f003 0304 	and.w	r3, r3, #4
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d037      	beq.n	800bb6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	2b80      	cmp	r3, #128	@ 0x80
 800bb02:	d034      	beq.n	800bb6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	2b40      	cmp	r3, #64	@ 0x40
 800bb08:	d031      	beq.n	800bb6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	69db      	ldr	r3, [r3, #28]
 800bb10:	f003 0308 	and.w	r3, r3, #8
 800bb14:	2b08      	cmp	r3, #8
 800bb16:	d110      	bne.n	800bb3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2208      	movs	r2, #8
 800bb1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f000 f838 	bl	800bb96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2208      	movs	r2, #8
 800bb2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	e029      	b.n	800bb8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	69db      	ldr	r3, [r3, #28]
 800bb40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb48:	d111      	bne.n	800bb6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bb52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f000 f81e 	bl	800bb96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2220      	movs	r2, #32
 800bb5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	e00f      	b.n	800bb8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	69da      	ldr	r2, [r3, #28]
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	4013      	ands	r3, r2
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	bf0c      	ite	eq
 800bb7e:	2301      	moveq	r3, #1
 800bb80:	2300      	movne	r3, #0
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	461a      	mov	r2, r3
 800bb86:	79fb      	ldrb	r3, [r7, #7]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d0a0      	beq.n	800bace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb96:	b480      	push	{r7}
 800bb98:	b095      	sub	sp, #84	@ 0x54
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba6:	e853 3f00 	ldrex	r3, [r3]
 800bbaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	461a      	mov	r2, r3
 800bbba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbbc:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bbc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bbc4:	e841 2300 	strex	r3, r2, [r1]
 800bbc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d1e6      	bne.n	800bb9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	3308      	adds	r3, #8
 800bbd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	e853 3f00 	ldrex	r3, [r3]
 800bbde:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbe6:	f023 0301 	bic.w	r3, r3, #1
 800bbea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bbf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bbfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbfc:	e841 2300 	strex	r3, r2, [r1]
 800bc00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1e3      	bne.n	800bbd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d118      	bne.n	800bc42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	e853 3f00 	ldrex	r3, [r3]
 800bc1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	f023 0310 	bic.w	r3, r3, #16
 800bc24:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc2e:	61bb      	str	r3, [r7, #24]
 800bc30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc32:	6979      	ldr	r1, [r7, #20]
 800bc34:	69ba      	ldr	r2, [r7, #24]
 800bc36:	e841 2300 	strex	r3, r2, [r1]
 800bc3a:	613b      	str	r3, [r7, #16]
   return(result);
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1e6      	bne.n	800bc10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2220      	movs	r2, #32
 800bc46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bc56:	bf00      	nop
 800bc58:	3754      	adds	r7, #84	@ 0x54
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b085      	sub	sp, #20
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d101      	bne.n	800bc78 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc74:	2302      	movs	r3, #2
 800bc76:	e027      	b.n	800bcc8 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2224      	movs	r2, #36	@ 0x24
 800bc84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f022 0201 	bic.w	r2, r2, #1
 800bc9e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bca6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2220      	movs	r2, #32
 800bcba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d101      	bne.n	800bcec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bce8:	2302      	movs	r3, #2
 800bcea:	e02d      	b.n	800bd48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2224      	movs	r2, #36	@ 0x24
 800bcf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f022 0201 	bic.w	r2, r2, #1
 800bd12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	683a      	ldr	r2, [r7, #0]
 800bd24:	430a      	orrs	r2, r1
 800bd26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 f84f 	bl	800bdcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2220      	movs	r2, #32
 800bd3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3710      	adds	r7, #16
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d101      	bne.n	800bd68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd64:	2302      	movs	r3, #2
 800bd66:	e02d      	b.n	800bdc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2224      	movs	r2, #36	@ 0x24
 800bd74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f022 0201 	bic.w	r2, r2, #1
 800bd8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	430a      	orrs	r2, r1
 800bda2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 f811 	bl	800bdcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2220      	movs	r2, #32
 800bdb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bdc2:	2300      	movs	r3, #0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d108      	bne.n	800bdee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bdec:	e031      	b.n	800be52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bdee:	2308      	movs	r3, #8
 800bdf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bdf2:	2308      	movs	r3, #8
 800bdf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	0e5b      	lsrs	r3, r3, #25
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	f003 0307 	and.w	r3, r3, #7
 800be04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	0f5b      	lsrs	r3, r3, #29
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	f003 0307 	and.w	r3, r3, #7
 800be14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be16:	7bbb      	ldrb	r3, [r7, #14]
 800be18:	7b3a      	ldrb	r2, [r7, #12]
 800be1a:	4911      	ldr	r1, [pc, #68]	@ (800be60 <UARTEx_SetNbDataToProcess+0x94>)
 800be1c:	5c8a      	ldrb	r2, [r1, r2]
 800be1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be22:	7b3a      	ldrb	r2, [r7, #12]
 800be24:	490f      	ldr	r1, [pc, #60]	@ (800be64 <UARTEx_SetNbDataToProcess+0x98>)
 800be26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be28:	fb93 f3f2 	sdiv	r3, r3, r2
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be34:	7bfb      	ldrb	r3, [r7, #15]
 800be36:	7b7a      	ldrb	r2, [r7, #13]
 800be38:	4909      	ldr	r1, [pc, #36]	@ (800be60 <UARTEx_SetNbDataToProcess+0x94>)
 800be3a:	5c8a      	ldrb	r2, [r1, r2]
 800be3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be40:	7b7a      	ldrb	r2, [r7, #13]
 800be42:	4908      	ldr	r1, [pc, #32]	@ (800be64 <UARTEx_SetNbDataToProcess+0x98>)
 800be44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be46:	fb93 f3f2 	sdiv	r3, r3, r2
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800be52:	bf00      	nop
 800be54:	3714      	adds	r7, #20
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	08011b38 	.word	0x08011b38
 800be64:	08011b40 	.word	0x08011b40

0800be68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be80:	f043 0201 	orr.w	r2, r3, #1
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	370c      	adds	r7, #12
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr

0800be96 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800be96:	b084      	sub	sp, #16
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	f107 001c 	add.w	r0, r7, #28
 800bea4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e008      	b.n	800bec4 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7ff ffd8 	bl	800be68 <USB_CoreReset>
 800beb8:	4603      	mov	r3, r0
 800beba:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800bec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3710      	adds	r7, #16
 800bec8:	46bd      	mov	sp, r7
 800beca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bece:	b004      	add	sp, #16
 800bed0:	4770      	bx	lr

0800bed2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bed2:	b480      	push	{r7}
 800bed4:	b085      	sub	sp, #20
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bee0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bee4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3714      	adds	r7, #20
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr

0800befa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800befa:	b480      	push	{r7}
 800befc:	b085      	sub	sp, #20
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bf02:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bf06:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	43db      	mvns	r3, r3
 800bf10:	401a      	ands	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3714      	adds	r7, #20
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800bf30:	78fb      	ldrb	r3, [r7, #3]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d106      	bne.n	800bf44 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	641a      	str	r2, [r3, #64]	@ 0x40
 800bf42:	e00b      	b.n	800bf5c <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800bf44:	78fb      	ldrb	r3, [r7, #3]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d106      	bne.n	800bf58 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf4e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	641a      	str	r2, [r3, #64]	@ 0x40
 800bf56:	e001      	b.n	800bf5c <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e000      	b.n	800bf5e <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	370c      	adds	r7, #12
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr

0800bf6a <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	f107 001c 	add.w	r0, r7, #28
 800bf78:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf86:	f023 0201 	bic.w	r2, r3, #1
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800bf8e:	2100      	movs	r1, #0
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f7ff ffc7 	bl	800bf24 <USB_SetCurrentMode>
 800bf96:	4603      	mov	r3, r0
 800bf98:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bfac:	b004      	add	sp, #16
 800bfae:	4770      	bx	lr

0800bfb0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b09f      	sub	sp, #124	@ 0x7c
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4413      	add	r3, r2
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	4ba0      	ldr	r3, [pc, #640]	@ (800c250 <USB_ActivateEndpoint+0x2a0>)
 800bfce:	4013      	ands	r3, r2
 800bfd0:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	78db      	ldrb	r3, [r3, #3]
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	d819      	bhi.n	800c00e <USB_ActivateEndpoint+0x5e>
 800bfda:	a201      	add	r2, pc, #4	@ (adr r2, 800bfe0 <USB_ActivateEndpoint+0x30>)
 800bfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe0:	0800bff1 	.word	0x0800bff1
 800bfe4:	0800c005 	.word	0x0800c005
 800bfe8:	0800c017 	.word	0x0800c017
 800bfec:	0800bffb 	.word	0x0800bffb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bff0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bff6:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800bff8:	e00e      	b.n	800c018 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bffa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bffc:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c000:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c002:	e009      	b.n	800c018 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c004:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c00a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c00c:	e004      	b.n	800c018 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800c00e:	2301      	movs	r3, #1
 800c010:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800c014:	e000      	b.n	800c018 <USB_ActivateEndpoint+0x68>
      break;
 800c016:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	441a      	add	r2, r3
 800c022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c02c:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4413      	add	r3, r2
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	4b86      	ldr	r3, [pc, #536]	@ (800c254 <USB_ActivateEndpoint+0x2a4>)
 800c03c:	4013      	ands	r3, r2
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	7812      	ldrb	r2, [r2, #0]
 800c042:	4313      	orrs	r3, r2
 800c044:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	441a      	add	r2, r3
 800c050:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c05a:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	7b1b      	ldrb	r3, [r3, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	f040 8177 	bne.w	800c354 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	785b      	ldrb	r3, [r3, #1]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d079      	beq.n	800c162 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	00db      	lsls	r3, r3, #3
 800c074:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c078:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	00db      	lsls	r3, r3, #3
 800c084:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c088:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c08c:	0c12      	lsrs	r2, r2, #16
 800c08e:	0412      	lsls	r2, r2, #16
 800c090:	601a      	str	r2, [r3, #0]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	00db      	lsls	r3, r3, #3
 800c098:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c09c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0a0:	6819      	ldr	r1, [r3, #0]
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	88db      	ldrh	r3, [r3, #6]
 800c0a6:	089b      	lsrs	r3, r3, #2
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	009a      	lsls	r2, r3, #2
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0ba:	430a      	orrs	r2, r1
 800c0bc:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	4413      	add	r3, r2
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	61bb      	str	r3, [r7, #24]
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d013      	beq.n	800c0fe <USB_ActivateEndpoint+0x14e>
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4413      	add	r3, r2
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	4b5c      	ldr	r3, [pc, #368]	@ (800c254 <USB_ActivateEndpoint+0x2a4>)
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	617b      	str	r3, [r7, #20]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	441a      	add	r2, r3
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c0fc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	78db      	ldrb	r3, [r3, #3]
 800c102:	2b01      	cmp	r3, #1
 800c104:	d018      	beq.n	800c138 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	4413      	add	r3, r2
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	4b51      	ldr	r3, [pc, #324]	@ (800c258 <USB_ActivateEndpoint+0x2a8>)
 800c114:	4013      	ands	r3, r2
 800c116:	60fb      	str	r3, [r7, #12]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f083 0320 	eor.w	r3, r3, #32
 800c11e:	60fb      	str	r3, [r7, #12]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	441a      	add	r2, r3
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c134:	6013      	str	r3, [r2, #0]
 800c136:	e28c      	b.n	800c652 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4413      	add	r3, r2
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	4b44      	ldr	r3, [pc, #272]	@ (800c258 <USB_ActivateEndpoint+0x2a8>)
 800c146:	4013      	ands	r3, r2
 800c148:	613b      	str	r3, [r7, #16]
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	441a      	add	r2, r3
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c15a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c15e:	6013      	str	r3, [r2, #0]
 800c160:	e277      	b.n	800c652 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	00db      	lsls	r3, r3, #3
 800c168:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c16c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	00db      	lsls	r3, r3, #3
 800c178:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c17c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c180:	0c12      	lsrs	r2, r2, #16
 800c182:	0412      	lsls	r2, r2, #16
 800c184:	605a      	str	r2, [r3, #4]
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	00db      	lsls	r3, r3, #3
 800c18c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c190:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c194:	6859      	ldr	r1, [r3, #4]
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	88db      	ldrh	r3, [r3, #6]
 800c19a:	089b      	lsrs	r3, r3, #2
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	009a      	lsls	r2, r3, #2
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	00db      	lsls	r3, r3, #3
 800c1a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1ae:	430a      	orrs	r2, r1
 800c1b0:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1c0:	685a      	ldr	r2, [r3, #4]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1d0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c1d4:	605a      	str	r2, [r3, #4]
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d112      	bne.n	800c204 <USB_ActivateEndpoint+0x254>
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1ec:	685a      	ldr	r2, [r3, #4]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	00db      	lsls	r3, r3, #3
 800c1f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1fc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c200:	605a      	str	r2, [r3, #4]
 800c202:	e04d      	b.n	800c2a0 <USB_ActivateEndpoint+0x2f0>
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	2b3e      	cmp	r3, #62	@ 0x3e
 800c20a:	d827      	bhi.n	800c25c <USB_ActivateEndpoint+0x2ac>
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	085b      	lsrs	r3, r3, #1
 800c212:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	691b      	ldr	r3, [r3, #16]
 800c218:	f003 0301 	and.w	r3, r3, #1
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d002      	beq.n	800c226 <USB_ActivateEndpoint+0x276>
 800c220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c222:	3301      	adds	r3, #1
 800c224:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	00db      	lsls	r3, r3, #3
 800c22c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c230:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c234:	6859      	ldr	r1, [r3, #4]
 800c236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c238:	069a      	lsls	r2, r3, #26
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c244:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c248:	430a      	orrs	r2, r1
 800c24a:	605a      	str	r2, [r3, #4]
 800c24c:	e028      	b.n	800c2a0 <USB_ActivateEndpoint+0x2f0>
 800c24e:	bf00      	nop
 800c250:	07ff898f 	.word	0x07ff898f
 800c254:	07ff8f8f 	.word	0x07ff8f8f
 800c258:	07ff8fbf 	.word	0x07ff8fbf
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	095b      	lsrs	r3, r3, #5
 800c262:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	f003 031f 	and.w	r3, r3, #31
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d102      	bne.n	800c276 <USB_ActivateEndpoint+0x2c6>
 800c270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c272:	3b01      	subs	r3, #1
 800c274:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	00db      	lsls	r3, r3, #3
 800c27c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c280:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c284:	685a      	ldr	r2, [r3, #4]
 800c286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c288:	069b      	lsls	r3, r3, #26
 800c28a:	431a      	orrs	r2, r3
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	00db      	lsls	r3, r3, #3
 800c292:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c296:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c29a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c29e:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	4413      	add	r3, r2
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d013      	beq.n	800c2e0 <USB_ActivateEndpoint+0x330>
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	4413      	add	r3, r2
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	4b9c      	ldr	r3, [pc, #624]	@ (800c538 <USB_ActivateEndpoint+0x588>)
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	441a      	add	r2, r3
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c2da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2de:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d11c      	bne.n	800c322 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	4413      	add	r3, r2
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	4b91      	ldr	r3, [pc, #580]	@ (800c53c <USB_ActivateEndpoint+0x58c>)
 800c2f6:	4013      	ands	r3, r2
 800c2f8:	61fb      	str	r3, [r7, #28]
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c300:	61fb      	str	r3, [r7, #28]
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c308:	61fb      	str	r3, [r7, #28]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	441a      	add	r2, r3
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c31e:	6013      	str	r3, [r2, #0]
 800c320:	e197      	b.n	800c652 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	4b83      	ldr	r3, [pc, #524]	@ (800c53c <USB_ActivateEndpoint+0x58c>)
 800c330:	4013      	ands	r3, r2
 800c332:	623b      	str	r3, [r7, #32]
 800c334:	6a3b      	ldr	r3, [r7, #32]
 800c336:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c33a:	623b      	str	r3, [r7, #32]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	441a      	add	r2, r3
 800c346:	6a3b      	ldr	r3, [r7, #32]
 800c348:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c34c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c350:	6013      	str	r3, [r2, #0]
 800c352:	e17e      	b.n	800c652 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	78db      	ldrb	r3, [r3, #3]
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d114      	bne.n	800c386 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4413      	add	r3, r2
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	4b73      	ldr	r3, [pc, #460]	@ (800c538 <USB_ActivateEndpoint+0x588>)
 800c36a:	4013      	ands	r3, r2
 800c36c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	441a      	add	r2, r3
 800c378:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c37a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c37e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c382:	6013      	str	r3, [r2, #0]
 800c384:	e013      	b.n	800c3ae <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	4413      	add	r3, r2
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	4b6b      	ldr	r3, [pc, #428]	@ (800c540 <USB_ActivateEndpoint+0x590>)
 800c394:	4013      	ands	r3, r2
 800c396:	667b      	str	r3, [r7, #100]	@ 0x64
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	441a      	add	r2, r3
 800c3a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3ac:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	00db      	lsls	r3, r3, #3
 800c3b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3cc:	0c12      	lsrs	r2, r2, #16
 800c3ce:	0412      	lsls	r2, r2, #16
 800c3d0:	601a      	str	r2, [r3, #0]
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	00db      	lsls	r3, r3, #3
 800c3d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3e0:	6819      	ldr	r1, [r3, #0]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	891b      	ldrh	r3, [r3, #8]
 800c3e6:	089b      	lsrs	r3, r3, #2
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	009a      	lsls	r2, r3, #2
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	00db      	lsls	r3, r3, #3
 800c3f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3fa:	430a      	orrs	r2, r1
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c408:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c418:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c41c:	0c12      	lsrs	r2, r2, #16
 800c41e:	0412      	lsls	r2, r2, #16
 800c420:	605a      	str	r2, [r3, #4]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	00db      	lsls	r3, r3, #3
 800c428:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c42c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c430:	6859      	ldr	r1, [r3, #4]
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	895b      	ldrh	r3, [r3, #10]
 800c436:	089b      	lsrs	r3, r3, #2
 800c438:	b29b      	uxth	r3, r3
 800c43a:	009a      	lsls	r2, r3, #2
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	00db      	lsls	r3, r3, #3
 800c442:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c446:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c44a:	430a      	orrs	r2, r1
 800c44c:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	785b      	ldrb	r3, [r3, #1]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d178      	bne.n	800c548 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	4413      	add	r3, r2
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	643b      	str	r3, [r7, #64]	@ 0x40
 800c464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d013      	beq.n	800c496 <USB_ActivateEndpoint+0x4e6>
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4413      	add	r3, r2
 800c478:	681a      	ldr	r2, [r3, #0]
 800c47a:	4b2f      	ldr	r3, [pc, #188]	@ (800c538 <USB_ActivateEndpoint+0x588>)
 800c47c:	4013      	ands	r3, r2
 800c47e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	441a      	add	r2, r3
 800c48a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c48c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c494:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	009b      	lsls	r3, r3, #2
 800c49e:	4413      	add	r3, r2
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d013      	beq.n	800c4d6 <USB_ActivateEndpoint+0x526>
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	4413      	add	r3, r2
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	4b1f      	ldr	r3, [pc, #124]	@ (800c538 <USB_ActivateEndpoint+0x588>)
 800c4bc:	4013      	ands	r3, r2
 800c4be:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	441a      	add	r2, r3
 800c4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c4d4:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4413      	add	r3, r2
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	4b16      	ldr	r3, [pc, #88]	@ (800c53c <USB_ActivateEndpoint+0x58c>)
 800c4e4:	4013      	ands	r3, r2
 800c4e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c4ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c4f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	441a      	add	r2, r3
 800c502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c504:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c50c:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	4413      	add	r3, r2
 800c518:	681a      	ldr	r2, [r3, #0]
 800c51a:	4b0a      	ldr	r3, [pc, #40]	@ (800c544 <USB_ActivateEndpoint+0x594>)
 800c51c:	4013      	ands	r3, r2
 800c51e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	441a      	add	r2, r3
 800c52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c534:	6013      	str	r3, [r2, #0]
 800c536:	e08c      	b.n	800c652 <USB_ActivateEndpoint+0x6a2>
 800c538:	07ff8f8f 	.word	0x07ff8f8f
 800c53c:	07ffbf8f 	.word	0x07ffbf8f
 800c540:	07ff8e8f 	.word	0x07ff8e8f
 800c544:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	4413      	add	r3, r2
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c556:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d013      	beq.n	800c588 <USB_ActivateEndpoint+0x5d8>
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	4413      	add	r3, r2
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	4b3d      	ldr	r3, [pc, #244]	@ (800c664 <USB_ActivateEndpoint+0x6b4>)
 800c56e:	4013      	ands	r3, r2
 800c570:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	441a      	add	r2, r3
 800c57c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c57e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c586:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	4413      	add	r3, r2
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	657b      	str	r3, [r7, #84]	@ 0x54
 800c596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d013      	beq.n	800c5c8 <USB_ActivateEndpoint+0x618>
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4413      	add	r3, r2
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	4b2d      	ldr	r3, [pc, #180]	@ (800c664 <USB_ActivateEndpoint+0x6b4>)
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	441a      	add	r2, r3
 800c5bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c5c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	78db      	ldrb	r3, [r3, #3]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d018      	beq.n	800c602 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	4b22      	ldr	r3, [pc, #136]	@ (800c668 <USB_ActivateEndpoint+0x6b8>)
 800c5de:	4013      	ands	r3, r2
 800c5e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5e4:	f083 0320 	eor.w	r3, r3, #32
 800c5e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	441a      	add	r2, r3
 800c5f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5fe:	6013      	str	r3, [r2, #0]
 800c600:	e013      	b.n	800c62a <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	4b16      	ldr	r3, [pc, #88]	@ (800c668 <USB_ActivateEndpoint+0x6b8>)
 800c610:	4013      	ands	r3, r2
 800c612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	441a      	add	r2, r3
 800c61e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c628:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4413      	add	r3, r2
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	4b0d      	ldr	r3, [pc, #52]	@ (800c66c <USB_ActivateEndpoint+0x6bc>)
 800c638:	4013      	ands	r3, r2
 800c63a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	441a      	add	r2, r3
 800c646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c648:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c64c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c650:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c652:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c656:	4618      	mov	r0, r3
 800c658:	377c      	adds	r7, #124	@ 0x7c
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop
 800c664:	07ff8f8f 	.word	0x07ff8f8f
 800c668:	07ff8fbf 	.word	0x07ff8fbf
 800c66c:	07ffbf8f 	.word	0x07ffbf8f

0800c670 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c670:	b480      	push	{r7}
 800c672:	b097      	sub	sp, #92	@ 0x5c
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	7b1b      	ldrb	r3, [r3, #12]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d16d      	bne.n	800c75e <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	785b      	ldrb	r3, [r3, #1]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d034      	beq.n	800c6f4 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	613b      	str	r3, [r7, #16]
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d013      	beq.n	800c6ca <USB_DeactivateEndpoint+0x5a>
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	4413      	add	r3, r2
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	4b6d      	ldr	r3, [pc, #436]	@ (800c864 <USB_DeactivateEndpoint+0x1f4>)
 800c6b0:	4013      	ands	r3, r2
 800c6b2:	60fb      	str	r3, [r7, #12]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	441a      	add	r2, r3
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c6c8:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	4b64      	ldr	r3, [pc, #400]	@ (800c868 <USB_DeactivateEndpoint+0x1f8>)
 800c6d8:	4013      	ands	r3, r2
 800c6da:	60bb      	str	r3, [r7, #8]
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	441a      	add	r2, r3
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	e139      	b.n	800c968 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	4413      	add	r3, r2
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	61fb      	str	r3, [r7, #28]
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d013      	beq.n	800c734 <USB_DeactivateEndpoint+0xc4>
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4413      	add	r3, r2
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	4b52      	ldr	r3, [pc, #328]	@ (800c864 <USB_DeactivateEndpoint+0x1f4>)
 800c71a:	4013      	ands	r3, r2
 800c71c:	61bb      	str	r3, [r7, #24]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	441a      	add	r2, r3
 800c728:	69bb      	ldr	r3, [r7, #24]
 800c72a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c72e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c732:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4413      	add	r3, r2
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	4b4a      	ldr	r3, [pc, #296]	@ (800c86c <USB_DeactivateEndpoint+0x1fc>)
 800c742:	4013      	ands	r3, r2
 800c744:	617b      	str	r3, [r7, #20]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	441a      	add	r2, r3
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c75a:	6013      	str	r3, [r2, #0]
 800c75c:	e104      	b.n	800c968 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	785b      	ldrb	r3, [r3, #1]
 800c762:	2b00      	cmp	r3, #0
 800c764:	f040 8084 	bne.w	800c870 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	4413      	add	r3, r2
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d013      	beq.n	800c7a8 <USB_DeactivateEndpoint+0x138>
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4413      	add	r3, r2
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	4b35      	ldr	r3, [pc, #212]	@ (800c864 <USB_DeactivateEndpoint+0x1f4>)
 800c78e:	4013      	ands	r3, r2
 800c790:	637b      	str	r3, [r7, #52]	@ 0x34
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	441a      	add	r2, r3
 800c79c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c79e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c7a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7a6:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	4413      	add	r3, r2
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d013      	beq.n	800c7e8 <USB_DeactivateEndpoint+0x178>
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	4b25      	ldr	r3, [pc, #148]	@ (800c864 <USB_DeactivateEndpoint+0x1f4>)
 800c7ce:	4013      	ands	r3, r2
 800c7d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	441a      	add	r2, r3
 800c7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c7e6:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	4b1b      	ldr	r3, [pc, #108]	@ (800c864 <USB_DeactivateEndpoint+0x1f4>)
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	441a      	add	r2, r3
 800c804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c80a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c80e:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	4413      	add	r3, r2
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	4b13      	ldr	r3, [pc, #76]	@ (800c86c <USB_DeactivateEndpoint+0x1fc>)
 800c81e:	4013      	ands	r3, r2
 800c820:	627b      	str	r3, [r7, #36]	@ 0x24
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	441a      	add	r2, r3
 800c82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c836:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	4413      	add	r3, r2
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	4b08      	ldr	r3, [pc, #32]	@ (800c868 <USB_DeactivateEndpoint+0x1f8>)
 800c846:	4013      	ands	r3, r2
 800c848:	623b      	str	r3, [r7, #32]
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	441a      	add	r2, r3
 800c854:	6a3b      	ldr	r3, [r7, #32]
 800c856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c85e:	6013      	str	r3, [r2, #0]
 800c860:	e082      	b.n	800c968 <USB_DeactivateEndpoint+0x2f8>
 800c862:	bf00      	nop
 800c864:	07ff8f8f 	.word	0x07ff8f8f
 800c868:	07ff8fbf 	.word	0x07ff8fbf
 800c86c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	4413      	add	r3, r2
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c87e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c884:	2b00      	cmp	r3, #0
 800c886:	d013      	beq.n	800c8b0 <USB_DeactivateEndpoint+0x240>
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	4b38      	ldr	r3, [pc, #224]	@ (800c978 <USB_DeactivateEndpoint+0x308>)
 800c896:	4013      	ands	r3, r2
 800c898:	653b      	str	r3, [r7, #80]	@ 0x50
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	441a      	add	r2, r3
 800c8a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c8aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ae:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d013      	beq.n	800c8f0 <USB_DeactivateEndpoint+0x280>
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4413      	add	r3, r2
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	4b28      	ldr	r3, [pc, #160]	@ (800c978 <USB_DeactivateEndpoint+0x308>)
 800c8d6:	4013      	ands	r3, r2
 800c8d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	441a      	add	r2, r3
 800c8e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c8ee:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	4413      	add	r3, r2
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	4b1e      	ldr	r3, [pc, #120]	@ (800c978 <USB_DeactivateEndpoint+0x308>)
 800c8fe:	4013      	ands	r3, r2
 800c900:	647b      	str	r3, [r7, #68]	@ 0x44
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	441a      	add	r2, r3
 800c90c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c90e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c916:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	4413      	add	r3, r2
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	4b15      	ldr	r3, [pc, #84]	@ (800c97c <USB_DeactivateEndpoint+0x30c>)
 800c926:	4013      	ands	r3, r2
 800c928:	643b      	str	r3, [r7, #64]	@ 0x40
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	441a      	add	r2, r3
 800c934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c93a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c93e:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4413      	add	r3, r2
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	4b0c      	ldr	r3, [pc, #48]	@ (800c980 <USB_DeactivateEndpoint+0x310>)
 800c94e:	4013      	ands	r3, r2
 800c950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	441a      	add	r2, r3
 800c95c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c95e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c966:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	375c      	adds	r7, #92	@ 0x5c
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	07ff8f8f 	.word	0x07ff8f8f
 800c97c:	07ff8fbf 	.word	0x07ff8fbf
 800c980:	07ffbf8f 	.word	0x07ffbf8f

0800c984 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b096      	sub	sp, #88	@ 0x58
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	785b      	ldrb	r3, [r3, #1]
 800c992:	2b01      	cmp	r3, #1
 800c994:	f040 84ed 	bne.w	800d372 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	699a      	ldr	r2, [r3, #24]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	691b      	ldr	r3, [r3, #16]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d903      	bls.n	800c9ac <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	691b      	ldr	r3, [r3, #16]
 800c9a8:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9aa:	e002      	b.n	800c9b2 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	699b      	ldr	r3, [r3, #24]
 800c9b0:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	7b1b      	ldrb	r3, [r3, #12]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d12e      	bne.n	800ca18 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	6959      	ldr	r1, [r3, #20]
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	88da      	ldrh	r2, [r3, #6]
 800c9c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f001 f963 	bl	800dc92 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	00db      	lsls	r3, r3, #3
 800c9d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	00db      	lsls	r3, r3, #3
 800c9e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9ea:	b292      	uxth	r2, r2
 800c9ec:	601a      	str	r2, [r3, #0]
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	00db      	lsls	r3, r3, #3
 800c9f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9fc:	6819      	ldr	r1, [r3, #0]
 800c9fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca00:	041a      	lsls	r2, r3, #16
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	00db      	lsls	r3, r3, #3
 800ca08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca10:	430a      	orrs	r2, r1
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	f000 bc90 	b.w	800d338 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	78db      	ldrb	r3, [r3, #3]
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	f040 8332 	bne.w	800d086 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	6a1a      	ldr	r2, [r3, #32]
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	f240 82e4 	bls.w	800cff8 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	4ba4      	ldr	r3, [pc, #656]	@ (800ccd0 <USB_EPStartXfer+0x34c>)
 800ca3e:	4013      	ands	r3, r2
 800ca40:	613b      	str	r3, [r7, #16]
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	441a      	add	r2, r3
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ca52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca56:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	6a1a      	ldr	r2, [r3, #32]
 800ca5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca5e:	1ad2      	subs	r2, r2, r3
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	009b      	lsls	r3, r3, #2
 800ca6c:	4413      	add	r3, r2
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	f000 8161 	beq.w	800cd3c <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	785b      	ldrb	r3, [r3, #1]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d16a      	bne.n	800cb58 <USB_EPStartXfer+0x1d4>
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	00db      	lsls	r3, r3, #3
 800ca88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca90:	685a      	ldr	r2, [r3, #4]
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caa0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800caa4:	605a      	str	r2, [r3, #4]
 800caa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d112      	bne.n	800cad2 <USB_EPStartXfer+0x14e>
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cab6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caba:	685a      	ldr	r2, [r3, #4]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cac6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cace:	605a      	str	r2, [r3, #4]
 800cad0:	e06a      	b.n	800cba8 <USB_EPStartXfer+0x224>
 800cad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cad4:	2b3e      	cmp	r3, #62	@ 0x3e
 800cad6:	d81e      	bhi.n	800cb16 <USB_EPStartXfer+0x192>
 800cad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cada:	085b      	lsrs	r3, r3, #1
 800cadc:	653b      	str	r3, [r7, #80]	@ 0x50
 800cade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cae0:	f003 0301 	and.w	r3, r3, #1
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <USB_EPStartXfer+0x16a>
 800cae8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caea:	3301      	adds	r3, #1
 800caec:	653b      	str	r3, [r7, #80]	@ 0x50
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	00db      	lsls	r3, r3, #3
 800caf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cafc:	6859      	ldr	r1, [r3, #4]
 800cafe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb00:	069a      	lsls	r2, r3, #26
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	00db      	lsls	r3, r3, #3
 800cb08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb10:	430a      	orrs	r2, r1
 800cb12:	605a      	str	r2, [r3, #4]
 800cb14:	e048      	b.n	800cba8 <USB_EPStartXfer+0x224>
 800cb16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb18:	095b      	lsrs	r3, r3, #5
 800cb1a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb1e:	f003 031f 	and.w	r3, r3, #31
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d102      	bne.n	800cb2c <USB_EPStartXfer+0x1a8>
 800cb26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb28:	3b01      	subs	r3, #1
 800cb2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	00db      	lsls	r3, r3, #3
 800cb32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb3e:	069b      	lsls	r3, r3, #26
 800cb40:	431a      	orrs	r2, r3
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb50:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cb54:	605a      	str	r2, [r3, #4]
 800cb56:	e027      	b.n	800cba8 <USB_EPStartXfer+0x224>
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	785b      	ldrb	r3, [r3, #1]
 800cb5c:	2b01      	cmp	r3, #1
 800cb5e:	d123      	bne.n	800cba8 <USB_EPStartXfer+0x224>
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	00db      	lsls	r3, r3, #3
 800cb66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb6e:	685a      	ldr	r2, [r3, #4]
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	00db      	lsls	r3, r3, #3
 800cb76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb7e:	b292      	uxth	r2, r2
 800cb80:	605a      	str	r2, [r3, #4]
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	00db      	lsls	r3, r3, #3
 800cb88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb90:	6859      	ldr	r1, [r3, #4]
 800cb92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb94:	041a      	lsls	r2, r3, #16
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	00db      	lsls	r3, r3, #3
 800cb9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cba0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cba4:	430a      	orrs	r2, r1
 800cba6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	895b      	ldrh	r3, [r3, #10]
 800cbac:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	6959      	ldr	r1, [r3, #20]
 800cbb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	8b7a      	ldrh	r2, [r7, #26]
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f001 f86a 	bl	800dc92 <USB_WritePMA>
            ep->xfer_buff += len;
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	695a      	ldr	r2, [r3, #20]
 800cbc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbc4:	441a      	add	r2, r3
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	6a1a      	ldr	r2, [r3, #32]
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d906      	bls.n	800cbe4 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	6a1a      	ldr	r2, [r3, #32]
 800cbda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbdc:	1ad2      	subs	r2, r2, r3
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	621a      	str	r2, [r3, #32]
 800cbe2:	e005      	b.n	800cbf0 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	6a1b      	ldr	r3, [r3, #32]
 800cbe8:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	2200      	movs	r2, #0
 800cbee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	785b      	ldrb	r3, [r3, #1]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d16d      	bne.n	800ccd4 <USB_EPStartXfer+0x350>
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	00db      	lsls	r3, r3, #3
 800cbfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	00db      	lsls	r3, r3, #3
 800cc0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc16:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cc1a:	601a      	str	r2, [r3, #0]
 800cc1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d112      	bne.n	800cc48 <USB_EPStartXfer+0x2c4>
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	00db      	lsls	r3, r3, #3
 800cc28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	00db      	lsls	r3, r3, #3
 800cc38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc40:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cc44:	601a      	str	r2, [r3, #0]
 800cc46:	e06d      	b.n	800cd24 <USB_EPStartXfer+0x3a0>
 800cc48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc4a:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc4c:	d81e      	bhi.n	800cc8c <USB_EPStartXfer+0x308>
 800cc4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc50:	085b      	lsrs	r3, r3, #1
 800cc52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc56:	f003 0301 	and.w	r3, r3, #1
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d002      	beq.n	800cc64 <USB_EPStartXfer+0x2e0>
 800cc5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc60:	3301      	adds	r3, #1
 800cc62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc72:	6819      	ldr	r1, [r3, #0]
 800cc74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc76:	069a      	lsls	r2, r3, #26
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc86:	430a      	orrs	r2, r1
 800cc88:	601a      	str	r2, [r3, #0]
 800cc8a:	e04b      	b.n	800cd24 <USB_EPStartXfer+0x3a0>
 800cc8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc8e:	095b      	lsrs	r3, r3, #5
 800cc90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc94:	f003 031f 	and.w	r3, r3, #31
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d102      	bne.n	800cca2 <USB_EPStartXfer+0x31e>
 800cc9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc9e:	3b01      	subs	r3, #1
 800cca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	00db      	lsls	r3, r3, #3
 800cca8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccb4:	069b      	lsls	r3, r3, #26
 800ccb6:	431a      	orrs	r2, r3
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	00db      	lsls	r3, r3, #3
 800ccbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccc6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ccca:	601a      	str	r2, [r3, #0]
 800cccc:	e02a      	b.n	800cd24 <USB_EPStartXfer+0x3a0>
 800ccce:	bf00      	nop
 800ccd0:	07ff8f8f 	.word	0x07ff8f8f
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	785b      	ldrb	r3, [r3, #1]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d123      	bne.n	800cd24 <USB_EPStartXfer+0x3a0>
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	00db      	lsls	r3, r3, #3
 800cce2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cce6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	00db      	lsls	r3, r3, #3
 800ccf2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccf6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccfa:	b292      	uxth	r2, r2
 800ccfc:	601a      	str	r2, [r3, #0]
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	00db      	lsls	r3, r3, #3
 800cd04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd0c:	6819      	ldr	r1, [r3, #0]
 800cd0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd10:	041a      	lsls	r2, r3, #16
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	00db      	lsls	r3, r3, #3
 800cd18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd20:	430a      	orrs	r2, r1
 800cd22:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	891b      	ldrh	r3, [r3, #8]
 800cd28:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	6959      	ldr	r1, [r3, #20]
 800cd2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	8b7a      	ldrh	r2, [r7, #26]
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 ffac 	bl	800dc92 <USB_WritePMA>
 800cd3a:	e2fd      	b.n	800d338 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	785b      	ldrb	r3, [r3, #1]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d16a      	bne.n	800ce1a <USB_EPStartXfer+0x496>
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	00db      	lsls	r3, r3, #3
 800cd4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	00db      	lsls	r3, r3, #3
 800cd5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd62:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cd66:	601a      	str	r2, [r3, #0]
 800cd68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d112      	bne.n	800cd94 <USB_EPStartXfer+0x410>
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	00db      	lsls	r3, r3, #3
 800cd74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	00db      	lsls	r3, r3, #3
 800cd84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd8c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	e06a      	b.n	800ce6a <USB_EPStartXfer+0x4e6>
 800cd94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd96:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd98:	d81e      	bhi.n	800cdd8 <USB_EPStartXfer+0x454>
 800cd9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd9c:	085b      	lsrs	r3, r3, #1
 800cd9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cda0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cda2:	f003 0301 	and.w	r3, r3, #1
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d002      	beq.n	800cdb0 <USB_EPStartXfer+0x42c>
 800cdaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdac:	3301      	adds	r3, #1
 800cdae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	00db      	lsls	r3, r3, #3
 800cdb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdbe:	6819      	ldr	r1, [r3, #0]
 800cdc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdc2:	069a      	lsls	r2, r3, #26
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	00db      	lsls	r3, r3, #3
 800cdca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdd2:	430a      	orrs	r2, r1
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	e048      	b.n	800ce6a <USB_EPStartXfer+0x4e6>
 800cdd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdda:	095b      	lsrs	r3, r3, #5
 800cddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cde0:	f003 031f 	and.w	r3, r3, #31
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d102      	bne.n	800cdee <USB_EPStartXfer+0x46a>
 800cde8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdea:	3b01      	subs	r3, #1
 800cdec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce00:	069b      	lsls	r3, r3, #26
 800ce02:	431a      	orrs	r2, r3
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	00db      	lsls	r3, r3, #3
 800ce0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce12:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce16:	601a      	str	r2, [r3, #0]
 800ce18:	e027      	b.n	800ce6a <USB_EPStartXfer+0x4e6>
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	785b      	ldrb	r3, [r3, #1]
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d123      	bne.n	800ce6a <USB_EPStartXfer+0x4e6>
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	00db      	lsls	r3, r3, #3
 800ce28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce30:	681a      	ldr	r2, [r3, #0]
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	00db      	lsls	r3, r3, #3
 800ce38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce40:	b292      	uxth	r2, r2
 800ce42:	601a      	str	r2, [r3, #0]
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	00db      	lsls	r3, r3, #3
 800ce4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce52:	6819      	ldr	r1, [r3, #0]
 800ce54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce56:	041a      	lsls	r2, r3, #16
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	00db      	lsls	r3, r3, #3
 800ce5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce66:	430a      	orrs	r2, r1
 800ce68:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	891b      	ldrh	r3, [r3, #8]
 800ce6e:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	6959      	ldr	r1, [r3, #20]
 800ce74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	8b7a      	ldrh	r2, [r7, #26]
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 ff09 	bl	800dc92 <USB_WritePMA>
            ep->xfer_buff += len;
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	695a      	ldr	r2, [r3, #20]
 800ce84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce86:	441a      	add	r2, r3
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	6a1a      	ldr	r2, [r3, #32]
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	691b      	ldr	r3, [r3, #16]
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d906      	bls.n	800cea6 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	6a1a      	ldr	r2, [r3, #32]
 800ce9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce9e:	1ad2      	subs	r2, r2, r3
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	621a      	str	r2, [r3, #32]
 800cea4:	e005      	b.n	800ceb2 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	6a1b      	ldr	r3, [r3, #32]
 800ceaa:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	785b      	ldrb	r3, [r3, #1]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d16a      	bne.n	800cf90 <USB_EPStartXfer+0x60c>
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	00db      	lsls	r3, r3, #3
 800cec0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cec4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	00db      	lsls	r3, r3, #3
 800ced0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ced4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ced8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cedc:	605a      	str	r2, [r3, #4]
 800cede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d112      	bne.n	800cf0a <USB_EPStartXfer+0x586>
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cef2:	685a      	ldr	r2, [r3, #4]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cefe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf02:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cf06:	605a      	str	r2, [r3, #4]
 800cf08:	e06a      	b.n	800cfe0 <USB_EPStartXfer+0x65c>
 800cf0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf0c:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf0e:	d81e      	bhi.n	800cf4e <USB_EPStartXfer+0x5ca>
 800cf10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf12:	085b      	lsrs	r3, r3, #1
 800cf14:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf18:	f003 0301 	and.w	r3, r3, #1
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <USB_EPStartXfer+0x5a2>
 800cf20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf22:	3301      	adds	r3, #1
 800cf24:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	00db      	lsls	r3, r3, #3
 800cf2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf34:	6859      	ldr	r1, [r3, #4]
 800cf36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf38:	069a      	lsls	r2, r3, #26
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf48:	430a      	orrs	r2, r1
 800cf4a:	605a      	str	r2, [r3, #4]
 800cf4c:	e048      	b.n	800cfe0 <USB_EPStartXfer+0x65c>
 800cf4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf50:	095b      	lsrs	r3, r3, #5
 800cf52:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf56:	f003 031f 	and.w	r3, r3, #31
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d102      	bne.n	800cf64 <USB_EPStartXfer+0x5e0>
 800cf5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf60:	3b01      	subs	r3, #1
 800cf62:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	00db      	lsls	r3, r3, #3
 800cf6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf76:	069b      	lsls	r3, r3, #26
 800cf78:	431a      	orrs	r2, r3
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	00db      	lsls	r3, r3, #3
 800cf80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf88:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cf8c:	605a      	str	r2, [r3, #4]
 800cf8e:	e027      	b.n	800cfe0 <USB_EPStartXfer+0x65c>
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	785b      	ldrb	r3, [r3, #1]
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d123      	bne.n	800cfe0 <USB_EPStartXfer+0x65c>
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	00db      	lsls	r3, r3, #3
 800cf9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfa2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfa6:	685a      	ldr	r2, [r3, #4]
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	00db      	lsls	r3, r3, #3
 800cfae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfb6:	b292      	uxth	r2, r2
 800cfb8:	605a      	str	r2, [r3, #4]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	00db      	lsls	r3, r3, #3
 800cfc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfc8:	6859      	ldr	r1, [r3, #4]
 800cfca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfcc:	041a      	lsls	r2, r3, #16
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	00db      	lsls	r3, r3, #3
 800cfd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfdc:	430a      	orrs	r2, r1
 800cfde:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	895b      	ldrh	r3, [r3, #10]
 800cfe4:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	6959      	ldr	r1, [r3, #20]
 800cfea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	8b7a      	ldrh	r2, [r7, #26]
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 fe4e 	bl	800dc92 <USB_WritePMA>
 800cff6:	e19f      	b.n	800d338 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	6a1b      	ldr	r3, [r3, #32]
 800cffc:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	4413      	add	r3, r2
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	4ba0      	ldr	r3, [pc, #640]	@ (800d28c <USB_EPStartXfer+0x908>)
 800d00c:	4013      	ands	r3, r2
 800d00e:	617b      	str	r3, [r7, #20]
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	441a      	add	r2, r3
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d024:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d030:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	00db      	lsls	r3, r3, #3
 800d03c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d040:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d044:	b292      	uxth	r2, r2
 800d046:	601a      	str	r2, [r3, #0]
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	00db      	lsls	r3, r3, #3
 800d04e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d052:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d056:	6819      	ldr	r1, [r3, #0]
 800d058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d05a:	041a      	lsls	r2, r3, #16
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	00db      	lsls	r3, r3, #3
 800d062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d066:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d06a:	430a      	orrs	r2, r1
 800d06c:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	891b      	ldrh	r3, [r3, #8]
 800d072:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	6959      	ldr	r1, [r3, #20]
 800d078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	8b7a      	ldrh	r2, [r7, #26]
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 fe07 	bl	800dc92 <USB_WritePMA>
 800d084:	e158      	b.n	800d338 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	6a1a      	ldr	r2, [r3, #32]
 800d08a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d08c:	1ad2      	subs	r2, r2, r3
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	4413      	add	r3, r2
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f000 80a3 	beq.w	800d1ee <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	785b      	ldrb	r3, [r3, #1]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d16a      	bne.n	800d186 <USB_EPStartXfer+0x802>
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	00db      	lsls	r3, r3, #3
 800d0b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0be:	685a      	ldr	r2, [r3, #4]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	00db      	lsls	r3, r3, #3
 800d0c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0ce:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d0d2:	605a      	str	r2, [r3, #4]
 800d0d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d112      	bne.n	800d100 <USB_EPStartXfer+0x77c>
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	00db      	lsls	r3, r3, #3
 800d0e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0e8:	685a      	ldr	r2, [r3, #4]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	00db      	lsls	r3, r3, #3
 800d0f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0f8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d0fc:	605a      	str	r2, [r3, #4]
 800d0fe:	e06a      	b.n	800d1d6 <USB_EPStartXfer+0x852>
 800d100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d102:	2b3e      	cmp	r3, #62	@ 0x3e
 800d104:	d81e      	bhi.n	800d144 <USB_EPStartXfer+0x7c0>
 800d106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d108:	085b      	lsrs	r3, r3, #1
 800d10a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d10c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d10e:	f003 0301 	and.w	r3, r3, #1
 800d112:	2b00      	cmp	r3, #0
 800d114:	d002      	beq.n	800d11c <USB_EPStartXfer+0x798>
 800d116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d118:	3301      	adds	r3, #1
 800d11a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	00db      	lsls	r3, r3, #3
 800d122:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d126:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d12a:	6859      	ldr	r1, [r3, #4]
 800d12c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d12e:	069a      	lsls	r2, r3, #26
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	00db      	lsls	r3, r3, #3
 800d136:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d13a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d13e:	430a      	orrs	r2, r1
 800d140:	605a      	str	r2, [r3, #4]
 800d142:	e048      	b.n	800d1d6 <USB_EPStartXfer+0x852>
 800d144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d146:	095b      	lsrs	r3, r3, #5
 800d148:	643b      	str	r3, [r7, #64]	@ 0x40
 800d14a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d14c:	f003 031f 	and.w	r3, r3, #31
 800d150:	2b00      	cmp	r3, #0
 800d152:	d102      	bne.n	800d15a <USB_EPStartXfer+0x7d6>
 800d154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d156:	3b01      	subs	r3, #1
 800d158:	643b      	str	r3, [r7, #64]	@ 0x40
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d164:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d168:	685a      	ldr	r2, [r3, #4]
 800d16a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d16c:	069b      	lsls	r3, r3, #26
 800d16e:	431a      	orrs	r2, r3
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	00db      	lsls	r3, r3, #3
 800d176:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d17a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d17e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d182:	605a      	str	r2, [r3, #4]
 800d184:	e027      	b.n	800d1d6 <USB_EPStartXfer+0x852>
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	785b      	ldrb	r3, [r3, #1]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d123      	bne.n	800d1d6 <USB_EPStartXfer+0x852>
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	00db      	lsls	r3, r3, #3
 800d194:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d198:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d19c:	685a      	ldr	r2, [r3, #4]
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	00db      	lsls	r3, r3, #3
 800d1a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1ac:	b292      	uxth	r2, r2
 800d1ae:	605a      	str	r2, [r3, #4]
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1be:	6859      	ldr	r1, [r3, #4]
 800d1c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1c2:	041a      	lsls	r2, r3, #16
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	00db      	lsls	r3, r3, #3
 800d1ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1d2:	430a      	orrs	r2, r1
 800d1d4:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	895b      	ldrh	r3, [r3, #10]
 800d1da:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	6959      	ldr	r1, [r3, #20]
 800d1e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	8b7a      	ldrh	r2, [r7, #26]
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 fd53 	bl	800dc92 <USB_WritePMA>
 800d1ec:	e0a4      	b.n	800d338 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	785b      	ldrb	r3, [r3, #1]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d16d      	bne.n	800d2d2 <USB_EPStartXfer+0x94e>
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d200:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	00db      	lsls	r3, r3, #3
 800d20c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d210:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d214:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d218:	601a      	str	r2, [r3, #0]
 800d21a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d112      	bne.n	800d246 <USB_EPStartXfer+0x8c2>
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	00db      	lsls	r3, r3, #3
 800d226:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d22a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	00db      	lsls	r3, r3, #3
 800d236:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d23a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d23e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d242:	601a      	str	r2, [r3, #0]
 800d244:	e06d      	b.n	800d322 <USB_EPStartXfer+0x99e>
 800d246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d248:	2b3e      	cmp	r3, #62	@ 0x3e
 800d24a:	d821      	bhi.n	800d290 <USB_EPStartXfer+0x90c>
 800d24c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d24e:	085b      	lsrs	r3, r3, #1
 800d250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d254:	f003 0301 	and.w	r3, r3, #1
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d002      	beq.n	800d262 <USB_EPStartXfer+0x8de>
 800d25c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d25e:	3301      	adds	r3, #1
 800d260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d26c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d270:	6819      	ldr	r1, [r3, #0]
 800d272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d274:	069a      	lsls	r2, r3, #26
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d280:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d284:	430a      	orrs	r2, r1
 800d286:	601a      	str	r2, [r3, #0]
 800d288:	e04b      	b.n	800d322 <USB_EPStartXfer+0x99e>
 800d28a:	bf00      	nop
 800d28c:	07ff8e8f 	.word	0x07ff8e8f
 800d290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d292:	095b      	lsrs	r3, r3, #5
 800d294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d298:	f003 031f 	and.w	r3, r3, #31
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d102      	bne.n	800d2a6 <USB_EPStartXfer+0x922>
 800d2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	00db      	lsls	r3, r3, #3
 800d2ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2b8:	069b      	lsls	r3, r3, #26
 800d2ba:	431a      	orrs	r2, r3
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	00db      	lsls	r3, r3, #3
 800d2c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d2ce:	601a      	str	r2, [r3, #0]
 800d2d0:	e027      	b.n	800d322 <USB_EPStartXfer+0x99e>
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	785b      	ldrb	r3, [r3, #1]
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d123      	bne.n	800d322 <USB_EPStartXfer+0x99e>
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	00db      	lsls	r3, r3, #3
 800d2e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	00db      	lsls	r3, r3, #3
 800d2f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2f8:	b292      	uxth	r2, r2
 800d2fa:	601a      	str	r2, [r3, #0]
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	00db      	lsls	r3, r3, #3
 800d302:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d306:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d30a:	6819      	ldr	r1, [r3, #0]
 800d30c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d30e:	041a      	lsls	r2, r3, #16
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	00db      	lsls	r3, r3, #3
 800d316:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d31a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d31e:	430a      	orrs	r2, r1
 800d320:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	891b      	ldrh	r3, [r3, #8]
 800d326:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	6959      	ldr	r1, [r3, #20]
 800d32c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d32e:	b29b      	uxth	r3, r3
 800d330:	8b7a      	ldrh	r2, [r7, #26]
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fcad 	bl	800dc92 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4413      	add	r3, r2
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	4b8b      	ldr	r3, [pc, #556]	@ (800d574 <USB_EPStartXfer+0xbf0>)
 800d346:	4013      	ands	r3, r2
 800d348:	60fb      	str	r3, [r7, #12]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f083 0310 	eor.w	r3, r3, #16
 800d350:	60fb      	str	r3, [r7, #12]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f083 0320 	eor.w	r3, r3, #32
 800d358:	60fb      	str	r3, [r7, #12]
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	441a      	add	r2, r3
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d36a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d36e:	6013      	str	r3, [r2, #0]
 800d370:	e36b      	b.n	800da4a <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	7b1b      	ldrb	r3, [r3, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	f040 8081 	bne.w	800d47e <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	699a      	ldr	r2, [r3, #24]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	429a      	cmp	r2, r3
 800d386:	d909      	bls.n	800d39c <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	691b      	ldr	r3, [r3, #16]
 800d38c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	699a      	ldr	r2, [r3, #24]
 800d392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d394:	1ad2      	subs	r2, r2, r3
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	619a      	str	r2, [r3, #24]
 800d39a:	e005      	b.n	800d3a8 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	699b      	ldr	r3, [r3, #24]
 800d3a0:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	00db      	lsls	r3, r3, #3
 800d3ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3b6:	685a      	ldr	r2, [r3, #4]
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	00db      	lsls	r3, r3, #3
 800d3be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3c6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d3ca:	605a      	str	r2, [r3, #4]
 800d3cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d112      	bne.n	800d3f8 <USB_EPStartXfer+0xa74>
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	00db      	lsls	r3, r3, #3
 800d3d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3e0:	685a      	ldr	r2, [r3, #4]
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	00db      	lsls	r3, r3, #3
 800d3e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3f0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d3f4:	605a      	str	r2, [r3, #4]
 800d3f6:	e30c      	b.n	800da12 <USB_EPStartXfer+0x108e>
 800d3f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800d3fc:	d81e      	bhi.n	800d43c <USB_EPStartXfer+0xab8>
 800d3fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d400:	085b      	lsrs	r3, r3, #1
 800d402:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d002      	beq.n	800d414 <USB_EPStartXfer+0xa90>
 800d40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d410:	3301      	adds	r3, #1
 800d412:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	00db      	lsls	r3, r3, #3
 800d41a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d41e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d422:	6859      	ldr	r1, [r3, #4]
 800d424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d426:	069a      	lsls	r2, r3, #26
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	00db      	lsls	r3, r3, #3
 800d42e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d432:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d436:	430a      	orrs	r2, r1
 800d438:	605a      	str	r2, [r3, #4]
 800d43a:	e2ea      	b.n	800da12 <USB_EPStartXfer+0x108e>
 800d43c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d43e:	095b      	lsrs	r3, r3, #5
 800d440:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d444:	f003 031f 	and.w	r3, r3, #31
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d102      	bne.n	800d452 <USB_EPStartXfer+0xace>
 800d44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d44e:	3b01      	subs	r3, #1
 800d450:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	00db      	lsls	r3, r3, #3
 800d458:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d45c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d460:	685a      	ldr	r2, [r3, #4]
 800d462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d464:	069b      	lsls	r3, r3, #26
 800d466:	431a      	orrs	r2, r3
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	00db      	lsls	r3, r3, #3
 800d46e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d472:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d476:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d47a:	605a      	str	r2, [r3, #4]
 800d47c:	e2c9      	b.n	800da12 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	78db      	ldrb	r3, [r3, #3]
 800d482:	2b02      	cmp	r3, #2
 800d484:	f040 8176 	bne.w	800d774 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	785b      	ldrb	r3, [r3, #1]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d173      	bne.n	800d578 <USB_EPStartXfer+0xbf4>
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	00db      	lsls	r3, r3, #3
 800d496:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d49a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	00db      	lsls	r3, r3, #3
 800d4a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4ae:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d4b2:	601a      	str	r2, [r3, #0]
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	691b      	ldr	r3, [r3, #16]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d112      	bne.n	800d4e2 <USB_EPStartXfer+0xb5e>
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	00db      	lsls	r3, r3, #3
 800d4c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	00db      	lsls	r3, r3, #3
 800d4d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4da:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d4de:	601a      	str	r2, [r3, #0]
 800d4e0:	e073      	b.n	800d5ca <USB_EPStartXfer+0xc46>
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	691b      	ldr	r3, [r3, #16]
 800d4e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4e8:	d820      	bhi.n	800d52c <USB_EPStartXfer+0xba8>
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	691b      	ldr	r3, [r3, #16]
 800d4ee:	085b      	lsrs	r3, r3, #1
 800d4f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	691b      	ldr	r3, [r3, #16]
 800d4f6:	f003 0301 	and.w	r3, r3, #1
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d002      	beq.n	800d504 <USB_EPStartXfer+0xb80>
 800d4fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d500:	3301      	adds	r3, #1
 800d502:	637b      	str	r3, [r7, #52]	@ 0x34
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	00db      	lsls	r3, r3, #3
 800d50a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d50e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d512:	6819      	ldr	r1, [r3, #0]
 800d514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d516:	069a      	lsls	r2, r3, #26
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	00db      	lsls	r3, r3, #3
 800d51e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d522:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d526:	430a      	orrs	r2, r1
 800d528:	601a      	str	r2, [r3, #0]
 800d52a:	e04e      	b.n	800d5ca <USB_EPStartXfer+0xc46>
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	691b      	ldr	r3, [r3, #16]
 800d530:	095b      	lsrs	r3, r3, #5
 800d532:	637b      	str	r3, [r7, #52]	@ 0x34
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	691b      	ldr	r3, [r3, #16]
 800d538:	f003 031f 	and.w	r3, r3, #31
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d102      	bne.n	800d546 <USB_EPStartXfer+0xbc2>
 800d540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d542:	3b01      	subs	r3, #1
 800d544:	637b      	str	r3, [r7, #52]	@ 0x34
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	00db      	lsls	r3, r3, #3
 800d54c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d550:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d558:	069b      	lsls	r3, r3, #26
 800d55a:	431a      	orrs	r2, r3
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	00db      	lsls	r3, r3, #3
 800d562:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d566:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d56a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d56e:	601a      	str	r2, [r3, #0]
 800d570:	e02b      	b.n	800d5ca <USB_EPStartXfer+0xc46>
 800d572:	bf00      	nop
 800d574:	07ff8fbf 	.word	0x07ff8fbf
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	785b      	ldrb	r3, [r3, #1]
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d124      	bne.n	800d5ca <USB_EPStartXfer+0xc46>
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	00db      	lsls	r3, r3, #3
 800d586:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d58a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	00db      	lsls	r3, r3, #3
 800d596:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d59a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d59e:	b292      	uxth	r2, r2
 800d5a0:	601a      	str	r2, [r3, #0]
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	00db      	lsls	r3, r3, #3
 800d5a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5b0:	6819      	ldr	r1, [r3, #0]
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	691b      	ldr	r3, [r3, #16]
 800d5b6:	041a      	lsls	r2, r3, #16
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	00db      	lsls	r3, r3, #3
 800d5be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5c6:	430a      	orrs	r2, r1
 800d5c8:	601a      	str	r2, [r3, #0]
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	785b      	ldrb	r3, [r3, #1]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d170      	bne.n	800d6b4 <USB_EPStartXfer+0xd30>
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	00db      	lsls	r3, r3, #3
 800d5d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5e0:	685a      	ldr	r2, [r3, #4]
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	00db      	lsls	r3, r3, #3
 800d5e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5f0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d5f4:	605a      	str	r2, [r3, #4]
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d112      	bne.n	800d624 <USB_EPStartXfer+0xca0>
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	00db      	lsls	r3, r3, #3
 800d604:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d608:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d60c:	685a      	ldr	r2, [r3, #4]
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	00db      	lsls	r3, r3, #3
 800d614:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d618:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d61c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d620:	605a      	str	r2, [r3, #4]
 800d622:	e070      	b.n	800d706 <USB_EPStartXfer+0xd82>
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	2b3e      	cmp	r3, #62	@ 0x3e
 800d62a:	d820      	bhi.n	800d66e <USB_EPStartXfer+0xcea>
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	085b      	lsrs	r3, r3, #1
 800d632:	633b      	str	r3, [r7, #48]	@ 0x30
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	691b      	ldr	r3, [r3, #16]
 800d638:	f003 0301 	and.w	r3, r3, #1
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <USB_EPStartXfer+0xcc2>
 800d640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d642:	3301      	adds	r3, #1
 800d644:	633b      	str	r3, [r7, #48]	@ 0x30
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	00db      	lsls	r3, r3, #3
 800d64c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d650:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d654:	6859      	ldr	r1, [r3, #4]
 800d656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d658:	069a      	lsls	r2, r3, #26
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	00db      	lsls	r3, r3, #3
 800d660:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d664:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d668:	430a      	orrs	r2, r1
 800d66a:	605a      	str	r2, [r3, #4]
 800d66c:	e04b      	b.n	800d706 <USB_EPStartXfer+0xd82>
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	095b      	lsrs	r3, r3, #5
 800d674:	633b      	str	r3, [r7, #48]	@ 0x30
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	691b      	ldr	r3, [r3, #16]
 800d67a:	f003 031f 	and.w	r3, r3, #31
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d102      	bne.n	800d688 <USB_EPStartXfer+0xd04>
 800d682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d684:	3b01      	subs	r3, #1
 800d686:	633b      	str	r3, [r7, #48]	@ 0x30
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	00db      	lsls	r3, r3, #3
 800d68e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d692:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d696:	685a      	ldr	r2, [r3, #4]
 800d698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d69a:	069b      	lsls	r3, r3, #26
 800d69c:	431a      	orrs	r2, r3
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	00db      	lsls	r3, r3, #3
 800d6a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6ac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d6b0:	605a      	str	r2, [r3, #4]
 800d6b2:	e028      	b.n	800d706 <USB_EPStartXfer+0xd82>
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	785b      	ldrb	r3, [r3, #1]
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d124      	bne.n	800d706 <USB_EPStartXfer+0xd82>
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	00db      	lsls	r3, r3, #3
 800d6c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	00db      	lsls	r3, r3, #3
 800d6d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6da:	b292      	uxth	r2, r2
 800d6dc:	605a      	str	r2, [r3, #4]
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	00db      	lsls	r3, r3, #3
 800d6e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6ec:	6859      	ldr	r1, [r3, #4]
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	691b      	ldr	r3, [r3, #16]
 800d6f2:	041a      	lsls	r2, r3, #16
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	00db      	lsls	r3, r3, #3
 800d6fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d702:	430a      	orrs	r2, r1
 800d704:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	69db      	ldr	r3, [r3, #28]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	f000 8181 	beq.w	800da12 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	4413      	add	r3, r2
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d71e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d724:	2b00      	cmp	r3, #0
 800d726:	d004      	beq.n	800d732 <USB_EPStartXfer+0xdae>
 800d728:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d72a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d10b      	bne.n	800d74a <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d732:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f040 816a 	bne.w	800da12 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d73e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d744:	2b00      	cmp	r3, #0
 800d746:	f040 8164 	bne.w	800da12 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	4413      	add	r3, r2
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	4b98      	ldr	r3, [pc, #608]	@ (800d9b8 <USB_EPStartXfer+0x1034>)
 800d758:	4013      	ands	r3, r2
 800d75a:	623b      	str	r3, [r7, #32]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	441a      	add	r2, r3
 800d766:	6a3b      	ldr	r3, [r7, #32]
 800d768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d76c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d770:	6013      	str	r3, [r2, #0]
 800d772:	e14e      	b.n	800da12 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	78db      	ldrb	r3, [r3, #3]
 800d778:	2b01      	cmp	r3, #1
 800d77a:	f040 8148 	bne.w	800da0e <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	699a      	ldr	r2, [r3, #24]
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	691b      	ldr	r3, [r3, #16]
 800d786:	429a      	cmp	r2, r3
 800d788:	d909      	bls.n	800d79e <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	691b      	ldr	r3, [r3, #16]
 800d78e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	699a      	ldr	r2, [r3, #24]
 800d794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d796:	1ad2      	subs	r2, r2, r3
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	619a      	str	r2, [r3, #24]
 800d79c:	e005      	b.n	800d7aa <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	699b      	ldr	r3, [r3, #24]
 800d7a2:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	785b      	ldrb	r3, [r3, #1]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d16a      	bne.n	800d888 <USB_EPStartXfer+0xf04>
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	00db      	lsls	r3, r3, #3
 800d7b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	00db      	lsls	r3, r3, #3
 800d7c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7d0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d112      	bne.n	800d802 <USB_EPStartXfer+0xe7e>
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	00db      	lsls	r3, r3, #3
 800d7e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	00db      	lsls	r3, r3, #3
 800d7f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d7fe:	601a      	str	r2, [r3, #0]
 800d800:	e06a      	b.n	800d8d8 <USB_EPStartXfer+0xf54>
 800d802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d804:	2b3e      	cmp	r3, #62	@ 0x3e
 800d806:	d81e      	bhi.n	800d846 <USB_EPStartXfer+0xec2>
 800d808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d80a:	085b      	lsrs	r3, r3, #1
 800d80c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d80e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d810:	f003 0301 	and.w	r3, r3, #1
 800d814:	2b00      	cmp	r3, #0
 800d816:	d002      	beq.n	800d81e <USB_EPStartXfer+0xe9a>
 800d818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d81a:	3301      	adds	r3, #1
 800d81c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	00db      	lsls	r3, r3, #3
 800d824:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d828:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d82c:	6819      	ldr	r1, [r3, #0]
 800d82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d830:	069a      	lsls	r2, r3, #26
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d83c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d840:	430a      	orrs	r2, r1
 800d842:	601a      	str	r2, [r3, #0]
 800d844:	e048      	b.n	800d8d8 <USB_EPStartXfer+0xf54>
 800d846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d848:	095b      	lsrs	r3, r3, #5
 800d84a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d84c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d84e:	f003 031f 	and.w	r3, r3, #31
 800d852:	2b00      	cmp	r3, #0
 800d854:	d102      	bne.n	800d85c <USB_EPStartXfer+0xed8>
 800d856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d858:	3b01      	subs	r3, #1
 800d85a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	00db      	lsls	r3, r3, #3
 800d862:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d866:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86e:	069b      	lsls	r3, r3, #26
 800d870:	431a      	orrs	r2, r3
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	00db      	lsls	r3, r3, #3
 800d878:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d87c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d880:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d884:	601a      	str	r2, [r3, #0]
 800d886:	e027      	b.n	800d8d8 <USB_EPStartXfer+0xf54>
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	785b      	ldrb	r3, [r3, #1]
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d123      	bne.n	800d8d8 <USB_EPStartXfer+0xf54>
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	00db      	lsls	r3, r3, #3
 800d896:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d89a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	00db      	lsls	r3, r3, #3
 800d8a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8ae:	b292      	uxth	r2, r2
 800d8b0:	601a      	str	r2, [r3, #0]
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	00db      	lsls	r3, r3, #3
 800d8b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8c0:	6819      	ldr	r1, [r3, #0]
 800d8c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8c4:	041a      	lsls	r2, r3, #16
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	00db      	lsls	r3, r3, #3
 800d8cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8d4:	430a      	orrs	r2, r1
 800d8d6:	601a      	str	r2, [r3, #0]
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	785b      	ldrb	r3, [r3, #1]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d16d      	bne.n	800d9bc <USB_EPStartXfer+0x1038>
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	00db      	lsls	r3, r3, #3
 800d8e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8ee:	685a      	ldr	r2, [r3, #4]
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	00db      	lsls	r3, r3, #3
 800d8f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8fe:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d902:	605a      	str	r2, [r3, #4]
 800d904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d906:	2b00      	cmp	r3, #0
 800d908:	d112      	bne.n	800d930 <USB_EPStartXfer+0xfac>
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	00db      	lsls	r3, r3, #3
 800d910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d914:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d918:	685a      	ldr	r2, [r3, #4]
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	781b      	ldrb	r3, [r3, #0]
 800d91e:	00db      	lsls	r3, r3, #3
 800d920:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d924:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d928:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d92c:	605a      	str	r2, [r3, #4]
 800d92e:	e070      	b.n	800da12 <USB_EPStartXfer+0x108e>
 800d930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d932:	2b3e      	cmp	r3, #62	@ 0x3e
 800d934:	d81e      	bhi.n	800d974 <USB_EPStartXfer+0xff0>
 800d936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d938:	085b      	lsrs	r3, r3, #1
 800d93a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d93c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d93e:	f003 0301 	and.w	r3, r3, #1
 800d942:	2b00      	cmp	r3, #0
 800d944:	d002      	beq.n	800d94c <USB_EPStartXfer+0xfc8>
 800d946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d948:	3301      	adds	r3, #1
 800d94a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	00db      	lsls	r3, r3, #3
 800d952:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d956:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d95a:	6859      	ldr	r1, [r3, #4]
 800d95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95e:	069a      	lsls	r2, r3, #26
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	00db      	lsls	r3, r3, #3
 800d966:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d96a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d96e:	430a      	orrs	r2, r1
 800d970:	605a      	str	r2, [r3, #4]
 800d972:	e04e      	b.n	800da12 <USB_EPStartXfer+0x108e>
 800d974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d976:	095b      	lsrs	r3, r3, #5
 800d978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d97a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d97c:	f003 031f 	and.w	r3, r3, #31
 800d980:	2b00      	cmp	r3, #0
 800d982:	d102      	bne.n	800d98a <USB_EPStartXfer+0x1006>
 800d984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d986:	3b01      	subs	r3, #1
 800d988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	00db      	lsls	r3, r3, #3
 800d990:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d994:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d998:	685a      	ldr	r2, [r3, #4]
 800d99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d99c:	069b      	lsls	r3, r3, #26
 800d99e:	431a      	orrs	r2, r3
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	00db      	lsls	r3, r3, #3
 800d9a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9ae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d9b2:	605a      	str	r2, [r3, #4]
 800d9b4:	e02d      	b.n	800da12 <USB_EPStartXfer+0x108e>
 800d9b6:	bf00      	nop
 800d9b8:	07ff8f8f 	.word	0x07ff8f8f
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	785b      	ldrb	r3, [r3, #1]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d126      	bne.n	800da12 <USB_EPStartXfer+0x108e>
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	00db      	lsls	r3, r3, #3
 800d9ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9d2:	685a      	ldr	r2, [r3, #4]
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	00db      	lsls	r3, r3, #3
 800d9da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9e2:	b292      	uxth	r2, r2
 800d9e4:	605a      	str	r2, [r3, #4]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	00db      	lsls	r3, r3, #3
 800d9ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9f4:	6859      	ldr	r1, [r3, #4]
 800d9f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9f8:	041a      	lsls	r2, r3, #16
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	00db      	lsls	r3, r3, #3
 800da00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da08:	430a      	orrs	r2, r1
 800da0a:	605a      	str	r2, [r3, #4]
 800da0c:	e001      	b.n	800da12 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800da0e:	2301      	movs	r3, #1
 800da10:	e01c      	b.n	800da4c <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	4413      	add	r3, r2
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	4b0d      	ldr	r3, [pc, #52]	@ (800da54 <USB_EPStartXfer+0x10d0>)
 800da20:	4013      	ands	r3, r2
 800da22:	61fb      	str	r3, [r7, #28]
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800da2a:	61fb      	str	r3, [r7, #28]
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800da32:	61fb      	str	r3, [r7, #28]
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	441a      	add	r2, r3
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3758      	adds	r7, #88	@ 0x58
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}
 800da54:	07ffbf8f 	.word	0x07ffbf8f

0800da58 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800da58:	b480      	push	{r7}
 800da5a:	b085      	sub	sp, #20
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	785b      	ldrb	r3, [r3, #1]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d018      	beq.n	800da9c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	4413      	add	r3, r2
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	4b19      	ldr	r3, [pc, #100]	@ (800dadc <USB_EPSetStall+0x84>)
 800da78:	4013      	ands	r3, r2
 800da7a:	60bb      	str	r3, [r7, #8]
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	f083 0310 	eor.w	r3, r3, #16
 800da82:	60bb      	str	r3, [r7, #8]
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	441a      	add	r2, r3
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da98:	6013      	str	r3, [r2, #0]
 800da9a:	e017      	b.n	800dacc <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	4413      	add	r3, r2
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	4b0d      	ldr	r3, [pc, #52]	@ (800dae0 <USB_EPSetStall+0x88>)
 800daaa:	4013      	ands	r3, r2
 800daac:	60fb      	str	r3, [r7, #12]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dab4:	60fb      	str	r3, [r7, #12]
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	441a      	add	r2, r3
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3714      	adds	r7, #20
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	07ff8fbf 	.word	0x07ff8fbf
 800dae0:	07ffbf8f 	.word	0x07ffbf8f

0800dae4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b089      	sub	sp, #36	@ 0x24
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	7b1b      	ldrb	r3, [r3, #12]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d17c      	bne.n	800dbf0 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	785b      	ldrb	r3, [r3, #1]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d03c      	beq.n	800db78 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	4413      	add	r3, r2
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	613b      	str	r3, [r7, #16]
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db12:	2b00      	cmp	r3, #0
 800db14:	d013      	beq.n	800db3e <USB_EPClearStall+0x5a>
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	4b37      	ldr	r3, [pc, #220]	@ (800dc00 <USB_EPClearStall+0x11c>)
 800db24:	4013      	ands	r3, r2
 800db26:	60fb      	str	r3, [r7, #12]
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	441a      	add	r2, r3
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db3c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	78db      	ldrb	r3, [r3, #3]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d054      	beq.n	800dbf0 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	4413      	add	r3, r2
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	4b2c      	ldr	r3, [pc, #176]	@ (800dc04 <USB_EPClearStall+0x120>)
 800db54:	4013      	ands	r3, r2
 800db56:	60bb      	str	r3, [r7, #8]
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	f083 0320 	eor.w	r3, r3, #32
 800db5e:	60bb      	str	r3, [r7, #8]
 800db60:	687a      	ldr	r2, [r7, #4]
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	009b      	lsls	r3, r3, #2
 800db68:	441a      	add	r2, r3
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db74:	6013      	str	r3, [r2, #0]
 800db76:	e03b      	b.n	800dbf0 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	4413      	add	r3, r2
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	61fb      	str	r3, [r7, #28]
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d013      	beq.n	800dbb8 <USB_EPClearStall+0xd4>
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	4413      	add	r3, r2
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	4b18      	ldr	r3, [pc, #96]	@ (800dc00 <USB_EPClearStall+0x11c>)
 800db9e:	4013      	ands	r3, r2
 800dba0:	61bb      	str	r3, [r7, #24]
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	441a      	add	r2, r3
 800dbac:	69bb      	ldr	r3, [r7, #24]
 800dbae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dbb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbb6:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	4413      	add	r3, r2
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	4b10      	ldr	r3, [pc, #64]	@ (800dc08 <USB_EPClearStall+0x124>)
 800dbc6:	4013      	ands	r3, r2
 800dbc8:	617b      	str	r3, [r7, #20]
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dbd0:	617b      	str	r3, [r7, #20]
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dbd8:	617b      	str	r3, [r7, #20]
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	009b      	lsls	r3, r3, #2
 800dbe2:	441a      	add	r2, r3
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbee:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3724      	adds	r7, #36	@ 0x24
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop
 800dc00:	07ff8f8f 	.word	0x07ff8f8f
 800dc04:	07ff8fbf 	.word	0x07ff8fbf
 800dc08:	07ffbf8f 	.word	0x07ffbf8f

0800dc0c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	460b      	mov	r3, r1
 800dc16:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800dc18:	78fb      	ldrb	r3, [r7, #3]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d102      	bne.n	800dc24 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2280      	movs	r2, #128	@ 0x80
 800dc22:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800dc24:	2300      	movs	r3, #0
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	370c      	adds	r7, #12
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr

0800dc32 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800dc32:	b480      	push	{r7}
 800dc34:	b083      	sub	sp, #12
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc3e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800dc46:	2300      	movs	r3, #0
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc60:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800dc68:	2300      	movs	r3, #0
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	370c      	adds	r7, #12
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr

0800dc76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800dc76:	b480      	push	{r7}
 800dc78:	b085      	sub	sp, #20
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc82:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800dc84:	68fb      	ldr	r3, [r7, #12]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3714      	adds	r7, #20
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b08b      	sub	sp, #44	@ 0x2c
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	60f8      	str	r0, [r7, #12]
 800dc9a:	60b9      	str	r1, [r7, #8]
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	461a      	mov	r2, r3
 800dca0:	460b      	mov	r3, r1
 800dca2:	80fb      	strh	r3, [r7, #6]
 800dca4:	4613      	mov	r3, r2
 800dca6:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800dca8:	88bb      	ldrh	r3, [r7, #4]
 800dcaa:	3303      	adds	r3, #3
 800dcac:	089b      	lsrs	r3, r3, #2
 800dcae:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800dcb0:	88bb      	ldrh	r3, [r7, #4]
 800dcb2:	f003 0303 	and.w	r3, r3, #3
 800dcb6:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800dcbc:	8afb      	ldrh	r3, [r7, #22]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d002      	beq.n	800dcc8 <USB_WritePMA+0x36>
  {
    NbWords--;
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800dcc8:	88fb      	ldrh	r3, [r7, #6]
 800dcca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dcce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dcd2:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	623b      	str	r3, [r7, #32]
 800dcd8:	e015      	b.n	800dd06 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	3304      	adds	r3, #4
 800dce6:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	3301      	adds	r3, #1
 800dcec:	613b      	str	r3, [r7, #16]
    pBuf++;
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	613b      	str	r3, [r7, #16]
    pBuf++;
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	613b      	str	r3, [r7, #16]
    pBuf++;
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800dd00:	6a3b      	ldr	r3, [r7, #32]
 800dd02:	3b01      	subs	r3, #1
 800dd04:	623b      	str	r3, [r7, #32]
 800dd06:	6a3b      	ldr	r3, [r7, #32]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d1e6      	bne.n	800dcda <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800dd0c:	8afb      	ldrh	r3, [r7, #22]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d01a      	beq.n	800dd48 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800dd12:	2300      	movs	r3, #0
 800dd14:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	6a3b      	ldr	r3, [r7, #32]
 800dd1e:	00db      	lsls	r3, r3, #3
 800dd20:	fa02 f303 	lsl.w	r3, r2, r3
 800dd24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd26:	4313      	orrs	r3, r2
 800dd28:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800dd2a:	6a3b      	ldr	r3, [r7, #32]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	623b      	str	r3, [r7, #32]
      pBuf++;
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	3301      	adds	r3, #1
 800dd34:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800dd36:	8afb      	ldrh	r3, [r7, #22]
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800dd3c:	8afb      	ldrh	r3, [r7, #22]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1e9      	bne.n	800dd16 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd46:	601a      	str	r2, [r3, #0]
  }
}
 800dd48:	bf00      	nop
 800dd4a:	372c      	adds	r7, #44	@ 0x2c
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr

0800dd54 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b08b      	sub	sp, #44	@ 0x2c
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	4611      	mov	r1, r2
 800dd60:	461a      	mov	r2, r3
 800dd62:	460b      	mov	r3, r1
 800dd64:	80fb      	strh	r3, [r7, #6]
 800dd66:	4613      	mov	r3, r2
 800dd68:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800dd6a:	88bb      	ldrh	r3, [r7, #4]
 800dd6c:	3303      	adds	r3, #3
 800dd6e:	089b      	lsrs	r3, r3, #2
 800dd70:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800dd72:	88bb      	ldrh	r3, [r7, #4]
 800dd74:	f003 0303 	and.w	r3, r3, #3
 800dd78:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800dd7e:	88fb      	ldrh	r3, [r7, #6]
 800dd80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd88:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800dd8a:	8b7b      	ldrh	r3, [r7, #26]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	3b01      	subs	r3, #1
 800dd94:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd9a:	e015      	b.n	800ddc8 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800dd9c:	6a3b      	ldr	r3, [r7, #32]
 800dd9e:	681a      	ldr	r2, [r3, #0]
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800dda4:	6a3b      	ldr	r3, [r7, #32]
 800dda6:	3304      	adds	r3, #4
 800dda8:	623b      	str	r3, [r7, #32]
    pBuf++;
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	3301      	adds	r3, #1
 800ddae:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800ddc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d1e6      	bne.n	800dd9c <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800ddce:	8b7b      	ldrh	r3, [r7, #26]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d017      	beq.n	800de04 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800ddd4:	6a3b      	ldr	r3, [r7, #32]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800ddda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	693a      	ldr	r2, [r7, #16]
 800dde2:	fa22 f303 	lsr.w	r3, r2, r3
 800dde6:	b2da      	uxtb	r2, r3
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	701a      	strb	r2, [r3, #0]
      count++;
 800ddec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddee:	3301      	adds	r3, #1
 800ddf0:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800ddf8:	8b7b      	ldrh	r3, [r7, #26]
 800ddfa:	3b01      	subs	r3, #1
 800ddfc:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800ddfe:	8b7b      	ldrh	r3, [r7, #26]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d1ea      	bne.n	800ddda <USB_ReadPMA+0x86>
  }
}
 800de04:	bf00      	nop
 800de06:	372c      	adds	r7, #44	@ 0x2c
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	460b      	mov	r3, r1
 800de1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800de1c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800de20:	f000 ff90 	bl	800ed44 <USBD_static_malloc>
 800de24:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d109      	bne.n	800de40 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	32b0      	adds	r2, #176	@ 0xb0
 800de36:	2100      	movs	r1, #0
 800de38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800de3c:	2302      	movs	r3, #2
 800de3e:	e0d4      	b.n	800dfea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800de40:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800de44:	2100      	movs	r1, #0
 800de46:	68f8      	ldr	r0, [r7, #12]
 800de48:	f002 fc6e 	bl	8010728 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	32b0      	adds	r2, #176	@ 0xb0
 800de56:	68f9      	ldr	r1, [r7, #12]
 800de58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	32b0      	adds	r2, #176	@ 0xb0
 800de66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	7c1b      	ldrb	r3, [r3, #16]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d138      	bne.n	800deea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800de78:	4b5e      	ldr	r3, [pc, #376]	@ (800dff4 <USBD_CDC_Init+0x1e4>)
 800de7a:	7819      	ldrb	r1, [r3, #0]
 800de7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de80:	2202      	movs	r2, #2
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 fe65 	bl	800eb52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800de88:	4b5a      	ldr	r3, [pc, #360]	@ (800dff4 <USBD_CDC_Init+0x1e4>)
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	f003 020f 	and.w	r2, r3, #15
 800de90:	6879      	ldr	r1, [r7, #4]
 800de92:	4613      	mov	r3, r2
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	4413      	add	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	440b      	add	r3, r1
 800de9c:	3324      	adds	r3, #36	@ 0x24
 800de9e:	2201      	movs	r2, #1
 800dea0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dea2:	4b55      	ldr	r3, [pc, #340]	@ (800dff8 <USBD_CDC_Init+0x1e8>)
 800dea4:	7819      	ldrb	r1, [r3, #0]
 800dea6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800deaa:	2202      	movs	r2, #2
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 fe50 	bl	800eb52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800deb2:	4b51      	ldr	r3, [pc, #324]	@ (800dff8 <USBD_CDC_Init+0x1e8>)
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	f003 020f 	and.w	r2, r3, #15
 800deba:	6879      	ldr	r1, [r7, #4]
 800debc:	4613      	mov	r3, r2
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	4413      	add	r3, r2
 800dec2:	009b      	lsls	r3, r3, #2
 800dec4:	440b      	add	r3, r1
 800dec6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800deca:	2201      	movs	r2, #1
 800decc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dece:	4b4b      	ldr	r3, [pc, #300]	@ (800dffc <USBD_CDC_Init+0x1ec>)
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	f003 020f 	and.w	r2, r3, #15
 800ded6:	6879      	ldr	r1, [r7, #4]
 800ded8:	4613      	mov	r3, r2
 800deda:	009b      	lsls	r3, r3, #2
 800dedc:	4413      	add	r3, r2
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	440b      	add	r3, r1
 800dee2:	3326      	adds	r3, #38	@ 0x26
 800dee4:	2210      	movs	r2, #16
 800dee6:	801a      	strh	r2, [r3, #0]
 800dee8:	e035      	b.n	800df56 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800deea:	4b42      	ldr	r3, [pc, #264]	@ (800dff4 <USBD_CDC_Init+0x1e4>)
 800deec:	7819      	ldrb	r1, [r3, #0]
 800deee:	2340      	movs	r3, #64	@ 0x40
 800def0:	2202      	movs	r2, #2
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 fe2d 	bl	800eb52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800def8:	4b3e      	ldr	r3, [pc, #248]	@ (800dff4 <USBD_CDC_Init+0x1e4>)
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	f003 020f 	and.w	r2, r3, #15
 800df00:	6879      	ldr	r1, [r7, #4]
 800df02:	4613      	mov	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4413      	add	r3, r2
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	440b      	add	r3, r1
 800df0c:	3324      	adds	r3, #36	@ 0x24
 800df0e:	2201      	movs	r2, #1
 800df10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800df12:	4b39      	ldr	r3, [pc, #228]	@ (800dff8 <USBD_CDC_Init+0x1e8>)
 800df14:	7819      	ldrb	r1, [r3, #0]
 800df16:	2340      	movs	r3, #64	@ 0x40
 800df18:	2202      	movs	r2, #2
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 fe19 	bl	800eb52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800df20:	4b35      	ldr	r3, [pc, #212]	@ (800dff8 <USBD_CDC_Init+0x1e8>)
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	f003 020f 	and.w	r2, r3, #15
 800df28:	6879      	ldr	r1, [r7, #4]
 800df2a:	4613      	mov	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	440b      	add	r3, r1
 800df34:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800df38:	2201      	movs	r2, #1
 800df3a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800df3c:	4b2f      	ldr	r3, [pc, #188]	@ (800dffc <USBD_CDC_Init+0x1ec>)
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	f003 020f 	and.w	r2, r3, #15
 800df44:	6879      	ldr	r1, [r7, #4]
 800df46:	4613      	mov	r3, r2
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	4413      	add	r3, r2
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	440b      	add	r3, r1
 800df50:	3326      	adds	r3, #38	@ 0x26
 800df52:	2210      	movs	r2, #16
 800df54:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800df56:	4b29      	ldr	r3, [pc, #164]	@ (800dffc <USBD_CDC_Init+0x1ec>)
 800df58:	7819      	ldrb	r1, [r3, #0]
 800df5a:	2308      	movs	r3, #8
 800df5c:	2203      	movs	r2, #3
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 fdf7 	bl	800eb52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800df64:	4b25      	ldr	r3, [pc, #148]	@ (800dffc <USBD_CDC_Init+0x1ec>)
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	f003 020f 	and.w	r2, r3, #15
 800df6c:	6879      	ldr	r1, [r7, #4]
 800df6e:	4613      	mov	r3, r2
 800df70:	009b      	lsls	r3, r3, #2
 800df72:	4413      	add	r3, r2
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	440b      	add	r3, r1
 800df78:	3324      	adds	r3, #36	@ 0x24
 800df7a:	2201      	movs	r2, #1
 800df7c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2200      	movs	r2, #0
 800df82:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800df8c:	687a      	ldr	r2, [r7, #4]
 800df8e:	33b0      	adds	r3, #176	@ 0xb0
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	4413      	add	r3, r2
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dfb4:	2302      	movs	r3, #2
 800dfb6:	e018      	b.n	800dfea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	7c1b      	ldrb	r3, [r3, #16]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10a      	bne.n	800dfd6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dfc0:	4b0d      	ldr	r3, [pc, #52]	@ (800dff8 <USBD_CDC_Init+0x1e8>)
 800dfc2:	7819      	ldrb	r1, [r3, #0]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dfca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 fe8a 	bl	800ece8 <USBD_LL_PrepareReceive>
 800dfd4:	e008      	b.n	800dfe8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dfd6:	4b08      	ldr	r3, [pc, #32]	@ (800dff8 <USBD_CDC_Init+0x1e8>)
 800dfd8:	7819      	ldrb	r1, [r3, #0]
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dfe0:	2340      	movs	r3, #64	@ 0x40
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fe80 	bl	800ece8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dfe8:	2300      	movs	r3, #0
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3710      	adds	r7, #16
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	200000b3 	.word	0x200000b3
 800dff8:	200000b4 	.word	0x200000b4
 800dffc:	200000b5 	.word	0x200000b5

0800e000 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	460b      	mov	r3, r1
 800e00a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e00c:	4b3a      	ldr	r3, [pc, #232]	@ (800e0f8 <USBD_CDC_DeInit+0xf8>)
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	4619      	mov	r1, r3
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 fdbd 	bl	800eb92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e018:	4b37      	ldr	r3, [pc, #220]	@ (800e0f8 <USBD_CDC_DeInit+0xf8>)
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	f003 020f 	and.w	r2, r3, #15
 800e020:	6879      	ldr	r1, [r7, #4]
 800e022:	4613      	mov	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4413      	add	r3, r2
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	440b      	add	r3, r1
 800e02c:	3324      	adds	r3, #36	@ 0x24
 800e02e:	2200      	movs	r2, #0
 800e030:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e032:	4b32      	ldr	r3, [pc, #200]	@ (800e0fc <USBD_CDC_DeInit+0xfc>)
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	4619      	mov	r1, r3
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 fdaa 	bl	800eb92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e03e:	4b2f      	ldr	r3, [pc, #188]	@ (800e0fc <USBD_CDC_DeInit+0xfc>)
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	f003 020f 	and.w	r2, r3, #15
 800e046:	6879      	ldr	r1, [r7, #4]
 800e048:	4613      	mov	r3, r2
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	4413      	add	r3, r2
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	440b      	add	r3, r1
 800e052:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e056:	2200      	movs	r2, #0
 800e058:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e05a:	4b29      	ldr	r3, [pc, #164]	@ (800e100 <USBD_CDC_DeInit+0x100>)
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	4619      	mov	r1, r3
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f000 fd96 	bl	800eb92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e066:	4b26      	ldr	r3, [pc, #152]	@ (800e100 <USBD_CDC_DeInit+0x100>)
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	f003 020f 	and.w	r2, r3, #15
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	4613      	mov	r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	4413      	add	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	440b      	add	r3, r1
 800e07a:	3324      	adds	r3, #36	@ 0x24
 800e07c:	2200      	movs	r2, #0
 800e07e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e080:	4b1f      	ldr	r3, [pc, #124]	@ (800e100 <USBD_CDC_DeInit+0x100>)
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	f003 020f 	and.w	r2, r3, #15
 800e088:	6879      	ldr	r1, [r7, #4]
 800e08a:	4613      	mov	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4413      	add	r3, r2
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	440b      	add	r3, r1
 800e094:	3326      	adds	r3, #38	@ 0x26
 800e096:	2200      	movs	r2, #0
 800e098:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	32b0      	adds	r2, #176	@ 0xb0
 800e0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d01f      	beq.n	800e0ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	33b0      	adds	r3, #176	@ 0xb0
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	4413      	add	r3, r2
 800e0ba:	685b      	ldr	r3, [r3, #4]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	32b0      	adds	r2, #176	@ 0xb0
 800e0ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f000 fe46 	bl	800ed60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	32b0      	adds	r2, #176	@ 0xb0
 800e0de:	2100      	movs	r1, #0
 800e0e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	200000b3 	.word	0x200000b3
 800e0fc:	200000b4 	.word	0x200000b4
 800e100:	200000b5 	.word	0x200000b5

0800e104 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	32b0      	adds	r2, #176	@ 0xb0
 800e118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e11c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e11e:	2300      	movs	r3, #0
 800e120:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e122:	2300      	movs	r3, #0
 800e124:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e126:	2300      	movs	r3, #0
 800e128:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d101      	bne.n	800e134 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e130:	2303      	movs	r3, #3
 800e132:	e0bf      	b.n	800e2b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d050      	beq.n	800e1e2 <USBD_CDC_Setup+0xde>
 800e140:	2b20      	cmp	r3, #32
 800e142:	f040 80af 	bne.w	800e2a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	88db      	ldrh	r3, [r3, #6]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d03a      	beq.n	800e1c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	b25b      	sxtb	r3, r3
 800e154:	2b00      	cmp	r3, #0
 800e156:	da1b      	bge.n	800e190 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	33b0      	adds	r3, #176	@ 0xb0
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	4413      	add	r3, r2
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	683a      	ldr	r2, [r7, #0]
 800e16c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e16e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e170:	683a      	ldr	r2, [r7, #0]
 800e172:	88d2      	ldrh	r2, [r2, #6]
 800e174:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	88db      	ldrh	r3, [r3, #6]
 800e17a:	2b07      	cmp	r3, #7
 800e17c:	bf28      	it	cs
 800e17e:	2307      	movcs	r3, #7
 800e180:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	89fa      	ldrh	r2, [r7, #14]
 800e186:	4619      	mov	r1, r3
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f002 f8dc 	bl	8010346 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e18e:	e090      	b.n	800e2b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	785a      	ldrb	r2, [r3, #1]
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	88db      	ldrh	r3, [r3, #6]
 800e19e:	2b3f      	cmp	r3, #63	@ 0x3f
 800e1a0:	d803      	bhi.n	800e1aa <USBD_CDC_Setup+0xa6>
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	88db      	ldrh	r3, [r3, #6]
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	e000      	b.n	800e1ac <USBD_CDC_Setup+0xa8>
 800e1aa:	2240      	movs	r2, #64	@ 0x40
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e1b2:	6939      	ldr	r1, [r7, #16]
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f002 f8ee 	bl	801039e <USBD_CtlPrepareRx>
      break;
 800e1c2:	e076      	b.n	800e2b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	33b0      	adds	r3, #176	@ 0xb0
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	4413      	add	r3, r2
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	7850      	ldrb	r0, [r2, #1]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	6839      	ldr	r1, [r7, #0]
 800e1de:	4798      	blx	r3
      break;
 800e1e0:	e067      	b.n	800e2b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	785b      	ldrb	r3, [r3, #1]
 800e1e6:	2b0b      	cmp	r3, #11
 800e1e8:	d851      	bhi.n	800e28e <USBD_CDC_Setup+0x18a>
 800e1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e1f0 <USBD_CDC_Setup+0xec>)
 800e1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f0:	0800e221 	.word	0x0800e221
 800e1f4:	0800e29d 	.word	0x0800e29d
 800e1f8:	0800e28f 	.word	0x0800e28f
 800e1fc:	0800e28f 	.word	0x0800e28f
 800e200:	0800e28f 	.word	0x0800e28f
 800e204:	0800e28f 	.word	0x0800e28f
 800e208:	0800e28f 	.word	0x0800e28f
 800e20c:	0800e28f 	.word	0x0800e28f
 800e210:	0800e28f 	.word	0x0800e28f
 800e214:	0800e28f 	.word	0x0800e28f
 800e218:	0800e24b 	.word	0x0800e24b
 800e21c:	0800e275 	.word	0x0800e275
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e226:	b2db      	uxtb	r3, r3
 800e228:	2b03      	cmp	r3, #3
 800e22a:	d107      	bne.n	800e23c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e22c:	f107 030a 	add.w	r3, r7, #10
 800e230:	2202      	movs	r2, #2
 800e232:	4619      	mov	r1, r3
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f002 f886 	bl	8010346 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e23a:	e032      	b.n	800e2a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e23c:	6839      	ldr	r1, [r7, #0]
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f001 ff03 	bl	801004a <USBD_CtlError>
            ret = USBD_FAIL;
 800e244:	2303      	movs	r3, #3
 800e246:	75fb      	strb	r3, [r7, #23]
          break;
 800e248:	e02b      	b.n	800e2a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e250:	b2db      	uxtb	r3, r3
 800e252:	2b03      	cmp	r3, #3
 800e254:	d107      	bne.n	800e266 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e256:	f107 030d 	add.w	r3, r7, #13
 800e25a:	2201      	movs	r2, #1
 800e25c:	4619      	mov	r1, r3
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f002 f871 	bl	8010346 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e264:	e01d      	b.n	800e2a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e266:	6839      	ldr	r1, [r7, #0]
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f001 feee 	bl	801004a <USBD_CtlError>
            ret = USBD_FAIL;
 800e26e:	2303      	movs	r3, #3
 800e270:	75fb      	strb	r3, [r7, #23]
          break;
 800e272:	e016      	b.n	800e2a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	2b03      	cmp	r3, #3
 800e27e:	d00f      	beq.n	800e2a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e280:	6839      	ldr	r1, [r7, #0]
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f001 fee1 	bl	801004a <USBD_CtlError>
            ret = USBD_FAIL;
 800e288:	2303      	movs	r3, #3
 800e28a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e28c:	e008      	b.n	800e2a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e28e:	6839      	ldr	r1, [r7, #0]
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f001 feda 	bl	801004a <USBD_CtlError>
          ret = USBD_FAIL;
 800e296:	2303      	movs	r3, #3
 800e298:	75fb      	strb	r3, [r7, #23]
          break;
 800e29a:	e002      	b.n	800e2a2 <USBD_CDC_Setup+0x19e>
          break;
 800e29c:	bf00      	nop
 800e29e:	e008      	b.n	800e2b2 <USBD_CDC_Setup+0x1ae>
          break;
 800e2a0:	bf00      	nop
      }
      break;
 800e2a2:	e006      	b.n	800e2b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e2a4:	6839      	ldr	r1, [r7, #0]
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f001 fecf 	bl	801004a <USBD_CtlError>
      ret = USBD_FAIL;
 800e2ac:	2303      	movs	r3, #3
 800e2ae:	75fb      	strb	r3, [r7, #23]
      break;
 800e2b0:	bf00      	nop
  }

  return (uint8_t)ret;
 800e2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3718      	adds	r7, #24
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	32b0      	adds	r2, #176	@ 0xb0
 800e2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d101      	bne.n	800e2e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e2e2:	2303      	movs	r3, #3
 800e2e4:	e065      	b.n	800e3b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	32b0      	adds	r2, #176	@ 0xb0
 800e2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e2f6:	78fb      	ldrb	r3, [r7, #3]
 800e2f8:	f003 020f 	and.w	r2, r3, #15
 800e2fc:	6879      	ldr	r1, [r7, #4]
 800e2fe:	4613      	mov	r3, r2
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	4413      	add	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	440b      	add	r3, r1
 800e308:	3318      	adds	r3, #24
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d02f      	beq.n	800e370 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e310:	78fb      	ldrb	r3, [r7, #3]
 800e312:	f003 020f 	and.w	r2, r3, #15
 800e316:	6879      	ldr	r1, [r7, #4]
 800e318:	4613      	mov	r3, r2
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4413      	add	r3, r2
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	440b      	add	r3, r1
 800e322:	3318      	adds	r3, #24
 800e324:	681a      	ldr	r2, [r3, #0]
 800e326:	78fb      	ldrb	r3, [r7, #3]
 800e328:	f003 010f 	and.w	r1, r3, #15
 800e32c:	68f8      	ldr	r0, [r7, #12]
 800e32e:	460b      	mov	r3, r1
 800e330:	009b      	lsls	r3, r3, #2
 800e332:	440b      	add	r3, r1
 800e334:	00db      	lsls	r3, r3, #3
 800e336:	4403      	add	r3, r0
 800e338:	3324      	adds	r3, #36	@ 0x24
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e340:	fb01 f303 	mul.w	r3, r1, r3
 800e344:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e346:	2b00      	cmp	r3, #0
 800e348:	d112      	bne.n	800e370 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e34a:	78fb      	ldrb	r3, [r7, #3]
 800e34c:	f003 020f 	and.w	r2, r3, #15
 800e350:	6879      	ldr	r1, [r7, #4]
 800e352:	4613      	mov	r3, r2
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	4413      	add	r3, r2
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	440b      	add	r3, r1
 800e35c:	3318      	adds	r3, #24
 800e35e:	2200      	movs	r2, #0
 800e360:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e362:	78f9      	ldrb	r1, [r7, #3]
 800e364:	2300      	movs	r3, #0
 800e366:	2200      	movs	r2, #0
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f000 fca2 	bl	800ecb2 <USBD_LL_Transmit>
 800e36e:	e01f      	b.n	800e3b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	2200      	movs	r2, #0
 800e374:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	33b0      	adds	r3, #176	@ 0xb0
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	4413      	add	r3, r2
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d010      	beq.n	800e3b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	33b0      	adds	r3, #176	@ 0xb0
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4413      	add	r3, r2
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	691b      	ldr	r3, [r3, #16]
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e3ac:	78fa      	ldrb	r2, [r7, #3]
 800e3ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	32b0      	adds	r2, #176	@ 0xb0
 800e3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	32b0      	adds	r2, #176	@ 0xb0
 800e3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d101      	bne.n	800e3ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e3e8:	2303      	movs	r3, #3
 800e3ea:	e01a      	b.n	800e422 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e3ec:	78fb      	ldrb	r3, [r7, #3]
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fc94 	bl	800ed1e <USBD_LL_GetRxDataSize>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	33b0      	adds	r3, #176	@ 0xb0
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	68db      	ldr	r3, [r3, #12]
 800e410:	68fa      	ldr	r2, [r7, #12]
 800e412:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e416:	68fa      	ldr	r2, [r7, #12]
 800e418:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e41c:	4611      	mov	r1, r2
 800e41e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e420:	2300      	movs	r3, #0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b084      	sub	sp, #16
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	32b0      	adds	r2, #176	@ 0xb0
 800e43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e440:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d101      	bne.n	800e44c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e448:	2303      	movs	r3, #3
 800e44a:	e024      	b.n	800e496 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	33b0      	adds	r3, #176	@ 0xb0
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	4413      	add	r3, r2
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d019      	beq.n	800e494 <USBD_CDC_EP0_RxReady+0x6a>
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e466:	2bff      	cmp	r3, #255	@ 0xff
 800e468:	d014      	beq.n	800e494 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	33b0      	adds	r3, #176	@ 0xb0
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	4413      	add	r3, r2
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	689b      	ldr	r3, [r3, #8]
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e482:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e48a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	22ff      	movs	r2, #255	@ 0xff
 800e490:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e494:	2300      	movs	r3, #0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
	...

0800e4a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e4a8:	2182      	movs	r1, #130	@ 0x82
 800e4aa:	4818      	ldr	r0, [pc, #96]	@ (800e50c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e4ac:	f000 ff97 	bl	800f3de <USBD_GetEpDesc>
 800e4b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e4b2:	2101      	movs	r1, #1
 800e4b4:	4815      	ldr	r0, [pc, #84]	@ (800e50c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e4b6:	f000 ff92 	bl	800f3de <USBD_GetEpDesc>
 800e4ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e4bc:	2181      	movs	r1, #129	@ 0x81
 800e4be:	4813      	ldr	r0, [pc, #76]	@ (800e50c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e4c0:	f000 ff8d 	bl	800f3de <USBD_GetEpDesc>
 800e4c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d002      	beq.n	800e4d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	2210      	movs	r2, #16
 800e4d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d006      	beq.n	800e4e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e4e0:	711a      	strb	r2, [r3, #4]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d006      	beq.n	800e4fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e4f4:	711a      	strb	r2, [r3, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2243      	movs	r2, #67	@ 0x43
 800e4fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e500:	4b02      	ldr	r3, [pc, #8]	@ (800e50c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e502:	4618      	mov	r0, r3
 800e504:	3718      	adds	r7, #24
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	20000070 	.word	0x20000070

0800e510 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e518:	2182      	movs	r1, #130	@ 0x82
 800e51a:	4818      	ldr	r0, [pc, #96]	@ (800e57c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e51c:	f000 ff5f 	bl	800f3de <USBD_GetEpDesc>
 800e520:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e522:	2101      	movs	r1, #1
 800e524:	4815      	ldr	r0, [pc, #84]	@ (800e57c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e526:	f000 ff5a 	bl	800f3de <USBD_GetEpDesc>
 800e52a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e52c:	2181      	movs	r1, #129	@ 0x81
 800e52e:	4813      	ldr	r0, [pc, #76]	@ (800e57c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e530:	f000 ff55 	bl	800f3de <USBD_GetEpDesc>
 800e534:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	2210      	movs	r2, #16
 800e540:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d006      	beq.n	800e556 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	2200      	movs	r2, #0
 800e54c:	711a      	strb	r2, [r3, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	f042 0202 	orr.w	r2, r2, #2
 800e554:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d006      	beq.n	800e56a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	711a      	strb	r2, [r3, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	f042 0202 	orr.w	r2, r2, #2
 800e568:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2243      	movs	r2, #67	@ 0x43
 800e56e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e570:	4b02      	ldr	r3, [pc, #8]	@ (800e57c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e572:	4618      	mov	r0, r3
 800e574:	3718      	adds	r7, #24
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	20000070 	.word	0x20000070

0800e580 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b086      	sub	sp, #24
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e588:	2182      	movs	r1, #130	@ 0x82
 800e58a:	4818      	ldr	r0, [pc, #96]	@ (800e5ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e58c:	f000 ff27 	bl	800f3de <USBD_GetEpDesc>
 800e590:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e592:	2101      	movs	r1, #1
 800e594:	4815      	ldr	r0, [pc, #84]	@ (800e5ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e596:	f000 ff22 	bl	800f3de <USBD_GetEpDesc>
 800e59a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e59c:	2181      	movs	r1, #129	@ 0x81
 800e59e:	4813      	ldr	r0, [pc, #76]	@ (800e5ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5a0:	f000 ff1d 	bl	800f3de <USBD_GetEpDesc>
 800e5a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	2210      	movs	r2, #16
 800e5b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d006      	beq.n	800e5c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5c0:	711a      	strb	r2, [r3, #4]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d006      	beq.n	800e5da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5d4:	711a      	strb	r2, [r3, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2243      	movs	r2, #67	@ 0x43
 800e5de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e5e0:	4b02      	ldr	r3, [pc, #8]	@ (800e5ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3718      	adds	r7, #24
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	20000070 	.word	0x20000070

0800e5f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	220a      	movs	r2, #10
 800e5fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e5fe:	4b03      	ldr	r3, [pc, #12]	@ (800e60c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e600:	4618      	mov	r0, r3
 800e602:	370c      	adds	r7, #12
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr
 800e60c:	2000002c 	.word	0x2000002c

0800e610 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d101      	bne.n	800e624 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e620:	2303      	movs	r3, #3
 800e622:	e009      	b.n	800e638 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	33b0      	adds	r3, #176	@ 0xb0
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	4413      	add	r3, r2
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e636:	2300      	movs	r3, #0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e644:	b480      	push	{r7}
 800e646:	b087      	sub	sp, #28
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	32b0      	adds	r2, #176	@ 0xb0
 800e65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e65e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d101      	bne.n	800e66a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e666:	2303      	movs	r3, #3
 800e668:	e008      	b.n	800e67c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	68ba      	ldr	r2, [r7, #8]
 800e66e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	371c      	adds	r7, #28
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e688:	b480      	push	{r7}
 800e68a:	b085      	sub	sp, #20
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	32b0      	adds	r2, #176	@ 0xb0
 800e69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d101      	bne.n	800e6ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e6a8:	2303      	movs	r3, #3
 800e6aa:	e004      	b.n	800e6b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	683a      	ldr	r2, [r7, #0]
 800e6b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e6b4:	2300      	movs	r3, #0
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3714      	adds	r7, #20
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr
	...

0800e6c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	32b0      	adds	r2, #176	@ 0xb0
 800e6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	32b0      	adds	r2, #176	@ 0xb0
 800e6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d101      	bne.n	800e6f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e6ee:	2303      	movs	r3, #3
 800e6f0:	e018      	b.n	800e724 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	7c1b      	ldrb	r3, [r3, #16]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d10a      	bne.n	800e710 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e6fa:	4b0c      	ldr	r3, [pc, #48]	@ (800e72c <USBD_CDC_ReceivePacket+0x68>)
 800e6fc:	7819      	ldrb	r1, [r3, #0]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 faed 	bl	800ece8 <USBD_LL_PrepareReceive>
 800e70e:	e008      	b.n	800e722 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e710:	4b06      	ldr	r3, [pc, #24]	@ (800e72c <USBD_CDC_ReceivePacket+0x68>)
 800e712:	7819      	ldrb	r1, [r3, #0]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e71a:	2340      	movs	r3, #64	@ 0x40
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 fae3 	bl	800ece8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e722:	2300      	movs	r3, #0
}
 800e724:	4618      	mov	r0, r3
 800e726:	3710      	adds	r7, #16
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	200000b4 	.word	0x200000b4

0800e730 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e734:	2200      	movs	r2, #0
 800e736:	4905      	ldr	r1, [pc, #20]	@ (800e74c <TEMPLATE_Init+0x1c>)
 800e738:	4805      	ldr	r0, [pc, #20]	@ (800e750 <TEMPLATE_Init+0x20>)
 800e73a:	f7ff ff83 	bl	800e644 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e73e:	4905      	ldr	r1, [pc, #20]	@ (800e754 <TEMPLATE_Init+0x24>)
 800e740:	4803      	ldr	r0, [pc, #12]	@ (800e750 <TEMPLATE_Init+0x20>)
 800e742:	f7ff ffa1 	bl	800e688 <USBD_CDC_SetRxBuffer>
      return (0);
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	20000d3c 	.word	0x20000d3c
 800e750:	200007b4 	.word	0x200007b4
 800e754:	20000b3c 	.word	0x20000b3c

0800e758 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800e758:	b480      	push	{r7}
 800e75a:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800e75c:	2300      	movs	r3, #0
}
 800e75e:	4618      	mov	r0, r3
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800e768:	b480      	push	{r7}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	4603      	mov	r3, r0
 800e770:	6039      	str	r1, [r7, #0]
 800e772:	71fb      	strb	r3, [r7, #7]
 800e774:	4613      	mov	r3, r2
 800e776:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800e778:	79fb      	ldrb	r3, [r7, #7]
 800e77a:	2b23      	cmp	r3, #35	@ 0x23
 800e77c:	f200 8098 	bhi.w	800e8b0 <TEMPLATE_Control+0x148>
 800e780:	a201      	add	r2, pc, #4	@ (adr r2, 800e788 <TEMPLATE_Control+0x20>)
 800e782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e786:	bf00      	nop
 800e788:	0800e8b1 	.word	0x0800e8b1
 800e78c:	0800e8b1 	.word	0x0800e8b1
 800e790:	0800e8b1 	.word	0x0800e8b1
 800e794:	0800e8b1 	.word	0x0800e8b1
 800e798:	0800e8b1 	.word	0x0800e8b1
 800e79c:	0800e8b1 	.word	0x0800e8b1
 800e7a0:	0800e8b1 	.word	0x0800e8b1
 800e7a4:	0800e8b1 	.word	0x0800e8b1
 800e7a8:	0800e8b1 	.word	0x0800e8b1
 800e7ac:	0800e8b1 	.word	0x0800e8b1
 800e7b0:	0800e8b1 	.word	0x0800e8b1
 800e7b4:	0800e8b1 	.word	0x0800e8b1
 800e7b8:	0800e8b1 	.word	0x0800e8b1
 800e7bc:	0800e8b1 	.word	0x0800e8b1
 800e7c0:	0800e8b1 	.word	0x0800e8b1
 800e7c4:	0800e8b1 	.word	0x0800e8b1
 800e7c8:	0800e8b1 	.word	0x0800e8b1
 800e7cc:	0800e8b1 	.word	0x0800e8b1
 800e7d0:	0800e8b1 	.word	0x0800e8b1
 800e7d4:	0800e8b1 	.word	0x0800e8b1
 800e7d8:	0800e8b1 	.word	0x0800e8b1
 800e7dc:	0800e8b1 	.word	0x0800e8b1
 800e7e0:	0800e8b1 	.word	0x0800e8b1
 800e7e4:	0800e8b1 	.word	0x0800e8b1
 800e7e8:	0800e8b1 	.word	0x0800e8b1
 800e7ec:	0800e8b1 	.word	0x0800e8b1
 800e7f0:	0800e8b1 	.word	0x0800e8b1
 800e7f4:	0800e8b1 	.word	0x0800e8b1
 800e7f8:	0800e8b1 	.word	0x0800e8b1
 800e7fc:	0800e8b1 	.word	0x0800e8b1
 800e800:	0800e8b1 	.word	0x0800e8b1
 800e804:	0800e8b1 	.word	0x0800e8b1
 800e808:	0800e819 	.word	0x0800e819
 800e80c:	0800e85d 	.word	0x0800e85d
 800e810:	0800e8b1 	.word	0x0800e8b1
 800e814:	0800e8b1 	.word	0x0800e8b1
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	461a      	mov	r2, r3
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	3301      	adds	r3, #1
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	021b      	lsls	r3, r3, #8
 800e826:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	3302      	adds	r3, #2
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e830:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	3303      	adds	r3, #3
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	061b      	lsls	r3, r3, #24
 800e83a:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e83c:	461a      	mov	r2, r3
 800e83e:	4b20      	ldr	r3, [pc, #128]	@ (800e8c0 <TEMPLATE_Control+0x158>)
 800e840:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	791a      	ldrb	r2, [r3, #4]
 800e846:	4b1e      	ldr	r3, [pc, #120]	@ (800e8c0 <TEMPLATE_Control+0x158>)
 800e848:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	795a      	ldrb	r2, [r3, #5]
 800e84e:	4b1c      	ldr	r3, [pc, #112]	@ (800e8c0 <TEMPLATE_Control+0x158>)
 800e850:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	799a      	ldrb	r2, [r3, #6]
 800e856:	4b1a      	ldr	r3, [pc, #104]	@ (800e8c0 <TEMPLATE_Control+0x158>)
 800e858:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800e85a:	e02a      	b.n	800e8b2 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800e85c:	4b18      	ldr	r3, [pc, #96]	@ (800e8c0 <TEMPLATE_Control+0x158>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	b2da      	uxtb	r2, r3
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800e866:	4b16      	ldr	r3, [pc, #88]	@ (800e8c0 <TEMPLATE_Control+0x158>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	0a1a      	lsrs	r2, r3, #8
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	3301      	adds	r3, #1
 800e870:	b2d2      	uxtb	r2, r2
 800e872:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800e874:	4b12      	ldr	r3, [pc, #72]	@ (800e8c0 <TEMPLATE_Control+0x158>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	0c1a      	lsrs	r2, r3, #16
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	3302      	adds	r3, #2
 800e87e:	b2d2      	uxtb	r2, r2
 800e880:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800e882:	4b0f      	ldr	r3, [pc, #60]	@ (800e8c0 <TEMPLATE_Control+0x158>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	0e1a      	lsrs	r2, r3, #24
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	3303      	adds	r3, #3
 800e88c:	b2d2      	uxtb	r2, r2
 800e88e:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	3304      	adds	r3, #4
 800e894:	4a0a      	ldr	r2, [pc, #40]	@ (800e8c0 <TEMPLATE_Control+0x158>)
 800e896:	7912      	ldrb	r2, [r2, #4]
 800e898:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	3305      	adds	r3, #5
 800e89e:	4a08      	ldr	r2, [pc, #32]	@ (800e8c0 <TEMPLATE_Control+0x158>)
 800e8a0:	7952      	ldrb	r2, [r2, #5]
 800e8a2:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	3306      	adds	r3, #6
 800e8a8:	4a05      	ldr	r2, [pc, #20]	@ (800e8c0 <TEMPLATE_Control+0x158>)
 800e8aa:	7992      	ldrb	r2, [r2, #6]
 800e8ac:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800e8ae:	e000      	b.n	800e8b2 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800e8b0:	bf00      	nop
  }

  return (0);
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr
 800e8c0:	200000cc 	.word	0x200000cc

0800e8c4 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b0b4      	sub	sp, #208	@ 0xd0
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
	// Create a buffer for the log message
	char hexStr[3 * CDC_DATA_FS_MAX_PACKET_SIZE + 1] = {0}; // 2 hex chars + space per byte
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	60bb      	str	r3, [r7, #8]
 800e8d2:	f107 030c 	add.w	r3, r7, #12
 800e8d6:	22bd      	movs	r2, #189	@ 0xbd
 800e8d8:	2100      	movs	r1, #0
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f001 ff24 	bl	8010728 <memset>

	// Convert received bytes to hex string
	for (uint32_t i = 0; i < *Len; ++i)
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e8e6:	e015      	b.n	800e914 <TEMPLATE_Receive+0x50>
	{
		sprintf(&hexStr[i * 3], "%02X ", Buf[i]);
 800e8e8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800e8ec:	4613      	mov	r3, r2
 800e8ee:	005b      	lsls	r3, r3, #1
 800e8f0:	4413      	add	r3, r2
 800e8f2:	f107 0208 	add.w	r2, r7, #8
 800e8f6:	18d0      	adds	r0, r2, r3
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e8fe:	4413      	add	r3, r2
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	461a      	mov	r2, r3
 800e904:	4923      	ldr	r1, [pc, #140]	@ (800e994 <TEMPLATE_Receive+0xd0>)
 800e906:	f001 fe73 	bl	80105f0 <siprintf>
	for (uint32_t i = 0; i < *Len; ++i)
 800e90a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e90e:	3301      	adds	r3, #1
 800e910:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d3e3      	bcc.n	800e8e8 <TEMPLATE_Receive+0x24>
	}

	log_info("USB Data (%lu bytes): %s", *Len, hexStr);
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f107 0208 	add.w	r2, r7, #8
 800e928:	4619      	mov	r1, r3
 800e92a:	481b      	ldr	r0, [pc, #108]	@ (800e998 <TEMPLATE_Receive+0xd4>)
 800e92c:	f7f1 ff8a 	bl	8000844 <log_info>

	// Don't overflow buffer
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	4b19      	ldr	r3, [pc, #100]	@ (800e99c <TEMPLATE_Receive+0xd8>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4413      	add	r3, r2
 800e93a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e93e:	d215      	bcs.n	800e96c <TEMPLATE_Receive+0xa8>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 800e940:	4b16      	ldr	r3, [pc, #88]	@ (800e99c <TEMPLATE_Receive+0xd8>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a16      	ldr	r2, [pc, #88]	@ (800e9a0 <TEMPLATE_Receive+0xdc>)
 800e946:	1898      	adds	r0, r3, r2
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	461a      	mov	r2, r3
 800e94e:	6879      	ldr	r1, [r7, #4]
 800e950:	f001 ff65 	bl	801081e <memcpy>
        usb_rx_index += *Len;
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	4b10      	ldr	r3, [pc, #64]	@ (800e99c <TEMPLATE_Receive+0xd8>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4413      	add	r3, r2
 800e95e:	4a0f      	ldr	r2, [pc, #60]	@ (800e99c <TEMPLATE_Receive+0xd8>)
 800e960:	6013      	str	r3, [r2, #0]
        return USBD_FAIL;
    }

    // Optional: check for custom end-of-transmission pattern
    // For now, just simulate end if host sends less than 64 bytes
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2b3f      	cmp	r3, #63	@ 0x3f
 800e968:	d80b      	bhi.n	800e982 <TEMPLATE_Receive+0xbe>
 800e96a:	e007      	b.n	800e97c <TEMPLATE_Receive+0xb8>
        usb_rx_index = 0;
 800e96c:	4b0b      	ldr	r3, [pc, #44]	@ (800e99c <TEMPLATE_Receive+0xd8>)
 800e96e:	2200      	movs	r2, #0
 800e970:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 800e972:	480c      	ldr	r0, [pc, #48]	@ (800e9a4 <TEMPLATE_Receive+0xe0>)
 800e974:	f7f1 ff80 	bl	8000878 <log_error>
        return USBD_FAIL;
 800e978:	2303      	movs	r3, #3
 800e97a:	e006      	b.n	800e98a <TEMPLATE_Receive+0xc6>
    {
        usb_rx_complete = true;
 800e97c:	4b0a      	ldr	r3, [pc, #40]	@ (800e9a8 <TEMPLATE_Receive+0xe4>)
 800e97e:	2201      	movs	r2, #1
 800e980:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e982:	480a      	ldr	r0, [pc, #40]	@ (800e9ac <TEMPLATE_Receive+0xe8>)
 800e984:	f7ff fe9e 	bl	800e6c4 <USBD_CDC_ReceivePacket>
    return USBD_OK;
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	37d0      	adds	r7, #208	@ 0xd0
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	08011a7c 	.word	0x08011a7c
 800e998:	08011a84 	.word	0x08011a84
 800e99c:	20010f3c 	.word	0x20010f3c
 800e9a0:	20000f3c 	.word	0x20000f3c
 800e9a4:	08011aa0 	.word	0x08011aa0
 800e9a8:	20010f40 	.word	0x20010f40
 800e9ac:	200007b4 	.word	0x200007b4

0800e9b0 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b085      	sub	sp, #20
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	4613      	mov	r3, r2
 800e9bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 800e9be:	2300      	movs	r3, #0

}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3714      	adds	r7, #20
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	4610      	mov	r0, r2
 800e9e4:	f000 faa5 	bl	800ef32 <USBD_LL_SetupStage>
}
 800e9e8:	bf00      	nop
 800e9ea:	3708      	adds	r7, #8
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}

0800e9f0 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800ea02:	78fa      	ldrb	r2, [r7, #3]
 800ea04:	6879      	ldr	r1, [r7, #4]
 800ea06:	4613      	mov	r3, r2
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	4413      	add	r3, r2
 800ea0c:	00db      	lsls	r3, r3, #3
 800ea0e:	440b      	add	r3, r1
 800ea10:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	78fb      	ldrb	r3, [r7, #3]
 800ea18:	4619      	mov	r1, r3
 800ea1a:	f000 fadf 	bl	800efdc <USBD_LL_DataOutStage>
}
 800ea1e:	bf00      	nop
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}

0800ea26 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800ea26:	b580      	push	{r7, lr}
 800ea28:	b082      	sub	sp, #8
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
 800ea2e:	460b      	mov	r3, r1
 800ea30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800ea38:	78fa      	ldrb	r2, [r7, #3]
 800ea3a:	6879      	ldr	r1, [r7, #4]
 800ea3c:	4613      	mov	r3, r2
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	4413      	add	r3, r2
 800ea42:	00db      	lsls	r3, r3, #3
 800ea44:	440b      	add	r3, r1
 800ea46:	3328      	adds	r3, #40	@ 0x28
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	78fb      	ldrb	r3, [r7, #3]
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	f000 fb78 	bl	800f142 <USBD_LL_DataInStage>
}
 800ea52:	bf00      	nop
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}

0800ea5a <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800ea5a:	b580      	push	{r7, lr}
 800ea5c:	b082      	sub	sp, #8
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f000 fc7e 	bl	800f36a <USBD_LL_SOF>
}
 800ea6e:	bf00      	nop
 800ea70:	3708      	adds	r7, #8
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800ea76:	b580      	push	{r7, lr}
 800ea78:	b084      	sub	sp, #16
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	79db      	ldrb	r3, [r3, #7]
 800ea86:	2b02      	cmp	r3, #2
 800ea88:	d001      	beq.n	800ea8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ea8a:	f7f2 fc81 	bl	8001390 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800ea94:	7bfa      	ldrb	r2, [r7, #15]
 800ea96:	4611      	mov	r1, r2
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f000 fc56 	bl	800f34a <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f000 fbfe 	bl	800f2a6 <USBD_LL_Reset>
}
 800eaaa:	bf00      	nop
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}
	...

0800eab4 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4a19      	ldr	r2, [pc, #100]	@ (800eb24 <USBD_LL_Init+0x70>)
 800eac0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eaca:	2340      	movs	r3, #64	@ 0x40
 800eacc:	2200      	movs	r2, #0
 800eace:	2100      	movs	r1, #0
 800ead0:	f7f5 feb8 	bl	8004844 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eada:	2380      	movs	r3, #128	@ 0x80
 800eadc:	2200      	movs	r2, #0
 800eade:	2180      	movs	r1, #128	@ 0x80
 800eae0:	f7f5 feb0 	bl	8004844 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eaea:	23c0      	movs	r3, #192	@ 0xc0
 800eaec:	2200      	movs	r2, #0
 800eaee:	2181      	movs	r1, #129	@ 0x81
 800eaf0:	f7f5 fea8 	bl	8004844 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eafa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eafe:	2200      	movs	r2, #0
 800eb00:	2101      	movs	r1, #1
 800eb02:	f7f5 fe9f 	bl	8004844 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb0c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800eb10:	2200      	movs	r2, #0
 800eb12:	2182      	movs	r1, #130	@ 0x82
 800eb14:	f7f5 fe96 	bl	8004844 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800eb18:	2300      	movs	r3, #0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3708      	adds	r7, #8
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	200004d0 	.word	0x200004d0

0800eb28 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7f4 fb68 	bl	800320c <HAL_PCD_Start>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800eb40:	7bfb      	ldrb	r3, [r7, #15]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f000 f916 	bl	800ed74 <USBD_Get_USB_Status>
 800eb48:	4603      	mov	r3, r0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b084      	sub	sp, #16
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
 800eb5a:	4608      	mov	r0, r1
 800eb5c:	4611      	mov	r1, r2
 800eb5e:	461a      	mov	r2, r3
 800eb60:	4603      	mov	r3, r0
 800eb62:	70fb      	strb	r3, [r7, #3]
 800eb64:	460b      	mov	r3, r1
 800eb66:	70bb      	strb	r3, [r7, #2]
 800eb68:	4613      	mov	r3, r2
 800eb6a:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb72:	78bb      	ldrb	r3, [r7, #2]
 800eb74:	883a      	ldrh	r2, [r7, #0]
 800eb76:	78f9      	ldrb	r1, [r7, #3]
 800eb78:	f7f4 fc97 	bl	80034aa <HAL_PCD_EP_Open>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800eb80:	7bfb      	ldrb	r3, [r7, #15]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f000 f8f6 	bl	800ed74 <USBD_Get_USB_Status>
 800eb88:	4603      	mov	r3, r0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b084      	sub	sp, #16
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eba4:	78fa      	ldrb	r2, [r7, #3]
 800eba6:	4611      	mov	r1, r2
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7f4 fcdf 	bl	800356c <HAL_PCD_EP_Close>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ebb2:	7bfb      	ldrb	r3, [r7, #15]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f000 f8dd 	bl	800ed74 <USBD_Get_USB_Status>
 800ebba:	4603      	mov	r3, r0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b084      	sub	sp, #16
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ebd6:	78fa      	ldrb	r2, [r7, #3]
 800ebd8:	4611      	mov	r1, r2
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f7f4 fd92 	bl	8003704 <HAL_PCD_EP_SetStall>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ebe4:	7bfb      	ldrb	r3, [r7, #15]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f000 f8c4 	bl	800ed74 <USBD_Get_USB_Status>
 800ebec:	4603      	mov	r3, r0
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3710      	adds	r7, #16
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}

0800ebf6 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800ebf6:	b580      	push	{r7, lr}
 800ebf8:	b084      	sub	sp, #16
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	6078      	str	r0, [r7, #4]
 800ebfe:	460b      	mov	r3, r1
 800ec00:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec08:	78fa      	ldrb	r2, [r7, #3]
 800ec0a:	4611      	mov	r1, r2
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7f4 fdcd 	bl	80037ac <HAL_PCD_EP_ClrStall>
 800ec12:	4603      	mov	r3, r0
 800ec14:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ec16:	7bfb      	ldrb	r3, [r7, #15]
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f000 f8ab 	bl	800ed74 <USBD_Get_USB_Status>
 800ec1e:	4603      	mov	r3, r0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3710      	adds	r7, #16
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b085      	sub	sp, #20
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	460b      	mov	r3, r1
 800ec32:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec3a:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800ec3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	da0b      	bge.n	800ec5c <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ec44:	78fb      	ldrb	r3, [r7, #3]
 800ec46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ec4a:	68f9      	ldr	r1, [r7, #12]
 800ec4c:	4613      	mov	r3, r2
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	4413      	add	r3, r2
 800ec52:	00db      	lsls	r3, r3, #3
 800ec54:	440b      	add	r3, r1
 800ec56:	3316      	adds	r3, #22
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	e00b      	b.n	800ec74 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ec5c:	78fb      	ldrb	r3, [r7, #3]
 800ec5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ec62:	68f9      	ldr	r1, [r7, #12]
 800ec64:	4613      	mov	r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4413      	add	r3, r2
 800ec6a:	00db      	lsls	r3, r3, #3
 800ec6c:	440b      	add	r3, r1
 800ec6e:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800ec72:	781b      	ldrb	r3, [r3, #0]
      }
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3714      	adds	r7, #20
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec92:	78fa      	ldrb	r2, [r7, #3]
 800ec94:	4611      	mov	r1, r2
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7f4 fbe3 	bl	8003462 <HAL_PCD_SetAddress>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800eca0:	7bfb      	ldrb	r3, [r7, #15]
 800eca2:	4618      	mov	r0, r3
 800eca4:	f000 f866 	bl	800ed74 <USBD_Get_USB_Status>
 800eca8:	4603      	mov	r3, r0
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3710      	adds	r7, #16
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}

0800ecb2 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800ecb2:	b580      	push	{r7, lr}
 800ecb4:	b086      	sub	sp, #24
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	60f8      	str	r0, [r7, #12]
 800ecba:	607a      	str	r2, [r7, #4]
 800ecbc:	603b      	str	r3, [r7, #0]
 800ecbe:	460b      	mov	r3, r1
 800ecc0:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ecc8:	7af9      	ldrb	r1, [r7, #11]
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	f7f4 fce1 	bl	8003694 <HAL_PCD_EP_Transmit>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800ecd6:	7dfb      	ldrb	r3, [r7, #23]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f000 f84b 	bl	800ed74 <USBD_Get_USB_Status>
 800ecde:	4603      	mov	r3, r0
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3718      	adds	r7, #24
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b086      	sub	sp, #24
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	607a      	str	r2, [r7, #4]
 800ecf2:	603b      	str	r3, [r7, #0]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ecfe:	7af9      	ldrb	r1, [r7, #11]
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	f7f4 fc7c 	bl	8003600 <HAL_PCD_EP_Receive>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800ed0c:	7dfb      	ldrb	r3, [r7, #23]
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f000 f830 	bl	800ed74 <USBD_Get_USB_Status>
 800ed14:	4603      	mov	r3, r0
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3718      	adds	r7, #24
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}

0800ed1e <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed1e:	b580      	push	{r7, lr}
 800ed20:	b082      	sub	sp, #8
 800ed22:	af00      	add	r7, sp, #0
 800ed24:	6078      	str	r0, [r7, #4]
 800ed26:	460b      	mov	r3, r1
 800ed28:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed30:	78fa      	ldrb	r2, [r7, #3]
 800ed32:	4611      	mov	r1, r2
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7f4 fc95 	bl	8003664 <HAL_PCD_EP_GetRxCount>
 800ed3a:	4603      	mov	r3, r0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3708      	adds	r7, #8
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800ed4c:	4b03      	ldr	r3, [pc, #12]	@ (800ed5c <USBD_static_malloc+0x18>)
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	370c      	adds	r7, #12
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	20010f44 	.word	0x20010f44

0800ed60 <USBD_static_free>:

void USBD_static_free(void *p)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800ed68:	bf00      	nop
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b085      	sub	sp, #20
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800ed82:	79fb      	ldrb	r3, [r7, #7]
 800ed84:	2b03      	cmp	r3, #3
 800ed86:	d817      	bhi.n	800edb8 <USBD_Get_USB_Status+0x44>
 800ed88:	a201      	add	r2, pc, #4	@ (adr r2, 800ed90 <USBD_Get_USB_Status+0x1c>)
 800ed8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed8e:	bf00      	nop
 800ed90:	0800eda1 	.word	0x0800eda1
 800ed94:	0800eda7 	.word	0x0800eda7
 800ed98:	0800edad 	.word	0x0800edad
 800ed9c:	0800edb3 	.word	0x0800edb3
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800eda0:	2300      	movs	r3, #0
 800eda2:	73fb      	strb	r3, [r7, #15]
             break;
 800eda4:	e00b      	b.n	800edbe <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800eda6:	2303      	movs	r3, #3
 800eda8:	73fb      	strb	r3, [r7, #15]
             break;
 800edaa:	e008      	b.n	800edbe <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800edac:	2301      	movs	r3, #1
 800edae:	73fb      	strb	r3, [r7, #15]
             break;
 800edb0:	e005      	b.n	800edbe <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800edb2:	2303      	movs	r3, #3
 800edb4:	73fb      	strb	r3, [r7, #15]
             break;
 800edb6:	e002      	b.n	800edbe <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800edb8:	2303      	movs	r3, #3
 800edba:	73fb      	strb	r3, [r7, #15]
             break;
 800edbc:	bf00      	nop
      }
      return usb_status;
 800edbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3714      	adds	r7, #20
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr

0800edcc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b086      	sub	sp, #24
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	60f8      	str	r0, [r7, #12]
 800edd4:	60b9      	str	r1, [r7, #8]
 800edd6:	4613      	mov	r3, r2
 800edd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d101      	bne.n	800ede4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ede0:	2303      	movs	r3, #3
 800ede2:	e01f      	b.n	800ee24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2200      	movs	r2, #0
 800ede8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2200      	movs	r2, #0
 800edf0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2200      	movs	r2, #0
 800edf8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d003      	beq.n	800ee0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	68ba      	ldr	r2, [r7, #8]
 800ee06:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	79fa      	ldrb	r2, [r7, #7]
 800ee16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f7ff fe4b 	bl	800eab4 <USBD_LL_Init>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ee22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3718      	adds	r7, #24
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ee36:	2300      	movs	r3, #0
 800ee38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d101      	bne.n	800ee44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ee40:	2303      	movs	r3, #3
 800ee42:	e025      	b.n	800ee90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	683a      	ldr	r2, [r7, #0]
 800ee48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	32ae      	adds	r2, #174	@ 0xae
 800ee56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d00f      	beq.n	800ee80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	32ae      	adds	r2, #174	@ 0xae
 800ee6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee70:	f107 020e 	add.w	r2, r7, #14
 800ee74:	4610      	mov	r0, r2
 800ee76:	4798      	blx	r3
 800ee78:	4602      	mov	r2, r0
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee86:	1c5a      	adds	r2, r3, #1
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ee8e:	2300      	movs	r3, #0
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f7ff fe41 	bl	800eb28 <USBD_LL_Start>
 800eea6:	4603      	mov	r3, r0
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3708      	adds	r7, #8
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b083      	sub	sp, #12
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eeb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	370c      	adds	r7, #12
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr

0800eec6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b084      	sub	sp, #16
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
 800eece:	460b      	mov	r3, r1
 800eed0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eed2:	2300      	movs	r3, #0
 800eed4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d009      	beq.n	800eef4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	78fa      	ldrb	r2, [r7, #3]
 800eeea:	4611      	mov	r1, r2
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	4798      	blx	r3
 800eef0:	4603      	mov	r3, r0
 800eef2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b084      	sub	sp, #16
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
 800ef06:	460b      	mov	r3, r1
 800ef08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	78fa      	ldrb	r2, [r7, #3]
 800ef18:	4611      	mov	r1, r2
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	4798      	blx	r3
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d001      	beq.n	800ef28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ef24:	2303      	movs	r3, #3
 800ef26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3710      	adds	r7, #16
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b084      	sub	sp, #16
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
 800ef3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef42:	6839      	ldr	r1, [r7, #0]
 800ef44:	4618      	mov	r0, r3
 800ef46:	f001 f846 	bl	800ffd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ef58:	461a      	mov	r2, r3
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ef66:	f003 031f 	and.w	r3, r3, #31
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	d01a      	beq.n	800efa4 <USBD_LL_SetupStage+0x72>
 800ef6e:	2b02      	cmp	r3, #2
 800ef70:	d822      	bhi.n	800efb8 <USBD_LL_SetupStage+0x86>
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d002      	beq.n	800ef7c <USBD_LL_SetupStage+0x4a>
 800ef76:	2b01      	cmp	r3, #1
 800ef78:	d00a      	beq.n	800ef90 <USBD_LL_SetupStage+0x5e>
 800ef7a:	e01d      	b.n	800efb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef82:	4619      	mov	r1, r3
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 fa9d 	bl	800f4c4 <USBD_StdDevReq>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ef8e:	e020      	b.n	800efd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef96:	4619      	mov	r1, r3
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 fb05 	bl	800f5a8 <USBD_StdItfReq>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	73fb      	strb	r3, [r7, #15]
      break;
 800efa2:	e016      	b.n	800efd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800efaa:	4619      	mov	r1, r3
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f000 fb67 	bl	800f680 <USBD_StdEPReq>
 800efb2:	4603      	mov	r3, r0
 800efb4:	73fb      	strb	r3, [r7, #15]
      break;
 800efb6:	e00c      	b.n	800efd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800efbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800efc2:	b2db      	uxtb	r3, r3
 800efc4:	4619      	mov	r1, r3
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f7ff fdfc 	bl	800ebc4 <USBD_LL_StallEP>
 800efcc:	4603      	mov	r3, r0
 800efce:	73fb      	strb	r3, [r7, #15]
      break;
 800efd0:	bf00      	nop
  }

  return ret;
 800efd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b086      	sub	sp, #24
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	60f8      	str	r0, [r7, #12]
 800efe4:	460b      	mov	r3, r1
 800efe6:	607a      	str	r2, [r7, #4]
 800efe8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800efea:	2300      	movs	r3, #0
 800efec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800efee:	7afb      	ldrb	r3, [r7, #11]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d16e      	bne.n	800f0d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800effa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f002:	2b03      	cmp	r3, #3
 800f004:	f040 8098 	bne.w	800f138 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	689a      	ldr	r2, [r3, #8]
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	429a      	cmp	r2, r3
 800f012:	d913      	bls.n	800f03c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	689a      	ldr	r2, [r3, #8]
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	1ad2      	subs	r2, r2, r3
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	68da      	ldr	r2, [r3, #12]
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	689b      	ldr	r3, [r3, #8]
 800f02a:	4293      	cmp	r3, r2
 800f02c:	bf28      	it	cs
 800f02e:	4613      	movcs	r3, r2
 800f030:	461a      	mov	r2, r3
 800f032:	6879      	ldr	r1, [r7, #4]
 800f034:	68f8      	ldr	r0, [r7, #12]
 800f036:	f001 f9cf 	bl	80103d8 <USBD_CtlContinueRx>
 800f03a:	e07d      	b.n	800f138 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f042:	f003 031f 	and.w	r3, r3, #31
 800f046:	2b02      	cmp	r3, #2
 800f048:	d014      	beq.n	800f074 <USBD_LL_DataOutStage+0x98>
 800f04a:	2b02      	cmp	r3, #2
 800f04c:	d81d      	bhi.n	800f08a <USBD_LL_DataOutStage+0xae>
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d002      	beq.n	800f058 <USBD_LL_DataOutStage+0x7c>
 800f052:	2b01      	cmp	r3, #1
 800f054:	d003      	beq.n	800f05e <USBD_LL_DataOutStage+0x82>
 800f056:	e018      	b.n	800f08a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f058:	2300      	movs	r3, #0
 800f05a:	75bb      	strb	r3, [r7, #22]
            break;
 800f05c:	e018      	b.n	800f090 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f064:	b2db      	uxtb	r3, r3
 800f066:	4619      	mov	r1, r3
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f000 f99e 	bl	800f3aa <USBD_CoreFindIF>
 800f06e:	4603      	mov	r3, r0
 800f070:	75bb      	strb	r3, [r7, #22]
            break;
 800f072:	e00d      	b.n	800f090 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	4619      	mov	r1, r3
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	f000 f9a0 	bl	800f3c4 <USBD_CoreFindEP>
 800f084:	4603      	mov	r3, r0
 800f086:	75bb      	strb	r3, [r7, #22]
            break;
 800f088:	e002      	b.n	800f090 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f08a:	2300      	movs	r3, #0
 800f08c:	75bb      	strb	r3, [r7, #22]
            break;
 800f08e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f090:	7dbb      	ldrb	r3, [r7, #22]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d119      	bne.n	800f0ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	2b03      	cmp	r3, #3
 800f0a0:	d113      	bne.n	800f0ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f0a2:	7dba      	ldrb	r2, [r7, #22]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	32ae      	adds	r2, #174	@ 0xae
 800f0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0ac:	691b      	ldr	r3, [r3, #16]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d00b      	beq.n	800f0ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f0b2:	7dba      	ldrb	r2, [r7, #22]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f0ba:	7dba      	ldrb	r2, [r7, #22]
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	32ae      	adds	r2, #174	@ 0xae
 800f0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	f001 f995 	bl	80103fa <USBD_CtlSendStatus>
 800f0d0:	e032      	b.n	800f138 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f0d2:	7afb      	ldrb	r3, [r7, #11]
 800f0d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	4619      	mov	r1, r3
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f000 f971 	bl	800f3c4 <USBD_CoreFindEP>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f0e6:	7dbb      	ldrb	r3, [r7, #22]
 800f0e8:	2bff      	cmp	r3, #255	@ 0xff
 800f0ea:	d025      	beq.n	800f138 <USBD_LL_DataOutStage+0x15c>
 800f0ec:	7dbb      	ldrb	r3, [r7, #22]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d122      	bne.n	800f138 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0f8:	b2db      	uxtb	r3, r3
 800f0fa:	2b03      	cmp	r3, #3
 800f0fc:	d117      	bne.n	800f12e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f0fe:	7dba      	ldrb	r2, [r7, #22]
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	32ae      	adds	r2, #174	@ 0xae
 800f104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f108:	699b      	ldr	r3, [r3, #24]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00f      	beq.n	800f12e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f10e:	7dba      	ldrb	r2, [r7, #22]
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f116:	7dba      	ldrb	r2, [r7, #22]
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	32ae      	adds	r2, #174	@ 0xae
 800f11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f120:	699b      	ldr	r3, [r3, #24]
 800f122:	7afa      	ldrb	r2, [r7, #11]
 800f124:	4611      	mov	r1, r2
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	4798      	blx	r3
 800f12a:	4603      	mov	r3, r0
 800f12c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f12e:	7dfb      	ldrb	r3, [r7, #23]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d001      	beq.n	800f138 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f134:	7dfb      	ldrb	r3, [r7, #23]
 800f136:	e000      	b.n	800f13a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f138:	2300      	movs	r3, #0
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3718      	adds	r7, #24
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}

0800f142 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f142:	b580      	push	{r7, lr}
 800f144:	b086      	sub	sp, #24
 800f146:	af00      	add	r7, sp, #0
 800f148:	60f8      	str	r0, [r7, #12]
 800f14a:	460b      	mov	r3, r1
 800f14c:	607a      	str	r2, [r7, #4]
 800f14e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f150:	7afb      	ldrb	r3, [r7, #11]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d16f      	bne.n	800f236 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	3314      	adds	r3, #20
 800f15a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f162:	2b02      	cmp	r3, #2
 800f164:	d15a      	bne.n	800f21c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	689a      	ldr	r2, [r3, #8]
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	68db      	ldr	r3, [r3, #12]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d914      	bls.n	800f19c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	689a      	ldr	r2, [r3, #8]
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	1ad2      	subs	r2, r2, r3
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	461a      	mov	r2, r3
 800f186:	6879      	ldr	r1, [r7, #4]
 800f188:	68f8      	ldr	r0, [r7, #12]
 800f18a:	f001 f8f7 	bl	801037c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f18e:	2300      	movs	r3, #0
 800f190:	2200      	movs	r2, #0
 800f192:	2100      	movs	r1, #0
 800f194:	68f8      	ldr	r0, [r7, #12]
 800f196:	f7ff fda7 	bl	800ece8 <USBD_LL_PrepareReceive>
 800f19a:	e03f      	b.n	800f21c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	68da      	ldr	r2, [r3, #12]
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	689b      	ldr	r3, [r3, #8]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d11c      	bne.n	800f1e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	685a      	ldr	r2, [r3, #4]
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d316      	bcc.n	800f1e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	685a      	ldr	r2, [r3, #4]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d20f      	bcs.n	800f1e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	2100      	movs	r1, #0
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	f001 f8d8 	bl	801037c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	2100      	movs	r1, #0
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f7ff fd84 	bl	800ece8 <USBD_LL_PrepareReceive>
 800f1e0:	e01c      	b.n	800f21c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b03      	cmp	r3, #3
 800f1ec:	d10f      	bne.n	800f20e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d009      	beq.n	800f20e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	68f8      	ldr	r0, [r7, #12]
 800f20c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f20e:	2180      	movs	r1, #128	@ 0x80
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	f7ff fcd7 	bl	800ebc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f216:	68f8      	ldr	r0, [r7, #12]
 800f218:	f001 f902 	bl	8010420 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d03a      	beq.n	800f29c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f7ff fe42 	bl	800eeb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2200      	movs	r2, #0
 800f230:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f234:	e032      	b.n	800f29c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f236:	7afb      	ldrb	r3, [r7, #11]
 800f238:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	4619      	mov	r1, r3
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f000 f8bf 	bl	800f3c4 <USBD_CoreFindEP>
 800f246:	4603      	mov	r3, r0
 800f248:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f24a:	7dfb      	ldrb	r3, [r7, #23]
 800f24c:	2bff      	cmp	r3, #255	@ 0xff
 800f24e:	d025      	beq.n	800f29c <USBD_LL_DataInStage+0x15a>
 800f250:	7dfb      	ldrb	r3, [r7, #23]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d122      	bne.n	800f29c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	2b03      	cmp	r3, #3
 800f260:	d11c      	bne.n	800f29c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f262:	7dfa      	ldrb	r2, [r7, #23]
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	32ae      	adds	r2, #174	@ 0xae
 800f268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f26c:	695b      	ldr	r3, [r3, #20]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d014      	beq.n	800f29c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f272:	7dfa      	ldrb	r2, [r7, #23]
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f27a:	7dfa      	ldrb	r2, [r7, #23]
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	32ae      	adds	r2, #174	@ 0xae
 800f280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f284:	695b      	ldr	r3, [r3, #20]
 800f286:	7afa      	ldrb	r2, [r7, #11]
 800f288:	4611      	mov	r1, r2
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	4798      	blx	r3
 800f28e:	4603      	mov	r3, r0
 800f290:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f292:	7dbb      	ldrb	r3, [r7, #22]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d001      	beq.n	800f29c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f298:	7dbb      	ldrb	r3, [r7, #22]
 800f29a:	e000      	b.n	800f29e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3718      	adds	r7, #24
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b084      	sub	sp, #16
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d014      	beq.n	800f30c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d00e      	beq.n	800f30c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	687a      	ldr	r2, [r7, #4]
 800f2f8:	6852      	ldr	r2, [r2, #4]
 800f2fa:	b2d2      	uxtb	r2, r2
 800f2fc:	4611      	mov	r1, r2
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	4798      	blx	r3
 800f302:	4603      	mov	r3, r0
 800f304:	2b00      	cmp	r3, #0
 800f306:	d001      	beq.n	800f30c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f308:	2303      	movs	r3, #3
 800f30a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f30c:	2340      	movs	r3, #64	@ 0x40
 800f30e:	2200      	movs	r2, #0
 800f310:	2100      	movs	r1, #0
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff fc1d 	bl	800eb52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	2201      	movs	r2, #1
 800f31c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2240      	movs	r2, #64	@ 0x40
 800f324:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f328:	2340      	movs	r3, #64	@ 0x40
 800f32a:	2200      	movs	r2, #0
 800f32c:	2180      	movs	r1, #128	@ 0x80
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f7ff fc0f 	bl	800eb52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2201      	movs	r2, #1
 800f338:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2240      	movs	r2, #64	@ 0x40
 800f33e:	621a      	str	r2, [r3, #32]

  return ret;
 800f340:	7bfb      	ldrb	r3, [r7, #15]
}
 800f342:	4618      	mov	r0, r3
 800f344:	3710      	adds	r7, #16
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}

0800f34a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f34a:	b480      	push	{r7}
 800f34c:	b083      	sub	sp, #12
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6078      	str	r0, [r7, #4]
 800f352:	460b      	mov	r3, r1
 800f354:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	78fa      	ldrb	r2, [r7, #3]
 800f35a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f35c:	2300      	movs	r3, #0
}
 800f35e:	4618      	mov	r0, r3
 800f360:	370c      	adds	r7, #12
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr

0800f36a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f36a:	b580      	push	{r7, lr}
 800f36c:	b082      	sub	sp, #8
 800f36e:	af00      	add	r7, sp, #0
 800f370:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	2b03      	cmp	r3, #3
 800f37c:	d110      	bne.n	800f3a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f384:	2b00      	cmp	r3, #0
 800f386:	d00b      	beq.n	800f3a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f38e:	69db      	ldr	r3, [r3, #28]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d005      	beq.n	800f3a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f39a:	69db      	ldr	r3, [r3, #28]
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f3a0:	2300      	movs	r3, #0
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3708      	adds	r7, #8
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f3aa:	b480      	push	{r7}
 800f3ac:	b083      	sub	sp, #12
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	460b      	mov	r3, r1
 800f3b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f3b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	370c      	adds	r7, #12
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c2:	4770      	bx	lr

0800f3c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f3d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	370c      	adds	r7, #12
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr

0800f3de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f3de:	b580      	push	{r7, lr}
 800f3e0:	b086      	sub	sp, #24
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
 800f3e6:	460b      	mov	r3, r1
 800f3e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	885b      	ldrh	r3, [r3, #2]
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	7812      	ldrb	r2, [r2, #0]
 800f400:	4293      	cmp	r3, r2
 800f402:	d91f      	bls.n	800f444 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f40a:	e013      	b.n	800f434 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f40c:	f107 030a 	add.w	r3, r7, #10
 800f410:	4619      	mov	r1, r3
 800f412:	6978      	ldr	r0, [r7, #20]
 800f414:	f000 f81b 	bl	800f44e <USBD_GetNextDesc>
 800f418:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	785b      	ldrb	r3, [r3, #1]
 800f41e:	2b05      	cmp	r3, #5
 800f420:	d108      	bne.n	800f434 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	789b      	ldrb	r3, [r3, #2]
 800f42a:	78fa      	ldrb	r2, [r7, #3]
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d008      	beq.n	800f442 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f430:	2300      	movs	r3, #0
 800f432:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	885b      	ldrh	r3, [r3, #2]
 800f438:	b29a      	uxth	r2, r3
 800f43a:	897b      	ldrh	r3, [r7, #10]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d8e5      	bhi.n	800f40c <USBD_GetEpDesc+0x2e>
 800f440:	e000      	b.n	800f444 <USBD_GetEpDesc+0x66>
          break;
 800f442:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f444:	693b      	ldr	r3, [r7, #16]
}
 800f446:	4618      	mov	r0, r3
 800f448:	3718      	adds	r7, #24
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f44e:	b480      	push	{r7}
 800f450:	b085      	sub	sp, #20
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
 800f456:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	881b      	ldrh	r3, [r3, #0]
 800f460:	68fa      	ldr	r2, [r7, #12]
 800f462:	7812      	ldrb	r2, [r2, #0]
 800f464:	4413      	add	r3, r2
 800f466:	b29a      	uxth	r2, r3
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	461a      	mov	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4413      	add	r3, r2
 800f476:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f478:	68fb      	ldr	r3, [r7, #12]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3714      	adds	r7, #20
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr

0800f486 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f486:	b480      	push	{r7}
 800f488:	b087      	sub	sp, #28
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	3301      	adds	r3, #1
 800f49c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f4a4:	8a3b      	ldrh	r3, [r7, #16]
 800f4a6:	021b      	lsls	r3, r3, #8
 800f4a8:	b21a      	sxth	r2, r3
 800f4aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	b21b      	sxth	r3, r3
 800f4b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f4b4:	89fb      	ldrh	r3, [r7, #14]
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	371c      	adds	r7, #28
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c0:	4770      	bx	lr
	...

0800f4c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f4da:	2b40      	cmp	r3, #64	@ 0x40
 800f4dc:	d005      	beq.n	800f4ea <USBD_StdDevReq+0x26>
 800f4de:	2b40      	cmp	r3, #64	@ 0x40
 800f4e0:	d857      	bhi.n	800f592 <USBD_StdDevReq+0xce>
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d00f      	beq.n	800f506 <USBD_StdDevReq+0x42>
 800f4e6:	2b20      	cmp	r3, #32
 800f4e8:	d153      	bne.n	800f592 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	32ae      	adds	r2, #174	@ 0xae
 800f4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4f8:	689b      	ldr	r3, [r3, #8]
 800f4fa:	6839      	ldr	r1, [r7, #0]
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	4798      	blx	r3
 800f500:	4603      	mov	r3, r0
 800f502:	73fb      	strb	r3, [r7, #15]
      break;
 800f504:	e04a      	b.n	800f59c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	785b      	ldrb	r3, [r3, #1]
 800f50a:	2b09      	cmp	r3, #9
 800f50c:	d83b      	bhi.n	800f586 <USBD_StdDevReq+0xc2>
 800f50e:	a201      	add	r2, pc, #4	@ (adr r2, 800f514 <USBD_StdDevReq+0x50>)
 800f510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f514:	0800f569 	.word	0x0800f569
 800f518:	0800f57d 	.word	0x0800f57d
 800f51c:	0800f587 	.word	0x0800f587
 800f520:	0800f573 	.word	0x0800f573
 800f524:	0800f587 	.word	0x0800f587
 800f528:	0800f547 	.word	0x0800f547
 800f52c:	0800f53d 	.word	0x0800f53d
 800f530:	0800f587 	.word	0x0800f587
 800f534:	0800f55f 	.word	0x0800f55f
 800f538:	0800f551 	.word	0x0800f551
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f53c:	6839      	ldr	r1, [r7, #0]
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f000 fa3c 	bl	800f9bc <USBD_GetDescriptor>
          break;
 800f544:	e024      	b.n	800f590 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f546:	6839      	ldr	r1, [r7, #0]
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f000 fba1 	bl	800fc90 <USBD_SetAddress>
          break;
 800f54e:	e01f      	b.n	800f590 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f550:	6839      	ldr	r1, [r7, #0]
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 fbe0 	bl	800fd18 <USBD_SetConfig>
 800f558:	4603      	mov	r3, r0
 800f55a:	73fb      	strb	r3, [r7, #15]
          break;
 800f55c:	e018      	b.n	800f590 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f55e:	6839      	ldr	r1, [r7, #0]
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 fc83 	bl	800fe6c <USBD_GetConfig>
          break;
 800f566:	e013      	b.n	800f590 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f568:	6839      	ldr	r1, [r7, #0]
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 fcb4 	bl	800fed8 <USBD_GetStatus>
          break;
 800f570:	e00e      	b.n	800f590 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f572:	6839      	ldr	r1, [r7, #0]
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 fce3 	bl	800ff40 <USBD_SetFeature>
          break;
 800f57a:	e009      	b.n	800f590 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f57c:	6839      	ldr	r1, [r7, #0]
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 fd07 	bl	800ff92 <USBD_ClrFeature>
          break;
 800f584:	e004      	b.n	800f590 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f586:	6839      	ldr	r1, [r7, #0]
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f000 fd5e 	bl	801004a <USBD_CtlError>
          break;
 800f58e:	bf00      	nop
      }
      break;
 800f590:	e004      	b.n	800f59c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f592:	6839      	ldr	r1, [r7, #0]
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f000 fd58 	bl	801004a <USBD_CtlError>
      break;
 800f59a:	bf00      	nop
  }

  return ret;
 800f59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3710      	adds	r7, #16
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop

0800f5a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b084      	sub	sp, #16
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f5be:	2b40      	cmp	r3, #64	@ 0x40
 800f5c0:	d005      	beq.n	800f5ce <USBD_StdItfReq+0x26>
 800f5c2:	2b40      	cmp	r3, #64	@ 0x40
 800f5c4:	d852      	bhi.n	800f66c <USBD_StdItfReq+0xc4>
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d001      	beq.n	800f5ce <USBD_StdItfReq+0x26>
 800f5ca:	2b20      	cmp	r3, #32
 800f5cc:	d14e      	bne.n	800f66c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	3b01      	subs	r3, #1
 800f5d8:	2b02      	cmp	r3, #2
 800f5da:	d840      	bhi.n	800f65e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	889b      	ldrh	r3, [r3, #4]
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d836      	bhi.n	800f654 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	889b      	ldrh	r3, [r3, #4]
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7ff fedb 	bl	800f3aa <USBD_CoreFindIF>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f5f8:	7bbb      	ldrb	r3, [r7, #14]
 800f5fa:	2bff      	cmp	r3, #255	@ 0xff
 800f5fc:	d01d      	beq.n	800f63a <USBD_StdItfReq+0x92>
 800f5fe:	7bbb      	ldrb	r3, [r7, #14]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d11a      	bne.n	800f63a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f604:	7bba      	ldrb	r2, [r7, #14]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	32ae      	adds	r2, #174	@ 0xae
 800f60a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f60e:	689b      	ldr	r3, [r3, #8]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00f      	beq.n	800f634 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f614:	7bba      	ldrb	r2, [r7, #14]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f61c:	7bba      	ldrb	r2, [r7, #14]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	32ae      	adds	r2, #174	@ 0xae
 800f622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f626:	689b      	ldr	r3, [r3, #8]
 800f628:	6839      	ldr	r1, [r7, #0]
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	4798      	blx	r3
 800f62e:	4603      	mov	r3, r0
 800f630:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f632:	e004      	b.n	800f63e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f634:	2303      	movs	r3, #3
 800f636:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f638:	e001      	b.n	800f63e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f63a:	2303      	movs	r3, #3
 800f63c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	88db      	ldrh	r3, [r3, #6]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d110      	bne.n	800f668 <USBD_StdItfReq+0xc0>
 800f646:	7bfb      	ldrb	r3, [r7, #15]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d10d      	bne.n	800f668 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 fed4 	bl	80103fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f652:	e009      	b.n	800f668 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f654:	6839      	ldr	r1, [r7, #0]
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f000 fcf7 	bl	801004a <USBD_CtlError>
          break;
 800f65c:	e004      	b.n	800f668 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f65e:	6839      	ldr	r1, [r7, #0]
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 fcf2 	bl	801004a <USBD_CtlError>
          break;
 800f666:	e000      	b.n	800f66a <USBD_StdItfReq+0xc2>
          break;
 800f668:	bf00      	nop
      }
      break;
 800f66a:	e004      	b.n	800f676 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f66c:	6839      	ldr	r1, [r7, #0]
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f000 fceb 	bl	801004a <USBD_CtlError>
      break;
 800f674:	bf00      	nop
  }

  return ret;
 800f676:	7bfb      	ldrb	r3, [r7, #15]
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3710      	adds	r7, #16
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f68a:	2300      	movs	r3, #0
 800f68c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	889b      	ldrh	r3, [r3, #4]
 800f692:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f69c:	2b40      	cmp	r3, #64	@ 0x40
 800f69e:	d007      	beq.n	800f6b0 <USBD_StdEPReq+0x30>
 800f6a0:	2b40      	cmp	r3, #64	@ 0x40
 800f6a2:	f200 817f 	bhi.w	800f9a4 <USBD_StdEPReq+0x324>
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d02a      	beq.n	800f700 <USBD_StdEPReq+0x80>
 800f6aa:	2b20      	cmp	r3, #32
 800f6ac:	f040 817a 	bne.w	800f9a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f6b0:	7bbb      	ldrb	r3, [r7, #14]
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f7ff fe85 	bl	800f3c4 <USBD_CoreFindEP>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f6be:	7b7b      	ldrb	r3, [r7, #13]
 800f6c0:	2bff      	cmp	r3, #255	@ 0xff
 800f6c2:	f000 8174 	beq.w	800f9ae <USBD_StdEPReq+0x32e>
 800f6c6:	7b7b      	ldrb	r3, [r7, #13]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	f040 8170 	bne.w	800f9ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f6ce:	7b7a      	ldrb	r2, [r7, #13]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f6d6:	7b7a      	ldrb	r2, [r7, #13]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	32ae      	adds	r2, #174	@ 0xae
 800f6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	f000 8163 	beq.w	800f9ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f6e8:	7b7a      	ldrb	r2, [r7, #13]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	32ae      	adds	r2, #174	@ 0xae
 800f6ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	6839      	ldr	r1, [r7, #0]
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	4798      	blx	r3
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f6fe:	e156      	b.n	800f9ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	785b      	ldrb	r3, [r3, #1]
 800f704:	2b03      	cmp	r3, #3
 800f706:	d008      	beq.n	800f71a <USBD_StdEPReq+0x9a>
 800f708:	2b03      	cmp	r3, #3
 800f70a:	f300 8145 	bgt.w	800f998 <USBD_StdEPReq+0x318>
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f000 809b 	beq.w	800f84a <USBD_StdEPReq+0x1ca>
 800f714:	2b01      	cmp	r3, #1
 800f716:	d03c      	beq.n	800f792 <USBD_StdEPReq+0x112>
 800f718:	e13e      	b.n	800f998 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f720:	b2db      	uxtb	r3, r3
 800f722:	2b02      	cmp	r3, #2
 800f724:	d002      	beq.n	800f72c <USBD_StdEPReq+0xac>
 800f726:	2b03      	cmp	r3, #3
 800f728:	d016      	beq.n	800f758 <USBD_StdEPReq+0xd8>
 800f72a:	e02c      	b.n	800f786 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f72c:	7bbb      	ldrb	r3, [r7, #14]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d00d      	beq.n	800f74e <USBD_StdEPReq+0xce>
 800f732:	7bbb      	ldrb	r3, [r7, #14]
 800f734:	2b80      	cmp	r3, #128	@ 0x80
 800f736:	d00a      	beq.n	800f74e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f738:	7bbb      	ldrb	r3, [r7, #14]
 800f73a:	4619      	mov	r1, r3
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f7ff fa41 	bl	800ebc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f742:	2180      	movs	r1, #128	@ 0x80
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f7ff fa3d 	bl	800ebc4 <USBD_LL_StallEP>
 800f74a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f74c:	e020      	b.n	800f790 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f74e:	6839      	ldr	r1, [r7, #0]
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 fc7a 	bl	801004a <USBD_CtlError>
              break;
 800f756:	e01b      	b.n	800f790 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	885b      	ldrh	r3, [r3, #2]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d10e      	bne.n	800f77e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f760:	7bbb      	ldrb	r3, [r7, #14]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d00b      	beq.n	800f77e <USBD_StdEPReq+0xfe>
 800f766:	7bbb      	ldrb	r3, [r7, #14]
 800f768:	2b80      	cmp	r3, #128	@ 0x80
 800f76a:	d008      	beq.n	800f77e <USBD_StdEPReq+0xfe>
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	88db      	ldrh	r3, [r3, #6]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d104      	bne.n	800f77e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f774:	7bbb      	ldrb	r3, [r7, #14]
 800f776:	4619      	mov	r1, r3
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f7ff fa23 	bl	800ebc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f000 fe3b 	bl	80103fa <USBD_CtlSendStatus>

              break;
 800f784:	e004      	b.n	800f790 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f786:	6839      	ldr	r1, [r7, #0]
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 fc5e 	bl	801004a <USBD_CtlError>
              break;
 800f78e:	bf00      	nop
          }
          break;
 800f790:	e107      	b.n	800f9a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	2b02      	cmp	r3, #2
 800f79c:	d002      	beq.n	800f7a4 <USBD_StdEPReq+0x124>
 800f79e:	2b03      	cmp	r3, #3
 800f7a0:	d016      	beq.n	800f7d0 <USBD_StdEPReq+0x150>
 800f7a2:	e04b      	b.n	800f83c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f7a4:	7bbb      	ldrb	r3, [r7, #14]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d00d      	beq.n	800f7c6 <USBD_StdEPReq+0x146>
 800f7aa:	7bbb      	ldrb	r3, [r7, #14]
 800f7ac:	2b80      	cmp	r3, #128	@ 0x80
 800f7ae:	d00a      	beq.n	800f7c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f7b0:	7bbb      	ldrb	r3, [r7, #14]
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f7ff fa05 	bl	800ebc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f7ba:	2180      	movs	r1, #128	@ 0x80
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f7ff fa01 	bl	800ebc4 <USBD_LL_StallEP>
 800f7c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f7c4:	e040      	b.n	800f848 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f7c6:	6839      	ldr	r1, [r7, #0]
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f000 fc3e 	bl	801004a <USBD_CtlError>
              break;
 800f7ce:	e03b      	b.n	800f848 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	885b      	ldrh	r3, [r3, #2]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d136      	bne.n	800f846 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f7d8:	7bbb      	ldrb	r3, [r7, #14]
 800f7da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d004      	beq.n	800f7ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f7e2:	7bbb      	ldrb	r3, [r7, #14]
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f7ff fa05 	bl	800ebf6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f000 fe04 	bl	80103fa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f7f2:	7bbb      	ldrb	r3, [r7, #14]
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f7ff fde4 	bl	800f3c4 <USBD_CoreFindEP>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f800:	7b7b      	ldrb	r3, [r7, #13]
 800f802:	2bff      	cmp	r3, #255	@ 0xff
 800f804:	d01f      	beq.n	800f846 <USBD_StdEPReq+0x1c6>
 800f806:	7b7b      	ldrb	r3, [r7, #13]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d11c      	bne.n	800f846 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f80c:	7b7a      	ldrb	r2, [r7, #13]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f814:	7b7a      	ldrb	r2, [r7, #13]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	32ae      	adds	r2, #174	@ 0xae
 800f81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d010      	beq.n	800f846 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f824:	7b7a      	ldrb	r2, [r7, #13]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	32ae      	adds	r2, #174	@ 0xae
 800f82a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f82e:	689b      	ldr	r3, [r3, #8]
 800f830:	6839      	ldr	r1, [r7, #0]
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	4798      	blx	r3
 800f836:	4603      	mov	r3, r0
 800f838:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f83a:	e004      	b.n	800f846 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f83c:	6839      	ldr	r1, [r7, #0]
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 fc03 	bl	801004a <USBD_CtlError>
              break;
 800f844:	e000      	b.n	800f848 <USBD_StdEPReq+0x1c8>
              break;
 800f846:	bf00      	nop
          }
          break;
 800f848:	e0ab      	b.n	800f9a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f850:	b2db      	uxtb	r3, r3
 800f852:	2b02      	cmp	r3, #2
 800f854:	d002      	beq.n	800f85c <USBD_StdEPReq+0x1dc>
 800f856:	2b03      	cmp	r3, #3
 800f858:	d032      	beq.n	800f8c0 <USBD_StdEPReq+0x240>
 800f85a:	e097      	b.n	800f98c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f85c:	7bbb      	ldrb	r3, [r7, #14]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d007      	beq.n	800f872 <USBD_StdEPReq+0x1f2>
 800f862:	7bbb      	ldrb	r3, [r7, #14]
 800f864:	2b80      	cmp	r3, #128	@ 0x80
 800f866:	d004      	beq.n	800f872 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f868:	6839      	ldr	r1, [r7, #0]
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f000 fbed 	bl	801004a <USBD_CtlError>
                break;
 800f870:	e091      	b.n	800f996 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f872:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f876:	2b00      	cmp	r3, #0
 800f878:	da0b      	bge.n	800f892 <USBD_StdEPReq+0x212>
 800f87a:	7bbb      	ldrb	r3, [r7, #14]
 800f87c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f880:	4613      	mov	r3, r2
 800f882:	009b      	lsls	r3, r3, #2
 800f884:	4413      	add	r3, r2
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	3310      	adds	r3, #16
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	4413      	add	r3, r2
 800f88e:	3304      	adds	r3, #4
 800f890:	e00b      	b.n	800f8aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f892:	7bbb      	ldrb	r3, [r7, #14]
 800f894:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f898:	4613      	mov	r3, r2
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	4413      	add	r3, r2
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	3304      	adds	r3, #4
 800f8aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	2202      	movs	r2, #2
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f000 fd44 	bl	8010346 <USBD_CtlSendData>
              break;
 800f8be:	e06a      	b.n	800f996 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f8c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	da11      	bge.n	800f8ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f8c8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ca:	f003 020f 	and.w	r2, r3, #15
 800f8ce:	6879      	ldr	r1, [r7, #4]
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	009b      	lsls	r3, r3, #2
 800f8d4:	4413      	add	r3, r2
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	440b      	add	r3, r1
 800f8da:	3324      	adds	r3, #36	@ 0x24
 800f8dc:	881b      	ldrh	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d117      	bne.n	800f912 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f8e2:	6839      	ldr	r1, [r7, #0]
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f000 fbb0 	bl	801004a <USBD_CtlError>
                  break;
 800f8ea:	e054      	b.n	800f996 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f8ec:	7bbb      	ldrb	r3, [r7, #14]
 800f8ee:	f003 020f 	and.w	r2, r3, #15
 800f8f2:	6879      	ldr	r1, [r7, #4]
 800f8f4:	4613      	mov	r3, r2
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	4413      	add	r3, r2
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	440b      	add	r3, r1
 800f8fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f902:	881b      	ldrh	r3, [r3, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d104      	bne.n	800f912 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f908:	6839      	ldr	r1, [r7, #0]
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f000 fb9d 	bl	801004a <USBD_CtlError>
                  break;
 800f910:	e041      	b.n	800f996 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f916:	2b00      	cmp	r3, #0
 800f918:	da0b      	bge.n	800f932 <USBD_StdEPReq+0x2b2>
 800f91a:	7bbb      	ldrb	r3, [r7, #14]
 800f91c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f920:	4613      	mov	r3, r2
 800f922:	009b      	lsls	r3, r3, #2
 800f924:	4413      	add	r3, r2
 800f926:	009b      	lsls	r3, r3, #2
 800f928:	3310      	adds	r3, #16
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	4413      	add	r3, r2
 800f92e:	3304      	adds	r3, #4
 800f930:	e00b      	b.n	800f94a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f932:	7bbb      	ldrb	r3, [r7, #14]
 800f934:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f938:	4613      	mov	r3, r2
 800f93a:	009b      	lsls	r3, r3, #2
 800f93c:	4413      	add	r3, r2
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	4413      	add	r3, r2
 800f948:	3304      	adds	r3, #4
 800f94a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f94c:	7bbb      	ldrb	r3, [r7, #14]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d002      	beq.n	800f958 <USBD_StdEPReq+0x2d8>
 800f952:	7bbb      	ldrb	r3, [r7, #14]
 800f954:	2b80      	cmp	r3, #128	@ 0x80
 800f956:	d103      	bne.n	800f960 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	2200      	movs	r2, #0
 800f95c:	601a      	str	r2, [r3, #0]
 800f95e:	e00e      	b.n	800f97e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f960:	7bbb      	ldrb	r3, [r7, #14]
 800f962:	4619      	mov	r1, r3
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f7ff f95f 	bl	800ec28 <USBD_LL_IsStallEP>
 800f96a:	4603      	mov	r3, r0
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d003      	beq.n	800f978 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	2201      	movs	r2, #1
 800f974:	601a      	str	r2, [r3, #0]
 800f976:	e002      	b.n	800f97e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	2200      	movs	r2, #0
 800f97c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	2202      	movs	r2, #2
 800f982:	4619      	mov	r1, r3
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f000 fcde 	bl	8010346 <USBD_CtlSendData>
              break;
 800f98a:	e004      	b.n	800f996 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f98c:	6839      	ldr	r1, [r7, #0]
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f000 fb5b 	bl	801004a <USBD_CtlError>
              break;
 800f994:	bf00      	nop
          }
          break;
 800f996:	e004      	b.n	800f9a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f998:	6839      	ldr	r1, [r7, #0]
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 fb55 	bl	801004a <USBD_CtlError>
          break;
 800f9a0:	bf00      	nop
      }
      break;
 800f9a2:	e005      	b.n	800f9b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f9a4:	6839      	ldr	r1, [r7, #0]
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 fb4f 	bl	801004a <USBD_CtlError>
      break;
 800f9ac:	e000      	b.n	800f9b0 <USBD_StdEPReq+0x330>
      break;
 800f9ae:	bf00      	nop
  }

  return ret;
 800f9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
	...

0800f9bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	885b      	ldrh	r3, [r3, #2]
 800f9d6:	0a1b      	lsrs	r3, r3, #8
 800f9d8:	b29b      	uxth	r3, r3
 800f9da:	3b01      	subs	r3, #1
 800f9dc:	2b06      	cmp	r3, #6
 800f9de:	f200 8128 	bhi.w	800fc32 <USBD_GetDescriptor+0x276>
 800f9e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f9e8 <USBD_GetDescriptor+0x2c>)
 800f9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e8:	0800fa05 	.word	0x0800fa05
 800f9ec:	0800fa1d 	.word	0x0800fa1d
 800f9f0:	0800fa5d 	.word	0x0800fa5d
 800f9f4:	0800fc33 	.word	0x0800fc33
 800f9f8:	0800fc33 	.word	0x0800fc33
 800f9fc:	0800fbd3 	.word	0x0800fbd3
 800fa00:	0800fbff 	.word	0x0800fbff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	7c12      	ldrb	r2, [r2, #16]
 800fa10:	f107 0108 	add.w	r1, r7, #8
 800fa14:	4610      	mov	r0, r2
 800fa16:	4798      	blx	r3
 800fa18:	60f8      	str	r0, [r7, #12]
      break;
 800fa1a:	e112      	b.n	800fc42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	7c1b      	ldrb	r3, [r3, #16]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10d      	bne.n	800fa40 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa2c:	f107 0208 	add.w	r2, r7, #8
 800fa30:	4610      	mov	r0, r2
 800fa32:	4798      	blx	r3
 800fa34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	3301      	adds	r3, #1
 800fa3a:	2202      	movs	r2, #2
 800fa3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fa3e:	e100      	b.n	800fc42 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa48:	f107 0208 	add.w	r2, r7, #8
 800fa4c:	4610      	mov	r0, r2
 800fa4e:	4798      	blx	r3
 800fa50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	3301      	adds	r3, #1
 800fa56:	2202      	movs	r2, #2
 800fa58:	701a      	strb	r2, [r3, #0]
      break;
 800fa5a:	e0f2      	b.n	800fc42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	885b      	ldrh	r3, [r3, #2]
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	2b05      	cmp	r3, #5
 800fa64:	f200 80ac 	bhi.w	800fbc0 <USBD_GetDescriptor+0x204>
 800fa68:	a201      	add	r2, pc, #4	@ (adr r2, 800fa70 <USBD_GetDescriptor+0xb4>)
 800fa6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa6e:	bf00      	nop
 800fa70:	0800fa89 	.word	0x0800fa89
 800fa74:	0800fabd 	.word	0x0800fabd
 800fa78:	0800faf1 	.word	0x0800faf1
 800fa7c:	0800fb25 	.word	0x0800fb25
 800fa80:	0800fb59 	.word	0x0800fb59
 800fa84:	0800fb8d 	.word	0x0800fb8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa8e:	685b      	ldr	r3, [r3, #4]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d00b      	beq.n	800faac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	687a      	ldr	r2, [r7, #4]
 800fa9e:	7c12      	ldrb	r2, [r2, #16]
 800faa0:	f107 0108 	add.w	r1, r7, #8
 800faa4:	4610      	mov	r0, r2
 800faa6:	4798      	blx	r3
 800faa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800faaa:	e091      	b.n	800fbd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800faac:	6839      	ldr	r1, [r7, #0]
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f000 facb 	bl	801004a <USBD_CtlError>
            err++;
 800fab4:	7afb      	ldrb	r3, [r7, #11]
 800fab6:	3301      	adds	r3, #1
 800fab8:	72fb      	strb	r3, [r7, #11]
          break;
 800faba:	e089      	b.n	800fbd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fac2:	689b      	ldr	r3, [r3, #8]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d00b      	beq.n	800fae0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	687a      	ldr	r2, [r7, #4]
 800fad2:	7c12      	ldrb	r2, [r2, #16]
 800fad4:	f107 0108 	add.w	r1, r7, #8
 800fad8:	4610      	mov	r0, r2
 800fada:	4798      	blx	r3
 800fadc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fade:	e077      	b.n	800fbd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fae0:	6839      	ldr	r1, [r7, #0]
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 fab1 	bl	801004a <USBD_CtlError>
            err++;
 800fae8:	7afb      	ldrb	r3, [r7, #11]
 800faea:	3301      	adds	r3, #1
 800faec:	72fb      	strb	r3, [r7, #11]
          break;
 800faee:	e06f      	b.n	800fbd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faf6:	68db      	ldr	r3, [r3, #12]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d00b      	beq.n	800fb14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	7c12      	ldrb	r2, [r2, #16]
 800fb08:	f107 0108 	add.w	r1, r7, #8
 800fb0c:	4610      	mov	r0, r2
 800fb0e:	4798      	blx	r3
 800fb10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb12:	e05d      	b.n	800fbd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb14:	6839      	ldr	r1, [r7, #0]
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 fa97 	bl	801004a <USBD_CtlError>
            err++;
 800fb1c:	7afb      	ldrb	r3, [r7, #11]
 800fb1e:	3301      	adds	r3, #1
 800fb20:	72fb      	strb	r3, [r7, #11]
          break;
 800fb22:	e055      	b.n	800fbd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb2a:	691b      	ldr	r3, [r3, #16]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d00b      	beq.n	800fb48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb36:	691b      	ldr	r3, [r3, #16]
 800fb38:	687a      	ldr	r2, [r7, #4]
 800fb3a:	7c12      	ldrb	r2, [r2, #16]
 800fb3c:	f107 0108 	add.w	r1, r7, #8
 800fb40:	4610      	mov	r0, r2
 800fb42:	4798      	blx	r3
 800fb44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb46:	e043      	b.n	800fbd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb48:	6839      	ldr	r1, [r7, #0]
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 fa7d 	bl	801004a <USBD_CtlError>
            err++;
 800fb50:	7afb      	ldrb	r3, [r7, #11]
 800fb52:	3301      	adds	r3, #1
 800fb54:	72fb      	strb	r3, [r7, #11]
          break;
 800fb56:	e03b      	b.n	800fbd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb5e:	695b      	ldr	r3, [r3, #20]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00b      	beq.n	800fb7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb6a:	695b      	ldr	r3, [r3, #20]
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	7c12      	ldrb	r2, [r2, #16]
 800fb70:	f107 0108 	add.w	r1, r7, #8
 800fb74:	4610      	mov	r0, r2
 800fb76:	4798      	blx	r3
 800fb78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb7a:	e029      	b.n	800fbd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb7c:	6839      	ldr	r1, [r7, #0]
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f000 fa63 	bl	801004a <USBD_CtlError>
            err++;
 800fb84:	7afb      	ldrb	r3, [r7, #11]
 800fb86:	3301      	adds	r3, #1
 800fb88:	72fb      	strb	r3, [r7, #11]
          break;
 800fb8a:	e021      	b.n	800fbd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb92:	699b      	ldr	r3, [r3, #24]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d00b      	beq.n	800fbb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb9e:	699b      	ldr	r3, [r3, #24]
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	7c12      	ldrb	r2, [r2, #16]
 800fba4:	f107 0108 	add.w	r1, r7, #8
 800fba8:	4610      	mov	r0, r2
 800fbaa:	4798      	blx	r3
 800fbac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbae:	e00f      	b.n	800fbd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fbb0:	6839      	ldr	r1, [r7, #0]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f000 fa49 	bl	801004a <USBD_CtlError>
            err++;
 800fbb8:	7afb      	ldrb	r3, [r7, #11]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	72fb      	strb	r3, [r7, #11]
          break;
 800fbbe:	e007      	b.n	800fbd0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fbc0:	6839      	ldr	r1, [r7, #0]
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 fa41 	bl	801004a <USBD_CtlError>
          err++;
 800fbc8:	7afb      	ldrb	r3, [r7, #11]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fbce:	bf00      	nop
      }
      break;
 800fbd0:	e037      	b.n	800fc42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	7c1b      	ldrb	r3, [r3, #16]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d109      	bne.n	800fbee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbe2:	f107 0208 	add.w	r2, r7, #8
 800fbe6:	4610      	mov	r0, r2
 800fbe8:	4798      	blx	r3
 800fbea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fbec:	e029      	b.n	800fc42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fbee:	6839      	ldr	r1, [r7, #0]
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f000 fa2a 	bl	801004a <USBD_CtlError>
        err++;
 800fbf6:	7afb      	ldrb	r3, [r7, #11]
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	72fb      	strb	r3, [r7, #11]
      break;
 800fbfc:	e021      	b.n	800fc42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	7c1b      	ldrb	r3, [r3, #16]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d10d      	bne.n	800fc22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fc0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc0e:	f107 0208 	add.w	r2, r7, #8
 800fc12:	4610      	mov	r0, r2
 800fc14:	4798      	blx	r3
 800fc16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	2207      	movs	r2, #7
 800fc1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc20:	e00f      	b.n	800fc42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fc22:	6839      	ldr	r1, [r7, #0]
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f000 fa10 	bl	801004a <USBD_CtlError>
        err++;
 800fc2a:	7afb      	ldrb	r3, [r7, #11]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	72fb      	strb	r3, [r7, #11]
      break;
 800fc30:	e007      	b.n	800fc42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fc32:	6839      	ldr	r1, [r7, #0]
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f000 fa08 	bl	801004a <USBD_CtlError>
      err++;
 800fc3a:	7afb      	ldrb	r3, [r7, #11]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	72fb      	strb	r3, [r7, #11]
      break;
 800fc40:	bf00      	nop
  }

  if (err != 0U)
 800fc42:	7afb      	ldrb	r3, [r7, #11]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d11e      	bne.n	800fc86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	88db      	ldrh	r3, [r3, #6]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d016      	beq.n	800fc7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fc50:	893b      	ldrh	r3, [r7, #8]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d00e      	beq.n	800fc74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	88da      	ldrh	r2, [r3, #6]
 800fc5a:	893b      	ldrh	r3, [r7, #8]
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	bf28      	it	cs
 800fc60:	4613      	movcs	r3, r2
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fc66:	893b      	ldrh	r3, [r7, #8]
 800fc68:	461a      	mov	r2, r3
 800fc6a:	68f9      	ldr	r1, [r7, #12]
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f000 fb6a 	bl	8010346 <USBD_CtlSendData>
 800fc72:	e009      	b.n	800fc88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fc74:	6839      	ldr	r1, [r7, #0]
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 f9e7 	bl	801004a <USBD_CtlError>
 800fc7c:	e004      	b.n	800fc88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f000 fbbb 	bl	80103fa <USBD_CtlSendStatus>
 800fc84:	e000      	b.n	800fc88 <USBD_GetDescriptor+0x2cc>
    return;
 800fc86:	bf00      	nop
  }
}
 800fc88:	3710      	adds	r7, #16
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop

0800fc90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	889b      	ldrh	r3, [r3, #4]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d131      	bne.n	800fd06 <USBD_SetAddress+0x76>
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	88db      	ldrh	r3, [r3, #6]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d12d      	bne.n	800fd06 <USBD_SetAddress+0x76>
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	885b      	ldrh	r3, [r3, #2]
 800fcae:	2b7f      	cmp	r3, #127	@ 0x7f
 800fcb0:	d829      	bhi.n	800fd06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	885b      	ldrh	r3, [r3, #2]
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fcbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	2b03      	cmp	r3, #3
 800fcc8:	d104      	bne.n	800fcd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fcca:	6839      	ldr	r1, [r7, #0]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 f9bc 	bl	801004a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcd2:	e01d      	b.n	800fd10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	7bfa      	ldrb	r2, [r7, #15]
 800fcd8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fcdc:	7bfb      	ldrb	r3, [r7, #15]
 800fcde:	4619      	mov	r1, r3
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7fe ffcd 	bl	800ec80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 fb87 	bl	80103fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fcec:	7bfb      	ldrb	r3, [r7, #15]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d004      	beq.n	800fcfc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2202      	movs	r2, #2
 800fcf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcfa:	e009      	b.n	800fd10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2201      	movs	r2, #1
 800fd00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd04:	e004      	b.n	800fd10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fd06:	6839      	ldr	r1, [r7, #0]
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f000 f99e 	bl	801004a <USBD_CtlError>
  }
}
 800fd0e:	bf00      	nop
 800fd10:	bf00      	nop
 800fd12:	3710      	adds	r7, #16
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd22:	2300      	movs	r3, #0
 800fd24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	885b      	ldrh	r3, [r3, #2]
 800fd2a:	b2da      	uxtb	r2, r3
 800fd2c:	4b4e      	ldr	r3, [pc, #312]	@ (800fe68 <USBD_SetConfig+0x150>)
 800fd2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fd30:	4b4d      	ldr	r3, [pc, #308]	@ (800fe68 <USBD_SetConfig+0x150>)
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d905      	bls.n	800fd44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fd38:	6839      	ldr	r1, [r7, #0]
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f000 f985 	bl	801004a <USBD_CtlError>
    return USBD_FAIL;
 800fd40:	2303      	movs	r3, #3
 800fd42:	e08c      	b.n	800fe5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	d002      	beq.n	800fd56 <USBD_SetConfig+0x3e>
 800fd50:	2b03      	cmp	r3, #3
 800fd52:	d029      	beq.n	800fda8 <USBD_SetConfig+0x90>
 800fd54:	e075      	b.n	800fe42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fd56:	4b44      	ldr	r3, [pc, #272]	@ (800fe68 <USBD_SetConfig+0x150>)
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d020      	beq.n	800fda0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fd5e:	4b42      	ldr	r3, [pc, #264]	@ (800fe68 <USBD_SetConfig+0x150>)
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	461a      	mov	r2, r3
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fd68:	4b3f      	ldr	r3, [pc, #252]	@ (800fe68 <USBD_SetConfig+0x150>)
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f7ff f8a9 	bl	800eec6 <USBD_SetClassConfig>
 800fd74:	4603      	mov	r3, r0
 800fd76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fd78:	7bfb      	ldrb	r3, [r7, #15]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d008      	beq.n	800fd90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fd7e:	6839      	ldr	r1, [r7, #0]
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f000 f962 	bl	801004a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2202      	movs	r2, #2
 800fd8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fd8e:	e065      	b.n	800fe5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f000 fb32 	bl	80103fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2203      	movs	r2, #3
 800fd9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fd9e:	e05d      	b.n	800fe5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 fb2a 	bl	80103fa <USBD_CtlSendStatus>
      break;
 800fda6:	e059      	b.n	800fe5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fda8:	4b2f      	ldr	r3, [pc, #188]	@ (800fe68 <USBD_SetConfig+0x150>)
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d112      	bne.n	800fdd6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2202      	movs	r2, #2
 800fdb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fdb8:	4b2b      	ldr	r3, [pc, #172]	@ (800fe68 <USBD_SetConfig+0x150>)
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	461a      	mov	r2, r3
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fdc2:	4b29      	ldr	r3, [pc, #164]	@ (800fe68 <USBD_SetConfig+0x150>)
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f7ff f898 	bl	800eefe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f000 fb13 	bl	80103fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fdd4:	e042      	b.n	800fe5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fdd6:	4b24      	ldr	r3, [pc, #144]	@ (800fe68 <USBD_SetConfig+0x150>)
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	461a      	mov	r2, r3
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d02a      	beq.n	800fe3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	685b      	ldr	r3, [r3, #4]
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	4619      	mov	r1, r3
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f7ff f886 	bl	800eefe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fdf2:	4b1d      	ldr	r3, [pc, #116]	@ (800fe68 <USBD_SetConfig+0x150>)
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fdfc:	4b1a      	ldr	r3, [pc, #104]	@ (800fe68 <USBD_SetConfig+0x150>)
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	4619      	mov	r1, r3
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f7ff f85f 	bl	800eec6 <USBD_SetClassConfig>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fe0c:	7bfb      	ldrb	r3, [r7, #15]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d00f      	beq.n	800fe32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fe12:	6839      	ldr	r1, [r7, #0]
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f000 f918 	bl	801004a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	b2db      	uxtb	r3, r3
 800fe20:	4619      	mov	r1, r3
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f7ff f86b 	bl	800eefe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2202      	movs	r2, #2
 800fe2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fe30:	e014      	b.n	800fe5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 fae1 	bl	80103fa <USBD_CtlSendStatus>
      break;
 800fe38:	e010      	b.n	800fe5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f000 fadd 	bl	80103fa <USBD_CtlSendStatus>
      break;
 800fe40:	e00c      	b.n	800fe5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fe42:	6839      	ldr	r1, [r7, #0]
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 f900 	bl	801004a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe4a:	4b07      	ldr	r3, [pc, #28]	@ (800fe68 <USBD_SetConfig+0x150>)
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	4619      	mov	r1, r3
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7ff f854 	bl	800eefe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fe56:	2303      	movs	r3, #3
 800fe58:	73fb      	strb	r3, [r7, #15]
      break;
 800fe5a:	bf00      	nop
  }

  return ret;
 800fe5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	20011164 	.word	0x20011164

0800fe6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	88db      	ldrh	r3, [r3, #6]
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d004      	beq.n	800fe88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fe7e:	6839      	ldr	r1, [r7, #0]
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 f8e2 	bl	801004a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fe86:	e023      	b.n	800fed0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	2b02      	cmp	r3, #2
 800fe92:	dc02      	bgt.n	800fe9a <USBD_GetConfig+0x2e>
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	dc03      	bgt.n	800fea0 <USBD_GetConfig+0x34>
 800fe98:	e015      	b.n	800fec6 <USBD_GetConfig+0x5a>
 800fe9a:	2b03      	cmp	r3, #3
 800fe9c:	d00b      	beq.n	800feb6 <USBD_GetConfig+0x4a>
 800fe9e:	e012      	b.n	800fec6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2200      	movs	r2, #0
 800fea4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	3308      	adds	r3, #8
 800feaa:	2201      	movs	r2, #1
 800feac:	4619      	mov	r1, r3
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 fa49 	bl	8010346 <USBD_CtlSendData>
        break;
 800feb4:	e00c      	b.n	800fed0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	3304      	adds	r3, #4
 800feba:	2201      	movs	r2, #1
 800febc:	4619      	mov	r1, r3
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f000 fa41 	bl	8010346 <USBD_CtlSendData>
        break;
 800fec4:	e004      	b.n	800fed0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fec6:	6839      	ldr	r1, [r7, #0]
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 f8be 	bl	801004a <USBD_CtlError>
        break;
 800fece:	bf00      	nop
}
 800fed0:	bf00      	nop
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fee8:	b2db      	uxtb	r3, r3
 800feea:	3b01      	subs	r3, #1
 800feec:	2b02      	cmp	r3, #2
 800feee:	d81e      	bhi.n	800ff2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	88db      	ldrh	r3, [r3, #6]
 800fef4:	2b02      	cmp	r3, #2
 800fef6:	d004      	beq.n	800ff02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fef8:	6839      	ldr	r1, [r7, #0]
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f000 f8a5 	bl	801004a <USBD_CtlError>
        break;
 800ff00:	e01a      	b.n	800ff38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2201      	movs	r2, #1
 800ff06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d005      	beq.n	800ff1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	f043 0202 	orr.w	r2, r3, #2
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	330c      	adds	r3, #12
 800ff22:	2202      	movs	r2, #2
 800ff24:	4619      	mov	r1, r3
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 fa0d 	bl	8010346 <USBD_CtlSendData>
      break;
 800ff2c:	e004      	b.n	800ff38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ff2e:	6839      	ldr	r1, [r7, #0]
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 f88a 	bl	801004a <USBD_CtlError>
      break;
 800ff36:	bf00      	nop
  }
}
 800ff38:	bf00      	nop
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	885b      	ldrh	r3, [r3, #2]
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d107      	bne.n	800ff62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2201      	movs	r2, #1
 800ff56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fa4d 	bl	80103fa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ff60:	e013      	b.n	800ff8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	885b      	ldrh	r3, [r3, #2]
 800ff66:	2b02      	cmp	r3, #2
 800ff68:	d10b      	bne.n	800ff82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	889b      	ldrh	r3, [r3, #4]
 800ff6e:	0a1b      	lsrs	r3, r3, #8
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	b2da      	uxtb	r2, r3
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 fa3d 	bl	80103fa <USBD_CtlSendStatus>
}
 800ff80:	e003      	b.n	800ff8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ff82:	6839      	ldr	r1, [r7, #0]
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f000 f860 	bl	801004a <USBD_CtlError>
}
 800ff8a:	bf00      	nop
 800ff8c:	3708      	adds	r7, #8
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}

0800ff92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff92:	b580      	push	{r7, lr}
 800ff94:	b082      	sub	sp, #8
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	6078      	str	r0, [r7, #4]
 800ff9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	3b01      	subs	r3, #1
 800ffa6:	2b02      	cmp	r3, #2
 800ffa8:	d80b      	bhi.n	800ffc2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	885b      	ldrh	r3, [r3, #2]
 800ffae:	2b01      	cmp	r3, #1
 800ffb0:	d10c      	bne.n	800ffcc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 fa1d 	bl	80103fa <USBD_CtlSendStatus>
      }
      break;
 800ffc0:	e004      	b.n	800ffcc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ffc2:	6839      	ldr	r1, [r7, #0]
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 f840 	bl	801004a <USBD_CtlError>
      break;
 800ffca:	e000      	b.n	800ffce <USBD_ClrFeature+0x3c>
      break;
 800ffcc:	bf00      	nop
  }
}
 800ffce:	bf00      	nop
 800ffd0:	3708      	adds	r7, #8
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}

0800ffd6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ffd6:	b580      	push	{r7, lr}
 800ffd8:	b084      	sub	sp, #16
 800ffda:	af00      	add	r7, sp, #0
 800ffdc:	6078      	str	r0, [r7, #4]
 800ffde:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	781a      	ldrb	r2, [r3, #0]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	3301      	adds	r3, #1
 800fff0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	781a      	ldrb	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	3301      	adds	r3, #1
 800fffe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010000:	68f8      	ldr	r0, [r7, #12]
 8010002:	f7ff fa40 	bl	800f486 <SWAPBYTE>
 8010006:	4603      	mov	r3, r0
 8010008:	461a      	mov	r2, r3
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	3301      	adds	r3, #1
 8010012:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	3301      	adds	r3, #1
 8010018:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801001a:	68f8      	ldr	r0, [r7, #12]
 801001c:	f7ff fa33 	bl	800f486 <SWAPBYTE>
 8010020:	4603      	mov	r3, r0
 8010022:	461a      	mov	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	3301      	adds	r3, #1
 801002c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	3301      	adds	r3, #1
 8010032:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010034:	68f8      	ldr	r0, [r7, #12]
 8010036:	f7ff fa26 	bl	800f486 <SWAPBYTE>
 801003a:	4603      	mov	r3, r0
 801003c:	461a      	mov	r2, r3
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	80da      	strh	r2, [r3, #6]
}
 8010042:	bf00      	nop
 8010044:	3710      	adds	r7, #16
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}

0801004a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801004a:	b580      	push	{r7, lr}
 801004c:	b082      	sub	sp, #8
 801004e:	af00      	add	r7, sp, #0
 8010050:	6078      	str	r0, [r7, #4]
 8010052:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010054:	2180      	movs	r1, #128	@ 0x80
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f7fe fdb4 	bl	800ebc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801005c:	2100      	movs	r1, #0
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f7fe fdb0 	bl	800ebc4 <USBD_LL_StallEP>
}
 8010064:	bf00      	nop
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b086      	sub	sp, #24
 8010070:	af00      	add	r7, sp, #0
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	60b9      	str	r1, [r7, #8]
 8010076:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010078:	2300      	movs	r3, #0
 801007a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d036      	beq.n	80100f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010086:	6938      	ldr	r0, [r7, #16]
 8010088:	f000 f836 	bl	80100f8 <USBD_GetLen>
 801008c:	4603      	mov	r3, r0
 801008e:	3301      	adds	r3, #1
 8010090:	b29b      	uxth	r3, r3
 8010092:	005b      	lsls	r3, r3, #1
 8010094:	b29a      	uxth	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801009a:	7dfb      	ldrb	r3, [r7, #23]
 801009c:	68ba      	ldr	r2, [r7, #8]
 801009e:	4413      	add	r3, r2
 80100a0:	687a      	ldr	r2, [r7, #4]
 80100a2:	7812      	ldrb	r2, [r2, #0]
 80100a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80100a6:	7dfb      	ldrb	r3, [r7, #23]
 80100a8:	3301      	adds	r3, #1
 80100aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80100ac:	7dfb      	ldrb	r3, [r7, #23]
 80100ae:	68ba      	ldr	r2, [r7, #8]
 80100b0:	4413      	add	r3, r2
 80100b2:	2203      	movs	r2, #3
 80100b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80100b6:	7dfb      	ldrb	r3, [r7, #23]
 80100b8:	3301      	adds	r3, #1
 80100ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80100bc:	e013      	b.n	80100e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80100be:	7dfb      	ldrb	r3, [r7, #23]
 80100c0:	68ba      	ldr	r2, [r7, #8]
 80100c2:	4413      	add	r3, r2
 80100c4:	693a      	ldr	r2, [r7, #16]
 80100c6:	7812      	ldrb	r2, [r2, #0]
 80100c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	3301      	adds	r3, #1
 80100ce:	613b      	str	r3, [r7, #16]
    idx++;
 80100d0:	7dfb      	ldrb	r3, [r7, #23]
 80100d2:	3301      	adds	r3, #1
 80100d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80100d6:	7dfb      	ldrb	r3, [r7, #23]
 80100d8:	68ba      	ldr	r2, [r7, #8]
 80100da:	4413      	add	r3, r2
 80100dc:	2200      	movs	r2, #0
 80100de:	701a      	strb	r2, [r3, #0]
    idx++;
 80100e0:	7dfb      	ldrb	r3, [r7, #23]
 80100e2:	3301      	adds	r3, #1
 80100e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d1e7      	bne.n	80100be <USBD_GetString+0x52>
 80100ee:	e000      	b.n	80100f2 <USBD_GetString+0x86>
    return;
 80100f0:	bf00      	nop
  }
}
 80100f2:	3718      	adds	r7, #24
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b085      	sub	sp, #20
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010100:	2300      	movs	r3, #0
 8010102:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010108:	e005      	b.n	8010116 <USBD_GetLen+0x1e>
  {
    len++;
 801010a:	7bfb      	ldrb	r3, [r7, #15]
 801010c:	3301      	adds	r3, #1
 801010e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	3301      	adds	r3, #1
 8010114:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d1f5      	bne.n	801010a <USBD_GetLen+0x12>
  }

  return len;
 801011e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010120:	4618      	mov	r0, r3
 8010122:	3714      	adds	r7, #20
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr

0801012c <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	4603      	mov	r3, r0
 8010134:	6039      	str	r1, [r7, #0]
 8010136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	2212      	movs	r2, #18
 801013c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 801013e:	4b03      	ldr	r3, [pc, #12]	@ (801014c <USBD_Class_DeviceDescriptor+0x20>)
}
 8010140:	4618      	mov	r0, r3
 8010142:	370c      	adds	r7, #12
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr
 801014c:	200000f0 	.word	0x200000f0

08010150 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010150:	b480      	push	{r7}
 8010152:	b083      	sub	sp, #12
 8010154:	af00      	add	r7, sp, #0
 8010156:	4603      	mov	r3, r0
 8010158:	6039      	str	r1, [r7, #0]
 801015a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	2204      	movs	r2, #4
 8010160:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 8010162:	4b03      	ldr	r3, [pc, #12]	@ (8010170 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8010164:	4618      	mov	r0, r3
 8010166:	370c      	adds	r7, #12
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr
 8010170:	20000104 	.word	0x20000104

08010174 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	4603      	mov	r3, r0
 801017c:	6039      	str	r1, [r7, #0]
 801017e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8010180:	79fb      	ldrb	r3, [r7, #7]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d105      	bne.n	8010192 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8010186:	683a      	ldr	r2, [r7, #0]
 8010188:	4907      	ldr	r1, [pc, #28]	@ (80101a8 <USBD_Class_ProductStrDescriptor+0x34>)
 801018a:	4808      	ldr	r0, [pc, #32]	@ (80101ac <USBD_Class_ProductStrDescriptor+0x38>)
 801018c:	f7ff ff6e 	bl	801006c <USBD_GetString>
 8010190:	e004      	b.n	801019c <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8010192:	683a      	ldr	r2, [r7, #0]
 8010194:	4904      	ldr	r1, [pc, #16]	@ (80101a8 <USBD_Class_ProductStrDescriptor+0x34>)
 8010196:	4805      	ldr	r0, [pc, #20]	@ (80101ac <USBD_Class_ProductStrDescriptor+0x38>)
 8010198:	f7ff ff68 	bl	801006c <USBD_GetString>
  }
  return USBD_StrDesc;
 801019c:	4b02      	ldr	r3, [pc, #8]	@ (80101a8 <USBD_Class_ProductStrDescriptor+0x34>)
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3708      	adds	r7, #8
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	20011168 	.word	0x20011168
 80101ac:	08011ab4 	.word	0x08011ab4

080101b0 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	4603      	mov	r3, r0
 80101b8:	6039      	str	r1, [r7, #0]
 80101ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80101bc:	683a      	ldr	r2, [r7, #0]
 80101be:	4904      	ldr	r1, [pc, #16]	@ (80101d0 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 80101c0:	4804      	ldr	r0, [pc, #16]	@ (80101d4 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 80101c2:	f7ff ff53 	bl	801006c <USBD_GetString>
  return USBD_StrDesc;
 80101c6:	4b02      	ldr	r3, [pc, #8]	@ (80101d0 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3708      	adds	r7, #8
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}
 80101d0:	20011168 	.word	0x20011168
 80101d4:	08011acc 	.word	0x08011acc

080101d8 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	4603      	mov	r3, r0
 80101e0:	6039      	str	r1, [r7, #0]
 80101e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	221a      	movs	r2, #26
 80101e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 80101ea:	f000 f843 	bl	8010274 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 80101ee:	4b02      	ldr	r3, [pc, #8]	@ (80101f8 <USBD_Class_SerialStrDescriptor+0x20>)
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	20000108 	.word	0x20000108

080101fc <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	4603      	mov	r3, r0
 8010204:	6039      	str	r1, [r7, #0]
 8010206:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8010208:	79fb      	ldrb	r3, [r7, #7]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d105      	bne.n	801021a <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 801020e:	683a      	ldr	r2, [r7, #0]
 8010210:	4907      	ldr	r1, [pc, #28]	@ (8010230 <USBD_Class_ConfigStrDescriptor+0x34>)
 8010212:	4808      	ldr	r0, [pc, #32]	@ (8010234 <USBD_Class_ConfigStrDescriptor+0x38>)
 8010214:	f7ff ff2a 	bl	801006c <USBD_GetString>
 8010218:	e004      	b.n	8010224 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 801021a:	683a      	ldr	r2, [r7, #0]
 801021c:	4904      	ldr	r1, [pc, #16]	@ (8010230 <USBD_Class_ConfigStrDescriptor+0x34>)
 801021e:	4805      	ldr	r0, [pc, #20]	@ (8010234 <USBD_Class_ConfigStrDescriptor+0x38>)
 8010220:	f7ff ff24 	bl	801006c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010224:	4b02      	ldr	r3, [pc, #8]	@ (8010230 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 8010226:	4618      	mov	r0, r3
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	20011168 	.word	0x20011168
 8010234:	08011ae0 	.word	0x08011ae0

08010238 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	4603      	mov	r3, r0
 8010240:	6039      	str	r1, [r7, #0]
 8010242:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8010244:	79fb      	ldrb	r3, [r7, #7]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d105      	bne.n	8010256 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 801024a:	683a      	ldr	r2, [r7, #0]
 801024c:	4907      	ldr	r1, [pc, #28]	@ (801026c <USBD_Class_InterfaceStrDescriptor+0x34>)
 801024e:	4808      	ldr	r0, [pc, #32]	@ (8010270 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8010250:	f7ff ff0c 	bl	801006c <USBD_GetString>
 8010254:	e004      	b.n	8010260 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8010256:	683a      	ldr	r2, [r7, #0]
 8010258:	4904      	ldr	r1, [pc, #16]	@ (801026c <USBD_Class_InterfaceStrDescriptor+0x34>)
 801025a:	4805      	ldr	r0, [pc, #20]	@ (8010270 <USBD_Class_InterfaceStrDescriptor+0x38>)
 801025c:	f7ff ff06 	bl	801006c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010260:	4b02      	ldr	r3, [pc, #8]	@ (801026c <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 8010262:	4618      	mov	r0, r3
 8010264:	3708      	adds	r7, #8
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	20011168 	.word	0x20011168
 8010270:	08011aec 	.word	0x08011aec

08010274 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b084      	sub	sp, #16
 8010278:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 801027a:	4b0f      	ldr	r3, [pc, #60]	@ (80102b8 <Get_SerialNum+0x44>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 8010280:	4b0e      	ldr	r3, [pc, #56]	@ (80102bc <Get_SerialNum+0x48>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8010286:	4b0e      	ldr	r3, [pc, #56]	@ (80102c0 <Get_SerialNum+0x4c>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4413      	add	r3, r2
 8010292:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d009      	beq.n	80102ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 801029a:	2208      	movs	r2, #8
 801029c:	4909      	ldr	r1, [pc, #36]	@ (80102c4 <Get_SerialNum+0x50>)
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f000 f814 	bl	80102cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 80102a4:	2204      	movs	r2, #4
 80102a6:	4908      	ldr	r1, [pc, #32]	@ (80102c8 <Get_SerialNum+0x54>)
 80102a8:	68b8      	ldr	r0, [r7, #8]
 80102aa:	f000 f80f 	bl	80102cc <IntToUnicode>
  }
}
 80102ae:	bf00      	nop
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	08fff800 	.word	0x08fff800
 80102bc:	08fff804 	.word	0x08fff804
 80102c0:	08fff808 	.word	0x08fff808
 80102c4:	2000010a 	.word	0x2000010a
 80102c8:	2000011a 	.word	0x2000011a

080102cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b087      	sub	sp, #28
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	60f8      	str	r0, [r7, #12]
 80102d4:	60b9      	str	r1, [r7, #8]
 80102d6:	4613      	mov	r3, r2
 80102d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 80102da:	2300      	movs	r3, #0
 80102dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 80102de:	2300      	movs	r3, #0
 80102e0:	75fb      	strb	r3, [r7, #23]
 80102e2:	e025      	b.n	8010330 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	0f1b      	lsrs	r3, r3, #28
 80102e8:	2b09      	cmp	r3, #9
 80102ea:	d80a      	bhi.n	8010302 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	0f1b      	lsrs	r3, r3, #28
 80102f0:	b2da      	uxtb	r2, r3
 80102f2:	7dfb      	ldrb	r3, [r7, #23]
 80102f4:	005b      	lsls	r3, r3, #1
 80102f6:	68b9      	ldr	r1, [r7, #8]
 80102f8:	440b      	add	r3, r1
 80102fa:	3230      	adds	r2, #48	@ 0x30
 80102fc:	b2d2      	uxtb	r2, r2
 80102fe:	701a      	strb	r2, [r3, #0]
 8010300:	e009      	b.n	8010316 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	0f1b      	lsrs	r3, r3, #28
 8010306:	b2da      	uxtb	r2, r3
 8010308:	7dfb      	ldrb	r3, [r7, #23]
 801030a:	005b      	lsls	r3, r3, #1
 801030c:	68b9      	ldr	r1, [r7, #8]
 801030e:	440b      	add	r3, r1
 8010310:	3237      	adds	r2, #55	@ 0x37
 8010312:	b2d2      	uxtb	r2, r2
 8010314:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	011b      	lsls	r3, r3, #4
 801031a:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 801031c:	7dfb      	ldrb	r3, [r7, #23]
 801031e:	005b      	lsls	r3, r3, #1
 8010320:	3301      	adds	r3, #1
 8010322:	68ba      	ldr	r2, [r7, #8]
 8010324:	4413      	add	r3, r2
 8010326:	2200      	movs	r2, #0
 8010328:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 801032a:	7dfb      	ldrb	r3, [r7, #23]
 801032c:	3301      	adds	r3, #1
 801032e:	75fb      	strb	r3, [r7, #23]
 8010330:	7dfa      	ldrb	r2, [r7, #23]
 8010332:	79fb      	ldrb	r3, [r7, #7]
 8010334:	429a      	cmp	r2, r3
 8010336:	d3d5      	bcc.n	80102e4 <IntToUnicode+0x18>
  }
}
 8010338:	bf00      	nop
 801033a:	bf00      	nop
 801033c:	371c      	adds	r7, #28
 801033e:	46bd      	mov	sp, r7
 8010340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010344:	4770      	bx	lr

08010346 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010346:	b580      	push	{r7, lr}
 8010348:	b084      	sub	sp, #16
 801034a:	af00      	add	r7, sp, #0
 801034c:	60f8      	str	r0, [r7, #12]
 801034e:	60b9      	str	r1, [r7, #8]
 8010350:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	2202      	movs	r2, #2
 8010356:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	687a      	ldr	r2, [r7, #4]
 801035e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	68ba      	ldr	r2, [r7, #8]
 801036a:	2100      	movs	r1, #0
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f7fe fca0 	bl	800ecb2 <USBD_LL_Transmit>

  return USBD_OK;
 8010372:	2300      	movs	r3, #0
}
 8010374:	4618      	mov	r0, r3
 8010376:	3710      	adds	r7, #16
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	68ba      	ldr	r2, [r7, #8]
 801038c:	2100      	movs	r1, #0
 801038e:	68f8      	ldr	r0, [r7, #12]
 8010390:	f7fe fc8f 	bl	800ecb2 <USBD_LL_Transmit>

  return USBD_OK;
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3710      	adds	r7, #16
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801039e:	b580      	push	{r7, lr}
 80103a0:	b084      	sub	sp, #16
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	60f8      	str	r0, [r7, #12]
 80103a6:	60b9      	str	r1, [r7, #8]
 80103a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2203      	movs	r2, #3
 80103ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	687a      	ldr	r2, [r7, #4]
 80103b6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	68ba      	ldr	r2, [r7, #8]
 80103c6:	2100      	movs	r1, #0
 80103c8:	68f8      	ldr	r0, [r7, #12]
 80103ca:	f7fe fc8d 	bl	800ece8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103ce:	2300      	movs	r3, #0
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3710      	adds	r7, #16
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b084      	sub	sp, #16
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60f8      	str	r0, [r7, #12]
 80103e0:	60b9      	str	r1, [r7, #8]
 80103e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	68ba      	ldr	r2, [r7, #8]
 80103e8:	2100      	movs	r1, #0
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	f7fe fc7c 	bl	800ece8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103f0:	2300      	movs	r3, #0
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3710      	adds	r7, #16
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b082      	sub	sp, #8
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2204      	movs	r2, #4
 8010406:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801040a:	2300      	movs	r3, #0
 801040c:	2200      	movs	r2, #0
 801040e:	2100      	movs	r1, #0
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f7fe fc4e 	bl	800ecb2 <USBD_LL_Transmit>

  return USBD_OK;
 8010416:	2300      	movs	r3, #0
}
 8010418:	4618      	mov	r0, r3
 801041a:	3708      	adds	r7, #8
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b082      	sub	sp, #8
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2205      	movs	r2, #5
 801042c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010430:	2300      	movs	r3, #0
 8010432:	2200      	movs	r2, #0
 8010434:	2100      	movs	r1, #0
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f7fe fc56 	bl	800ece8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801043c:	2300      	movs	r3, #0
}
 801043e:	4618      	mov	r0, r3
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
	...

08010448 <std>:
 8010448:	2300      	movs	r3, #0
 801044a:	b510      	push	{r4, lr}
 801044c:	4604      	mov	r4, r0
 801044e:	6083      	str	r3, [r0, #8]
 8010450:	8181      	strh	r1, [r0, #12]
 8010452:	4619      	mov	r1, r3
 8010454:	6643      	str	r3, [r0, #100]	@ 0x64
 8010456:	81c2      	strh	r2, [r0, #14]
 8010458:	2208      	movs	r2, #8
 801045a:	6183      	str	r3, [r0, #24]
 801045c:	e9c0 3300 	strd	r3, r3, [r0]
 8010460:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010464:	305c      	adds	r0, #92	@ 0x5c
 8010466:	f000 f95f 	bl	8010728 <memset>
 801046a:	4b0d      	ldr	r3, [pc, #52]	@ (80104a0 <std+0x58>)
 801046c:	6224      	str	r4, [r4, #32]
 801046e:	6263      	str	r3, [r4, #36]	@ 0x24
 8010470:	4b0c      	ldr	r3, [pc, #48]	@ (80104a4 <std+0x5c>)
 8010472:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010474:	4b0c      	ldr	r3, [pc, #48]	@ (80104a8 <std+0x60>)
 8010476:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010478:	4b0c      	ldr	r3, [pc, #48]	@ (80104ac <std+0x64>)
 801047a:	6323      	str	r3, [r4, #48]	@ 0x30
 801047c:	4b0c      	ldr	r3, [pc, #48]	@ (80104b0 <std+0x68>)
 801047e:	429c      	cmp	r4, r3
 8010480:	d006      	beq.n	8010490 <std+0x48>
 8010482:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010486:	4294      	cmp	r4, r2
 8010488:	d002      	beq.n	8010490 <std+0x48>
 801048a:	33d0      	adds	r3, #208	@ 0xd0
 801048c:	429c      	cmp	r4, r3
 801048e:	d105      	bne.n	801049c <std+0x54>
 8010490:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010498:	f000 b9be 	b.w	8010818 <__retarget_lock_init_recursive>
 801049c:	bd10      	pop	{r4, pc}
 801049e:	bf00      	nop
 80104a0:	08010631 	.word	0x08010631
 80104a4:	08010653 	.word	0x08010653
 80104a8:	0801068b 	.word	0x0801068b
 80104ac:	080106af 	.word	0x080106af
 80104b0:	20011268 	.word	0x20011268

080104b4 <stdio_exit_handler>:
 80104b4:	4a02      	ldr	r2, [pc, #8]	@ (80104c0 <stdio_exit_handler+0xc>)
 80104b6:	4903      	ldr	r1, [pc, #12]	@ (80104c4 <stdio_exit_handler+0x10>)
 80104b8:	4803      	ldr	r0, [pc, #12]	@ (80104c8 <stdio_exit_handler+0x14>)
 80104ba:	f000 b869 	b.w	8010590 <_fwalk_sglue>
 80104be:	bf00      	nop
 80104c0:	20000124 	.word	0x20000124
 80104c4:	08011389 	.word	0x08011389
 80104c8:	20000134 	.word	0x20000134

080104cc <cleanup_stdio>:
 80104cc:	6841      	ldr	r1, [r0, #4]
 80104ce:	4b0c      	ldr	r3, [pc, #48]	@ (8010500 <cleanup_stdio+0x34>)
 80104d0:	4299      	cmp	r1, r3
 80104d2:	b510      	push	{r4, lr}
 80104d4:	4604      	mov	r4, r0
 80104d6:	d001      	beq.n	80104dc <cleanup_stdio+0x10>
 80104d8:	f000 ff56 	bl	8011388 <_fflush_r>
 80104dc:	68a1      	ldr	r1, [r4, #8]
 80104de:	4b09      	ldr	r3, [pc, #36]	@ (8010504 <cleanup_stdio+0x38>)
 80104e0:	4299      	cmp	r1, r3
 80104e2:	d002      	beq.n	80104ea <cleanup_stdio+0x1e>
 80104e4:	4620      	mov	r0, r4
 80104e6:	f000 ff4f 	bl	8011388 <_fflush_r>
 80104ea:	68e1      	ldr	r1, [r4, #12]
 80104ec:	4b06      	ldr	r3, [pc, #24]	@ (8010508 <cleanup_stdio+0x3c>)
 80104ee:	4299      	cmp	r1, r3
 80104f0:	d004      	beq.n	80104fc <cleanup_stdio+0x30>
 80104f2:	4620      	mov	r0, r4
 80104f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104f8:	f000 bf46 	b.w	8011388 <_fflush_r>
 80104fc:	bd10      	pop	{r4, pc}
 80104fe:	bf00      	nop
 8010500:	20011268 	.word	0x20011268
 8010504:	200112d0 	.word	0x200112d0
 8010508:	20011338 	.word	0x20011338

0801050c <global_stdio_init.part.0>:
 801050c:	b510      	push	{r4, lr}
 801050e:	4b0b      	ldr	r3, [pc, #44]	@ (801053c <global_stdio_init.part.0+0x30>)
 8010510:	2104      	movs	r1, #4
 8010512:	4c0b      	ldr	r4, [pc, #44]	@ (8010540 <global_stdio_init.part.0+0x34>)
 8010514:	4a0b      	ldr	r2, [pc, #44]	@ (8010544 <global_stdio_init.part.0+0x38>)
 8010516:	4620      	mov	r0, r4
 8010518:	601a      	str	r2, [r3, #0]
 801051a:	2200      	movs	r2, #0
 801051c:	f7ff ff94 	bl	8010448 <std>
 8010520:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010524:	2201      	movs	r2, #1
 8010526:	2109      	movs	r1, #9
 8010528:	f7ff ff8e 	bl	8010448 <std>
 801052c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010530:	2202      	movs	r2, #2
 8010532:	2112      	movs	r1, #18
 8010534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010538:	f7ff bf86 	b.w	8010448 <std>
 801053c:	200113a0 	.word	0x200113a0
 8010540:	20011268 	.word	0x20011268
 8010544:	080104b5 	.word	0x080104b5

08010548 <__sfp_lock_acquire>:
 8010548:	4801      	ldr	r0, [pc, #4]	@ (8010550 <__sfp_lock_acquire+0x8>)
 801054a:	f000 b966 	b.w	801081a <__retarget_lock_acquire_recursive>
 801054e:	bf00      	nop
 8010550:	200113a9 	.word	0x200113a9

08010554 <__sfp_lock_release>:
 8010554:	4801      	ldr	r0, [pc, #4]	@ (801055c <__sfp_lock_release+0x8>)
 8010556:	f000 b961 	b.w	801081c <__retarget_lock_release_recursive>
 801055a:	bf00      	nop
 801055c:	200113a9 	.word	0x200113a9

08010560 <__sinit>:
 8010560:	b510      	push	{r4, lr}
 8010562:	4604      	mov	r4, r0
 8010564:	f7ff fff0 	bl	8010548 <__sfp_lock_acquire>
 8010568:	6a23      	ldr	r3, [r4, #32]
 801056a:	b11b      	cbz	r3, 8010574 <__sinit+0x14>
 801056c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010570:	f7ff bff0 	b.w	8010554 <__sfp_lock_release>
 8010574:	4b04      	ldr	r3, [pc, #16]	@ (8010588 <__sinit+0x28>)
 8010576:	6223      	str	r3, [r4, #32]
 8010578:	4b04      	ldr	r3, [pc, #16]	@ (801058c <__sinit+0x2c>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d1f5      	bne.n	801056c <__sinit+0xc>
 8010580:	f7ff ffc4 	bl	801050c <global_stdio_init.part.0>
 8010584:	e7f2      	b.n	801056c <__sinit+0xc>
 8010586:	bf00      	nop
 8010588:	080104cd 	.word	0x080104cd
 801058c:	200113a0 	.word	0x200113a0

08010590 <_fwalk_sglue>:
 8010590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010594:	4607      	mov	r7, r0
 8010596:	4688      	mov	r8, r1
 8010598:	4614      	mov	r4, r2
 801059a:	2600      	movs	r6, #0
 801059c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80105a0:	f1b9 0901 	subs.w	r9, r9, #1
 80105a4:	d505      	bpl.n	80105b2 <_fwalk_sglue+0x22>
 80105a6:	6824      	ldr	r4, [r4, #0]
 80105a8:	2c00      	cmp	r4, #0
 80105aa:	d1f7      	bne.n	801059c <_fwalk_sglue+0xc>
 80105ac:	4630      	mov	r0, r6
 80105ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105b2:	89ab      	ldrh	r3, [r5, #12]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d907      	bls.n	80105c8 <_fwalk_sglue+0x38>
 80105b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105bc:	3301      	adds	r3, #1
 80105be:	d003      	beq.n	80105c8 <_fwalk_sglue+0x38>
 80105c0:	4629      	mov	r1, r5
 80105c2:	4638      	mov	r0, r7
 80105c4:	47c0      	blx	r8
 80105c6:	4306      	orrs	r6, r0
 80105c8:	3568      	adds	r5, #104	@ 0x68
 80105ca:	e7e9      	b.n	80105a0 <_fwalk_sglue+0x10>

080105cc <iprintf>:
 80105cc:	b40f      	push	{r0, r1, r2, r3}
 80105ce:	b507      	push	{r0, r1, r2, lr}
 80105d0:	4906      	ldr	r1, [pc, #24]	@ (80105ec <iprintf+0x20>)
 80105d2:	ab04      	add	r3, sp, #16
 80105d4:	6808      	ldr	r0, [r1, #0]
 80105d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80105da:	6881      	ldr	r1, [r0, #8]
 80105dc:	9301      	str	r3, [sp, #4]
 80105de:	f000 fba5 	bl	8010d2c <_vfiprintf_r>
 80105e2:	b003      	add	sp, #12
 80105e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80105e8:	b004      	add	sp, #16
 80105ea:	4770      	bx	lr
 80105ec:	20000130 	.word	0x20000130

080105f0 <siprintf>:
 80105f0:	b40e      	push	{r1, r2, r3}
 80105f2:	b500      	push	{lr}
 80105f4:	b09c      	sub	sp, #112	@ 0x70
 80105f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80105fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80105fc:	9002      	str	r0, [sp, #8]
 80105fe:	9006      	str	r0, [sp, #24]
 8010600:	9107      	str	r1, [sp, #28]
 8010602:	9104      	str	r1, [sp, #16]
 8010604:	4808      	ldr	r0, [pc, #32]	@ (8010628 <siprintf+0x38>)
 8010606:	4909      	ldr	r1, [pc, #36]	@ (801062c <siprintf+0x3c>)
 8010608:	f853 2b04 	ldr.w	r2, [r3], #4
 801060c:	9105      	str	r1, [sp, #20]
 801060e:	a902      	add	r1, sp, #8
 8010610:	6800      	ldr	r0, [r0, #0]
 8010612:	9301      	str	r3, [sp, #4]
 8010614:	f000 fa64 	bl	8010ae0 <_svfiprintf_r>
 8010618:	9b02      	ldr	r3, [sp, #8]
 801061a:	2200      	movs	r2, #0
 801061c:	701a      	strb	r2, [r3, #0]
 801061e:	b01c      	add	sp, #112	@ 0x70
 8010620:	f85d eb04 	ldr.w	lr, [sp], #4
 8010624:	b003      	add	sp, #12
 8010626:	4770      	bx	lr
 8010628:	20000130 	.word	0x20000130
 801062c:	ffff0208 	.word	0xffff0208

08010630 <__sread>:
 8010630:	b510      	push	{r4, lr}
 8010632:	460c      	mov	r4, r1
 8010634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010638:	f000 f8a0 	bl	801077c <_read_r>
 801063c:	2800      	cmp	r0, #0
 801063e:	bfab      	itete	ge
 8010640:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010642:	89a3      	ldrhlt	r3, [r4, #12]
 8010644:	181b      	addge	r3, r3, r0
 8010646:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801064a:	bfac      	ite	ge
 801064c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801064e:	81a3      	strhlt	r3, [r4, #12]
 8010650:	bd10      	pop	{r4, pc}

08010652 <__swrite>:
 8010652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010656:	461f      	mov	r7, r3
 8010658:	898b      	ldrh	r3, [r1, #12]
 801065a:	4605      	mov	r5, r0
 801065c:	460c      	mov	r4, r1
 801065e:	05db      	lsls	r3, r3, #23
 8010660:	4616      	mov	r6, r2
 8010662:	d505      	bpl.n	8010670 <__swrite+0x1e>
 8010664:	2302      	movs	r3, #2
 8010666:	2200      	movs	r2, #0
 8010668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801066c:	f000 f874 	bl	8010758 <_lseek_r>
 8010670:	89a3      	ldrh	r3, [r4, #12]
 8010672:	4632      	mov	r2, r6
 8010674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010678:	4628      	mov	r0, r5
 801067a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801067e:	81a3      	strh	r3, [r4, #12]
 8010680:	463b      	mov	r3, r7
 8010682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010686:	f000 b88b 	b.w	80107a0 <_write_r>

0801068a <__sseek>:
 801068a:	b510      	push	{r4, lr}
 801068c:	460c      	mov	r4, r1
 801068e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010692:	f000 f861 	bl	8010758 <_lseek_r>
 8010696:	1c43      	adds	r3, r0, #1
 8010698:	89a3      	ldrh	r3, [r4, #12]
 801069a:	bf15      	itete	ne
 801069c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801069e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80106a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80106a6:	81a3      	strheq	r3, [r4, #12]
 80106a8:	bf18      	it	ne
 80106aa:	81a3      	strhne	r3, [r4, #12]
 80106ac:	bd10      	pop	{r4, pc}

080106ae <__sclose>:
 80106ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106b2:	f000 b841 	b.w	8010738 <_close_r>

080106b6 <_vsniprintf_r>:
 80106b6:	b530      	push	{r4, r5, lr}
 80106b8:	4614      	mov	r4, r2
 80106ba:	b09b      	sub	sp, #108	@ 0x6c
 80106bc:	4605      	mov	r5, r0
 80106be:	461a      	mov	r2, r3
 80106c0:	2c00      	cmp	r4, #0
 80106c2:	da05      	bge.n	80106d0 <_vsniprintf_r+0x1a>
 80106c4:	238b      	movs	r3, #139	@ 0x8b
 80106c6:	6003      	str	r3, [r0, #0]
 80106c8:	f04f 30ff 	mov.w	r0, #4294967295
 80106cc:	b01b      	add	sp, #108	@ 0x6c
 80106ce:	bd30      	pop	{r4, r5, pc}
 80106d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80106d4:	9100      	str	r1, [sp, #0]
 80106d6:	9104      	str	r1, [sp, #16]
 80106d8:	4669      	mov	r1, sp
 80106da:	f8ad 300c 	strh.w	r3, [sp, #12]
 80106de:	bf14      	ite	ne
 80106e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80106e4:	4623      	moveq	r3, r4
 80106e6:	9302      	str	r3, [sp, #8]
 80106e8:	9305      	str	r3, [sp, #20]
 80106ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80106ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 80106f2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80106f4:	f000 f9f4 	bl	8010ae0 <_svfiprintf_r>
 80106f8:	1c43      	adds	r3, r0, #1
 80106fa:	bfbc      	itt	lt
 80106fc:	238b      	movlt	r3, #139	@ 0x8b
 80106fe:	602b      	strlt	r3, [r5, #0]
 8010700:	2c00      	cmp	r4, #0
 8010702:	d0e3      	beq.n	80106cc <_vsniprintf_r+0x16>
 8010704:	9b00      	ldr	r3, [sp, #0]
 8010706:	2200      	movs	r2, #0
 8010708:	701a      	strb	r2, [r3, #0]
 801070a:	e7df      	b.n	80106cc <_vsniprintf_r+0x16>

0801070c <vsniprintf>:
 801070c:	b507      	push	{r0, r1, r2, lr}
 801070e:	9300      	str	r3, [sp, #0]
 8010710:	4613      	mov	r3, r2
 8010712:	460a      	mov	r2, r1
 8010714:	4601      	mov	r1, r0
 8010716:	4803      	ldr	r0, [pc, #12]	@ (8010724 <vsniprintf+0x18>)
 8010718:	6800      	ldr	r0, [r0, #0]
 801071a:	f7ff ffcc 	bl	80106b6 <_vsniprintf_r>
 801071e:	b003      	add	sp, #12
 8010720:	f85d fb04 	ldr.w	pc, [sp], #4
 8010724:	20000130 	.word	0x20000130

08010728 <memset>:
 8010728:	4402      	add	r2, r0
 801072a:	4603      	mov	r3, r0
 801072c:	4293      	cmp	r3, r2
 801072e:	d100      	bne.n	8010732 <memset+0xa>
 8010730:	4770      	bx	lr
 8010732:	f803 1b01 	strb.w	r1, [r3], #1
 8010736:	e7f9      	b.n	801072c <memset+0x4>

08010738 <_close_r>:
 8010738:	b538      	push	{r3, r4, r5, lr}
 801073a:	2300      	movs	r3, #0
 801073c:	4d05      	ldr	r5, [pc, #20]	@ (8010754 <_close_r+0x1c>)
 801073e:	4604      	mov	r4, r0
 8010740:	4608      	mov	r0, r1
 8010742:	602b      	str	r3, [r5, #0]
 8010744:	f7f1 faeb 	bl	8001d1e <_close>
 8010748:	1c43      	adds	r3, r0, #1
 801074a:	d102      	bne.n	8010752 <_close_r+0x1a>
 801074c:	682b      	ldr	r3, [r5, #0]
 801074e:	b103      	cbz	r3, 8010752 <_close_r+0x1a>
 8010750:	6023      	str	r3, [r4, #0]
 8010752:	bd38      	pop	{r3, r4, r5, pc}
 8010754:	200113a4 	.word	0x200113a4

08010758 <_lseek_r>:
 8010758:	b538      	push	{r3, r4, r5, lr}
 801075a:	4604      	mov	r4, r0
 801075c:	4d06      	ldr	r5, [pc, #24]	@ (8010778 <_lseek_r+0x20>)
 801075e:	4608      	mov	r0, r1
 8010760:	4611      	mov	r1, r2
 8010762:	2200      	movs	r2, #0
 8010764:	602a      	str	r2, [r5, #0]
 8010766:	461a      	mov	r2, r3
 8010768:	f7f1 fb00 	bl	8001d6c <_lseek>
 801076c:	1c43      	adds	r3, r0, #1
 801076e:	d102      	bne.n	8010776 <_lseek_r+0x1e>
 8010770:	682b      	ldr	r3, [r5, #0]
 8010772:	b103      	cbz	r3, 8010776 <_lseek_r+0x1e>
 8010774:	6023      	str	r3, [r4, #0]
 8010776:	bd38      	pop	{r3, r4, r5, pc}
 8010778:	200113a4 	.word	0x200113a4

0801077c <_read_r>:
 801077c:	b538      	push	{r3, r4, r5, lr}
 801077e:	4604      	mov	r4, r0
 8010780:	4d06      	ldr	r5, [pc, #24]	@ (801079c <_read_r+0x20>)
 8010782:	4608      	mov	r0, r1
 8010784:	4611      	mov	r1, r2
 8010786:	2200      	movs	r2, #0
 8010788:	602a      	str	r2, [r5, #0]
 801078a:	461a      	mov	r2, r3
 801078c:	f7f1 fa8e 	bl	8001cac <_read>
 8010790:	1c43      	adds	r3, r0, #1
 8010792:	d102      	bne.n	801079a <_read_r+0x1e>
 8010794:	682b      	ldr	r3, [r5, #0]
 8010796:	b103      	cbz	r3, 801079a <_read_r+0x1e>
 8010798:	6023      	str	r3, [r4, #0]
 801079a:	bd38      	pop	{r3, r4, r5, pc}
 801079c:	200113a4 	.word	0x200113a4

080107a0 <_write_r>:
 80107a0:	b538      	push	{r3, r4, r5, lr}
 80107a2:	4604      	mov	r4, r0
 80107a4:	4d06      	ldr	r5, [pc, #24]	@ (80107c0 <_write_r+0x20>)
 80107a6:	4608      	mov	r0, r1
 80107a8:	4611      	mov	r1, r2
 80107aa:	2200      	movs	r2, #0
 80107ac:	602a      	str	r2, [r5, #0]
 80107ae:	461a      	mov	r2, r3
 80107b0:	f7f1 fa99 	bl	8001ce6 <_write>
 80107b4:	1c43      	adds	r3, r0, #1
 80107b6:	d102      	bne.n	80107be <_write_r+0x1e>
 80107b8:	682b      	ldr	r3, [r5, #0]
 80107ba:	b103      	cbz	r3, 80107be <_write_r+0x1e>
 80107bc:	6023      	str	r3, [r4, #0]
 80107be:	bd38      	pop	{r3, r4, r5, pc}
 80107c0:	200113a4 	.word	0x200113a4

080107c4 <__errno>:
 80107c4:	4b01      	ldr	r3, [pc, #4]	@ (80107cc <__errno+0x8>)
 80107c6:	6818      	ldr	r0, [r3, #0]
 80107c8:	4770      	bx	lr
 80107ca:	bf00      	nop
 80107cc:	20000130 	.word	0x20000130

080107d0 <__libc_init_array>:
 80107d0:	b570      	push	{r4, r5, r6, lr}
 80107d2:	4d0d      	ldr	r5, [pc, #52]	@ (8010808 <__libc_init_array+0x38>)
 80107d4:	2600      	movs	r6, #0
 80107d6:	4c0d      	ldr	r4, [pc, #52]	@ (801080c <__libc_init_array+0x3c>)
 80107d8:	1b64      	subs	r4, r4, r5
 80107da:	10a4      	asrs	r4, r4, #2
 80107dc:	42a6      	cmp	r6, r4
 80107de:	d109      	bne.n	80107f4 <__libc_init_array+0x24>
 80107e0:	4d0b      	ldr	r5, [pc, #44]	@ (8010810 <__libc_init_array+0x40>)
 80107e2:	2600      	movs	r6, #0
 80107e4:	4c0b      	ldr	r4, [pc, #44]	@ (8010814 <__libc_init_array+0x44>)
 80107e6:	f000 ff7d 	bl	80116e4 <_init>
 80107ea:	1b64      	subs	r4, r4, r5
 80107ec:	10a4      	asrs	r4, r4, #2
 80107ee:	42a6      	cmp	r6, r4
 80107f0:	d105      	bne.n	80107fe <__libc_init_array+0x2e>
 80107f2:	bd70      	pop	{r4, r5, r6, pc}
 80107f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80107f8:	3601      	adds	r6, #1
 80107fa:	4798      	blx	r3
 80107fc:	e7ee      	b.n	80107dc <__libc_init_array+0xc>
 80107fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8010802:	3601      	adds	r6, #1
 8010804:	4798      	blx	r3
 8010806:	e7f2      	b.n	80107ee <__libc_init_array+0x1e>
 8010808:	08011b84 	.word	0x08011b84
 801080c:	08011b84 	.word	0x08011b84
 8010810:	08011b84 	.word	0x08011b84
 8010814:	08011b88 	.word	0x08011b88

08010818 <__retarget_lock_init_recursive>:
 8010818:	4770      	bx	lr

0801081a <__retarget_lock_acquire_recursive>:
 801081a:	4770      	bx	lr

0801081c <__retarget_lock_release_recursive>:
 801081c:	4770      	bx	lr

0801081e <memcpy>:
 801081e:	440a      	add	r2, r1
 8010820:	1e43      	subs	r3, r0, #1
 8010822:	4291      	cmp	r1, r2
 8010824:	d100      	bne.n	8010828 <memcpy+0xa>
 8010826:	4770      	bx	lr
 8010828:	b510      	push	{r4, lr}
 801082a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801082e:	4291      	cmp	r1, r2
 8010830:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010834:	d1f9      	bne.n	801082a <memcpy+0xc>
 8010836:	bd10      	pop	{r4, pc}

08010838 <_free_r>:
 8010838:	b538      	push	{r3, r4, r5, lr}
 801083a:	4605      	mov	r5, r0
 801083c:	2900      	cmp	r1, #0
 801083e:	d041      	beq.n	80108c4 <_free_r+0x8c>
 8010840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010844:	1f0c      	subs	r4, r1, #4
 8010846:	2b00      	cmp	r3, #0
 8010848:	bfb8      	it	lt
 801084a:	18e4      	addlt	r4, r4, r3
 801084c:	f000 f8e0 	bl	8010a10 <__malloc_lock>
 8010850:	4a1d      	ldr	r2, [pc, #116]	@ (80108c8 <_free_r+0x90>)
 8010852:	6813      	ldr	r3, [r2, #0]
 8010854:	b933      	cbnz	r3, 8010864 <_free_r+0x2c>
 8010856:	6063      	str	r3, [r4, #4]
 8010858:	6014      	str	r4, [r2, #0]
 801085a:	4628      	mov	r0, r5
 801085c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010860:	f000 b8dc 	b.w	8010a1c <__malloc_unlock>
 8010864:	42a3      	cmp	r3, r4
 8010866:	d908      	bls.n	801087a <_free_r+0x42>
 8010868:	6820      	ldr	r0, [r4, #0]
 801086a:	1821      	adds	r1, r4, r0
 801086c:	428b      	cmp	r3, r1
 801086e:	bf01      	itttt	eq
 8010870:	6819      	ldreq	r1, [r3, #0]
 8010872:	685b      	ldreq	r3, [r3, #4]
 8010874:	1809      	addeq	r1, r1, r0
 8010876:	6021      	streq	r1, [r4, #0]
 8010878:	e7ed      	b.n	8010856 <_free_r+0x1e>
 801087a:	461a      	mov	r2, r3
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	b10b      	cbz	r3, 8010884 <_free_r+0x4c>
 8010880:	42a3      	cmp	r3, r4
 8010882:	d9fa      	bls.n	801087a <_free_r+0x42>
 8010884:	6811      	ldr	r1, [r2, #0]
 8010886:	1850      	adds	r0, r2, r1
 8010888:	42a0      	cmp	r0, r4
 801088a:	d10b      	bne.n	80108a4 <_free_r+0x6c>
 801088c:	6820      	ldr	r0, [r4, #0]
 801088e:	4401      	add	r1, r0
 8010890:	1850      	adds	r0, r2, r1
 8010892:	6011      	str	r1, [r2, #0]
 8010894:	4283      	cmp	r3, r0
 8010896:	d1e0      	bne.n	801085a <_free_r+0x22>
 8010898:	6818      	ldr	r0, [r3, #0]
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	4408      	add	r0, r1
 801089e:	6053      	str	r3, [r2, #4]
 80108a0:	6010      	str	r0, [r2, #0]
 80108a2:	e7da      	b.n	801085a <_free_r+0x22>
 80108a4:	d902      	bls.n	80108ac <_free_r+0x74>
 80108a6:	230c      	movs	r3, #12
 80108a8:	602b      	str	r3, [r5, #0]
 80108aa:	e7d6      	b.n	801085a <_free_r+0x22>
 80108ac:	6820      	ldr	r0, [r4, #0]
 80108ae:	1821      	adds	r1, r4, r0
 80108b0:	428b      	cmp	r3, r1
 80108b2:	bf02      	ittt	eq
 80108b4:	6819      	ldreq	r1, [r3, #0]
 80108b6:	685b      	ldreq	r3, [r3, #4]
 80108b8:	1809      	addeq	r1, r1, r0
 80108ba:	6063      	str	r3, [r4, #4]
 80108bc:	bf08      	it	eq
 80108be:	6021      	streq	r1, [r4, #0]
 80108c0:	6054      	str	r4, [r2, #4]
 80108c2:	e7ca      	b.n	801085a <_free_r+0x22>
 80108c4:	bd38      	pop	{r3, r4, r5, pc}
 80108c6:	bf00      	nop
 80108c8:	200113b0 	.word	0x200113b0

080108cc <sbrk_aligned>:
 80108cc:	b570      	push	{r4, r5, r6, lr}
 80108ce:	4e0f      	ldr	r6, [pc, #60]	@ (801090c <sbrk_aligned+0x40>)
 80108d0:	460c      	mov	r4, r1
 80108d2:	4605      	mov	r5, r0
 80108d4:	6831      	ldr	r1, [r6, #0]
 80108d6:	b911      	cbnz	r1, 80108de <sbrk_aligned+0x12>
 80108d8:	f000 fe2c 	bl	8011534 <_sbrk_r>
 80108dc:	6030      	str	r0, [r6, #0]
 80108de:	4621      	mov	r1, r4
 80108e0:	4628      	mov	r0, r5
 80108e2:	f000 fe27 	bl	8011534 <_sbrk_r>
 80108e6:	1c43      	adds	r3, r0, #1
 80108e8:	d103      	bne.n	80108f2 <sbrk_aligned+0x26>
 80108ea:	f04f 34ff 	mov.w	r4, #4294967295
 80108ee:	4620      	mov	r0, r4
 80108f0:	bd70      	pop	{r4, r5, r6, pc}
 80108f2:	1cc4      	adds	r4, r0, #3
 80108f4:	f024 0403 	bic.w	r4, r4, #3
 80108f8:	42a0      	cmp	r0, r4
 80108fa:	d0f8      	beq.n	80108ee <sbrk_aligned+0x22>
 80108fc:	1a21      	subs	r1, r4, r0
 80108fe:	4628      	mov	r0, r5
 8010900:	f000 fe18 	bl	8011534 <_sbrk_r>
 8010904:	3001      	adds	r0, #1
 8010906:	d1f2      	bne.n	80108ee <sbrk_aligned+0x22>
 8010908:	e7ef      	b.n	80108ea <sbrk_aligned+0x1e>
 801090a:	bf00      	nop
 801090c:	200113ac 	.word	0x200113ac

08010910 <_malloc_r>:
 8010910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010914:	1ccd      	adds	r5, r1, #3
 8010916:	4606      	mov	r6, r0
 8010918:	f025 0503 	bic.w	r5, r5, #3
 801091c:	3508      	adds	r5, #8
 801091e:	2d0c      	cmp	r5, #12
 8010920:	bf38      	it	cc
 8010922:	250c      	movcc	r5, #12
 8010924:	2d00      	cmp	r5, #0
 8010926:	db01      	blt.n	801092c <_malloc_r+0x1c>
 8010928:	42a9      	cmp	r1, r5
 801092a:	d904      	bls.n	8010936 <_malloc_r+0x26>
 801092c:	230c      	movs	r3, #12
 801092e:	6033      	str	r3, [r6, #0]
 8010930:	2000      	movs	r0, #0
 8010932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a0c <_malloc_r+0xfc>
 801093a:	f000 f869 	bl	8010a10 <__malloc_lock>
 801093e:	f8d8 3000 	ldr.w	r3, [r8]
 8010942:	461c      	mov	r4, r3
 8010944:	bb44      	cbnz	r4, 8010998 <_malloc_r+0x88>
 8010946:	4629      	mov	r1, r5
 8010948:	4630      	mov	r0, r6
 801094a:	f7ff ffbf 	bl	80108cc <sbrk_aligned>
 801094e:	1c43      	adds	r3, r0, #1
 8010950:	4604      	mov	r4, r0
 8010952:	d158      	bne.n	8010a06 <_malloc_r+0xf6>
 8010954:	f8d8 4000 	ldr.w	r4, [r8]
 8010958:	4627      	mov	r7, r4
 801095a:	2f00      	cmp	r7, #0
 801095c:	d143      	bne.n	80109e6 <_malloc_r+0xd6>
 801095e:	2c00      	cmp	r4, #0
 8010960:	d04b      	beq.n	80109fa <_malloc_r+0xea>
 8010962:	6823      	ldr	r3, [r4, #0]
 8010964:	4639      	mov	r1, r7
 8010966:	4630      	mov	r0, r6
 8010968:	eb04 0903 	add.w	r9, r4, r3
 801096c:	f000 fde2 	bl	8011534 <_sbrk_r>
 8010970:	4581      	cmp	r9, r0
 8010972:	d142      	bne.n	80109fa <_malloc_r+0xea>
 8010974:	6821      	ldr	r1, [r4, #0]
 8010976:	4630      	mov	r0, r6
 8010978:	1a6d      	subs	r5, r5, r1
 801097a:	4629      	mov	r1, r5
 801097c:	f7ff ffa6 	bl	80108cc <sbrk_aligned>
 8010980:	3001      	adds	r0, #1
 8010982:	d03a      	beq.n	80109fa <_malloc_r+0xea>
 8010984:	6823      	ldr	r3, [r4, #0]
 8010986:	442b      	add	r3, r5
 8010988:	6023      	str	r3, [r4, #0]
 801098a:	f8d8 3000 	ldr.w	r3, [r8]
 801098e:	685a      	ldr	r2, [r3, #4]
 8010990:	bb62      	cbnz	r2, 80109ec <_malloc_r+0xdc>
 8010992:	f8c8 7000 	str.w	r7, [r8]
 8010996:	e00f      	b.n	80109b8 <_malloc_r+0xa8>
 8010998:	6822      	ldr	r2, [r4, #0]
 801099a:	1b52      	subs	r2, r2, r5
 801099c:	d420      	bmi.n	80109e0 <_malloc_r+0xd0>
 801099e:	2a0b      	cmp	r2, #11
 80109a0:	d917      	bls.n	80109d2 <_malloc_r+0xc2>
 80109a2:	1961      	adds	r1, r4, r5
 80109a4:	42a3      	cmp	r3, r4
 80109a6:	6025      	str	r5, [r4, #0]
 80109a8:	bf18      	it	ne
 80109aa:	6059      	strne	r1, [r3, #4]
 80109ac:	6863      	ldr	r3, [r4, #4]
 80109ae:	bf08      	it	eq
 80109b0:	f8c8 1000 	streq.w	r1, [r8]
 80109b4:	5162      	str	r2, [r4, r5]
 80109b6:	604b      	str	r3, [r1, #4]
 80109b8:	4630      	mov	r0, r6
 80109ba:	f000 f82f 	bl	8010a1c <__malloc_unlock>
 80109be:	f104 000b 	add.w	r0, r4, #11
 80109c2:	1d23      	adds	r3, r4, #4
 80109c4:	f020 0007 	bic.w	r0, r0, #7
 80109c8:	1ac2      	subs	r2, r0, r3
 80109ca:	bf1c      	itt	ne
 80109cc:	1a1b      	subne	r3, r3, r0
 80109ce:	50a3      	strne	r3, [r4, r2]
 80109d0:	e7af      	b.n	8010932 <_malloc_r+0x22>
 80109d2:	6862      	ldr	r2, [r4, #4]
 80109d4:	42a3      	cmp	r3, r4
 80109d6:	bf0c      	ite	eq
 80109d8:	f8c8 2000 	streq.w	r2, [r8]
 80109dc:	605a      	strne	r2, [r3, #4]
 80109de:	e7eb      	b.n	80109b8 <_malloc_r+0xa8>
 80109e0:	4623      	mov	r3, r4
 80109e2:	6864      	ldr	r4, [r4, #4]
 80109e4:	e7ae      	b.n	8010944 <_malloc_r+0x34>
 80109e6:	463c      	mov	r4, r7
 80109e8:	687f      	ldr	r7, [r7, #4]
 80109ea:	e7b6      	b.n	801095a <_malloc_r+0x4a>
 80109ec:	461a      	mov	r2, r3
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	42a3      	cmp	r3, r4
 80109f2:	d1fb      	bne.n	80109ec <_malloc_r+0xdc>
 80109f4:	2300      	movs	r3, #0
 80109f6:	6053      	str	r3, [r2, #4]
 80109f8:	e7de      	b.n	80109b8 <_malloc_r+0xa8>
 80109fa:	230c      	movs	r3, #12
 80109fc:	4630      	mov	r0, r6
 80109fe:	6033      	str	r3, [r6, #0]
 8010a00:	f000 f80c 	bl	8010a1c <__malloc_unlock>
 8010a04:	e794      	b.n	8010930 <_malloc_r+0x20>
 8010a06:	6005      	str	r5, [r0, #0]
 8010a08:	e7d6      	b.n	80109b8 <_malloc_r+0xa8>
 8010a0a:	bf00      	nop
 8010a0c:	200113b0 	.word	0x200113b0

08010a10 <__malloc_lock>:
 8010a10:	4801      	ldr	r0, [pc, #4]	@ (8010a18 <__malloc_lock+0x8>)
 8010a12:	f7ff bf02 	b.w	801081a <__retarget_lock_acquire_recursive>
 8010a16:	bf00      	nop
 8010a18:	200113a8 	.word	0x200113a8

08010a1c <__malloc_unlock>:
 8010a1c:	4801      	ldr	r0, [pc, #4]	@ (8010a24 <__malloc_unlock+0x8>)
 8010a1e:	f7ff befd 	b.w	801081c <__retarget_lock_release_recursive>
 8010a22:	bf00      	nop
 8010a24:	200113a8 	.word	0x200113a8

08010a28 <__ssputs_r>:
 8010a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a2c:	461f      	mov	r7, r3
 8010a2e:	688e      	ldr	r6, [r1, #8]
 8010a30:	4682      	mov	sl, r0
 8010a32:	460c      	mov	r4, r1
 8010a34:	42be      	cmp	r6, r7
 8010a36:	4690      	mov	r8, r2
 8010a38:	680b      	ldr	r3, [r1, #0]
 8010a3a:	d82d      	bhi.n	8010a98 <__ssputs_r+0x70>
 8010a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010a44:	d026      	beq.n	8010a94 <__ssputs_r+0x6c>
 8010a46:	6965      	ldr	r5, [r4, #20]
 8010a48:	6909      	ldr	r1, [r1, #16]
 8010a4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a4e:	eba3 0901 	sub.w	r9, r3, r1
 8010a52:	1c7b      	adds	r3, r7, #1
 8010a54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a58:	444b      	add	r3, r9
 8010a5a:	106d      	asrs	r5, r5, #1
 8010a5c:	429d      	cmp	r5, r3
 8010a5e:	bf38      	it	cc
 8010a60:	461d      	movcc	r5, r3
 8010a62:	0553      	lsls	r3, r2, #21
 8010a64:	d527      	bpl.n	8010ab6 <__ssputs_r+0x8e>
 8010a66:	4629      	mov	r1, r5
 8010a68:	f7ff ff52 	bl	8010910 <_malloc_r>
 8010a6c:	4606      	mov	r6, r0
 8010a6e:	b360      	cbz	r0, 8010aca <__ssputs_r+0xa2>
 8010a70:	464a      	mov	r2, r9
 8010a72:	6921      	ldr	r1, [r4, #16]
 8010a74:	f7ff fed3 	bl	801081e <memcpy>
 8010a78:	89a3      	ldrh	r3, [r4, #12]
 8010a7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a82:	81a3      	strh	r3, [r4, #12]
 8010a84:	6126      	str	r6, [r4, #16]
 8010a86:	444e      	add	r6, r9
 8010a88:	6165      	str	r5, [r4, #20]
 8010a8a:	eba5 0509 	sub.w	r5, r5, r9
 8010a8e:	6026      	str	r6, [r4, #0]
 8010a90:	463e      	mov	r6, r7
 8010a92:	60a5      	str	r5, [r4, #8]
 8010a94:	42be      	cmp	r6, r7
 8010a96:	d900      	bls.n	8010a9a <__ssputs_r+0x72>
 8010a98:	463e      	mov	r6, r7
 8010a9a:	4632      	mov	r2, r6
 8010a9c:	4641      	mov	r1, r8
 8010a9e:	6820      	ldr	r0, [r4, #0]
 8010aa0:	f000 fd2e 	bl	8011500 <memmove>
 8010aa4:	68a3      	ldr	r3, [r4, #8]
 8010aa6:	2000      	movs	r0, #0
 8010aa8:	1b9b      	subs	r3, r3, r6
 8010aaa:	60a3      	str	r3, [r4, #8]
 8010aac:	6823      	ldr	r3, [r4, #0]
 8010aae:	4433      	add	r3, r6
 8010ab0:	6023      	str	r3, [r4, #0]
 8010ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab6:	462a      	mov	r2, r5
 8010ab8:	f000 fd5a 	bl	8011570 <_realloc_r>
 8010abc:	4606      	mov	r6, r0
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	d1e0      	bne.n	8010a84 <__ssputs_r+0x5c>
 8010ac2:	6921      	ldr	r1, [r4, #16]
 8010ac4:	4650      	mov	r0, sl
 8010ac6:	f7ff feb7 	bl	8010838 <_free_r>
 8010aca:	230c      	movs	r3, #12
 8010acc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ad0:	f8ca 3000 	str.w	r3, [sl]
 8010ad4:	89a3      	ldrh	r3, [r4, #12]
 8010ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ada:	81a3      	strh	r3, [r4, #12]
 8010adc:	e7e9      	b.n	8010ab2 <__ssputs_r+0x8a>
	...

08010ae0 <_svfiprintf_r>:
 8010ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ae4:	4698      	mov	r8, r3
 8010ae6:	898b      	ldrh	r3, [r1, #12]
 8010ae8:	b09d      	sub	sp, #116	@ 0x74
 8010aea:	4607      	mov	r7, r0
 8010aec:	061b      	lsls	r3, r3, #24
 8010aee:	460d      	mov	r5, r1
 8010af0:	4614      	mov	r4, r2
 8010af2:	d510      	bpl.n	8010b16 <_svfiprintf_r+0x36>
 8010af4:	690b      	ldr	r3, [r1, #16]
 8010af6:	b973      	cbnz	r3, 8010b16 <_svfiprintf_r+0x36>
 8010af8:	2140      	movs	r1, #64	@ 0x40
 8010afa:	f7ff ff09 	bl	8010910 <_malloc_r>
 8010afe:	6028      	str	r0, [r5, #0]
 8010b00:	6128      	str	r0, [r5, #16]
 8010b02:	b930      	cbnz	r0, 8010b12 <_svfiprintf_r+0x32>
 8010b04:	230c      	movs	r3, #12
 8010b06:	603b      	str	r3, [r7, #0]
 8010b08:	f04f 30ff 	mov.w	r0, #4294967295
 8010b0c:	b01d      	add	sp, #116	@ 0x74
 8010b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b12:	2340      	movs	r3, #64	@ 0x40
 8010b14:	616b      	str	r3, [r5, #20]
 8010b16:	2300      	movs	r3, #0
 8010b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b1c:	f04f 0901 	mov.w	r9, #1
 8010b20:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010cc4 <_svfiprintf_r+0x1e4>
 8010b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b26:	2320      	movs	r3, #32
 8010b28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b2c:	2330      	movs	r3, #48	@ 0x30
 8010b2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010b32:	4623      	mov	r3, r4
 8010b34:	469a      	mov	sl, r3
 8010b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b3a:	b10a      	cbz	r2, 8010b40 <_svfiprintf_r+0x60>
 8010b3c:	2a25      	cmp	r2, #37	@ 0x25
 8010b3e:	d1f9      	bne.n	8010b34 <_svfiprintf_r+0x54>
 8010b40:	ebba 0b04 	subs.w	fp, sl, r4
 8010b44:	d00b      	beq.n	8010b5e <_svfiprintf_r+0x7e>
 8010b46:	465b      	mov	r3, fp
 8010b48:	4622      	mov	r2, r4
 8010b4a:	4629      	mov	r1, r5
 8010b4c:	4638      	mov	r0, r7
 8010b4e:	f7ff ff6b 	bl	8010a28 <__ssputs_r>
 8010b52:	3001      	adds	r0, #1
 8010b54:	f000 80a7 	beq.w	8010ca6 <_svfiprintf_r+0x1c6>
 8010b58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b5a:	445a      	add	r2, fp
 8010b5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	f000 809f 	beq.w	8010ca6 <_svfiprintf_r+0x1c6>
 8010b68:	2300      	movs	r3, #0
 8010b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b6e:	f10a 0a01 	add.w	sl, sl, #1
 8010b72:	9304      	str	r3, [sp, #16]
 8010b74:	9307      	str	r3, [sp, #28]
 8010b76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b80:	4654      	mov	r4, sl
 8010b82:	2205      	movs	r2, #5
 8010b84:	484f      	ldr	r0, [pc, #316]	@ (8010cc4 <_svfiprintf_r+0x1e4>)
 8010b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b8a:	f000 fce3 	bl	8011554 <memchr>
 8010b8e:	9a04      	ldr	r2, [sp, #16]
 8010b90:	b9d8      	cbnz	r0, 8010bca <_svfiprintf_r+0xea>
 8010b92:	06d0      	lsls	r0, r2, #27
 8010b94:	bf44      	itt	mi
 8010b96:	2320      	movmi	r3, #32
 8010b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b9c:	0711      	lsls	r1, r2, #28
 8010b9e:	bf44      	itt	mi
 8010ba0:	232b      	movmi	r3, #43	@ 0x2b
 8010ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8010baa:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bac:	d015      	beq.n	8010bda <_svfiprintf_r+0xfa>
 8010bae:	9a07      	ldr	r2, [sp, #28]
 8010bb0:	4654      	mov	r4, sl
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	f04f 0c0a 	mov.w	ip, #10
 8010bb8:	4621      	mov	r1, r4
 8010bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bbe:	3b30      	subs	r3, #48	@ 0x30
 8010bc0:	2b09      	cmp	r3, #9
 8010bc2:	d94b      	bls.n	8010c5c <_svfiprintf_r+0x17c>
 8010bc4:	b1b0      	cbz	r0, 8010bf4 <_svfiprintf_r+0x114>
 8010bc6:	9207      	str	r2, [sp, #28]
 8010bc8:	e014      	b.n	8010bf4 <_svfiprintf_r+0x114>
 8010bca:	eba0 0308 	sub.w	r3, r0, r8
 8010bce:	46a2      	mov	sl, r4
 8010bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	9304      	str	r3, [sp, #16]
 8010bd8:	e7d2      	b.n	8010b80 <_svfiprintf_r+0xa0>
 8010bda:	9b03      	ldr	r3, [sp, #12]
 8010bdc:	1d19      	adds	r1, r3, #4
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	9103      	str	r1, [sp, #12]
 8010be4:	bfbb      	ittet	lt
 8010be6:	425b      	neglt	r3, r3
 8010be8:	f042 0202 	orrlt.w	r2, r2, #2
 8010bec:	9307      	strge	r3, [sp, #28]
 8010bee:	9307      	strlt	r3, [sp, #28]
 8010bf0:	bfb8      	it	lt
 8010bf2:	9204      	strlt	r2, [sp, #16]
 8010bf4:	7823      	ldrb	r3, [r4, #0]
 8010bf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8010bf8:	d10a      	bne.n	8010c10 <_svfiprintf_r+0x130>
 8010bfa:	7863      	ldrb	r3, [r4, #1]
 8010bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bfe:	d132      	bne.n	8010c66 <_svfiprintf_r+0x186>
 8010c00:	9b03      	ldr	r3, [sp, #12]
 8010c02:	3402      	adds	r4, #2
 8010c04:	1d1a      	adds	r2, r3, #4
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c0c:	9203      	str	r2, [sp, #12]
 8010c0e:	9305      	str	r3, [sp, #20]
 8010c10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010cd4 <_svfiprintf_r+0x1f4>
 8010c14:	2203      	movs	r2, #3
 8010c16:	7821      	ldrb	r1, [r4, #0]
 8010c18:	4650      	mov	r0, sl
 8010c1a:	f000 fc9b 	bl	8011554 <memchr>
 8010c1e:	b138      	cbz	r0, 8010c30 <_svfiprintf_r+0x150>
 8010c20:	eba0 000a 	sub.w	r0, r0, sl
 8010c24:	2240      	movs	r2, #64	@ 0x40
 8010c26:	9b04      	ldr	r3, [sp, #16]
 8010c28:	3401      	adds	r4, #1
 8010c2a:	4082      	lsls	r2, r0
 8010c2c:	4313      	orrs	r3, r2
 8010c2e:	9304      	str	r3, [sp, #16]
 8010c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c34:	2206      	movs	r2, #6
 8010c36:	4824      	ldr	r0, [pc, #144]	@ (8010cc8 <_svfiprintf_r+0x1e8>)
 8010c38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c3c:	f000 fc8a 	bl	8011554 <memchr>
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d036      	beq.n	8010cb2 <_svfiprintf_r+0x1d2>
 8010c44:	4b21      	ldr	r3, [pc, #132]	@ (8010ccc <_svfiprintf_r+0x1ec>)
 8010c46:	bb1b      	cbnz	r3, 8010c90 <_svfiprintf_r+0x1b0>
 8010c48:	9b03      	ldr	r3, [sp, #12]
 8010c4a:	3307      	adds	r3, #7
 8010c4c:	f023 0307 	bic.w	r3, r3, #7
 8010c50:	3308      	adds	r3, #8
 8010c52:	9303      	str	r3, [sp, #12]
 8010c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c56:	4433      	add	r3, r6
 8010c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c5a:	e76a      	b.n	8010b32 <_svfiprintf_r+0x52>
 8010c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c60:	460c      	mov	r4, r1
 8010c62:	2001      	movs	r0, #1
 8010c64:	e7a8      	b.n	8010bb8 <_svfiprintf_r+0xd8>
 8010c66:	2300      	movs	r3, #0
 8010c68:	3401      	adds	r4, #1
 8010c6a:	f04f 0c0a 	mov.w	ip, #10
 8010c6e:	4619      	mov	r1, r3
 8010c70:	9305      	str	r3, [sp, #20]
 8010c72:	4620      	mov	r0, r4
 8010c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c78:	3a30      	subs	r2, #48	@ 0x30
 8010c7a:	2a09      	cmp	r2, #9
 8010c7c:	d903      	bls.n	8010c86 <_svfiprintf_r+0x1a6>
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d0c6      	beq.n	8010c10 <_svfiprintf_r+0x130>
 8010c82:	9105      	str	r1, [sp, #20]
 8010c84:	e7c4      	b.n	8010c10 <_svfiprintf_r+0x130>
 8010c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	e7f0      	b.n	8010c72 <_svfiprintf_r+0x192>
 8010c90:	ab03      	add	r3, sp, #12
 8010c92:	462a      	mov	r2, r5
 8010c94:	a904      	add	r1, sp, #16
 8010c96:	4638      	mov	r0, r7
 8010c98:	9300      	str	r3, [sp, #0]
 8010c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8010cd0 <_svfiprintf_r+0x1f0>)
 8010c9c:	f3af 8000 	nop.w
 8010ca0:	1c42      	adds	r2, r0, #1
 8010ca2:	4606      	mov	r6, r0
 8010ca4:	d1d6      	bne.n	8010c54 <_svfiprintf_r+0x174>
 8010ca6:	89ab      	ldrh	r3, [r5, #12]
 8010ca8:	065b      	lsls	r3, r3, #25
 8010caa:	f53f af2d 	bmi.w	8010b08 <_svfiprintf_r+0x28>
 8010cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010cb0:	e72c      	b.n	8010b0c <_svfiprintf_r+0x2c>
 8010cb2:	ab03      	add	r3, sp, #12
 8010cb4:	462a      	mov	r2, r5
 8010cb6:	a904      	add	r1, sp, #16
 8010cb8:	4638      	mov	r0, r7
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	4b04      	ldr	r3, [pc, #16]	@ (8010cd0 <_svfiprintf_r+0x1f0>)
 8010cbe:	f000 f9bf 	bl	8011040 <_printf_i>
 8010cc2:	e7ed      	b.n	8010ca0 <_svfiprintf_r+0x1c0>
 8010cc4:	08011b48 	.word	0x08011b48
 8010cc8:	08011b52 	.word	0x08011b52
 8010ccc:	00000000 	.word	0x00000000
 8010cd0:	08010a29 	.word	0x08010a29
 8010cd4:	08011b4e 	.word	0x08011b4e

08010cd8 <__sfputc_r>:
 8010cd8:	6893      	ldr	r3, [r2, #8]
 8010cda:	3b01      	subs	r3, #1
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	6093      	str	r3, [r2, #8]
 8010ce0:	b410      	push	{r4}
 8010ce2:	da08      	bge.n	8010cf6 <__sfputc_r+0x1e>
 8010ce4:	6994      	ldr	r4, [r2, #24]
 8010ce6:	42a3      	cmp	r3, r4
 8010ce8:	db01      	blt.n	8010cee <__sfputc_r+0x16>
 8010cea:	290a      	cmp	r1, #10
 8010cec:	d103      	bne.n	8010cf6 <__sfputc_r+0x1e>
 8010cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cf2:	f000 bb71 	b.w	80113d8 <__swbuf_r>
 8010cf6:	6813      	ldr	r3, [r2, #0]
 8010cf8:	1c58      	adds	r0, r3, #1
 8010cfa:	6010      	str	r0, [r2, #0]
 8010cfc:	4608      	mov	r0, r1
 8010cfe:	7019      	strb	r1, [r3, #0]
 8010d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d04:	4770      	bx	lr

08010d06 <__sfputs_r>:
 8010d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d08:	4606      	mov	r6, r0
 8010d0a:	460f      	mov	r7, r1
 8010d0c:	4614      	mov	r4, r2
 8010d0e:	18d5      	adds	r5, r2, r3
 8010d10:	42ac      	cmp	r4, r5
 8010d12:	d101      	bne.n	8010d18 <__sfputs_r+0x12>
 8010d14:	2000      	movs	r0, #0
 8010d16:	e007      	b.n	8010d28 <__sfputs_r+0x22>
 8010d18:	463a      	mov	r2, r7
 8010d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d1e:	4630      	mov	r0, r6
 8010d20:	f7ff ffda 	bl	8010cd8 <__sfputc_r>
 8010d24:	1c43      	adds	r3, r0, #1
 8010d26:	d1f3      	bne.n	8010d10 <__sfputs_r+0xa>
 8010d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010d2c <_vfiprintf_r>:
 8010d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d30:	460d      	mov	r5, r1
 8010d32:	b09d      	sub	sp, #116	@ 0x74
 8010d34:	4614      	mov	r4, r2
 8010d36:	4698      	mov	r8, r3
 8010d38:	4606      	mov	r6, r0
 8010d3a:	b118      	cbz	r0, 8010d44 <_vfiprintf_r+0x18>
 8010d3c:	6a03      	ldr	r3, [r0, #32]
 8010d3e:	b90b      	cbnz	r3, 8010d44 <_vfiprintf_r+0x18>
 8010d40:	f7ff fc0e 	bl	8010560 <__sinit>
 8010d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d46:	07d9      	lsls	r1, r3, #31
 8010d48:	d405      	bmi.n	8010d56 <_vfiprintf_r+0x2a>
 8010d4a:	89ab      	ldrh	r3, [r5, #12]
 8010d4c:	059a      	lsls	r2, r3, #22
 8010d4e:	d402      	bmi.n	8010d56 <_vfiprintf_r+0x2a>
 8010d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d52:	f7ff fd62 	bl	801081a <__retarget_lock_acquire_recursive>
 8010d56:	89ab      	ldrh	r3, [r5, #12]
 8010d58:	071b      	lsls	r3, r3, #28
 8010d5a:	d501      	bpl.n	8010d60 <_vfiprintf_r+0x34>
 8010d5c:	692b      	ldr	r3, [r5, #16]
 8010d5e:	b99b      	cbnz	r3, 8010d88 <_vfiprintf_r+0x5c>
 8010d60:	4629      	mov	r1, r5
 8010d62:	4630      	mov	r0, r6
 8010d64:	f000 fb76 	bl	8011454 <__swsetup_r>
 8010d68:	b170      	cbz	r0, 8010d88 <_vfiprintf_r+0x5c>
 8010d6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d6c:	07dc      	lsls	r4, r3, #31
 8010d6e:	d504      	bpl.n	8010d7a <_vfiprintf_r+0x4e>
 8010d70:	f04f 30ff 	mov.w	r0, #4294967295
 8010d74:	b01d      	add	sp, #116	@ 0x74
 8010d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d7a:	89ab      	ldrh	r3, [r5, #12]
 8010d7c:	0598      	lsls	r0, r3, #22
 8010d7e:	d4f7      	bmi.n	8010d70 <_vfiprintf_r+0x44>
 8010d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d82:	f7ff fd4b 	bl	801081c <__retarget_lock_release_recursive>
 8010d86:	e7f3      	b.n	8010d70 <_vfiprintf_r+0x44>
 8010d88:	2300      	movs	r3, #0
 8010d8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d8e:	f04f 0901 	mov.w	r9, #1
 8010d92:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8010f48 <_vfiprintf_r+0x21c>
 8010d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d98:	2320      	movs	r3, #32
 8010d9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d9e:	2330      	movs	r3, #48	@ 0x30
 8010da0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010da4:	4623      	mov	r3, r4
 8010da6:	469a      	mov	sl, r3
 8010da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dac:	b10a      	cbz	r2, 8010db2 <_vfiprintf_r+0x86>
 8010dae:	2a25      	cmp	r2, #37	@ 0x25
 8010db0:	d1f9      	bne.n	8010da6 <_vfiprintf_r+0x7a>
 8010db2:	ebba 0b04 	subs.w	fp, sl, r4
 8010db6:	d00b      	beq.n	8010dd0 <_vfiprintf_r+0xa4>
 8010db8:	465b      	mov	r3, fp
 8010dba:	4622      	mov	r2, r4
 8010dbc:	4629      	mov	r1, r5
 8010dbe:	4630      	mov	r0, r6
 8010dc0:	f7ff ffa1 	bl	8010d06 <__sfputs_r>
 8010dc4:	3001      	adds	r0, #1
 8010dc6:	f000 80a7 	beq.w	8010f18 <_vfiprintf_r+0x1ec>
 8010dca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010dcc:	445a      	add	r2, fp
 8010dce:	9209      	str	r2, [sp, #36]	@ 0x24
 8010dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f000 809f 	beq.w	8010f18 <_vfiprintf_r+0x1ec>
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8010de0:	f10a 0a01 	add.w	sl, sl, #1
 8010de4:	9304      	str	r3, [sp, #16]
 8010de6:	9307      	str	r3, [sp, #28]
 8010de8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010dec:	931a      	str	r3, [sp, #104]	@ 0x68
 8010dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010df2:	4654      	mov	r4, sl
 8010df4:	2205      	movs	r2, #5
 8010df6:	4854      	ldr	r0, [pc, #336]	@ (8010f48 <_vfiprintf_r+0x21c>)
 8010df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dfc:	f000 fbaa 	bl	8011554 <memchr>
 8010e00:	9a04      	ldr	r2, [sp, #16]
 8010e02:	b9d8      	cbnz	r0, 8010e3c <_vfiprintf_r+0x110>
 8010e04:	06d1      	lsls	r1, r2, #27
 8010e06:	bf44      	itt	mi
 8010e08:	2320      	movmi	r3, #32
 8010e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e0e:	0713      	lsls	r3, r2, #28
 8010e10:	bf44      	itt	mi
 8010e12:	232b      	movmi	r3, #43	@ 0x2b
 8010e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e18:	f89a 3000 	ldrb.w	r3, [sl]
 8010e1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e1e:	d015      	beq.n	8010e4c <_vfiprintf_r+0x120>
 8010e20:	9a07      	ldr	r2, [sp, #28]
 8010e22:	4654      	mov	r4, sl
 8010e24:	2000      	movs	r0, #0
 8010e26:	f04f 0c0a 	mov.w	ip, #10
 8010e2a:	4621      	mov	r1, r4
 8010e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e30:	3b30      	subs	r3, #48	@ 0x30
 8010e32:	2b09      	cmp	r3, #9
 8010e34:	d94b      	bls.n	8010ece <_vfiprintf_r+0x1a2>
 8010e36:	b1b0      	cbz	r0, 8010e66 <_vfiprintf_r+0x13a>
 8010e38:	9207      	str	r2, [sp, #28]
 8010e3a:	e014      	b.n	8010e66 <_vfiprintf_r+0x13a>
 8010e3c:	eba0 0308 	sub.w	r3, r0, r8
 8010e40:	46a2      	mov	sl, r4
 8010e42:	fa09 f303 	lsl.w	r3, r9, r3
 8010e46:	4313      	orrs	r3, r2
 8010e48:	9304      	str	r3, [sp, #16]
 8010e4a:	e7d2      	b.n	8010df2 <_vfiprintf_r+0xc6>
 8010e4c:	9b03      	ldr	r3, [sp, #12]
 8010e4e:	1d19      	adds	r1, r3, #4
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	9103      	str	r1, [sp, #12]
 8010e56:	bfbb      	ittet	lt
 8010e58:	425b      	neglt	r3, r3
 8010e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8010e5e:	9307      	strge	r3, [sp, #28]
 8010e60:	9307      	strlt	r3, [sp, #28]
 8010e62:	bfb8      	it	lt
 8010e64:	9204      	strlt	r2, [sp, #16]
 8010e66:	7823      	ldrb	r3, [r4, #0]
 8010e68:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e6a:	d10a      	bne.n	8010e82 <_vfiprintf_r+0x156>
 8010e6c:	7863      	ldrb	r3, [r4, #1]
 8010e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e70:	d132      	bne.n	8010ed8 <_vfiprintf_r+0x1ac>
 8010e72:	9b03      	ldr	r3, [sp, #12]
 8010e74:	3402      	adds	r4, #2
 8010e76:	1d1a      	adds	r2, r3, #4
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e7e:	9203      	str	r2, [sp, #12]
 8010e80:	9305      	str	r3, [sp, #20]
 8010e82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010f58 <_vfiprintf_r+0x22c>
 8010e86:	2203      	movs	r2, #3
 8010e88:	7821      	ldrb	r1, [r4, #0]
 8010e8a:	4650      	mov	r0, sl
 8010e8c:	f000 fb62 	bl	8011554 <memchr>
 8010e90:	b138      	cbz	r0, 8010ea2 <_vfiprintf_r+0x176>
 8010e92:	eba0 000a 	sub.w	r0, r0, sl
 8010e96:	2240      	movs	r2, #64	@ 0x40
 8010e98:	9b04      	ldr	r3, [sp, #16]
 8010e9a:	3401      	adds	r4, #1
 8010e9c:	4082      	lsls	r2, r0
 8010e9e:	4313      	orrs	r3, r2
 8010ea0:	9304      	str	r3, [sp, #16]
 8010ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ea6:	2206      	movs	r2, #6
 8010ea8:	4828      	ldr	r0, [pc, #160]	@ (8010f4c <_vfiprintf_r+0x220>)
 8010eaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010eae:	f000 fb51 	bl	8011554 <memchr>
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	d03f      	beq.n	8010f36 <_vfiprintf_r+0x20a>
 8010eb6:	4b26      	ldr	r3, [pc, #152]	@ (8010f50 <_vfiprintf_r+0x224>)
 8010eb8:	bb1b      	cbnz	r3, 8010f02 <_vfiprintf_r+0x1d6>
 8010eba:	9b03      	ldr	r3, [sp, #12]
 8010ebc:	3307      	adds	r3, #7
 8010ebe:	f023 0307 	bic.w	r3, r3, #7
 8010ec2:	3308      	adds	r3, #8
 8010ec4:	9303      	str	r3, [sp, #12]
 8010ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ec8:	443b      	add	r3, r7
 8010eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ecc:	e76a      	b.n	8010da4 <_vfiprintf_r+0x78>
 8010ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ed2:	460c      	mov	r4, r1
 8010ed4:	2001      	movs	r0, #1
 8010ed6:	e7a8      	b.n	8010e2a <_vfiprintf_r+0xfe>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	3401      	adds	r4, #1
 8010edc:	f04f 0c0a 	mov.w	ip, #10
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	9305      	str	r3, [sp, #20]
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010eea:	3a30      	subs	r2, #48	@ 0x30
 8010eec:	2a09      	cmp	r2, #9
 8010eee:	d903      	bls.n	8010ef8 <_vfiprintf_r+0x1cc>
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d0c6      	beq.n	8010e82 <_vfiprintf_r+0x156>
 8010ef4:	9105      	str	r1, [sp, #20]
 8010ef6:	e7c4      	b.n	8010e82 <_vfiprintf_r+0x156>
 8010ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010efc:	4604      	mov	r4, r0
 8010efe:	2301      	movs	r3, #1
 8010f00:	e7f0      	b.n	8010ee4 <_vfiprintf_r+0x1b8>
 8010f02:	ab03      	add	r3, sp, #12
 8010f04:	462a      	mov	r2, r5
 8010f06:	a904      	add	r1, sp, #16
 8010f08:	4630      	mov	r0, r6
 8010f0a:	9300      	str	r3, [sp, #0]
 8010f0c:	4b11      	ldr	r3, [pc, #68]	@ (8010f54 <_vfiprintf_r+0x228>)
 8010f0e:	f3af 8000 	nop.w
 8010f12:	4607      	mov	r7, r0
 8010f14:	1c78      	adds	r0, r7, #1
 8010f16:	d1d6      	bne.n	8010ec6 <_vfiprintf_r+0x19a>
 8010f18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f1a:	07d9      	lsls	r1, r3, #31
 8010f1c:	d405      	bmi.n	8010f2a <_vfiprintf_r+0x1fe>
 8010f1e:	89ab      	ldrh	r3, [r5, #12]
 8010f20:	059a      	lsls	r2, r3, #22
 8010f22:	d402      	bmi.n	8010f2a <_vfiprintf_r+0x1fe>
 8010f24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f26:	f7ff fc79 	bl	801081c <__retarget_lock_release_recursive>
 8010f2a:	89ab      	ldrh	r3, [r5, #12]
 8010f2c:	065b      	lsls	r3, r3, #25
 8010f2e:	f53f af1f 	bmi.w	8010d70 <_vfiprintf_r+0x44>
 8010f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f34:	e71e      	b.n	8010d74 <_vfiprintf_r+0x48>
 8010f36:	ab03      	add	r3, sp, #12
 8010f38:	462a      	mov	r2, r5
 8010f3a:	a904      	add	r1, sp, #16
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	9300      	str	r3, [sp, #0]
 8010f40:	4b04      	ldr	r3, [pc, #16]	@ (8010f54 <_vfiprintf_r+0x228>)
 8010f42:	f000 f87d 	bl	8011040 <_printf_i>
 8010f46:	e7e4      	b.n	8010f12 <_vfiprintf_r+0x1e6>
 8010f48:	08011b48 	.word	0x08011b48
 8010f4c:	08011b52 	.word	0x08011b52
 8010f50:	00000000 	.word	0x00000000
 8010f54:	08010d07 	.word	0x08010d07
 8010f58:	08011b4e 	.word	0x08011b4e

08010f5c <_printf_common>:
 8010f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f60:	4616      	mov	r6, r2
 8010f62:	4698      	mov	r8, r3
 8010f64:	688a      	ldr	r2, [r1, #8]
 8010f66:	4607      	mov	r7, r0
 8010f68:	690b      	ldr	r3, [r1, #16]
 8010f6a:	460c      	mov	r4, r1
 8010f6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010f70:	4293      	cmp	r3, r2
 8010f72:	bfb8      	it	lt
 8010f74:	4613      	movlt	r3, r2
 8010f76:	6033      	str	r3, [r6, #0]
 8010f78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f7c:	b10a      	cbz	r2, 8010f82 <_printf_common+0x26>
 8010f7e:	3301      	adds	r3, #1
 8010f80:	6033      	str	r3, [r6, #0]
 8010f82:	6823      	ldr	r3, [r4, #0]
 8010f84:	0699      	lsls	r1, r3, #26
 8010f86:	bf42      	ittt	mi
 8010f88:	6833      	ldrmi	r3, [r6, #0]
 8010f8a:	3302      	addmi	r3, #2
 8010f8c:	6033      	strmi	r3, [r6, #0]
 8010f8e:	6825      	ldr	r5, [r4, #0]
 8010f90:	f015 0506 	ands.w	r5, r5, #6
 8010f94:	d106      	bne.n	8010fa4 <_printf_common+0x48>
 8010f96:	f104 0a19 	add.w	sl, r4, #25
 8010f9a:	68e3      	ldr	r3, [r4, #12]
 8010f9c:	6832      	ldr	r2, [r6, #0]
 8010f9e:	1a9b      	subs	r3, r3, r2
 8010fa0:	42ab      	cmp	r3, r5
 8010fa2:	dc2b      	bgt.n	8010ffc <_printf_common+0xa0>
 8010fa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010fa8:	6822      	ldr	r2, [r4, #0]
 8010faa:	3b00      	subs	r3, #0
 8010fac:	bf18      	it	ne
 8010fae:	2301      	movne	r3, #1
 8010fb0:	0692      	lsls	r2, r2, #26
 8010fb2:	d430      	bmi.n	8011016 <_printf_common+0xba>
 8010fb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010fb8:	4641      	mov	r1, r8
 8010fba:	4638      	mov	r0, r7
 8010fbc:	47c8      	blx	r9
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	d023      	beq.n	801100a <_printf_common+0xae>
 8010fc2:	6823      	ldr	r3, [r4, #0]
 8010fc4:	341a      	adds	r4, #26
 8010fc6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8010fca:	f003 0306 	and.w	r3, r3, #6
 8010fce:	2b04      	cmp	r3, #4
 8010fd0:	bf0a      	itet	eq
 8010fd2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8010fd6:	2500      	movne	r5, #0
 8010fd8:	6833      	ldreq	r3, [r6, #0]
 8010fda:	f04f 0600 	mov.w	r6, #0
 8010fde:	bf08      	it	eq
 8010fe0:	1aed      	subeq	r5, r5, r3
 8010fe2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8010fe6:	bf08      	it	eq
 8010fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010fec:	4293      	cmp	r3, r2
 8010fee:	bfc4      	itt	gt
 8010ff0:	1a9b      	subgt	r3, r3, r2
 8010ff2:	18ed      	addgt	r5, r5, r3
 8010ff4:	42b5      	cmp	r5, r6
 8010ff6:	d11a      	bne.n	801102e <_printf_common+0xd2>
 8010ff8:	2000      	movs	r0, #0
 8010ffa:	e008      	b.n	801100e <_printf_common+0xb2>
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	4652      	mov	r2, sl
 8011000:	4641      	mov	r1, r8
 8011002:	4638      	mov	r0, r7
 8011004:	47c8      	blx	r9
 8011006:	3001      	adds	r0, #1
 8011008:	d103      	bne.n	8011012 <_printf_common+0xb6>
 801100a:	f04f 30ff 	mov.w	r0, #4294967295
 801100e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011012:	3501      	adds	r5, #1
 8011014:	e7c1      	b.n	8010f9a <_printf_common+0x3e>
 8011016:	18e1      	adds	r1, r4, r3
 8011018:	1c5a      	adds	r2, r3, #1
 801101a:	2030      	movs	r0, #48	@ 0x30
 801101c:	3302      	adds	r3, #2
 801101e:	4422      	add	r2, r4
 8011020:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011028:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801102c:	e7c2      	b.n	8010fb4 <_printf_common+0x58>
 801102e:	2301      	movs	r3, #1
 8011030:	4622      	mov	r2, r4
 8011032:	4641      	mov	r1, r8
 8011034:	4638      	mov	r0, r7
 8011036:	47c8      	blx	r9
 8011038:	3001      	adds	r0, #1
 801103a:	d0e6      	beq.n	801100a <_printf_common+0xae>
 801103c:	3601      	adds	r6, #1
 801103e:	e7d9      	b.n	8010ff4 <_printf_common+0x98>

08011040 <_printf_i>:
 8011040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011044:	7e0f      	ldrb	r7, [r1, #24]
 8011046:	4691      	mov	r9, r2
 8011048:	4680      	mov	r8, r0
 801104a:	460c      	mov	r4, r1
 801104c:	2f78      	cmp	r7, #120	@ 0x78
 801104e:	469a      	mov	sl, r3
 8011050:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011052:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011056:	d807      	bhi.n	8011068 <_printf_i+0x28>
 8011058:	2f62      	cmp	r7, #98	@ 0x62
 801105a:	d80a      	bhi.n	8011072 <_printf_i+0x32>
 801105c:	2f00      	cmp	r7, #0
 801105e:	f000 80d2 	beq.w	8011206 <_printf_i+0x1c6>
 8011062:	2f58      	cmp	r7, #88	@ 0x58
 8011064:	f000 80b9 	beq.w	80111da <_printf_i+0x19a>
 8011068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801106c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011070:	e03a      	b.n	80110e8 <_printf_i+0xa8>
 8011072:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011076:	2b15      	cmp	r3, #21
 8011078:	d8f6      	bhi.n	8011068 <_printf_i+0x28>
 801107a:	a101      	add	r1, pc, #4	@ (adr r1, 8011080 <_printf_i+0x40>)
 801107c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011080:	080110d9 	.word	0x080110d9
 8011084:	080110ed 	.word	0x080110ed
 8011088:	08011069 	.word	0x08011069
 801108c:	08011069 	.word	0x08011069
 8011090:	08011069 	.word	0x08011069
 8011094:	08011069 	.word	0x08011069
 8011098:	080110ed 	.word	0x080110ed
 801109c:	08011069 	.word	0x08011069
 80110a0:	08011069 	.word	0x08011069
 80110a4:	08011069 	.word	0x08011069
 80110a8:	08011069 	.word	0x08011069
 80110ac:	080111ed 	.word	0x080111ed
 80110b0:	08011117 	.word	0x08011117
 80110b4:	080111a7 	.word	0x080111a7
 80110b8:	08011069 	.word	0x08011069
 80110bc:	08011069 	.word	0x08011069
 80110c0:	0801120f 	.word	0x0801120f
 80110c4:	08011069 	.word	0x08011069
 80110c8:	08011117 	.word	0x08011117
 80110cc:	08011069 	.word	0x08011069
 80110d0:	08011069 	.word	0x08011069
 80110d4:	080111af 	.word	0x080111af
 80110d8:	6833      	ldr	r3, [r6, #0]
 80110da:	1d1a      	adds	r2, r3, #4
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	6032      	str	r2, [r6, #0]
 80110e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80110e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80110e8:	2301      	movs	r3, #1
 80110ea:	e09d      	b.n	8011228 <_printf_i+0x1e8>
 80110ec:	6833      	ldr	r3, [r6, #0]
 80110ee:	6820      	ldr	r0, [r4, #0]
 80110f0:	1d19      	adds	r1, r3, #4
 80110f2:	6031      	str	r1, [r6, #0]
 80110f4:	0606      	lsls	r6, r0, #24
 80110f6:	d501      	bpl.n	80110fc <_printf_i+0xbc>
 80110f8:	681d      	ldr	r5, [r3, #0]
 80110fa:	e003      	b.n	8011104 <_printf_i+0xc4>
 80110fc:	0645      	lsls	r5, r0, #25
 80110fe:	d5fb      	bpl.n	80110f8 <_printf_i+0xb8>
 8011100:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011104:	2d00      	cmp	r5, #0
 8011106:	da03      	bge.n	8011110 <_printf_i+0xd0>
 8011108:	232d      	movs	r3, #45	@ 0x2d
 801110a:	426d      	negs	r5, r5
 801110c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011110:	4859      	ldr	r0, [pc, #356]	@ (8011278 <_printf_i+0x238>)
 8011112:	230a      	movs	r3, #10
 8011114:	e011      	b.n	801113a <_printf_i+0xfa>
 8011116:	6821      	ldr	r1, [r4, #0]
 8011118:	6833      	ldr	r3, [r6, #0]
 801111a:	0608      	lsls	r0, r1, #24
 801111c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011120:	d402      	bmi.n	8011128 <_printf_i+0xe8>
 8011122:	0649      	lsls	r1, r1, #25
 8011124:	bf48      	it	mi
 8011126:	b2ad      	uxthmi	r5, r5
 8011128:	2f6f      	cmp	r7, #111	@ 0x6f
 801112a:	6033      	str	r3, [r6, #0]
 801112c:	4852      	ldr	r0, [pc, #328]	@ (8011278 <_printf_i+0x238>)
 801112e:	bf14      	ite	ne
 8011130:	230a      	movne	r3, #10
 8011132:	2308      	moveq	r3, #8
 8011134:	2100      	movs	r1, #0
 8011136:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801113a:	6866      	ldr	r6, [r4, #4]
 801113c:	2e00      	cmp	r6, #0
 801113e:	60a6      	str	r6, [r4, #8]
 8011140:	bfa2      	ittt	ge
 8011142:	6821      	ldrge	r1, [r4, #0]
 8011144:	f021 0104 	bicge.w	r1, r1, #4
 8011148:	6021      	strge	r1, [r4, #0]
 801114a:	b90d      	cbnz	r5, 8011150 <_printf_i+0x110>
 801114c:	2e00      	cmp	r6, #0
 801114e:	d04b      	beq.n	80111e8 <_printf_i+0x1a8>
 8011150:	4616      	mov	r6, r2
 8011152:	fbb5 f1f3 	udiv	r1, r5, r3
 8011156:	fb03 5711 	mls	r7, r3, r1, r5
 801115a:	5dc7      	ldrb	r7, [r0, r7]
 801115c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011160:	462f      	mov	r7, r5
 8011162:	460d      	mov	r5, r1
 8011164:	42bb      	cmp	r3, r7
 8011166:	d9f4      	bls.n	8011152 <_printf_i+0x112>
 8011168:	2b08      	cmp	r3, #8
 801116a:	d10b      	bne.n	8011184 <_printf_i+0x144>
 801116c:	6823      	ldr	r3, [r4, #0]
 801116e:	07df      	lsls	r7, r3, #31
 8011170:	d508      	bpl.n	8011184 <_printf_i+0x144>
 8011172:	6923      	ldr	r3, [r4, #16]
 8011174:	6861      	ldr	r1, [r4, #4]
 8011176:	4299      	cmp	r1, r3
 8011178:	bfde      	ittt	le
 801117a:	2330      	movle	r3, #48	@ 0x30
 801117c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011180:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011184:	1b92      	subs	r2, r2, r6
 8011186:	6122      	str	r2, [r4, #16]
 8011188:	464b      	mov	r3, r9
 801118a:	aa03      	add	r2, sp, #12
 801118c:	4621      	mov	r1, r4
 801118e:	4640      	mov	r0, r8
 8011190:	f8cd a000 	str.w	sl, [sp]
 8011194:	f7ff fee2 	bl	8010f5c <_printf_common>
 8011198:	3001      	adds	r0, #1
 801119a:	d14a      	bne.n	8011232 <_printf_i+0x1f2>
 801119c:	f04f 30ff 	mov.w	r0, #4294967295
 80111a0:	b004      	add	sp, #16
 80111a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111a6:	6823      	ldr	r3, [r4, #0]
 80111a8:	f043 0320 	orr.w	r3, r3, #32
 80111ac:	6023      	str	r3, [r4, #0]
 80111ae:	2778      	movs	r7, #120	@ 0x78
 80111b0:	4832      	ldr	r0, [pc, #200]	@ (801127c <_printf_i+0x23c>)
 80111b2:	6823      	ldr	r3, [r4, #0]
 80111b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80111b8:	061f      	lsls	r7, r3, #24
 80111ba:	6831      	ldr	r1, [r6, #0]
 80111bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80111c0:	d402      	bmi.n	80111c8 <_printf_i+0x188>
 80111c2:	065f      	lsls	r7, r3, #25
 80111c4:	bf48      	it	mi
 80111c6:	b2ad      	uxthmi	r5, r5
 80111c8:	6031      	str	r1, [r6, #0]
 80111ca:	07d9      	lsls	r1, r3, #31
 80111cc:	bf44      	itt	mi
 80111ce:	f043 0320 	orrmi.w	r3, r3, #32
 80111d2:	6023      	strmi	r3, [r4, #0]
 80111d4:	b11d      	cbz	r5, 80111de <_printf_i+0x19e>
 80111d6:	2310      	movs	r3, #16
 80111d8:	e7ac      	b.n	8011134 <_printf_i+0xf4>
 80111da:	4827      	ldr	r0, [pc, #156]	@ (8011278 <_printf_i+0x238>)
 80111dc:	e7e9      	b.n	80111b2 <_printf_i+0x172>
 80111de:	6823      	ldr	r3, [r4, #0]
 80111e0:	f023 0320 	bic.w	r3, r3, #32
 80111e4:	6023      	str	r3, [r4, #0]
 80111e6:	e7f6      	b.n	80111d6 <_printf_i+0x196>
 80111e8:	4616      	mov	r6, r2
 80111ea:	e7bd      	b.n	8011168 <_printf_i+0x128>
 80111ec:	6833      	ldr	r3, [r6, #0]
 80111ee:	6825      	ldr	r5, [r4, #0]
 80111f0:	1d18      	adds	r0, r3, #4
 80111f2:	6961      	ldr	r1, [r4, #20]
 80111f4:	6030      	str	r0, [r6, #0]
 80111f6:	062e      	lsls	r6, r5, #24
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	d501      	bpl.n	8011200 <_printf_i+0x1c0>
 80111fc:	6019      	str	r1, [r3, #0]
 80111fe:	e002      	b.n	8011206 <_printf_i+0x1c6>
 8011200:	0668      	lsls	r0, r5, #25
 8011202:	d5fb      	bpl.n	80111fc <_printf_i+0x1bc>
 8011204:	8019      	strh	r1, [r3, #0]
 8011206:	2300      	movs	r3, #0
 8011208:	4616      	mov	r6, r2
 801120a:	6123      	str	r3, [r4, #16]
 801120c:	e7bc      	b.n	8011188 <_printf_i+0x148>
 801120e:	6833      	ldr	r3, [r6, #0]
 8011210:	2100      	movs	r1, #0
 8011212:	1d1a      	adds	r2, r3, #4
 8011214:	6032      	str	r2, [r6, #0]
 8011216:	681e      	ldr	r6, [r3, #0]
 8011218:	6862      	ldr	r2, [r4, #4]
 801121a:	4630      	mov	r0, r6
 801121c:	f000 f99a 	bl	8011554 <memchr>
 8011220:	b108      	cbz	r0, 8011226 <_printf_i+0x1e6>
 8011222:	1b80      	subs	r0, r0, r6
 8011224:	6060      	str	r0, [r4, #4]
 8011226:	6863      	ldr	r3, [r4, #4]
 8011228:	6123      	str	r3, [r4, #16]
 801122a:	2300      	movs	r3, #0
 801122c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011230:	e7aa      	b.n	8011188 <_printf_i+0x148>
 8011232:	6923      	ldr	r3, [r4, #16]
 8011234:	4632      	mov	r2, r6
 8011236:	4649      	mov	r1, r9
 8011238:	4640      	mov	r0, r8
 801123a:	47d0      	blx	sl
 801123c:	3001      	adds	r0, #1
 801123e:	d0ad      	beq.n	801119c <_printf_i+0x15c>
 8011240:	6823      	ldr	r3, [r4, #0]
 8011242:	079b      	lsls	r3, r3, #30
 8011244:	d413      	bmi.n	801126e <_printf_i+0x22e>
 8011246:	68e0      	ldr	r0, [r4, #12]
 8011248:	9b03      	ldr	r3, [sp, #12]
 801124a:	4298      	cmp	r0, r3
 801124c:	bfb8      	it	lt
 801124e:	4618      	movlt	r0, r3
 8011250:	e7a6      	b.n	80111a0 <_printf_i+0x160>
 8011252:	2301      	movs	r3, #1
 8011254:	4632      	mov	r2, r6
 8011256:	4649      	mov	r1, r9
 8011258:	4640      	mov	r0, r8
 801125a:	47d0      	blx	sl
 801125c:	3001      	adds	r0, #1
 801125e:	d09d      	beq.n	801119c <_printf_i+0x15c>
 8011260:	3501      	adds	r5, #1
 8011262:	68e3      	ldr	r3, [r4, #12]
 8011264:	9903      	ldr	r1, [sp, #12]
 8011266:	1a5b      	subs	r3, r3, r1
 8011268:	42ab      	cmp	r3, r5
 801126a:	dcf2      	bgt.n	8011252 <_printf_i+0x212>
 801126c:	e7eb      	b.n	8011246 <_printf_i+0x206>
 801126e:	2500      	movs	r5, #0
 8011270:	f104 0619 	add.w	r6, r4, #25
 8011274:	e7f5      	b.n	8011262 <_printf_i+0x222>
 8011276:	bf00      	nop
 8011278:	08011b59 	.word	0x08011b59
 801127c:	08011b6a 	.word	0x08011b6a

08011280 <__sflush_r>:
 8011280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011288:	0716      	lsls	r6, r2, #28
 801128a:	4605      	mov	r5, r0
 801128c:	460c      	mov	r4, r1
 801128e:	d454      	bmi.n	801133a <__sflush_r+0xba>
 8011290:	684b      	ldr	r3, [r1, #4]
 8011292:	2b00      	cmp	r3, #0
 8011294:	dc02      	bgt.n	801129c <__sflush_r+0x1c>
 8011296:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011298:	2b00      	cmp	r3, #0
 801129a:	dd48      	ble.n	801132e <__sflush_r+0xae>
 801129c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801129e:	2e00      	cmp	r6, #0
 80112a0:	d045      	beq.n	801132e <__sflush_r+0xae>
 80112a2:	2300      	movs	r3, #0
 80112a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80112a8:	682f      	ldr	r7, [r5, #0]
 80112aa:	6a21      	ldr	r1, [r4, #32]
 80112ac:	602b      	str	r3, [r5, #0]
 80112ae:	d030      	beq.n	8011312 <__sflush_r+0x92>
 80112b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80112b2:	89a3      	ldrh	r3, [r4, #12]
 80112b4:	0759      	lsls	r1, r3, #29
 80112b6:	d505      	bpl.n	80112c4 <__sflush_r+0x44>
 80112b8:	6863      	ldr	r3, [r4, #4]
 80112ba:	1ad2      	subs	r2, r2, r3
 80112bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80112be:	b10b      	cbz	r3, 80112c4 <__sflush_r+0x44>
 80112c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80112c2:	1ad2      	subs	r2, r2, r3
 80112c4:	2300      	movs	r3, #0
 80112c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112c8:	6a21      	ldr	r1, [r4, #32]
 80112ca:	4628      	mov	r0, r5
 80112cc:	47b0      	blx	r6
 80112ce:	1c43      	adds	r3, r0, #1
 80112d0:	89a3      	ldrh	r3, [r4, #12]
 80112d2:	d106      	bne.n	80112e2 <__sflush_r+0x62>
 80112d4:	6829      	ldr	r1, [r5, #0]
 80112d6:	291d      	cmp	r1, #29
 80112d8:	d82b      	bhi.n	8011332 <__sflush_r+0xb2>
 80112da:	4a2a      	ldr	r2, [pc, #168]	@ (8011384 <__sflush_r+0x104>)
 80112dc:	410a      	asrs	r2, r1
 80112de:	07d6      	lsls	r6, r2, #31
 80112e0:	d427      	bmi.n	8011332 <__sflush_r+0xb2>
 80112e2:	2200      	movs	r2, #0
 80112e4:	04d9      	lsls	r1, r3, #19
 80112e6:	6062      	str	r2, [r4, #4]
 80112e8:	6922      	ldr	r2, [r4, #16]
 80112ea:	6022      	str	r2, [r4, #0]
 80112ec:	d504      	bpl.n	80112f8 <__sflush_r+0x78>
 80112ee:	1c42      	adds	r2, r0, #1
 80112f0:	d101      	bne.n	80112f6 <__sflush_r+0x76>
 80112f2:	682b      	ldr	r3, [r5, #0]
 80112f4:	b903      	cbnz	r3, 80112f8 <__sflush_r+0x78>
 80112f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80112f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80112fa:	602f      	str	r7, [r5, #0]
 80112fc:	b1b9      	cbz	r1, 801132e <__sflush_r+0xae>
 80112fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011302:	4299      	cmp	r1, r3
 8011304:	d002      	beq.n	801130c <__sflush_r+0x8c>
 8011306:	4628      	mov	r0, r5
 8011308:	f7ff fa96 	bl	8010838 <_free_r>
 801130c:	2300      	movs	r3, #0
 801130e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011310:	e00d      	b.n	801132e <__sflush_r+0xae>
 8011312:	2301      	movs	r3, #1
 8011314:	4628      	mov	r0, r5
 8011316:	47b0      	blx	r6
 8011318:	4602      	mov	r2, r0
 801131a:	1c50      	adds	r0, r2, #1
 801131c:	d1c9      	bne.n	80112b2 <__sflush_r+0x32>
 801131e:	682b      	ldr	r3, [r5, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d0c6      	beq.n	80112b2 <__sflush_r+0x32>
 8011324:	2b1d      	cmp	r3, #29
 8011326:	d001      	beq.n	801132c <__sflush_r+0xac>
 8011328:	2b16      	cmp	r3, #22
 801132a:	d11d      	bne.n	8011368 <__sflush_r+0xe8>
 801132c:	602f      	str	r7, [r5, #0]
 801132e:	2000      	movs	r0, #0
 8011330:	e021      	b.n	8011376 <__sflush_r+0xf6>
 8011332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011336:	b21b      	sxth	r3, r3
 8011338:	e01a      	b.n	8011370 <__sflush_r+0xf0>
 801133a:	690f      	ldr	r7, [r1, #16]
 801133c:	2f00      	cmp	r7, #0
 801133e:	d0f6      	beq.n	801132e <__sflush_r+0xae>
 8011340:	0793      	lsls	r3, r2, #30
 8011342:	680e      	ldr	r6, [r1, #0]
 8011344:	600f      	str	r7, [r1, #0]
 8011346:	bf0c      	ite	eq
 8011348:	694b      	ldreq	r3, [r1, #20]
 801134a:	2300      	movne	r3, #0
 801134c:	eba6 0807 	sub.w	r8, r6, r7
 8011350:	608b      	str	r3, [r1, #8]
 8011352:	f1b8 0f00 	cmp.w	r8, #0
 8011356:	ddea      	ble.n	801132e <__sflush_r+0xae>
 8011358:	4643      	mov	r3, r8
 801135a:	463a      	mov	r2, r7
 801135c:	6a21      	ldr	r1, [r4, #32]
 801135e:	4628      	mov	r0, r5
 8011360:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011362:	47b0      	blx	r6
 8011364:	2800      	cmp	r0, #0
 8011366:	dc08      	bgt.n	801137a <__sflush_r+0xfa>
 8011368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801136c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011370:	f04f 30ff 	mov.w	r0, #4294967295
 8011374:	81a3      	strh	r3, [r4, #12]
 8011376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801137a:	4407      	add	r7, r0
 801137c:	eba8 0800 	sub.w	r8, r8, r0
 8011380:	e7e7      	b.n	8011352 <__sflush_r+0xd2>
 8011382:	bf00      	nop
 8011384:	dfbffffe 	.word	0xdfbffffe

08011388 <_fflush_r>:
 8011388:	b538      	push	{r3, r4, r5, lr}
 801138a:	690b      	ldr	r3, [r1, #16]
 801138c:	4605      	mov	r5, r0
 801138e:	460c      	mov	r4, r1
 8011390:	b913      	cbnz	r3, 8011398 <_fflush_r+0x10>
 8011392:	2500      	movs	r5, #0
 8011394:	4628      	mov	r0, r5
 8011396:	bd38      	pop	{r3, r4, r5, pc}
 8011398:	b118      	cbz	r0, 80113a2 <_fflush_r+0x1a>
 801139a:	6a03      	ldr	r3, [r0, #32]
 801139c:	b90b      	cbnz	r3, 80113a2 <_fflush_r+0x1a>
 801139e:	f7ff f8df 	bl	8010560 <__sinit>
 80113a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d0f3      	beq.n	8011392 <_fflush_r+0xa>
 80113aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80113ac:	07d0      	lsls	r0, r2, #31
 80113ae:	d404      	bmi.n	80113ba <_fflush_r+0x32>
 80113b0:	0599      	lsls	r1, r3, #22
 80113b2:	d402      	bmi.n	80113ba <_fflush_r+0x32>
 80113b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113b6:	f7ff fa30 	bl	801081a <__retarget_lock_acquire_recursive>
 80113ba:	4628      	mov	r0, r5
 80113bc:	4621      	mov	r1, r4
 80113be:	f7ff ff5f 	bl	8011280 <__sflush_r>
 80113c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80113c4:	4605      	mov	r5, r0
 80113c6:	07da      	lsls	r2, r3, #31
 80113c8:	d4e4      	bmi.n	8011394 <_fflush_r+0xc>
 80113ca:	89a3      	ldrh	r3, [r4, #12]
 80113cc:	059b      	lsls	r3, r3, #22
 80113ce:	d4e1      	bmi.n	8011394 <_fflush_r+0xc>
 80113d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113d2:	f7ff fa23 	bl	801081c <__retarget_lock_release_recursive>
 80113d6:	e7dd      	b.n	8011394 <_fflush_r+0xc>

080113d8 <__swbuf_r>:
 80113d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113da:	460e      	mov	r6, r1
 80113dc:	4614      	mov	r4, r2
 80113de:	4605      	mov	r5, r0
 80113e0:	b118      	cbz	r0, 80113ea <__swbuf_r+0x12>
 80113e2:	6a03      	ldr	r3, [r0, #32]
 80113e4:	b90b      	cbnz	r3, 80113ea <__swbuf_r+0x12>
 80113e6:	f7ff f8bb 	bl	8010560 <__sinit>
 80113ea:	69a3      	ldr	r3, [r4, #24]
 80113ec:	60a3      	str	r3, [r4, #8]
 80113ee:	89a3      	ldrh	r3, [r4, #12]
 80113f0:	071a      	lsls	r2, r3, #28
 80113f2:	d501      	bpl.n	80113f8 <__swbuf_r+0x20>
 80113f4:	6923      	ldr	r3, [r4, #16]
 80113f6:	b943      	cbnz	r3, 801140a <__swbuf_r+0x32>
 80113f8:	4621      	mov	r1, r4
 80113fa:	4628      	mov	r0, r5
 80113fc:	f000 f82a 	bl	8011454 <__swsetup_r>
 8011400:	b118      	cbz	r0, 801140a <__swbuf_r+0x32>
 8011402:	f04f 37ff 	mov.w	r7, #4294967295
 8011406:	4638      	mov	r0, r7
 8011408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801140a:	6823      	ldr	r3, [r4, #0]
 801140c:	b2f6      	uxtb	r6, r6
 801140e:	6922      	ldr	r2, [r4, #16]
 8011410:	4637      	mov	r7, r6
 8011412:	1a98      	subs	r0, r3, r2
 8011414:	6963      	ldr	r3, [r4, #20]
 8011416:	4283      	cmp	r3, r0
 8011418:	dc05      	bgt.n	8011426 <__swbuf_r+0x4e>
 801141a:	4621      	mov	r1, r4
 801141c:	4628      	mov	r0, r5
 801141e:	f7ff ffb3 	bl	8011388 <_fflush_r>
 8011422:	2800      	cmp	r0, #0
 8011424:	d1ed      	bne.n	8011402 <__swbuf_r+0x2a>
 8011426:	68a3      	ldr	r3, [r4, #8]
 8011428:	3b01      	subs	r3, #1
 801142a:	60a3      	str	r3, [r4, #8]
 801142c:	6823      	ldr	r3, [r4, #0]
 801142e:	1c5a      	adds	r2, r3, #1
 8011430:	6022      	str	r2, [r4, #0]
 8011432:	701e      	strb	r6, [r3, #0]
 8011434:	1c43      	adds	r3, r0, #1
 8011436:	6962      	ldr	r2, [r4, #20]
 8011438:	429a      	cmp	r2, r3
 801143a:	d004      	beq.n	8011446 <__swbuf_r+0x6e>
 801143c:	89a3      	ldrh	r3, [r4, #12]
 801143e:	07db      	lsls	r3, r3, #31
 8011440:	d5e1      	bpl.n	8011406 <__swbuf_r+0x2e>
 8011442:	2e0a      	cmp	r6, #10
 8011444:	d1df      	bne.n	8011406 <__swbuf_r+0x2e>
 8011446:	4621      	mov	r1, r4
 8011448:	4628      	mov	r0, r5
 801144a:	f7ff ff9d 	bl	8011388 <_fflush_r>
 801144e:	2800      	cmp	r0, #0
 8011450:	d0d9      	beq.n	8011406 <__swbuf_r+0x2e>
 8011452:	e7d6      	b.n	8011402 <__swbuf_r+0x2a>

08011454 <__swsetup_r>:
 8011454:	b538      	push	{r3, r4, r5, lr}
 8011456:	4b29      	ldr	r3, [pc, #164]	@ (80114fc <__swsetup_r+0xa8>)
 8011458:	4605      	mov	r5, r0
 801145a:	460c      	mov	r4, r1
 801145c:	6818      	ldr	r0, [r3, #0]
 801145e:	b118      	cbz	r0, 8011468 <__swsetup_r+0x14>
 8011460:	6a03      	ldr	r3, [r0, #32]
 8011462:	b90b      	cbnz	r3, 8011468 <__swsetup_r+0x14>
 8011464:	f7ff f87c 	bl	8010560 <__sinit>
 8011468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801146c:	0719      	lsls	r1, r3, #28
 801146e:	d422      	bmi.n	80114b6 <__swsetup_r+0x62>
 8011470:	06da      	lsls	r2, r3, #27
 8011472:	d407      	bmi.n	8011484 <__swsetup_r+0x30>
 8011474:	2209      	movs	r2, #9
 8011476:	602a      	str	r2, [r5, #0]
 8011478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801147c:	f04f 30ff 	mov.w	r0, #4294967295
 8011480:	81a3      	strh	r3, [r4, #12]
 8011482:	e033      	b.n	80114ec <__swsetup_r+0x98>
 8011484:	0758      	lsls	r0, r3, #29
 8011486:	d512      	bpl.n	80114ae <__swsetup_r+0x5a>
 8011488:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801148a:	b141      	cbz	r1, 801149e <__swsetup_r+0x4a>
 801148c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011490:	4299      	cmp	r1, r3
 8011492:	d002      	beq.n	801149a <__swsetup_r+0x46>
 8011494:	4628      	mov	r0, r5
 8011496:	f7ff f9cf 	bl	8010838 <_free_r>
 801149a:	2300      	movs	r3, #0
 801149c:	6363      	str	r3, [r4, #52]	@ 0x34
 801149e:	89a3      	ldrh	r3, [r4, #12]
 80114a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80114a4:	81a3      	strh	r3, [r4, #12]
 80114a6:	2300      	movs	r3, #0
 80114a8:	6063      	str	r3, [r4, #4]
 80114aa:	6923      	ldr	r3, [r4, #16]
 80114ac:	6023      	str	r3, [r4, #0]
 80114ae:	89a3      	ldrh	r3, [r4, #12]
 80114b0:	f043 0308 	orr.w	r3, r3, #8
 80114b4:	81a3      	strh	r3, [r4, #12]
 80114b6:	6923      	ldr	r3, [r4, #16]
 80114b8:	b94b      	cbnz	r3, 80114ce <__swsetup_r+0x7a>
 80114ba:	89a3      	ldrh	r3, [r4, #12]
 80114bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80114c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80114c4:	d003      	beq.n	80114ce <__swsetup_r+0x7a>
 80114c6:	4621      	mov	r1, r4
 80114c8:	4628      	mov	r0, r5
 80114ca:	f000 f8a4 	bl	8011616 <__smakebuf_r>
 80114ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114d2:	f013 0201 	ands.w	r2, r3, #1
 80114d6:	d00a      	beq.n	80114ee <__swsetup_r+0x9a>
 80114d8:	2200      	movs	r2, #0
 80114da:	60a2      	str	r2, [r4, #8]
 80114dc:	6962      	ldr	r2, [r4, #20]
 80114de:	4252      	negs	r2, r2
 80114e0:	61a2      	str	r2, [r4, #24]
 80114e2:	6922      	ldr	r2, [r4, #16]
 80114e4:	b942      	cbnz	r2, 80114f8 <__swsetup_r+0xa4>
 80114e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80114ea:	d1c5      	bne.n	8011478 <__swsetup_r+0x24>
 80114ec:	bd38      	pop	{r3, r4, r5, pc}
 80114ee:	0799      	lsls	r1, r3, #30
 80114f0:	bf58      	it	pl
 80114f2:	6962      	ldrpl	r2, [r4, #20]
 80114f4:	60a2      	str	r2, [r4, #8]
 80114f6:	e7f4      	b.n	80114e2 <__swsetup_r+0x8e>
 80114f8:	2000      	movs	r0, #0
 80114fa:	e7f7      	b.n	80114ec <__swsetup_r+0x98>
 80114fc:	20000130 	.word	0x20000130

08011500 <memmove>:
 8011500:	4288      	cmp	r0, r1
 8011502:	b510      	push	{r4, lr}
 8011504:	eb01 0402 	add.w	r4, r1, r2
 8011508:	d902      	bls.n	8011510 <memmove+0x10>
 801150a:	4284      	cmp	r4, r0
 801150c:	4623      	mov	r3, r4
 801150e:	d807      	bhi.n	8011520 <memmove+0x20>
 8011510:	1e43      	subs	r3, r0, #1
 8011512:	42a1      	cmp	r1, r4
 8011514:	d008      	beq.n	8011528 <memmove+0x28>
 8011516:	f811 2b01 	ldrb.w	r2, [r1], #1
 801151a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801151e:	e7f8      	b.n	8011512 <memmove+0x12>
 8011520:	4402      	add	r2, r0
 8011522:	4601      	mov	r1, r0
 8011524:	428a      	cmp	r2, r1
 8011526:	d100      	bne.n	801152a <memmove+0x2a>
 8011528:	bd10      	pop	{r4, pc}
 801152a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801152e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011532:	e7f7      	b.n	8011524 <memmove+0x24>

08011534 <_sbrk_r>:
 8011534:	b538      	push	{r3, r4, r5, lr}
 8011536:	2300      	movs	r3, #0
 8011538:	4d05      	ldr	r5, [pc, #20]	@ (8011550 <_sbrk_r+0x1c>)
 801153a:	4604      	mov	r4, r0
 801153c:	4608      	mov	r0, r1
 801153e:	602b      	str	r3, [r5, #0]
 8011540:	f7f0 fc22 	bl	8001d88 <_sbrk>
 8011544:	1c43      	adds	r3, r0, #1
 8011546:	d102      	bne.n	801154e <_sbrk_r+0x1a>
 8011548:	682b      	ldr	r3, [r5, #0]
 801154a:	b103      	cbz	r3, 801154e <_sbrk_r+0x1a>
 801154c:	6023      	str	r3, [r4, #0]
 801154e:	bd38      	pop	{r3, r4, r5, pc}
 8011550:	200113a4 	.word	0x200113a4

08011554 <memchr>:
 8011554:	b2c9      	uxtb	r1, r1
 8011556:	4603      	mov	r3, r0
 8011558:	4402      	add	r2, r0
 801155a:	b510      	push	{r4, lr}
 801155c:	4293      	cmp	r3, r2
 801155e:	4618      	mov	r0, r3
 8011560:	d101      	bne.n	8011566 <memchr+0x12>
 8011562:	2000      	movs	r0, #0
 8011564:	e003      	b.n	801156e <memchr+0x1a>
 8011566:	7804      	ldrb	r4, [r0, #0]
 8011568:	3301      	adds	r3, #1
 801156a:	428c      	cmp	r4, r1
 801156c:	d1f6      	bne.n	801155c <memchr+0x8>
 801156e:	bd10      	pop	{r4, pc}

08011570 <_realloc_r>:
 8011570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011574:	4680      	mov	r8, r0
 8011576:	4615      	mov	r5, r2
 8011578:	460c      	mov	r4, r1
 801157a:	b921      	cbnz	r1, 8011586 <_realloc_r+0x16>
 801157c:	4611      	mov	r1, r2
 801157e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011582:	f7ff b9c5 	b.w	8010910 <_malloc_r>
 8011586:	b92a      	cbnz	r2, 8011594 <_realloc_r+0x24>
 8011588:	f7ff f956 	bl	8010838 <_free_r>
 801158c:	2400      	movs	r4, #0
 801158e:	4620      	mov	r0, r4
 8011590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011594:	f000 f89e 	bl	80116d4 <_malloc_usable_size_r>
 8011598:	4285      	cmp	r5, r0
 801159a:	4606      	mov	r6, r0
 801159c:	d802      	bhi.n	80115a4 <_realloc_r+0x34>
 801159e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80115a2:	d8f4      	bhi.n	801158e <_realloc_r+0x1e>
 80115a4:	4629      	mov	r1, r5
 80115a6:	4640      	mov	r0, r8
 80115a8:	f7ff f9b2 	bl	8010910 <_malloc_r>
 80115ac:	4607      	mov	r7, r0
 80115ae:	2800      	cmp	r0, #0
 80115b0:	d0ec      	beq.n	801158c <_realloc_r+0x1c>
 80115b2:	42b5      	cmp	r5, r6
 80115b4:	462a      	mov	r2, r5
 80115b6:	4621      	mov	r1, r4
 80115b8:	bf28      	it	cs
 80115ba:	4632      	movcs	r2, r6
 80115bc:	f7ff f92f 	bl	801081e <memcpy>
 80115c0:	4621      	mov	r1, r4
 80115c2:	4640      	mov	r0, r8
 80115c4:	463c      	mov	r4, r7
 80115c6:	f7ff f937 	bl	8010838 <_free_r>
 80115ca:	e7e0      	b.n	801158e <_realloc_r+0x1e>

080115cc <__swhatbuf_r>:
 80115cc:	b570      	push	{r4, r5, r6, lr}
 80115ce:	460c      	mov	r4, r1
 80115d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115d4:	b096      	sub	sp, #88	@ 0x58
 80115d6:	4615      	mov	r5, r2
 80115d8:	2900      	cmp	r1, #0
 80115da:	461e      	mov	r6, r3
 80115dc:	da0c      	bge.n	80115f8 <__swhatbuf_r+0x2c>
 80115de:	89a3      	ldrh	r3, [r4, #12]
 80115e0:	2100      	movs	r1, #0
 80115e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80115e6:	bf14      	ite	ne
 80115e8:	2340      	movne	r3, #64	@ 0x40
 80115ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80115ee:	2000      	movs	r0, #0
 80115f0:	6031      	str	r1, [r6, #0]
 80115f2:	602b      	str	r3, [r5, #0]
 80115f4:	b016      	add	sp, #88	@ 0x58
 80115f6:	bd70      	pop	{r4, r5, r6, pc}
 80115f8:	466a      	mov	r2, sp
 80115fa:	f000 f849 	bl	8011690 <_fstat_r>
 80115fe:	2800      	cmp	r0, #0
 8011600:	dbed      	blt.n	80115de <__swhatbuf_r+0x12>
 8011602:	9901      	ldr	r1, [sp, #4]
 8011604:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011608:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801160c:	4259      	negs	r1, r3
 801160e:	4159      	adcs	r1, r3
 8011610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011614:	e7eb      	b.n	80115ee <__swhatbuf_r+0x22>

08011616 <__smakebuf_r>:
 8011616:	898b      	ldrh	r3, [r1, #12]
 8011618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801161a:	079d      	lsls	r5, r3, #30
 801161c:	4606      	mov	r6, r0
 801161e:	460c      	mov	r4, r1
 8011620:	d507      	bpl.n	8011632 <__smakebuf_r+0x1c>
 8011622:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011626:	6023      	str	r3, [r4, #0]
 8011628:	6123      	str	r3, [r4, #16]
 801162a:	2301      	movs	r3, #1
 801162c:	6163      	str	r3, [r4, #20]
 801162e:	b003      	add	sp, #12
 8011630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011632:	ab01      	add	r3, sp, #4
 8011634:	466a      	mov	r2, sp
 8011636:	f7ff ffc9 	bl	80115cc <__swhatbuf_r>
 801163a:	9f00      	ldr	r7, [sp, #0]
 801163c:	4605      	mov	r5, r0
 801163e:	4630      	mov	r0, r6
 8011640:	4639      	mov	r1, r7
 8011642:	f7ff f965 	bl	8010910 <_malloc_r>
 8011646:	b948      	cbnz	r0, 801165c <__smakebuf_r+0x46>
 8011648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801164c:	059a      	lsls	r2, r3, #22
 801164e:	d4ee      	bmi.n	801162e <__smakebuf_r+0x18>
 8011650:	f023 0303 	bic.w	r3, r3, #3
 8011654:	f043 0302 	orr.w	r3, r3, #2
 8011658:	81a3      	strh	r3, [r4, #12]
 801165a:	e7e2      	b.n	8011622 <__smakebuf_r+0xc>
 801165c:	89a3      	ldrh	r3, [r4, #12]
 801165e:	6020      	str	r0, [r4, #0]
 8011660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011664:	81a3      	strh	r3, [r4, #12]
 8011666:	9b01      	ldr	r3, [sp, #4]
 8011668:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801166c:	b15b      	cbz	r3, 8011686 <__smakebuf_r+0x70>
 801166e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011672:	4630      	mov	r0, r6
 8011674:	f000 f81e 	bl	80116b4 <_isatty_r>
 8011678:	b128      	cbz	r0, 8011686 <__smakebuf_r+0x70>
 801167a:	89a3      	ldrh	r3, [r4, #12]
 801167c:	f023 0303 	bic.w	r3, r3, #3
 8011680:	f043 0301 	orr.w	r3, r3, #1
 8011684:	81a3      	strh	r3, [r4, #12]
 8011686:	89a3      	ldrh	r3, [r4, #12]
 8011688:	431d      	orrs	r5, r3
 801168a:	81a5      	strh	r5, [r4, #12]
 801168c:	e7cf      	b.n	801162e <__smakebuf_r+0x18>
	...

08011690 <_fstat_r>:
 8011690:	b538      	push	{r3, r4, r5, lr}
 8011692:	2300      	movs	r3, #0
 8011694:	4d06      	ldr	r5, [pc, #24]	@ (80116b0 <_fstat_r+0x20>)
 8011696:	4604      	mov	r4, r0
 8011698:	4608      	mov	r0, r1
 801169a:	4611      	mov	r1, r2
 801169c:	602b      	str	r3, [r5, #0]
 801169e:	f7f0 fb4a 	bl	8001d36 <_fstat>
 80116a2:	1c43      	adds	r3, r0, #1
 80116a4:	d102      	bne.n	80116ac <_fstat_r+0x1c>
 80116a6:	682b      	ldr	r3, [r5, #0]
 80116a8:	b103      	cbz	r3, 80116ac <_fstat_r+0x1c>
 80116aa:	6023      	str	r3, [r4, #0]
 80116ac:	bd38      	pop	{r3, r4, r5, pc}
 80116ae:	bf00      	nop
 80116b0:	200113a4 	.word	0x200113a4

080116b4 <_isatty_r>:
 80116b4:	b538      	push	{r3, r4, r5, lr}
 80116b6:	2300      	movs	r3, #0
 80116b8:	4d05      	ldr	r5, [pc, #20]	@ (80116d0 <_isatty_r+0x1c>)
 80116ba:	4604      	mov	r4, r0
 80116bc:	4608      	mov	r0, r1
 80116be:	602b      	str	r3, [r5, #0]
 80116c0:	f7f0 fb49 	bl	8001d56 <_isatty>
 80116c4:	1c43      	adds	r3, r0, #1
 80116c6:	d102      	bne.n	80116ce <_isatty_r+0x1a>
 80116c8:	682b      	ldr	r3, [r5, #0]
 80116ca:	b103      	cbz	r3, 80116ce <_isatty_r+0x1a>
 80116cc:	6023      	str	r3, [r4, #0]
 80116ce:	bd38      	pop	{r3, r4, r5, pc}
 80116d0:	200113a4 	.word	0x200113a4

080116d4 <_malloc_usable_size_r>:
 80116d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116d8:	1f18      	subs	r0, r3, #4
 80116da:	2b00      	cmp	r3, #0
 80116dc:	bfbc      	itt	lt
 80116de:	580b      	ldrlt	r3, [r1, r0]
 80116e0:	18c0      	addlt	r0, r0, r3
 80116e2:	4770      	bx	lr

080116e4 <_init>:
 80116e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116e6:	bf00      	nop
 80116e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116ea:	bc08      	pop	{r3}
 80116ec:	469e      	mov	lr, r3
 80116ee:	4770      	bx	lr

080116f0 <_fini>:
 80116f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116f2:	bf00      	nop
 80116f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116f6:	bc08      	pop	{r3}
 80116f8:	469e      	mov	lr, r3
 80116fa:	4770      	bx	lr
